
Onedof_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e028  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800e200  0800e200  0000f200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e2e8  0800e2e8  00010320  2**0
                  CONTENTS
  4 .ARM          00000008  0800e2e8  0800e2e8  0000f2e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e2f0  0800e2f0  00010320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e2f0  0800e2f0  0000f2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e2f4  0800e2f4  0000f2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000320  20000000  0800e2f8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001454  20000320  0800e618  00010320  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001774  0800e618  00010774  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010320  2**0
                  CONTENTS, READONLY
 12 .debug_info   000260b2  00000000  00000000  00010350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043f2  00000000  00000000  00036402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001970  00000000  00000000  0003a7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013d5  00000000  00000000  0003c168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b989  00000000  00000000  0003d53d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000270a1  00000000  00000000  00068ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001174d2  00000000  00000000  0008ff67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a7439  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007134  00000000  00000000  001a747c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001ae5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000320 	.word	0x20000320
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800e1e8 	.word	0x0800e1e8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000324 	.word	0x20000324
 8000214:	0800e1e8 	.word	0x0800e1e8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2uiz>:
 8000b40:	004a      	lsls	r2, r1, #1
 8000b42:	d211      	bcs.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b48:	d211      	bcs.n	8000b6e <__aeabi_d2uiz+0x2e>
 8000b4a:	d50d      	bpl.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d40e      	bmi.n	8000b74 <__aeabi_d2uiz+0x34>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_d2uiz+0x3a>
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2f>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b88:	bf24      	itt	cs
 8000b8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b92:	d90d      	bls.n	8000bb0 <__aeabi_d2f+0x30>
 8000b94:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ba4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba8:	bf08      	it	eq
 8000baa:	f020 0001 	biceq.w	r0, r0, #1
 8000bae:	4770      	bx	lr
 8000bb0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bb4:	d121      	bne.n	8000bfa <__aeabi_d2f+0x7a>
 8000bb6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bba:	bfbc      	itt	lt
 8000bbc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	4770      	bxlt	lr
 8000bc2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bc6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bca:	f1c2 0218 	rsb	r2, r2, #24
 8000bce:	f1c2 0c20 	rsb	ip, r2, #32
 8000bd2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bda:	bf18      	it	ne
 8000bdc:	f040 0001 	orrne.w	r0, r0, #1
 8000be0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bec:	ea40 000c 	orr.w	r0, r0, ip
 8000bf0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf8:	e7cc      	b.n	8000b94 <__aeabi_d2f+0x14>
 8000bfa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfe:	d107      	bne.n	8000c10 <__aeabi_d2f+0x90>
 8000c00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c04:	bf1e      	ittt	ne
 8000c06:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c0a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c0e:	4770      	bxne	lr
 8000c10:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c14:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c18:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__aeabi_uldivmod>:
 8000c20:	b953      	cbnz	r3, 8000c38 <__aeabi_uldivmod+0x18>
 8000c22:	b94a      	cbnz	r2, 8000c38 <__aeabi_uldivmod+0x18>
 8000c24:	2900      	cmp	r1, #0
 8000c26:	bf08      	it	eq
 8000c28:	2800      	cmpeq	r0, #0
 8000c2a:	bf1c      	itt	ne
 8000c2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c30:	f04f 30ff 	movne.w	r0, #4294967295
 8000c34:	f000 b96a 	b.w	8000f0c <__aeabi_idiv0>
 8000c38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c40:	f000 f806 	bl	8000c50 <__udivmoddi4>
 8000c44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4c:	b004      	add	sp, #16
 8000c4e:	4770      	bx	lr

08000c50 <__udivmoddi4>:
 8000c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c54:	9d08      	ldr	r5, [sp, #32]
 8000c56:	460c      	mov	r4, r1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d14e      	bne.n	8000cfa <__udivmoddi4+0xaa>
 8000c5c:	4694      	mov	ip, r2
 8000c5e:	458c      	cmp	ip, r1
 8000c60:	4686      	mov	lr, r0
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	d962      	bls.n	8000d2e <__udivmoddi4+0xde>
 8000c68:	b14a      	cbz	r2, 8000c7e <__udivmoddi4+0x2e>
 8000c6a:	f1c2 0320 	rsb	r3, r2, #32
 8000c6e:	4091      	lsls	r1, r2
 8000c70:	fa20 f303 	lsr.w	r3, r0, r3
 8000c74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c78:	4319      	orrs	r1, r3
 8000c7a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c82:	fa1f f68c 	uxth.w	r6, ip
 8000c86:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c8e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c96:	fb04 f106 	mul.w	r1, r4, r6
 8000c9a:	4299      	cmp	r1, r3
 8000c9c:	d90a      	bls.n	8000cb4 <__udivmoddi4+0x64>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ca6:	f080 8112 	bcs.w	8000ece <__udivmoddi4+0x27e>
 8000caa:	4299      	cmp	r1, r3
 8000cac:	f240 810f 	bls.w	8000ece <__udivmoddi4+0x27e>
 8000cb0:	3c02      	subs	r4, #2
 8000cb2:	4463      	add	r3, ip
 8000cb4:	1a59      	subs	r1, r3, r1
 8000cb6:	fa1f f38e 	uxth.w	r3, lr
 8000cba:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbe:	fb07 1110 	mls	r1, r7, r0, r1
 8000cc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc6:	fb00 f606 	mul.w	r6, r0, r6
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	d90a      	bls.n	8000ce4 <__udivmoddi4+0x94>
 8000cce:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cd6:	f080 80fc 	bcs.w	8000ed2 <__udivmoddi4+0x282>
 8000cda:	429e      	cmp	r6, r3
 8000cdc:	f240 80f9 	bls.w	8000ed2 <__udivmoddi4+0x282>
 8000ce0:	4463      	add	r3, ip
 8000ce2:	3802      	subs	r0, #2
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cea:	2100      	movs	r1, #0
 8000cec:	b11d      	cbz	r5, 8000cf6 <__udivmoddi4+0xa6>
 8000cee:	40d3      	lsrs	r3, r2
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d905      	bls.n	8000d0a <__udivmoddi4+0xba>
 8000cfe:	b10d      	cbz	r5, 8000d04 <__udivmoddi4+0xb4>
 8000d00:	e9c5 0100 	strd	r0, r1, [r5]
 8000d04:	2100      	movs	r1, #0
 8000d06:	4608      	mov	r0, r1
 8000d08:	e7f5      	b.n	8000cf6 <__udivmoddi4+0xa6>
 8000d0a:	fab3 f183 	clz	r1, r3
 8000d0e:	2900      	cmp	r1, #0
 8000d10:	d146      	bne.n	8000da0 <__udivmoddi4+0x150>
 8000d12:	42a3      	cmp	r3, r4
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xcc>
 8000d16:	4290      	cmp	r0, r2
 8000d18:	f0c0 80f0 	bcc.w	8000efc <__udivmoddi4+0x2ac>
 8000d1c:	1a86      	subs	r6, r0, r2
 8000d1e:	eb64 0303 	sbc.w	r3, r4, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	2d00      	cmp	r5, #0
 8000d26:	d0e6      	beq.n	8000cf6 <__udivmoddi4+0xa6>
 8000d28:	e9c5 6300 	strd	r6, r3, [r5]
 8000d2c:	e7e3      	b.n	8000cf6 <__udivmoddi4+0xa6>
 8000d2e:	2a00      	cmp	r2, #0
 8000d30:	f040 8090 	bne.w	8000e54 <__udivmoddi4+0x204>
 8000d34:	eba1 040c 	sub.w	r4, r1, ip
 8000d38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d3c:	fa1f f78c 	uxth.w	r7, ip
 8000d40:	2101      	movs	r1, #1
 8000d42:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d46:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d4a:	fb08 4416 	mls	r4, r8, r6, r4
 8000d4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d52:	fb07 f006 	mul.w	r0, r7, r6
 8000d56:	4298      	cmp	r0, r3
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x11c>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x11a>
 8000d64:	4298      	cmp	r0, r3
 8000d66:	f200 80cd 	bhi.w	8000f04 <__udivmoddi4+0x2b4>
 8000d6a:	4626      	mov	r6, r4
 8000d6c:	1a1c      	subs	r4, r3, r0
 8000d6e:	fa1f f38e 	uxth.w	r3, lr
 8000d72:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d76:	fb08 4410 	mls	r4, r8, r0, r4
 8000d7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7e:	fb00 f707 	mul.w	r7, r0, r7
 8000d82:	429f      	cmp	r7, r3
 8000d84:	d908      	bls.n	8000d98 <__udivmoddi4+0x148>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x146>
 8000d90:	429f      	cmp	r7, r3
 8000d92:	f200 80b0 	bhi.w	8000ef6 <__udivmoddi4+0x2a6>
 8000d96:	4620      	mov	r0, r4
 8000d98:	1bdb      	subs	r3, r3, r7
 8000d9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d9e:	e7a5      	b.n	8000cec <__udivmoddi4+0x9c>
 8000da0:	f1c1 0620 	rsb	r6, r1, #32
 8000da4:	408b      	lsls	r3, r1
 8000da6:	fa22 f706 	lsr.w	r7, r2, r6
 8000daa:	431f      	orrs	r7, r3
 8000dac:	fa20 fc06 	lsr.w	ip, r0, r6
 8000db0:	fa04 f301 	lsl.w	r3, r4, r1
 8000db4:	ea43 030c 	orr.w	r3, r3, ip
 8000db8:	40f4      	lsrs	r4, r6
 8000dba:	fa00 f801 	lsl.w	r8, r0, r1
 8000dbe:	0c38      	lsrs	r0, r7, #16
 8000dc0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dc4:	fbb4 fef0 	udiv	lr, r4, r0
 8000dc8:	fa1f fc87 	uxth.w	ip, r7
 8000dcc:	fb00 441e 	mls	r4, r0, lr, r4
 8000dd0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd4:	fb0e f90c 	mul.w	r9, lr, ip
 8000dd8:	45a1      	cmp	r9, r4
 8000dda:	fa02 f201 	lsl.w	r2, r2, r1
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x1a6>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000de6:	f080 8084 	bcs.w	8000ef2 <__udivmoddi4+0x2a2>
 8000dea:	45a1      	cmp	r9, r4
 8000dec:	f240 8081 	bls.w	8000ef2 <__udivmoddi4+0x2a2>
 8000df0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	eba4 0409 	sub.w	r4, r4, r9
 8000dfa:	fa1f f983 	uxth.w	r9, r3
 8000dfe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e02:	fb00 4413 	mls	r4, r0, r3, r4
 8000e06:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e0e:	45a4      	cmp	ip, r4
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x1d2>
 8000e12:	193c      	adds	r4, r7, r4
 8000e14:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e18:	d267      	bcs.n	8000eea <__udivmoddi4+0x29a>
 8000e1a:	45a4      	cmp	ip, r4
 8000e1c:	d965      	bls.n	8000eea <__udivmoddi4+0x29a>
 8000e1e:	3b02      	subs	r3, #2
 8000e20:	443c      	add	r4, r7
 8000e22:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e26:	fba0 9302 	umull	r9, r3, r0, r2
 8000e2a:	eba4 040c 	sub.w	r4, r4, ip
 8000e2e:	429c      	cmp	r4, r3
 8000e30:	46ce      	mov	lr, r9
 8000e32:	469c      	mov	ip, r3
 8000e34:	d351      	bcc.n	8000eda <__udivmoddi4+0x28a>
 8000e36:	d04e      	beq.n	8000ed6 <__udivmoddi4+0x286>
 8000e38:	b155      	cbz	r5, 8000e50 <__udivmoddi4+0x200>
 8000e3a:	ebb8 030e 	subs.w	r3, r8, lr
 8000e3e:	eb64 040c 	sbc.w	r4, r4, ip
 8000e42:	fa04 f606 	lsl.w	r6, r4, r6
 8000e46:	40cb      	lsrs	r3, r1
 8000e48:	431e      	orrs	r6, r3
 8000e4a:	40cc      	lsrs	r4, r1
 8000e4c:	e9c5 6400 	strd	r6, r4, [r5]
 8000e50:	2100      	movs	r1, #0
 8000e52:	e750      	b.n	8000cf6 <__udivmoddi4+0xa6>
 8000e54:	f1c2 0320 	rsb	r3, r2, #32
 8000e58:	fa20 f103 	lsr.w	r1, r0, r3
 8000e5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e60:	fa24 f303 	lsr.w	r3, r4, r3
 8000e64:	4094      	lsls	r4, r2
 8000e66:	430c      	orrs	r4, r1
 8000e68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e6c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e70:	fa1f f78c 	uxth.w	r7, ip
 8000e74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e78:	fb08 3110 	mls	r1, r8, r0, r3
 8000e7c:	0c23      	lsrs	r3, r4, #16
 8000e7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e82:	fb00 f107 	mul.w	r1, r0, r7
 8000e86:	4299      	cmp	r1, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x24c>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e92:	d22c      	bcs.n	8000eee <__udivmoddi4+0x29e>
 8000e94:	4299      	cmp	r1, r3
 8000e96:	d92a      	bls.n	8000eee <__udivmoddi4+0x29e>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	1a5b      	subs	r3, r3, r1
 8000e9e:	b2a4      	uxth	r4, r4
 8000ea0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ea4:	fb08 3311 	mls	r3, r8, r1, r3
 8000ea8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000eac:	fb01 f307 	mul.w	r3, r1, r7
 8000eb0:	42a3      	cmp	r3, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x276>
 8000eb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ebc:	d213      	bcs.n	8000ee6 <__udivmoddi4+0x296>
 8000ebe:	42a3      	cmp	r3, r4
 8000ec0:	d911      	bls.n	8000ee6 <__udivmoddi4+0x296>
 8000ec2:	3902      	subs	r1, #2
 8000ec4:	4464      	add	r4, ip
 8000ec6:	1ae4      	subs	r4, r4, r3
 8000ec8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ecc:	e739      	b.n	8000d42 <__udivmoddi4+0xf2>
 8000ece:	4604      	mov	r4, r0
 8000ed0:	e6f0      	b.n	8000cb4 <__udivmoddi4+0x64>
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e706      	b.n	8000ce4 <__udivmoddi4+0x94>
 8000ed6:	45c8      	cmp	r8, r9
 8000ed8:	d2ae      	bcs.n	8000e38 <__udivmoddi4+0x1e8>
 8000eda:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ede:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ee2:	3801      	subs	r0, #1
 8000ee4:	e7a8      	b.n	8000e38 <__udivmoddi4+0x1e8>
 8000ee6:	4631      	mov	r1, r6
 8000ee8:	e7ed      	b.n	8000ec6 <__udivmoddi4+0x276>
 8000eea:	4603      	mov	r3, r0
 8000eec:	e799      	b.n	8000e22 <__udivmoddi4+0x1d2>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e7d4      	b.n	8000e9c <__udivmoddi4+0x24c>
 8000ef2:	46d6      	mov	lr, sl
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1a6>
 8000ef6:	4463      	add	r3, ip
 8000ef8:	3802      	subs	r0, #2
 8000efa:	e74d      	b.n	8000d98 <__udivmoddi4+0x148>
 8000efc:	4606      	mov	r6, r0
 8000efe:	4623      	mov	r3, r4
 8000f00:	4608      	mov	r0, r1
 8000f02:	e70f      	b.n	8000d24 <__udivmoddi4+0xd4>
 8000f04:	3e02      	subs	r6, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	e730      	b.n	8000d6c <__udivmoddi4+0x11c>
 8000f0a:	bf00      	nop

08000f0c <__aeabi_idiv0>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <Vacuum_Status>:
uint16_t countPlace = 0;
uint16_t state = 0;
uint8_t set_shelves_state = 0;
ModbusHandleTypedef hmodbus;

void Vacuum_Status(EFF* eff){
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
    //Vacuum On
    if (registerFrame[0x02].U16 == 1){
 8000f18:	4b0f      	ldr	r3, [pc, #60]	@ (8000f58 <Vacuum_Status+0x48>)
 8000f1a:	889b      	ldrh	r3, [r3, #4]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d10b      	bne.n	8000f38 <Vacuum_Status+0x28>
        strcpy(Vacuum, "On");
 8000f20:	4b0e      	ldr	r3, [pc, #56]	@ (8000f5c <Vacuum_Status+0x4c>)
 8000f22:	4a0f      	ldr	r2, [pc, #60]	@ (8000f60 <Vacuum_Status+0x50>)
 8000f24:	6812      	ldr	r2, [r2, #0]
 8000f26:	4611      	mov	r1, r2
 8000f28:	8019      	strh	r1, [r3, #0]
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	0c12      	lsrs	r2, r2, #16
 8000f2e:	701a      	strb	r2, [r3, #0]
        eff -> solenoid_command[0] = 1;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2201      	movs	r2, #1
 8000f34:	709a      	strb	r2, [r3, #2]
    //Vacuum Off
    else if (registerFrame[0x02].U16 == 0){
        strcpy(Vacuum, "Off");
        eff -> solenoid_command[0] = 0;
    }
}
 8000f36:	e009      	b.n	8000f4c <Vacuum_Status+0x3c>
    else if (registerFrame[0x02].U16 == 0){
 8000f38:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <Vacuum_Status+0x48>)
 8000f3a:	889b      	ldrh	r3, [r3, #4]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d105      	bne.n	8000f4c <Vacuum_Status+0x3c>
        strcpy(Vacuum, "Off");
 8000f40:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <Vacuum_Status+0x4c>)
 8000f42:	4a08      	ldr	r2, [pc, #32]	@ (8000f64 <Vacuum_Status+0x54>)
 8000f44:	601a      	str	r2, [r3, #0]
        eff -> solenoid_command[0] = 0;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	709a      	strb	r2, [r3, #2]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	20000ec4 	.word	0x20000ec4
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	0800e200 	.word	0x0800e200
 8000f64:	0066664f 	.word	0x0066664f

08000f68 <Gripper_Movement_Status>:

void Gripper_Movement_Status(EFF* eff){
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
    //Movement Forward (push)
    if (registerFrame[0x03].U16 == 1){
 8000f70:	4b2a      	ldr	r3, [pc, #168]	@ (800101c <Gripper_Movement_Status+0xb4>)
 8000f72:	88db      	ldrh	r3, [r3, #6]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d123      	bne.n	8000fc0 <Gripper_Movement_Status+0x58>
        strcpy(Gripper, "Forward");
 8000f78:	4b29      	ldr	r3, [pc, #164]	@ (8001020 <Gripper_Movement_Status+0xb8>)
 8000f7a:	4a2a      	ldr	r2, [pc, #168]	@ (8001024 <Gripper_Movement_Status+0xbc>)
 8000f7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f80:	e883 0003 	stmia.w	r3, {r0, r1}
        // if pull reed switch is activate
        if(eff -> actual_status[0] == 1 && eff -> actual_status[1] == 0){
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d10a      	bne.n	8000fa2 <Gripper_Movement_Status+0x3a>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	785b      	ldrb	r3, [r3, #1]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d106      	bne.n	8000fa2 <Gripper_Movement_Status+0x3a>
			eff -> solenoid_command[1] = 1;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2201      	movs	r2, #1
 8000f98:	70da      	strb	r2, [r3, #3]
			eff -> solenoid_command[2] = 0;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	711a      	strb	r2, [r3, #4]
 8000fa0:	e035      	b.n	800100e <Gripper_Movement_Status+0xa6>
        }
        // if push reed switch is activate
        else if(eff -> actual_status[0] == 0 && eff -> actual_status[1] == 1){
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d131      	bne.n	800100e <Gripper_Movement_Status+0xa6>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	785b      	ldrb	r3, [r3, #1]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d12d      	bne.n	800100e <Gripper_Movement_Status+0xa6>
        	eff -> solenoid_command[1] = 0;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	70da      	strb	r2, [r3, #3]
			eff -> solenoid_command[2] = 0;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	711a      	strb	r2, [r3, #4]
        else if(eff -> actual_status[0] == 0 && eff -> actual_status[1] == 1){
        	eff -> solenoid_command[1] = 0;
			eff -> solenoid_command[2] = 1;
        }
    }
}
 8000fbe:	e026      	b.n	800100e <Gripper_Movement_Status+0xa6>
    else if (registerFrame[0x03].U16 == 0){
 8000fc0:	4b16      	ldr	r3, [pc, #88]	@ (800101c <Gripper_Movement_Status+0xb4>)
 8000fc2:	88db      	ldrh	r3, [r3, #6]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d122      	bne.n	800100e <Gripper_Movement_Status+0xa6>
        strcpy(Gripper, "Backward");
 8000fc8:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <Gripper_Movement_Status+0xb8>)
 8000fca:	4a17      	ldr	r2, [pc, #92]	@ (8001028 <Gripper_Movement_Status+0xc0>)
 8000fcc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fce:	c303      	stmia	r3!, {r0, r1}
 8000fd0:	701a      	strb	r2, [r3, #0]
        if(eff -> actual_status[0] == 1 && eff -> actual_status[1] == 0){
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d10a      	bne.n	8000ff0 <Gripper_Movement_Status+0x88>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	785b      	ldrb	r3, [r3, #1]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d106      	bne.n	8000ff0 <Gripper_Movement_Status+0x88>
			eff -> solenoid_command[1] = 0;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	70da      	strb	r2, [r3, #3]
			eff -> solenoid_command[2] = 0;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	711a      	strb	r2, [r3, #4]
 8000fee:	e00e      	b.n	800100e <Gripper_Movement_Status+0xa6>
        else if(eff -> actual_status[0] == 0 && eff -> actual_status[1] == 1){
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d10a      	bne.n	800100e <Gripper_Movement_Status+0xa6>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	785b      	ldrb	r3, [r3, #1]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d106      	bne.n	800100e <Gripper_Movement_Status+0xa6>
        	eff -> solenoid_command[1] = 0;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	70da      	strb	r2, [r3, #3]
			eff -> solenoid_command[2] = 1;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2201      	movs	r2, #1
 800100a:	711a      	strb	r2, [r3, #4]
}
 800100c:	e7ff      	b.n	800100e <Gripper_Movement_Status+0xa6>
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000ec4 	.word	0x20000ec4
 8001020:	2000000c 	.word	0x2000000c
 8001024:	0800e204 	.word	0x0800e204
 8001028:	0800e20c 	.word	0x0800e20c

0800102c <Set_Shelves>:

uint16_t Set_Shelves(){
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
    //Set shelve
    if (registerFrame[0x01].U16 == 1){
 8001030:	4b0d      	ldr	r3, [pc, #52]	@ (8001068 <Set_Shelves+0x3c>)
 8001032:	885b      	ldrh	r3, [r3, #2]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d110      	bne.n	800105a <Set_Shelves+0x2e>
    	state = 1;
 8001038:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <Set_Shelves+0x40>)
 800103a:	2201      	movs	r2, #1
 800103c:	801a      	strh	r2, [r3, #0]
        strcpy(Shelves, "SET");
 800103e:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <Set_Shelves+0x44>)
 8001040:	4a0c      	ldr	r2, [pc, #48]	@ (8001074 <Set_Shelves+0x48>)
 8001042:	601a      	str	r2, [r3, #0]
        registerFrame[0x01].U16 = 0;
 8001044:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <Set_Shelves+0x3c>)
 8001046:	2200      	movs	r2, #0
 8001048:	805a      	strh	r2, [r3, #2]
        registerFrame[0x10].U16 = 1;
 800104a:	4b07      	ldr	r3, [pc, #28]	@ (8001068 <Set_Shelves+0x3c>)
 800104c:	2201      	movs	r2, #1
 800104e:	841a      	strh	r2, [r3, #32]
        set_shelves_state = 1;
 8001050:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <Set_Shelves+0x4c>)
 8001052:	2201      	movs	r2, #1
 8001054:	701a      	strb	r2, [r3, #0]
        return 1;
 8001056:	2301      	movs	r3, #1
 8001058:	e000      	b.n	800105c <Set_Shelves+0x30>
    }
    else{return 0;}
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000ec4 	.word	0x20000ec4
 800106c:	20000356 	.word	0x20000356
 8001070:	20000020 	.word	0x20000020
 8001074:	00544553 	.word	0x00544553
 8001078:	20000358 	.word	0x20000358

0800107c <Set_Goal_Point>:

// wait for Data type check
float Set_Goal_Point(){
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
	return (float)registerFrame[0x30].U16 / 10.0;
 8001080:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <Set_Goal_Point+0x2c>)
 8001082:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8001086:	ee07 3a90 	vmov	s15, r3
 800108a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800108e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001092:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001096:	eef0 7a66 	vmov.f32	s15, s13
}
 800109a:	eeb0 0a67 	vmov.f32	s0, s15
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000ec4 	.word	0x20000ec4

080010ac <Run_Point_Mode>:

uint16_t Run_Point_Mode(){
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
	if (registerFrame[0x01].U16 == 8){
 80010b0:	4b07      	ldr	r3, [pc, #28]	@ (80010d0 <Run_Point_Mode+0x24>)
 80010b2:	885b      	ldrh	r3, [r3, #2]
 80010b4:	2b08      	cmp	r3, #8
 80010b6:	d104      	bne.n	80010c2 <Run_Point_Mode+0x16>
		registerFrame[0x01].U16 = 0;
 80010b8:	4b05      	ldr	r3, [pc, #20]	@ (80010d0 <Run_Point_Mode+0x24>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	805a      	strh	r2, [r3, #2]
		return 1;
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <Run_Point_Mode+0x18>
	}else{return 0;}
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000ec4 	.word	0x20000ec4

080010d4 <Set_Home>:

void Set_Home(){
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
	if(registerFrame[0x01].U16 == 2){
 80010d8:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <Set_Home+0x28>)
 80010da:	885b      	ldrh	r3, [r3, #2]
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d108      	bne.n	80010f2 <Set_Home+0x1e>
		state = 2;
 80010e0:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <Set_Home+0x2c>)
 80010e2:	2202      	movs	r2, #2
 80010e4:	801a      	strh	r2, [r3, #0]
		strcpy(Home, "Homing...");
 80010e6:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <Set_Home+0x30>)
 80010e8:	4a07      	ldr	r2, [pc, #28]	@ (8001108 <Set_Home+0x34>)
 80010ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80010ec:	c303      	stmia	r3!, {r0, r1}
 80010ee:	801a      	strh	r2, [r3, #0]
 80010f0:	e000      	b.n	80010f4 <Set_Home+0x20>
	}
	else{
		return;
 80010f2:	bf00      	nop
	}
}
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	20000ec4 	.word	0x20000ec4
 8001100:	20000356 	.word	0x20000356
 8001104:	20000054 	.word	0x20000054
 8001108:	0800e218 	.word	0x0800e218

0800110c <SetPick_PlaceOrder>:
void SetPick_PlaceOrder() {
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
    if (registerFrame[0x21].U16 != 00000 && registerFrame[0x22].U16 != 00000 ) {
 8001110:	4bab      	ldr	r3, [pc, #684]	@ (80013c0 <SetPick_PlaceOrder+0x2b4>)
 8001112:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001116:	2b00      	cmp	r3, #0
 8001118:	f000 8176 	beq.w	8001408 <SetPick_PlaceOrder+0x2fc>
 800111c:	4ba8      	ldr	r3, [pc, #672]	@ (80013c0 <SetPick_PlaceOrder+0x2b4>)
 800111e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001122:	2b00      	cmp	r3, #0
 8001124:	f000 8170 	beq.w	8001408 <SetPick_PlaceOrder+0x2fc>
    	strcpy(Order, "Pick");
 8001128:	4ba6      	ldr	r3, [pc, #664]	@ (80013c4 <SetPick_PlaceOrder+0x2b8>)
 800112a:	4aa7      	ldr	r2, [pc, #668]	@ (80013c8 <SetPick_PlaceOrder+0x2bc>)
 800112c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001130:	6018      	str	r0, [r3, #0]
 8001132:	3304      	adds	r3, #4
 8001134:	7019      	strb	r1, [r3, #0]
    	Pick[0] = registerFrame[0x21].U16/10000;
 8001136:	4ba2      	ldr	r3, [pc, #648]	@ (80013c0 <SetPick_PlaceOrder+0x2b4>)
 8001138:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 800113c:	4aa3      	ldr	r2, [pc, #652]	@ (80013cc <SetPick_PlaceOrder+0x2c0>)
 800113e:	fba2 2303 	umull	r2, r3, r2, r3
 8001142:	0b5b      	lsrs	r3, r3, #13
 8001144:	b29a      	uxth	r2, r3
 8001146:	4ba2      	ldr	r3, [pc, #648]	@ (80013d0 <SetPick_PlaceOrder+0x2c4>)
 8001148:	801a      	strh	r2, [r3, #0]
    	countPick += Pick[0]*10000;
 800114a:	4ba1      	ldr	r3, [pc, #644]	@ (80013d0 <SetPick_PlaceOrder+0x2c4>)
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	0152      	lsls	r2, r2, #5
 8001152:	1ad2      	subs	r2, r2, r3
 8001154:	0092      	lsls	r2, r2, #2
 8001156:	4413      	add	r3, r2
 8001158:	461a      	mov	r2, r3
 800115a:	0091      	lsls	r1, r2, #2
 800115c:	461a      	mov	r2, r3
 800115e:	460b      	mov	r3, r1
 8001160:	4413      	add	r3, r2
 8001162:	011b      	lsls	r3, r3, #4
 8001164:	b29a      	uxth	r2, r3
 8001166:	4b9b      	ldr	r3, [pc, #620]	@ (80013d4 <SetPick_PlaceOrder+0x2c8>)
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	b29a      	uxth	r2, r3
 800116e:	4b99      	ldr	r3, [pc, #612]	@ (80013d4 <SetPick_PlaceOrder+0x2c8>)
 8001170:	801a      	strh	r2, [r3, #0]
    	strcpy(Order, "Place");
 8001172:	4b94      	ldr	r3, [pc, #592]	@ (80013c4 <SetPick_PlaceOrder+0x2b8>)
 8001174:	4a98      	ldr	r2, [pc, #608]	@ (80013d8 <SetPick_PlaceOrder+0x2cc>)
 8001176:	e892 0003 	ldmia.w	r2, {r0, r1}
 800117a:	6018      	str	r0, [r3, #0]
 800117c:	3304      	adds	r3, #4
 800117e:	8019      	strh	r1, [r3, #0]
    	Place[0] = registerFrame[0x22].U16/10000;
 8001180:	4b8f      	ldr	r3, [pc, #572]	@ (80013c0 <SetPick_PlaceOrder+0x2b4>)
 8001182:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001186:	4a91      	ldr	r2, [pc, #580]	@ (80013cc <SetPick_PlaceOrder+0x2c0>)
 8001188:	fba2 2303 	umull	r2, r3, r2, r3
 800118c:	0b5b      	lsrs	r3, r3, #13
 800118e:	b29a      	uxth	r2, r3
 8001190:	4b92      	ldr	r3, [pc, #584]	@ (80013dc <SetPick_PlaceOrder+0x2d0>)
 8001192:	801a      	strh	r2, [r3, #0]
    	countPlace +=Place[0]*10000;
 8001194:	4b91      	ldr	r3, [pc, #580]	@ (80013dc <SetPick_PlaceOrder+0x2d0>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	0152      	lsls	r2, r2, #5
 800119c:	1ad2      	subs	r2, r2, r3
 800119e:	0092      	lsls	r2, r2, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	461a      	mov	r2, r3
 80011a4:	0091      	lsls	r1, r2, #2
 80011a6:	461a      	mov	r2, r3
 80011a8:	460b      	mov	r3, r1
 80011aa:	4413      	add	r3, r2
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	4b8b      	ldr	r3, [pc, #556]	@ (80013e0 <SetPick_PlaceOrder+0x2d4>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	4413      	add	r3, r2
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	4b89      	ldr	r3, [pc, #548]	@ (80013e0 <SetPick_PlaceOrder+0x2d4>)
 80011ba:	801a      	strh	r2, [r3, #0]


    	strcpy(Order, "Pick");
 80011bc:	4b81      	ldr	r3, [pc, #516]	@ (80013c4 <SetPick_PlaceOrder+0x2b8>)
 80011be:	4a82      	ldr	r2, [pc, #520]	@ (80013c8 <SetPick_PlaceOrder+0x2bc>)
 80011c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011c4:	6018      	str	r0, [r3, #0]
 80011c6:	3304      	adds	r3, #4
 80011c8:	7019      	strb	r1, [r3, #0]
    	Pick[1] = (registerFrame[0x21].U16- countPick)/1000;
 80011ca:	4b7d      	ldr	r3, [pc, #500]	@ (80013c0 <SetPick_PlaceOrder+0x2b4>)
 80011cc:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b80      	ldr	r3, [pc, #512]	@ (80013d4 <SetPick_PlaceOrder+0x2c8>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	4a82      	ldr	r2, [pc, #520]	@ (80013e4 <SetPick_PlaceOrder+0x2d8>)
 80011da:	fb82 1203 	smull	r1, r2, r2, r3
 80011de:	1192      	asrs	r2, r2, #6
 80011e0:	17db      	asrs	r3, r3, #31
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	4b7a      	ldr	r3, [pc, #488]	@ (80013d0 <SetPick_PlaceOrder+0x2c4>)
 80011e8:	805a      	strh	r2, [r3, #2]
    	countPick += Pick[1]*1000;
 80011ea:	4b79      	ldr	r3, [pc, #484]	@ (80013d0 <SetPick_PlaceOrder+0x2c4>)
 80011ec:	885b      	ldrh	r3, [r3, #2]
 80011ee:	461a      	mov	r2, r3
 80011f0:	0152      	lsls	r2, r2, #5
 80011f2:	1ad2      	subs	r2, r2, r3
 80011f4:	0092      	lsls	r2, r2, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	4b75      	ldr	r3, [pc, #468]	@ (80013d4 <SetPick_PlaceOrder+0x2c8>)
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	4413      	add	r3, r2
 8001202:	b29a      	uxth	r2, r3
 8001204:	4b73      	ldr	r3, [pc, #460]	@ (80013d4 <SetPick_PlaceOrder+0x2c8>)
 8001206:	801a      	strh	r2, [r3, #0]
    	strcpy(Order, "Place");
 8001208:	4b6e      	ldr	r3, [pc, #440]	@ (80013c4 <SetPick_PlaceOrder+0x2b8>)
 800120a:	4a73      	ldr	r2, [pc, #460]	@ (80013d8 <SetPick_PlaceOrder+0x2cc>)
 800120c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001210:	6018      	str	r0, [r3, #0]
 8001212:	3304      	adds	r3, #4
 8001214:	8019      	strh	r1, [r3, #0]
    	Place[1] = (registerFrame[0x22].U16- countPlace)/1000;
 8001216:	4b6a      	ldr	r3, [pc, #424]	@ (80013c0 <SetPick_PlaceOrder+0x2b4>)
 8001218:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800121c:	461a      	mov	r2, r3
 800121e:	4b70      	ldr	r3, [pc, #448]	@ (80013e0 <SetPick_PlaceOrder+0x2d4>)
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	4a6f      	ldr	r2, [pc, #444]	@ (80013e4 <SetPick_PlaceOrder+0x2d8>)
 8001226:	fb82 1203 	smull	r1, r2, r2, r3
 800122a:	1192      	asrs	r2, r2, #6
 800122c:	17db      	asrs	r3, r3, #31
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	b29a      	uxth	r2, r3
 8001232:	4b6a      	ldr	r3, [pc, #424]	@ (80013dc <SetPick_PlaceOrder+0x2d0>)
 8001234:	805a      	strh	r2, [r3, #2]
    	countPlace +=Place[1]*1000;
 8001236:	4b69      	ldr	r3, [pc, #420]	@ (80013dc <SetPick_PlaceOrder+0x2d0>)
 8001238:	885b      	ldrh	r3, [r3, #2]
 800123a:	461a      	mov	r2, r3
 800123c:	0152      	lsls	r2, r2, #5
 800123e:	1ad2      	subs	r2, r2, r3
 8001240:	0092      	lsls	r2, r2, #2
 8001242:	4413      	add	r3, r2
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b65      	ldr	r3, [pc, #404]	@ (80013e0 <SetPick_PlaceOrder+0x2d4>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	4413      	add	r3, r2
 800124e:	b29a      	uxth	r2, r3
 8001250:	4b63      	ldr	r3, [pc, #396]	@ (80013e0 <SetPick_PlaceOrder+0x2d4>)
 8001252:	801a      	strh	r2, [r3, #0]


    	strcpy(Order, "Pick");
 8001254:	4b5b      	ldr	r3, [pc, #364]	@ (80013c4 <SetPick_PlaceOrder+0x2b8>)
 8001256:	4a5c      	ldr	r2, [pc, #368]	@ (80013c8 <SetPick_PlaceOrder+0x2bc>)
 8001258:	e892 0003 	ldmia.w	r2, {r0, r1}
 800125c:	6018      	str	r0, [r3, #0]
 800125e:	3304      	adds	r3, #4
 8001260:	7019      	strb	r1, [r3, #0]
		Pick[2] = (registerFrame[0x21].U16 - countPick) / 100;
 8001262:	4b57      	ldr	r3, [pc, #348]	@ (80013c0 <SetPick_PlaceOrder+0x2b4>)
 8001264:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001268:	461a      	mov	r2, r3
 800126a:	4b5a      	ldr	r3, [pc, #360]	@ (80013d4 <SetPick_PlaceOrder+0x2c8>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	4a5d      	ldr	r2, [pc, #372]	@ (80013e8 <SetPick_PlaceOrder+0x2dc>)
 8001272:	fb82 1203 	smull	r1, r2, r2, r3
 8001276:	1152      	asrs	r2, r2, #5
 8001278:	17db      	asrs	r3, r3, #31
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	b29a      	uxth	r2, r3
 800127e:	4b54      	ldr	r3, [pc, #336]	@ (80013d0 <SetPick_PlaceOrder+0x2c4>)
 8001280:	809a      	strh	r2, [r3, #4]
		countPick += Pick[2] * 100;
 8001282:	4b53      	ldr	r3, [pc, #332]	@ (80013d0 <SetPick_PlaceOrder+0x2c4>)
 8001284:	889b      	ldrh	r3, [r3, #4]
 8001286:	461a      	mov	r2, r3
 8001288:	0092      	lsls	r2, r2, #2
 800128a:	4413      	add	r3, r2
 800128c:	461a      	mov	r2, r3
 800128e:	0091      	lsls	r1, r2, #2
 8001290:	461a      	mov	r2, r3
 8001292:	460b      	mov	r3, r1
 8001294:	4413      	add	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	b29a      	uxth	r2, r3
 800129a:	4b4e      	ldr	r3, [pc, #312]	@ (80013d4 <SetPick_PlaceOrder+0x2c8>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	4b4c      	ldr	r3, [pc, #304]	@ (80013d4 <SetPick_PlaceOrder+0x2c8>)
 80012a4:	801a      	strh	r2, [r3, #0]
		strcpy(Order, "Place");
 80012a6:	4b47      	ldr	r3, [pc, #284]	@ (80013c4 <SetPick_PlaceOrder+0x2b8>)
 80012a8:	4a4b      	ldr	r2, [pc, #300]	@ (80013d8 <SetPick_PlaceOrder+0x2cc>)
 80012aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012ae:	6018      	str	r0, [r3, #0]
 80012b0:	3304      	adds	r3, #4
 80012b2:	8019      	strh	r1, [r3, #0]
		Place[2] = (registerFrame[0x22].U16 - countPlace) / 100;
 80012b4:	4b42      	ldr	r3, [pc, #264]	@ (80013c0 <SetPick_PlaceOrder+0x2b4>)
 80012b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b48      	ldr	r3, [pc, #288]	@ (80013e0 <SetPick_PlaceOrder+0x2d4>)
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	4a49      	ldr	r2, [pc, #292]	@ (80013e8 <SetPick_PlaceOrder+0x2dc>)
 80012c4:	fb82 1203 	smull	r1, r2, r2, r3
 80012c8:	1152      	asrs	r2, r2, #5
 80012ca:	17db      	asrs	r3, r3, #31
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	4b42      	ldr	r3, [pc, #264]	@ (80013dc <SetPick_PlaceOrder+0x2d0>)
 80012d2:	809a      	strh	r2, [r3, #4]
		countPlace += Place[2] * 100;
 80012d4:	4b41      	ldr	r3, [pc, #260]	@ (80013dc <SetPick_PlaceOrder+0x2d0>)
 80012d6:	889b      	ldrh	r3, [r3, #4]
 80012d8:	461a      	mov	r2, r3
 80012da:	0092      	lsls	r2, r2, #2
 80012dc:	4413      	add	r3, r2
 80012de:	461a      	mov	r2, r3
 80012e0:	0091      	lsls	r1, r2, #2
 80012e2:	461a      	mov	r2, r3
 80012e4:	460b      	mov	r3, r1
 80012e6:	4413      	add	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	4b3c      	ldr	r3, [pc, #240]	@ (80013e0 <SetPick_PlaceOrder+0x2d4>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	4413      	add	r3, r2
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	4b3a      	ldr	r3, [pc, #232]	@ (80013e0 <SetPick_PlaceOrder+0x2d4>)
 80012f6:	801a      	strh	r2, [r3, #0]


		strcpy(Order, "Pick");
 80012f8:	4b32      	ldr	r3, [pc, #200]	@ (80013c4 <SetPick_PlaceOrder+0x2b8>)
 80012fa:	4a33      	ldr	r2, [pc, #204]	@ (80013c8 <SetPick_PlaceOrder+0x2bc>)
 80012fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001300:	6018      	str	r0, [r3, #0]
 8001302:	3304      	adds	r3, #4
 8001304:	7019      	strb	r1, [r3, #0]
		Pick[3] = (registerFrame[0x21].U16 - countPick) / 10;
 8001306:	4b2e      	ldr	r3, [pc, #184]	@ (80013c0 <SetPick_PlaceOrder+0x2b4>)
 8001308:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 800130c:	461a      	mov	r2, r3
 800130e:	4b31      	ldr	r3, [pc, #196]	@ (80013d4 <SetPick_PlaceOrder+0x2c8>)
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	4a35      	ldr	r2, [pc, #212]	@ (80013ec <SetPick_PlaceOrder+0x2e0>)
 8001316:	fb82 1203 	smull	r1, r2, r2, r3
 800131a:	1092      	asrs	r2, r2, #2
 800131c:	17db      	asrs	r3, r3, #31
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	b29a      	uxth	r2, r3
 8001322:	4b2b      	ldr	r3, [pc, #172]	@ (80013d0 <SetPick_PlaceOrder+0x2c4>)
 8001324:	80da      	strh	r2, [r3, #6]
		countPick += Pick[3] * 10;
 8001326:	4b2a      	ldr	r3, [pc, #168]	@ (80013d0 <SetPick_PlaceOrder+0x2c4>)
 8001328:	88db      	ldrh	r3, [r3, #6]
 800132a:	461a      	mov	r2, r3
 800132c:	0092      	lsls	r2, r2, #2
 800132e:	4413      	add	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	b29a      	uxth	r2, r3
 8001334:	4b27      	ldr	r3, [pc, #156]	@ (80013d4 <SetPick_PlaceOrder+0x2c8>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	4413      	add	r3, r2
 800133a:	b29a      	uxth	r2, r3
 800133c:	4b25      	ldr	r3, [pc, #148]	@ (80013d4 <SetPick_PlaceOrder+0x2c8>)
 800133e:	801a      	strh	r2, [r3, #0]
		strcpy(Order, "Place");
 8001340:	4b20      	ldr	r3, [pc, #128]	@ (80013c4 <SetPick_PlaceOrder+0x2b8>)
 8001342:	4a25      	ldr	r2, [pc, #148]	@ (80013d8 <SetPick_PlaceOrder+0x2cc>)
 8001344:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001348:	6018      	str	r0, [r3, #0]
 800134a:	3304      	adds	r3, #4
 800134c:	8019      	strh	r1, [r3, #0]
		Place[3] = (registerFrame[0x22].U16 - countPlace) / 10;
 800134e:	4b1c      	ldr	r3, [pc, #112]	@ (80013c0 <SetPick_PlaceOrder+0x2b4>)
 8001350:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001354:	461a      	mov	r2, r3
 8001356:	4b22      	ldr	r3, [pc, #136]	@ (80013e0 <SetPick_PlaceOrder+0x2d4>)
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	4a23      	ldr	r2, [pc, #140]	@ (80013ec <SetPick_PlaceOrder+0x2e0>)
 800135e:	fb82 1203 	smull	r1, r2, r2, r3
 8001362:	1092      	asrs	r2, r2, #2
 8001364:	17db      	asrs	r3, r3, #31
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	b29a      	uxth	r2, r3
 800136a:	4b1c      	ldr	r3, [pc, #112]	@ (80013dc <SetPick_PlaceOrder+0x2d0>)
 800136c:	80da      	strh	r2, [r3, #6]
		countPlace += Place[3] * 10;
 800136e:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <SetPick_PlaceOrder+0x2d0>)
 8001370:	88db      	ldrh	r3, [r3, #6]
 8001372:	461a      	mov	r2, r3
 8001374:	0092      	lsls	r2, r2, #2
 8001376:	4413      	add	r3, r2
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	b29a      	uxth	r2, r3
 800137c:	4b18      	ldr	r3, [pc, #96]	@ (80013e0 <SetPick_PlaceOrder+0x2d4>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	4413      	add	r3, r2
 8001382:	b29a      	uxth	r2, r3
 8001384:	4b16      	ldr	r3, [pc, #88]	@ (80013e0 <SetPick_PlaceOrder+0x2d4>)
 8001386:	801a      	strh	r2, [r3, #0]


		strcpy(Order, "Pick");
 8001388:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <SetPick_PlaceOrder+0x2b8>)
 800138a:	4a0f      	ldr	r2, [pc, #60]	@ (80013c8 <SetPick_PlaceOrder+0x2bc>)
 800138c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001390:	6018      	str	r0, [r3, #0]
 8001392:	3304      	adds	r3, #4
 8001394:	7019      	strb	r1, [r3, #0]
		Pick[4] = (registerFrame[0x21].U16 - countPick);
 8001396:	4b0a      	ldr	r3, [pc, #40]	@ (80013c0 <SetPick_PlaceOrder+0x2b4>)
 8001398:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 800139c:	4b0d      	ldr	r3, [pc, #52]	@ (80013d4 <SetPick_PlaceOrder+0x2c8>)
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	4b0a      	ldr	r3, [pc, #40]	@ (80013d0 <SetPick_PlaceOrder+0x2c4>)
 80013a6:	811a      	strh	r2, [r3, #8]
		countPick = 0;
 80013a8:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <SetPick_PlaceOrder+0x2c8>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	801a      	strh	r2, [r3, #0]
		strcpy(Order, "Place");
 80013ae:	4b05      	ldr	r3, [pc, #20]	@ (80013c4 <SetPick_PlaceOrder+0x2b8>)
 80013b0:	4a09      	ldr	r2, [pc, #36]	@ (80013d8 <SetPick_PlaceOrder+0x2cc>)
 80013b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013b6:	6018      	str	r0, [r3, #0]
 80013b8:	3304      	adds	r3, #4
 80013ba:	8019      	strh	r1, [r3, #0]
 80013bc:	e018      	b.n	80013f0 <SetPick_PlaceOrder+0x2e4>
 80013be:	bf00      	nop
 80013c0:	20000ec4 	.word	0x20000ec4
 80013c4:	20000034 	.word	0x20000034
 80013c8:	0800e224 	.word	0x0800e224
 80013cc:	d1b71759 	.word	0xd1b71759
 80013d0:	2000033c 	.word	0x2000033c
 80013d4:	20000352 	.word	0x20000352
 80013d8:	0800e22c 	.word	0x0800e22c
 80013dc:	20000348 	.word	0x20000348
 80013e0:	20000354 	.word	0x20000354
 80013e4:	10624dd3 	.word	0x10624dd3
 80013e8:	51eb851f 	.word	0x51eb851f
 80013ec:	66666667 	.word	0x66666667
		Place[4] = (registerFrame[0x22].U16 - countPlace);
 80013f0:	4b08      	ldr	r3, [pc, #32]	@ (8001414 <SetPick_PlaceOrder+0x308>)
 80013f2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80013f6:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <SetPick_PlaceOrder+0x30c>)
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	4b07      	ldr	r3, [pc, #28]	@ (800141c <SetPick_PlaceOrder+0x310>)
 8001400:	811a      	strh	r2, [r3, #8]
		countPlace = 0;
 8001402:	4b05      	ldr	r3, [pc, #20]	@ (8001418 <SetPick_PlaceOrder+0x30c>)
 8001404:	2200      	movs	r2, #0
 8001406:	801a      	strh	r2, [r3, #0]

    }
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000ec4 	.word	0x20000ec4
 8001418:	20000354 	.word	0x20000354
 800141c:	20000348 	.word	0x20000348

08001420 <Run_Jog_Mode>:



uint16_t Run_Jog_Mode() {
 8001420:	b490      	push	{r4, r7}
 8001422:	af00      	add	r7, sp, #0
	if (registerFrame[0x01].U16 == 4) {
 8001424:	4b09      	ldr	r3, [pc, #36]	@ (800144c <Run_Jog_Mode+0x2c>)
 8001426:	885b      	ldrh	r3, [r3, #2]
 8001428:	2b04      	cmp	r3, #4
 800142a:	d10a      	bne.n	8001442 <Run_Jog_Mode+0x22>
		strcpy(Jogmode, "Run Jog Mode");
 800142c:	4a08      	ldr	r2, [pc, #32]	@ (8001450 <Run_Jog_Mode+0x30>)
 800142e:	4b09      	ldr	r3, [pc, #36]	@ (8001454 <Run_Jog_Mode+0x34>)
 8001430:	4614      	mov	r4, r2
 8001432:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001434:	c407      	stmia	r4!, {r0, r1, r2}
 8001436:	7023      	strb	r3, [r4, #0]
		registerFrame[0x01].U16 = 0;
 8001438:	4b04      	ldr	r3, [pc, #16]	@ (800144c <Run_Jog_Mode+0x2c>)
 800143a:	2200      	movs	r2, #0
 800143c:	805a      	strh	r2, [r3, #2]
		return 1;
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <Run_Jog_Mode+0x24>
	}
	else{return 0;}
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	bc90      	pop	{r4, r7}
 800144a:	4770      	bx	lr
 800144c:	20000ec4 	.word	0x20000ec4
 8001450:	20000040 	.word	0x20000040
 8001454:	0800e234 	.word	0x0800e234

08001458 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 800145c:	4b0d      	ldr	r3, [pc, #52]	@ (8001494 <modbus_1t5_Timeout+0x3c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2201      	movs	r2, #1
 8001462:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001464:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <modbus_1t5_Timeout+0x3c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2200      	movs	r2, #0
 800146e:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001470:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <modbus_1t5_Timeout+0x3c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <modbus_1t5_Timeout+0x3c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f042 0201 	orr.w	r2, r2, #1
 8001486:	601a      	str	r2, [r3, #0]
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20000834 	.word	0x20000834

08001498 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80014a0:	4b04      	ldr	r3, [pc, #16]	@ (80014b4 <modbus_3t5_Timeout+0x1c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2201      	movs	r2, #1
 80014a6:	755a      	strb	r2, [r3, #21]

}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	20000834 	.word	0x20000834

080014b8 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f00b fb4d 	bl	800cb60 <HAL_UART_GetError>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b20      	cmp	r3, #32
 80014ca:	d101      	bne.n	80014d0 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 80014cc:	f7ff ffc4 	bl	8001458 <modbus_1t5_Timeout>

	}
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80014e2:	4a25      	ldr	r2, [pc, #148]	@ (8001578 <Modbus_init+0xa0>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80014e8:	4b23      	ldr	r3, [pc, #140]	@ (8001578 <Modbus_init+0xa0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	4a21      	ldr	r2, [pc, #132]	@ (800157c <Modbus_init+0xa4>)
 80014f6:	210e      	movs	r1, #14
 80014f8:	4618      	mov	r0, r3
 80014fa:	f009 fd75 	bl	800afe8 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	2110      	movs	r1, #16
 8001504:	4618      	mov	r0, r3
 8001506:	f00b fad5 	bl	800cab4 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	4618      	mov	r0, r3
 8001510:	f00b faec 	bl	800caec <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	4a19      	ldr	r2, [pc, #100]	@ (8001580 <Modbus_init+0xa8>)
 800151a:	2104      	movs	r1, #4
 800151c:	4618      	mov	r0, r3
 800151e:	f00a fdb3 	bl	800c088 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001522:	4b15      	ldr	r3, [pc, #84]	@ (8001578 <Modbus_init+0xa0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001528:	4b13      	ldr	r3, [pc, #76]	@ (8001578 <Modbus_init+0xa0>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	4b12      	ldr	r3, [pc, #72]	@ (8001578 <Modbus_init+0xa0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001534:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001538:	4413      	add	r3, r2
 800153a:	3302      	adds	r3, #2
 800153c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001540:	4619      	mov	r1, r3
 8001542:	f00a fedb 	bl	800c2fc <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001546:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <Modbus_init+0xa0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b01      	cmp	r3, #1
 8001554:	d10c      	bne.n	8001570 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001556:	4b08      	ldr	r3, [pc, #32]	@ (8001578 <Modbus_init+0xa0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	4618      	mov	r0, r3
 800155e:	f008 fc6f 	bl	8009e40 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001562:	4b05      	ldr	r3, [pc, #20]	@ (8001578 <Modbus_init+0xa0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f008 fec8 	bl	800a300 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000834 	.word	0x20000834
 800157c:	08001499 	.word	0x08001499
 8001580:	080014b9 	.word	0x080014b9

08001584 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001590:	23ff      	movs	r3, #255	@ 0xff
 8001592:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001594:	23ff      	movs	r3, #255	@ 0xff
 8001596:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001598:	e013      	b.n	80015c2 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	1c5a      	adds	r2, r3, #1
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	781a      	ldrb	r2, [r3, #0]
 80015a2:	7bbb      	ldrb	r3, [r7, #14]
 80015a4:	4053      	eors	r3, r2
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 80015aa:	4a0f      	ldr	r2, [pc, #60]	@ (80015e8 <CRC16+0x64>)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	4413      	add	r3, r2
 80015b0:	781a      	ldrb	r2, [r3, #0]
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	4053      	eors	r3, r2
 80015b6:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 80015b8:	4a0c      	ldr	r2, [pc, #48]	@ (80015ec <CRC16+0x68>)
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	4413      	add	r3, r2
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80015c2:	883b      	ldrh	r3, [r7, #0]
 80015c4:	1e5a      	subs	r2, r3, #1
 80015c6:	803a      	strh	r2, [r7, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1e6      	bne.n	800159a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	021b      	lsls	r3, r3, #8
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	7bbb      	ldrb	r3, [r7, #14]
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	4313      	orrs	r3, r2
 80015d8:	b21b      	sxth	r3, r3
 80015da:	b29b      	uxth	r3, r3
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	20000168 	.word	0x20000168
 80015ec:	20000068 	.word	0x20000068

080015f0 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80015f6:	4b7e      	ldr	r3, [pc, #504]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	7ddb      	ldrb	r3, [r3, #23]
 80015fc:	3b01      	subs	r3, #1
 80015fe:	2b03      	cmp	r3, #3
 8001600:	d80a      	bhi.n	8001618 <Modbus_Protocal_Worker+0x28>
 8001602:	a201      	add	r2, pc, #4	@ (adr r2, 8001608 <Modbus_Protocal_Worker+0x18>)
 8001604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001608:	08001623 	.word	0x08001623
 800160c:	080017b7 	.word	0x080017b7
 8001610:	080016af 	.word	0x080016af
 8001614:	080016f3 	.word	0x080016f3
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001618:	4b75      	ldr	r3, [pc, #468]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2201      	movs	r2, #1
 800161e:	75da      	strb	r2, [r3, #23]
		break;
 8001620:	e0e1      	b.n	80017e6 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8001622:	4b73      	ldr	r3, [pc, #460]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800162a:	2b00      	cmp	r3, #0
 800162c:	d006      	beq.n	800163c <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 800162e:	4b70      	ldr	r3, [pc, #448]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2202      	movs	r2, #2
 8001634:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8001636:	f000 f9cd 	bl	80019d4 <Modbus_Emission>
 800163a:	e018      	b.n	800166e <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 800163c:	4b6c      	ldr	r3, [pc, #432]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8001646:	4b6a      	ldr	r3, [pc, #424]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001650:	b29b      	uxth	r3, r3
 8001652:	429a      	cmp	r2, r3
 8001654:	d00b      	beq.n	800166e <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001656:	4b66      	ldr	r3, [pc, #408]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2200      	movs	r2, #0
 800165c:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800165e:	4b64      	ldr	r3, [pc, #400]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2200      	movs	r2, #0
 8001664:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8001666:	4b62      	ldr	r3, [pc, #392]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2203      	movs	r2, #3
 800166c:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800166e:	4b60      	ldr	r3, [pc, #384]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001678:	2b20      	cmp	r3, #32
 800167a:	f040 80ad 	bne.w	80017d8 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800167e:	4b5c      	ldr	r3, [pc, #368]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2200      	movs	r2, #0
 8001684:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001688:	4b59      	ldr	r3, [pc, #356]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800168e:	4b58      	ldr	r3, [pc, #352]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	4b57      	ldr	r3, [pc, #348]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800169a:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800169e:	4413      	add	r3, r2
 80016a0:	3302      	adds	r3, #2
 80016a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80016a6:	4619      	mov	r1, r3
 80016a8:	f00a fe28 	bl	800c2fc <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 80016ac:	e094      	b.n	80017d8 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80016ae:	4b50      	ldr	r3, [pc, #320]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	7d1b      	ldrb	r3, [r3, #20]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 8091 	beq.w	80017dc <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80016ba:	4b4d      	ldr	r3, [pc, #308]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	22fe      	movs	r2, #254	@ 0xfe
 80016c0:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80016c2:	4b4b      	ldr	r3, [pc, #300]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 80016cc:	4b48      	ldr	r3, [pc, #288]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 80016dc:	4b44      	ldr	r3, [pc, #272]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 80016de:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80016e0:	1a8a      	subs	r2, r1, r2
 80016e2:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 80016e4:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80016e8:	4b41      	ldr	r3, [pc, #260]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2204      	movs	r2, #4
 80016ee:	75da      	strb	r2, [r3, #23]
		}
		break;
 80016f0:	e074      	b.n	80017dc <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80016f2:	4b3f      	ldr	r3, [pc, #252]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80016fa:	f113 0f02 	cmn.w	r3, #2
 80016fe:	d150      	bne.n	80017a2 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001700:	4b3b      	ldr	r3, [pc, #236]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2200      	movs	r2, #0
 8001706:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001708:	4b39      	ldr	r3, [pc, #228]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8001710:	4b37      	ldr	r3, [pc, #220]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001718:	3b02      	subs	r3, #2
 800171a:	4619      	mov	r1, r3
 800171c:	4610      	mov	r0, r2
 800171e:	f7ff ff31 	bl	8001584 <CRC16>
 8001722:	4603      	mov	r3, r0
 8001724:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001726:	793a      	ldrb	r2, [r7, #4]
 8001728:	4b31      	ldr	r3, [pc, #196]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 800172a:	6819      	ldr	r1, [r3, #0]
 800172c:	4b30      	ldr	r3, [pc, #192]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001734:	3b02      	subs	r3, #2
 8001736:	440b      	add	r3, r1
 8001738:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 800173c:	429a      	cmp	r2, r3
 800173e:	d10c      	bne.n	800175a <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001740:	797a      	ldrb	r2, [r7, #5]
 8001742:	4b2b      	ldr	r3, [pc, #172]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 8001744:	6819      	ldr	r1, [r3, #0]
 8001746:	4b2a      	ldr	r3, [pc, #168]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800174e:	3b01      	subs	r3, #1
 8001750:	440b      	add	r3, r1
 8001752:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001756:	429a      	cmp	r2, r3
 8001758:	d004      	beq.n	8001764 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800175a:	4b25      	ldr	r3, [pc, #148]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	22ff      	movs	r2, #255	@ 0xff
 8001760:	759a      	strb	r2, [r3, #22]
				break;
 8001762:	e040      	b.n	80017e6 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001764:	4b22      	ldr	r3, [pc, #136]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 800176c:	4b20      	ldr	r3, [pc, #128]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d113      	bne.n	800179e <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001776:	4b1e      	ldr	r3, [pc, #120]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800177e:	4b1c      	ldr	r3, [pc, #112]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001786:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001788:	4b19      	ldr	r3, [pc, #100]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001790:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001792:	461a      	mov	r2, r3
 8001794:	f00c fb98 	bl	800dec8 <memcpy>

			//execute command
			Modbus_frame_response();
 8001798:	f000 f904 	bl	80019a4 <Modbus_frame_response>
 800179c:	e001      	b.n	80017a2 <Modbus_Protocal_Worker+0x1b2>
				break;
 800179e:	bf00      	nop
					}
		break;


	}
}
 80017a0:	e021      	b.n	80017e6 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 80017a2:	4b13      	ldr	r3, [pc, #76]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	7d5b      	ldrb	r3, [r3, #21]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d019      	beq.n	80017e0 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 80017ac:	4b10      	ldr	r3, [pc, #64]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2201      	movs	r2, #1
 80017b2:	75da      	strb	r2, [r3, #23]
		break;
 80017b4:	e014      	b.n	80017e0 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80017b6:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017c0:	2b20      	cmp	r3, #32
 80017c2:	d10f      	bne.n	80017e4 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 80017c4:	4b0a      	ldr	r3, [pc, #40]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 80017ce:	4b08      	ldr	r3, [pc, #32]	@ (80017f0 <Modbus_Protocal_Worker+0x200>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2201      	movs	r2, #1
 80017d4:	75da      	strb	r2, [r3, #23]
		break;
 80017d6:	e005      	b.n	80017e4 <Modbus_Protocal_Worker+0x1f4>
		break;
 80017d8:	bf00      	nop
 80017da:	e004      	b.n	80017e6 <Modbus_Protocal_Worker+0x1f6>
		break;
 80017dc:	bf00      	nop
 80017de:	e002      	b.n	80017e6 <Modbus_Protocal_Worker+0x1f6>
		break;
 80017e0:	bf00      	nop
 80017e2:	e000      	b.n	80017e6 <Modbus_Protocal_Worker+0x1f6>
		break;
 80017e4:	bf00      	nop
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000834 	.word	0x20000834

080017f4 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80017fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001870 <modbusWrite1Register+0x7c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	7e5b      	ldrb	r3, [r3, #25]
 8001800:	021b      	lsls	r3, r3, #8
 8001802:	b29b      	uxth	r3, r3
 8001804:	4a1a      	ldr	r2, [pc, #104]	@ (8001870 <modbusWrite1Register+0x7c>)
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	7e92      	ldrb	r2, [r2, #26]
 800180a:	4413      	add	r3, r2
 800180c:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800180e:	88fa      	ldrh	r2, [r7, #6]
 8001810:	4b17      	ldr	r3, [pc, #92]	@ (8001870 <modbusWrite1Register+0x7c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	429a      	cmp	r2, r3
 8001818:	d903      	bls.n	8001822 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800181a:	2002      	movs	r0, #2
 800181c:	f000 f8a0 	bl	8001960 <ModbusErrorReply>
			 return;
 8001820:	e023      	b.n	800186a <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001822:	4b13      	ldr	r3, [pc, #76]	@ (8001870 <modbusWrite1Register+0x7c>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	4b12      	ldr	r3, [pc, #72]	@ (8001870 <modbusWrite1Register+0x7c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	440b      	add	r3, r1
 8001832:	7ed2      	ldrb	r2, [r2, #27]
 8001834:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001836:	4b0e      	ldr	r3, [pc, #56]	@ (8001870 <modbusWrite1Register+0x7c>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	4b0d      	ldr	r3, [pc, #52]	@ (8001870 <modbusWrite1Register+0x7c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6859      	ldr	r1, [r3, #4]
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	440b      	add	r3, r1
 8001846:	7f12      	ldrb	r2, [r2, #28]
 8001848:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800184a:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <modbusWrite1Register+0x7c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 8001852:	4b07      	ldr	r3, [pc, #28]	@ (8001870 <modbusWrite1Register+0x7c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001858:	2208      	movs	r2, #8
 800185a:	4619      	mov	r1, r3
 800185c:	f00c fb34 	bl	800dec8 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001860:	4b03      	ldr	r3, [pc, #12]	@ (8001870 <modbusWrite1Register+0x7c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2205      	movs	r2, #5
 8001866:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000834 	.word	0x20000834

08001874 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001874:	b590      	push	{r4, r7, lr}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800187a:	4b38      	ldr	r3, [pc, #224]	@ (800195c <modbusRead1Register+0xe8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	7edb      	ldrb	r3, [r3, #27]
 8001880:	021b      	lsls	r3, r3, #8
 8001882:	b29b      	uxth	r3, r3
 8001884:	4a35      	ldr	r2, [pc, #212]	@ (800195c <modbusRead1Register+0xe8>)
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	7f12      	ldrb	r2, [r2, #28]
 800188a:	4413      	add	r3, r2
 800188c:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800188e:	4b33      	ldr	r3, [pc, #204]	@ (800195c <modbusRead1Register+0xe8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	7e5b      	ldrb	r3, [r3, #25]
 8001894:	021b      	lsls	r3, r3, #8
 8001896:	b29b      	uxth	r3, r3
 8001898:	4a30      	ldr	r2, [pc, #192]	@ (800195c <modbusRead1Register+0xe8>)
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	7e92      	ldrb	r2, [r2, #26]
 800189e:	4413      	add	r3, r2
 80018a0:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d002      	beq.n	80018ae <modbusRead1Register+0x3a>
 80018a8:	88fb      	ldrh	r3, [r7, #6]
 80018aa:	2b7d      	cmp	r3, #125	@ 0x7d
 80018ac:	d903      	bls.n	80018b6 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80018ae:	2003      	movs	r0, #3
 80018b0:	f000 f856 	bl	8001960 <ModbusErrorReply>
		 return;
 80018b4:	e04e      	b.n	8001954 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80018b6:	88ba      	ldrh	r2, [r7, #4]
 80018b8:	4b28      	ldr	r3, [pc, #160]	@ (800195c <modbusRead1Register+0xe8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d808      	bhi.n	80018d4 <modbusRead1Register+0x60>
 80018c2:	88ba      	ldrh	r2, [r7, #4]
 80018c4:	88fb      	ldrh	r3, [r7, #6]
 80018c6:	4413      	add	r3, r2
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b24      	ldr	r3, [pc, #144]	@ (800195c <modbusRead1Register+0xe8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d903      	bls.n	80018dc <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80018d4:	2002      	movs	r0, #2
 80018d6:	f000 f843 	bl	8001960 <ModbusErrorReply>
		 return;
 80018da:	e03b      	b.n	8001954 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80018dc:	4b1f      	ldr	r3, [pc, #124]	@ (800195c <modbusRead1Register+0xe8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2203      	movs	r2, #3
 80018e2:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4b1c      	ldr	r3, [pc, #112]	@ (800195c <modbusRead1Register+0xe8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	0052      	lsls	r2, r2, #1
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80018f6:	2400      	movs	r4, #0
 80018f8:	e020      	b.n	800193c <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80018fa:	4b18      	ldr	r3, [pc, #96]	@ (800195c <modbusRead1Register+0xe8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	88bb      	ldrh	r3, [r7, #4]
 8001902:	4423      	add	r3, r4
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	18d1      	adds	r1, r2, r3
 8001908:	4b14      	ldr	r3, [pc, #80]	@ (800195c <modbusRead1Register+0xe8>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	1c63      	adds	r3, r4, #1
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	7849      	ldrb	r1, [r1, #1]
 8001912:	4413      	add	r3, r2
 8001914:	460a      	mov	r2, r1
 8001916:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 800191a:	4b10      	ldr	r3, [pc, #64]	@ (800195c <modbusRead1Register+0xe8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	88bb      	ldrh	r3, [r7, #4]
 8001922:	4423      	add	r3, r4
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	18d1      	adds	r1, r2, r3
 8001928:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <modbusRead1Register+0xe8>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	0063      	lsls	r3, r4, #1
 800192e:	3303      	adds	r3, #3
 8001930:	7809      	ldrb	r1, [r1, #0]
 8001932:	4413      	add	r3, r2
 8001934:	460a      	mov	r2, r1
 8001936:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 800193a:	3401      	adds	r4, #1
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	429c      	cmp	r4, r3
 8001940:	dbdb      	blt.n	80018fa <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	3301      	adds	r3, #1
 8001946:	b2da      	uxtb	r2, r3
 8001948:	4b04      	ldr	r3, [pc, #16]	@ (800195c <modbusRead1Register+0xe8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	0052      	lsls	r2, r2, #1
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	bd90      	pop	{r4, r7, pc}
 800195a:	bf00      	nop
 800195c:	20000834 	.word	0x20000834

08001960 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 800196a:	4b0d      	ldr	r3, [pc, #52]	@ (80019a0 <ModbusErrorReply+0x40>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	7e1a      	ldrb	r2, [r3, #24]
 8001970:	4b0b      	ldr	r3, [pc, #44]	@ (80019a0 <ModbusErrorReply+0x40>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 800197e:	4b08      	ldr	r3, [pc, #32]	@ (80019a0 <ModbusErrorReply+0x40>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	79fa      	ldrb	r2, [r7, #7]
 8001984:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001988:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <ModbusErrorReply+0x40>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2202      	movs	r2, #2
 800198e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	20000834 	.word	0x20000834

080019a4 <Modbus_frame_response>:

void Modbus_frame_response()
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80019a8:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <Modbus_frame_response+0x2c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	7e1b      	ldrb	r3, [r3, #24]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d004      	beq.n	80019bc <Modbus_frame_response+0x18>
 80019b2:	2b06      	cmp	r3, #6
 80019b4:	d105      	bne.n	80019c2 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80019b6:	f7ff ff1d 	bl	80017f4 <modbusWrite1Register>
		break;
 80019ba:	e006      	b.n	80019ca <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80019bc:	f7ff ff5a 	bl	8001874 <modbusRead1Register>
		break;
 80019c0:	e003      	b.n	80019ca <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80019c2:	2001      	movs	r0, #1
 80019c4:	f7ff ffcc 	bl	8001960 <ModbusErrorReply>
		break;
 80019c8:	bf00      	nop

	}
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000834 	.word	0x20000834

080019d4 <Modbus_Emission>:

void Modbus_Emission()
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80019da:	4b38      	ldr	r3, [pc, #224]	@ (8001abc <Modbus_Emission+0xe8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019e4:	2b20      	cmp	r3, #32
 80019e6:	d15d      	bne.n	8001aa4 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80019e8:	4b34      	ldr	r3, [pc, #208]	@ (8001abc <Modbus_Emission+0xe8>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b33      	ldr	r3, [pc, #204]	@ (8001abc <Modbus_Emission+0xe8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	7812      	ldrb	r2, [r2, #0]
 80019f2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80019f6:	4b31      	ldr	r3, [pc, #196]	@ (8001abc <Modbus_Emission+0xe8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 80019fe:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001a00:	4b2e      	ldr	r3, [pc, #184]	@ (8001abc <Modbus_Emission+0xe8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8001a08:	4b2c      	ldr	r3, [pc, #176]	@ (8001abc <Modbus_Emission+0xe8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8001a10:	461a      	mov	r2, r3
 8001a12:	f00c fa59 	bl	800dec8 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001a16:	4b29      	ldr	r3, [pc, #164]	@ (8001abc <Modbus_Emission+0xe8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4b26      	ldr	r3, [pc, #152]	@ (8001abc <Modbus_Emission+0xe8>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	3203      	adds	r2, #3
 8001a26:	b292      	uxth	r2, r2
 8001a28:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001a2c:	4b23      	ldr	r3, [pc, #140]	@ (8001abc <Modbus_Emission+0xe8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001a34:	4b21      	ldr	r3, [pc, #132]	@ (8001abc <Modbus_Emission+0xe8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001a3c:	3b02      	subs	r3, #2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4610      	mov	r0, r2
 8001a42:	f7ff fd9f 	bl	8001584 <CRC16>
 8001a46:	4603      	mov	r3, r0
 8001a48:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001abc <Modbus_Emission+0xe8>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001abc <Modbus_Emission+0xe8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001a56:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001a58:	7939      	ldrb	r1, [r7, #4]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	460a      	mov	r2, r1
 8001a5e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001a62:	4b16      	ldr	r3, [pc, #88]	@ (8001abc <Modbus_Emission+0xe8>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	4b15      	ldr	r3, [pc, #84]	@ (8001abc <Modbus_Emission+0xe8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001a6e:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001a70:	7979      	ldrb	r1, [r7, #5]
 8001a72:	4413      	add	r3, r2
 8001a74:	460a      	mov	r2, r1
 8001a76:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001a7a:	4b10      	ldr	r3, [pc, #64]	@ (8001abc <Modbus_Emission+0xe8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a84:	2b20      	cmp	r3, #32
 8001a86:	d10d      	bne.n	8001aa4 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001a88:	4b0c      	ldr	r3, [pc, #48]	@ (8001abc <Modbus_Emission+0xe8>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <Modbus_Emission+0xe8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001a96:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <Modbus_Emission+0xe8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001a9a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	f00a fbac 	bl	800c1fc <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001aa4:	4b05      	ldr	r3, [pc, #20]	@ (8001abc <Modbus_Emission+0xe8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001aac:	4b03      	ldr	r3, [pc, #12]	@ (8001abc <Modbus_Emission+0xe8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	755a      	strb	r2, [r3, #21]

}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000834 	.word	0x20000834

08001ac0 <trapezoidalGeneration>:
 *      Author: naker
 */
#include "Trapezoidal.h"

void trapezoidalGeneration(trapezoidalGen* genTrapezoidal, double initial_position, double target_position,
		double vel_max, double acc_max){
 8001ac0:	b5b0      	push	{r4, r5, r7, lr}
 8001ac2:	b094      	sub	sp, #80	@ 0x50
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6278      	str	r0, [r7, #36]	@ 0x24
 8001ac8:	ed87 0b06 	vstr	d0, [r7, #24]
 8001acc:	ed87 1b04 	vstr	d1, [r7, #16]
 8001ad0:	ed87 2b02 	vstr	d2, [r7, #8]
 8001ad4:	ed87 3b00 	vstr	d3, [r7]
	// Set parameters
	double distance = 0.0; // qf-qi
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	double d_acc = 0.0; // acc and dcc distancea
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	f04f 0300 	mov.w	r3, #0
 8001aec:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
//	double vel_peak = 0.0;
	uint8_t pattern = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	double t = 0.0;
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	double vel_check = 0.0;
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	genTrapezoidal -> total_time = 0.0;
 8001b0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	genTrapezoidal -> t0 = 0.0;
 8001b1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	e9c1 2300 	strd	r2, r3, [r1]
	genTrapezoidal -> t1 = 0.0;
 8001b2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	e9c1 2302 	strd	r2, r3, [r1, #8]
	genTrapezoidal -> t2 = 0.0;
 8001b38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	e9c1 2304 	strd	r2, r3, [r1, #16]
	genTrapezoidal -> t3 = 0.0;
 8001b46:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	f04f 0300 	mov.w	r3, #0
 8001b50:	e9c1 2306 	strd	r2, r3, [r1, #24]
	genTrapezoidal -> initial_position = initial_position;
 8001b54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b5a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	genTrapezoidal -> final_position = target_position;
 8001b5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b64:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	// Calculate distance
	distance = fabs((target_position - initial_position));
 8001b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b70:	f7fe fb56 	bl	8000220 <__aeabi_dsub>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4611      	mov	r1, r2
 8001b7a:	6439      	str	r1, [r7, #64]	@ 0x40
 8001b7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b80:	647b      	str	r3, [r7, #68]	@ 0x44
	d_acc = ((vel_max * vel_max * 0.5) / acc_max);
 8001b82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b8a:	f7fe fd01 	bl	8000590 <__aeabi_dmul>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	4b8d      	ldr	r3, [pc, #564]	@ (8001dd0 <trapezoidalGeneration+0x310>)
 8001b9c:	f7fe fcf8 	bl	8000590 <__aeabi_dmul>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bac:	f7fe fe1a 	bl	80007e4 <__aeabi_ddiv>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	// Check case
	t = sqrt(distance / acc_max);
 8001bb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bbc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001bc0:	f7fe fe10 	bl	80007e4 <__aeabi_ddiv>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	ec43 2b17 	vmov	d7, r2, r3
 8001bcc:	eeb0 0a47 	vmov.f32	s0, s14
 8001bd0:	eef0 0a67 	vmov.f32	s1, s15
 8001bd4:	f00c f986 	bl	800dee4 <sqrt>
 8001bd8:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
	vel_check = acc_max * t;
 8001bdc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001be0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001be4:	f7fe fcd4 	bl	8000590 <__aeabi_dmul>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	// Direction choose
	if((target_position - initial_position) >= 0){
 8001bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bf4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bf8:	f7fe fb12 	bl	8000220 <__aeabi_dsub>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4610      	mov	r0, r2
 8001c02:	4619      	mov	r1, r3
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	f7fe ff46 	bl	8000a9c <__aeabi_dcmpge>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d004      	beq.n	8001c20 <trapezoidalGeneration+0x160>
		// Move down
		genTrapezoidal -> dir = 1;
 8001c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8001c1e:	e016      	b.n	8001c4e <trapezoidalGeneration+0x18e>
	}
	else if((target_position - initial_position) < 0){
 8001c20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c24:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c28:	f7fe fafa 	bl	8000220 <__aeabi_dsub>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4610      	mov	r0, r2
 8001c32:	4619      	mov	r1, r3
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	f7fe ff1a 	bl	8000a74 <__aeabi_dcmplt>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <trapezoidalGeneration+0x18e>
		// Move up
		genTrapezoidal -> dir = -1;
 8001c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c48:	22ff      	movs	r2, #255	@ 0xff
 8001c4a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	}

	// Find trajectory pattern
	if(vel_check >= vel_max){
 8001c4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001c56:	f7fe ff21 	bl	8000a9c <__aeabi_dcmpge>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <trapezoidalGeneration+0x1a8>
		// Reach max velocity
		pattern = 1;
 8001c60:	2301      	movs	r3, #1
 8001c62:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001c66:	e00b      	b.n	8001c80 <trapezoidalGeneration+0x1c0>
	}
	else if(vel_check < vel_max){
 8001c68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c6c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001c70:	f7fe ff00 	bl	8000a74 <__aeabi_dcmplt>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <trapezoidalGeneration+0x1c0>
		// Not reach max velocity
		pattern = 2;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	}

	switch(pattern){
 8001c80:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d002      	beq.n	8001c8e <trapezoidalGeneration+0x1ce>
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d048      	beq.n	8001d1e <trapezoidalGeneration+0x25e>
		genTrapezoidal -> t2 = genTrapezoidal -> t1 + genTrapezoidal -> t1;
		genTrapezoidal -> t3 = genTrapezoidal -> t2;
		genTrapezoidal -> total_time = genTrapezoidal -> t3;
		break;
	default:
		break;
 8001c8c:	e06c      	b.n	8001d68 <trapezoidalGeneration+0x2a8>
		genTrapezoidal -> t0 = 0.0;
 8001c8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	e9c1 2300 	strd	r2, r3, [r1]
		genTrapezoidal -> t1 = vel_max / acc_max;
 8001c9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ca0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ca4:	f7fe fd9e 	bl	80007e4 <__aeabi_ddiv>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001cae:	e9c1 2302 	strd	r2, r3, [r1, #8]
		genTrapezoidal -> t2 = genTrapezoidal -> t1 + ((distance - (2 * d_acc)) / vel_max);
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001cb8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	f7fe fab0 	bl	8000224 <__adddf3>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001ccc:	f7fe faa8 	bl	8000220 <__aeabi_dsub>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4610      	mov	r0, r2
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cdc:	f7fe fd82 	bl	80007e4 <__aeabi_ddiv>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	4629      	mov	r1, r5
 8001ce8:	f7fe fa9c 	bl	8000224 <__adddf3>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001cf2:	e9c1 2304 	strd	r2, r3, [r1, #16]
		genTrapezoidal -> t3 = genTrapezoidal -> t2 + genTrapezoidal -> t1;
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d02:	f7fe fa8f 	bl	8000224 <__adddf3>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d0c:	e9c1 2306 	strd	r2, r3, [r1, #24]
		genTrapezoidal -> total_time = genTrapezoidal -> t3;
 8001d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d12:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001d16:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d18:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		break;
 8001d1c:	e024      	b.n	8001d68 <trapezoidalGeneration+0x2a8>
		genTrapezoidal -> t0 = 0.0;
 8001d1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	f04f 0300 	mov.w	r3, #0
 8001d28:	e9c1 2300 	strd	r2, r3, [r1]
		genTrapezoidal -> t1 = t;
 8001d2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d2e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d32:	e9c1 2302 	strd	r2, r3, [r1, #8]
		genTrapezoidal -> t2 = genTrapezoidal -> t1 + genTrapezoidal -> t1;
 8001d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d38:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	f7fe fa70 	bl	8000224 <__adddf3>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d4a:	e9c1 2304 	strd	r2, r3, [r1, #16]
		genTrapezoidal -> t3 = genTrapezoidal -> t2;
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d50:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d56:	e9c1 2306 	strd	r2, r3, [r1, #24]
		genTrapezoidal -> total_time = genTrapezoidal -> t3;
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001d60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d62:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		break;
 8001d66:	bf00      	nop
	}
	if(distance == 0){
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001d74:	f7fe fe74 	bl	8000a60 <__aeabi_dcmpeq>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d100      	bne.n	8001d80 <trapezoidalGeneration+0x2c0>
		genTrapezoidal -> t1 = 0.0;
		genTrapezoidal -> t2 = 0.0;
		genTrapezoidal -> t3 = 0.0;
		genTrapezoidal -> total_time = 0.0;
	}
}
 8001d7e:	e022      	b.n	8001dc6 <trapezoidalGeneration+0x306>
		genTrapezoidal -> t0 = 0.0;
 8001d80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	e9c1 2300 	strd	r2, r3, [r1]
		genTrapezoidal -> t1 = 0.0;
 8001d8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	f04f 0300 	mov.w	r3, #0
 8001d98:	e9c1 2302 	strd	r2, r3, [r1, #8]
		genTrapezoidal -> t2 = 0.0;
 8001d9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	f04f 0300 	mov.w	r3, #0
 8001da6:	e9c1 2304 	strd	r2, r3, [r1, #16]
		genTrapezoidal -> t3 = 0.0;
 8001daa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	f04f 0300 	mov.w	r3, #0
 8001db4:	e9c1 2306 	strd	r2, r3, [r1, #24]
		genTrapezoidal -> total_time = 0.0;
 8001db8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	f04f 0300 	mov.w	r3, #0
 8001dc2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
}
 8001dc6:	bf00      	nop
 8001dc8:	3750      	adds	r7, #80	@ 0x50
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bdb0      	pop	{r4, r5, r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	3fe00000 	.word	0x3fe00000
 8001dd4:	00000000 	.word	0x00000000

08001dd8 <trapezoidalComputation>:

void trapezoidalComputation(trapezoidalCompute* computeTrapezoidal, trapezoidalGen* genTrapezoidal, double vel_max, double acc_max){
 8001dd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ddc:	b086      	sub	sp, #24
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6178      	str	r0, [r7, #20]
 8001de2:	6139      	str	r1, [r7, #16]
 8001de4:	ed87 0b02 	vstr	d0, [r7, #8]
 8001de8:	ed87 1b00 	vstr	d1, [r7]

	static double p_i, v_i = 0.0;
	static uint8_t pass_1 = 1;
	static uint8_t pass_2 = 0;
	static uint8_t pass_3 = 0;
	computeTrapezoidal -> t += 1.0/1000.0; // plus time every 0.001 sec or 1000 hz
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001df2:	a3a3      	add	r3, pc, #652	@ (adr r3, 8002080 <trapezoidalComputation+0x2a8>)
 8001df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df8:	f7fe fa14 	bl	8000224 <__adddf3>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	6979      	ldr	r1, [r7, #20]
 8001e02:	e9c1 2300 	strd	r2, r3, [r1]
	computeTrapezoidal -> is_finish = 0;
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	721a      	strb	r2, [r3, #8]
	if(genTrapezoidal -> t2 != genTrapezoidal -> t3){
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001e18:	f7fe fe22 	bl	8000a60 <__aeabi_dcmpeq>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f040 82df 	bne.w	80023e2 <trapezoidalComputation+0x60a>
		if((genTrapezoidal -> t0 <= computeTrapezoidal -> t) && (computeTrapezoidal -> t <= genTrapezoidal -> t1)){
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e30:	f7fe fe2a 	bl	8000a88 <__aeabi_dcmple>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 80af 	beq.w	8001f9a <trapezoidalComputation+0x1c2>
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e48:	f7fe fe1e 	bl	8000a88 <__aeabi_dcmple>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 80a3 	beq.w	8001f9a <trapezoidalComputation+0x1c2>
			if(pass_1 == 1){
 8001e54:	4b84      	ldr	r3, [pc, #528]	@ (8002068 <trapezoidalComputation+0x290>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d112      	bne.n	8001e82 <trapezoidalComputation+0xaa>
				p_i = genTrapezoidal -> initial_position;
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001e62:	4982      	ldr	r1, [pc, #520]	@ (800206c <trapezoidalComputation+0x294>)
 8001e64:	e9c1 2300 	strd	r2, r3, [r1]
				v_i = 0.0;
 8001e68:	4981      	ldr	r1, [pc, #516]	@ (8002070 <trapezoidalComputation+0x298>)
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	e9c1 2300 	strd	r2, r3, [r1]
				pass_1 = 0;
 8001e76:	4b7c      	ldr	r3, [pc, #496]	@ (8002068 <trapezoidalComputation+0x290>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
				pass_2 = 1;
 8001e7c:	4b7d      	ldr	r3, [pc, #500]	@ (8002074 <trapezoidalComputation+0x29c>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	701a      	strb	r2, [r3, #0]
			}
			computeTrapezoidal -> set_pos = p_i  + (v_i * (computeTrapezoidal -> t - genTrapezoidal -> t0)) + ((genTrapezoidal -> dir * 0.5 * acc_max * (computeTrapezoidal -> t - genTrapezoidal -> t0)  * (computeTrapezoidal -> t - genTrapezoidal -> t0)));
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8e:	f7fe f9c7 	bl	8000220 <__aeabi_dsub>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	4610      	mov	r0, r2
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4b75      	ldr	r3, [pc, #468]	@ (8002070 <trapezoidalComputation+0x298>)
 8001e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea0:	f7fe fb76 	bl	8000590 <__aeabi_dmul>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4b6f      	ldr	r3, [pc, #444]	@ (800206c <trapezoidalComputation+0x294>)
 8001eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb2:	f7fe f9b7 	bl	8000224 <__adddf3>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	4614      	mov	r4, r2
 8001ebc:	461d      	mov	r5, r3
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe faf9 	bl	80004bc <__aeabi_i2d>
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	4b6a      	ldr	r3, [pc, #424]	@ (8002078 <trapezoidalComputation+0x2a0>)
 8001ed0:	f7fe fb5e 	bl	8000590 <__aeabi_dmul>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ee0:	f7fe fb56 	bl	8000590 <__aeabi_dmul>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4690      	mov	r8, r2
 8001eea:	4699      	mov	r9, r3
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef8:	f7fe f992 	bl	8000220 <__aeabi_dsub>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4640      	mov	r0, r8
 8001f02:	4649      	mov	r1, r9
 8001f04:	f7fe fb44 	bl	8000590 <__aeabi_dmul>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4690      	mov	r8, r2
 8001f0e:	4699      	mov	r9, r3
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1c:	f7fe f980 	bl	8000220 <__aeabi_dsub>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4640      	mov	r0, r8
 8001f26:	4649      	mov	r1, r9
 8001f28:	f7fe fb32 	bl	8000590 <__aeabi_dmul>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4620      	mov	r0, r4
 8001f32:	4629      	mov	r1, r5
 8001f34:	f7fe f976 	bl	8000224 <__adddf3>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	6979      	ldr	r1, [r7, #20]
 8001f3e:	e9c1 2306 	strd	r2, r3, [r1, #24]
			computeTrapezoidal -> set_vel = v_i + (genTrapezoidal -> dir * acc_max * (computeTrapezoidal -> t - genTrapezoidal -> t0));
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe fab7 	bl	80004bc <__aeabi_i2d>
 8001f4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f52:	f7fe fb1d 	bl	8000590 <__aeabi_dmul>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4614      	mov	r4, r2
 8001f5c:	461d      	mov	r5, r3
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6a:	f7fe f959 	bl	8000220 <__aeabi_dsub>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4620      	mov	r0, r4
 8001f74:	4629      	mov	r1, r5
 8001f76:	f7fe fb0b 	bl	8000590 <__aeabi_dmul>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4610      	mov	r0, r2
 8001f80:	4619      	mov	r1, r3
 8001f82:	4b3b      	ldr	r3, [pc, #236]	@ (8002070 <trapezoidalComputation+0x298>)
 8001f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f88:	f7fe f94c 	bl	8000224 <__adddf3>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	6979      	ldr	r1, [r7, #20]
 8001f92:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001f96:	f000 bca6 	b.w	80028e6 <trapezoidalComputation+0xb0e>
		}
		else if((genTrapezoidal -> t1 < computeTrapezoidal -> t) && (computeTrapezoidal -> t <= genTrapezoidal -> t2)){
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa6:	f7fe fd65 	bl	8000a74 <__aeabi_dcmplt>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d06b      	beq.n	8002088 <trapezoidalComputation+0x2b0>
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001fbc:	f7fe fd64 	bl	8000a88 <__aeabi_dcmple>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d060      	beq.n	8002088 <trapezoidalComputation+0x2b0>
			if(pass_2 == 1){
 8001fc6:	4b2b      	ldr	r3, [pc, #172]	@ (8002074 <trapezoidalComputation+0x29c>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d111      	bne.n	8001ff2 <trapezoidalComputation+0x21a>
				p_i = computeTrapezoidal -> set_pos;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001fd4:	4925      	ldr	r1, [pc, #148]	@ (800206c <trapezoidalComputation+0x294>)
 8001fd6:	e9c1 2300 	strd	r2, r3, [r1]
				v_i = computeTrapezoidal -> set_vel;
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001fe0:	4923      	ldr	r1, [pc, #140]	@ (8002070 <trapezoidalComputation+0x298>)
 8001fe2:	e9c1 2300 	strd	r2, r3, [r1]
				pass_2 = 0;
 8001fe6:	4b23      	ldr	r3, [pc, #140]	@ (8002074 <trapezoidalComputation+0x29c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]
				pass_3 = 1;
 8001fec:	4b23      	ldr	r3, [pc, #140]	@ (800207c <trapezoidalComputation+0x2a4>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	701a      	strb	r2, [r3, #0]
			}
			computeTrapezoidal -> set_pos = p_i + ((genTrapezoidal -> dir * vel_max * (computeTrapezoidal -> t - genTrapezoidal -> t1)));
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe fa5f 	bl	80004bc <__aeabi_i2d>
 8001ffe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002002:	f7fe fac5 	bl	8000590 <__aeabi_dmul>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4614      	mov	r4, r2
 800200c:	461d      	mov	r5, r3
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800201a:	f7fe f901 	bl	8000220 <__aeabi_dsub>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4620      	mov	r0, r4
 8002024:	4629      	mov	r1, r5
 8002026:	f7fe fab3 	bl	8000590 <__aeabi_dmul>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4610      	mov	r0, r2
 8002030:	4619      	mov	r1, r3
 8002032:	4b0e      	ldr	r3, [pc, #56]	@ (800206c <trapezoidalComputation+0x294>)
 8002034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002038:	f7fe f8f4 	bl	8000224 <__adddf3>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	6979      	ldr	r1, [r7, #20]
 8002042:	e9c1 2306 	strd	r2, r3, [r1, #24]
			computeTrapezoidal -> set_vel = vel_max * genTrapezoidal -> dir;
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe fa35 	bl	80004bc <__aeabi_i2d>
 8002052:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002056:	f7fe fa9b 	bl	8000590 <__aeabi_dmul>
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	6979      	ldr	r1, [r7, #20]
 8002060:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002064:	f000 bc3f 	b.w	80028e6 <trapezoidalComputation+0xb0e>
 8002068:	20000268 	.word	0x20000268
 800206c:	20000838 	.word	0x20000838
 8002070:	20000840 	.word	0x20000840
 8002074:	20000848 	.word	0x20000848
 8002078:	3fe00000 	.word	0x3fe00000
 800207c:	20000849 	.word	0x20000849
 8002080:	d2f1a9fc 	.word	0xd2f1a9fc
 8002084:	3f50624d 	.word	0x3f50624d
		}
		else if((genTrapezoidal -> t2 < computeTrapezoidal -> t) && (computeTrapezoidal -> t <= genTrapezoidal -> t3)){
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002094:	f7fe fcee 	bl	8000a74 <__aeabi_dcmplt>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 80aa 	beq.w	80021f4 <trapezoidalComputation+0x41c>
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80020ac:	f7fe fcec 	bl	8000a88 <__aeabi_dcmple>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 809e 	beq.w	80021f4 <trapezoidalComputation+0x41c>
			if(pass_3 == 1){
 80020b8:	4b54      	ldr	r3, [pc, #336]	@ (800220c <trapezoidalComputation+0x434>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d10e      	bne.n	80020de <trapezoidalComputation+0x306>
				p_i = computeTrapezoidal -> set_pos;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80020c6:	4952      	ldr	r1, [pc, #328]	@ (8002210 <trapezoidalComputation+0x438>)
 80020c8:	e9c1 2300 	strd	r2, r3, [r1]
				v_i = computeTrapezoidal -> set_vel;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80020d2:	4950      	ldr	r1, [pc, #320]	@ (8002214 <trapezoidalComputation+0x43c>)
 80020d4:	e9c1 2300 	strd	r2, r3, [r1]
				pass_3 = 0;
 80020d8:	4b4c      	ldr	r3, [pc, #304]	@ (800220c <trapezoidalComputation+0x434>)
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
			}
			computeTrapezoidal -> set_pos = p_i + (v_i * (computeTrapezoidal -> t - genTrapezoidal -> t2)) - ((genTrapezoidal -> dir * 0.5 * acc_max * (computeTrapezoidal -> t - genTrapezoidal -> t2)) * (computeTrapezoidal -> t - genTrapezoidal -> t2));
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80020ea:	f7fe f899 	bl	8000220 <__aeabi_dsub>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4610      	mov	r0, r2
 80020f4:	4619      	mov	r1, r3
 80020f6:	4b47      	ldr	r3, [pc, #284]	@ (8002214 <trapezoidalComputation+0x43c>)
 80020f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fc:	f7fe fa48 	bl	8000590 <__aeabi_dmul>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4610      	mov	r0, r2
 8002106:	4619      	mov	r1, r3
 8002108:	4b41      	ldr	r3, [pc, #260]	@ (8002210 <trapezoidalComputation+0x438>)
 800210a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210e:	f7fe f889 	bl	8000224 <__adddf3>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4614      	mov	r4, r2
 8002118:	461d      	mov	r5, r3
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe f9cb 	bl	80004bc <__aeabi_i2d>
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	4b3b      	ldr	r3, [pc, #236]	@ (8002218 <trapezoidalComputation+0x440>)
 800212c:	f7fe fa30 	bl	8000590 <__aeabi_dmul>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4610      	mov	r0, r2
 8002136:	4619      	mov	r1, r3
 8002138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800213c:	f7fe fa28 	bl	8000590 <__aeabi_dmul>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4690      	mov	r8, r2
 8002146:	4699      	mov	r9, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002154:	f7fe f864 	bl	8000220 <__aeabi_dsub>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4640      	mov	r0, r8
 800215e:	4649      	mov	r1, r9
 8002160:	f7fe fa16 	bl	8000590 <__aeabi_dmul>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4690      	mov	r8, r2
 800216a:	4699      	mov	r9, r3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002178:	f7fe f852 	bl	8000220 <__aeabi_dsub>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4640      	mov	r0, r8
 8002182:	4649      	mov	r1, r9
 8002184:	f7fe fa04 	bl	8000590 <__aeabi_dmul>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4620      	mov	r0, r4
 800218e:	4629      	mov	r1, r5
 8002190:	f7fe f846 	bl	8000220 <__aeabi_dsub>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	6979      	ldr	r1, [r7, #20]
 800219a:	e9c1 2306 	strd	r2, r3, [r1, #24]
			computeTrapezoidal -> set_vel = v_i - (genTrapezoidal -> dir * acc_max * (computeTrapezoidal -> t - genTrapezoidal -> t2));
 800219e:	4b1d      	ldr	r3, [pc, #116]	@ (8002214 <trapezoidalComputation+0x43c>)
 80021a0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe f986 	bl	80004bc <__aeabi_i2d>
 80021b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021b4:	f7fe f9ec 	bl	8000590 <__aeabi_dmul>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4690      	mov	r8, r2
 80021be:	4699      	mov	r9, r3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80021cc:	f7fe f828 	bl	8000220 <__aeabi_dsub>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4640      	mov	r0, r8
 80021d6:	4649      	mov	r1, r9
 80021d8:	f7fe f9da 	bl	8000590 <__aeabi_dmul>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4620      	mov	r0, r4
 80021e2:	4629      	mov	r1, r5
 80021e4:	f7fe f81c 	bl	8000220 <__aeabi_dsub>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	6979      	ldr	r1, [r7, #20]
 80021ee:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80021f2:	e378      	b.n	80028e6 <trapezoidalComputation+0xb0e>
		}
		else if(genTrapezoidal -> t3 < computeTrapezoidal -> t){
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002200:	f7fe fc38 	bl	8000a74 <__aeabi_dcmplt>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d108      	bne.n	800221c <trapezoidalComputation+0x444>
				computeTrapezoidal -> set_vel = 0.0;
				computeTrapezoidal -> is_finish = 1;
			}
		}
	}
}
 800220a:	e36c      	b.n	80028e6 <trapezoidalComputation+0xb0e>
 800220c:	20000849 	.word	0x20000849
 8002210:	20000838 	.word	0x20000838
 8002214:	20000840 	.word	0x20000840
 8002218:	3fe00000 	.word	0x3fe00000
			pass_1 = 1;
 800221c:	4b77      	ldr	r3, [pc, #476]	@ (80023fc <trapezoidalComputation+0x624>)
 800221e:	2201      	movs	r2, #1
 8002220:	701a      	strb	r2, [r3, #0]
			pass_2 = 0;
 8002222:	4b77      	ldr	r3, [pc, #476]	@ (8002400 <trapezoidalComputation+0x628>)
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]
			pass_3 = 0;
 8002228:	4b76      	ldr	r3, [pc, #472]	@ (8002404 <trapezoidalComputation+0x62c>)
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
			if(computeTrapezoidal -> set_pos > genTrapezoidal -> final_position){
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800223a:	f7fe fc39 	bl	8000ab0 <__aeabi_dcmpgt>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00b      	beq.n	800225c <trapezoidalComputation+0x484>
				if(genTrapezoidal -> dir == -1){
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 800224a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224e:	d105      	bne.n	800225c <trapezoidalComputation+0x484>
					computeTrapezoidal -> set_pos = genTrapezoidal -> final_position;
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002256:	6979      	ldr	r1, [r7, #20]
 8002258:	e9c1 2306 	strd	r2, r3, [r1, #24]
			if(computeTrapezoidal -> set_pos < genTrapezoidal -> final_position){
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002268:	f7fe fc04 	bl	8000a74 <__aeabi_dcmplt>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <trapezoidalComputation+0x4b0>
				if(genTrapezoidal -> dir == 1){
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8002278:	2b01      	cmp	r3, #1
 800227a:	d105      	bne.n	8002288 <trapezoidalComputation+0x4b0>
					computeTrapezoidal -> set_pos = genTrapezoidal -> final_position;
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002282:	6979      	ldr	r1, [r7, #20]
 8002284:	e9c1 2306 	strd	r2, r3, [r1, #24]
			if(computeTrapezoidal -> set_pos != genTrapezoidal -> final_position){
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002294:	f7fe fbe4 	bl	8000a60 <__aeabi_dcmpeq>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	f040 808a 	bne.w	80023b4 <trapezoidalComputation+0x5dc>
				computeTrapezoidal -> set_pos = p_i + (v_i * (computeTrapezoidal -> t - genTrapezoidal -> t2)) - ((genTrapezoidal -> dir * 0.5 * acc_max * (computeTrapezoidal -> t - genTrapezoidal -> t2)) * (computeTrapezoidal -> t - genTrapezoidal -> t2));
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80022ac:	f7fd ffb8 	bl	8000220 <__aeabi_dsub>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4610      	mov	r0, r2
 80022b6:	4619      	mov	r1, r3
 80022b8:	4b53      	ldr	r3, [pc, #332]	@ (8002408 <trapezoidalComputation+0x630>)
 80022ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022be:	f7fe f967 	bl	8000590 <__aeabi_dmul>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4610      	mov	r0, r2
 80022c8:	4619      	mov	r1, r3
 80022ca:	4b50      	ldr	r3, [pc, #320]	@ (800240c <trapezoidalComputation+0x634>)
 80022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d0:	f7fd ffa8 	bl	8000224 <__adddf3>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4614      	mov	r4, r2
 80022da:	461d      	mov	r5, r3
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe f8ea 	bl	80004bc <__aeabi_i2d>
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	4b48      	ldr	r3, [pc, #288]	@ (8002410 <trapezoidalComputation+0x638>)
 80022ee:	f7fe f94f 	bl	8000590 <__aeabi_dmul>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4610      	mov	r0, r2
 80022f8:	4619      	mov	r1, r3
 80022fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022fe:	f7fe f947 	bl	8000590 <__aeabi_dmul>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	4690      	mov	r8, r2
 8002308:	4699      	mov	r9, r3
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002316:	f7fd ff83 	bl	8000220 <__aeabi_dsub>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4640      	mov	r0, r8
 8002320:	4649      	mov	r1, r9
 8002322:	f7fe f935 	bl	8000590 <__aeabi_dmul>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4690      	mov	r8, r2
 800232c:	4699      	mov	r9, r3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800233a:	f7fd ff71 	bl	8000220 <__aeabi_dsub>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4640      	mov	r0, r8
 8002344:	4649      	mov	r1, r9
 8002346:	f7fe f923 	bl	8000590 <__aeabi_dmul>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4620      	mov	r0, r4
 8002350:	4629      	mov	r1, r5
 8002352:	f7fd ff65 	bl	8000220 <__aeabi_dsub>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	6979      	ldr	r1, [r7, #20]
 800235c:	e9c1 2306 	strd	r2, r3, [r1, #24]
				computeTrapezoidal -> set_vel = v_i - (genTrapezoidal -> dir * acc_max * (computeTrapezoidal -> t - genTrapezoidal -> t2));
 8002360:	4b29      	ldr	r3, [pc, #164]	@ (8002408 <trapezoidalComputation+0x630>)
 8002362:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe f8a5 	bl	80004bc <__aeabi_i2d>
 8002372:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002376:	f7fe f90b 	bl	8000590 <__aeabi_dmul>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	4690      	mov	r8, r2
 8002380:	4699      	mov	r9, r3
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800238e:	f7fd ff47 	bl	8000220 <__aeabi_dsub>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4640      	mov	r0, r8
 8002398:	4649      	mov	r1, r9
 800239a:	f7fe f8f9 	bl	8000590 <__aeabi_dmul>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4620      	mov	r0, r4
 80023a4:	4629      	mov	r1, r5
 80023a6:	f7fd ff3b 	bl	8000220 <__aeabi_dsub>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	6979      	ldr	r1, [r7, #20]
 80023b0:	e9c1 2304 	strd	r2, r3, [r1, #16]
			if(computeTrapezoidal -> set_pos == genTrapezoidal -> final_position) {
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80023c0:	f7fe fb4e 	bl	8000a60 <__aeabi_dcmpeq>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d100      	bne.n	80023cc <trapezoidalComputation+0x5f4>
}
 80023ca:	e28c      	b.n	80028e6 <trapezoidalComputation+0xb0e>
				computeTrapezoidal -> set_vel = 0.0;
 80023cc:	6979      	ldr	r1, [r7, #20]
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	e9c1 2304 	strd	r2, r3, [r1, #16]
				computeTrapezoidal -> is_finish = 1;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2201      	movs	r2, #1
 80023de:	721a      	strb	r2, [r3, #8]
}
 80023e0:	e281      	b.n	80028e6 <trapezoidalComputation+0xb0e>
	else if(genTrapezoidal -> t2 == genTrapezoidal -> t3){
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023ee:	f7fe fb37 	bl	8000a60 <__aeabi_dcmpeq>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10d      	bne.n	8002414 <trapezoidalComputation+0x63c>
}
 80023f8:	e275      	b.n	80028e6 <trapezoidalComputation+0xb0e>
 80023fa:	bf00      	nop
 80023fc:	20000268 	.word	0x20000268
 8002400:	20000848 	.word	0x20000848
 8002404:	20000849 	.word	0x20000849
 8002408:	20000840 	.word	0x20000840
 800240c:	20000838 	.word	0x20000838
 8002410:	3fe00000 	.word	0x3fe00000
		if((genTrapezoidal -> t0 <= computeTrapezoidal -> t) && (computeTrapezoidal -> t <= genTrapezoidal -> t1)){
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	e9d3 0100 	ldrd	r0, r1, [r3]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002420:	f7fe fb32 	bl	8000a88 <__aeabi_dcmple>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 80ae 	beq.w	8002588 <trapezoidalComputation+0x7b0>
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002438:	f7fe fb26 	bl	8000a88 <__aeabi_dcmple>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 80a2 	beq.w	8002588 <trapezoidalComputation+0x7b0>
			if(pass_1 == 1){
 8002444:	4bb1      	ldr	r3, [pc, #708]	@ (800270c <trapezoidalComputation+0x934>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d112      	bne.n	8002472 <trapezoidalComputation+0x69a>
				p_i = genTrapezoidal -> initial_position;
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002452:	49af      	ldr	r1, [pc, #700]	@ (8002710 <trapezoidalComputation+0x938>)
 8002454:	e9c1 2300 	strd	r2, r3, [r1]
				v_i = 0.0;
 8002458:	49ae      	ldr	r1, [pc, #696]	@ (8002714 <trapezoidalComputation+0x93c>)
 800245a:	f04f 0200 	mov.w	r2, #0
 800245e:	f04f 0300 	mov.w	r3, #0
 8002462:	e9c1 2300 	strd	r2, r3, [r1]
				pass_1 = 0;
 8002466:	4ba9      	ldr	r3, [pc, #676]	@ (800270c <trapezoidalComputation+0x934>)
 8002468:	2200      	movs	r2, #0
 800246a:	701a      	strb	r2, [r3, #0]
				pass_2 = 1;
 800246c:	4baa      	ldr	r3, [pc, #680]	@ (8002718 <trapezoidalComputation+0x940>)
 800246e:	2201      	movs	r2, #1
 8002470:	701a      	strb	r2, [r3, #0]
			computeTrapezoidal -> set_pos = p_i + (v_i * (computeTrapezoidal -> t - genTrapezoidal -> t0)) + ((genTrapezoidal -> dir * 0.5 * acc_max * (computeTrapezoidal -> t - genTrapezoidal -> t0) * (computeTrapezoidal -> t - genTrapezoidal -> t0)));
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247e:	f7fd fecf 	bl	8000220 <__aeabi_dsub>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4610      	mov	r0, r2
 8002488:	4619      	mov	r1, r3
 800248a:	4ba2      	ldr	r3, [pc, #648]	@ (8002714 <trapezoidalComputation+0x93c>)
 800248c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002490:	f7fe f87e 	bl	8000590 <__aeabi_dmul>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4610      	mov	r0, r2
 800249a:	4619      	mov	r1, r3
 800249c:	4b9c      	ldr	r3, [pc, #624]	@ (8002710 <trapezoidalComputation+0x938>)
 800249e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a2:	f7fd febf 	bl	8000224 <__adddf3>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4614      	mov	r4, r2
 80024ac:	461d      	mov	r5, r3
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe f801 	bl	80004bc <__aeabi_i2d>
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	4b97      	ldr	r3, [pc, #604]	@ (800271c <trapezoidalComputation+0x944>)
 80024c0:	f7fe f866 	bl	8000590 <__aeabi_dmul>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4610      	mov	r0, r2
 80024ca:	4619      	mov	r1, r3
 80024cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024d0:	f7fe f85e 	bl	8000590 <__aeabi_dmul>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4690      	mov	r8, r2
 80024da:	4699      	mov	r9, r3
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e8:	f7fd fe9a 	bl	8000220 <__aeabi_dsub>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4640      	mov	r0, r8
 80024f2:	4649      	mov	r1, r9
 80024f4:	f7fe f84c 	bl	8000590 <__aeabi_dmul>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4690      	mov	r8, r2
 80024fe:	4699      	mov	r9, r3
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250c:	f7fd fe88 	bl	8000220 <__aeabi_dsub>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4640      	mov	r0, r8
 8002516:	4649      	mov	r1, r9
 8002518:	f7fe f83a 	bl	8000590 <__aeabi_dmul>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4620      	mov	r0, r4
 8002522:	4629      	mov	r1, r5
 8002524:	f7fd fe7e 	bl	8000224 <__adddf3>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	6979      	ldr	r1, [r7, #20]
 800252e:	e9c1 2306 	strd	r2, r3, [r1, #24]
			computeTrapezoidal -> set_vel = v_i + (genTrapezoidal -> dir * acc_max * (computeTrapezoidal -> t - genTrapezoidal -> t0));
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8002538:	4618      	mov	r0, r3
 800253a:	f7fd ffbf 	bl	80004bc <__aeabi_i2d>
 800253e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002542:	f7fe f825 	bl	8000590 <__aeabi_dmul>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4614      	mov	r4, r2
 800254c:	461d      	mov	r5, r3
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255a:	f7fd fe61 	bl	8000220 <__aeabi_dsub>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4620      	mov	r0, r4
 8002564:	4629      	mov	r1, r5
 8002566:	f7fe f813 	bl	8000590 <__aeabi_dmul>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4610      	mov	r0, r2
 8002570:	4619      	mov	r1, r3
 8002572:	4b68      	ldr	r3, [pc, #416]	@ (8002714 <trapezoidalComputation+0x93c>)
 8002574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002578:	f7fd fe54 	bl	8000224 <__adddf3>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	6979      	ldr	r1, [r7, #20]
 8002582:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002586:	e1ae      	b.n	80028e6 <trapezoidalComputation+0xb0e>
		else if((genTrapezoidal -> t1 < computeTrapezoidal -> t) && (computeTrapezoidal -> t <= genTrapezoidal -> t2)){
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002594:	f7fe fa6e 	bl	8000a74 <__aeabi_dcmplt>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 80aa 	beq.w	80026f4 <trapezoidalComputation+0x91c>
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80025ac:	f7fe fa6c 	bl	8000a88 <__aeabi_dcmple>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 809e 	beq.w	80026f4 <trapezoidalComputation+0x91c>
			if(pass_2 == 1){
 80025b8:	4b57      	ldr	r3, [pc, #348]	@ (8002718 <trapezoidalComputation+0x940>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d10e      	bne.n	80025de <trapezoidalComputation+0x806>
				p_i = computeTrapezoidal -> set_pos;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80025c6:	4952      	ldr	r1, [pc, #328]	@ (8002710 <trapezoidalComputation+0x938>)
 80025c8:	e9c1 2300 	strd	r2, r3, [r1]
				v_i = computeTrapezoidal -> set_vel;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80025d2:	4950      	ldr	r1, [pc, #320]	@ (8002714 <trapezoidalComputation+0x93c>)
 80025d4:	e9c1 2300 	strd	r2, r3, [r1]
				pass_2 = 0;
 80025d8:	4b4f      	ldr	r3, [pc, #316]	@ (8002718 <trapezoidalComputation+0x940>)
 80025da:	2200      	movs	r2, #0
 80025dc:	701a      	strb	r2, [r3, #0]
			computeTrapezoidal -> set_pos = p_i + (v_i * (computeTrapezoidal -> t - genTrapezoidal -> t1)) - ((genTrapezoidal -> dir * 0.5 * acc_max * (computeTrapezoidal -> t - genTrapezoidal -> t1) * (computeTrapezoidal -> t - genTrapezoidal -> t1)));
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80025ea:	f7fd fe19 	bl	8000220 <__aeabi_dsub>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4610      	mov	r0, r2
 80025f4:	4619      	mov	r1, r3
 80025f6:	4b47      	ldr	r3, [pc, #284]	@ (8002714 <trapezoidalComputation+0x93c>)
 80025f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fc:	f7fd ffc8 	bl	8000590 <__aeabi_dmul>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4610      	mov	r0, r2
 8002606:	4619      	mov	r1, r3
 8002608:	4b41      	ldr	r3, [pc, #260]	@ (8002710 <trapezoidalComputation+0x938>)
 800260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260e:	f7fd fe09 	bl	8000224 <__adddf3>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	4614      	mov	r4, r2
 8002618:	461d      	mov	r5, r3
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8002620:	4618      	mov	r0, r3
 8002622:	f7fd ff4b 	bl	80004bc <__aeabi_i2d>
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	4b3c      	ldr	r3, [pc, #240]	@ (800271c <trapezoidalComputation+0x944>)
 800262c:	f7fd ffb0 	bl	8000590 <__aeabi_dmul>
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	4610      	mov	r0, r2
 8002636:	4619      	mov	r1, r3
 8002638:	e9d7 2300 	ldrd	r2, r3, [r7]
 800263c:	f7fd ffa8 	bl	8000590 <__aeabi_dmul>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4690      	mov	r8, r2
 8002646:	4699      	mov	r9, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002654:	f7fd fde4 	bl	8000220 <__aeabi_dsub>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4640      	mov	r0, r8
 800265e:	4649      	mov	r1, r9
 8002660:	f7fd ff96 	bl	8000590 <__aeabi_dmul>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4690      	mov	r8, r2
 800266a:	4699      	mov	r9, r3
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002678:	f7fd fdd2 	bl	8000220 <__aeabi_dsub>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4640      	mov	r0, r8
 8002682:	4649      	mov	r1, r9
 8002684:	f7fd ff84 	bl	8000590 <__aeabi_dmul>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4620      	mov	r0, r4
 800268e:	4629      	mov	r1, r5
 8002690:	f7fd fdc6 	bl	8000220 <__aeabi_dsub>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	6979      	ldr	r1, [r7, #20]
 800269a:	e9c1 2306 	strd	r2, r3, [r1, #24]
			computeTrapezoidal -> set_vel = v_i - (genTrapezoidal -> dir * acc_max * (computeTrapezoidal -> t - genTrapezoidal -> t1));
 800269e:	4b1d      	ldr	r3, [pc, #116]	@ (8002714 <trapezoidalComputation+0x93c>)
 80026a0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fd ff06 	bl	80004bc <__aeabi_i2d>
 80026b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026b4:	f7fd ff6c 	bl	8000590 <__aeabi_dmul>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4690      	mov	r8, r2
 80026be:	4699      	mov	r9, r3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80026cc:	f7fd fda8 	bl	8000220 <__aeabi_dsub>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4640      	mov	r0, r8
 80026d6:	4649      	mov	r1, r9
 80026d8:	f7fd ff5a 	bl	8000590 <__aeabi_dmul>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4620      	mov	r0, r4
 80026e2:	4629      	mov	r1, r5
 80026e4:	f7fd fd9c 	bl	8000220 <__aeabi_dsub>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	6979      	ldr	r1, [r7, #20]
 80026ee:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80026f2:	e0f8      	b.n	80028e6 <trapezoidalComputation+0xb0e>
		else if(genTrapezoidal -> t2 < computeTrapezoidal -> t){
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002700:	f7fe f9b8 	bl	8000a74 <__aeabi_dcmplt>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10a      	bne.n	8002720 <trapezoidalComputation+0x948>
}
 800270a:	e0ec      	b.n	80028e6 <trapezoidalComputation+0xb0e>
 800270c:	20000268 	.word	0x20000268
 8002710:	20000838 	.word	0x20000838
 8002714:	20000840 	.word	0x20000840
 8002718:	20000848 	.word	0x20000848
 800271c:	3fe00000 	.word	0x3fe00000
			pass_1 = 1;
 8002720:	4b73      	ldr	r3, [pc, #460]	@ (80028f0 <trapezoidalComputation+0xb18>)
 8002722:	2201      	movs	r2, #1
 8002724:	701a      	strb	r2, [r3, #0]
			pass_2 = 0;
 8002726:	4b73      	ldr	r3, [pc, #460]	@ (80028f4 <trapezoidalComputation+0xb1c>)
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
			pass_3 = 0;
 800272c:	4b72      	ldr	r3, [pc, #456]	@ (80028f8 <trapezoidalComputation+0xb20>)
 800272e:	2200      	movs	r2, #0
 8002730:	701a      	strb	r2, [r3, #0]
			if(computeTrapezoidal -> set_pos != genTrapezoidal -> final_position){
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800273e:	f7fe f98f 	bl	8000a60 <__aeabi_dcmpeq>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	f040 808a 	bne.w	800285e <trapezoidalComputation+0xa86>
				computeTrapezoidal -> set_pos = p_i + (v_i * (computeTrapezoidal -> t - genTrapezoidal -> t1)) - ((genTrapezoidal -> dir * 0.5 * acc_max * (computeTrapezoidal -> t - genTrapezoidal -> t1) * (computeTrapezoidal -> t - genTrapezoidal -> t1)));
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002756:	f7fd fd63 	bl	8000220 <__aeabi_dsub>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4610      	mov	r0, r2
 8002760:	4619      	mov	r1, r3
 8002762:	4b66      	ldr	r3, [pc, #408]	@ (80028fc <trapezoidalComputation+0xb24>)
 8002764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002768:	f7fd ff12 	bl	8000590 <__aeabi_dmul>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4610      	mov	r0, r2
 8002772:	4619      	mov	r1, r3
 8002774:	4b62      	ldr	r3, [pc, #392]	@ (8002900 <trapezoidalComputation+0xb28>)
 8002776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277a:	f7fd fd53 	bl	8000224 <__adddf3>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4614      	mov	r4, r2
 8002784:	461d      	mov	r5, r3
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 800278c:	4618      	mov	r0, r3
 800278e:	f7fd fe95 	bl	80004bc <__aeabi_i2d>
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	4b5b      	ldr	r3, [pc, #364]	@ (8002904 <trapezoidalComputation+0xb2c>)
 8002798:	f7fd fefa 	bl	8000590 <__aeabi_dmul>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	4610      	mov	r0, r2
 80027a2:	4619      	mov	r1, r3
 80027a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027a8:	f7fd fef2 	bl	8000590 <__aeabi_dmul>
 80027ac:	4602      	mov	r2, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	4690      	mov	r8, r2
 80027b2:	4699      	mov	r9, r3
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80027c0:	f7fd fd2e 	bl	8000220 <__aeabi_dsub>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4640      	mov	r0, r8
 80027ca:	4649      	mov	r1, r9
 80027cc:	f7fd fee0 	bl	8000590 <__aeabi_dmul>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4690      	mov	r8, r2
 80027d6:	4699      	mov	r9, r3
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80027e4:	f7fd fd1c 	bl	8000220 <__aeabi_dsub>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4640      	mov	r0, r8
 80027ee:	4649      	mov	r1, r9
 80027f0:	f7fd fece 	bl	8000590 <__aeabi_dmul>
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	4620      	mov	r0, r4
 80027fa:	4629      	mov	r1, r5
 80027fc:	f7fd fd10 	bl	8000220 <__aeabi_dsub>
 8002800:	4602      	mov	r2, r0
 8002802:	460b      	mov	r3, r1
 8002804:	6979      	ldr	r1, [r7, #20]
 8002806:	e9c1 2306 	strd	r2, r3, [r1, #24]
				computeTrapezoidal -> set_vel = v_i - (genTrapezoidal -> dir * acc_max * (computeTrapezoidal -> t - genTrapezoidal -> t1));
 800280a:	4b3c      	ldr	r3, [pc, #240]	@ (80028fc <trapezoidalComputation+0xb24>)
 800280c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8002816:	4618      	mov	r0, r3
 8002818:	f7fd fe50 	bl	80004bc <__aeabi_i2d>
 800281c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002820:	f7fd feb6 	bl	8000590 <__aeabi_dmul>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	4690      	mov	r8, r2
 800282a:	4699      	mov	r9, r3
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002838:	f7fd fcf2 	bl	8000220 <__aeabi_dsub>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4640      	mov	r0, r8
 8002842:	4649      	mov	r1, r9
 8002844:	f7fd fea4 	bl	8000590 <__aeabi_dmul>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	4620      	mov	r0, r4
 800284e:	4629      	mov	r1, r5
 8002850:	f7fd fce6 	bl	8000220 <__aeabi_dsub>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	6979      	ldr	r1, [r7, #20]
 800285a:	e9c1 2304 	strd	r2, r3, [r1, #16]
			if(computeTrapezoidal -> set_pos > genTrapezoidal -> final_position){
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800286a:	f7fe f921 	bl	8000ab0 <__aeabi_dcmpgt>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00b      	beq.n	800288c <trapezoidalComputation+0xab4>
				if(genTrapezoidal -> dir == -1){
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 800287a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287e:	d105      	bne.n	800288c <trapezoidalComputation+0xab4>
					computeTrapezoidal -> set_pos = genTrapezoidal -> final_position;
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002886:	6979      	ldr	r1, [r7, #20]
 8002888:	e9c1 2306 	strd	r2, r3, [r1, #24]
			if(computeTrapezoidal -> set_pos < genTrapezoidal -> final_position){
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002898:	f7fe f8ec 	bl	8000a74 <__aeabi_dcmplt>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00a      	beq.n	80028b8 <trapezoidalComputation+0xae0>
				if(genTrapezoidal -> dir == 1){
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d105      	bne.n	80028b8 <trapezoidalComputation+0xae0>
					computeTrapezoidal -> set_pos = genTrapezoidal -> final_position;
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80028b2:	6979      	ldr	r1, [r7, #20]
 80028b4:	e9c1 2306 	strd	r2, r3, [r1, #24]
			if(computeTrapezoidal -> set_pos == genTrapezoidal -> final_position) {
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80028c4:	f7fe f8cc 	bl	8000a60 <__aeabi_dcmpeq>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d100      	bne.n	80028d0 <trapezoidalComputation+0xaf8>
}
 80028ce:	e00a      	b.n	80028e6 <trapezoidalComputation+0xb0e>
				computeTrapezoidal -> set_vel = 0.0;
 80028d0:	6979      	ldr	r1, [r7, #20]
 80028d2:	f04f 0200 	mov.w	r2, #0
 80028d6:	f04f 0300 	mov.w	r3, #0
 80028da:	e9c1 2304 	strd	r2, r3, [r1, #16]
				computeTrapezoidal -> is_finish = 1;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	2201      	movs	r2, #1
 80028e2:	721a      	strb	r2, [r3, #8]
}
 80028e4:	e7ff      	b.n	80028e6 <trapezoidalComputation+0xb0e>
 80028e6:	bf00      	nop
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80028f0:	20000268 	.word	0x20000268
 80028f4:	20000848 	.word	0x20000848
 80028f8:	20000849 	.word	0x20000849
 80028fc:	20000840 	.word	0x20000840
 8002900:	20000838 	.word	0x20000838
 8002904:	3fe00000 	.word	0x3fe00000

08002908 <ADC_init>:
 *      Author: naker
 */

#include "adc.h"

void ADC_init(ADC_HandleTypeDef* hadc, ADC* adc){
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, adc -> adc_buffer, 50);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2232      	movs	r2, #50	@ 0x32
 8002916:	4619      	mov	r1, r3
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f004 f95b 	bl	8006bd4 <HAL_ADC_Start_DMA>
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <Update_actual_eff>:
 */

#include "eff.h"

void Update_actual_eff(EFF* eff, GPIO_TypeDef* GPIO_Pull, uint16_t GPIO_Pin_Pull,
		GPIO_TypeDef* GPIO_Push, uint16_t GPIO_Pin_Push){
 8002926:	b580      	push	{r7, lr}
 8002928:	b084      	sub	sp, #16
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	603b      	str	r3, [r7, #0]
 8002932:	4613      	mov	r3, r2
 8002934:	80fb      	strh	r3, [r7, #6]
	eff -> actual_status[0] = HAL_GPIO_ReadPin(GPIO_Pull, GPIO_Pin_Pull);
 8002936:	88fb      	ldrh	r3, [r7, #6]
 8002938:	4619      	mov	r1, r3
 800293a:	68b8      	ldr	r0, [r7, #8]
 800293c:	f006 f934 	bl	8008ba8 <HAL_GPIO_ReadPin>
 8002940:	4603      	mov	r3, r0
 8002942:	461a      	mov	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	701a      	strb	r2, [r3, #0]
	eff -> actual_status[1] = HAL_GPIO_ReadPin(GPIO_Push, GPIO_Pin_Push);
 8002948:	8b3b      	ldrh	r3, [r7, #24]
 800294a:	4619      	mov	r1, r3
 800294c:	6838      	ldr	r0, [r7, #0]
 800294e:	f006 f92b 	bl	8008ba8 <HAL_GPIO_ReadPin>
 8002952:	4603      	mov	r3, r0
 8002954:	461a      	mov	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	705a      	strb	r2, [r3, #1]
	if(eff -> actual_status[0] && !eff -> actual_status[1]){
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d007      	beq.n	8002972 <Update_actual_eff+0x4c>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	785b      	ldrb	r3, [r3, #1]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d103      	bne.n	8002972 <Update_actual_eff+0x4c>
		// Pull reed switch on and Push reed switch off
		eff -> update_actual_status[0x04].U16 = 1;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2201      	movs	r2, #1
 800296e:	81da      	strh	r2, [r3, #14]
 8002970:	e00f      	b.n	8002992 <Update_actual_eff+0x6c>
//		registerFrame[0x04] -> U16 = 1;
	}
	else if(!eff -> actual_status[0] && eff -> actual_status[1]){
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d107      	bne.n	800298a <Update_actual_eff+0x64>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	785b      	ldrb	r3, [r3, #1]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <Update_actual_eff+0x64>
		// Pull reed switch off and Push reed switch on
		eff -> update_actual_status[0x04].U16 = 2;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2202      	movs	r2, #2
 8002986:	81da      	strh	r2, [r3, #14]
 8002988:	e003      	b.n	8002992 <Update_actual_eff+0x6c>
//		registerFrame[0x04] -> U16 = 2;
	}
	else{
		// Pull reed switch off and Push reed switch off
		eff -> update_actual_status[0x04].U16 = 0;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	81da      	strh	r2, [r3, #14]
//		registerFrame[0x04] = 0;
	}
}
 8002990:	bf00      	nop
 8002992:	bf00      	nop
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <Update_eff>:

void Update_eff(EFF* eff, GPIO_TypeDef* GPIO_Pull, uint16_t GPIO_Pin_Pull,
		GPIO_TypeDef* GPIO_Push, uint16_t GPIO_Pin_Push, GPIO_TypeDef* GPIO_Vacuum,
		uint16_t GPIO_Pin_Vacuum)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b084      	sub	sp, #16
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	603b      	str	r3, [r7, #0]
 80029a6:	4613      	mov	r3, r2
 80029a8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIO_Vacuum, GPIO_Pin_Vacuum, eff -> solenoid_command[0]);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	789a      	ldrb	r2, [r3, #2]
 80029ae:	8c3b      	ldrh	r3, [r7, #32]
 80029b0:	4619      	mov	r1, r3
 80029b2:	69f8      	ldr	r0, [r7, #28]
 80029b4:	f006 f910 	bl	8008bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO_Pull, GPIO_Pin_Pull, eff -> solenoid_command[1]);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	78da      	ldrb	r2, [r3, #3]
 80029bc:	88fb      	ldrh	r3, [r7, #6]
 80029be:	4619      	mov	r1, r3
 80029c0:	68b8      	ldr	r0, [r7, #8]
 80029c2:	f006 f909 	bl	8008bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO_Push, GPIO_Pin_Push, eff -> solenoid_command[2]);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	791a      	ldrb	r2, [r3, #4]
 80029ca:	8b3b      	ldrh	r3, [r7, #24]
 80029cc:	4619      	mov	r1, r3
 80029ce:	6838      	ldr	r0, [r7, #0]
 80029d0:	f006 f902 	bl	8008bd8 <HAL_GPIO_WritePin>
}
 80029d4:	bf00      	nop
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <Update_joy>:
 *      Author: naker
 */

#include "joy.h"

void Update_joy(JOY *joy){
 80029dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029e0:	b084      	sub	sp, #16
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
	uint8_t s_1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 80029e6:	2120      	movs	r1, #32
 80029e8:	4838      	ldr	r0, [pc, #224]	@ (8002acc <Update_joy+0xf0>)
 80029ea:	f006 f8dd 	bl	8008ba8 <HAL_GPIO_ReadPin>
 80029ee:	4603      	mov	r3, r0
 80029f0:	73fb      	strb	r3, [r7, #15]
	uint8_t s_2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 80029f2:	2120      	movs	r1, #32
 80029f4:	4836      	ldr	r0, [pc, #216]	@ (8002ad0 <Update_joy+0xf4>)
 80029f6:	f006 f8d7 	bl	8008ba8 <HAL_GPIO_ReadPin>
 80029fa:	4603      	mov	r3, r0
 80029fc:	73bb      	strb	r3, [r7, #14]
	uint8_t s_3 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4);
 80029fe:	2110      	movs	r1, #16
 8002a00:	4833      	ldr	r0, [pc, #204]	@ (8002ad0 <Update_joy+0xf4>)
 8002a02:	f006 f8d1 	bl	8008ba8 <HAL_GPIO_ReadPin>
 8002a06:	4603      	mov	r3, r0
 8002a08:	737b      	strb	r3, [r7, #13]
	uint8_t s_4 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8002a0a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002a0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a12:	f006 f8c9 	bl	8008ba8 <HAL_GPIO_ReadPin>
 8002a16:	4603      	mov	r3, r0
 8002a18:	733b      	strb	r3, [r7, #12]
	if(!s_1 || !s_2 || !s_3 || !s_4){
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <Update_joy+0x56>
 8002a20:	7bbb      	ldrb	r3, [r7, #14]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d005      	beq.n	8002a32 <Update_joy+0x56>
 8002a26:	7b7b      	ldrb	r3, [r7, #13]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <Update_joy+0x56>
 8002a2c:	7b3b      	ldrb	r3, [r7, #12]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d136      	bne.n	8002aa0 <Update_joy+0xc4>
		static uint8_t is_first = 1;
		static uint64_t timestamp = 0;
		if(is_first){
 8002a32:	4b28      	ldr	r3, [pc, #160]	@ (8002ad4 <Update_joy+0xf8>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <Update_joy+0x78>
			timestamp = HAL_GetTick() + 10;
 8002a3a:	f003 fcc3 	bl	80063c4 <HAL_GetTick>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	330a      	adds	r3, #10
 8002a42:	2200      	movs	r2, #0
 8002a44:	469a      	mov	sl, r3
 8002a46:	4693      	mov	fp, r2
 8002a48:	4b23      	ldr	r3, [pc, #140]	@ (8002ad8 <Update_joy+0xfc>)
 8002a4a:	e9c3 ab00 	strd	sl, fp, [r3]
			is_first = 0;
 8002a4e:	4b21      	ldr	r3, [pc, #132]	@ (8002ad4 <Update_joy+0xf8>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() > timestamp){
 8002a54:	f003 fcb6 	bl	80063c4 <HAL_GetTick>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	461c      	mov	r4, r3
 8002a5e:	4615      	mov	r5, r2
 8002a60:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad8 <Update_joy+0xfc>)
 8002a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a66:	42a2      	cmp	r2, r4
 8002a68:	41ab      	sbcs	r3, r5
 8002a6a:	d229      	bcs.n	8002ac0 <Update_joy+0xe4>
			timestamp = HAL_GetTick() + 10;
 8002a6c:	f003 fcaa 	bl	80063c4 <HAL_GetTick>
 8002a70:	4603      	mov	r3, r0
 8002a72:	330a      	adds	r3, #10
 8002a74:	2200      	movs	r2, #0
 8002a76:	4698      	mov	r8, r3
 8002a78:	4691      	mov	r9, r2
 8002a7a:	4b17      	ldr	r3, [pc, #92]	@ (8002ad8 <Update_joy+0xfc>)
 8002a7c:	e9c3 8900 	strd	r8, r9, [r3]
			joy -> s_1 = s_1;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	7bfa      	ldrb	r2, [r7, #15]
 8002a84:	701a      	strb	r2, [r3, #0]
			joy -> s_2 = s_2;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	7bba      	ldrb	r2, [r7, #14]
 8002a8a:	705a      	strb	r2, [r3, #1]
			joy -> s_3 = s_3;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	7b7a      	ldrb	r2, [r7, #13]
 8002a90:	709a      	strb	r2, [r3, #2]
			joy -> s_4 = s_4;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	7b3a      	ldrb	r2, [r7, #12]
 8002a96:	70da      	strb	r2, [r3, #3]
			joy -> is_place = 1;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	711a      	strb	r2, [r3, #4]
	if(!s_1 || !s_2 || !s_3 || !s_4){
 8002a9e:	e00f      	b.n	8002ac0 <Update_joy+0xe4>
		}
	}else{
		joy -> s_1 = 1;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	701a      	strb	r2, [r3, #0]
		joy -> s_2 = 1;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	705a      	strb	r2, [r3, #1]
		joy -> s_3 = 1;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	709a      	strb	r2, [r3, #2]
		joy -> s_4 = 1;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	70da      	strb	r2, [r3, #3]
		joy -> is_place = 0;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	711a      	strb	r2, [r3, #4]
	}
}
 8002abe:	e000      	b.n	8002ac2 <Update_joy+0xe6>
	if(!s_1 || !s_2 || !s_3 || !s_4){
 8002ac0:	bf00      	nop
}
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002acc:	48000400 	.word	0x48000400
 8002ad0:	48000800 	.word	0x48000800
 8002ad4:	20000269 	.word	0x20000269
 8002ad8:	20000850 	.word	0x20000850

08002adc <kalman_init>:
 *      Author: naker
 */

#include "kalman.h"

void kalman_init(Kalman* kalman){
 8002adc:	b5b0      	push	{r4, r5, r7, lr}
 8002ade:	b0ae      	sub	sp, #184	@ 0xb8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]

	// Adjust R&Q here
	kalman -> Q = 1.0;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002aea:	605a      	str	r2, [r3, #4]
	kalman -> R = 1.0;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002af2:	601a      	str	r2, [r3, #0]

	// Initialize matrix
	float32_t A[9] = {	1.0f, 0.001f, 0.001f*0.001f*0.5f,
 8002af4:	4bbd      	ldr	r3, [pc, #756]	@ (8002dec <kalman_init+0x310>)
 8002af6:	f107 0494 	add.w	r4, r7, #148	@ 0x94
 8002afa:	461d      	mov	r5, r3
 8002afc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002afe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b04:	682b      	ldr	r3, [r5, #0]
 8002b06:	6023      	str	r3, [r4, #0]
						0.0f, 1.0f, 0.001f,
						0.0f, 0.0f, 1.0f };

	float32_t B[3] = {	1.0f,
 8002b08:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002b0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
						0.0f,
						0.0f };

	float32_t C[3] = {	1.0f, 0.0f, 0.0f };
 8002b20:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002b24:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b2e:	f04f 0300 	mov.w	r3, #0
 8002b32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

	float32_t G[3] = {	0.001f*0.001f*0.5f,
 8002b36:	4aae      	ldr	r2, [pc, #696]	@ (8002df0 <kalman_init+0x314>)
 8002b38:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002b3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
						0.001f,
						1.0f };

	float32_t w[1] = { 0.000001f };
 8002b42:	4bac      	ldr	r3, [pc, #688]	@ (8002df4 <kalman_init+0x318>)
 8002b44:	66fb      	str	r3, [r7, #108]	@ 0x6c

	float32_t one[1] = { 0.0f };
 8002b46:	f04f 0300 	mov.w	r3, #0
 8002b4a:	66bb      	str	r3, [r7, #104]	@ 0x68

	float32_t oxt[3] = { 0.0f , 0.0f, 0.0f};
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b52:	f04f 0300 	mov.w	r3, #0
 8002b56:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b58:	f04f 0300 	mov.w	r3, #0
 8002b5c:	667b      	str	r3, [r7, #100]	@ 0x64

	float32_t txo[3] = {	0.0f,
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	65bb      	str	r3, [r7, #88]	@ 0x58
							0.0f,
							0.0f };

	float32_t txt[9] = { 0.0f, 0.0f, 0.0f,
 8002b70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b74:	2224      	movs	r2, #36	@ 0x24
 8002b76:	2100      	movs	r1, #0
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f00b f972 	bl	800de62 <memset>
						 0.0f, 0.0f, 0.0f,
						 0.0f, 0.0f, 0.0f };

	float32_t i[9] = {	1.0f, 0.0f, 0.0f,
 8002b7e:	4b9e      	ldr	r3, [pc, #632]	@ (8002df8 <kalman_init+0x31c>)
 8002b80:	f107 0408 	add.w	r4, r7, #8
 8002b84:	461d      	mov	r5, r3
 8002b86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b8e:	682b      	ldr	r3, [r5, #0]
 8002b90:	6023      	str	r3, [r4, #0]
						0.0f, 1.0f, 0.0f,
						0.0f, 0.0f, 1.0f };


	arm_mat_init_f32(&kalman -> I, 3, 3, i);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f103 0008 	add.w	r0, r3, #8
 8002b98:	f107 0308 	add.w	r3, r7, #8
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	2103      	movs	r1, #3
 8002ba0:	f00b f906 	bl	800ddb0 <arm_mat_init_f32>

	// Process model initialize
	arm_mat_init_f32(&kalman -> A, 3, 3, A);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f103 0010 	add.w	r0, r3, #16
 8002baa:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002bae:	2203      	movs	r2, #3
 8002bb0:	2103      	movs	r1, #3
 8002bb2:	f00b f8fd 	bl	800ddb0 <arm_mat_init_f32>
	arm_mat_init_f32(&kalman -> B, 3, 1, B);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f103 0018 	add.w	r0, r3, #24
 8002bbc:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	2103      	movs	r1, #3
 8002bc4:	f00b f8f4 	bl	800ddb0 <arm_mat_init_f32>
	arm_mat_init_f32(&kalman -> C, 1, 3, C);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f103 0020 	add.w	r0, r3, #32
 8002bce:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	f00b f8eb 	bl	800ddb0 <arm_mat_init_f32>
	arm_mat_init_f32(&kalman -> G, 3, 1, G);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8002be0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002be4:	2201      	movs	r2, #1
 8002be6:	2103      	movs	r1, #3
 8002be8:	f00b f8e2 	bl	800ddb0 <arm_mat_init_f32>

	// Transpose initialize
	arm_mat_init_f32(&kalman -> A_T, 3, 3, A);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8002bf2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	2103      	movs	r1, #3
 8002bfa:	f00b f8d9 	bl	800ddb0 <arm_mat_init_f32>
	arm_mat_trans_f32(&kalman -> A, &kalman -> A_T);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f103 0210 	add.w	r2, r3, #16
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3338      	adds	r3, #56	@ 0x38
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	f00b f8e8 	bl	800dde0 <arm_mat_trans_f32>
	arm_mat_init_f32(&kalman -> C_T , 3, 1, txo);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8002c16:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	2103      	movs	r1, #3
 8002c1e:	f00b f8c7 	bl	800ddb0 <arm_mat_init_f32>
	arm_mat_trans_f32(&kalman -> C, &kalman -> C_T);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f103 0220 	add.w	r2, r3, #32
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3340      	adds	r3, #64	@ 0x40
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4610      	mov	r0, r2
 8002c30:	f00b f8d6 	bl	800dde0 <arm_mat_trans_f32>
	arm_mat_init_f32(&kalman -> G_T , 1, 3, oxt);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8002c3a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002c3e:	2203      	movs	r2, #3
 8002c40:	2101      	movs	r1, #1
 8002c42:	f00b f8b5 	bl	800ddb0 <arm_mat_init_f32>
	arm_mat_trans_f32(&kalman -> G, &kalman -> G_T);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3348      	adds	r3, #72	@ 0x48
 8002c50:	4619      	mov	r1, r3
 8002c52:	4610      	mov	r0, r2
 8002c54:	f00b f8c4 	bl	800dde0 <arm_mat_trans_f32>

	// Predict equation
	// x_p_k = Ax_k_1 + Bu_k_1 + Gw
	arm_mat_init_f32(&kalman -> x_k, 3, 1, txo);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 8002c5e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002c62:	2201      	movs	r2, #1
 8002c64:	2103      	movs	r1, #3
 8002c66:	f00b f8a3 	bl	800ddb0 <arm_mat_init_f32>
	arm_mat_init_f32(&kalman -> x_p_k, 3, 1, txo);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8002c70:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002c74:	2201      	movs	r2, #1
 8002c76:	2103      	movs	r1, #3
 8002c78:	f00b f89a 	bl	800ddb0 <arm_mat_init_f32>
	arm_mat_init_f32(&kalman -> x_k_1, 3, 1, txo);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8002c82:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002c86:	2201      	movs	r2, #1
 8002c88:	2103      	movs	r1, #3
 8002c8a:	f00b f891 	bl	800ddb0 <arm_mat_init_f32>
	arm_mat_init_f32(&kalman -> Ax_k_1, 3, 1, txo);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 8002c94:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002c98:	2201      	movs	r2, #1
 8002c9a:	2103      	movs	r1, #3
 8002c9c:	f00b f888 	bl	800ddb0 <arm_mat_init_f32>
	arm_mat_init_f32(&kalman -> u_k_1, 1, 1, one);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8002ca6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002caa:	2201      	movs	r2, #1
 8002cac:	2101      	movs	r1, #1
 8002cae:	f00b f87f 	bl	800ddb0 <arm_mat_init_f32>
	arm_mat_init_f32(&kalman -> Bu_k_1, 3, 1, txo);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f103 0078 	add.w	r0, r3, #120	@ 0x78
 8002cb8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	2103      	movs	r1, #3
 8002cc0:	f00b f876 	bl	800ddb0 <arm_mat_init_f32>
	arm_mat_init_f32(&kalman -> w, 1, 1, w);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f103 0080 	add.w	r0, r3, #128	@ 0x80
 8002cca:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002cce:	2201      	movs	r2, #1
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	f00b f86d 	bl	800ddb0 <arm_mat_init_f32>
	arm_mat_init_f32(&kalman -> Gw, 3, 1, txo);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f103 0088 	add.w	r0, r3, #136	@ 0x88
 8002cdc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	2103      	movs	r1, #3
 8002ce4:	f00b f864 	bl	800ddb0 <arm_mat_init_f32>
	// P_k = AP_k_1A_T + GQG_T
	arm_mat_init_f32(&kalman -> P_k, 3, 3, txt);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f103 0098 	add.w	r0, r3, #152	@ 0x98
 8002cee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cf2:	2203      	movs	r2, #3
 8002cf4:	2103      	movs	r1, #3
 8002cf6:	f00b f85b 	bl	800ddb0 <arm_mat_init_f32>
	arm_mat_init_f32(&kalman -> P_p_k, 3, 3, txt);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8002d00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d04:	2203      	movs	r2, #3
 8002d06:	2103      	movs	r1, #3
 8002d08:	f00b f852 	bl	800ddb0 <arm_mat_init_f32>
	arm_mat_init_f32(&kalman -> P_k_1, 3, 3, txt);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f103 00a0 	add.w	r0, r3, #160	@ 0xa0
 8002d12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d16:	2203      	movs	r2, #3
 8002d18:	2103      	movs	r1, #3
 8002d1a:	f00b f849 	bl	800ddb0 <arm_mat_init_f32>
	arm_mat_init_f32(&kalman -> AP_k_1A_T, 3, 3, txt); // Apply identity at p_k_1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f103 00a8 	add.w	r0, r3, #168	@ 0xa8
 8002d24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d28:	2203      	movs	r2, #3
 8002d2a:	2103      	movs	r1, #3
 8002d2c:	f00b f840 	bl	800ddb0 <arm_mat_init_f32>
	arm_mat_init_f32(&kalman -> GG_T, 3, 3, txt);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f103 00b0 	add.w	r0, r3, #176	@ 0xb0
 8002d36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d3a:	2203      	movs	r2, #3
 8002d3c:	2103      	movs	r1, #3
 8002d3e:	f00b f837 	bl	800ddb0 <arm_mat_init_f32>
	arm_mat_init_f32(&kalman -> GQG_T, 3, 3, txt);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f103 00b8 	add.w	r0, r3, #184	@ 0xb8
 8002d48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	2103      	movs	r1, #3
 8002d50:	f00b f82e 	bl	800ddb0 <arm_mat_init_f32>
//	arm_mat_mult_f32(&kalman -> A, &kalman -> x_k_1, &kalman -> Ax_k_1);

	// Update equation
	// y_p = y - Cx_p_k
	arm_mat_init_f32(&kalman -> y_p, 1, 1, one);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f103 00c8 	add.w	r0, r3, #200	@ 0xc8
 8002d5a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002d5e:	2201      	movs	r2, #1
 8002d60:	2101      	movs	r1, #1
 8002d62:	f00b f825 	bl	800ddb0 <arm_mat_init_f32>
	arm_mat_init_f32(&kalman -> y, 1, 1, one);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f103 00c0 	add.w	r0, r3, #192	@ 0xc0
 8002d6c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002d70:	2201      	movs	r2, #1
 8002d72:	2101      	movs	r1, #1
 8002d74:	f00b f81c 	bl	800ddb0 <arm_mat_init_f32>
	arm_mat_init_f32(&kalman -> Cx_p_k, 1, 1, one);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f103 00d0 	add.w	r0, r3, #208	@ 0xd0
 8002d7e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002d82:	2201      	movs	r2, #1
 8002d84:	2101      	movs	r1, #1
 8002d86:	f00b f813 	bl	800ddb0 <arm_mat_init_f32>
//	// S = CP_kC_T + R
	arm_mat_init_f32(&kalman -> S, 1, 1, one);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 8002d90:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002d94:	2201      	movs	r2, #1
 8002d96:	2101      	movs	r1, #1
 8002d98:	f00b f80a 	bl	800ddb0 <arm_mat_init_f32>
	arm_mat_init_f32(&kalman -> S_inv, 1, 1, one);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f103 00e0 	add.w	r0, r3, #224	@ 0xe0
 8002da2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002da6:	2201      	movs	r2, #1
 8002da8:	2101      	movs	r1, #1
 8002daa:	f00b f801 	bl	800ddb0 <arm_mat_init_f32>
	arm_mat_init_f32(&kalman -> CP_kC_T, 1, 1, one); // Apply identity at p_k_1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
 8002db4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002db8:	2201      	movs	r2, #1
 8002dba:	2101      	movs	r1, #1
 8002dbc:	f00a fff8 	bl	800ddb0 <arm_mat_init_f32>
//	// K = P_kC_TS_inv
	arm_mat_init_f32(&kalman -> K, 3, 1, txt);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 8002dc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dca:	2201      	movs	r2, #1
 8002dcc:	2103      	movs	r1, #3
 8002dce:	f00a ffef 	bl	800ddb0 <arm_mat_init_f32>
	arm_mat_init_f32(&kalman -> KC, 3, 3, txt);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 8002dd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ddc:	2203      	movs	r2, #3
 8002dde:	2103      	movs	r1, #3
 8002de0:	f00a ffe6 	bl	800ddb0 <arm_mat_init_f32>
}
 8002de4:	bf00      	nop
 8002de6:	37b8      	adds	r7, #184	@ 0xb8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bdb0      	pop	{r4, r5, r7, pc}
 8002dec:	0800e244 	.word	0x0800e244
 8002df0:	0800e268 	.word	0x0800e268
 8002df4:	358637bd 	.word	0x358637bd
 8002df8:	0800e274 	.word	0x0800e274
 8002dfc:	00000000 	.word	0x00000000

08002e00 <Update_lowpass>:
 *
 *  Created on: May 7, 2024
 *      Author: naker
 */
#include "lowpass.h"
void Update_lowpass(LOWPASS* lowpass, float input){
 8002e00:	b5b0      	push	{r4, r5, r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	ed87 0a00 	vstr	s0, [r7]
	float x_n = input;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	60fb      	str	r3, [r7, #12]
	static float x_n_1 = 0.0;
	static float y_n_1 = 0.0;

	if(input == 0.0){
 8002e10:	edd7 7a00 	vldr	s15, [r7]
 8002e14:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e1c:	d107      	bne.n	8002e2e <Update_lowpass+0x2e>
		lowpass -> filtered_data = 0.0;
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	e9c1 2300 	strd	r2, r3, [r1]
 8002e2c:	e034      	b.n	8002e98 <Update_lowpass+0x98>
	}
	else{
		lowpass -> filtered_data = 0.969 * y_n_1 + 0.0155 * x_n + 0.0155 * x_n_1;
 8002e2e:	4b28      	ldr	r3, [pc, #160]	@ (8002ed0 <Update_lowpass+0xd0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fd fb54 	bl	80004e0 <__aeabi_f2d>
 8002e38:	a321      	add	r3, pc, #132	@ (adr r3, 8002ec0 <Update_lowpass+0xc0>)
 8002e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3e:	f7fd fba7 	bl	8000590 <__aeabi_dmul>
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	4614      	mov	r4, r2
 8002e48:	461d      	mov	r5, r3
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f7fd fb48 	bl	80004e0 <__aeabi_f2d>
 8002e50:	a31d      	add	r3, pc, #116	@ (adr r3, 8002ec8 <Update_lowpass+0xc8>)
 8002e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e56:	f7fd fb9b 	bl	8000590 <__aeabi_dmul>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4620      	mov	r0, r4
 8002e60:	4629      	mov	r1, r5
 8002e62:	f7fd f9df 	bl	8000224 <__adddf3>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4614      	mov	r4, r2
 8002e6c:	461d      	mov	r5, r3
 8002e6e:	4b19      	ldr	r3, [pc, #100]	@ (8002ed4 <Update_lowpass+0xd4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fd fb34 	bl	80004e0 <__aeabi_f2d>
 8002e78:	a313      	add	r3, pc, #76	@ (adr r3, 8002ec8 <Update_lowpass+0xc8>)
 8002e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7e:	f7fd fb87 	bl	8000590 <__aeabi_dmul>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4620      	mov	r0, r4
 8002e88:	4629      	mov	r1, r5
 8002e8a:	f7fd f9cb 	bl	8000224 <__adddf3>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	e9c1 2300 	strd	r2, r3, [r1]
	}
	x_n_1 = x_n;
 8002e98:	4a0e      	ldr	r2, [pc, #56]	@ (8002ed4 <Update_lowpass+0xd4>)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6013      	str	r3, [r2, #0]
	y_n_1 = lowpass -> filtered_data;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	f7fd fe6a 	bl	8000b80 <__aeabi_d2f>
 8002eac:	4603      	mov	r3, r0
 8002eae:	4a08      	ldr	r2, [pc, #32]	@ (8002ed0 <Update_lowpass+0xd0>)
 8002eb0:	6013      	str	r3, [r2, #0]

}
 8002eb2:	bf00      	nop
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bdb0      	pop	{r4, r5, r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	f3af 8000 	nop.w
 8002ec0:	49ba5e35 	.word	0x49ba5e35
 8002ec4:	3fef020c 	.word	0x3fef020c
 8002ec8:	c8b43958 	.word	0xc8b43958
 8002ecc:	3f8fbe76 	.word	0x3f8fbe76
 8002ed0:	20000858 	.word	0x20000858
 8002ed4:	2000085c 	.word	0x2000085c

08002ed8 <Reset_lowpass>:
void Reset_lowpass(LOWPASS* lowpass){
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
	lowpass -> filtered_data = 0.0;
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
	...

08002efc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f00:	b0ab      	sub	sp, #172	@ 0xac
 8002f02:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f04:	f003 f9f9 	bl	80062fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f08:	f001 f91a 	bl	8004140 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f0c:	f001 fbee 	bl	80046ec <MX_GPIO_Init>
  MX_DMA_Init();
 8002f10:	f001 fbaa 	bl	8004668 <MX_DMA_Init>
  MX_TIM1_Init();
 8002f14:	f001 f9d6 	bl	80042c4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002f18:	f001 fa84 	bl	8004424 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002f1c:	f001 fad0 	bl	80044c0 <MX_TIM4_Init>
  MX_ADC1_Init();
 8002f20:	f001 f958 	bl	80041d4 <MX_ADC1_Init>
  MX_TIM16_Init();
 8002f24:	f001 fb22 	bl	800456c <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8002f28:	f001 fb50 	bl	80045cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Modbus setting
  hmodbus.huart = &huart2;
 8002f2c:	4ab9      	ldr	r2, [pc, #740]	@ (8003214 <main+0x318>)
 8002f2e:	4bba      	ldr	r3, [pc, #744]	@ (8003218 <main+0x31c>)
 8002f30:	60d3      	str	r3, [r2, #12]
  hmodbus.htim = &htim16;
 8002f32:	4ab8      	ldr	r2, [pc, #736]	@ (8003214 <main+0x318>)
 8002f34:	4bb9      	ldr	r3, [pc, #740]	@ (800321c <main+0x320>)
 8002f36:	6113      	str	r3, [r2, #16]
  hmodbus.slaveAddress = 0x15;
 8002f38:	4ab6      	ldr	r2, [pc, #728]	@ (8003214 <main+0x318>)
 8002f3a:	2315      	movs	r3, #21
 8002f3c:	7013      	strb	r3, [r2, #0]
  hmodbus.RegisterSize = 200;
 8002f3e:	4ab5      	ldr	r2, [pc, #724]	@ (8003214 <main+0x318>)
 8002f40:	23c8      	movs	r3, #200	@ 0xc8
 8002f42:	6093      	str	r3, [r2, #8]
  Modbus_init(&hmodbus, registerFrame);
 8002f44:	49b6      	ldr	r1, [pc, #728]	@ (8003220 <main+0x324>)
 8002f46:	48b3      	ldr	r0, [pc, #716]	@ (8003214 <main+0x318>)
 8002f48:	f7fe fac6 	bl	80014d8 <Modbus_init>
  registerFrame[0x00].U16 = 22881; // Set default heart beat to "Ya"
 8002f4c:	4ab4      	ldr	r2, [pc, #720]	@ (8003220 <main+0x324>)
 8002f4e:	f645 1361 	movw	r3, #22881	@ 0x5961
 8002f52:	8013      	strh	r3, [r2, #0]

  // Update command timer
  HAL_TIM_Base_Start_IT(&main_loop_tim);
 8002f54:	48b3      	ldr	r0, [pc, #716]	@ (8003224 <main+0x328>)
 8002f56:	f006 ff73 	bl	8009e40 <HAL_TIM_Base_Start_IT>

  // PWM generator
  HAL_TIM_Base_Start(&pwm_tim);
 8002f5a:	48b3      	ldr	r0, [pc, #716]	@ (8003228 <main+0x32c>)
 8002f5c:	f006 ff00 	bl	8009d60 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&pwm_tim, pwm_channel);
 8002f60:	2100      	movs	r1, #0
 8002f62:	48b1      	ldr	r0, [pc, #708]	@ (8003228 <main+0x32c>)
 8002f64:	f007 f852 	bl	800a00c <HAL_TIM_PWM_Start>

  // Encoder reader
  HAL_TIM_Encoder_Start(&encoder_tim, encoder_channel);
 8002f68:	213c      	movs	r1, #60	@ 0x3c
 8002f6a:	48b0      	ldr	r0, [pc, #704]	@ (800322c <main+0x330>)
 8002f6c:	f007 fb0a 	bl	800a584 <HAL_TIM_Encoder_Start>
  QEI_init(&encoder, encoder_ppr, encoder_frequency, encoder_cnt_period);
 8002f70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f74:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002f7c:	48ac      	ldr	r0, [pc, #688]	@ (8003230 <main+0x334>)
 8002f7e:	f002 f993 	bl	80052a8 <QEI_init>

  // Current reader
  ADC_init(&current_adc, &current_sensor);
 8002f82:	49ac      	ldr	r1, [pc, #688]	@ (8003234 <main+0x338>)
 8002f84:	48ac      	ldr	r0, [pc, #688]	@ (8003238 <main+0x33c>)
 8002f86:	f7ff fcbf 	bl	8002908 <ADC_init>

  // Kalman filter
//  KalmanFilter_Init(&saifah, A_data, B_data, C_data, G_data, Q_data, R_data, P_data, x_data
//		  , K_data, temp1_data, temp2_data, temp3_data, temp4_data, temp5_data, temp6_data, S_data);
  kalman_init(&kalman);
 8002f8a:	48ac      	ldr	r0, [pc, #688]	@ (800323c <main+0x340>)
 8002f8c:	f7ff fda6 	bl	8002adc <kalman_init>


  // State initialize
  homing_init(&home);
 8002f90:	48ab      	ldr	r0, [pc, #684]	@ (8003240 <main+0x344>)
 8002f92:	f002 fbdf 	bl	8005754 <homing_init>
  point_init(&point);
 8002f96:	48ab      	ldr	r0, [pc, #684]	@ (8003244 <main+0x348>)
 8002f98:	f002 fbcb 	bl	8005732 <point_init>
  emer_init(&emer);
 8002f9c:	48aa      	ldr	r0, [pc, #680]	@ (8003248 <main+0x34c>)
 8002f9e:	f002 fe42 	bl	8005c26 <emer_init>


  // PID initialize
  PID_init(&p_pid, p_kp_u, p_ki_u, p_kd_u, p_kp_d, p_ki_d, p_kd_d);
 8002fa2:	4baa      	ldr	r3, [pc, #680]	@ (800324c <main+0x350>)
 8002fa4:	edd3 7a00 	vldr	s15, [r3]
 8002fa8:	4ba9      	ldr	r3, [pc, #676]	@ (8003250 <main+0x354>)
 8002faa:	ed93 7a00 	vldr	s14, [r3]
 8002fae:	4ba9      	ldr	r3, [pc, #676]	@ (8003254 <main+0x358>)
 8002fb0:	edd3 6a00 	vldr	s13, [r3]
 8002fb4:	4ba8      	ldr	r3, [pc, #672]	@ (8003258 <main+0x35c>)
 8002fb6:	ed93 6a00 	vldr	s12, [r3]
 8002fba:	4ba8      	ldr	r3, [pc, #672]	@ (800325c <main+0x360>)
 8002fbc:	edd3 5a00 	vldr	s11, [r3]
 8002fc0:	4ba7      	ldr	r3, [pc, #668]	@ (8003260 <main+0x364>)
 8002fc2:	ed93 5a00 	vldr	s10, [r3]
 8002fc6:	eef0 2a45 	vmov.f32	s5, s10
 8002fca:	eeb0 2a65 	vmov.f32	s4, s11
 8002fce:	eef0 1a46 	vmov.f32	s3, s12
 8002fd2:	eeb0 1a66 	vmov.f32	s2, s13
 8002fd6:	eef0 0a47 	vmov.f32	s1, s14
 8002fda:	eeb0 0a67 	vmov.f32	s0, s15
 8002fde:	48a1      	ldr	r0, [pc, #644]	@ (8003264 <main+0x368>)
 8002fe0:	f001 ff40 	bl	8004e64 <PID_init>
  PID_init(&v_pid, v_kp_u, v_ki_u, v_kd_u, v_kp_d, v_ki_d, v_kd_d);
 8002fe4:	4ba0      	ldr	r3, [pc, #640]	@ (8003268 <main+0x36c>)
 8002fe6:	edd3 7a00 	vldr	s15, [r3]
 8002fea:	4ba0      	ldr	r3, [pc, #640]	@ (800326c <main+0x370>)
 8002fec:	ed93 7a00 	vldr	s14, [r3]
 8002ff0:	4b9f      	ldr	r3, [pc, #636]	@ (8003270 <main+0x374>)
 8002ff2:	edd3 6a00 	vldr	s13, [r3]
 8002ff6:	4b9f      	ldr	r3, [pc, #636]	@ (8003274 <main+0x378>)
 8002ff8:	ed93 6a00 	vldr	s12, [r3]
 8002ffc:	4b9e      	ldr	r3, [pc, #632]	@ (8003278 <main+0x37c>)
 8002ffe:	edd3 5a00 	vldr	s11, [r3]
 8003002:	4b9e      	ldr	r3, [pc, #632]	@ (800327c <main+0x380>)
 8003004:	ed93 5a00 	vldr	s10, [r3]
 8003008:	eef0 2a45 	vmov.f32	s5, s10
 800300c:	eeb0 2a65 	vmov.f32	s4, s11
 8003010:	eef0 1a46 	vmov.f32	s3, s12
 8003014:	eeb0 1a66 	vmov.f32	s2, s13
 8003018:	eef0 0a47 	vmov.f32	s1, s14
 800301c:	eeb0 0a67 	vmov.f32	s0, s15
 8003020:	4897      	ldr	r0, [pc, #604]	@ (8003280 <main+0x384>)
 8003022:	f001 ff1f 	bl	8004e64 <PID_init>

  //Set point
  setpoint = 0.0;
 8003026:	4997      	ldr	r1, [pc, #604]	@ (8003284 <main+0x388>)
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	e9c1 2300 	strd	r2, r3, [r1]

  HAL_GPIO_WritePin(emer_light_gpio, emer_light_pin, RESET);
 8003034:	2200      	movs	r2, #0
 8003036:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800303a:	4893      	ldr	r0, [pc, #588]	@ (8003288 <main+0x38c>)
 800303c:	f005 fdcc 	bl	8008bd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(vacuum_gpio, vacuum_pin, RESET);
 8003040:	2200      	movs	r2, #0
 8003042:	2110      	movs	r1, #16
 8003044:	4891      	ldr	r0, [pc, #580]	@ (800328c <main+0x390>)
 8003046:	f005 fdc7 	bl	8008bd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(solenoid_pull_gpio, solenoid_pull_pin, RESET);
 800304a:	2200      	movs	r2, #0
 800304c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003050:	488e      	ldr	r0, [pc, #568]	@ (800328c <main+0x390>)
 8003052:	f005 fdc1 	bl	8008bd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(solenoid_push_gpio, solenoid_push_pin, RESET);
 8003056:	2200      	movs	r2, #0
 8003058:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800305c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003060:	f005 fdba 	bl	8008bd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(controller_error_gpio, controller_error_pin, RESET);
 8003064:	2200      	movs	r2, #0
 8003066:	2102      	movs	r1, #2
 8003068:	4888      	ldr	r0, [pc, #544]	@ (800328c <main+0x390>)
 800306a:	f005 fdb5 	bl	8008bd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motor_error_gpio, motor_error_pin, RESET);
 800306e:	2200      	movs	r2, #0
 8003070:	2104      	movs	r1, #4
 8003072:	4886      	ldr	r0, [pc, #536]	@ (800328c <main+0x390>)
 8003074:	f005 fdb0 	bl	8008bd8 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		// Update modbus
		Modbus_Protocal_Worker();
 8003078:	f7fe faba 	bl	80015f0 <Modbus_Protocal_Worker>
		// Update reed switch
		Update_actual_eff(&eff, reed_pull_gpio, reed_pull_pin, reed_push_gpio, reed_push_pin);
 800307c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003086:	2280      	movs	r2, #128	@ 0x80
 8003088:	497f      	ldr	r1, [pc, #508]	@ (8003288 <main+0x38c>)
 800308a:	4881      	ldr	r0, [pc, #516]	@ (8003290 <main+0x394>)
 800308c:	f7ff fc4b 	bl	8002926 <Update_actual_eff>
		if(HAL_GPIO_ReadPin(emer_gpio, emer_pin) == 0){
 8003090:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003094:	487d      	ldr	r0, [pc, #500]	@ (800328c <main+0x390>)
 8003096:	f005 fd87 	bl	8008ba8 <HAL_GPIO_ReadPin>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	f040 8082 	bne.w	80031a6 <main+0x2aa>
			static uint64_t timestamp = 0;
			static uint8_t first = 1;
			if(first){
 80030a2:	4b7c      	ldr	r3, [pc, #496]	@ (8003294 <main+0x398>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00f      	beq.n	80030ca <main+0x1ce>
				timestamp = HAL_GetTick() + 800;
 80030aa:	f003 f98b 	bl	80063c4 <HAL_GetTick>
 80030ae:	4603      	mov	r3, r0
 80030b0:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 80030b4:	2200      	movs	r2, #0
 80030b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030b8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80030ba:	4b77      	ldr	r3, [pc, #476]	@ (8003298 <main+0x39c>)
 80030bc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80030c0:	e9c3 1200 	strd	r1, r2, [r3]
				first = 0;
 80030c4:	4a73      	ldr	r2, [pc, #460]	@ (8003294 <main+0x398>)
 80030c6:	2300      	movs	r3, #0
 80030c8:	7013      	strb	r3, [r2, #0]
			}
			if(HAL_GetTick() > timestamp){
 80030ca:	f003 f97b 	bl	80063c4 <HAL_GetTick>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2200      	movs	r2, #0
 80030d2:	4698      	mov	r8, r3
 80030d4:	4691      	mov	r9, r2
 80030d6:	4b70      	ldr	r3, [pc, #448]	@ (8003298 <main+0x39c>)
 80030d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030dc:	4542      	cmp	r2, r8
 80030de:	eb73 0309 	sbcs.w	r3, r3, r9
 80030e2:	d260      	bcs.n	80031a6 <main+0x2aa>
				if(HAL_GPIO_ReadPin(emer_gpio, emer_pin) == 0){
 80030e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030e8:	4868      	ldr	r0, [pc, #416]	@ (800328c <main+0x390>)
 80030ea:	f005 fd5d 	bl	8008ba8 <HAL_GPIO_ReadPin>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d158      	bne.n	80031a6 <main+0x2aa>
					if(HAL_GPIO_ReadPin(home_gpio, home_pin) == 1){
 80030f4:	2140      	movs	r1, #64	@ 0x40
 80030f6:	4864      	ldr	r0, [pc, #400]	@ (8003288 <main+0x38c>)
 80030f8:	f005 fd56 	bl	8008ba8 <HAL_GPIO_ReadPin>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d151      	bne.n	80031a6 <main+0x2aa>
						static uint64_t timestamp_in = 0;
						static uint8_t first_in = 1;
						if(first_in){
 8003102:	4b66      	ldr	r3, [pc, #408]	@ (800329c <main+0x3a0>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00f      	beq.n	800312a <main+0x22e>
							timestamp = HAL_GetTick() + 800;
 800310a:	f003 f95b 	bl	80063c4 <HAL_GetTick>
 800310e:	4603      	mov	r3, r0
 8003110:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8003114:	2200      	movs	r2, #0
 8003116:	663b      	str	r3, [r7, #96]	@ 0x60
 8003118:	667a      	str	r2, [r7, #100]	@ 0x64
 800311a:	4b5f      	ldr	r3, [pc, #380]	@ (8003298 <main+0x39c>)
 800311c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003120:	e9c3 1200 	strd	r1, r2, [r3]
							first_in = 0;
 8003124:	4a5d      	ldr	r2, [pc, #372]	@ (800329c <main+0x3a0>)
 8003126:	2300      	movs	r3, #0
 8003128:	7013      	strb	r3, [r2, #0]
						}
						if(HAL_GetTick() > timestamp_in){
 800312a:	f003 f94b 	bl	80063c4 <HAL_GetTick>
 800312e:	4603      	mov	r3, r0
 8003130:	2200      	movs	r2, #0
 8003132:	469a      	mov	sl, r3
 8003134:	4693      	mov	fp, r2
 8003136:	4b5a      	ldr	r3, [pc, #360]	@ (80032a0 <main+0x3a4>)
 8003138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313c:	4552      	cmp	r2, sl
 800313e:	eb73 030b 	sbcs.w	r3, r3, fp
 8003142:	d22a      	bcs.n	800319a <main+0x29e>
							Reset_main_variable();
 8003144:	f001 fdbc 	bl	8004cc0 <Reset_main_variable>
							// Stop motor
							Update_pwm(&pwm_tim, pwm_channel, dir_gpio, dir_pin, 0);
 8003148:	2300      	movs	r3, #0
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	2302      	movs	r3, #2
 800314e:	4a4e      	ldr	r2, [pc, #312]	@ (8003288 <main+0x38c>)
 8003150:	2100      	movs	r1, #0
 8003152:	4835      	ldr	r0, [pc, #212]	@ (8003228 <main+0x32c>)
 8003154:	f002 f811 	bl	800517a <Update_pwm>
							// Emergency light enable
							HAL_GPIO_WritePin(emer_light_gpio, emer_light_pin, SET);
 8003158:	2201      	movs	r2, #1
 800315a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800315e:	484a      	ldr	r0, [pc, #296]	@ (8003288 <main+0x38c>)
 8003160:	f005 fd3a 	bl	8008bd8 <HAL_GPIO_WritePin>
							// Deactivate end effector
							eff.solenoid_command[0] = 0;
 8003164:	4a4a      	ldr	r2, [pc, #296]	@ (8003290 <main+0x394>)
 8003166:	2300      	movs	r3, #0
 8003168:	7093      	strb	r3, [r2, #2]
							eff.solenoid_command[1] = 0;
 800316a:	4a49      	ldr	r2, [pc, #292]	@ (8003290 <main+0x394>)
 800316c:	2300      	movs	r3, #0
 800316e:	70d3      	strb	r3, [r2, #3]
							eff.solenoid_command[2] = 0;
 8003170:	4a47      	ldr	r2, [pc, #284]	@ (8003290 <main+0x394>)
 8003172:	2300      	movs	r3, #0
 8003174:	7113      	strb	r3, [r2, #4]
							Update_eff(&eff, solenoid_pull_gpio, solenoid_pull_pin, solenoid_push_gpio, solenoid_push_pin, vacuum_gpio, vacuum_pin);
 8003176:	2310      	movs	r3, #16
 8003178:	9302      	str	r3, [sp, #8]
 800317a:	4b44      	ldr	r3, [pc, #272]	@ (800328c <main+0x390>)
 800317c:	9301      	str	r3, [sp, #4]
 800317e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003188:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800318c:	493f      	ldr	r1, [pc, #252]	@ (800328c <main+0x390>)
 800318e:	4840      	ldr	r0, [pc, #256]	@ (8003290 <main+0x394>)
 8003190:	f7ff fc03 	bl	800299a <Update_eff>
							mode = EMERGENCY;
 8003194:	4a43      	ldr	r2, [pc, #268]	@ (80032a4 <main+0x3a8>)
 8003196:	2303      	movs	r3, #3
 8003198:	8013      	strh	r3, [r2, #0]
						}
						first_in = 1;
 800319a:	4a40      	ldr	r2, [pc, #256]	@ (800329c <main+0x3a0>)
 800319c:	2301      	movs	r3, #1
 800319e:	7013      	strb	r3, [r2, #0]
						first = 1;
 80031a0:	4a3c      	ldr	r2, [pc, #240]	@ (8003294 <main+0x398>)
 80031a2:	2301      	movs	r3, #1
 80031a4:	7013      	strb	r3, [r2, #0]
//					mode = EMERGENCY;
//				}
//				first = 1;
//			}
//		}
		if(mode == WAIT){
 80031a6:	4b3f      	ldr	r3, [pc, #252]	@ (80032a4 <main+0x3a8>)
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f040 80c8 	bne.w	8003340 <main+0x444>

			// Update peripheral
			Vacuum_Status(&eff); // Vacuum
 80031b0:	4837      	ldr	r0, [pc, #220]	@ (8003290 <main+0x394>)
 80031b2:	f7fd fead 	bl	8000f10 <Vacuum_Status>
			Gripper_Movement_Status(&eff); // End effector
 80031b6:	4836      	ldr	r0, [pc, #216]	@ (8003290 <main+0x394>)
 80031b8:	f7fd fed6 	bl	8000f68 <Gripper_Movement_Status>
			// End effector update
			Update_eff(&eff, solenoid_pull_gpio, solenoid_pull_pin, solenoid_push_gpio, solenoid_push_pin, vacuum_gpio, vacuum_pin);
 80031bc:	2310      	movs	r3, #16
 80031be:	9302      	str	r3, [sp, #8]
 80031c0:	4b32      	ldr	r3, [pc, #200]	@ (800328c <main+0x390>)
 80031c2:	9301      	str	r3, [sp, #4]
 80031c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80031ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031d2:	492e      	ldr	r1, [pc, #184]	@ (800328c <main+0x390>)
 80031d4:	482e      	ldr	r0, [pc, #184]	@ (8003290 <main+0x394>)
 80031d6:	f7ff fbe0 	bl	800299a <Update_eff>

			//  homing command from Homing button and Base system Check command
			if(home.homing_command == 0){
 80031da:	4b19      	ldr	r3, [pc, #100]	@ (8003240 <main+0x344>)
 80031dc:	789b      	ldrb	r3, [r3, #2]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f040 80a2 	bne.w	8003328 <main+0x42c>
				Set_Home(); // Refresh homing command from base system
 80031e4:	f7fd ff76 	bl	80010d4 <Set_Home>
				if(state == 0b0010){
 80031e8:	4b2f      	ldr	r3, [pc, #188]	@ (80032a8 <main+0x3ac>)
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d15d      	bne.n	80032ac <main+0x3b0>
					// Have command from base system
					home.homing_command = 1;
 80031f0:	4a13      	ldr	r2, [pc, #76]	@ (8003240 <main+0x344>)
 80031f2:	2301      	movs	r3, #1
 80031f4:	7093      	strb	r3, [r2, #2]
					registerFrame[0x01].U16 = 0b0000; // Reset data of base system status
 80031f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003220 <main+0x324>)
 80031f8:	2300      	movs	r3, #0
 80031fa:	8053      	strh	r3, [r2, #2]
					registerFrame[0x10].U16 = 0b0010; // Set data of moving status to Home
 80031fc:	4a08      	ldr	r2, [pc, #32]	@ (8003220 <main+0x324>)
 80031fe:	2302      	movs	r3, #2
 8003200:	8413      	strh	r3, [r2, #32]
					state = registerFrame[0x10].U16;
 8003202:	4b07      	ldr	r3, [pc, #28]	@ (8003220 <main+0x324>)
 8003204:	8c1b      	ldrh	r3, [r3, #32]
 8003206:	4a28      	ldr	r2, [pc, #160]	@ (80032a8 <main+0x3ac>)
 8003208:	8013      	strh	r3, [r2, #0]
					mode = HOMING;
 800320a:	4a26      	ldr	r2, [pc, #152]	@ (80032a4 <main+0x3a8>)
 800320c:	2302      	movs	r3, #2
 800320e:	8013      	strh	r3, [r2, #0]
 8003210:	e096      	b.n	8003340 <main+0x444>
 8003212:	bf00      	nop
 8003214:	2000035c 	.word	0x2000035c
 8003218:	20000cbc 	.word	0x20000cbc
 800321c:	20000b90 	.word	0x20000b90
 8003220:	20000ec4 	.word	0x20000ec4
 8003224:	200009f8 	.word	0x200009f8
 8003228:	2000092c 	.word	0x2000092c
 800322c:	20000ac4 	.word	0x20000ac4
 8003230:	200012d0 	.word	0x200012d0
 8003234:	200011fc 	.word	0x200011fc
 8003238:	20000860 	.word	0x20000860
 800323c:	2000141c 	.word	0x2000141c
 8003240:	20000e98 	.word	0x20000e98
 8003244:	20000e90 	.word	0x20000e90
 8003248:	20000eb0 	.word	0x20000eb0
 800324c:	2000027c 	.word	0x2000027c
 8003250:	20000280 	.word	0x20000280
 8003254:	20001400 	.word	0x20001400
 8003258:	20000284 	.word	0x20000284
 800325c:	20000288 	.word	0x20000288
 8003260:	20001404 	.word	0x20001404
 8003264:	200013c0 	.word	0x200013c0
 8003268:	2000026c 	.word	0x2000026c
 800326c:	20000270 	.word	0x20000270
 8003270:	200013a8 	.word	0x200013a8
 8003274:	20000274 	.word	0x20000274
 8003278:	20000278 	.word	0x20000278
 800327c:	200013ac 	.word	0x200013ac
 8003280:	20001368 	.word	0x20001368
 8003284:	20000e80 	.word	0x20000e80
 8003288:	48000800 	.word	0x48000800
 800328c:	48000400 	.word	0x48000400
 8003290:	20001054 	.word	0x20001054
 8003294:	200002a0 	.word	0x200002a0
 8003298:	200015d8 	.word	0x200015d8
 800329c:	200002a1 	.word	0x200002a1
 80032a0:	200015e0 	.word	0x200015e0
 80032a4:	20000e8a 	.word	0x20000e8a
 80032a8:	20000356 	.word	0x20000356
				}
				else if(HAL_GPIO_ReadPin(home_gpio, home_pin) == 1){
 80032ac:	2140      	movs	r1, #64	@ 0x40
 80032ae:	4866      	ldr	r0, [pc, #408]	@ (8003448 <main+0x54c>)
 80032b0:	f005 fc7a 	bl	8008ba8 <HAL_GPIO_ReadPin>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d142      	bne.n	8003340 <main+0x444>
					static uint64_t timestamp = 0;
					static uint8_t first = 1;
					if(first){
 80032ba:	4b64      	ldr	r3, [pc, #400]	@ (800344c <main+0x550>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00e      	beq.n	80032e0 <main+0x3e4>
						timestamp = HAL_GetTick() + 100; // Delay time in ms
 80032c2:	f003 f87f 	bl	80063c4 <HAL_GetTick>
 80032c6:	4603      	mov	r3, r0
 80032c8:	3364      	adds	r3, #100	@ 0x64
 80032ca:	2200      	movs	r2, #0
 80032cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80032ce:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80032d0:	4b5f      	ldr	r3, [pc, #380]	@ (8003450 <main+0x554>)
 80032d2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80032d6:	e9c3 1200 	strd	r1, r2, [r3]
						first = 0;
 80032da:	4a5c      	ldr	r2, [pc, #368]	@ (800344c <main+0x550>)
 80032dc:	2300      	movs	r3, #0
 80032de:	7013      	strb	r3, [r2, #0]
					}
					if(HAL_GetTick() > timestamp){
 80032e0:	f003 f870 	bl	80063c4 <HAL_GetTick>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2200      	movs	r2, #0
 80032e8:	461d      	mov	r5, r3
 80032ea:	4616      	mov	r6, r2
 80032ec:	4b58      	ldr	r3, [pc, #352]	@ (8003450 <main+0x554>)
 80032ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f2:	42aa      	cmp	r2, r5
 80032f4:	41b3      	sbcs	r3, r6
 80032f6:	d223      	bcs.n	8003340 <main+0x444>
						if(HAL_GPIO_ReadPin(home_gpio, home_pin) == 1){
 80032f8:	2140      	movs	r1, #64	@ 0x40
 80032fa:	4853      	ldr	r0, [pc, #332]	@ (8003448 <main+0x54c>)
 80032fc:	f005 fc54 	bl	8008ba8 <HAL_GPIO_ReadPin>
 8003300:	4603      	mov	r3, r0
 8003302:	2b01      	cmp	r3, #1
 8003304:	d10c      	bne.n	8003320 <main+0x424>
							// Have command from home switch
							home.homing_command = 1;
 8003306:	4a53      	ldr	r2, [pc, #332]	@ (8003454 <main+0x558>)
 8003308:	2301      	movs	r3, #1
 800330a:	7093      	strb	r3, [r2, #2]
							registerFrame[0x10].U16 = 0b0010; // Set data of moving status to Home
 800330c:	4a52      	ldr	r2, [pc, #328]	@ (8003458 <main+0x55c>)
 800330e:	2302      	movs	r3, #2
 8003310:	8413      	strh	r3, [r2, #32]
							state = registerFrame[0x10].U16;
 8003312:	4b51      	ldr	r3, [pc, #324]	@ (8003458 <main+0x55c>)
 8003314:	8c1b      	ldrh	r3, [r3, #32]
 8003316:	4a51      	ldr	r2, [pc, #324]	@ (800345c <main+0x560>)
 8003318:	8013      	strh	r3, [r2, #0]
							mode = HOMING;
 800331a:	4a51      	ldr	r2, [pc, #324]	@ (8003460 <main+0x564>)
 800331c:	2302      	movs	r3, #2
 800331e:	8013      	strh	r3, [r2, #0]
//							timestamp = HAL_GetTick() + 500;
						}
						first = 1;
 8003320:	4a4a      	ldr	r2, [pc, #296]	@ (800344c <main+0x550>)
 8003322:	2301      	movs	r3, #1
 8003324:	7013      	strb	r3, [r2, #0]
 8003326:	e00b      	b.n	8003340 <main+0x444>
					}
				}
			}
			else{
				// Nothing happen
				pwm_signal = 0;
 8003328:	4a4e      	ldr	r2, [pc, #312]	@ (8003464 <main+0x568>)
 800332a:	2300      	movs	r3, #0
 800332c:	6013      	str	r3, [r2, #0]
				Update_pwm(&pwm_tim, pwm_channel, dir_gpio, dir_pin, pwm_signal); // Update main PWM signal
 800332e:	4b4d      	ldr	r3, [pc, #308]	@ (8003464 <main+0x568>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	2302      	movs	r3, #2
 8003336:	4a44      	ldr	r2, [pc, #272]	@ (8003448 <main+0x54c>)
 8003338:	2100      	movs	r1, #0
 800333a:	484b      	ldr	r0, [pc, #300]	@ (8003468 <main+0x56c>)
 800333c:	f001 ff1d 	bl	800517a <Update_pwm>
			}
		}
		if(mode == RUNNING){
 8003340:	4b47      	ldr	r3, [pc, #284]	@ (8003460 <main+0x564>)
 8003342:	881b      	ldrh	r3, [r3, #0]
 8003344:	2b01      	cmp	r3, #1
 8003346:	f040 86b5 	bne.w	80040b4 <main+0x11b8>
			if(testing == 1){
 800334a:	4b48      	ldr	r3, [pc, #288]	@ (800346c <main+0x570>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b01      	cmp	r3, #1
 8003350:	f040 809c 	bne.w	800348c <main+0x590>
				Update_joy(&joy);
 8003354:	4846      	ldr	r0, [pc, #280]	@ (8003470 <main+0x574>)
 8003356:	f7ff fb41 	bl	80029dc <Update_joy>
				Update_qei(&encoder, &htim4);
 800335a:	4946      	ldr	r1, [pc, #280]	@ (8003474 <main+0x578>)
 800335c:	4846      	ldr	r0, [pc, #280]	@ (8003478 <main+0x57c>)
 800335e:	f002 f81f 	bl	80053a0 <Update_qei>
				Update_lowpass(&lowpass, encoder.mmps);
 8003362:	4b45      	ldr	r3, [pc, #276]	@ (8003478 <main+0x57c>)
 8003364:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8003368:	4610      	mov	r0, r2
 800336a:	4619      	mov	r1, r3
 800336c:	f7fd fc08 	bl	8000b80 <__aeabi_d2f>
 8003370:	4603      	mov	r3, r0
 8003372:	ee00 3a10 	vmov	s0, r3
 8003376:	4841      	ldr	r0, [pc, #260]	@ (800347c <main+0x580>)
 8003378:	f7ff fd42 	bl	8002e00 <Update_lowpass>
				sensor[0] = __HAL_TIM_GET_COUNTER(&encoder_tim); // Encoder
 800337c:	4b3d      	ldr	r3, [pc, #244]	@ (8003474 <main+0x578>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003382:	2200      	movs	r2, #0
 8003384:	653b      	str	r3, [r7, #80]	@ 0x50
 8003386:	657a      	str	r2, [r7, #84]	@ 0x54
 8003388:	4b3d      	ldr	r3, [pc, #244]	@ (8003480 <main+0x584>)
 800338a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800338e:	e9c3 1200 	strd	r1, r2, [r3]
				sensor[1] = HAL_GPIO_ReadPin(proximity_gpio, proximity_pin); // Proximity
 8003392:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003396:	483b      	ldr	r0, [pc, #236]	@ (8003484 <main+0x588>)
 8003398:	f005 fc06 	bl	8008ba8 <HAL_GPIO_ReadPin>
 800339c:	4603      	mov	r3, r0
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2200      	movs	r2, #0
 80033a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033a4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80033a6:	4b36      	ldr	r3, [pc, #216]	@ (8003480 <main+0x584>)
 80033a8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80033ac:	e9c3 1202 	strd	r1, r2, [r3, #8]
				sensor[2] = HAL_GPIO_ReadPin(reed_pull_gpio, reed_pull_pin); // Reed switch pull
 80033b0:	2180      	movs	r1, #128	@ 0x80
 80033b2:	4825      	ldr	r0, [pc, #148]	@ (8003448 <main+0x54c>)
 80033b4:	f005 fbf8 	bl	8008ba8 <HAL_GPIO_ReadPin>
 80033b8:	4603      	mov	r3, r0
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2200      	movs	r2, #0
 80033be:	643b      	str	r3, [r7, #64]	@ 0x40
 80033c0:	647a      	str	r2, [r7, #68]	@ 0x44
 80033c2:	4b2f      	ldr	r3, [pc, #188]	@ (8003480 <main+0x584>)
 80033c4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80033c8:	e9c3 1204 	strd	r1, r2, [r3, #16]
				sensor[3] = HAL_GPIO_ReadPin(reed_push_gpio, reed_push_pin); // Reed switch push
 80033cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80033d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033d4:	f005 fbe8 	bl	8008ba8 <HAL_GPIO_ReadPin>
 80033d8:	4603      	mov	r3, r0
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2200      	movs	r2, #0
 80033de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80033e2:	4b27      	ldr	r3, [pc, #156]	@ (8003480 <main+0x584>)
 80033e4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80033e8:	e9c3 1206 	strd	r1, r2, [r3, #24]
				sensor[4] = HAL_GPIO_ReadPin(emer_gpio, emer_pin); // Emergency button
 80033ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80033f0:	4824      	ldr	r0, [pc, #144]	@ (8003484 <main+0x588>)
 80033f2:	f005 fbd9 	bl	8008ba8 <HAL_GPIO_ReadPin>
 80033f6:	4603      	mov	r3, r0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2200      	movs	r2, #0
 80033fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80033fe:	637a      	str	r2, [r7, #52]	@ 0x34
 8003400:	4b1f      	ldr	r3, [pc, #124]	@ (8003480 <main+0x584>)
 8003402:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003406:	e9c3 1208 	strd	r1, r2, [r3, #32]
				sensor[5] = HAL_GPIO_ReadPin(home_gpio, home_pin); // Home button
 800340a:	2140      	movs	r1, #64	@ 0x40
 800340c:	480e      	ldr	r0, [pc, #56]	@ (8003448 <main+0x54c>)
 800340e:	f005 fbcb 	bl	8008ba8 <HAL_GPIO_ReadPin>
 8003412:	4603      	mov	r3, r0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2200      	movs	r2, #0
 8003418:	62bb      	str	r3, [r7, #40]	@ 0x28
 800341a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800341c:	4b18      	ldr	r3, [pc, #96]	@ (8003480 <main+0x584>)
 800341e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003422:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
				Update_eff(&eff, solenoid_pull_gpio, solenoid_pull_pin, solenoid_push_gpio, solenoid_push_pin, vacuum_gpio, vacuum_pin);
 8003426:	2310      	movs	r3, #16
 8003428:	9302      	str	r3, [sp, #8]
 800342a:	4b16      	ldr	r3, [pc, #88]	@ (8003484 <main+0x588>)
 800342c:	9301      	str	r3, [sp, #4]
 800342e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003438:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800343c:	4911      	ldr	r1, [pc, #68]	@ (8003484 <main+0x588>)
 800343e:	4812      	ldr	r0, [pc, #72]	@ (8003488 <main+0x58c>)
 8003440:	f7ff faab 	bl	800299a <Update_eff>
 8003444:	f000 be36 	b.w	80040b4 <main+0x11b8>
 8003448:	48000800 	.word	0x48000800
 800344c:	200002a2 	.word	0x200002a2
 8003450:	200015e8 	.word	0x200015e8
 8003454:	20000e98 	.word	0x20000e98
 8003458:	20000ec4 	.word	0x20000ec4
 800345c:	20000356 	.word	0x20000356
 8003460:	20000e8a 	.word	0x20000e8a
 8003464:	200012c8 	.word	0x200012c8
 8003468:	2000092c 	.word	0x2000092c
 800346c:	20000eb1 	.word	0x20000eb1
 8003470:	200011ec 	.word	0x200011ec
 8003474:	20000ac4 	.word	0x20000ac4
 8003478:	200012d0 	.word	0x200012d0
 800347c:	20001360 	.word	0x20001360
 8003480:	20000e50 	.word	0x20000e50
 8003484:	48000400 	.word	0x48000400
 8003488:	20001054 	.word	0x20001054
			}
			else if(testing == 0){
 800348c:	4bab      	ldr	r3, [pc, #684]	@ (800373c <main+0x840>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	f040 860f 	bne.w	80040b4 <main+0x11b8>
				// End effector update
				Update_eff(&eff, solenoid_pull_gpio, solenoid_pull_pin, solenoid_push_gpio, solenoid_push_pin, vacuum_gpio, vacuum_pin);
 8003496:	2310      	movs	r3, #16
 8003498:	9302      	str	r3, [sp, #8]
 800349a:	4ba9      	ldr	r3, [pc, #676]	@ (8003740 <main+0x844>)
 800349c:	9301      	str	r3, [sp, #4]
 800349e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80034a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034ac:	49a4      	ldr	r1, [pc, #656]	@ (8003740 <main+0x844>)
 80034ae:	48a5      	ldr	r0, [pc, #660]	@ (8003744 <main+0x848>)
 80034b0:	f7ff fa73 	bl	800299a <Update_eff>
				// Main controller loop
				if(is_update_encoder == 1){
 80034b4:	4ba4      	ldr	r3, [pc, #656]	@ (8003748 <main+0x84c>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	f040 80a5 	bne.w	8003608 <main+0x70c>
					Update_qei(&encoder, &htim4); // Update encoder
 80034be:	49a3      	ldr	r1, [pc, #652]	@ (800374c <main+0x850>)
 80034c0:	48a3      	ldr	r0, [pc, #652]	@ (8003750 <main+0x854>)
 80034c2:	f001 ff6d 	bl	80053a0 <Update_qei>
					Update_lowpass(&lowpass, encoder.mmps);
 80034c6:	4ba2      	ldr	r3, [pc, #648]	@ (8003750 <main+0x854>)
 80034c8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80034cc:	4610      	mov	r0, r2
 80034ce:	4619      	mov	r1, r3
 80034d0:	f7fd fb56 	bl	8000b80 <__aeabi_d2f>
 80034d4:	4603      	mov	r3, r0
 80034d6:	ee00 3a10 	vmov	s0, r3
 80034da:	489e      	ldr	r0, [pc, #632]	@ (8003754 <main+0x858>)
 80034dc:	f7ff fc90 	bl	8002e00 <Update_lowpass>

//					KalmanFilter_Predict(saifah, u_data[0], w_data[0]);
//					KalmanFilter_Update(saifah, );
//					Trajectory_Generator(&genScurveData, initial_position, target_position, max_velocity, max_acceleration, max_jerk); // Generate trajectory
//					Trajectory_Evaluated(&genScurveData, &evaScurveData, initial_position, target_position, max_velocity, max_acceleration, max_jerk); // Evaluate trajectory
					if(state != 1){
 80034e0:	4b9d      	ldr	r3, [pc, #628]	@ (8003758 <main+0x85c>)
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	f000 808f 	beq.w	8003608 <main+0x70c>
						trapezoidalGeneration(&genTrapezoidalData, initial_position, target_position, max_velocity, max_acceleration);
 80034ea:	4b9c      	ldr	r3, [pc, #624]	@ (800375c <main+0x860>)
 80034ec:	ed93 7b00 	vldr	d7, [r3]
 80034f0:	4b9b      	ldr	r3, [pc, #620]	@ (8003760 <main+0x864>)
 80034f2:	ed93 6b00 	vldr	d6, [r3]
 80034f6:	4b9b      	ldr	r3, [pc, #620]	@ (8003764 <main+0x868>)
 80034f8:	ed93 5b00 	vldr	d5, [r3]
 80034fc:	4b9a      	ldr	r3, [pc, #616]	@ (8003768 <main+0x86c>)
 80034fe:	ed93 4b00 	vldr	d4, [r3]
 8003502:	eeb0 3a44 	vmov.f32	s6, s8
 8003506:	eef0 3a64 	vmov.f32	s7, s9
 800350a:	eeb0 2a45 	vmov.f32	s4, s10
 800350e:	eef0 2a65 	vmov.f32	s5, s11
 8003512:	eeb0 1a46 	vmov.f32	s2, s12
 8003516:	eef0 1a66 	vmov.f32	s3, s13
 800351a:	eeb0 0a47 	vmov.f32	s0, s14
 800351e:	eef0 0a67 	vmov.f32	s1, s15
 8003522:	4892      	ldr	r0, [pc, #584]	@ (800376c <main+0x870>)
 8003524:	f7fe facc 	bl	8001ac0 <trapezoidalGeneration>
						trapezoidalComputation(&computeTrapezoidalData, &genTrapezoidalData, max_velocity, max_acceleration);
 8003528:	4b8e      	ldr	r3, [pc, #568]	@ (8003764 <main+0x868>)
 800352a:	ed93 7b00 	vldr	d7, [r3]
 800352e:	4b8e      	ldr	r3, [pc, #568]	@ (8003768 <main+0x86c>)
 8003530:	ed93 6b00 	vldr	d6, [r3]
 8003534:	eeb0 1a46 	vmov.f32	s2, s12
 8003538:	eef0 1a66 	vmov.f32	s3, s13
 800353c:	eeb0 0a47 	vmov.f32	s0, s14
 8003540:	eef0 0a67 	vmov.f32	s1, s15
 8003544:	4989      	ldr	r1, [pc, #548]	@ (800376c <main+0x870>)
 8003546:	488a      	ldr	r0, [pc, #552]	@ (8003770 <main+0x874>)
 8003548:	f7fe fc46 	bl	8001dd8 <trapezoidalComputation>
	//
	//					setpoint_pos = evaScurveData.setposition; // Position set point
	//					setpoint_vel = evaScurveData.setvelocity; // Feed forward velocity
						setpoint_pos = computeTrapezoidalData.set_pos;
 800354c:	4b88      	ldr	r3, [pc, #544]	@ (8003770 <main+0x874>)
 800354e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003552:	4988      	ldr	r1, [pc, #544]	@ (8003774 <main+0x878>)
 8003554:	e9c1 2300 	strd	r2, r3, [r1]
						setpoint_vel = computeTrapezoidalData.set_vel;
 8003558:	4b85      	ldr	r3, [pc, #532]	@ (8003770 <main+0x874>)
 800355a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800355e:	4986      	ldr	r1, [pc, #536]	@ (8003778 <main+0x87c>)
 8003560:	e9c1 2300 	strd	r2, r3, [r1]
//						if(start_position_control == 1){
//							start_position_control = 0;
//						}
						Update_position_control(setpoint_pos);
 8003564:	4b83      	ldr	r3, [pc, #524]	@ (8003774 <main+0x878>)
 8003566:	ed93 7b00 	vldr	d7, [r3]
 800356a:	eeb0 0a47 	vmov.f32	s0, s14
 800356e:	eef0 0a67 	vmov.f32	s1, s15
 8003572:	f001 faf5 	bl	8004b60 <Update_position_control>
						Update_velocity_control(setpoint_vel + p_output);
 8003576:	4b80      	ldr	r3, [pc, #512]	@ (8003778 <main+0x87c>)
 8003578:	e9d3 0100 	ldrd	r0, r1, [r3]
 800357c:	4b7f      	ldr	r3, [pc, #508]	@ (800377c <main+0x880>)
 800357e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003582:	f7fc fe4f 	bl	8000224 <__adddf3>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	ec43 2b17 	vmov	d7, r2, r3
 800358e:	eeb0 0a47 	vmov.f32	s0, s14
 8003592:	eef0 0a67 	vmov.f32	s1, s15
 8003596:	f001 faa3 	bl	8004ae0 <Update_velocity_control>
						if(is_finish_position == 0){
 800359a:	4b79      	ldr	r3, [pc, #484]	@ (8003780 <main+0x884>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d122      	bne.n	80035e8 <main+0x6ec>
							pwm_signal = -65535 + (((v_output - (-24)) * (65535 - (-65535))) / (24 - (-24)));
 80035a2:	4b78      	ldr	r3, [pc, #480]	@ (8003784 <main+0x888>)
 80035a4:	edd3 7a00 	vldr	s15, [r3]
 80035a8:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 80035ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035b0:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8003788 <main+0x88c>
 80035b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80035b8:	eddf 6a74 	vldr	s13, [pc, #464]	@ 800378c <main+0x890>
 80035bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035c0:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8003790 <main+0x894>
 80035c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80035c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035cc:	ee17 2a90 	vmov	r2, s15
 80035d0:	4b70      	ldr	r3, [pc, #448]	@ (8003794 <main+0x898>)
 80035d2:	601a      	str	r2, [r3, #0]
							Update_pwm(&pwm_tim, pwm_channel, dir_gpio, dir_pin, pwm_signal); // Update main PWM signal
 80035d4:	4b6f      	ldr	r3, [pc, #444]	@ (8003794 <main+0x898>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	2302      	movs	r3, #2
 80035dc:	4a6e      	ldr	r2, [pc, #440]	@ (8003798 <main+0x89c>)
 80035de:	2100      	movs	r1, #0
 80035e0:	486e      	ldr	r0, [pc, #440]	@ (800379c <main+0x8a0>)
 80035e2:	f001 fdca 	bl	800517a <Update_pwm>
 80035e6:	e00c      	b.n	8003602 <main+0x706>
						}
						else{
							pwm_signal = 8000;
 80035e8:	4a6a      	ldr	r2, [pc, #424]	@ (8003794 <main+0x898>)
 80035ea:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80035ee:	6013      	str	r3, [r2, #0]
							Update_pwm(&pwm_tim, pwm_channel, dir_gpio, dir_pin, pwm_signal); // Update main PWM signal
 80035f0:	4b68      	ldr	r3, [pc, #416]	@ (8003794 <main+0x898>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	2302      	movs	r3, #2
 80035f8:	4a67      	ldr	r2, [pc, #412]	@ (8003798 <main+0x89c>)
 80035fa:	2100      	movs	r1, #0
 80035fc:	4867      	ldr	r0, [pc, #412]	@ (800379c <main+0x8a0>)
 80035fe:	f001 fdbc 	bl	800517a <Update_pwm>
						}
						is_update_encoder = 0;
 8003602:	4a51      	ldr	r2, [pc, #324]	@ (8003748 <main+0x84c>)
 8003604:	2300      	movs	r3, #0
 8003606:	7013      	strb	r3, [r2, #0]
					}
				}
				if(HAL_GPIO_ReadPin(home_gpio, home_pin) == 1){
 8003608:	2140      	movs	r1, #64	@ 0x40
 800360a:	4863      	ldr	r0, [pc, #396]	@ (8003798 <main+0x89c>)
 800360c:	f005 facc 	bl	8008ba8 <HAL_GPIO_ReadPin>
 8003610:	4603      	mov	r3, r0
 8003612:	2b01      	cmp	r3, #1
 8003614:	d13b      	bne.n	800368e <main+0x792>
					static uint64_t timestamp = 0;
					static uint8_t first = 1;
					if(first){
 8003616:	4b62      	ldr	r3, [pc, #392]	@ (80037a0 <main+0x8a4>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00e      	beq.n	800363c <main+0x740>
						timestamp = HAL_GetTick() + 100; // Delay time in ms
 800361e:	f002 fed1 	bl	80063c4 <HAL_GetTick>
 8003622:	4603      	mov	r3, r0
 8003624:	3364      	adds	r3, #100	@ 0x64
 8003626:	2200      	movs	r2, #0
 8003628:	623b      	str	r3, [r7, #32]
 800362a:	627a      	str	r2, [r7, #36]	@ 0x24
 800362c:	4b5d      	ldr	r3, [pc, #372]	@ (80037a4 <main+0x8a8>)
 800362e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003632:	e9c3 1200 	strd	r1, r2, [r3]
						first = 0;
 8003636:	4a5a      	ldr	r2, [pc, #360]	@ (80037a0 <main+0x8a4>)
 8003638:	2300      	movs	r3, #0
 800363a:	7013      	strb	r3, [r2, #0]
					}
					if(HAL_GetTick() > timestamp){
 800363c:	f002 fec2 	bl	80063c4 <HAL_GetTick>
 8003640:	4603      	mov	r3, r0
 8003642:	2200      	movs	r2, #0
 8003644:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003648:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800364c:	4b55      	ldr	r3, [pc, #340]	@ (80037a4 <main+0x8a8>)
 800364e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003652:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003656:	428a      	cmp	r2, r1
 8003658:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800365c:	418b      	sbcs	r3, r1
 800365e:	d216      	bcs.n	800368e <main+0x792>
						if(HAL_GPIO_ReadPin(home_gpio, home_pin) == 1){
 8003660:	2140      	movs	r1, #64	@ 0x40
 8003662:	484d      	ldr	r0, [pc, #308]	@ (8003798 <main+0x89c>)
 8003664:	f005 faa0 	bl	8008ba8 <HAL_GPIO_ReadPin>
 8003668:	4603      	mov	r3, r0
 800366a:	2b01      	cmp	r3, #1
 800366c:	d10c      	bne.n	8003688 <main+0x78c>
							// Have command from home switch
							home.homing_command = 1;
 800366e:	4a4e      	ldr	r2, [pc, #312]	@ (80037a8 <main+0x8ac>)
 8003670:	2301      	movs	r3, #1
 8003672:	7093      	strb	r3, [r2, #2]
							registerFrame[0x10].U16 = 0b0010; // Set data of moving status to Home
 8003674:	4a4d      	ldr	r2, [pc, #308]	@ (80037ac <main+0x8b0>)
 8003676:	2302      	movs	r3, #2
 8003678:	8413      	strh	r3, [r2, #32]
							state = registerFrame[0x10].U16;
 800367a:	4b4c      	ldr	r3, [pc, #304]	@ (80037ac <main+0x8b0>)
 800367c:	8c1b      	ldrh	r3, [r3, #32]
 800367e:	4a36      	ldr	r2, [pc, #216]	@ (8003758 <main+0x85c>)
 8003680:	8013      	strh	r3, [r2, #0]
							mode = HOMING;
 8003682:	4a4b      	ldr	r2, [pc, #300]	@ (80037b0 <main+0x8b4>)
 8003684:	2302      	movs	r3, #2
 8003686:	8013      	strh	r3, [r2, #0]
						}
						first = 1;
 8003688:	4a45      	ldr	r2, [pc, #276]	@ (80037a0 <main+0x8a4>)
 800368a:	2301      	movs	r3, #1
 800368c:	7013      	strb	r3, [r2, #0]
					}
				}
				if(registerFrame[0x01].U16 != 0){
 800368e:	4b47      	ldr	r3, [pc, #284]	@ (80037ac <main+0x8b0>)
 8003690:	885b      	ldrh	r3, [r3, #2]
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 80be 	beq.w	8003814 <main+0x918>

					// Check command from base system status
					//  homing command from Homing button and Base system Check command
					Set_Home(); // Refresh homing command from base system
 8003698:	f7fd fd1c 	bl	80010d4 <Set_Home>
					if(state == 0b0010){
 800369c:	4b2e      	ldr	r3, [pc, #184]	@ (8003758 <main+0x85c>)
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d114      	bne.n	80036ce <main+0x7d2>
						// Have command from base system
						mode = HOMING; // Go to wait mode for Deactivate end effector
 80036a4:	4a42      	ldr	r2, [pc, #264]	@ (80037b0 <main+0x8b4>)
 80036a6:	2302      	movs	r3, #2
 80036a8:	8013      	strh	r3, [r2, #0]
						home.homing_command = 1;
 80036aa:	4a3f      	ldr	r2, [pc, #252]	@ (80037a8 <main+0x8ac>)
 80036ac:	2301      	movs	r3, #1
 80036ae:	7093      	strb	r3, [r2, #2]
						registerFrame[0x01].U16 = 0b0000; // Reset data of base system status
 80036b0:	4a3e      	ldr	r2, [pc, #248]	@ (80037ac <main+0x8b0>)
 80036b2:	2300      	movs	r3, #0
 80036b4:	8053      	strh	r3, [r2, #2]
						registerFrame[0x10].U16 = 0b0010; // Set data of moving status to Home
 80036b6:	4a3d      	ldr	r2, [pc, #244]	@ (80037ac <main+0x8b0>)
 80036b8:	2302      	movs	r3, #2
 80036ba:	8413      	strh	r3, [r2, #32]
						state = registerFrame[0x10].U16 = 0b0010;
 80036bc:	4a3b      	ldr	r2, [pc, #236]	@ (80037ac <main+0x8b0>)
 80036be:	2302      	movs	r3, #2
 80036c0:	8413      	strh	r3, [r2, #32]
 80036c2:	4b3a      	ldr	r3, [pc, #232]	@ (80037ac <main+0x8b0>)
 80036c4:	8c1b      	ldrh	r3, [r3, #32]
 80036c6:	4a24      	ldr	r2, [pc, #144]	@ (8003758 <main+0x85c>)
 80036c8:	8013      	strh	r3, [r2, #0]
 80036ca:	f000 bcf3 	b.w	80040b4 <main+0x11b8>
					}
					// Go point command from base system
					else if(Run_Point_Mode() == 1){
 80036ce:	f7fd fced 	bl	80010ac <Run_Point_Mode>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d117      	bne.n	8003708 <main+0x80c>
						registerFrame[0x10].U16 = 0b00010000;
 80036d8:	4a34      	ldr	r2, [pc, #208]	@ (80037ac <main+0x8b0>)
 80036da:	2310      	movs	r3, #16
 80036dc:	8413      	strh	r3, [r2, #32]
						state = registerFrame[0x10].U16;
 80036de:	4b33      	ldr	r3, [pc, #204]	@ (80037ac <main+0x8b0>)
 80036e0:	8c1b      	ldrh	r3, [r3, #32]
 80036e2:	4a1d      	ldr	r2, [pc, #116]	@ (8003758 <main+0x85c>)
 80036e4:	8013      	strh	r3, [r2, #0]
//						x_axis_position = registerFrame[0x40].U16 / 10.0;
						setpoint = Set_Goal_Point();
 80036e6:	f7fd fcc9 	bl	800107c <Set_Goal_Point>
 80036ea:	ee10 3a10 	vmov	r3, s0
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fc fef6 	bl	80004e0 <__aeabi_f2d>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	492e      	ldr	r1, [pc, #184]	@ (80037b4 <main+0x8b8>)
 80036fa:	e9c1 2300 	strd	r2, r3, [r1]
						ready = 1;
 80036fe:	4a2e      	ldr	r2, [pc, #184]	@ (80037b8 <main+0x8bc>)
 8003700:	2301      	movs	r3, #1
 8003702:	7013      	strb	r3, [r2, #0]
 8003704:	f000 bcd6 	b.w	80040b4 <main+0x11b8>
					}
					// Set shelves command from base system
					else if(Set_Shelves() == 1){
 8003708:	f7fd fc90 	bl	800102c <Set_Shelves>
 800370c:	4603      	mov	r3, r0
 800370e:	2b01      	cmp	r3, #1
 8003710:	d156      	bne.n	80037c0 <main+0x8c4>
						joy.shelves_position[0] = 0;
 8003712:	4a2a      	ldr	r2, [pc, #168]	@ (80037bc <main+0x8c0>)
 8003714:	2300      	movs	r3, #0
 8003716:	80d3      	strh	r3, [r2, #6]
						joy.shelves_position[1] = 0;
 8003718:	4a28      	ldr	r2, [pc, #160]	@ (80037bc <main+0x8c0>)
 800371a:	2300      	movs	r3, #0
 800371c:	8113      	strh	r3, [r2, #8]
						joy.shelves_position[2] = 0;
 800371e:	4a27      	ldr	r2, [pc, #156]	@ (80037bc <main+0x8c0>)
 8003720:	2300      	movs	r3, #0
 8003722:	8153      	strh	r3, [r2, #10]
						joy.shelves_position[3] = 0;
 8003724:	4a25      	ldr	r2, [pc, #148]	@ (80037bc <main+0x8c0>)
 8003726:	2300      	movs	r3, #0
 8003728:	8193      	strh	r3, [r2, #12]
						joy.shelves_position[4] = 0;
 800372a:	4a24      	ldr	r2, [pc, #144]	@ (80037bc <main+0x8c0>)
 800372c:	2300      	movs	r3, #0
 800372e:	81d3      	strh	r3, [r2, #14]
						ready = 1;
 8003730:	4a21      	ldr	r2, [pc, #132]	@ (80037b8 <main+0x8bc>)
 8003732:	2301      	movs	r3, #1
 8003734:	7013      	strb	r3, [r2, #0]
 8003736:	f000 bcbd 	b.w	80040b4 <main+0x11b8>
 800373a:	bf00      	nop
 800373c:	20000eb1 	.word	0x20000eb1
 8003740:	48000400 	.word	0x48000400
 8003744:	20001054 	.word	0x20001054
 8003748:	200012cc 	.word	0x200012cc
 800374c:	20000ac4 	.word	0x20000ac4
 8003750:	200012d0 	.word	0x200012d0
 8003754:	20001360 	.word	0x20001360
 8003758:	20000356 	.word	0x20000356
 800375c:	200015b8 	.word	0x200015b8
 8003760:	200015c0 	.word	0x200015c0
 8003764:	20000290 	.word	0x20000290
 8003768:	20000298 	.word	0x20000298
 800376c:	20001550 	.word	0x20001550
 8003770:	20001598 	.word	0x20001598
 8003774:	200015c8 	.word	0x200015c8
 8003778:	200015d0 	.word	0x200015d0
 800377c:	20001410 	.word	0x20001410
 8003780:	20001418 	.word	0x20001418
 8003784:	200013b8 	.word	0x200013b8
 8003788:	47ffff00 	.word	0x47ffff00
 800378c:	42400000 	.word	0x42400000
 8003790:	477fff00 	.word	0x477fff00
 8003794:	200012c8 	.word	0x200012c8
 8003798:	48000800 	.word	0x48000800
 800379c:	2000092c 	.word	0x2000092c
 80037a0:	200002a3 	.word	0x200002a3
 80037a4:	200015f0 	.word	0x200015f0
 80037a8:	20000e98 	.word	0x20000e98
 80037ac:	20000ec4 	.word	0x20000ec4
 80037b0:	20000e8a 	.word	0x20000e8a
 80037b4:	20000e80 	.word	0x20000e80
 80037b8:	20000e8c 	.word	0x20000e8c
 80037bc:	200011ec 	.word	0x200011ec
					}
					// Run jog mode from base system
					else if(Run_Jog_Mode() == 1){
 80037c0:	f7fd fe2e 	bl	8001420 <Run_Jog_Mode>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	f040 8474 	bne.w	80040b4 <main+0x11b8>
						SetPick_PlaceOrder();
 80037cc:	f7fd fc9e 	bl	800110c <SetPick_PlaceOrder>
						jog_status[0] = 1; // Go pick first
 80037d0:	4a92      	ldr	r2, [pc, #584]	@ (8003a1c <main+0xb20>)
 80037d2:	2301      	movs	r3, #1
 80037d4:	7013      	strb	r3, [r2, #0]
						jog_status[1] = 0;
 80037d6:	4a91      	ldr	r2, [pc, #580]	@ (8003a1c <main+0xb20>)
 80037d8:	2300      	movs	r3, #0
 80037da:	7053      	strb	r3, [r2, #1]
						registerFrame[0x10].U16 = 4;
 80037dc:	4a90      	ldr	r2, [pc, #576]	@ (8003a20 <main+0xb24>)
 80037de:	2304      	movs	r3, #4
 80037e0:	8413      	strh	r3, [r2, #32]
						state = registerFrame[0x10].U16;
 80037e2:	4b8f      	ldr	r3, [pc, #572]	@ (8003a20 <main+0xb24>)
 80037e4:	8c1b      	ldrh	r3, [r3, #32]
 80037e6:	4a8f      	ldr	r2, [pc, #572]	@ (8003a24 <main+0xb28>)
 80037e8:	8013      	strh	r3, [r2, #0]
						strcpy(Jogmode, "Go to Pick...");
 80037ea:	4a8f      	ldr	r2, [pc, #572]	@ (8003a28 <main+0xb2c>)
 80037ec:	4b8f      	ldr	r3, [pc, #572]	@ (8003a2c <main+0xb30>)
 80037ee:	4614      	mov	r4, r2
 80037f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80037f2:	6020      	str	r0, [r4, #0]
 80037f4:	6061      	str	r1, [r4, #4]
 80037f6:	60a2      	str	r2, [r4, #8]
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	81a3      	strh	r3, [r4, #12]
						ready = 1;
 80037fc:	4a8c      	ldr	r2, [pc, #560]	@ (8003a30 <main+0xb34>)
 80037fe:	2301      	movs	r3, #1
 8003800:	7013      	strb	r3, [r2, #0]
						skip = 0;
 8003802:	498c      	ldr	r1, [pc, #560]	@ (8003a34 <main+0xb38>)
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	e9c1 2300 	strd	r2, r3, [r1]
 8003810:	f000 bc50 	b.w	80040b4 <main+0x11b8>
					}
				}
				else{
					// Check state from z moving status
					// Set shelve
					if(state == 1){
 8003814:	4b83      	ldr	r3, [pc, #524]	@ (8003a24 <main+0xb28>)
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	2b01      	cmp	r3, #1
 800381a:	f040 815f 	bne.w	8003adc <main+0xbe0>
						if(ready == 1){
 800381e:	4b84      	ldr	r3, [pc, #528]	@ (8003a30 <main+0xb34>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b01      	cmp	r3, #1
 8003824:	f040 8446 	bne.w	80040b4 <main+0x11b8>
							static uint8_t repeat = 0;
							static int32_t speed = 14000;
	//						static float step = 5.0;
	//						static float position = 10.0;
							// Update joy stick command
							Update_joy(&joy);
 8003828:	4883      	ldr	r0, [pc, #524]	@ (8003a38 <main+0xb3c>)
 800382a:	f7ff f8d7 	bl	80029dc <Update_joy>
							if(joy.is_place == 0){
 800382e:	4b82      	ldr	r3, [pc, #520]	@ (8003a38 <main+0xb3c>)
 8003830:	791b      	ldrb	r3, [r3, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d102      	bne.n	800383c <main+0x940>
								repeat = 0;
 8003836:	4a81      	ldr	r2, [pc, #516]	@ (8003a3c <main+0xb40>)
 8003838:	2300      	movs	r3, #0
 800383a:	7013      	strb	r3, [r2, #0]
							}
							if(i > 5){
 800383c:	4b80      	ldr	r3, [pc, #512]	@ (8003a40 <main+0xb44>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b05      	cmp	r3, #5
 8003842:	d933      	bls.n	80038ac <main+0x9b0>
								registerFrame[0x23].U16 = joy.shelves_position[0];  //1st Shelve Position
 8003844:	4b7c      	ldr	r3, [pc, #496]	@ (8003a38 <main+0xb3c>)
 8003846:	88db      	ldrh	r3, [r3, #6]
 8003848:	4a75      	ldr	r2, [pc, #468]	@ (8003a20 <main+0xb24>)
 800384a:	f8a2 3046 	strh.w	r3, [r2, #70]	@ 0x46
								registerFrame[0x24].U16 = joy.shelves_position[1];  //2nd Shelve Position
 800384e:	4b7a      	ldr	r3, [pc, #488]	@ (8003a38 <main+0xb3c>)
 8003850:	891b      	ldrh	r3, [r3, #8]
 8003852:	4a73      	ldr	r2, [pc, #460]	@ (8003a20 <main+0xb24>)
 8003854:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
								registerFrame[0x25].U16 = joy.shelves_position[2];  //3rd Shelve Position
 8003858:	4b77      	ldr	r3, [pc, #476]	@ (8003a38 <main+0xb3c>)
 800385a:	895b      	ldrh	r3, [r3, #10]
 800385c:	4a70      	ldr	r2, [pc, #448]	@ (8003a20 <main+0xb24>)
 800385e:	f8a2 304a 	strh.w	r3, [r2, #74]	@ 0x4a
								registerFrame[0x26].U16 = joy.shelves_position[3];  //4th Shelve Position
 8003862:	4b75      	ldr	r3, [pc, #468]	@ (8003a38 <main+0xb3c>)
 8003864:	899b      	ldrh	r3, [r3, #12]
 8003866:	4a6e      	ldr	r2, [pc, #440]	@ (8003a20 <main+0xb24>)
 8003868:	f8a2 304c 	strh.w	r3, [r2, #76]	@ 0x4c
								registerFrame[0x27].U16 = joy.shelves_position[4];  //5th Shelve Position
 800386c:	4b72      	ldr	r3, [pc, #456]	@ (8003a38 <main+0xb3c>)
 800386e:	89db      	ldrh	r3, [r3, #14]
 8003870:	4a6b      	ldr	r2, [pc, #428]	@ (8003a20 <main+0xb24>)
 8003872:	f8a2 304e 	strh.w	r3, [r2, #78]	@ 0x4e
								state = 0b0000;
 8003876:	4a6b      	ldr	r2, [pc, #428]	@ (8003a24 <main+0xb28>)
 8003878:	2300      	movs	r3, #0
 800387a:	8013      	strh	r3, [r2, #0]
								registerFrame[0x10].U16 = state;
 800387c:	4b69      	ldr	r3, [pc, #420]	@ (8003a24 <main+0xb28>)
 800387e:	881b      	ldrh	r3, [r3, #0]
 8003880:	4a67      	ldr	r2, [pc, #412]	@ (8003a20 <main+0xb24>)
 8003882:	8413      	strh	r3, [r2, #32]
								ready = 0;
 8003884:	4a6a      	ldr	r2, [pc, #424]	@ (8003a30 <main+0xb34>)
 8003886:	2300      	movs	r3, #0
 8003888:	7013      	strb	r3, [r2, #0]
								i = 0;
 800388a:	4a6d      	ldr	r2, [pc, #436]	@ (8003a40 <main+0xb44>)
 800388c:	2300      	movs	r3, #0
 800388e:	7013      	strb	r3, [r2, #0]
								initial_position = encoder.mm;
 8003890:	4b6c      	ldr	r3, [pc, #432]	@ (8003a44 <main+0xb48>)
 8003892:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8003896:	496c      	ldr	r1, [pc, #432]	@ (8003a48 <main+0xb4c>)
 8003898:	e9c1 2300 	strd	r2, r3, [r1]
								target_position = encoder.mm;
 800389c:	4b69      	ldr	r3, [pc, #420]	@ (8003a44 <main+0xb48>)
 800389e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80038a2:	496a      	ldr	r1, [pc, #424]	@ (8003a4c <main+0xb50>)
 80038a4:	e9c1 2300 	strd	r2, r3, [r1]
 80038a8:	f000 bc04 	b.w	80040b4 <main+0x11b8>

							}
							else if (!joy.s_1 && joy.s_2 && joy.s_3 && joy.s_4){
 80038ac:	4b62      	ldr	r3, [pc, #392]	@ (8003a38 <main+0xb3c>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d126      	bne.n	8003902 <main+0xa06>
 80038b4:	4b60      	ldr	r3, [pc, #384]	@ (8003a38 <main+0xb3c>)
 80038b6:	785b      	ldrb	r3, [r3, #1]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d022      	beq.n	8003902 <main+0xa06>
 80038bc:	4b5e      	ldr	r3, [pc, #376]	@ (8003a38 <main+0xb3c>)
 80038be:	789b      	ldrb	r3, [r3, #2]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d01e      	beq.n	8003902 <main+0xa06>
 80038c4:	4b5c      	ldr	r3, [pc, #368]	@ (8003a38 <main+0xb3c>)
 80038c6:	78db      	ldrb	r3, [r3, #3]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d01a      	beq.n	8003902 <main+0xa06>
								if(joy.is_place == 1){
 80038cc:	4b5a      	ldr	r3, [pc, #360]	@ (8003a38 <main+0xb3c>)
 80038ce:	791b      	ldrb	r3, [r3, #4]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	f040 83e6 	bne.w	80040a2 <main+0x11a6>
									if(repeat != 1){
 80038d6:	4b59      	ldr	r3, [pc, #356]	@ (8003a3c <main+0xb40>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	f000 83e1 	beq.w	80040a2 <main+0x11a6>
	//									position += 5.0;
	//									setpoint = position;
	//									computeTrapezoidalData.t = 0;
										pwm_signal = speed;
 80038e0:	4b5b      	ldr	r3, [pc, #364]	@ (8003a50 <main+0xb54>)
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	4b5b      	ldr	r3, [pc, #364]	@ (8003a54 <main+0xb58>)
 80038e6:	601a      	str	r2, [r3, #0]
										Update_pwm(&pwm_tim, pwm_channel, dir_gpio, dir_pin, pwm_signal);
 80038e8:	4b5a      	ldr	r3, [pc, #360]	@ (8003a54 <main+0xb58>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	2302      	movs	r3, #2
 80038f0:	4a59      	ldr	r2, [pc, #356]	@ (8003a58 <main+0xb5c>)
 80038f2:	2100      	movs	r1, #0
 80038f4:	4859      	ldr	r0, [pc, #356]	@ (8003a5c <main+0xb60>)
 80038f6:	f001 fc40 	bl	800517a <Update_pwm>
										repeat = 1;
 80038fa:	4a50      	ldr	r2, [pc, #320]	@ (8003a3c <main+0xb40>)
 80038fc:	2301      	movs	r3, #1
 80038fe:	7013      	strb	r3, [r2, #0]
								if(joy.is_place == 1){
 8003900:	e3cf      	b.n	80040a2 <main+0x11a6>
									}
								}
							}
							else if (!joy.s_1 && !joy.s_2 && joy.s_3 && joy.s_4){
 8003902:	4b4d      	ldr	r3, [pc, #308]	@ (8003a38 <main+0xb3c>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d123      	bne.n	8003952 <main+0xa56>
 800390a:	4b4b      	ldr	r3, [pc, #300]	@ (8003a38 <main+0xb3c>)
 800390c:	785b      	ldrb	r3, [r3, #1]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d11f      	bne.n	8003952 <main+0xa56>
 8003912:	4b49      	ldr	r3, [pc, #292]	@ (8003a38 <main+0xb3c>)
 8003914:	789b      	ldrb	r3, [r3, #2]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d01b      	beq.n	8003952 <main+0xa56>
 800391a:	4b47      	ldr	r3, [pc, #284]	@ (8003a38 <main+0xb3c>)
 800391c:	78db      	ldrb	r3, [r3, #3]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d017      	beq.n	8003952 <main+0xa56>
								// switch 2 has pushed
								if(joy.is_place == 1){
 8003922:	4b45      	ldr	r3, [pc, #276]	@ (8003a38 <main+0xb3c>)
 8003924:	791b      	ldrb	r3, [r3, #4]
 8003926:	2b01      	cmp	r3, #1
 8003928:	f040 83bd 	bne.w	80040a6 <main+0x11aa>
									if(repeat != 1){
 800392c:	4b43      	ldr	r3, [pc, #268]	@ (8003a3c <main+0xb40>)
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b01      	cmp	r3, #1
 8003932:	f000 83b8 	beq.w	80040a6 <main+0x11aa>
//										x_axis_position = x_axis_position - 5.0;
										x_axis_position = x_axis_position + 5.0;
 8003936:	4b4a      	ldr	r3, [pc, #296]	@ (8003a60 <main+0xb64>)
 8003938:	edd3 7a00 	vldr	s15, [r3]
 800393c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8003940:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003944:	4b46      	ldr	r3, [pc, #280]	@ (8003a60 <main+0xb64>)
 8003946:	edc3 7a00 	vstr	s15, [r3]
										repeat = 1;
 800394a:	4a3c      	ldr	r2, [pc, #240]	@ (8003a3c <main+0xb40>)
 800394c:	2301      	movs	r3, #1
 800394e:	7013      	strb	r3, [r2, #0]
								if(joy.is_place == 1){
 8003950:	e3a9      	b.n	80040a6 <main+0x11aa>
//	//								setpoint = 10;
//	//								target_position = setpoint;
//									repeat = 1;
//								}
							}
							else if(joy.s_1 && !joy.s_2 && joy.s_3 && !joy.s_4){
 8003952:	4b39      	ldr	r3, [pc, #228]	@ (8003a38 <main+0xb3c>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d023      	beq.n	80039a2 <main+0xaa6>
 800395a:	4b37      	ldr	r3, [pc, #220]	@ (8003a38 <main+0xb3c>)
 800395c:	785b      	ldrb	r3, [r3, #1]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d11f      	bne.n	80039a2 <main+0xaa6>
 8003962:	4b35      	ldr	r3, [pc, #212]	@ (8003a38 <main+0xb3c>)
 8003964:	789b      	ldrb	r3, [r3, #2]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d01b      	beq.n	80039a2 <main+0xaa6>
 800396a:	4b33      	ldr	r3, [pc, #204]	@ (8003a38 <main+0xb3c>)
 800396c:	78db      	ldrb	r3, [r3, #3]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d117      	bne.n	80039a2 <main+0xaa6>
								if(joy.is_place == 1){
 8003972:	4b31      	ldr	r3, [pc, #196]	@ (8003a38 <main+0xb3c>)
 8003974:	791b      	ldrb	r3, [r3, #4]
 8003976:	2b01      	cmp	r3, #1
 8003978:	f040 8397 	bne.w	80040aa <main+0x11ae>
									if(repeat != 1){
 800397c:	4b2f      	ldr	r3, [pc, #188]	@ (8003a3c <main+0xb40>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b01      	cmp	r3, #1
 8003982:	f000 8392 	beq.w	80040aa <main+0x11ae>
										x_axis_position = x_axis_position - 5.0;
 8003986:	4b36      	ldr	r3, [pc, #216]	@ (8003a60 <main+0xb64>)
 8003988:	edd3 7a00 	vldr	s15, [r3]
 800398c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8003990:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003994:	4b32      	ldr	r3, [pc, #200]	@ (8003a60 <main+0xb64>)
 8003996:	edc3 7a00 	vstr	s15, [r3]
										repeat = 1;
 800399a:	4a28      	ldr	r2, [pc, #160]	@ (8003a3c <main+0xb40>)
 800399c:	2301      	movs	r3, #1
 800399e:	7013      	strb	r3, [r2, #0]
								if(joy.is_place == 1){
 80039a0:	e383      	b.n	80040aa <main+0x11ae>
									}
								}
							}
							else if (joy.s_1 && joy.s_2 && !joy.s_3 && joy.s_4){
 80039a2:	4b25      	ldr	r3, [pc, #148]	@ (8003a38 <main+0xb3c>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d05e      	beq.n	8003a68 <main+0xb6c>
 80039aa:	4b23      	ldr	r3, [pc, #140]	@ (8003a38 <main+0xb3c>)
 80039ac:	785b      	ldrb	r3, [r3, #1]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d05a      	beq.n	8003a68 <main+0xb6c>
 80039b2:	4b21      	ldr	r3, [pc, #132]	@ (8003a38 <main+0xb3c>)
 80039b4:	789b      	ldrb	r3, [r3, #2]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d156      	bne.n	8003a68 <main+0xb6c>
 80039ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003a38 <main+0xb3c>)
 80039bc:	78db      	ldrb	r3, [r3, #3]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d052      	beq.n	8003a68 <main+0xb6c>
								// switch 3 has pushed
								// save data for base system
								if(joy.is_place == 1){
 80039c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003a38 <main+0xb3c>)
 80039c4:	791b      	ldrb	r3, [r3, #4]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	f040 8371 	bne.w	80040ae <main+0x11b2>
									if(repeat != 1){
 80039cc:	4b1b      	ldr	r3, [pc, #108]	@ (8003a3c <main+0xb40>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	f000 836c 	beq.w	80040ae <main+0x11b2>
										joy.shelves_position[i] = (uint16_t)(encoder.mm * 10);
 80039d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003a44 <main+0xb48>)
 80039d8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	4b20      	ldr	r3, [pc, #128]	@ (8003a64 <main+0xb68>)
 80039e2:	f7fc fdd5 	bl	8000590 <__aeabi_dmul>
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	4610      	mov	r0, r2
 80039ec:	4619      	mov	r1, r3
 80039ee:	4b14      	ldr	r3, [pc, #80]	@ (8003a40 <main+0xb44>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	461c      	mov	r4, r3
 80039f4:	f7fd f8a4 	bl	8000b40 <__aeabi_d2uiz>
 80039f8:	4603      	mov	r3, r0
 80039fa:	b299      	uxth	r1, r3
 80039fc:	4a0e      	ldr	r2, [pc, #56]	@ (8003a38 <main+0xb3c>)
 80039fe:	0063      	lsls	r3, r4, #1
 8003a00:	4413      	add	r3, r2
 8003a02:	460a      	mov	r2, r1
 8003a04:	80da      	strh	r2, [r3, #6]
										i++;
 8003a06:	4b0e      	ldr	r3, [pc, #56]	@ (8003a40 <main+0xb44>)
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8003a40 <main+0xb44>)
 8003a10:	7013      	strb	r3, [r2, #0]
										repeat = 1;
 8003a12:	4a0a      	ldr	r2, [pc, #40]	@ (8003a3c <main+0xb40>)
 8003a14:	2301      	movs	r3, #1
 8003a16:	7013      	strb	r3, [r2, #0]
								if(joy.is_place == 1){
 8003a18:	e349      	b.n	80040ae <main+0x11b2>
 8003a1a:	bf00      	nop
 8003a1c:	20000e88 	.word	0x20000e88
 8003a20:	20000ec4 	.word	0x20000ec4
 8003a24:	20000356 	.word	0x20000356
 8003a28:	20000040 	.word	0x20000040
 8003a2c:	0800e298 	.word	0x0800e298
 8003a30:	20000e8c 	.word	0x20000e8c
 8003a34:	20000eb8 	.word	0x20000eb8
 8003a38:	200011ec 	.word	0x200011ec
 8003a3c:	200015f8 	.word	0x200015f8
 8003a40:	200015f9 	.word	0x200015f9
 8003a44:	200012d0 	.word	0x200012d0
 8003a48:	200015b8 	.word	0x200015b8
 8003a4c:	200015c0 	.word	0x200015c0
 8003a50:	200002a4 	.word	0x200002a4
 8003a54:	200012c8 	.word	0x200012c8
 8003a58:	48000800 	.word	0x48000800
 8003a5c:	2000092c 	.word	0x2000092c
 8003a60:	20001524 	.word	0x20001524
 8003a64:	40240000 	.word	0x40240000
									}
								}
							}
							else if (joy.s_1 && joy.s_2 && joy.s_3 && !joy.s_4){
 8003a68:	4b96      	ldr	r3, [pc, #600]	@ (8003cc4 <main+0xdc8>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d027      	beq.n	8003ac0 <main+0xbc4>
 8003a70:	4b94      	ldr	r3, [pc, #592]	@ (8003cc4 <main+0xdc8>)
 8003a72:	785b      	ldrb	r3, [r3, #1]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d023      	beq.n	8003ac0 <main+0xbc4>
 8003a78:	4b92      	ldr	r3, [pc, #584]	@ (8003cc4 <main+0xdc8>)
 8003a7a:	789b      	ldrb	r3, [r3, #2]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d01f      	beq.n	8003ac0 <main+0xbc4>
 8003a80:	4b90      	ldr	r3, [pc, #576]	@ (8003cc4 <main+0xdc8>)
 8003a82:	78db      	ldrb	r3, [r3, #3]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d11b      	bne.n	8003ac0 <main+0xbc4>
								// switch 4 has pushed
								if(joy.is_place == 1){
 8003a88:	4b8e      	ldr	r3, [pc, #568]	@ (8003cc4 <main+0xdc8>)
 8003a8a:	791b      	ldrb	r3, [r3, #4]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	f040 8310 	bne.w	80040b2 <main+0x11b6>
									if(repeat == 0){
 8003a92:	4b8d      	ldr	r3, [pc, #564]	@ (8003cc8 <main+0xdcc>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f040 830b 	bne.w	80040b2 <main+0x11b6>
	//									initial_position = encoder.mm;
	//									position -= 5.0;
	//									setpoint = position;
	//									target_position = setpoint;
	//									computeTrapezoidalData.t = 0;
										pwm_signal = -speed;
 8003a9c:	4b8b      	ldr	r3, [pc, #556]	@ (8003ccc <main+0xdd0>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	425a      	negs	r2, r3
 8003aa2:	4b8b      	ldr	r3, [pc, #556]	@ (8003cd0 <main+0xdd4>)
 8003aa4:	601a      	str	r2, [r3, #0]
										Update_pwm(&pwm_tim, pwm_channel, dir_gpio, dir_pin, pwm_signal);
 8003aa6:	4b8a      	ldr	r3, [pc, #552]	@ (8003cd0 <main+0xdd4>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	2302      	movs	r3, #2
 8003aae:	4a89      	ldr	r2, [pc, #548]	@ (8003cd4 <main+0xdd8>)
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	4889      	ldr	r0, [pc, #548]	@ (8003cd8 <main+0xddc>)
 8003ab4:	f001 fb61 	bl	800517a <Update_pwm>
										repeat = 1;
 8003ab8:	4a83      	ldr	r2, [pc, #524]	@ (8003cc8 <main+0xdcc>)
 8003aba:	2301      	movs	r3, #1
 8003abc:	7013      	strb	r3, [r2, #0]
								if(joy.is_place == 1){
 8003abe:	e2f8      	b.n	80040b2 <main+0x11b6>
									}
								}
							}
							else{
								pwm_signal = 5000;
 8003ac0:	4a83      	ldr	r2, [pc, #524]	@ (8003cd0 <main+0xdd4>)
 8003ac2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003ac6:	6013      	str	r3, [r2, #0]
								Update_pwm(&pwm_tim, pwm_channel, dir_gpio, dir_pin, pwm_signal);
 8003ac8:	4b81      	ldr	r3, [pc, #516]	@ (8003cd0 <main+0xdd4>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	2302      	movs	r3, #2
 8003ad0:	4a80      	ldr	r2, [pc, #512]	@ (8003cd4 <main+0xdd8>)
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	4880      	ldr	r0, [pc, #512]	@ (8003cd8 <main+0xddc>)
 8003ad6:	f001 fb50 	bl	800517a <Update_pwm>
 8003ada:	e2eb      	b.n	80040b4 <main+0x11b8>
							}
						}
					}
					// Go pick
					else if(state == 4){
 8003adc:	4b7f      	ldr	r3, [pc, #508]	@ (8003cdc <main+0xde0>)
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	2b04      	cmp	r3, #4
 8003ae2:	f040 8121 	bne.w	8003d28 <main+0xe2c>
						static uint8_t pass = 0;
						if(ready == 1){
 8003ae6:	4b7e      	ldr	r3, [pc, #504]	@ (8003ce0 <main+0xde4>)
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d15f      	bne.n	8003bae <main+0xcb2>
							if(pick_index == 5){
 8003aee:	4b7d      	ldr	r3, [pc, #500]	@ (8003ce4 <main+0xde8>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	2b05      	cmp	r3, #5
 8003af4:	d10a      	bne.n	8003b0c <main+0xc10>
								pick_index = 0;
 8003af6:	4a7b      	ldr	r2, [pc, #492]	@ (8003ce4 <main+0xde8>)
 8003af8:	2300      	movs	r3, #0
 8003afa:	7013      	strb	r3, [r2, #0]
								skip = 1;
 8003afc:	497a      	ldr	r1, [pc, #488]	@ (8003ce8 <main+0xdec>)
 8003afe:	f04f 0201 	mov.w	r2, #1
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	e9c1 2300 	strd	r2, r3, [r1]
 8003b0a:	e050      	b.n	8003bae <main+0xcb2>
							}
							else if(pick_index >= 0 && pick_index < 5){
 8003b0c:	4b75      	ldr	r3, [pc, #468]	@ (8003ce4 <main+0xde8>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b04      	cmp	r3, #4
 8003b12:	d84c      	bhi.n	8003bae <main+0xcb2>
								if(pick_index){
 8003b14:	4b73      	ldr	r3, [pc, #460]	@ (8003ce4 <main+0xde8>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <main+0xc26>
									pass = 0;
 8003b1c:	4a73      	ldr	r2, [pc, #460]	@ (8003cec <main+0xdf0>)
 8003b1e:	2300      	movs	r3, #0
 8003b20:	7013      	strb	r3, [r2, #0]
								}
								// Set up trajectory
								initial_position = encoder.mm;
 8003b22:	4b73      	ldr	r3, [pc, #460]	@ (8003cf0 <main+0xdf4>)
 8003b24:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8003b28:	4972      	ldr	r1, [pc, #456]	@ (8003cf4 <main+0xdf8>)
 8003b2a:	e9c1 2300 	strd	r2, r3, [r1]
								target_position = (float)(joy.shelves_position[(Pick[pick_index] - 1)]) / 10.0;
 8003b2e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ce4 <main+0xde8>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	4b70      	ldr	r3, [pc, #448]	@ (8003cf8 <main+0xdfc>)
 8003b36:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	4a61      	ldr	r2, [pc, #388]	@ (8003cc4 <main+0xdc8>)
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	4413      	add	r3, r2
 8003b42:	88db      	ldrh	r3, [r3, #6]
 8003b44:	ee07 3a90 	vmov	s15, r3
 8003b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b4c:	ee17 0a90 	vmov	r0, s15
 8003b50:	f7fc fcc6 	bl	80004e0 <__aeabi_f2d>
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	4b68      	ldr	r3, [pc, #416]	@ (8003cfc <main+0xe00>)
 8003b5a:	f7fc fe43 	bl	80007e4 <__aeabi_ddiv>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4610      	mov	r0, r2
 8003b64:	4619      	mov	r1, r3
 8003b66:	4b66      	ldr	r3, [pc, #408]	@ (8003d00 <main+0xe04>)
 8003b68:	e9c3 0100 	strd	r0, r1, [r3]
								computeTrapezoidalData.t = 0;
 8003b6c:	4965      	ldr	r1, [pc, #404]	@ (8003d04 <main+0xe08>)
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	f04f 0300 	mov.w	r3, #0
 8003b76:	e9c1 2300 	strd	r2, r3, [r1]
								computeTrapezoidalData.is_finish = 0;
 8003b7a:	4a62      	ldr	r2, [pc, #392]	@ (8003d04 <main+0xe08>)
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	7213      	strb	r3, [r2, #8]
								x_axis_position = 10.0;
 8003b80:	4a61      	ldr	r2, [pc, #388]	@ (8003d08 <main+0xe0c>)
 8003b82:	4b62      	ldr	r3, [pc, #392]	@ (8003d0c <main+0xe10>)
 8003b84:	6013      	str	r3, [r2, #0]
								p_e = 0.0;
 8003b86:	4962      	ldr	r1, [pc, #392]	@ (8003d10 <main+0xe14>)
 8003b88:	f04f 0200 	mov.w	r2, #0
 8003b8c:	f04f 0300 	mov.w	r3, #0
 8003b90:	e9c1 2300 	strd	r2, r3, [r1]
								is_finish_position = 0;
 8003b94:	4a5f      	ldr	r2, [pc, #380]	@ (8003d14 <main+0xe18>)
 8003b96:	2300      	movs	r3, #0
 8003b98:	7013      	strb	r3, [r2, #0]
								ready = 0;
 8003b9a:	4a51      	ldr	r2, [pc, #324]	@ (8003ce0 <main+0xde4>)
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	7013      	strb	r3, [r2, #0]
								skip = 0;
 8003ba0:	4951      	ldr	r1, [pc, #324]	@ (8003ce8 <main+0xdec>)
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	f04f 0300 	mov.w	r3, #0
 8003baa:	e9c1 2300 	strd	r2, r3, [r1]
							}
						}
//						&& is_finish_position == 1
						if(computeTrapezoidalData.is_finish == 1 && ready == 0 && skip == 0){
 8003bae:	4b55      	ldr	r3, [pc, #340]	@ (8003d04 <main+0xe08>)
 8003bb0:	7a1b      	ldrb	r3, [r3, #8]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	f040 827e 	bne.w	80040b4 <main+0x11b8>
 8003bb8:	4b49      	ldr	r3, [pc, #292]	@ (8003ce0 <main+0xde4>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f040 8279 	bne.w	80040b4 <main+0x11b8>
 8003bc2:	4b49      	ldr	r3, [pc, #292]	@ (8003ce8 <main+0xdec>)
 8003bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f040 8273 	bne.w	80040b4 <main+0x11b8>
							if(pass == 0){
 8003bce:	4b47      	ldr	r3, [pc, #284]	@ (8003cec <main+0xdf0>)
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10b      	bne.n	8003bee <main+0xcf2>
								eff.solenoid_command[0] = 1;
 8003bd6:	4a50      	ldr	r2, [pc, #320]	@ (8003d18 <main+0xe1c>)
 8003bd8:	2301      	movs	r3, #1
 8003bda:	7093      	strb	r3, [r2, #2]
								eff.solenoid_command[1] = 1; // Push forward
 8003bdc:	4a4e      	ldr	r2, [pc, #312]	@ (8003d18 <main+0xe1c>)
 8003bde:	2301      	movs	r3, #1
 8003be0:	70d3      	strb	r3, [r2, #3]
								eff.solenoid_command[2] = 0;
 8003be2:	4a4d      	ldr	r2, [pc, #308]	@ (8003d18 <main+0xe1c>)
 8003be4:	2300      	movs	r3, #0
 8003be6:	7113      	strb	r3, [r2, #4]
								pass = 1;
 8003be8:	4a40      	ldr	r2, [pc, #256]	@ (8003cec <main+0xdf0>)
 8003bea:	2301      	movs	r3, #1
 8003bec:	7013      	strb	r3, [r2, #0]
							}
							if(pass == 1){
 8003bee:	4b3f      	ldr	r3, [pc, #252]	@ (8003cec <main+0xdf0>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d13c      	bne.n	8003c70 <main+0xd74>
								if((eff.actual_status[0] == 0) && (eff.actual_status[1] == 1)){
 8003bf6:	4b48      	ldr	r3, [pc, #288]	@ (8003d18 <main+0xe1c>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d138      	bne.n	8003c70 <main+0xd74>
 8003bfe:	4b46      	ldr	r3, [pc, #280]	@ (8003d18 <main+0xe1c>)
 8003c00:	785b      	ldrb	r3, [r3, #1]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d134      	bne.n	8003c70 <main+0xd74>
									static uint64_t timestamp = 0;
									static uint8_t first = 1;
									if(first == 1){
 8003c06:	4b45      	ldr	r3, [pc, #276]	@ (8003d1c <main+0xe20>)
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d10f      	bne.n	8003c2e <main+0xd32>
										timestamp = HAL_GetTick() + 800;
 8003c0e:	f002 fbd9 	bl	80063c4 <HAL_GetTick>
 8003c12:	4603      	mov	r3, r0
 8003c14:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8003c18:	2200      	movs	r2, #0
 8003c1a:	61bb      	str	r3, [r7, #24]
 8003c1c:	61fa      	str	r2, [r7, #28]
 8003c1e:	4b40      	ldr	r3, [pc, #256]	@ (8003d20 <main+0xe24>)
 8003c20:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003c24:	e9c3 1200 	strd	r1, r2, [r3]
										first = 0;
 8003c28:	4a3c      	ldr	r2, [pc, #240]	@ (8003d1c <main+0xe20>)
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	7013      	strb	r3, [r2, #0]

									}
									if(HAL_GetTick() > timestamp){
 8003c2e:	f002 fbc9 	bl	80063c4 <HAL_GetTick>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2200      	movs	r2, #0
 8003c36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c3a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c3e:	4b38      	ldr	r3, [pc, #224]	@ (8003d20 <main+0xe24>)
 8003c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c44:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8003c48:	428a      	cmp	r2, r1
 8003c4a:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8003c4e:	418b      	sbcs	r3, r1
 8003c50:	d20e      	bcs.n	8003c70 <main+0xd74>
										// End effector is push
										eff.solenoid_command[0] = 1;
 8003c52:	4a31      	ldr	r2, [pc, #196]	@ (8003d18 <main+0xe1c>)
 8003c54:	2301      	movs	r3, #1
 8003c56:	7093      	strb	r3, [r2, #2]
										eff.solenoid_command[1] = 0;
 8003c58:	4a2f      	ldr	r2, [pc, #188]	@ (8003d18 <main+0xe1c>)
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	70d3      	strb	r3, [r2, #3]
										eff.solenoid_command[2] = 1; // Pull back
 8003c5e:	4a2e      	ldr	r2, [pc, #184]	@ (8003d18 <main+0xe1c>)
 8003c60:	2301      	movs	r3, #1
 8003c62:	7113      	strb	r3, [r2, #4]
										pass = 2;
 8003c64:	4a21      	ldr	r2, [pc, #132]	@ (8003cec <main+0xdf0>)
 8003c66:	2302      	movs	r3, #2
 8003c68:	7013      	strb	r3, [r2, #0]
										first = 1;
 8003c6a:	4a2c      	ldr	r2, [pc, #176]	@ (8003d1c <main+0xe20>)
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	7013      	strb	r3, [r2, #0]
									}
								}
							}
							if(pass == 2){
 8003c70:	4b1e      	ldr	r3, [pc, #120]	@ (8003cec <main+0xdf0>)
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	f040 821d 	bne.w	80040b4 <main+0x11b8>
								if((eff.actual_status[0] == 1) && (eff.actual_status[1] == 0)){
 8003c7a:	4b27      	ldr	r3, [pc, #156]	@ (8003d18 <main+0xe1c>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	f040 8218 	bne.w	80040b4 <main+0x11b8>
 8003c84:	4b24      	ldr	r3, [pc, #144]	@ (8003d18 <main+0xe1c>)
 8003c86:	785b      	ldrb	r3, [r3, #1]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f040 8213 	bne.w	80040b4 <main+0x11b8>
//									static uint64_t timestamp = 0;
//									if(timestamp > 300){
									// Deactivate solenoid valve
									eff.solenoid_command[1] = 0;
 8003c8e:	4a22      	ldr	r2, [pc, #136]	@ (8003d18 <main+0xe1c>)
 8003c90:	2300      	movs	r3, #0
 8003c92:	70d3      	strb	r3, [r2, #3]
									eff.solenoid_command[2] = 0;
 8003c94:	4a20      	ldr	r2, [pc, #128]	@ (8003d18 <main+0xe1c>)
 8003c96:	2300      	movs	r3, #0
 8003c98:	7113      	strb	r3, [r2, #4]
									pick_index++;
 8003c9a:	4b12      	ldr	r3, [pc, #72]	@ (8003ce4 <main+0xde8>)
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	4a10      	ldr	r2, [pc, #64]	@ (8003ce4 <main+0xde8>)
 8003ca4:	7013      	strb	r3, [r2, #0]
									ready = 1;
 8003ca6:	4a0e      	ldr	r2, [pc, #56]	@ (8003ce0 <main+0xde4>)
 8003ca8:	2301      	movs	r3, #1
 8003caa:	7013      	strb	r3, [r2, #0]
									registerFrame[0x10].U16 = 8;
 8003cac:	4a1d      	ldr	r2, [pc, #116]	@ (8003d24 <main+0xe28>)
 8003cae:	2308      	movs	r3, #8
 8003cb0:	8413      	strh	r3, [r2, #32]
									state = registerFrame[0x10].U16; // Then go place
 8003cb2:	4b1c      	ldr	r3, [pc, #112]	@ (8003d24 <main+0xe28>)
 8003cb4:	8c1b      	ldrh	r3, [r3, #32]
 8003cb6:	4a09      	ldr	r2, [pc, #36]	@ (8003cdc <main+0xde0>)
 8003cb8:	8013      	strh	r3, [r2, #0]
//									timestamp = 0;
									pass = 0;
 8003cba:	4a0c      	ldr	r2, [pc, #48]	@ (8003cec <main+0xdf0>)
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	7013      	strb	r3, [r2, #0]
 8003cc0:	e1f8      	b.n	80040b4 <main+0x11b8>
 8003cc2:	bf00      	nop
 8003cc4:	200011ec 	.word	0x200011ec
 8003cc8:	200015f8 	.word	0x200015f8
 8003ccc:	200002a4 	.word	0x200002a4
 8003cd0:	200012c8 	.word	0x200012c8
 8003cd4:	48000800 	.word	0x48000800
 8003cd8:	2000092c 	.word	0x2000092c
 8003cdc:	20000356 	.word	0x20000356
 8003ce0:	20000e8c 	.word	0x20000e8c
 8003ce4:	20000ec0 	.word	0x20000ec0
 8003ce8:	20000eb8 	.word	0x20000eb8
 8003cec:	200015fa 	.word	0x200015fa
 8003cf0:	200012d0 	.word	0x200012d0
 8003cf4:	200015b8 	.word	0x200015b8
 8003cf8:	2000033c 	.word	0x2000033c
 8003cfc:	40240000 	.word	0x40240000
 8003d00:	200015c0 	.word	0x200015c0
 8003d04:	20001598 	.word	0x20001598
 8003d08:	20001524 	.word	0x20001524
 8003d0c:	41200000 	.word	0x41200000
 8003d10:	20001408 	.word	0x20001408
 8003d14:	20001418 	.word	0x20001418
 8003d18:	20001054 	.word	0x20001054
 8003d1c:	200002a8 	.word	0x200002a8
 8003d20:	20001600 	.word	0x20001600
 8003d24:	20000ec4 	.word	0x20000ec4
								}
							}
						}
					}
					// Go place
					else if(state == 8){
 8003d28:	4ba9      	ldr	r3, [pc, #676]	@ (8003fd0 <main+0x10d4>)
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	f040 8101 	bne.w	8003f34 <main+0x1038>
						static uint8_t pass = 0;
						if(ready == 1){
 8003d32:	4ba8      	ldr	r3, [pc, #672]	@ (8003fd4 <main+0x10d8>)
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d159      	bne.n	8003dee <main+0xef2>
							if(place_index >= 0 && place_index < 5){
 8003d3a:	4ba7      	ldr	r3, [pc, #668]	@ (8003fd8 <main+0x10dc>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d855      	bhi.n	8003dee <main+0xef2>
								if(place_index == 0){
 8003d42:	4ba5      	ldr	r3, [pc, #660]	@ (8003fd8 <main+0x10dc>)
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d102      	bne.n	8003d50 <main+0xe54>
									pass = 0;
 8003d4a:	4aa4      	ldr	r2, [pc, #656]	@ (8003fdc <main+0x10e0>)
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	7013      	strb	r3, [r2, #0]
								}
								// Set up trajectory
								initial_position = encoder.mm;
 8003d50:	4ba3      	ldr	r3, [pc, #652]	@ (8003fe0 <main+0x10e4>)
 8003d52:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8003d56:	49a3      	ldr	r1, [pc, #652]	@ (8003fe4 <main+0x10e8>)
 8003d58:	e9c1 2300 	strd	r2, r3, [r1]
								target_position = ((float)(joy.shelves_position[(Place[place_index] - 1)]) / 10.0) + 10.0;
 8003d5c:	4b9e      	ldr	r3, [pc, #632]	@ (8003fd8 <main+0x10dc>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	461a      	mov	r2, r3
 8003d62:	4ba1      	ldr	r3, [pc, #644]	@ (8003fe8 <main+0x10ec>)
 8003d64:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	4aa0      	ldr	r2, [pc, #640]	@ (8003fec <main+0x10f0>)
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	4413      	add	r3, r2
 8003d70:	88db      	ldrh	r3, [r3, #6]
 8003d72:	ee07 3a90 	vmov	s15, r3
 8003d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d7a:	ee17 0a90 	vmov	r0, s15
 8003d7e:	f7fc fbaf 	bl	80004e0 <__aeabi_f2d>
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	4b9a      	ldr	r3, [pc, #616]	@ (8003ff0 <main+0x10f4>)
 8003d88:	f7fc fd2c 	bl	80007e4 <__aeabi_ddiv>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4610      	mov	r0, r2
 8003d92:	4619      	mov	r1, r3
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	4b95      	ldr	r3, [pc, #596]	@ (8003ff0 <main+0x10f4>)
 8003d9a:	f7fc fa43 	bl	8000224 <__adddf3>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	4610      	mov	r0, r2
 8003da4:	4619      	mov	r1, r3
 8003da6:	4b93      	ldr	r3, [pc, #588]	@ (8003ff4 <main+0x10f8>)
 8003da8:	e9c3 0100 	strd	r0, r1, [r3]
								computeTrapezoidalData.t = 0;
 8003dac:	4992      	ldr	r1, [pc, #584]	@ (8003ff8 <main+0x10fc>)
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	f04f 0300 	mov.w	r3, #0
 8003db6:	e9c1 2300 	strd	r2, r3, [r1]
								computeTrapezoidalData.is_finish = 0;
 8003dba:	4a8f      	ldr	r2, [pc, #572]	@ (8003ff8 <main+0x10fc>)
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	7213      	strb	r3, [r2, #8]
								x_axis_position = -10.0;
 8003dc0:	4a8e      	ldr	r2, [pc, #568]	@ (8003ffc <main+0x1100>)
 8003dc2:	4b8f      	ldr	r3, [pc, #572]	@ (8004000 <main+0x1104>)
 8003dc4:	6013      	str	r3, [r2, #0]
								p_e = 0.0;
 8003dc6:	498f      	ldr	r1, [pc, #572]	@ (8004004 <main+0x1108>)
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	e9c1 2300 	strd	r2, r3, [r1]
								is_finish_position = 0;
 8003dd4:	4a8c      	ldr	r2, [pc, #560]	@ (8004008 <main+0x110c>)
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	7013      	strb	r3, [r2, #0]
								ready = 0;
 8003dda:	4a7e      	ldr	r2, [pc, #504]	@ (8003fd4 <main+0x10d8>)
 8003ddc:	2300      	movs	r3, #0
 8003dde:	7013      	strb	r3, [r2, #0]
								skip = 0;
 8003de0:	498a      	ldr	r1, [pc, #552]	@ (800400c <main+0x1110>)
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	f04f 0300 	mov.w	r3, #0
 8003dea:	e9c1 2300 	strd	r2, r3, [r1]
							}
						}
//						&& is_finish_position == 1
						if(computeTrapezoidalData.is_finish == 1 && ready == 0 && skip == 0){
 8003dee:	4b82      	ldr	r3, [pc, #520]	@ (8003ff8 <main+0x10fc>)
 8003df0:	7a1b      	ldrb	r3, [r3, #8]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	f040 815e 	bne.w	80040b4 <main+0x11b8>
 8003df8:	4b76      	ldr	r3, [pc, #472]	@ (8003fd4 <main+0x10d8>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f040 8159 	bne.w	80040b4 <main+0x11b8>
 8003e02:	4b82      	ldr	r3, [pc, #520]	@ (800400c <main+0x1110>)
 8003e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f040 8153 	bne.w	80040b4 <main+0x11b8>
							if(pass == 0){
 8003e0e:	4b73      	ldr	r3, [pc, #460]	@ (8003fdc <main+0x10e0>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d108      	bne.n	8003e28 <main+0xf2c>
								eff.solenoid_command[1] = 1; // Push forward
 8003e16:	4a7e      	ldr	r2, [pc, #504]	@ (8004010 <main+0x1114>)
 8003e18:	2301      	movs	r3, #1
 8003e1a:	70d3      	strb	r3, [r2, #3]
								eff.solenoid_command[2] = 0;
 8003e1c:	4a7c      	ldr	r2, [pc, #496]	@ (8004010 <main+0x1114>)
 8003e1e:	2300      	movs	r3, #0
 8003e20:	7113      	strb	r3, [r2, #4]
								pass = 1;
 8003e22:	4a6e      	ldr	r2, [pc, #440]	@ (8003fdc <main+0x10e0>)
 8003e24:	2301      	movs	r3, #1
 8003e26:	7013      	strb	r3, [r2, #0]
							}
							if(pass == 1){
 8003e28:	4b6c      	ldr	r3, [pc, #432]	@ (8003fdc <main+0x10e0>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d13c      	bne.n	8003eaa <main+0xfae>
								if((eff.actual_status[0] == 0) && (eff.actual_status[1] == 1)){
 8003e30:	4b77      	ldr	r3, [pc, #476]	@ (8004010 <main+0x1114>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d138      	bne.n	8003eaa <main+0xfae>
 8003e38:	4b75      	ldr	r3, [pc, #468]	@ (8004010 <main+0x1114>)
 8003e3a:	785b      	ldrb	r3, [r3, #1]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d134      	bne.n	8003eaa <main+0xfae>
									static uint64_t timestamp = 0;
									static uint8_t first = 1;
									if(first == 1){
 8003e40:	4b74      	ldr	r3, [pc, #464]	@ (8004014 <main+0x1118>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d10f      	bne.n	8003e68 <main+0xf6c>
										timestamp = HAL_GetTick() + 800;
 8003e48:	f002 fabc 	bl	80063c4 <HAL_GetTick>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8003e52:	2200      	movs	r2, #0
 8003e54:	613b      	str	r3, [r7, #16]
 8003e56:	617a      	str	r2, [r7, #20]
 8003e58:	4b6f      	ldr	r3, [pc, #444]	@ (8004018 <main+0x111c>)
 8003e5a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003e5e:	e9c3 1200 	strd	r1, r2, [r3]
										first = 0;
 8003e62:	4a6c      	ldr	r2, [pc, #432]	@ (8004014 <main+0x1118>)
 8003e64:	2300      	movs	r3, #0
 8003e66:	7013      	strb	r3, [r2, #0]
									}
									if(HAL_GetTick() > timestamp){
 8003e68:	f002 faac 	bl	80063c4 <HAL_GetTick>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e74:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003e78:	4b67      	ldr	r3, [pc, #412]	@ (8004018 <main+0x111c>)
 8003e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7e:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8003e82:	428a      	cmp	r2, r1
 8003e84:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8003e88:	418b      	sbcs	r3, r1
 8003e8a:	d20e      	bcs.n	8003eaa <main+0xfae>
										// End effector is push
										eff.solenoid_command[0] = 0;
 8003e8c:	4a60      	ldr	r2, [pc, #384]	@ (8004010 <main+0x1114>)
 8003e8e:	2300      	movs	r3, #0
 8003e90:	7093      	strb	r3, [r2, #2]
										eff.solenoid_command[1] = 0;
 8003e92:	4a5f      	ldr	r2, [pc, #380]	@ (8004010 <main+0x1114>)
 8003e94:	2300      	movs	r3, #0
 8003e96:	70d3      	strb	r3, [r2, #3]
										eff.solenoid_command[2] = 1; // Pull back
 8003e98:	4a5d      	ldr	r2, [pc, #372]	@ (8004010 <main+0x1114>)
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	7113      	strb	r3, [r2, #4]
										pass = 2;
 8003e9e:	4a4f      	ldr	r2, [pc, #316]	@ (8003fdc <main+0x10e0>)
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	7013      	strb	r3, [r2, #0]
//										timestamp = 0;
										first = 1;
 8003ea4:	4a5b      	ldr	r2, [pc, #364]	@ (8004014 <main+0x1118>)
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	7013      	strb	r3, [r2, #0]
									}
								}
							}
							if(pass == 2){
 8003eaa:	4b4c      	ldr	r3, [pc, #304]	@ (8003fdc <main+0x10e0>)
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	f040 8100 	bne.w	80040b4 <main+0x11b8>
								if((eff.actual_status[0] == 1) && (eff.actual_status[1] == 0)){
 8003eb4:	4b56      	ldr	r3, [pc, #344]	@ (8004010 <main+0x1114>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	f040 80fb 	bne.w	80040b4 <main+0x11b8>
 8003ebe:	4b54      	ldr	r3, [pc, #336]	@ (8004010 <main+0x1114>)
 8003ec0:	785b      	ldrb	r3, [r3, #1]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f040 80f6 	bne.w	80040b4 <main+0x11b8>
									// Deactivate solenoid valve
									eff.solenoid_command[0] = 0;
 8003ec8:	4a51      	ldr	r2, [pc, #324]	@ (8004010 <main+0x1114>)
 8003eca:	2300      	movs	r3, #0
 8003ecc:	7093      	strb	r3, [r2, #2]
									eff.solenoid_command[1] = 0;
 8003ece:	4a50      	ldr	r2, [pc, #320]	@ (8004010 <main+0x1114>)
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	70d3      	strb	r3, [r2, #3]
									eff.solenoid_command[2] = 0;
 8003ed4:	4a4e      	ldr	r2, [pc, #312]	@ (8004010 <main+0x1114>)
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	7113      	strb	r3, [r2, #4]
									pass = 0;
 8003eda:	4a40      	ldr	r2, [pc, #256]	@ (8003fdc <main+0x10e0>)
 8003edc:	2300      	movs	r3, #0
 8003ede:	7013      	strb	r3, [r2, #0]
									place_index++;
 8003ee0:	4b3d      	ldr	r3, [pc, #244]	@ (8003fd8 <main+0x10dc>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	4a3b      	ldr	r2, [pc, #236]	@ (8003fd8 <main+0x10dc>)
 8003eea:	7013      	strb	r3, [r2, #0]
									ready = 1;
 8003eec:	4a39      	ldr	r2, [pc, #228]	@ (8003fd4 <main+0x10d8>)
 8003eee:	2301      	movs	r3, #1
 8003ef0:	7013      	strb	r3, [r2, #0]
									registerFrame[0x10].U16 = 4;
 8003ef2:	4a4a      	ldr	r2, [pc, #296]	@ (800401c <main+0x1120>)
 8003ef4:	2304      	movs	r3, #4
 8003ef6:	8413      	strh	r3, [r2, #32]
									state = registerFrame[0x10].U16; // Then go place
 8003ef8:	4b48      	ldr	r3, [pc, #288]	@ (800401c <main+0x1120>)
 8003efa:	8c1b      	ldrh	r3, [r3, #32]
 8003efc:	4a34      	ldr	r2, [pc, #208]	@ (8003fd0 <main+0x10d4>)
 8003efe:	8013      	strh	r3, [r2, #0]
//									timestamp = 0;
									if(place_index == 5){
 8003f00:	4b35      	ldr	r3, [pc, #212]	@ (8003fd8 <main+0x10dc>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b05      	cmp	r3, #5
 8003f06:	f040 80d5 	bne.w	80040b4 <main+0x11b8>
										place_index = 0;
 8003f0a:	4a33      	ldr	r2, [pc, #204]	@ (8003fd8 <main+0x10dc>)
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	7013      	strb	r3, [r2, #0]
										state = 0b0000;
 8003f10:	4a2f      	ldr	r2, [pc, #188]	@ (8003fd0 <main+0x10d4>)
 8003f12:	2300      	movs	r3, #0
 8003f14:	8013      	strh	r3, [r2, #0]
										registerFrame[0x10].U16 = state;
 8003f16:	4b2e      	ldr	r3, [pc, #184]	@ (8003fd0 <main+0x10d4>)
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	4a40      	ldr	r2, [pc, #256]	@ (800401c <main+0x1120>)
 8003f1c:	8413      	strh	r3, [r2, #32]
										ready = 0;
 8003f1e:	4a2d      	ldr	r2, [pc, #180]	@ (8003fd4 <main+0x10d8>)
 8003f20:	2300      	movs	r3, #0
 8003f22:	7013      	strb	r3, [r2, #0]
										skip = 1;
 8003f24:	4939      	ldr	r1, [pc, #228]	@ (800400c <main+0x1110>)
 8003f26:	f04f 0201 	mov.w	r2, #1
 8003f2a:	f04f 0300 	mov.w	r3, #0
 8003f2e:	e9c1 2300 	strd	r2, r3, [r1]
 8003f32:	e0bf      	b.n	80040b4 <main+0x11b8>
								}
							}
						}
					}
					// Run point mode
					else if(state == 16){
 8003f34:	4b26      	ldr	r3, [pc, #152]	@ (8003fd0 <main+0x10d4>)
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	2b10      	cmp	r3, #16
 8003f3a:	f040 80ab 	bne.w	8004094 <main+0x1198>
						if(ready == 1){
 8003f3e:	4b25      	ldr	r3, [pc, #148]	@ (8003fd4 <main+0x10d8>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d172      	bne.n	800402c <main+0x1130>
							static uint64_t timestamp = 0;
							static uint8_t first = 1;
							if(first){
 8003f46:	4b36      	ldr	r3, [pc, #216]	@ (8004020 <main+0x1124>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00f      	beq.n	8003f6e <main+0x1072>
								timestamp = HAL_GetTick() + 500;
 8003f4e:	f002 fa39 	bl	80063c4 <HAL_GetTick>
 8003f52:	4603      	mov	r3, r0
 8003f54:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8003f58:	2200      	movs	r2, #0
 8003f5a:	60bb      	str	r3, [r7, #8]
 8003f5c:	60fa      	str	r2, [r7, #12]
 8003f5e:	4b31      	ldr	r3, [pc, #196]	@ (8004024 <main+0x1128>)
 8003f60:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003f64:	e9c3 1200 	strd	r1, r2, [r3]
								first = 0;
 8003f68:	4a2d      	ldr	r2, [pc, #180]	@ (8004020 <main+0x1124>)
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	7013      	strb	r3, [r2, #0]
							}
							if(HAL_GetTick() > timestamp){
 8003f6e:	f002 fa29 	bl	80063c4 <HAL_GetTick>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2200      	movs	r2, #0
 8003f76:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f78:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8004024 <main+0x1128>)
 8003f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f80:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8003f82:	428a      	cmp	r2, r1
 8003f84:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f86:	418b      	sbcs	r3, r1
 8003f88:	f080 8094 	bcs.w	80040b4 <main+0x11b8>
								initial_position = encoder.mm;
 8003f8c:	4b14      	ldr	r3, [pc, #80]	@ (8003fe0 <main+0x10e4>)
 8003f8e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8003f92:	4914      	ldr	r1, [pc, #80]	@ (8003fe4 <main+0x10e8>)
 8003f94:	e9c1 2300 	strd	r2, r3, [r1]
								target_position = setpoint;
 8003f98:	4b23      	ldr	r3, [pc, #140]	@ (8004028 <main+0x112c>)
 8003f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9e:	4915      	ldr	r1, [pc, #84]	@ (8003ff4 <main+0x10f8>)
 8003fa0:	e9c1 2300 	strd	r2, r3, [r1]
								computeTrapezoidalData.t = 0;
 8003fa4:	4914      	ldr	r1, [pc, #80]	@ (8003ff8 <main+0x10fc>)
 8003fa6:	f04f 0200 	mov.w	r2, #0
 8003faa:	f04f 0300 	mov.w	r3, #0
 8003fae:	e9c1 2300 	strd	r2, r3, [r1]
								p_e = 0;
 8003fb2:	4914      	ldr	r1, [pc, #80]	@ (8004004 <main+0x1108>)
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	e9c1 2300 	strd	r2, r3, [r1]
								ready = 0;
 8003fc0:	4a04      	ldr	r2, [pc, #16]	@ (8003fd4 <main+0x10d8>)
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	7013      	strb	r3, [r2, #0]
								first = 1;
 8003fc6:	4a16      	ldr	r2, [pc, #88]	@ (8004020 <main+0x1124>)
 8003fc8:	2301      	movs	r3, #1
 8003fca:	7013      	strb	r3, [r2, #0]
 8003fcc:	e072      	b.n	80040b4 <main+0x11b8>
 8003fce:	bf00      	nop
 8003fd0:	20000356 	.word	0x20000356
 8003fd4:	20000e8c 	.word	0x20000e8c
 8003fd8:	20000ec1 	.word	0x20000ec1
 8003fdc:	20001608 	.word	0x20001608
 8003fe0:	200012d0 	.word	0x200012d0
 8003fe4:	200015b8 	.word	0x200015b8
 8003fe8:	20000348 	.word	0x20000348
 8003fec:	200011ec 	.word	0x200011ec
 8003ff0:	40240000 	.word	0x40240000
 8003ff4:	200015c0 	.word	0x200015c0
 8003ff8:	20001598 	.word	0x20001598
 8003ffc:	20001524 	.word	0x20001524
 8004000:	c1200000 	.word	0xc1200000
 8004004:	20001408 	.word	0x20001408
 8004008:	20001418 	.word	0x20001418
 800400c:	20000eb8 	.word	0x20000eb8
 8004010:	20001054 	.word	0x20001054
 8004014:	200002a9 	.word	0x200002a9
 8004018:	20001610 	.word	0x20001610
 800401c:	20000ec4 	.word	0x20000ec4
 8004020:	200002aa 	.word	0x200002aa
 8004024:	20001618 	.word	0x20001618
 8004028:	20000e80 	.word	0x20000e80
							}
						}
						else if((computeTrapezoidalData.is_finish == 1) && (ready == 0)){
 800402c:	4b39      	ldr	r3, [pc, #228]	@ (8004114 <main+0x1218>)
 800402e:	7a1b      	ldrb	r3, [r3, #8]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d13f      	bne.n	80040b4 <main+0x11b8>
 8004034:	4b38      	ldr	r3, [pc, #224]	@ (8004118 <main+0x121c>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d13b      	bne.n	80040b4 <main+0x11b8>
							static uint64_t timestamp = 0;
							static uint8_t first = 1;
							if(first){
 800403c:	4b37      	ldr	r3, [pc, #220]	@ (800411c <main+0x1220>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00f      	beq.n	8004064 <main+0x1168>
								timestamp = HAL_GetTick() + 500;
 8004044:	f002 f9be 	bl	80063c4 <HAL_GetTick>
 8004048:	4603      	mov	r3, r0
 800404a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800404e:	2200      	movs	r2, #0
 8004050:	603b      	str	r3, [r7, #0]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	4b32      	ldr	r3, [pc, #200]	@ (8004120 <main+0x1224>)
 8004056:	e9d7 1200 	ldrd	r1, r2, [r7]
 800405a:	e9c3 1200 	strd	r1, r2, [r3]
								first = 0;
 800405e:	4a2f      	ldr	r2, [pc, #188]	@ (800411c <main+0x1220>)
 8004060:	2300      	movs	r3, #0
 8004062:	7013      	strb	r3, [r2, #0]
							}
							if(HAL_GetTick() > timestamp){
 8004064:	f002 f9ae 	bl	80063c4 <HAL_GetTick>
 8004068:	4603      	mov	r3, r0
 800406a:	2200      	movs	r2, #0
 800406c:	673b      	str	r3, [r7, #112]	@ 0x70
 800406e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004070:	4b2b      	ldr	r3, [pc, #172]	@ (8004120 <main+0x1224>)
 8004072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004076:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8004078:	428a      	cmp	r2, r1
 800407a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800407c:	418b      	sbcs	r3, r1
 800407e:	d219      	bcs.n	80040b4 <main+0x11b8>
								state = 0b0000;
 8004080:	4a28      	ldr	r2, [pc, #160]	@ (8004124 <main+0x1228>)
 8004082:	2300      	movs	r3, #0
 8004084:	8013      	strh	r3, [r2, #0]
								registerFrame[0x10].U16 = 0b0000;
 8004086:	4a28      	ldr	r2, [pc, #160]	@ (8004128 <main+0x122c>)
 8004088:	2300      	movs	r3, #0
 800408a:	8413      	strh	r3, [r2, #32]
//								timestamp = 0;
								first = 1;
 800408c:	4a23      	ldr	r2, [pc, #140]	@ (800411c <main+0x1220>)
 800408e:	2301      	movs	r3, #1
 8004090:	7013      	strb	r3, [r2, #0]
 8004092:	e00f      	b.n	80040b4 <main+0x11b8>
//							timestamp++;
						}
					}
					else {
						// Update peripheral
						Vacuum_Status(&eff); // Vacuum
 8004094:	4825      	ldr	r0, [pc, #148]	@ (800412c <main+0x1230>)
 8004096:	f7fc ff3b 	bl	8000f10 <Vacuum_Status>
						Gripper_Movement_Status(&eff); // End effector
 800409a:	4824      	ldr	r0, [pc, #144]	@ (800412c <main+0x1230>)
 800409c:	f7fc ff64 	bl	8000f68 <Gripper_Movement_Status>
 80040a0:	e008      	b.n	80040b4 <main+0x11b8>
								if(joy.is_place == 1){
 80040a2:	bf00      	nop
 80040a4:	e006      	b.n	80040b4 <main+0x11b8>
								if(joy.is_place == 1){
 80040a6:	bf00      	nop
 80040a8:	e004      	b.n	80040b4 <main+0x11b8>
								if(joy.is_place == 1){
 80040aa:	bf00      	nop
 80040ac:	e002      	b.n	80040b4 <main+0x11b8>
								if(joy.is_place == 1){
 80040ae:	bf00      	nop
 80040b0:	e000      	b.n	80040b4 <main+0x11b8>
								if(joy.is_place == 1){
 80040b2:	bf00      	nop

				}

			}
		}
		if(mode == HOMING){
 80040b4:	4b1e      	ldr	r3, [pc, #120]	@ (8004130 <main+0x1234>)
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d112      	bne.n	80040e2 <main+0x11e6>
			if(home.is_home == 1){
 80040bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004134 <main+0x1238>)
 80040be:	78db      	ldrb	r3, [r3, #3]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d10e      	bne.n	80040e2 <main+0x11e6>
				home.is_home = 0;
 80040c4:	4a1b      	ldr	r2, [pc, #108]	@ (8004134 <main+0x1238>)
 80040c6:	2300      	movs	r3, #0
 80040c8:	70d3      	strb	r3, [r2, #3]
				registerFrame[0x10].U16 = 0b0000; // Reset data of moving status
 80040ca:	4a17      	ldr	r2, [pc, #92]	@ (8004128 <main+0x122c>)
 80040cc:	2300      	movs	r3, #0
 80040ce:	8413      	strh	r3, [r2, #32]
				// Finish homing state at 0 mm
				state = registerFrame[0x10].U16;
 80040d0:	4b15      	ldr	r3, [pc, #84]	@ (8004128 <main+0x122c>)
 80040d2:	8c1b      	ldrh	r3, [r3, #32]
 80040d4:	4a13      	ldr	r2, [pc, #76]	@ (8004124 <main+0x1228>)
 80040d6:	8013      	strh	r3, [r2, #0]

				Reset_main_variable();
 80040d8:	f000 fdf2 	bl	8004cc0 <Reset_main_variable>
				// Change Mode
				mode = RUNNING;
 80040dc:	4a14      	ldr	r2, [pc, #80]	@ (8004130 <main+0x1234>)
 80040de:	2301      	movs	r3, #1
 80040e0:	8013      	strh	r3, [r2, #0]
			}
		}
		if(mode == EMERGENCY){
 80040e2:	4b13      	ldr	r3, [pc, #76]	@ (8004130 <main+0x1234>)
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	2b03      	cmp	r3, #3
 80040e8:	f47e afc6 	bne.w	8003078 <main+0x17c>
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1){
 80040ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040f0:	4811      	ldr	r0, [pc, #68]	@ (8004138 <main+0x123c>)
 80040f2:	f004 fd59 	bl	8008ba8 <HAL_GPIO_ReadPin>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	f47e afbd 	bne.w	8003078 <main+0x17c>
				HAL_GPIO_WritePin(emer_light_gpio, emer_light_pin, RESET);
 80040fe:	2200      	movs	r2, #0
 8004100:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004104:	480d      	ldr	r0, [pc, #52]	@ (800413c <main+0x1240>)
 8004106:	f004 fd67 	bl	8008bd8 <HAL_GPIO_WritePin>
				mode = WAIT;
 800410a:	4a09      	ldr	r2, [pc, #36]	@ (8004130 <main+0x1234>)
 800410c:	2300      	movs	r3, #0
 800410e:	8013      	strh	r3, [r2, #0]
		Modbus_Protocal_Worker();
 8004110:	f7fe bfb2 	b.w	8003078 <main+0x17c>
 8004114:	20001598 	.word	0x20001598
 8004118:	20000e8c 	.word	0x20000e8c
 800411c:	200002ab 	.word	0x200002ab
 8004120:	20001620 	.word	0x20001620
 8004124:	20000356 	.word	0x20000356
 8004128:	20000ec4 	.word	0x20000ec4
 800412c:	20001054 	.word	0x20001054
 8004130:	20000e8a 	.word	0x20000e8a
 8004134:	20000e98 	.word	0x20000e98
 8004138:	48000400 	.word	0x48000400
 800413c:	48000800 	.word	0x48000800

08004140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b094      	sub	sp, #80	@ 0x50
 8004144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004146:	f107 0318 	add.w	r3, r7, #24
 800414a:	2238      	movs	r2, #56	@ 0x38
 800414c:	2100      	movs	r1, #0
 800414e:	4618      	mov	r0, r3
 8004150:	f009 fe87 	bl	800de62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004154:	1d3b      	adds	r3, r7, #4
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	605a      	str	r2, [r3, #4]
 800415c:	609a      	str	r2, [r3, #8]
 800415e:	60da      	str	r2, [r3, #12]
 8004160:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004162:	2000      	movs	r0, #0
 8004164:	f004 fd68 	bl	8008c38 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004168:	2301      	movs	r3, #1
 800416a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800416c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004170:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004172:	2302      	movs	r3, #2
 8004174:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004176:	2303      	movs	r3, #3
 8004178:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800417a:	2306      	movs	r3, #6
 800417c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800417e:	2355      	movs	r3, #85	@ 0x55
 8004180:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004182:	2302      	movs	r3, #2
 8004184:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004186:	2302      	movs	r3, #2
 8004188:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800418a:	2302      	movs	r3, #2
 800418c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800418e:	f107 0318 	add.w	r3, r7, #24
 8004192:	4618      	mov	r0, r3
 8004194:	f004 fe04 	bl	8008da0 <HAL_RCC_OscConfig>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800419e:	f000 fe5b 	bl	8004e58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80041a2:	230f      	movs	r3, #15
 80041a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80041a6:	2303      	movs	r3, #3
 80041a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041aa:	2300      	movs	r3, #0
 80041ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80041ae:	2300      	movs	r3, #0
 80041b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80041b2:	2300      	movs	r3, #0
 80041b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80041b6:	1d3b      	adds	r3, r7, #4
 80041b8:	2104      	movs	r1, #4
 80041ba:	4618      	mov	r0, r3
 80041bc:	f005 f902 	bl	80093c4 <HAL_RCC_ClockConfig>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80041c6:	f000 fe47 	bl	8004e58 <Error_Handler>
  }
}
 80041ca:	bf00      	nop
 80041cc:	3750      	adds	r7, #80	@ 0x50
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
	...

080041d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08c      	sub	sp, #48	@ 0x30
 80041d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80041da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	605a      	str	r2, [r3, #4]
 80041e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80041e6:	1d3b      	adds	r3, r7, #4
 80041e8:	2220      	movs	r2, #32
 80041ea:	2100      	movs	r1, #0
 80041ec:	4618      	mov	r0, r3
 80041ee:	f009 fe38 	bl	800de62 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80041f2:	4b32      	ldr	r3, [pc, #200]	@ (80042bc <MX_ADC1_Init+0xe8>)
 80041f4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80041f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80041fa:	4b30      	ldr	r3, [pc, #192]	@ (80042bc <MX_ADC1_Init+0xe8>)
 80041fc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004200:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004202:	4b2e      	ldr	r3, [pc, #184]	@ (80042bc <MX_ADC1_Init+0xe8>)
 8004204:	2200      	movs	r2, #0
 8004206:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004208:	4b2c      	ldr	r3, [pc, #176]	@ (80042bc <MX_ADC1_Init+0xe8>)
 800420a:	2200      	movs	r2, #0
 800420c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800420e:	4b2b      	ldr	r3, [pc, #172]	@ (80042bc <MX_ADC1_Init+0xe8>)
 8004210:	2200      	movs	r2, #0
 8004212:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004214:	4b29      	ldr	r3, [pc, #164]	@ (80042bc <MX_ADC1_Init+0xe8>)
 8004216:	2200      	movs	r2, #0
 8004218:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800421a:	4b28      	ldr	r3, [pc, #160]	@ (80042bc <MX_ADC1_Init+0xe8>)
 800421c:	2204      	movs	r2, #4
 800421e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004220:	4b26      	ldr	r3, [pc, #152]	@ (80042bc <MX_ADC1_Init+0xe8>)
 8004222:	2200      	movs	r2, #0
 8004224:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004226:	4b25      	ldr	r3, [pc, #148]	@ (80042bc <MX_ADC1_Init+0xe8>)
 8004228:	2201      	movs	r2, #1
 800422a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800422c:	4b23      	ldr	r3, [pc, #140]	@ (80042bc <MX_ADC1_Init+0xe8>)
 800422e:	2201      	movs	r2, #1
 8004230:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004232:	4b22      	ldr	r3, [pc, #136]	@ (80042bc <MX_ADC1_Init+0xe8>)
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800423a:	4b20      	ldr	r3, [pc, #128]	@ (80042bc <MX_ADC1_Init+0xe8>)
 800423c:	2200      	movs	r2, #0
 800423e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004240:	4b1e      	ldr	r3, [pc, #120]	@ (80042bc <MX_ADC1_Init+0xe8>)
 8004242:	2200      	movs	r2, #0
 8004244:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004246:	4b1d      	ldr	r3, [pc, #116]	@ (80042bc <MX_ADC1_Init+0xe8>)
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800424e:	4b1b      	ldr	r3, [pc, #108]	@ (80042bc <MX_ADC1_Init+0xe8>)
 8004250:	2200      	movs	r2, #0
 8004252:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8004254:	4b19      	ldr	r3, [pc, #100]	@ (80042bc <MX_ADC1_Init+0xe8>)
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800425c:	4817      	ldr	r0, [pc, #92]	@ (80042bc <MX_ADC1_Init+0xe8>)
 800425e:	f002 fafd 	bl	800685c <HAL_ADC_Init>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8004268:	f000 fdf6 	bl	8004e58 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800426c:	2300      	movs	r3, #0
 800426e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004270:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004274:	4619      	mov	r1, r3
 8004276:	4811      	ldr	r0, [pc, #68]	@ (80042bc <MX_ADC1_Init+0xe8>)
 8004278:	f003 fdca 	bl	8007e10 <HAL_ADCEx_MultiModeConfigChannel>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8004282:	f000 fde9 	bl	8004e58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004286:	4b0e      	ldr	r3, [pc, #56]	@ (80042c0 <MX_ADC1_Init+0xec>)
 8004288:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800428a:	2306      	movs	r3, #6
 800428c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800428e:	2300      	movs	r3, #0
 8004290:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004292:	237f      	movs	r3, #127	@ 0x7f
 8004294:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004296:	2304      	movs	r3, #4
 8004298:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800429a:	2300      	movs	r3, #0
 800429c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800429e:	1d3b      	adds	r3, r7, #4
 80042a0:	4619      	mov	r1, r3
 80042a2:	4806      	ldr	r0, [pc, #24]	@ (80042bc <MX_ADC1_Init+0xe8>)
 80042a4:	f002 fff2 	bl	800728c <HAL_ADC_ConfigChannel>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80042ae:	f000 fdd3 	bl	8004e58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80042b2:	bf00      	nop
 80042b4:	3730      	adds	r7, #48	@ 0x30
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	20000860 	.word	0x20000860
 80042c0:	04300002 	.word	0x04300002

080042c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b09c      	sub	sp, #112	@ 0x70
 80042c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042ca:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	605a      	str	r2, [r3, #4]
 80042d4:	609a      	str	r2, [r3, #8]
 80042d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	605a      	str	r2, [r3, #4]
 80042e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80042e4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	605a      	str	r2, [r3, #4]
 80042ee:	609a      	str	r2, [r3, #8]
 80042f0:	60da      	str	r2, [r3, #12]
 80042f2:	611a      	str	r2, [r3, #16]
 80042f4:	615a      	str	r2, [r3, #20]
 80042f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80042f8:	1d3b      	adds	r3, r7, #4
 80042fa:	2234      	movs	r2, #52	@ 0x34
 80042fc:	2100      	movs	r1, #0
 80042fe:	4618      	mov	r0, r3
 8004300:	f009 fdaf 	bl	800de62 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004304:	4b45      	ldr	r3, [pc, #276]	@ (800441c <MX_TIM1_Init+0x158>)
 8004306:	4a46      	ldr	r2, [pc, #280]	@ (8004420 <MX_TIM1_Init+0x15c>)
 8004308:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 800430a:	4b44      	ldr	r3, [pc, #272]	@ (800441c <MX_TIM1_Init+0x158>)
 800430c:	2203      	movs	r2, #3
 800430e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004310:	4b42      	ldr	r3, [pc, #264]	@ (800441c <MX_TIM1_Init+0x158>)
 8004312:	2200      	movs	r2, #0
 8004314:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004316:	4b41      	ldr	r3, [pc, #260]	@ (800441c <MX_TIM1_Init+0x158>)
 8004318:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800431c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800431e:	4b3f      	ldr	r3, [pc, #252]	@ (800441c <MX_TIM1_Init+0x158>)
 8004320:	2200      	movs	r2, #0
 8004322:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004324:	4b3d      	ldr	r3, [pc, #244]	@ (800441c <MX_TIM1_Init+0x158>)
 8004326:	2200      	movs	r2, #0
 8004328:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800432a:	4b3c      	ldr	r3, [pc, #240]	@ (800441c <MX_TIM1_Init+0x158>)
 800432c:	2200      	movs	r2, #0
 800432e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004330:	483a      	ldr	r0, [pc, #232]	@ (800441c <MX_TIM1_Init+0x158>)
 8004332:	f005 fcb1 	bl	8009c98 <HAL_TIM_Base_Init>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800433c:	f000 fd8c 	bl	8004e58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004340:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004344:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004346:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800434a:	4619      	mov	r1, r3
 800434c:	4833      	ldr	r0, [pc, #204]	@ (800441c <MX_TIM1_Init+0x158>)
 800434e:	f006 fcdb 	bl	800ad08 <HAL_TIM_ConfigClockSource>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004358:	f000 fd7e 	bl	8004e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800435c:	482f      	ldr	r0, [pc, #188]	@ (800441c <MX_TIM1_Init+0x158>)
 800435e:	f005 fde7 	bl	8009f30 <HAL_TIM_PWM_Init>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004368:	f000 fd76 	bl	8004e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800436c:	2300      	movs	r3, #0
 800436e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004370:	2300      	movs	r3, #0
 8004372:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004374:	2300      	movs	r3, #0
 8004376:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004378:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800437c:	4619      	mov	r1, r3
 800437e:	4827      	ldr	r0, [pc, #156]	@ (800441c <MX_TIM1_Init+0x158>)
 8004380:	f007 fca8 	bl	800bcd4 <HAL_TIMEx_MasterConfigSynchronization>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800438a:	f000 fd65 	bl	8004e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800438e:	2360      	movs	r3, #96	@ 0x60
 8004390:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8004392:	2300      	movs	r3, #0
 8004394:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004396:	2300      	movs	r3, #0
 8004398:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800439a:	2300      	movs	r3, #0
 800439c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800439e:	2304      	movs	r3, #4
 80043a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80043a2:	2300      	movs	r3, #0
 80043a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80043a6:	2300      	movs	r3, #0
 80043a8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80043aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80043ae:	2200      	movs	r2, #0
 80043b0:	4619      	mov	r1, r3
 80043b2:	481a      	ldr	r0, [pc, #104]	@ (800441c <MX_TIM1_Init+0x158>)
 80043b4:	f006 fb94 	bl	800aae0 <HAL_TIM_PWM_ConfigChannel>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80043be:	f000 fd4b 	bl	8004e58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80043c2:	2300      	movs	r3, #0
 80043c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80043c6:	2300      	movs	r3, #0
 80043c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80043ce:	2300      	movs	r3, #0
 80043d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80043d2:	2300      	movs	r3, #0
 80043d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80043d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80043da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80043dc:	2300      	movs	r3, #0
 80043de:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80043e0:	2300      	movs	r3, #0
 80043e2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80043e4:	2300      	movs	r3, #0
 80043e6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80043e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80043ee:	2300      	movs	r3, #0
 80043f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80043f2:	2300      	movs	r3, #0
 80043f4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80043f6:	2300      	movs	r3, #0
 80043f8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80043fa:	1d3b      	adds	r3, r7, #4
 80043fc:	4619      	mov	r1, r3
 80043fe:	4807      	ldr	r0, [pc, #28]	@ (800441c <MX_TIM1_Init+0x158>)
 8004400:	f007 fcfe 	bl	800be00 <HAL_TIMEx_ConfigBreakDeadTime>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800440a:	f000 fd25 	bl	8004e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800440e:	4803      	ldr	r0, [pc, #12]	@ (800441c <MX_TIM1_Init+0x158>)
 8004410:	f001 fda4 	bl	8005f5c <HAL_TIM_MspPostInit>

}
 8004414:	bf00      	nop
 8004416:	3770      	adds	r7, #112	@ 0x70
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	2000092c 	.word	0x2000092c
 8004420:	40012c00 	.word	0x40012c00

08004424 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b088      	sub	sp, #32
 8004428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800442a:	f107 0310 	add.w	r3, r7, #16
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	605a      	str	r2, [r3, #4]
 8004434:	609a      	str	r2, [r3, #8]
 8004436:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004438:	1d3b      	adds	r3, r7, #4
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]
 800443e:	605a      	str	r2, [r3, #4]
 8004440:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004442:	4b1d      	ldr	r3, [pc, #116]	@ (80044b8 <MX_TIM3_Init+0x94>)
 8004444:	4a1d      	ldr	r2, [pc, #116]	@ (80044bc <MX_TIM3_Init+0x98>)
 8004446:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8004448:	4b1b      	ldr	r3, [pc, #108]	@ (80044b8 <MX_TIM3_Init+0x94>)
 800444a:	22a9      	movs	r2, #169	@ 0xa9
 800444c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800444e:	4b1a      	ldr	r3, [pc, #104]	@ (80044b8 <MX_TIM3_Init+0x94>)
 8004450:	2200      	movs	r2, #0
 8004452:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8004454:	4b18      	ldr	r3, [pc, #96]	@ (80044b8 <MX_TIM3_Init+0x94>)
 8004456:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800445a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800445c:	4b16      	ldr	r3, [pc, #88]	@ (80044b8 <MX_TIM3_Init+0x94>)
 800445e:	2200      	movs	r2, #0
 8004460:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004462:	4b15      	ldr	r3, [pc, #84]	@ (80044b8 <MX_TIM3_Init+0x94>)
 8004464:	2200      	movs	r2, #0
 8004466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004468:	4813      	ldr	r0, [pc, #76]	@ (80044b8 <MX_TIM3_Init+0x94>)
 800446a:	f005 fc15 	bl	8009c98 <HAL_TIM_Base_Init>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004474:	f000 fcf0 	bl	8004e58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004478:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800447c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800447e:	f107 0310 	add.w	r3, r7, #16
 8004482:	4619      	mov	r1, r3
 8004484:	480c      	ldr	r0, [pc, #48]	@ (80044b8 <MX_TIM3_Init+0x94>)
 8004486:	f006 fc3f 	bl	800ad08 <HAL_TIM_ConfigClockSource>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004490:	f000 fce2 	bl	8004e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004494:	2300      	movs	r3, #0
 8004496:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004498:	2300      	movs	r3, #0
 800449a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800449c:	1d3b      	adds	r3, r7, #4
 800449e:	4619      	mov	r1, r3
 80044a0:	4805      	ldr	r0, [pc, #20]	@ (80044b8 <MX_TIM3_Init+0x94>)
 80044a2:	f007 fc17 	bl	800bcd4 <HAL_TIMEx_MasterConfigSynchronization>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80044ac:	f000 fcd4 	bl	8004e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80044b0:	bf00      	nop
 80044b2:	3720      	adds	r7, #32
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	200009f8 	.word	0x200009f8
 80044bc:	40000400 	.word	0x40000400

080044c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08c      	sub	sp, #48	@ 0x30
 80044c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80044c6:	f107 030c 	add.w	r3, r7, #12
 80044ca:	2224      	movs	r2, #36	@ 0x24
 80044cc:	2100      	movs	r1, #0
 80044ce:	4618      	mov	r0, r3
 80044d0:	f009 fcc7 	bl	800de62 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044d4:	463b      	mov	r3, r7
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	605a      	str	r2, [r3, #4]
 80044dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80044de:	4b21      	ldr	r3, [pc, #132]	@ (8004564 <MX_TIM4_Init+0xa4>)
 80044e0:	4a21      	ldr	r2, [pc, #132]	@ (8004568 <MX_TIM4_Init+0xa8>)
 80044e2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80044e4:	4b1f      	ldr	r3, [pc, #124]	@ (8004564 <MX_TIM4_Init+0xa4>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004564 <MX_TIM4_Init+0xa4>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80044f0:	4b1c      	ldr	r3, [pc, #112]	@ (8004564 <MX_TIM4_Init+0xa4>)
 80044f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80044f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004564 <MX_TIM4_Init+0xa4>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044fe:	4b19      	ldr	r3, [pc, #100]	@ (8004564 <MX_TIM4_Init+0xa4>)
 8004500:	2200      	movs	r2, #0
 8004502:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004504:	2303      	movs	r3, #3
 8004506:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004508:	2300      	movs	r3, #0
 800450a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800450c:	2301      	movs	r3, #1
 800450e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004510:	2300      	movs	r3, #0
 8004512:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 3;
 8004514:	2303      	movs	r3, #3
 8004516:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004518:	2300      	movs	r3, #0
 800451a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800451c:	2301      	movs	r3, #1
 800451e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004520:	2300      	movs	r3, #0
 8004522:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 3;
 8004524:	2303      	movs	r3, #3
 8004526:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004528:	f107 030c 	add.w	r3, r7, #12
 800452c:	4619      	mov	r1, r3
 800452e:	480d      	ldr	r0, [pc, #52]	@ (8004564 <MX_TIM4_Init+0xa4>)
 8004530:	f005 ff74 	bl	800a41c <HAL_TIM_Encoder_Init>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800453a:	f000 fc8d 	bl	8004e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800453e:	2300      	movs	r3, #0
 8004540:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004542:	2300      	movs	r3, #0
 8004544:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004546:	463b      	mov	r3, r7
 8004548:	4619      	mov	r1, r3
 800454a:	4806      	ldr	r0, [pc, #24]	@ (8004564 <MX_TIM4_Init+0xa4>)
 800454c:	f007 fbc2 	bl	800bcd4 <HAL_TIMEx_MasterConfigSynchronization>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8004556:	f000 fc7f 	bl	8004e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800455a:	bf00      	nop
 800455c:	3730      	adds	r7, #48	@ 0x30
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20000ac4 	.word	0x20000ac4
 8004568:	40000800 	.word	0x40000800

0800456c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004570:	4b14      	ldr	r3, [pc, #80]	@ (80045c4 <MX_TIM16_Init+0x58>)
 8004572:	4a15      	ldr	r2, [pc, #84]	@ (80045c8 <MX_TIM16_Init+0x5c>)
 8004574:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8004576:	4b13      	ldr	r3, [pc, #76]	@ (80045c4 <MX_TIM16_Init+0x58>)
 8004578:	22a9      	movs	r2, #169	@ 0xa9
 800457a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800457c:	4b11      	ldr	r3, [pc, #68]	@ (80045c4 <MX_TIM16_Init+0x58>)
 800457e:	2200      	movs	r2, #0
 8004580:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8004582:	4b10      	ldr	r3, [pc, #64]	@ (80045c4 <MX_TIM16_Init+0x58>)
 8004584:	f240 4279 	movw	r2, #1145	@ 0x479
 8004588:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800458a:	4b0e      	ldr	r3, [pc, #56]	@ (80045c4 <MX_TIM16_Init+0x58>)
 800458c:	2200      	movs	r2, #0
 800458e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004590:	4b0c      	ldr	r3, [pc, #48]	@ (80045c4 <MX_TIM16_Init+0x58>)
 8004592:	2200      	movs	r2, #0
 8004594:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004596:	4b0b      	ldr	r3, [pc, #44]	@ (80045c4 <MX_TIM16_Init+0x58>)
 8004598:	2200      	movs	r2, #0
 800459a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800459c:	4809      	ldr	r0, [pc, #36]	@ (80045c4 <MX_TIM16_Init+0x58>)
 800459e:	f005 fb7b 	bl	8009c98 <HAL_TIM_Base_Init>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80045a8:	f000 fc56 	bl	8004e58 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80045ac:	2108      	movs	r1, #8
 80045ae:	4805      	ldr	r0, [pc, #20]	@ (80045c4 <MX_TIM16_Init+0x58>)
 80045b0:	f005 fe3e 	bl	800a230 <HAL_TIM_OnePulse_Init>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 80045ba:	f000 fc4d 	bl	8004e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80045be:	bf00      	nop
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	20000b90 	.word	0x20000b90
 80045c8:	40014400 	.word	0x40014400

080045cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80045d0:	4b23      	ldr	r3, [pc, #140]	@ (8004660 <MX_USART2_UART_Init+0x94>)
 80045d2:	4a24      	ldr	r2, [pc, #144]	@ (8004664 <MX_USART2_UART_Init+0x98>)
 80045d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80045d6:	4b22      	ldr	r3, [pc, #136]	@ (8004660 <MX_USART2_UART_Init+0x94>)
 80045d8:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80045dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80045de:	4b20      	ldr	r3, [pc, #128]	@ (8004660 <MX_USART2_UART_Init+0x94>)
 80045e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80045e4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80045e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004660 <MX_USART2_UART_Init+0x94>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80045ec:	4b1c      	ldr	r3, [pc, #112]	@ (8004660 <MX_USART2_UART_Init+0x94>)
 80045ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80045f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80045f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004660 <MX_USART2_UART_Init+0x94>)
 80045f6:	220c      	movs	r2, #12
 80045f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045fa:	4b19      	ldr	r3, [pc, #100]	@ (8004660 <MX_USART2_UART_Init+0x94>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004600:	4b17      	ldr	r3, [pc, #92]	@ (8004660 <MX_USART2_UART_Init+0x94>)
 8004602:	2200      	movs	r2, #0
 8004604:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004606:	4b16      	ldr	r3, [pc, #88]	@ (8004660 <MX_USART2_UART_Init+0x94>)
 8004608:	2200      	movs	r2, #0
 800460a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800460c:	4b14      	ldr	r3, [pc, #80]	@ (8004660 <MX_USART2_UART_Init+0x94>)
 800460e:	2200      	movs	r2, #0
 8004610:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004612:	4b13      	ldr	r3, [pc, #76]	@ (8004660 <MX_USART2_UART_Init+0x94>)
 8004614:	2200      	movs	r2, #0
 8004616:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004618:	4811      	ldr	r0, [pc, #68]	@ (8004660 <MX_USART2_UART_Init+0x94>)
 800461a:	f007 fcd5 	bl	800bfc8 <HAL_UART_Init>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8004624:	f000 fc18 	bl	8004e58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004628:	2100      	movs	r1, #0
 800462a:	480d      	ldr	r0, [pc, #52]	@ (8004660 <MX_USART2_UART_Init+0x94>)
 800462c:	f009 faf5 	bl	800dc1a <HAL_UARTEx_SetTxFifoThreshold>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8004636:	f000 fc0f 	bl	8004e58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800463a:	2100      	movs	r1, #0
 800463c:	4808      	ldr	r0, [pc, #32]	@ (8004660 <MX_USART2_UART_Init+0x94>)
 800463e:	f009 fb2a 	bl	800dc96 <HAL_UARTEx_SetRxFifoThreshold>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8004648:	f000 fc06 	bl	8004e58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800464c:	4804      	ldr	r0, [pc, #16]	@ (8004660 <MX_USART2_UART_Init+0x94>)
 800464e:	f009 faab 	bl	800dba8 <HAL_UARTEx_DisableFifoMode>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8004658:	f000 fbfe 	bl	8004e58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800465c:	bf00      	nop
 800465e:	bd80      	pop	{r7, pc}
 8004660:	20000cbc 	.word	0x20000cbc
 8004664:	40004400 	.word	0x40004400

08004668 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800466e:	4b1e      	ldr	r3, [pc, #120]	@ (80046e8 <MX_DMA_Init+0x80>)
 8004670:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004672:	4a1d      	ldr	r2, [pc, #116]	@ (80046e8 <MX_DMA_Init+0x80>)
 8004674:	f043 0304 	orr.w	r3, r3, #4
 8004678:	6493      	str	r3, [r2, #72]	@ 0x48
 800467a:	4b1b      	ldr	r3, [pc, #108]	@ (80046e8 <MX_DMA_Init+0x80>)
 800467c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800467e:	f003 0304 	and.w	r3, r3, #4
 8004682:	607b      	str	r3, [r7, #4]
 8004684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004686:	4b18      	ldr	r3, [pc, #96]	@ (80046e8 <MX_DMA_Init+0x80>)
 8004688:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800468a:	4a17      	ldr	r2, [pc, #92]	@ (80046e8 <MX_DMA_Init+0x80>)
 800468c:	f043 0301 	orr.w	r3, r3, #1
 8004690:	6493      	str	r3, [r2, #72]	@ 0x48
 8004692:	4b15      	ldr	r3, [pc, #84]	@ (80046e8 <MX_DMA_Init+0x80>)
 8004694:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	603b      	str	r3, [r7, #0]
 800469c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800469e:	2200      	movs	r2, #0
 80046a0:	2100      	movs	r1, #0
 80046a2:	200b      	movs	r0, #11
 80046a4:	f003 fd97 	bl	80081d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80046a8:	200b      	movs	r0, #11
 80046aa:	f003 fdae 	bl	800820a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80046ae:	2200      	movs	r2, #0
 80046b0:	2100      	movs	r1, #0
 80046b2:	200c      	movs	r0, #12
 80046b4:	f003 fd8f 	bl	80081d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80046b8:	200c      	movs	r0, #12
 80046ba:	f003 fda6 	bl	800820a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80046be:	2200      	movs	r2, #0
 80046c0:	2100      	movs	r1, #0
 80046c2:	200d      	movs	r0, #13
 80046c4:	f003 fd87 	bl	80081d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80046c8:	200d      	movs	r0, #13
 80046ca:	f003 fd9e 	bl	800820a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80046ce:	2200      	movs	r2, #0
 80046d0:	2100      	movs	r1, #0
 80046d2:	200e      	movs	r0, #14
 80046d4:	f003 fd7f 	bl	80081d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80046d8:	200e      	movs	r0, #14
 80046da:	f003 fd96 	bl	800820a <HAL_NVIC_EnableIRQ>

}
 80046de:	bf00      	nop
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	40021000 	.word	0x40021000

080046ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08a      	sub	sp, #40	@ 0x28
 80046f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046f2:	f107 0314 	add.w	r3, r7, #20
 80046f6:	2200      	movs	r2, #0
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	605a      	str	r2, [r3, #4]
 80046fc:	609a      	str	r2, [r3, #8]
 80046fe:	60da      	str	r2, [r3, #12]
 8004700:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004702:	4b60      	ldr	r3, [pc, #384]	@ (8004884 <MX_GPIO_Init+0x198>)
 8004704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004706:	4a5f      	ldr	r2, [pc, #380]	@ (8004884 <MX_GPIO_Init+0x198>)
 8004708:	f043 0304 	orr.w	r3, r3, #4
 800470c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800470e:	4b5d      	ldr	r3, [pc, #372]	@ (8004884 <MX_GPIO_Init+0x198>)
 8004710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	613b      	str	r3, [r7, #16]
 8004718:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800471a:	4b5a      	ldr	r3, [pc, #360]	@ (8004884 <MX_GPIO_Init+0x198>)
 800471c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800471e:	4a59      	ldr	r2, [pc, #356]	@ (8004884 <MX_GPIO_Init+0x198>)
 8004720:	f043 0320 	orr.w	r3, r3, #32
 8004724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004726:	4b57      	ldr	r3, [pc, #348]	@ (8004884 <MX_GPIO_Init+0x198>)
 8004728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800472a:	f003 0320 	and.w	r3, r3, #32
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004732:	4b54      	ldr	r3, [pc, #336]	@ (8004884 <MX_GPIO_Init+0x198>)
 8004734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004736:	4a53      	ldr	r2, [pc, #332]	@ (8004884 <MX_GPIO_Init+0x198>)
 8004738:	f043 0301 	orr.w	r3, r3, #1
 800473c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800473e:	4b51      	ldr	r3, [pc, #324]	@ (8004884 <MX_GPIO_Init+0x198>)
 8004740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	60bb      	str	r3, [r7, #8]
 8004748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800474a:	4b4e      	ldr	r3, [pc, #312]	@ (8004884 <MX_GPIO_Init+0x198>)
 800474c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800474e:	4a4d      	ldr	r2, [pc, #308]	@ (8004884 <MX_GPIO_Init+0x198>)
 8004750:	f043 0302 	orr.w	r3, r3, #2
 8004754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004756:	4b4b      	ldr	r3, [pc, #300]	@ (8004884 <MX_GPIO_Init+0x198>)
 8004758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	607b      	str	r3, [r7, #4]
 8004760:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Direaction_motor_Pin|Emergency_light_Pin, GPIO_PIN_RESET);
 8004762:	2200      	movs	r2, #0
 8004764:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8004768:	4847      	ldr	r0, [pc, #284]	@ (8004888 <MX_GPIO_Init+0x19c>)
 800476a:	f004 fa35 	bl	8008bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Solenoid_valve_push_Pin, GPIO_PIN_RESET);
 800476e:	2200      	movs	r2, #0
 8004770:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8004774:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004778:	f004 fa2e 	bl	8008bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin, GPIO_PIN_RESET);
 800477c:	2200      	movs	r2, #0
 800477e:	f240 4116 	movw	r1, #1046	@ 0x416
 8004782:	4842      	ldr	r0, [pc, #264]	@ (800488c <MX_GPIO_Init+0x1a0>)
 8004784:	f004 fa28 	bl	8008bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004788:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800478c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800478e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004794:	2300      	movs	r3, #0
 8004796:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004798:	f107 0314 	add.w	r3, r7, #20
 800479c:	4619      	mov	r1, r3
 800479e:	483a      	ldr	r0, [pc, #232]	@ (8004888 <MX_GPIO_Init+0x19c>)
 80047a0:	f004 f880 	bl	80088a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Direaction_motor_Pin */
  GPIO_InitStruct.Pin = Direaction_motor_Pin;
 80047a4:	2302      	movs	r3, #2
 80047a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047a8:	2301      	movs	r3, #1
 80047aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ac:	2300      	movs	r3, #0
 80047ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047b0:	2303      	movs	r3, #3
 80047b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direaction_motor_GPIO_Port, &GPIO_InitStruct);
 80047b4:	f107 0314 	add.w	r3, r7, #20
 80047b8:	4619      	mov	r1, r3
 80047ba:	4833      	ldr	r0, [pc, #204]	@ (8004888 <MX_GPIO_Init+0x19c>)
 80047bc:	f004 f872 	bl	80088a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Solenoid_valve_push_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Solenoid_valve_push_Pin;
 80047c0:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80047c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047c6:	2301      	movs	r3, #1
 80047c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ca:	2300      	movs	r3, #0
 80047cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047ce:	2300      	movs	r3, #0
 80047d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047d2:	f107 0314 	add.w	r3, r7, #20
 80047d6:	4619      	mov	r1, r3
 80047d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80047dc:	f004 f862 	bl	80088a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : joy_switch_3_Pin joy_switch_4_Pin Set_home_Pin Reed_switch_pull_Pin */
  GPIO_InitStruct.Pin = joy_switch_3_Pin|joy_switch_4_Pin|Set_home_Pin|Reed_switch_pull_Pin;
 80047e0:	23f0      	movs	r3, #240	@ 0xf0
 80047e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047e4:	2300      	movs	r3, #0
 80047e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e8:	2300      	movs	r3, #0
 80047ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047ec:	f107 0314 	add.w	r3, r7, #20
 80047f0:	4619      	mov	r1, r3
 80047f2:	4825      	ldr	r0, [pc, #148]	@ (8004888 <MX_GPIO_Init+0x19c>)
 80047f4:	f004 f856 	bl	80088a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pilot_controller_error_Pin Pilot_motor_error_Pin Solenoid_valve_pull_Pin Solenoid_valve_vacuum_Pin */
  GPIO_InitStruct.Pin = Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin;
 80047f8:	f240 4316 	movw	r3, #1046	@ 0x416
 80047fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047fe:	2301      	movs	r3, #1
 8004800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004802:	2300      	movs	r3, #0
 8004804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004806:	2300      	movs	r3, #0
 8004808:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800480a:	f107 0314 	add.w	r3, r7, #20
 800480e:	4619      	mov	r1, r3
 8004810:	481e      	ldr	r0, [pc, #120]	@ (800488c <MX_GPIO_Init+0x1a0>)
 8004812:	f004 f847 	bl	80088a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Proximity_Pin Emergency_switch_Pin joy_switch_1_Pin */
  GPIO_InitStruct.Pin = Proximity_Pin|Emergency_switch_Pin|joy_switch_1_Pin;
 8004816:	f249 0320 	movw	r3, #36896	@ 0x9020
 800481a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800481c:	2300      	movs	r3, #0
 800481e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004820:	2300      	movs	r3, #0
 8004822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004824:	f107 0314 	add.w	r3, r7, #20
 8004828:	4619      	mov	r1, r3
 800482a:	4818      	ldr	r0, [pc, #96]	@ (800488c <MX_GPIO_Init+0x1a0>)
 800482c:	f004 f83a 	bl	80088a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_light_Pin */
  GPIO_InitStruct.Pin = Emergency_light_Pin;
 8004830:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004836:	2301      	movs	r3, #1
 8004838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483a:	2300      	movs	r3, #0
 800483c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800483e:	2300      	movs	r3, #0
 8004840:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Emergency_light_GPIO_Port, &GPIO_InitStruct);
 8004842:	f107 0314 	add.w	r3, r7, #20
 8004846:	4619      	mov	r1, r3
 8004848:	480f      	ldr	r0, [pc, #60]	@ (8004888 <MX_GPIO_Init+0x19c>)
 800484a:	f004 f82b 	bl	80088a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Reed_switch_push_Pin joy_switch_2_Pin */
  GPIO_InitStruct.Pin = Reed_switch_push_Pin|joy_switch_2_Pin;
 800484e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004854:	2300      	movs	r3, #0
 8004856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004858:	2300      	movs	r3, #0
 800485a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800485c:	f107 0314 	add.w	r3, r7, #20
 8004860:	4619      	mov	r1, r3
 8004862:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004866:	f004 f81d 	bl	80088a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800486a:	2200      	movs	r2, #0
 800486c:	2100      	movs	r1, #0
 800486e:	2028      	movs	r0, #40	@ 0x28
 8004870:	f003 fcb1 	bl	80081d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004874:	2028      	movs	r0, #40	@ 0x28
 8004876:	f003 fcc8 	bl	800820a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800487a:	bf00      	nop
 800487c:	3728      	adds	r7, #40	@ 0x28
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	40021000 	.word	0x40021000
 8004888:	48000800 	.word	0x48000800
 800488c:	48000400 	.word	0x48000400

08004890 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Main timer interrupt for run program with accuracy time
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af02      	add	r7, sp, #8
 8004896:	6078      	str	r0, [r7, #4]
	// Run with 1000 Hz
	if(htim == &htim3){
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a40      	ldr	r2, [pc, #256]	@ (800499c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d179      	bne.n	8004994 <HAL_TIM_PeriodElapsedCallback+0x104>
		// Routine
		if(registerFrame[0x00].U16 == 18537){
 80048a0:	4b3f      	ldr	r3, [pc, #252]	@ (80049a0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	f644 0269 	movw	r2, #18537	@ 0x4869
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d103      	bne.n	80048b4 <HAL_TIM_PeriodElapsedCallback+0x24>
			registerFrame[0x00].U16 = 22881;
 80048ac:	4b3c      	ldr	r3, [pc, #240]	@ (80049a0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80048ae:	f645 1261 	movw	r2, #22881	@ 0x5961
 80048b2:	801a      	strh	r2, [r3, #0]
		}
		registerFrame[0x04].U16 = eff.update_actual_status[0x04].U16;	// Gripper Movement Actual Status(0x10)
 80048b4:	4b3b      	ldr	r3, [pc, #236]	@ (80049a4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80048b6:	89da      	ldrh	r2, [r3, #14]
 80048b8:	4b39      	ldr	r3, [pc, #228]	@ (80049a0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80048ba:	811a      	strh	r2, [r3, #8]
		registerFrame[0x10].U16 = state;							// Z-axis Moving Status(0x10)
 80048bc:	4b3a      	ldr	r3, [pc, #232]	@ (80049a8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80048be:	881a      	ldrh	r2, [r3, #0]
 80048c0:	4b37      	ldr	r3, [pc, #220]	@ (80049a0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80048c2:	841a      	strh	r2, [r3, #32]
		registerFrame[0x11].U16 = (uint16_t)(encoder.mm * 10);		// Z-axis Actual Position(0x11)
 80048c4:	4b39      	ldr	r3, [pc, #228]	@ (80049ac <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80048c6:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80048ca:	f04f 0200 	mov.w	r2, #0
 80048ce:	4b38      	ldr	r3, [pc, #224]	@ (80049b0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80048d0:	f7fb fe5e 	bl	8000590 <__aeabi_dmul>
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	4610      	mov	r0, r2
 80048da:	4619      	mov	r1, r3
 80048dc:	f7fc f930 	bl	8000b40 <__aeabi_d2uiz>
 80048e0:	4603      	mov	r3, r0
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	4b2e      	ldr	r3, [pc, #184]	@ (80049a0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80048e6:	845a      	strh	r2, [r3, #34]	@ 0x22
		registerFrame[0x12].U16 = (int16_t)(encoder.mmps * 10);		// Z-axis Actual Speed (0x12)
 80048e8:	4b30      	ldr	r3, [pc, #192]	@ (80049ac <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80048ea:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	4b2f      	ldr	r3, [pc, #188]	@ (80049b0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80048f4:	f7fb fe4c 	bl	8000590 <__aeabi_dmul>
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4610      	mov	r0, r2
 80048fe:	4619      	mov	r1, r3
 8004900:	f7fc f8f6 	bl	8000af0 <__aeabi_d2iz>
 8004904:	4603      	mov	r3, r0
 8004906:	b21b      	sxth	r3, r3
 8004908:	b29a      	uxth	r2, r3
 800490a:	4b25      	ldr	r3, [pc, #148]	@ (80049a0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800490c:	849a      	strh	r2, [r3, #36]	@ 0x24
		registerFrame[0x13].U16 = (int16_t)(encoder.mmpss * 10);	// Z-axis Acceleration(0x13)
 800490e:	4b27      	ldr	r3, [pc, #156]	@ (80049ac <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8004910:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	4b25      	ldr	r3, [pc, #148]	@ (80049b0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800491a:	f7fb fe39 	bl	8000590 <__aeabi_dmul>
 800491e:	4602      	mov	r2, r0
 8004920:	460b      	mov	r3, r1
 8004922:	4610      	mov	r0, r2
 8004924:	4619      	mov	r1, r3
 8004926:	f7fc f8e3 	bl	8000af0 <__aeabi_d2iz>
 800492a:	4603      	mov	r3, r0
 800492c:	b21b      	sxth	r3, r3
 800492e:	b29a      	uxth	r2, r3
 8004930:	4b1b      	ldr	r3, [pc, #108]	@ (80049a0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8004932:	84da      	strh	r2, [r3, #38]	@ 0x26
		registerFrame[0x40].U16 = (int16_t)(x_axis_position * 10);	// X-axis Actual Position(0x40)
 8004934:	4b1f      	ldr	r3, [pc, #124]	@ (80049b4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8004936:	edd3 7a00 	vldr	s15, [r3]
 800493a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800493e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004942:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004946:	ee17 3a90 	vmov	r3, s15
 800494a:	b21b      	sxth	r3, r3
 800494c:	b29a      	uxth	r2, r3
 800494e:	4b14      	ldr	r3, [pc, #80]	@ (80049a0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8004950:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
		// Update encoder
		if(is_update_encoder == 0){
 8004954:	4b18      	ldr	r3, [pc, #96]	@ (80049b8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d102      	bne.n	8004962 <HAL_TIM_PeriodElapsedCallback+0xd2>
			is_update_encoder = 1;
 800495c:	4b16      	ldr	r3, [pc, #88]	@ (80049b8 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800495e:	2201      	movs	r2, #1
 8004960:	701a      	strb	r2, [r3, #0]
//				start_position_control = 1;
//				timestamp = 0;
//			}
//			timestamp++;
		}
		if(mode == HOMING){
 8004962:	4b16      	ldr	r3, [pc, #88]	@ (80049bc <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8004964:	881b      	ldrh	r3, [r3, #0]
 8004966:	2b02      	cmp	r3, #2
 8004968:	d114      	bne.n	8004994 <HAL_TIM_PeriodElapsedCallback+0x104>
//				eff.solenoid_command[1] = 0;
//				eff.solenoid_command[2] = 0;
//				Update_eff(&eff, solenoid_pull_gpio, solenoid_pull_pin, solenoid_push_gpio, solenoid_push_pin, vacuum_gpio, vacuum_pin);
//			}
			// Homing state
			homing(&home, GPIOB, GPIO_PIN_12); // Homing function
 800496a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800496e:	4914      	ldr	r1, [pc, #80]	@ (80049c0 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8004970:	4814      	ldr	r0, [pc, #80]	@ (80049c4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004972:	f000 ff15 	bl	80057a0 <homing>
			pwm_signal = home.pwm;
 8004976:	4b13      	ldr	r3, [pc, #76]	@ (80049c4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004978:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800497c:	461a      	mov	r2, r3
 800497e:	4b12      	ldr	r3, [pc, #72]	@ (80049c8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004980:	601a      	str	r2, [r3, #0]
			Update_pwm(&pwm_tim, pwm_channel, dir_gpio, dir_pin, pwm_signal); // Update main PWM signal
 8004982:	4b11      	ldr	r3, [pc, #68]	@ (80049c8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	2302      	movs	r3, #2
 800498a:	4a10      	ldr	r2, [pc, #64]	@ (80049cc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800498c:	2100      	movs	r1, #0
 800498e:	4810      	ldr	r0, [pc, #64]	@ (80049d0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004990:	f000 fbf3 	bl	800517a <Update_pwm>
		}
	}
}
 8004994:	bf00      	nop
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	200009f8 	.word	0x200009f8
 80049a0:	20000ec4 	.word	0x20000ec4
 80049a4:	20001054 	.word	0x20001054
 80049a8:	20000356 	.word	0x20000356
 80049ac:	200012d0 	.word	0x200012d0
 80049b0:	40240000 	.word	0x40240000
 80049b4:	20001524 	.word	0x20001524
 80049b8:	200012cc 	.word	0x200012cc
 80049bc:	20000e8a 	.word	0x20000e8a
 80049c0:	48000400 	.word	0x48000400
 80049c4:	20000e98 	.word	0x20000e98
 80049c8:	200012c8 	.word	0x200012c8
 80049cc:	48000800 	.word	0x48000800
 80049d0:	2000092c 	.word	0x2000092c

080049d4 <HAL_GPIO_EXTI_Callback>:
// GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	4603      	mov	r3, r0
 80049dc:	80fb      	strh	r3, [r7, #6]
	// Activate and Deactivate testing mode
	if(GPIO_Pin == GPIO_PIN_13){
 80049de:	88fb      	ldrh	r3, [r7, #6]
 80049e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049e4:	d161      	bne.n	8004aaa <HAL_GPIO_EXTI_Callback+0xd6>
		static uint8_t test = 0;
		if(test == 0){
 80049e6:	4b34      	ldr	r3, [pc, #208]	@ (8004ab8 <HAL_GPIO_EXTI_Callback+0xe4>)
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d12b      	bne.n	8004a46 <HAL_GPIO_EXTI_Callback+0x72>
			target_position = 10.0;
 80049ee:	4933      	ldr	r1, [pc, #204]	@ (8004abc <HAL_GPIO_EXTI_Callback+0xe8>)
 80049f0:	f04f 0200 	mov.w	r2, #0
 80049f4:	4b32      	ldr	r3, [pc, #200]	@ (8004ac0 <HAL_GPIO_EXTI_Callback+0xec>)
 80049f6:	e9c1 2300 	strd	r2, r3, [r1]
			initial_position = encoder.mm;
 80049fa:	4b32      	ldr	r3, [pc, #200]	@ (8004ac4 <HAL_GPIO_EXTI_Callback+0xf0>)
 80049fc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004a00:	4931      	ldr	r1, [pc, #196]	@ (8004ac8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8004a02:	e9c1 2300 	strd	r2, r3, [r1]
			evaScurveData.t = 0;
 8004a06:	4931      	ldr	r1, [pc, #196]	@ (8004acc <HAL_GPIO_EXTI_Callback+0xf8>)
 8004a08:	f04f 0200 	mov.w	r2, #0
 8004a0c:	f04f 0300 	mov.w	r3, #0
 8004a10:	e9c1 2306 	strd	r2, r3, [r1, #24]
			computeTrapezoidalData.t = 0.0;
 8004a14:	492e      	ldr	r1, [pc, #184]	@ (8004ad0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	f04f 0300 	mov.w	r3, #0
 8004a1e:	e9c1 2300 	strd	r2, r3, [r1]
			setpoint_pos = 0.0;
 8004a22:	492c      	ldr	r1, [pc, #176]	@ (8004ad4 <HAL_GPIO_EXTI_Callback+0x100>)
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	f04f 0300 	mov.w	r3, #0
 8004a2c:	e9c1 2300 	strd	r2, r3, [r1]
			setpoint_vel = 0.0;
 8004a30:	4929      	ldr	r1, [pc, #164]	@ (8004ad8 <HAL_GPIO_EXTI_Callback+0x104>)
 8004a32:	f04f 0200 	mov.w	r2, #0
 8004a36:	f04f 0300 	mov.w	r3, #0
 8004a3a:	e9c1 2300 	strd	r2, r3, [r1]
			test = 1;
 8004a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ab8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8004a40:	2201      	movs	r2, #1
 8004a42:	701a      	strb	r2, [r3, #0]
 8004a44:	e02e      	b.n	8004aa4 <HAL_GPIO_EXTI_Callback+0xd0>
//			testing = 1;
		}
		else if(test == 1){
 8004a46:	4b1c      	ldr	r3, [pc, #112]	@ (8004ab8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d12a      	bne.n	8004aa4 <HAL_GPIO_EXTI_Callback+0xd0>
			initial_position = encoder.mm;
 8004a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ac4 <HAL_GPIO_EXTI_Callback+0xf0>)
 8004a50:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004a54:	491c      	ldr	r1, [pc, #112]	@ (8004ac8 <HAL_GPIO_EXTI_Callback+0xf4>)
 8004a56:	e9c1 2300 	strd	r2, r3, [r1]
			target_position = 10.0;
 8004a5a:	4918      	ldr	r1, [pc, #96]	@ (8004abc <HAL_GPIO_EXTI_Callback+0xe8>)
 8004a5c:	f04f 0200 	mov.w	r2, #0
 8004a60:	4b17      	ldr	r3, [pc, #92]	@ (8004ac0 <HAL_GPIO_EXTI_Callback+0xec>)
 8004a62:	e9c1 2300 	strd	r2, r3, [r1]
			evaScurveData.t = 0.0;
 8004a66:	4919      	ldr	r1, [pc, #100]	@ (8004acc <HAL_GPIO_EXTI_Callback+0xf8>)
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	e9c1 2306 	strd	r2, r3, [r1, #24]
			computeTrapezoidalData.t = 0.0;
 8004a74:	4916      	ldr	r1, [pc, #88]	@ (8004ad0 <HAL_GPIO_EXTI_Callback+0xfc>)
 8004a76:	f04f 0200 	mov.w	r2, #0
 8004a7a:	f04f 0300 	mov.w	r3, #0
 8004a7e:	e9c1 2300 	strd	r2, r3, [r1]
			setpoint_pos = 0.0;
 8004a82:	4914      	ldr	r1, [pc, #80]	@ (8004ad4 <HAL_GPIO_EXTI_Callback+0x100>)
 8004a84:	f04f 0200 	mov.w	r2, #0
 8004a88:	f04f 0300 	mov.w	r3, #0
 8004a8c:	e9c1 2300 	strd	r2, r3, [r1]
			setpoint_vel = 0.0;
 8004a90:	4911      	ldr	r1, [pc, #68]	@ (8004ad8 <HAL_GPIO_EXTI_Callback+0x104>)
 8004a92:	f04f 0200 	mov.w	r2, #0
 8004a96:	f04f 0300 	mov.w	r3, #0
 8004a9a:	e9c1 2300 	strd	r2, r3, [r1]
			test = 0;
 8004a9e:	4b06      	ldr	r3, [pc, #24]	@ (8004ab8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	701a      	strb	r2, [r3, #0]
//			testing = 0;
		}
		mode = RUNNING;
 8004aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8004adc <HAL_GPIO_EXTI_Callback+0x108>)
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	801a      	strh	r2, [r3, #0]

//			}
//		}
//		else{return;}
//	}
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	20001628 	.word	0x20001628
 8004abc:	200015c0 	.word	0x200015c0
 8004ac0:	40240000 	.word	0x40240000
 8004ac4:	200012d0 	.word	0x200012d0
 8004ac8:	200015b8 	.word	0x200015b8
 8004acc:	20001528 	.word	0x20001528
 8004ad0:	20001598 	.word	0x20001598
 8004ad4:	200015c8 	.word	0x200015c8
 8004ad8:	200015d0 	.word	0x200015d0
 8004adc:	20000e8a 	.word	0x20000e8a

08004ae0 <Update_velocity_control>:
// Torque control update
void Update_torque_control(double s){

}
// Velocity control update
void Update_velocity_control(double s){
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	ed87 0b00 	vstr	d0, [r7]
//	}
//	else{
//		v_e = s - Get_mmps(&encoder);
//		v_output = (int32_t)floor((Update_pid(&v_pid, v_e, 24.0, 24.0)));
//	}
	v_e = s - Get_mmps(&encoder);
 8004aea:	4819      	ldr	r0, [pc, #100]	@ (8004b50 <Update_velocity_control+0x70>)
 8004aec:	f000 fdfd 	bl	80056ea <Get_mmps>
 8004af0:	ec53 2b10 	vmov	r2, r3, d0
 8004af4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004af8:	f7fb fb92 	bl	8000220 <__aeabi_dsub>
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	4914      	ldr	r1, [pc, #80]	@ (8004b54 <Update_velocity_control+0x74>)
 8004b02:	e9c1 2300 	strd	r2, r3, [r1]
	v_output = floor((Update_pid(&v_pid, v_e, 24.0, 24.0)));
 8004b06:	4b13      	ldr	r3, [pc, #76]	@ (8004b54 <Update_velocity_control+0x74>)
 8004b08:	ed93 7b00 	vldr	d7, [r3]
 8004b0c:	eef3 1a08 	vmov.f32	s3, #56	@ 0x41c00000  24.0
 8004b10:	eeb3 1a08 	vmov.f32	s2, #56	@ 0x41c00000  24.0
 8004b14:	eeb0 0a47 	vmov.f32	s0, s14
 8004b18:	eef0 0a67 	vmov.f32	s1, s15
 8004b1c:	480e      	ldr	r0, [pc, #56]	@ (8004b58 <Update_velocity_control+0x78>)
 8004b1e:	f000 f9ec 	bl	8004efa <Update_pid>
 8004b22:	eeb0 7a40 	vmov.f32	s14, s0
 8004b26:	eef0 7a60 	vmov.f32	s15, s1
 8004b2a:	eeb0 0a47 	vmov.f32	s0, s14
 8004b2e:	eef0 0a67 	vmov.f32	s1, s15
 8004b32:	f009 fadd 	bl	800e0f0 <floor>
 8004b36:	ec53 2b10 	vmov	r2, r3, d0
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	f7fc f81f 	bl	8000b80 <__aeabi_d2f>
 8004b42:	4603      	mov	r3, r0
 8004b44:	4a05      	ldr	r2, [pc, #20]	@ (8004b5c <Update_velocity_control+0x7c>)
 8004b46:	6013      	str	r3, [r2, #0]
//	if(v_e >= -0.2 && v_e <= 0.2){
//		v_output = 2.0;
//	}
//	else{
//	}
}
 8004b48:	bf00      	nop
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	200012d0 	.word	0x200012d0
 8004b54:	200013b0 	.word	0x200013b0
 8004b58:	20001368 	.word	0x20001368
 8004b5c:	200013b8 	.word	0x200013b8

08004b60 <Update_position_control>:
// Position control update
void Update_position_control(double s){
 8004b60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004b64:	b082      	sub	sp, #8
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	ed87 0b00 	vstr	d0, [r7]
	//input is pulse unit
	p_e = s - Get_mm(&encoder);
 8004b6c:	484c      	ldr	r0, [pc, #304]	@ (8004ca0 <Update_position_control+0x140>)
 8004b6e:	f000 fdce 	bl	800570e <Get_mm>
 8004b72:	ec53 2b10 	vmov	r2, r3, d0
 8004b76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b7a:	f7fb fb51 	bl	8000220 <__aeabi_dsub>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	460b      	mov	r3, r1
 8004b82:	4948      	ldr	r1, [pc, #288]	@ (8004ca4 <Update_position_control+0x144>)
 8004b84:	e9c1 2300 	strd	r2, r3, [r1]
	if(p_e >= -0.1 && p_e <= 0.1){
 8004b88:	4b46      	ldr	r3, [pc, #280]	@ (8004ca4 <Update_position_control+0x144>)
 8004b8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b8e:	a340      	add	r3, pc, #256	@ (adr r3, 8004c90 <Update_position_control+0x130>)
 8004b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b94:	f7fb ff82 	bl	8000a9c <__aeabi_dcmpge>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d059      	beq.n	8004c52 <Update_position_control+0xf2>
 8004b9e:	4b41      	ldr	r3, [pc, #260]	@ (8004ca4 <Update_position_control+0x144>)
 8004ba0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ba4:	a33c      	add	r3, pc, #240	@ (adr r3, 8004c98 <Update_position_control+0x138>)
 8004ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004baa:	f7fb ff6d 	bl	8000a88 <__aeabi_dcmple>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d04e      	beq.n	8004c52 <Update_position_control+0xf2>
		static uint64_t timestamp = 0;
		static uint8_t first = 1;
		if(first == 1){
 8004bb4:	4b3c      	ldr	r3, [pc, #240]	@ (8004ca8 <Update_position_control+0x148>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d10c      	bne.n	8004bd6 <Update_position_control+0x76>
			timestamp = HAL_GetTick() + 100;
 8004bbc:	f001 fc02 	bl	80063c4 <HAL_GetTick>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	3364      	adds	r3, #100	@ 0x64
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	4698      	mov	r8, r3
 8004bc8:	4691      	mov	r9, r2
 8004bca:	4b38      	ldr	r3, [pc, #224]	@ (8004cac <Update_position_control+0x14c>)
 8004bcc:	e9c3 8900 	strd	r8, r9, [r3]
			first = 0;
 8004bd0:	4b35      	ldr	r3, [pc, #212]	@ (8004ca8 <Update_position_control+0x148>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GetTick() > timestamp){
 8004bd6:	f001 fbf5 	bl	80063c4 <HAL_GetTick>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2200      	movs	r2, #0
 8004bde:	461c      	mov	r4, r3
 8004be0:	4615      	mov	r5, r2
 8004be2:	4b32      	ldr	r3, [pc, #200]	@ (8004cac <Update_position_control+0x14c>)
 8004be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be8:	42a2      	cmp	r2, r4
 8004bea:	41ab      	sbcs	r3, r5
 8004bec:	d24a      	bcs.n	8004c84 <Update_position_control+0x124>
			if(p_e >= -0.1 && p_e <= 0.1){
 8004bee:	4b2d      	ldr	r3, [pc, #180]	@ (8004ca4 <Update_position_control+0x144>)
 8004bf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004bf4:	a326      	add	r3, pc, #152	@ (adr r3, 8004c90 <Update_position_control+0x130>)
 8004bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfa:	f7fb ff4f 	bl	8000a9c <__aeabi_dcmpge>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d022      	beq.n	8004c4a <Update_position_control+0xea>
 8004c04:	4b27      	ldr	r3, [pc, #156]	@ (8004ca4 <Update_position_control+0x144>)
 8004c06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c0a:	a323      	add	r3, pc, #140	@ (adr r3, 8004c98 <Update_position_control+0x138>)
 8004c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c10:	f7fb ff3a 	bl	8000a88 <__aeabi_dcmple>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d017      	beq.n	8004c4a <Update_position_control+0xea>
				p_pid.y_n = 0.0;
 8004c1a:	4925      	ldr	r1, [pc, #148]	@ (8004cb0 <Update_position_control+0x150>)
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	e9c1 2306 	strd	r2, r3, [r1, #24]
				p_pid.y_n_1 = 0.0;
 8004c28:	4921      	ldr	r1, [pc, #132]	@ (8004cb0 <Update_position_control+0x150>)
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	f04f 0300 	mov.w	r3, #0
 8004c32:	e9c1 2308 	strd	r2, r3, [r1, #32]
				p_output = 0.0;
 8004c36:	491f      	ldr	r1, [pc, #124]	@ (8004cb4 <Update_position_control+0x154>)
 8004c38:	f04f 0200 	mov.w	r2, #0
 8004c3c:	f04f 0300 	mov.w	r3, #0
 8004c40:	e9c1 2300 	strd	r2, r3, [r1]
				is_finish_position = 1;
 8004c44:	4b1c      	ldr	r3, [pc, #112]	@ (8004cb8 <Update_position_control+0x158>)
 8004c46:	2201      	movs	r2, #1
 8004c48:	701a      	strb	r2, [r3, #0]
			}
			first = 1;
 8004c4a:	4b17      	ldr	r3, [pc, #92]	@ (8004ca8 <Update_position_control+0x148>)
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	701a      	strb	r2, [r3, #0]
	if(p_e >= -0.1 && p_e <= 0.1){
 8004c50:	e018      	b.n	8004c84 <Update_position_control+0x124>
		}
	}
	else{
		p_output = Update_pid(&p_pid, p_e, 650.0, 650.0);
 8004c52:	4b14      	ldr	r3, [pc, #80]	@ (8004ca4 <Update_position_control+0x144>)
 8004c54:	ed93 7b00 	vldr	d7, [r3]
 8004c58:	eddf 1a18 	vldr	s3, [pc, #96]	@ 8004cbc <Update_position_control+0x15c>
 8004c5c:	ed9f 1a17 	vldr	s2, [pc, #92]	@ 8004cbc <Update_position_control+0x15c>
 8004c60:	eeb0 0a47 	vmov.f32	s0, s14
 8004c64:	eef0 0a67 	vmov.f32	s1, s15
 8004c68:	4811      	ldr	r0, [pc, #68]	@ (8004cb0 <Update_position_control+0x150>)
 8004c6a:	f000 f946 	bl	8004efa <Update_pid>
 8004c6e:	eeb0 7a40 	vmov.f32	s14, s0
 8004c72:	eef0 7a60 	vmov.f32	s15, s1
 8004c76:	4b0f      	ldr	r3, [pc, #60]	@ (8004cb4 <Update_position_control+0x154>)
 8004c78:	ed83 7b00 	vstr	d7, [r3]
		is_finish_position = 0;
 8004c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8004cb8 <Update_position_control+0x158>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	701a      	strb	r2, [r3, #0]
	}
}
 8004c82:	e000      	b.n	8004c86 <Update_position_control+0x126>
	if(p_e >= -0.1 && p_e <= 0.1){
 8004c84:	bf00      	nop
}
 8004c86:	bf00      	nop
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004c90:	9999999a 	.word	0x9999999a
 8004c94:	bfb99999 	.word	0xbfb99999
 8004c98:	9999999a 	.word	0x9999999a
 8004c9c:	3fb99999 	.word	0x3fb99999
 8004ca0:	200012d0 	.word	0x200012d0
 8004ca4:	20001408 	.word	0x20001408
 8004ca8:	200002ac 	.word	0x200002ac
 8004cac:	20001630 	.word	0x20001630
 8004cb0:	200013c0 	.word	0x200013c0
 8004cb4:	20001410 	.word	0x20001410
 8004cb8:	20001418 	.word	0x20001418
 8004cbc:	44228000 	.word	0x44228000

08004cc0 <Reset_main_variable>:
// Reset variable function
void Reset_main_variable(){
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
	// Reset point reset
	setpoint = 0.0;
 8004cc4:	494b      	ldr	r1, [pc, #300]	@ (8004df4 <Reset_main_variable+0x134>)
 8004cc6:	f04f 0200 	mov.w	r2, #0
 8004cca:	f04f 0300 	mov.w	r3, #0
 8004cce:	e9c1 2300 	strd	r2, r3, [r1]
	x_axis_position = 0.0;
 8004cd2:	4b49      	ldr	r3, [pc, #292]	@ (8004df8 <Reset_main_variable+0x138>)
 8004cd4:	f04f 0200 	mov.w	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]
	// Reset PWM signal
	pwm_signal = 0;
 8004cda:	4b48      	ldr	r3, [pc, #288]	@ (8004dfc <Reset_main_variable+0x13c>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]
	// Encoder compute enable
	is_update_encoder = 0;
 8004ce0:	4b47      	ldr	r3, [pc, #284]	@ (8004e00 <Reset_main_variable+0x140>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	701a      	strb	r2, [r3, #0]
	// Reset trajectory
	initial_position = 0.0;
 8004ce6:	4947      	ldr	r1, [pc, #284]	@ (8004e04 <Reset_main_variable+0x144>)
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	f04f 0300 	mov.w	r3, #0
 8004cf0:	e9c1 2300 	strd	r2, r3, [r1]
	target_position = 0.0;
 8004cf4:	4944      	ldr	r1, [pc, #272]	@ (8004e08 <Reset_main_variable+0x148>)
 8004cf6:	f04f 0200 	mov.w	r2, #0
 8004cfa:	f04f 0300 	mov.w	r3, #0
 8004cfe:	e9c1 2300 	strd	r2, r3, [r1]
	evaScurveData.setposition = 0.0;
 8004d02:	4942      	ldr	r1, [pc, #264]	@ (8004e0c <Reset_main_variable+0x14c>)
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	e9c1 2300 	strd	r2, r3, [r1]
	evaScurveData.setvelocity = 0.0;
 8004d10:	493e      	ldr	r1, [pc, #248]	@ (8004e0c <Reset_main_variable+0x14c>)
 8004d12:	f04f 0200 	mov.w	r2, #0
 8004d16:	f04f 0300 	mov.w	r3, #0
 8004d1a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	evaScurveData.setacceleration = 0.0;
 8004d1e:	493b      	ldr	r1, [pc, #236]	@ (8004e0c <Reset_main_variable+0x14c>)
 8004d20:	f04f 0200 	mov.w	r2, #0
 8004d24:	f04f 0300 	mov.w	r3, #0
 8004d28:	e9c1 2304 	strd	r2, r3, [r1, #16]
	evaScurveData.t = 0.0;
 8004d2c:	4937      	ldr	r1, [pc, #220]	@ (8004e0c <Reset_main_variable+0x14c>)
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	f04f 0300 	mov.w	r3, #0
 8004d36:	e9c1 2306 	strd	r2, r3, [r1, #24]
	computeTrapezoidalData.set_pos = 0.0;
 8004d3a:	4935      	ldr	r1, [pc, #212]	@ (8004e10 <Reset_main_variable+0x150>)
 8004d3c:	f04f 0200 	mov.w	r2, #0
 8004d40:	f04f 0300 	mov.w	r3, #0
 8004d44:	e9c1 2306 	strd	r2, r3, [r1, #24]
	computeTrapezoidalData.set_vel = 0.0;
 8004d48:	4931      	ldr	r1, [pc, #196]	@ (8004e10 <Reset_main_variable+0x150>)
 8004d4a:	f04f 0200 	mov.w	r2, #0
 8004d4e:	f04f 0300 	mov.w	r3, #0
 8004d52:	e9c1 2304 	strd	r2, r3, [r1, #16]
	computeTrapezoidalData.t = 0.0;
 8004d56:	492e      	ldr	r1, [pc, #184]	@ (8004e10 <Reset_main_variable+0x150>)
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	e9c1 2300 	strd	r2, r3, [r1]
	// Reset homing data
	Reset_homing(&home);
 8004d64:	482b      	ldr	r0, [pc, #172]	@ (8004e14 <Reset_main_variable+0x154>)
 8004d66:	f000 ff35 	bl	8005bd4 <Reset_homing>
	// Reset state enable
	pick_index = 0;
 8004d6a:	4b2b      	ldr	r3, [pc, #172]	@ (8004e18 <Reset_main_variable+0x158>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	701a      	strb	r2, [r3, #0]
	place_index = 0;
 8004d70:	4b2a      	ldr	r3, [pc, #168]	@ (8004e1c <Reset_main_variable+0x15c>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	701a      	strb	r2, [r3, #0]
	state = 0;
 8004d76:	4b2a      	ldr	r3, [pc, #168]	@ (8004e20 <Reset_main_variable+0x160>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	801a      	strh	r2, [r3, #0]
	ready = 0;
 8004d7c:	4b29      	ldr	r3, [pc, #164]	@ (8004e24 <Reset_main_variable+0x164>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	701a      	strb	r2, [r3, #0]
	test = 0;
 8004d82:	4929      	ldr	r1, [pc, #164]	@ (8004e28 <Reset_main_variable+0x168>)
 8004d84:	f04f 0200 	mov.w	r2, #0
 8004d88:	f04f 0300 	mov.w	r3, #0
 8004d8c:	e9c1 2300 	strd	r2, r3, [r1]
	// Reset MODBUS
	registerFrame[0x10].U16 = 0;
 8004d90:	4b26      	ldr	r3, [pc, #152]	@ (8004e2c <Reset_main_variable+0x16c>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	841a      	strh	r2, [r3, #32]
	registerFrame[0x01].U16 = 0;
 8004d96:	4b25      	ldr	r3, [pc, #148]	@ (8004e2c <Reset_main_variable+0x16c>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	805a      	strh	r2, [r3, #2]
	// Reset encoder
	Reset_qei(&encoder, &htim4);
 8004d9c:	4924      	ldr	r1, [pc, #144]	@ (8004e30 <Reset_main_variable+0x170>)
 8004d9e:	4825      	ldr	r0, [pc, #148]	@ (8004e34 <Reset_main_variable+0x174>)
 8004da0:	f000 fc1c 	bl	80055dc <Reset_qei>
	// Reset lowpass
	Reset_lowpass(&lowpass);
 8004da4:	4824      	ldr	r0, [pc, #144]	@ (8004e38 <Reset_main_variable+0x178>)
 8004da6:	f7fe f897 	bl	8002ed8 <Reset_lowpass>
	// Reset PID
	is_finish_position = 0;
 8004daa:	4b24      	ldr	r3, [pc, #144]	@ (8004e3c <Reset_main_variable+0x17c>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	701a      	strb	r2, [r3, #0]
	p_e = 0.0;
 8004db0:	4923      	ldr	r1, [pc, #140]	@ (8004e40 <Reset_main_variable+0x180>)
 8004db2:	f04f 0200 	mov.w	r2, #0
 8004db6:	f04f 0300 	mov.w	r3, #0
 8004dba:	e9c1 2300 	strd	r2, r3, [r1]
	p_output = 0.0;
 8004dbe:	4921      	ldr	r1, [pc, #132]	@ (8004e44 <Reset_main_variable+0x184>)
 8004dc0:	f04f 0200 	mov.w	r2, #0
 8004dc4:	f04f 0300 	mov.w	r3, #0
 8004dc8:	e9c1 2300 	strd	r2, r3, [r1]
	v_e = 0.0;
 8004dcc:	491e      	ldr	r1, [pc, #120]	@ (8004e48 <Reset_main_variable+0x188>)
 8004dce:	f04f 0200 	mov.w	r2, #0
 8004dd2:	f04f 0300 	mov.w	r3, #0
 8004dd6:	e9c1 2300 	strd	r2, r3, [r1]
	v_output = 0;
 8004dda:	4b1c      	ldr	r3, [pc, #112]	@ (8004e4c <Reset_main_variable+0x18c>)
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	601a      	str	r2, [r3, #0]
	Reset_pid(&p_pid);
 8004de2:	481b      	ldr	r0, [pc, #108]	@ (8004e50 <Reset_main_variable+0x190>)
 8004de4:	f000 f99c 	bl	8005120 <Reset_pid>
	Reset_pid(&v_pid);
 8004de8:	481a      	ldr	r0, [pc, #104]	@ (8004e54 <Reset_main_variable+0x194>)
 8004dea:	f000 f999 	bl	8005120 <Reset_pid>
}
 8004dee:	bf00      	nop
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	20000e80 	.word	0x20000e80
 8004df8:	20001524 	.word	0x20001524
 8004dfc:	200012c8 	.word	0x200012c8
 8004e00:	200012cc 	.word	0x200012cc
 8004e04:	200015b8 	.word	0x200015b8
 8004e08:	200015c0 	.word	0x200015c0
 8004e0c:	20001528 	.word	0x20001528
 8004e10:	20001598 	.word	0x20001598
 8004e14:	20000e98 	.word	0x20000e98
 8004e18:	20000ec0 	.word	0x20000ec0
 8004e1c:	20000ec1 	.word	0x20000ec1
 8004e20:	20000356 	.word	0x20000356
 8004e24:	20000e8c 	.word	0x20000e8c
 8004e28:	20000e48 	.word	0x20000e48
 8004e2c:	20000ec4 	.word	0x20000ec4
 8004e30:	20000ac4 	.word	0x20000ac4
 8004e34:	200012d0 	.word	0x200012d0
 8004e38:	20001360 	.word	0x20001360
 8004e3c:	20001418 	.word	0x20001418
 8004e40:	20001408 	.word	0x20001408
 8004e44:	20001410 	.word	0x20001410
 8004e48:	200013b0 	.word	0x200013b0
 8004e4c:	200013b8 	.word	0x200013b8
 8004e50:	200013c0 	.word	0x200013c0
 8004e54:	20001368 	.word	0x20001368

08004e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e5c:	b672      	cpsid	i
}
 8004e5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004e60:	bf00      	nop
 8004e62:	e7fd      	b.n	8004e60 <Error_Handler+0x8>

08004e64 <PID_init>:
 *  Created on: Apr 26, 2024
 *      Author: naker
 */
#include "pid.h"

void PID_init(PID* pid, float _kp_u,  float _ki_u, float _kd_u,float _kp_d,  float _ki_d, float _kd_d){
 8004e64:	b480      	push	{r7}
 8004e66:	b089      	sub	sp, #36	@ 0x24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	61f8      	str	r0, [r7, #28]
 8004e6c:	ed87 0a06 	vstr	s0, [r7, #24]
 8004e70:	edc7 0a05 	vstr	s1, [r7, #20]
 8004e74:	ed87 1a04 	vstr	s2, [r7, #16]
 8004e78:	edc7 1a03 	vstr	s3, [r7, #12]
 8004e7c:	ed87 2a02 	vstr	s4, [r7, #8]
 8004e80:	edc7 2a01 	vstr	s5, [r7, #4]
	pid -> kp_up = _kp_u;
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	601a      	str	r2, [r3, #0]
	pid -> ki_up = _ki_u;
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	605a      	str	r2, [r3, #4]
	pid -> kd_up = _kd_u;
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	609a      	str	r2, [r3, #8]
	pid -> kp_down = _kp_d;
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	60da      	str	r2, [r3, #12]
	pid -> ki_down = _ki_d;
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	611a      	str	r2, [r3, #16]
	pid -> kd_down = _kd_d;
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	615a      	str	r2, [r3, #20]
	pid -> y_n = 0.0;
 8004ea8:	69f9      	ldr	r1, [r7, #28]
 8004eaa:	f04f 0200 	mov.w	r2, #0
 8004eae:	f04f 0300 	mov.w	r3, #0
 8004eb2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pid -> y_n_1 = 0.0;
 8004eb6:	69f9      	ldr	r1, [r7, #28]
 8004eb8:	f04f 0200 	mov.w	r2, #0
 8004ebc:	f04f 0300 	mov.w	r3, #0
 8004ec0:	e9c1 2308 	strd	r2, r3, [r1, #32]
	pid -> e_n = 0.0;
 8004ec4:	69f9      	ldr	r1, [r7, #28]
 8004ec6:	f04f 0200 	mov.w	r2, #0
 8004eca:	f04f 0300 	mov.w	r3, #0
 8004ece:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	pid -> e_n_1 = 0.0;
 8004ed2:	69f9      	ldr	r1, [r7, #28]
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	pid -> e_n_2 = 0.0;
 8004ee0:	69f9      	ldr	r1, [r7, #28]
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	f04f 0300 	mov.w	r3, #0
 8004eea:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
}
 8004eee:	bf00      	nop
 8004ef0:	3724      	adds	r7, #36	@ 0x24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <Update_pid>:
double Update_pid(PID *pid, double error, float pid_sat, float plant_sat) {
 8004efa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004efe:	b089      	sub	sp, #36	@ 0x24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6178      	str	r0, [r7, #20]
 8004f04:	ed87 0b02 	vstr	d0, [r7, #8]
 8004f08:	ed87 1a04 	vstr	s2, [r7, #16]
 8004f0c:	edc7 1a01 	vstr	s3, [r7, #4]

	float e_n = error; // error[n]
 8004f10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f14:	f7fb fe34 	bl	8000b80 <__aeabi_d2f>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	61fb      	str	r3, [r7, #28]

	// For upcase
	if(!(((pid -> y_n >= pid_sat) && e_n > 0) || ((pid -> y_n <= -(pid_sat)) && e_n < 0 ))){
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004f22:	6938      	ldr	r0, [r7, #16]
 8004f24:	f7fb fadc 	bl	80004e0 <__aeabi_f2d>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	460e      	mov	r6, r1
 8004f30:	4620      	mov	r0, r4
 8004f32:	4629      	mov	r1, r5
 8004f34:	f7fb fdb2 	bl	8000a9c <__aeabi_dcmpge>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <Update_pid+0x48>
 8004f3e:	2300      	movs	r3, #0
 8004f40:	461e      	mov	r6, r3
 8004f42:	b2f3      	uxtb	r3, r6
 8004f44:	f083 0301 	eor.w	r3, r3, #1
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10e      	bne.n	8004f6c <Update_pid+0x72>
 8004f4e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004f52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f5a:	bfcc      	ite	gt
 8004f5c:	2301      	movgt	r3, #1
 8004f5e:	2300      	movle	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	f083 0301 	eor.w	r3, r3, #1
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d07f      	beq.n	800506c <Update_pid+0x172>
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004f72:	edd7 7a04 	vldr	s15, [r7, #16]
 8004f76:	eef1 7a67 	vneg.f32	s15, s15
 8004f7a:	ee17 3a90 	vmov	r3, s15
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fb faae 	bl	80004e0 <__aeabi_f2d>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	2101      	movs	r1, #1
 8004f8a:	460e      	mov	r6, r1
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	4629      	mov	r1, r5
 8004f90:	f7fb fd7a 	bl	8000a88 <__aeabi_dcmple>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <Update_pid+0xa4>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	461e      	mov	r6, r3
 8004f9e:	b2f3      	uxtb	r3, r6
 8004fa0:	f083 0301 	eor.w	r3, r3, #1
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10e      	bne.n	8004fc8 <Update_pid+0xce>
 8004faa:	edd7 7a07 	vldr	s15, [r7, #28]
 8004fae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb6:	bf4c      	ite	mi
 8004fb8:	2301      	movmi	r3, #1
 8004fba:	2300      	movpl	r3, #0
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	f083 0301 	eor.w	r3, r3, #1
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d051      	beq.n	800506c <Update_pid+0x172>
		pid -> y_n += ((pid -> kp_up + pid -> ki_up + pid -> kd_up) * e_n)
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	ed93 7a00 	vldr	s14, [r3]
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	edd3 7a01 	vldr	s15, [r3, #4]
 8004fda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	edd3 7a02 	vldr	s15, [r3, #8]
 8004fe4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004fe8:	edd7 7a07 	vldr	s15, [r7, #28]
 8004fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ff0:	ee17 0a90 	vmov	r0, s15
 8004ff4:	f7fb fa74 	bl	80004e0 <__aeabi_f2d>
 8004ff8:	4680      	mov	r8, r0
 8004ffa:	4689      	mov	r9, r1
						- ((pid -> kp_up + (2 * pid -> kd_up)) * pid -> e_n_1)
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	ed93 7a00 	vldr	s14, [r3]
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	edd3 7a02 	vldr	s15, [r3, #8]
 8005008:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800500c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005010:	ee17 0a90 	vmov	r0, s15
 8005014:	f7fb fa64 	bl	80004e0 <__aeabi_f2d>
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800501e:	f7fb fab7 	bl	8000590 <__aeabi_dmul>
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	4640      	mov	r0, r8
 8005028:	4649      	mov	r1, r9
 800502a:	f7fb f8f9 	bl	8000220 <__aeabi_dsub>
 800502e:	4602      	mov	r2, r0
 8005030:	460b      	mov	r3, r1
 8005032:	4690      	mov	r8, r2
 8005034:	4699      	mov	r9, r3
						+ (pid -> kd_up * pid -> e_n_2);
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	4618      	mov	r0, r3
 800503c:	f7fb fa50 	bl	80004e0 <__aeabi_f2d>
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005046:	f7fb faa3 	bl	8000590 <__aeabi_dmul>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	4640      	mov	r0, r8
 8005050:	4649      	mov	r1, r9
 8005052:	f7fb f8e7 	bl	8000224 <__adddf3>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
		pid -> y_n += ((pid -> kp_up + pid -> ki_up + pid -> kd_up) * e_n)
 800505a:	4620      	mov	r0, r4
 800505c:	4629      	mov	r1, r5
 800505e:	f7fb f8e1 	bl	8000224 <__adddf3>
 8005062:	4602      	mov	r2, r0
 8005064:	460b      	mov	r3, r1
 8005066:	6979      	ldr	r1, [r7, #20]
 8005068:	e9c1 2306 	strd	r2, r3, [r1, #24]
//							- ((pid -> kp_down + (2 * pid -> kd_down)) * pid -> e_n_1)
//							+ (pid -> kd_down * pid -> e_n_2);
//		}
//	}

	if(pid -> y_n >= pid_sat){
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005072:	6938      	ldr	r0, [r7, #16]
 8005074:	f7fb fa34 	bl	80004e0 <__aeabi_f2d>
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
 800507c:	4620      	mov	r0, r4
 800507e:	4629      	mov	r1, r5
 8005080:	f7fb fd0c 	bl	8000a9c <__aeabi_dcmpge>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d008      	beq.n	800509c <Update_pid+0x1a2>
		pid -> y_n = pid_sat;
 800508a:	6938      	ldr	r0, [r7, #16]
 800508c:	f7fb fa28 	bl	80004e0 <__aeabi_f2d>
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	6979      	ldr	r1, [r7, #20]
 8005096:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800509a:	e022      	b.n	80050e2 <Update_pid+0x1e8>

	}else if(pid -> y_n < -pid_sat){
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80050a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80050a6:	eef1 7a67 	vneg.f32	s15, s15
 80050aa:	ee17 3a90 	vmov	r3, s15
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fb fa16 	bl	80004e0 <__aeabi_f2d>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	4620      	mov	r0, r4
 80050ba:	4629      	mov	r1, r5
 80050bc:	f7fb fcda 	bl	8000a74 <__aeabi_dcmplt>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00d      	beq.n	80050e2 <Update_pid+0x1e8>
		pid -> y_n = -pid_sat;
 80050c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80050ca:	eef1 7a67 	vneg.f32	s15, s15
 80050ce:	ee17 3a90 	vmov	r3, s15
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fb fa04 	bl	80004e0 <__aeabi_f2d>
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	6979      	ldr	r1, [r7, #20]
 80050de:	e9c1 2306 	strd	r2, r3, [r1, #24]
	}

	pid -> e_n_2 = pid -> e_n_1;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80050e8:	6979      	ldr	r1, [r7, #20]
 80050ea:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	pid -> e_n_1 = pid -> e_n;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80050f4:	6979      	ldr	r1, [r7, #20]
 80050f6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	pid -> y_n_1 = pid -> y_n;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005100:	6979      	ldr	r1, [r7, #20]
 8005102:	e9c1 2308 	strd	r2, r3, [r1, #32]

	return pid -> y_n;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800510c:	ec43 2b17 	vmov	d7, r2, r3
}
 8005110:	eeb0 0a47 	vmov.f32	s0, s14
 8005114:	eef0 0a67 	vmov.f32	s1, s15
 8005118:	3724      	adds	r7, #36	@ 0x24
 800511a:	46bd      	mov	sp, r7
 800511c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005120 <Reset_pid>:
void Reset_pid(PID* pid){
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
	pid -> y_n = 0.0;
 8005128:	6879      	ldr	r1, [r7, #4]
 800512a:	f04f 0200 	mov.w	r2, #0
 800512e:	f04f 0300 	mov.w	r3, #0
 8005132:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pid -> y_n_1 = 0.0;
 8005136:	6879      	ldr	r1, [r7, #4]
 8005138:	f04f 0200 	mov.w	r2, #0
 800513c:	f04f 0300 	mov.w	r3, #0
 8005140:	e9c1 2308 	strd	r2, r3, [r1, #32]
	pid -> e_n = 0.0;
 8005144:	6879      	ldr	r1, [r7, #4]
 8005146:	f04f 0200 	mov.w	r2, #0
 800514a:	f04f 0300 	mov.w	r3, #0
 800514e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	pid -> e_n_1 = 0.0;
 8005152:	6879      	ldr	r1, [r7, #4]
 8005154:	f04f 0200 	mov.w	r2, #0
 8005158:	f04f 0300 	mov.w	r3, #0
 800515c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	pid -> e_n_2 = 0.0;
 8005160:	6879      	ldr	r1, [r7, #4]
 8005162:	f04f 0200 	mov.w	r2, #0
 8005166:	f04f 0300 	mov.w	r3, #0
 800516a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <Update_pwm>:
 *      Author: naker
 */

#include "pwm.h"

void Update_pwm(TIM_HandleTypeDef* htim, uint16_t htim_channel,GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, int32_t pwm_signal) {
 800517a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800517e:	b08b      	sub	sp, #44	@ 0x2c
 8005180:	af00      	add	r7, sp, #0
 8005182:	6278      	str	r0, [r7, #36]	@ 0x24
 8005184:	61fa      	str	r2, [r7, #28]
 8005186:	461a      	mov	r2, r3
 8005188:	460b      	mov	r3, r1
 800518a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800518c:	4613      	mov	r3, r2
 800518e:	843b      	strh	r3, [r7, #32]
	__HAL_TIM_SET_COMPARE(htim, htim_channel, fabs(pwm_signal));
 8005190:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005192:	2b00      	cmp	r3, #0
 8005194:	d111      	bne.n	80051ba <Update_pwm+0x40>
 8005196:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8005198:	f7fb f990 	bl	80004bc <__aeabi_i2d>
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	613a      	str	r2, [r7, #16]
 80051a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80051a6:	617b      	str	r3, [r7, #20]
 80051a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051aa:	681c      	ldr	r4, [r3, #0]
 80051ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80051b0:	f7fb fcc6 	bl	8000b40 <__aeabi_d2uiz>
 80051b4:	4603      	mov	r3, r0
 80051b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80051b8:	e061      	b.n	800527e <Update_pwm+0x104>
 80051ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80051bc:	2b04      	cmp	r3, #4
 80051be:	d111      	bne.n	80051e4 <Update_pwm+0x6a>
 80051c0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80051c2:	f7fb f97b 	bl	80004bc <__aeabi_i2d>
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	60ba      	str	r2, [r7, #8]
 80051cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80051d0:	60fb      	str	r3, [r7, #12]
 80051d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d4:	681c      	ldr	r4, [r3, #0]
 80051d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051da:	f7fb fcb1 	bl	8000b40 <__aeabi_d2uiz>
 80051de:	4603      	mov	r3, r0
 80051e0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80051e2:	e04c      	b.n	800527e <Update_pwm+0x104>
 80051e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80051e6:	2b08      	cmp	r3, #8
 80051e8:	d111      	bne.n	800520e <Update_pwm+0x94>
 80051ea:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80051ec:	f7fb f966 	bl	80004bc <__aeabi_i2d>
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	603a      	str	r2, [r7, #0]
 80051f6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80051fa:	607b      	str	r3, [r7, #4]
 80051fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fe:	681c      	ldr	r4, [r3, #0]
 8005200:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005204:	f7fb fc9c 	bl	8000b40 <__aeabi_d2uiz>
 8005208:	4603      	mov	r3, r0
 800520a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800520c:	e037      	b.n	800527e <Update_pwm+0x104>
 800520e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005210:	2b0c      	cmp	r3, #12
 8005212:	d110      	bne.n	8005236 <Update_pwm+0xbc>
 8005214:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8005216:	f7fb f951 	bl	80004bc <__aeabi_i2d>
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	4615      	mov	r5, r2
 8005220:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 8005224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005226:	681c      	ldr	r4, [r3, #0]
 8005228:	4628      	mov	r0, r5
 800522a:	4631      	mov	r1, r6
 800522c:	f7fb fc88 	bl	8000b40 <__aeabi_d2uiz>
 8005230:	4603      	mov	r3, r0
 8005232:	6423      	str	r3, [r4, #64]	@ 0x40
 8005234:	e023      	b.n	800527e <Update_pwm+0x104>
 8005236:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005238:	2b10      	cmp	r3, #16
 800523a:	d110      	bne.n	800525e <Update_pwm+0xe4>
 800523c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800523e:	f7fb f93d 	bl	80004bc <__aeabi_i2d>
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	4692      	mov	sl, r2
 8005248:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 800524c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524e:	681c      	ldr	r4, [r3, #0]
 8005250:	4650      	mov	r0, sl
 8005252:	4659      	mov	r1, fp
 8005254:	f7fb fc74 	bl	8000b40 <__aeabi_d2uiz>
 8005258:	4603      	mov	r3, r0
 800525a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800525c:	e00f      	b.n	800527e <Update_pwm+0x104>
 800525e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8005260:	f7fb f92c 	bl	80004bc <__aeabi_i2d>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	4690      	mov	r8, r2
 800526a:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800526e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005270:	681c      	ldr	r4, [r3, #0]
 8005272:	4640      	mov	r0, r8
 8005274:	4649      	mov	r1, r9
 8005276:	f7fb fc63 	bl	8000b40 <__aeabi_d2uiz>
 800527a:	4603      	mov	r3, r0
 800527c:	64e3      	str	r3, [r4, #76]	@ 0x4c
	if (pwm_signal < 0) {
 800527e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005280:	2b00      	cmp	r3, #0
 8005282:	da06      	bge.n	8005292 <Update_pwm+0x118>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, RESET);
 8005284:	8c3b      	ldrh	r3, [r7, #32]
 8005286:	2200      	movs	r2, #0
 8005288:	4619      	mov	r1, r3
 800528a:	69f8      	ldr	r0, [r7, #28]
 800528c:	f003 fca4 	bl	8008bd8 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
	}
}
 8005290:	e005      	b.n	800529e <Update_pwm+0x124>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
 8005292:	8c3b      	ldrh	r3, [r7, #32]
 8005294:	2201      	movs	r2, #1
 8005296:	4619      	mov	r1, r3
 8005298:	69f8      	ldr	r0, [r7, #28]
 800529a:	f003 fc9d 	bl	8008bd8 <HAL_GPIO_WritePin>
}
 800529e:	bf00      	nop
 80052a0:	372c      	adds	r7, #44	@ 0x2c
 80052a2:	46bd      	mov	sp, r7
 80052a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080052a8 <QEI_init>:
 *  Created on: Apr 24, 2024
 *      Author: naker
 */
#include "qei.h"

void QEI_init(QEI* qei, int32_t ppr, int32_t freq, int32_t period){
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
 80052b4:	603b      	str	r3, [r7, #0]
	qei -> ppr = ppr;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	601a      	str	r2, [r3, #0]
	qei -> freq = freq;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	605a      	str	r2, [r3, #4]
	qei -> period = period;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	609a      	str	r2, [r3, #8]
	qei -> counter_value[NEW] = 0;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 80052da:	68f9      	ldr	r1, [r7, #12]
 80052dc:	f04f 0200 	mov.w	r2, #0
 80052e0:	f04f 0300 	mov.w	r3, #0
 80052e4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0.0;
 80052e8:	68f9      	ldr	r1, [r7, #12]
 80052ea:	f04f 0200 	mov.w	r2, #0
 80052ee:	f04f 0300 	mov.w	r3, #0
 80052f2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	qei -> rev = 0.0;
 80052f6:	68f9      	ldr	r1, [r7, #12]
 80052f8:	f04f 0200 	mov.w	r2, #0
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	e9c1 2308 	strd	r2, r3, [r1, #32]
	qei -> mm = 0.0;
 8005304:	68f9      	ldr	r1, [r7, #12]
 8005306:	f04f 0200 	mov.w	r2, #0
 800530a:	f04f 0300 	mov.w	r3, #0
 800530e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> pps = 0.0;
 8005312:	68f9      	ldr	r1, [r7, #12]
 8005314:	f04f 0200 	mov.w	r2, #0
 8005318:	f04f 0300 	mov.w	r3, #0
 800531c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	qei -> rpm = 0.0;
 8005320:	68f9      	ldr	r1, [r7, #12]
 8005322:	f04f 0200 	mov.w	r2, #0
 8005326:	f04f 0300 	mov.w	r3, #0
 800532a:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	qei -> radps = 0.0;
 800532e:	68f9      	ldr	r1, [r7, #12]
 8005330:	f04f 0200 	mov.w	r2, #0
 8005334:	f04f 0300 	mov.w	r3, #0
 8005338:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	qei -> mmps = 0.0;
 800533c:	68f9      	ldr	r1, [r7, #12]
 800533e:	f04f 0200 	mov.w	r2, #0
 8005342:	f04f 0300 	mov.w	r3, #0
 8005346:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	qei -> radpss = 0.0;
 800534a:	68f9      	ldr	r1, [r7, #12]
 800534c:	f04f 0200 	mov.w	r2, #0
 8005350:	f04f 0300 	mov.w	r3, #0
 8005354:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
	qei -> rpms = 0.0;
 8005358:	68f9      	ldr	r1, [r7, #12]
 800535a:	f04f 0200 	mov.w	r2, #0
 800535e:	f04f 0300 	mov.w	r3, #0
 8005362:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
	qei -> mmpss = 0.0;
 8005366:	68f9      	ldr	r1, [r7, #12]
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	f04f 0300 	mov.w	r3, #0
 8005370:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
	qei -> velocity_value[NEW] = 0;
 8005374:	68f9      	ldr	r1, [r7, #12]
 8005376:	f04f 0200 	mov.w	r2, #0
 800537a:	f04f 0300 	mov.w	r3, #0
 800537e:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	qei -> velocity_value[OLD] = 0;
 8005382:	68f9      	ldr	r1, [r7, #12]
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	f04f 0300 	mov.w	r3, #0
 800538c:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60

}
 8005390:	bf00      	nop
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	0000      	movs	r0, r0
	...

080053a0 <Update_qei>:

void Update_qei(QEI* qei, TIM_HandleTypeDef* htim){
 80053a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053a4:	b082      	sub	sp, #8
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	6039      	str	r1, [r7, #0]
	// Update counter
	qei -> counter_value[NEW] = __HAL_TIM_GET_COUNTER(htim);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	60da      	str	r2, [r3, #12]
	// Update difference of counter's value = NEW - OLD
	qei -> diff_counter_value = qei -> counter_value[NEW] - qei -> counter_value[OLD];
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	461a      	mov	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	615a      	str	r2, [r3, #20]
	if(qei -> diff_counter_value > qei -> period / 2){
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	695a      	ldr	r2, [r3, #20]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	0fd9      	lsrs	r1, r3, #31
 80053d0:	440b      	add	r3, r1
 80053d2:	105b      	asrs	r3, r3, #1
 80053d4:	429a      	cmp	r2, r3
 80053d6:	dd06      	ble.n	80053e6 <Update_qei+0x46>
		qei -> diff_counter_value -= qei -> period;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	695a      	ldr	r2, [r3, #20]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	1ad2      	subs	r2, r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	615a      	str	r2, [r3, #20]
	}
	// over flow problem
	if(qei -> diff_counter_value < -(qei -> period) / 2){
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	695a      	ldr	r2, [r3, #20]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	425b      	negs	r3, r3
 80053f0:	0fd9      	lsrs	r1, r3, #31
 80053f2:	440b      	add	r3, r1
 80053f4:	105b      	asrs	r3, r3, #1
 80053f6:	429a      	cmp	r2, r3
 80053f8:	da06      	bge.n	8005408 <Update_qei+0x68>
		qei -> diff_counter_value += qei -> period;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	695a      	ldr	r2, [r3, #20]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	441a      	add	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	615a      	str	r2, [r3, #20]
	}

	// Update position at difference unit
	qei -> pulse += qei -> diff_counter_value;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800540e:	6879      	ldr	r1, [r7, #4]
 8005410:	6949      	ldr	r1, [r1, #20]
 8005412:	17c8      	asrs	r0, r1, #31
 8005414:	460c      	mov	r4, r1
 8005416:	4605      	mov	r5, r0
 8005418:	eb12 0804 	adds.w	r8, r2, r4
 800541c:	eb43 0905 	adc.w	r9, r3, r5
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	e9c3 8906 	strd	r8, r9, [r3, #24]
//	qei -> rad += (float)qei -> diff_counter_value * 2.0 * M_PI / (float)(qei -> ppr);
//	qei -> rev += (float)qei -> diff_counter_value / (float)(qei -> ppr);
	qei -> mm += (double)qei -> diff_counter_value * 16.0 / (double)(qei -> ppr); // for lead 16 mm.
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	4618      	mov	r0, r3
 8005432:	f7fb f843 	bl	80004bc <__aeabi_i2d>
 8005436:	f04f 0200 	mov.w	r2, #0
 800543a:	4b67      	ldr	r3, [pc, #412]	@ (80055d8 <Update_qei+0x238>)
 800543c:	f7fb f8a8 	bl	8000590 <__aeabi_dmul>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	4690      	mov	r8, r2
 8005446:	4699      	mov	r9, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4618      	mov	r0, r3
 800544e:	f7fb f835 	bl	80004bc <__aeabi_i2d>
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
 8005456:	4640      	mov	r0, r8
 8005458:	4649      	mov	r1, r9
 800545a:	f7fb f9c3 	bl	80007e4 <__aeabi_ddiv>
 800545e:	4602      	mov	r2, r0
 8005460:	460b      	mov	r3, r1
 8005462:	4620      	mov	r0, r4
 8005464:	4629      	mov	r1, r5
 8005466:	f7fa fedd 	bl	8000224 <__adddf3>
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	6879      	ldr	r1, [r7, #4]
 8005470:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	// Update velocity at difference unit
	qei -> pps = qei -> diff_counter_value * (qei -> freq);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6852      	ldr	r2, [r2, #4]
 800547c:	fb02 f303 	mul.w	r3, r2, r3
 8005480:	17da      	asrs	r2, r3, #31
 8005482:	469a      	mov	sl, r3
 8005484:	4693      	mov	fp, r2
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
	qei -> radps = (double)(qei -> pps) * 2.0 * M_PI / (double)(qei -> ppr);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005492:	4610      	mov	r0, r2
 8005494:	4619      	mov	r1, r3
 8005496:	f7fb f84d 	bl	8000534 <__aeabi_l2d>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	f7fa fec1 	bl	8000224 <__adddf3>
 80054a2:	4602      	mov	r2, r0
 80054a4:	460b      	mov	r3, r1
 80054a6:	4610      	mov	r0, r2
 80054a8:	4619      	mov	r1, r3
 80054aa:	a349      	add	r3, pc, #292	@ (adr r3, 80055d0 <Update_qei+0x230>)
 80054ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b0:	f7fb f86e 	bl	8000590 <__aeabi_dmul>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	4614      	mov	r4, r2
 80054ba:	461d      	mov	r5, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fa fffb 	bl	80004bc <__aeabi_i2d>
 80054c6:	4602      	mov	r2, r0
 80054c8:	460b      	mov	r3, r1
 80054ca:	4620      	mov	r0, r4
 80054cc:	4629      	mov	r1, r5
 80054ce:	f7fb f989 	bl	80007e4 <__aeabi_ddiv>
 80054d2:	4602      	mov	r2, r0
 80054d4:	460b      	mov	r3, r1
 80054d6:	6879      	ldr	r1, [r7, #4]
 80054d8:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
//	qei -> rpm = qei -> pps * 60.0 / (float)(qei -> ppr) ;
	qei -> mmps = ((double)(qei -> pps) * 16.0) / (double)(qei -> ppr);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80054e2:	4610      	mov	r0, r2
 80054e4:	4619      	mov	r1, r3
 80054e6:	f7fb f825 	bl	8000534 <__aeabi_l2d>
 80054ea:	f04f 0200 	mov.w	r2, #0
 80054ee:	4b3a      	ldr	r3, [pc, #232]	@ (80055d8 <Update_qei+0x238>)
 80054f0:	f7fb f84e 	bl	8000590 <__aeabi_dmul>
 80054f4:	4602      	mov	r2, r0
 80054f6:	460b      	mov	r3, r1
 80054f8:	4614      	mov	r4, r2
 80054fa:	461d      	mov	r5, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4618      	mov	r0, r3
 8005502:	f7fa ffdb 	bl	80004bc <__aeabi_i2d>
 8005506:	4602      	mov	r2, r0
 8005508:	460b      	mov	r3, r1
 800550a:	4620      	mov	r0, r4
 800550c:	4629      	mov	r1, r5
 800550e:	f7fb f969 	bl	80007e4 <__aeabi_ddiv>
 8005512:	4602      	mov	r2, r0
 8005514:	460b      	mov	r3, r1
 8005516:	6879      	ldr	r1, [r7, #4]
 8005518:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

	// Update acceleration
	qei -> velocity_value[NEW] = qei -> pps;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005522:	4610      	mov	r0, r2
 8005524:	4619      	mov	r1, r3
 8005526:	f7fb f805 	bl	8000534 <__aeabi_l2d>
 800552a:	4602      	mov	r2, r0
 800552c:	460b      	mov	r3, r1
 800552e:	6879      	ldr	r1, [r7, #4]
 8005530:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	qei -> diff_velocity_value = qei -> velocity_value[NEW] - qei -> velocity_value[OLD];
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8005540:	f7fa fe6e 	bl	8000220 <__aeabi_dsub>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	qei -> ppss = qei -> diff_velocity_value * (double)(qei -> freq);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	e9d3 451a 	ldrd	r4, r5, [r3, #104]	@ 0x68
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	4618      	mov	r0, r3
 800555a:	f7fa ffaf 	bl	80004bc <__aeabi_i2d>
 800555e:	4602      	mov	r2, r0
 8005560:	460b      	mov	r3, r1
 8005562:	4620      	mov	r0, r4
 8005564:	4629      	mov	r1, r5
 8005566:	f7fb f813 	bl	8000590 <__aeabi_dmul>
 800556a:	4602      	mov	r2, r0
 800556c:	460b      	mov	r3, r1
 800556e:	6879      	ldr	r1, [r7, #4]
 8005570:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
//	qei -> radpss = qei -> ppss * 2.0 * M_PI / (float)(qei -> ppr);
//	qei -> rpms = qei -> ppss * 60.0 / (float)(qei -> ppr);
	qei -> mmpss = qei -> ppss * 16.0 / (double)(qei -> ppr); // Acceleration in mm/s^2
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 800557a:	f04f 0200 	mov.w	r2, #0
 800557e:	4b16      	ldr	r3, [pc, #88]	@ (80055d8 <Update_qei+0x238>)
 8005580:	f7fb f806 	bl	8000590 <__aeabi_dmul>
 8005584:	4602      	mov	r2, r0
 8005586:	460b      	mov	r3, r1
 8005588:	4614      	mov	r4, r2
 800558a:	461d      	mov	r5, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4618      	mov	r0, r3
 8005592:	f7fa ff93 	bl	80004bc <__aeabi_i2d>
 8005596:	4602      	mov	r2, r0
 8005598:	460b      	mov	r3, r1
 800559a:	4620      	mov	r0, r4
 800559c:	4629      	mov	r1, r5
 800559e:	f7fb f921 	bl	80007e4 <__aeabi_ddiv>
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	6879      	ldr	r1, [r7, #4]
 80055a8:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88

	// Update OLD value
	qei -> counter_value[OLD] = qei -> counter_value[NEW];
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68da      	ldr	r2, [r3, #12]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	611a      	str	r2, [r3, #16]
	qei -> velocity_value[OLD] = qei -> velocity_value[NEW];
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60

}
 80055c0:	bf00      	nop
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055ca:	bf00      	nop
 80055cc:	f3af 8000 	nop.w
 80055d0:	54442d18 	.word	0x54442d18
 80055d4:	400921fb 	.word	0x400921fb
 80055d8:	40300000 	.word	0x40300000

080055dc <Reset_qei>:

void Reset_qei(QEI* qei, TIM_HandleTypeDef* htim){
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
	qei -> counter_value[NEW] = 0;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 80055f8:	6879      	ldr	r1, [r7, #4]
 80055fa:	f04f 0200 	mov.w	r2, #0
 80055fe:	f04f 0300 	mov.w	r3, #0
 8005602:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0.0;
 8005606:	6879      	ldr	r1, [r7, #4]
 8005608:	f04f 0200 	mov.w	r2, #0
 800560c:	f04f 0300 	mov.w	r3, #0
 8005610:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	qei -> rev = 0.0;
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	f04f 0200 	mov.w	r2, #0
 800561a:	f04f 0300 	mov.w	r3, #0
 800561e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	qei -> mm = 0.0;
 8005622:	6879      	ldr	r1, [r7, #4]
 8005624:	f04f 0200 	mov.w	r2, #0
 8005628:	f04f 0300 	mov.w	r3, #0
 800562c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> pps = 0.0;
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	f04f 0200 	mov.w	r2, #0
 8005636:	f04f 0300 	mov.w	r3, #0
 800563a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	qei -> rpm = 0.0;
 800563e:	6879      	ldr	r1, [r7, #4]
 8005640:	f04f 0200 	mov.w	r2, #0
 8005644:	f04f 0300 	mov.w	r3, #0
 8005648:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	qei -> radps = 0.0;
 800564c:	6879      	ldr	r1, [r7, #4]
 800564e:	f04f 0200 	mov.w	r2, #0
 8005652:	f04f 0300 	mov.w	r3, #0
 8005656:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	qei -> mmps = 0.0;
 800565a:	6879      	ldr	r1, [r7, #4]
 800565c:	f04f 0200 	mov.w	r2, #0
 8005660:	f04f 0300 	mov.w	r3, #0
 8005664:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	qei -> ppss = 0;
 8005668:	6879      	ldr	r1, [r7, #4]
 800566a:	f04f 0200 	mov.w	r2, #0
 800566e:	f04f 0300 	mov.w	r3, #0
 8005672:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	qei -> rpms = 0.0;
 8005676:	6879      	ldr	r1, [r7, #4]
 8005678:	f04f 0200 	mov.w	r2, #0
 800567c:	f04f 0300 	mov.w	r3, #0
 8005680:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
	qei -> radpss = 0.0;
 8005684:	6879      	ldr	r1, [r7, #4]
 8005686:	f04f 0200 	mov.w	r2, #0
 800568a:	f04f 0300 	mov.w	r3, #0
 800568e:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
	qei -> mmpss = 0.0;
 8005692:	6879      	ldr	r1, [r7, #4]
 8005694:	f04f 0200 	mov.w	r2, #0
 8005698:	f04f 0300 	mov.w	r3, #0
 800569c:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
	qei -> velocity_value[NEW] = 0;
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	f04f 0200 	mov.w	r2, #0
 80056a6:	f04f 0300 	mov.w	r3, #0
 80056aa:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	qei -> velocity_value[OLD] = 0;
 80056ae:	6879      	ldr	r1, [r7, #4]
 80056b0:	f04f 0200 	mov.w	r2, #0
 80056b4:	f04f 0300 	mov.w	r3, #0
 80056b8:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	qei -> diff_velocity_value = 0;
 80056bc:	6879      	ldr	r1, [r7, #4]
 80056be:	f04f 0200 	mov.w	r2, #0
 80056c2:	f04f 0300 	mov.w	r3, #0
 80056c6:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	HAL_TIM_Encoder_Stop(htim, TIM_CHANNEL_ALL);
 80056ca:	213c      	movs	r1, #60	@ 0x3c
 80056cc:	6838      	ldr	r0, [r7, #0]
 80056ce:	f004 ffe7 	bl	800a6a0 <HAL_TIM_Encoder_Stop>
	__HAL_TIM_SET_COUNTER(htim, 0);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2200      	movs	r2, #0
 80056d8:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 80056da:	213c      	movs	r1, #60	@ 0x3c
 80056dc:	6838      	ldr	r0, [r7, #0]
 80056de:	f004 ff51 	bl	800a584 <HAL_TIM_Encoder_Start>
}
 80056e2:	bf00      	nop
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <Get_mmps>:

double Get_mmps(QEI* qei){
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
	return qei -> mmps;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80056f8:	ec43 2b17 	vmov	d7, r2, r3
}
 80056fc:	eeb0 0a47 	vmov.f32	s0, s14
 8005700:	eef0 0a67 	vmov.f32	s1, s15
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <Get_mm>:
double Get_mm(QEI* qei){
 800570e:	b480      	push	{r7}
 8005710:	b083      	sub	sp, #12
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
	return qei -> mm;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800571c:	ec43 2b17 	vmov	d7, r2, r3
}
 8005720:	eeb0 0a47 	vmov.f32	s0, s14
 8005724:	eef0 0a67 	vmov.f32	s1, s15
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <point_init>:
 *  Created on: May 3, 2024
 *      Author: naker
 */
#include "state.h"

void point_init(POINT* point){
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
	point -> goal = 0.0;
 800573a:	6879      	ldr	r1, [r7, #4]
 800573c:	f04f 0200 	mov.w	r2, #0
 8005740:	f04f 0300 	mov.w	r3, #0
 8005744:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <homing_init>:



void homing_init(HOME* home){
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
	home -> homing_command = 0;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	709a      	strb	r2, [r3, #2]
	home -> homing_state[0] = 0;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	701a      	strb	r2, [r3, #0]
	home -> homing_state[1] = 0;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	705a      	strb	r2, [r3, #1]
	home -> is_home = 0;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	70da      	strb	r2, [r3, #3]
	home -> homing_first = 0;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	711a      	strb	r2, [r3, #4]
	home -> homing_sec = 0;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	715a      	strb	r2, [r3, #5]
	home -> homing_ts = 0;
 8005780:	6879      	ldr	r1, [r7, #4]
 8005782:	f04f 0200 	mov.w	r2, #0
 8005786:	f04f 0300 	mov.w	r3, #0
 800578a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	home -> pwm = 0;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	821a      	strh	r2, [r3, #16]
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <homing>:
void homing(HOME* home, GPIO_TypeDef* GPIO_Prox, uint16_t GPIO_Pin_Prox)
{
 80057a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80057a4:	b084      	sub	sp, #16
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	4613      	mov	r3, r2
 80057ae:	80fb      	strh	r3, [r7, #6]
	// If we have homing command
	if(home -> homing_command == 1){
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	789b      	ldrb	r3, [r3, #2]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	f040 8206 	bne.w	8005bc6 <homing+0x426>
		if(home -> homing_state[0] == 0){
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d125      	bne.n	800580e <homing+0x6e>
			// Homing state selection
			// Robot is not home but proximity is detecting
			if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && home -> is_home == 0){
 80057c2:	88fb      	ldrh	r3, [r7, #6]
 80057c4:	4619      	mov	r1, r3
 80057c6:	68b8      	ldr	r0, [r7, #8]
 80057c8:	f003 f9ee 	bl	8008ba8 <HAL_GPIO_ReadPin>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d107      	bne.n	80057e2 <homing+0x42>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	78db      	ldrb	r3, [r3, #3]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d103      	bne.n	80057e2 <homing+0x42>
				home -> homing_state[1] = 1;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	705a      	strb	r2, [r3, #1]
 80057e0:	e00e      	b.n	8005800 <homing+0x60>
			}
			// Robot is not home and proximity isn't detecting
			else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && home -> is_home == 0){
 80057e2:	88fb      	ldrh	r3, [r7, #6]
 80057e4:	4619      	mov	r1, r3
 80057e6:	68b8      	ldr	r0, [r7, #8]
 80057e8:	f003 f9de 	bl	8008ba8 <HAL_GPIO_ReadPin>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d106      	bne.n	8005800 <homing+0x60>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	78db      	ldrb	r3, [r3, #3]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d102      	bne.n	8005800 <homing+0x60>
				home -> homing_state[1] = 2;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2202      	movs	r2, #2
 80057fe:	705a      	strb	r2, [r3, #1]
			}
			if(home -> homing_state[1] != 0){
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	785b      	ldrb	r3, [r3, #1]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d002      	beq.n	800580e <homing+0x6e>
				// Set homing state
				home -> homing_state[0] = 1;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2201      	movs	r2, #1
 800580c:	701a      	strb	r2, [r3, #0]
			}
		}
		if(home -> homing_state[0] == 1){
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	2b01      	cmp	r3, #1
 8005814:	f040 81d8 	bne.w	8005bc8 <homing+0x428>
			// Homing
			if(home -> homing_state[1] == 1){
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	785b      	ldrb	r3, [r3, #1]
 800581c:	2b01      	cmp	r3, #1
 800581e:	f040 80b2 	bne.w	8005986 <homing+0x1e6>
//				home -> state_check += 10;
				if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0 && home -> homing_first == 1 && home -> homing_sec == 1){
 8005822:	88fb      	ldrh	r3, [r7, #6]
 8005824:	4619      	mov	r1, r3
 8005826:	68b8      	ldr	r0, [r7, #8]
 8005828:	f003 f9be 	bl	8008ba8 <HAL_GPIO_ReadPin>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d12e      	bne.n	8005890 <homing+0xf0>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	791b      	ldrb	r3, [r3, #4]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d12a      	bne.n	8005890 <homing+0xf0>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	795b      	ldrb	r3, [r3, #5]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d126      	bne.n	8005890 <homing+0xf0>
					if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0){
 8005842:	88fb      	ldrh	r3, [r7, #6]
 8005844:	4619      	mov	r1, r3
 8005846:	68b8      	ldr	r0, [r7, #8]
 8005848:	f003 f9ae 	bl	8008ba8 <HAL_GPIO_ReadPin>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	f040 808e 	bne.w	8005970 <homing+0x1d0>
						// Check Proximity again
						home -> pwm = 7000;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800585a:	821a      	strh	r2, [r3, #16]
						// Reset homing state and other
						home -> homing_ts = 0;
 800585c:	68f9      	ldr	r1, [r7, #12]
 800585e:	f04f 0200 	mov.w	r2, #0
 8005862:	f04f 0300 	mov.w	r3, #0
 8005866:	e9c1 2302 	strd	r2, r3, [r1, #8]
						home -> homing_state[0] = 0;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	701a      	strb	r2, [r3, #0]
						home -> homing_state[1] = 0;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	705a      	strb	r2, [r3, #1]
						home -> homing_command = 0;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	709a      	strb	r2, [r3, #2]
						home -> homing_first = 0;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	711a      	strb	r2, [r3, #4]
						home -> homing_sec = 0;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	715a      	strb	r2, [r3, #5]
						home -> is_home = 1;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2201      	movs	r2, #1
 800588c:	70da      	strb	r2, [r3, #3]
						return;
 800588e:	e19b      	b.n	8005bc8 <homing+0x428>
					}
				}
				else if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1 && home -> homing_first == 1 && home -> homing_sec == 0 && home -> homing_ts >= 1500){
 8005890:	88fb      	ldrh	r3, [r7, #6]
 8005892:	4619      	mov	r1, r3
 8005894:	68b8      	ldr	r0, [r7, #8]
 8005896:	f003 f987 	bl	8008ba8 <HAL_GPIO_ReadPin>
 800589a:	4603      	mov	r3, r0
 800589c:	2b01      	cmp	r3, #1
 800589e:	d118      	bne.n	80058d2 <homing+0x132>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	791b      	ldrb	r3, [r3, #4]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d114      	bne.n	80058d2 <homing+0x132>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	795b      	ldrb	r3, [r3, #5]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d110      	bne.n	80058d2 <homing+0x132>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80058b6:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 80058ba:	428a      	cmp	r2, r1
 80058bc:	f173 0300 	sbcs.w	r3, r3, #0
 80058c0:	d307      	bcc.n	80058d2 <homing+0x132>
					// Stop when proximity was detected
					home -> pwm = 14000;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f243 62b0 	movw	r2, #14000	@ 0x36b0
 80058c8:	821a      	strh	r2, [r3, #16]
					home -> homing_sec = 1;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	715a      	strb	r2, [r3, #5]
 80058d0:	e04e      	b.n	8005970 <homing+0x1d0>
				}else if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1 && home -> homing_first == 0 && home -> homing_ts >= 0 && home -> homing_ts < 1000){
 80058d2:	88fb      	ldrh	r3, [r7, #6]
 80058d4:	4619      	mov	r1, r3
 80058d6:	68b8      	ldr	r0, [r7, #8]
 80058d8:	f003 f966 	bl	8008ba8 <HAL_GPIO_ReadPin>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d113      	bne.n	800590a <homing+0x16a>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	791b      	ldrb	r3, [r3, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10f      	bne.n	800590a <homing+0x16a>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80058f0:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 80058f4:	f173 0300 	sbcs.w	r3, r3, #0
 80058f8:	d207      	bcs.n	800590a <homing+0x16a>
					// Move upper
					home -> pwm = 14000;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f243 62b0 	movw	r2, #14000	@ 0x36b0
 8005900:	821a      	strh	r2, [r3, #16]
					home -> homing_first = 1;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2201      	movs	r2, #1
 8005906:	711a      	strb	r2, [r3, #4]
 8005908:	e032      	b.n	8005970 <homing+0x1d0>
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 200);
				}else if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0 && home -> homing_ts >= 1000 && home -> homing_ts < 1500){ // wait 1.0 secs
 800590a:	88fb      	ldrh	r3, [r7, #6]
 800590c:	4619      	mov	r1, r3
 800590e:	68b8      	ldr	r0, [r7, #8]
 8005910:	f003 f94a 	bl	8008ba8 <HAL_GPIO_ReadPin>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d115      	bne.n	8005946 <homing+0x1a6>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005920:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8005924:	f173 0300 	sbcs.w	r3, r3, #0
 8005928:	d30d      	bcc.n	8005946 <homing+0x1a6>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005930:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8005934:	428a      	cmp	r2, r1
 8005936:	f173 0300 	sbcs.w	r3, r3, #0
 800593a:	d204      	bcs.n	8005946 <homing+0x1a6>
					// Stop
					home -> pwm = 7000;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8005942:	821a      	strh	r2, [r3, #16]
 8005944:	e014      	b.n	8005970 <homing+0x1d0>
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0);
				}else if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0 && home -> homing_ts >= 1500){ // wait 1.25 secs
 8005946:	88fb      	ldrh	r3, [r7, #6]
 8005948:	4619      	mov	r1, r3
 800594a:	68b8      	ldr	r0, [r7, #8]
 800594c:	f003 f92c 	bl	8008ba8 <HAL_GPIO_ReadPin>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10c      	bne.n	8005970 <homing+0x1d0>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800595c:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8005960:	428a      	cmp	r2, r1
 8005962:	f173 0300 	sbcs.w	r3, r3, #0
 8005966:	d303      	bcc.n	8005970 <homing+0x1d0>
					// Move lower
					home -> pwm = -6500;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f24e 629c 	movw	r2, #59036	@ 0xe69c
 800596e:	821a      	strh	r2, [r3, #16]
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, -120);
				}
				home -> homing_ts++;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005976:	f112 0801 	adds.w	r8, r2, #1
 800597a:	f143 0900 	adc.w	r9, r3, #0
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8005984:	e120      	b.n	8005bc8 <homing+0x428>
			}
			else if(home -> homing_state[1] == 2){
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	785b      	ldrb	r3, [r3, #1]
 800598a:	2b02      	cmp	r3, #2
 800598c:	f040 811c 	bne.w	8005bc8 <homing+0x428>
				if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0 && home -> homing_first == 1 && home -> homing_sec == 1){
 8005990:	88fb      	ldrh	r3, [r7, #6]
 8005992:	4619      	mov	r1, r3
 8005994:	68b8      	ldr	r0, [r7, #8]
 8005996:	f003 f907 	bl	8008ba8 <HAL_GPIO_ReadPin>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d12b      	bne.n	80059f8 <homing+0x258>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	791b      	ldrb	r3, [r3, #4]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d127      	bne.n	80059f8 <homing+0x258>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	795b      	ldrb	r3, [r3, #5]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d123      	bne.n	80059f8 <homing+0x258>
					if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0){
 80059b0:	88fb      	ldrh	r3, [r7, #6]
 80059b2:	4619      	mov	r1, r3
 80059b4:	68b8      	ldr	r0, [r7, #8]
 80059b6:	f003 f8f7 	bl	8008ba8 <HAL_GPIO_ReadPin>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f040 80f8 	bne.w	8005bb2 <homing+0x412>
						// Check Proximity again
						home -> pwm = 7000;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80059c8:	821a      	strh	r2, [r3, #16]
						// Reset homing state and other
						home -> homing_ts = 0;
 80059ca:	68f9      	ldr	r1, [r7, #12]
 80059cc:	f04f 0200 	mov.w	r2, #0
 80059d0:	f04f 0300 	mov.w	r3, #0
 80059d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
						home -> homing_state[0] = 0;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	701a      	strb	r2, [r3, #0]
						home -> homing_state[1] = 0;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	705a      	strb	r2, [r3, #1]
						home -> homing_command = 0;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	709a      	strb	r2, [r3, #2]
						home -> homing_first = 0;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	711a      	strb	r2, [r3, #4]
						home -> is_home = 1;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2201      	movs	r2, #1
 80059f4:	70da      	strb	r2, [r3, #3]
						return;
 80059f6:	e0e7      	b.n	8005bc8 <homing+0x428>
					}
				}
				else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && (home -> homing_first == 1) && (home -> homing_sec == 0)){
 80059f8:	88fb      	ldrh	r3, [r7, #6]
 80059fa:	4619      	mov	r1, r3
 80059fc:	68b8      	ldr	r0, [r7, #8]
 80059fe:	f003 f8d3 	bl	8008ba8 <HAL_GPIO_ReadPin>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d131      	bne.n	8005a6c <homing+0x2cc>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	791b      	ldrb	r3, [r3, #4]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d12d      	bne.n	8005a6c <homing+0x2cc>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	795b      	ldrb	r3, [r3, #5]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d129      	bne.n	8005a6c <homing+0x2cc>
					// Stop when proximity was detected
					static uint8_t for_one = 1;
					if(home -> homing_sec == 0 && for_one == 1){
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	795b      	ldrb	r3, [r3, #5]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d111      	bne.n	8005a44 <homing+0x2a4>
 8005a20:	4b6b      	ldr	r3, [pc, #428]	@ (8005bd0 <homing+0x430>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d10d      	bne.n	8005a44 <homing+0x2a4>
						home -> pwm = 7000;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8005a2e:	821a      	strh	r2, [r3, #16]
						home -> homing_ts = 0;
 8005a30:	68f9      	ldr	r1, [r7, #12]
 8005a32:	f04f 0200 	mov.w	r2, #0
 8005a36:	f04f 0300 	mov.w	r3, #0
 8005a3a:	e9c1 2302 	strd	r2, r3, [r1, #8]
						for_one = 0;
 8005a3e:	4b64      	ldr	r3, [pc, #400]	@ (8005bd0 <homing+0x430>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	701a      	strb	r2, [r3, #0]
					}
					if(home -> homing_ts >= 1000){
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005a4a:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8005a4e:	f173 0300 	sbcs.w	r3, r3, #0
 8005a52:	f0c0 80ad 	bcc.w	8005bb0 <homing+0x410>
						// Stop for 1 sec then move upper
						home -> pwm = 14000;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f243 62b0 	movw	r2, #14000	@ 0x36b0
 8005a5c:	821a      	strh	r2, [r3, #16]
						home -> homing_sec = 1;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2201      	movs	r2, #1
 8005a62:	715a      	strb	r2, [r3, #5]
						for_one = 1;
 8005a64:	4b5a      	ldr	r3, [pc, #360]	@ (8005bd0 <homing+0x430>)
 8005a66:	2201      	movs	r2, #1
 8005a68:	701a      	strb	r2, [r3, #0]
				else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && (home -> homing_first == 1) && (home -> homing_sec == 0)){
 8005a6a:	e0a1      	b.n	8005bb0 <homing+0x410>
					}
				}
				else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && (home -> homing_first == 0) && (home -> homing_sec == 0)){
 8005a6c:	88fb      	ldrh	r3, [r7, #6]
 8005a6e:	4619      	mov	r1, r3
 8005a70:	68b8      	ldr	r0, [r7, #8]
 8005a72:	f003 f899 	bl	8008ba8 <HAL_GPIO_ReadPin>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d11e      	bne.n	8005aba <homing+0x31a>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	791b      	ldrb	r3, [r3, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d11a      	bne.n	8005aba <homing+0x31a>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	795b      	ldrb	r3, [r3, #5]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d116      	bne.n	8005aba <homing+0x31a>
					// Stop when proximity was detected
					if(home -> homing_ts == 0){
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	d103      	bne.n	8005a9e <homing+0x2fe>
						home -> pwm = 7000;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8005a9c:	821a      	strh	r2, [r3, #16]
					}
					if(home -> homing_ts >= 1000){ // stop 1 secs
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005aa4:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8005aa8:	f173 0300 	sbcs.w	r3, r3, #0
 8005aac:	f0c0 8081 	bcc.w	8005bb2 <homing+0x412>
						 // Move upper
						home -> pwm = 14000;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f243 62b0 	movw	r2, #14000	@ 0x36b0
 8005ab6:	821a      	strh	r2, [r3, #16]
					if(home -> homing_ts >= 1000){ // stop 1 secs
 8005ab8:	e07b      	b.n	8005bb2 <homing+0x412>
					}
				}
				else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && (home -> homing_first == 0) && (home -> homing_sec == 0) && (home -> homing_ts >= 1000)){
 8005aba:	88fb      	ldrh	r3, [r7, #6]
 8005abc:	4619      	mov	r1, r3
 8005abe:	68b8      	ldr	r0, [r7, #8]
 8005ac0:	f003 f872 	bl	8008ba8 <HAL_GPIO_ReadPin>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d113      	bne.n	8005af2 <homing+0x352>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	791b      	ldrb	r3, [r3, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10f      	bne.n	8005af2 <homing+0x352>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	795b      	ldrb	r3, [r3, #5]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10b      	bne.n	8005af2 <homing+0x352>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005ae0:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8005ae4:	f173 0300 	sbcs.w	r3, r3, #0
 8005ae8:	d303      	bcc.n	8005af2 <homing+0x352>
					home -> homing_first = 1;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2201      	movs	r2, #1
 8005aee:	711a      	strb	r2, [r3, #4]
 8005af0:	e05f      	b.n	8005bb2 <homing+0x412>
				}
				else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && (home -> homing_first == 1) && (home -> homing_sec == 0) && home -> homing_ts >= 1500 && home -> homing_ts < 2500){
 8005af2:	88fb      	ldrh	r3, [r7, #6]
 8005af4:	4619      	mov	r1, r3
 8005af6:	68b8      	ldr	r0, [r7, #8]
 8005af8:	f003 f856 	bl	8008ba8 <HAL_GPIO_ReadPin>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d11e      	bne.n	8005b40 <homing+0x3a0>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	791b      	ldrb	r3, [r3, #4]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d11a      	bne.n	8005b40 <homing+0x3a0>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	795b      	ldrb	r3, [r3, #5]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d116      	bne.n	8005b40 <homing+0x3a0>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005b18:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8005b1c:	428a      	cmp	r2, r1
 8005b1e:	f173 0300 	sbcs.w	r3, r3, #0
 8005b22:	d30d      	bcc.n	8005b40 <homing+0x3a0>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005b2a:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8005b2e:	428a      	cmp	r2, r1
 8005b30:	f173 0300 	sbcs.w	r3, r3, #0
 8005b34:	d204      	bcs.n	8005b40 <homing+0x3a0>
					// Move upper for 0.5 sec then stop
					home -> pwm = 7000;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8005b3c:	821a      	strh	r2, [r3, #16]
 8005b3e:	e038      	b.n	8005bb2 <homing+0x412>
				}
				else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && (home -> homing_first == 1) && (home -> homing_sec == 0) && home -> homing_ts >= 2500){ // wait 1.25 secs
 8005b40:	88fb      	ldrh	r3, [r7, #6]
 8005b42:	4619      	mov	r1, r3
 8005b44:	68b8      	ldr	r0, [r7, #8]
 8005b46:	f003 f82f 	bl	8008ba8 <HAL_GPIO_ReadPin>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d115      	bne.n	8005b7c <homing+0x3dc>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	791b      	ldrb	r3, [r3, #4]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d111      	bne.n	8005b7c <homing+0x3dc>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	795b      	ldrb	r3, [r3, #5]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10d      	bne.n	8005b7c <homing+0x3dc>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005b66:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8005b6a:	428a      	cmp	r2, r1
 8005b6c:	f173 0300 	sbcs.w	r3, r3, #0
 8005b70:	d304      	bcc.n	8005b7c <homing+0x3dc>
					// After stop for 1 sec Move lower
					home -> pwm = -6500;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f24e 629c 	movw	r2, #59036	@ 0xe69c
 8005b78:	821a      	strh	r2, [r3, #16]
 8005b7a:	e01a      	b.n	8005bb2 <homing+0x412>
				}
				else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && (home -> homing_first == 0) && (home -> homing_sec == 0) && home -> homing_ts == 0){
 8005b7c:	88fb      	ldrh	r3, [r7, #6]
 8005b7e:	4619      	mov	r1, r3
 8005b80:	68b8      	ldr	r0, [r7, #8]
 8005b82:	f003 f811 	bl	8008ba8 <HAL_GPIO_ReadPin>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d112      	bne.n	8005bb2 <homing+0x412>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	791b      	ldrb	r3, [r3, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10e      	bne.n	8005bb2 <homing+0x412>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	795b      	ldrb	r3, [r3, #5]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10a      	bne.n	8005bb2 <homing+0x412>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	d105      	bne.n	8005bb2 <homing+0x412>
					home -> pwm = -6500;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f24e 629c 	movw	r2, #59036	@ 0xe69c
 8005bac:	821a      	strh	r2, [r3, #16]
					return;
 8005bae:	e00b      	b.n	8005bc8 <homing+0x428>
				else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && (home -> homing_first == 1) && (home -> homing_sec == 0)){
 8005bb0:	bf00      	nop
				}
				home -> homing_ts++;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005bb8:	1c54      	adds	r4, r2, #1
 8005bba:	f143 0500 	adc.w	r5, r3, #0
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	e9c3 4502 	strd	r4, r5, [r3, #8]
 8005bc4:	e000      	b.n	8005bc8 <homing+0x428>
			}
		}
	}
	// Nothing happen
	else{
		return;
 8005bc6:	bf00      	nop
	}
}
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005bd0:	200002ad 	.word	0x200002ad

08005bd4 <Reset_homing>:
void Reset_homing(HOME* home){
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
	home -> homing_state[0] = 0;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	701a      	strb	r2, [r3, #0]
	home -> homing_state[1] = 0;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	705a      	strb	r2, [r3, #1]
	home -> homing_command = 0;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	709a      	strb	r2, [r3, #2]
	home -> homing_first = 0;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	711a      	strb	r2, [r3, #4]
	home -> homing_sec = 0;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	715a      	strb	r2, [r3, #5]
	home -> homing_ts = 0;
 8005bfa:	6879      	ldr	r1, [r7, #4]
 8005bfc:	f04f 0200 	mov.w	r2, #0
 8005c00:	f04f 0300 	mov.w	r3, #0
 8005c04:	e9c1 2302 	strd	r2, r3, [r1, #8]
	home -> is_home = 0;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	70da      	strb	r2, [r3, #3]
	home -> pwm = 0;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	821a      	strh	r2, [r3, #16]
	home -> state_check = 0;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	719a      	strb	r2, [r3, #6]
}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <emer_init>:

void emer_init(EMER* emer){
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
	emer -> emer_state = 0;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	701a      	strb	r2, [r3, #0]
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c46:	4b0f      	ldr	r3, [pc, #60]	@ (8005c84 <HAL_MspInit+0x44>)
 8005c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c4a:	4a0e      	ldr	r2, [pc, #56]	@ (8005c84 <HAL_MspInit+0x44>)
 8005c4c:	f043 0301 	orr.w	r3, r3, #1
 8005c50:	6613      	str	r3, [r2, #96]	@ 0x60
 8005c52:	4b0c      	ldr	r3, [pc, #48]	@ (8005c84 <HAL_MspInit+0x44>)
 8005c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	607b      	str	r3, [r7, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c5e:	4b09      	ldr	r3, [pc, #36]	@ (8005c84 <HAL_MspInit+0x44>)
 8005c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c62:	4a08      	ldr	r2, [pc, #32]	@ (8005c84 <HAL_MspInit+0x44>)
 8005c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c68:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c6a:	4b06      	ldr	r3, [pc, #24]	@ (8005c84 <HAL_MspInit+0x44>)
 8005c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c72:	603b      	str	r3, [r7, #0]
 8005c74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8005c76:	f003 f883 	bl	8008d80 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c7a:	bf00      	nop
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	40021000 	.word	0x40021000

08005c88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b09e      	sub	sp, #120	@ 0x78
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c90:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005c94:	2200      	movs	r2, #0
 8005c96:	601a      	str	r2, [r3, #0]
 8005c98:	605a      	str	r2, [r3, #4]
 8005c9a:	609a      	str	r2, [r3, #8]
 8005c9c:	60da      	str	r2, [r3, #12]
 8005c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005ca0:	f107 0310 	add.w	r3, r7, #16
 8005ca4:	2254      	movs	r2, #84	@ 0x54
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f008 f8da 	bl	800de62 <memset>
  if(hadc->Instance==ADC1)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005cb6:	d167      	bne.n	8005d88 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8005cb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cbc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8005cbe:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005cc2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005cc4:	f107 0310 	add.w	r3, r7, #16
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f003 fd97 	bl	80097fc <HAL_RCCEx_PeriphCLKConfig>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d001      	beq.n	8005cd8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8005cd4:	f7ff f8c0 	bl	8004e58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8005cd8:	4b2d      	ldr	r3, [pc, #180]	@ (8005d90 <HAL_ADC_MspInit+0x108>)
 8005cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cdc:	4a2c      	ldr	r2, [pc, #176]	@ (8005d90 <HAL_ADC_MspInit+0x108>)
 8005cde:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005ce2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8005d90 <HAL_ADC_MspInit+0x108>)
 8005ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ce8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005cec:	60fb      	str	r3, [r7, #12]
 8005cee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cf0:	4b27      	ldr	r3, [pc, #156]	@ (8005d90 <HAL_ADC_MspInit+0x108>)
 8005cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cf4:	4a26      	ldr	r2, [pc, #152]	@ (8005d90 <HAL_ADC_MspInit+0x108>)
 8005cf6:	f043 0301 	orr.w	r3, r3, #1
 8005cfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005cfc:	4b24      	ldr	r3, [pc, #144]	@ (8005d90 <HAL_ADC_MspInit+0x108>)
 8005cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	60bb      	str	r3, [r7, #8]
 8005d06:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Current_sensor_Pin;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d10:	2300      	movs	r3, #0
 8005d12:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Current_sensor_GPIO_Port, &GPIO_InitStruct);
 8005d14:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005d18:	4619      	mov	r1, r3
 8005d1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005d1e:	f002 fdc1 	bl	80088a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8005d22:	4b1c      	ldr	r3, [pc, #112]	@ (8005d94 <HAL_ADC_MspInit+0x10c>)
 8005d24:	4a1c      	ldr	r2, [pc, #112]	@ (8005d98 <HAL_ADC_MspInit+0x110>)
 8005d26:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8005d28:	4b1a      	ldr	r3, [pc, #104]	@ (8005d94 <HAL_ADC_MspInit+0x10c>)
 8005d2a:	2205      	movs	r2, #5
 8005d2c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d2e:	4b19      	ldr	r3, [pc, #100]	@ (8005d94 <HAL_ADC_MspInit+0x10c>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d34:	4b17      	ldr	r3, [pc, #92]	@ (8005d94 <HAL_ADC_MspInit+0x10c>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005d3a:	4b16      	ldr	r3, [pc, #88]	@ (8005d94 <HAL_ADC_MspInit+0x10c>)
 8005d3c:	2280      	movs	r2, #128	@ 0x80
 8005d3e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005d40:	4b14      	ldr	r3, [pc, #80]	@ (8005d94 <HAL_ADC_MspInit+0x10c>)
 8005d42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d46:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005d48:	4b12      	ldr	r3, [pc, #72]	@ (8005d94 <HAL_ADC_MspInit+0x10c>)
 8005d4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d4e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005d50:	4b10      	ldr	r3, [pc, #64]	@ (8005d94 <HAL_ADC_MspInit+0x10c>)
 8005d52:	2220      	movs	r2, #32
 8005d54:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005d56:	4b0f      	ldr	r3, [pc, #60]	@ (8005d94 <HAL_ADC_MspInit+0x10c>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005d5c:	480d      	ldr	r0, [pc, #52]	@ (8005d94 <HAL_ADC_MspInit+0x10c>)
 8005d5e:	f002 fa6f 	bl	8008240 <HAL_DMA_Init>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8005d68:	f7ff f876 	bl	8004e58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a09      	ldr	r2, [pc, #36]	@ (8005d94 <HAL_ADC_MspInit+0x10c>)
 8005d70:	655a      	str	r2, [r3, #84]	@ 0x54
 8005d72:	4a08      	ldr	r2, [pc, #32]	@ (8005d94 <HAL_ADC_MspInit+0x10c>)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	2012      	movs	r0, #18
 8005d7e:	f002 fa2a 	bl	80081d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005d82:	2012      	movs	r0, #18
 8005d84:	f002 fa41 	bl	800820a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005d88:	bf00      	nop
 8005d8a:	3778      	adds	r7, #120	@ 0x78
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	40021000 	.word	0x40021000
 8005d94:	200008cc 	.word	0x200008cc
 8005d98:	40020008 	.word	0x40020008

08005d9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a40      	ldr	r2, [pc, #256]	@ (8005eac <HAL_TIM_Base_MspInit+0x110>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d147      	bne.n	8005e3e <HAL_TIM_Base_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005dae:	4b40      	ldr	r3, [pc, #256]	@ (8005eb0 <HAL_TIM_Base_MspInit+0x114>)
 8005db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005db2:	4a3f      	ldr	r2, [pc, #252]	@ (8005eb0 <HAL_TIM_Base_MspInit+0x114>)
 8005db4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005db8:	6613      	str	r3, [r2, #96]	@ 0x60
 8005dba:	4b3d      	ldr	r3, [pc, #244]	@ (8005eb0 <HAL_TIM_Base_MspInit+0x114>)
 8005dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dc2:	617b      	str	r3, [r7, #20]
 8005dc4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel4;
 8005dc6:	4b3b      	ldr	r3, [pc, #236]	@ (8005eb4 <HAL_TIM_Base_MspInit+0x118>)
 8005dc8:	4a3b      	ldr	r2, [pc, #236]	@ (8005eb8 <HAL_TIM_Base_MspInit+0x11c>)
 8005dca:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8005dcc:	4b39      	ldr	r3, [pc, #228]	@ (8005eb4 <HAL_TIM_Base_MspInit+0x118>)
 8005dce:	222a      	movs	r2, #42	@ 0x2a
 8005dd0:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005dd2:	4b38      	ldr	r3, [pc, #224]	@ (8005eb4 <HAL_TIM_Base_MspInit+0x118>)
 8005dd4:	2210      	movs	r2, #16
 8005dd6:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005dd8:	4b36      	ldr	r3, [pc, #216]	@ (8005eb4 <HAL_TIM_Base_MspInit+0x118>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005dde:	4b35      	ldr	r3, [pc, #212]	@ (8005eb4 <HAL_TIM_Base_MspInit+0x118>)
 8005de0:	2280      	movs	r2, #128	@ 0x80
 8005de2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005de4:	4b33      	ldr	r3, [pc, #204]	@ (8005eb4 <HAL_TIM_Base_MspInit+0x118>)
 8005de6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005dea:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005dec:	4b31      	ldr	r3, [pc, #196]	@ (8005eb4 <HAL_TIM_Base_MspInit+0x118>)
 8005dee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005df2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8005df4:	4b2f      	ldr	r3, [pc, #188]	@ (8005eb4 <HAL_TIM_Base_MspInit+0x118>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8005dfa:	4b2e      	ldr	r3, [pc, #184]	@ (8005eb4 <HAL_TIM_Base_MspInit+0x118>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8005e00:	482c      	ldr	r0, [pc, #176]	@ (8005eb4 <HAL_TIM_Base_MspInit+0x118>)
 8005e02:	f002 fa1d 	bl	8008240 <HAL_DMA_Init>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8005e0c:	f7ff f824 	bl	8004e58 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a28      	ldr	r2, [pc, #160]	@ (8005eb4 <HAL_TIM_Base_MspInit+0x118>)
 8005e14:	625a      	str	r2, [r3, #36]	@ 0x24
 8005e16:	4a27      	ldr	r2, [pc, #156]	@ (8005eb4 <HAL_TIM_Base_MspInit+0x118>)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	2100      	movs	r1, #0
 8005e20:	2019      	movs	r0, #25
 8005e22:	f002 f9d8 	bl	80081d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005e26:	2019      	movs	r0, #25
 8005e28:	f002 f9ef 	bl	800820a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	2100      	movs	r1, #0
 8005e30:	201a      	movs	r0, #26
 8005e32:	f002 f9d0 	bl	80081d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8005e36:	201a      	movs	r0, #26
 8005e38:	f002 f9e7 	bl	800820a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8005e3c:	e032      	b.n	8005ea4 <HAL_TIM_Base_MspInit+0x108>
  else if(htim_base->Instance==TIM3)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a1e      	ldr	r2, [pc, #120]	@ (8005ebc <HAL_TIM_Base_MspInit+0x120>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d114      	bne.n	8005e72 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005e48:	4b19      	ldr	r3, [pc, #100]	@ (8005eb0 <HAL_TIM_Base_MspInit+0x114>)
 8005e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e4c:	4a18      	ldr	r2, [pc, #96]	@ (8005eb0 <HAL_TIM_Base_MspInit+0x114>)
 8005e4e:	f043 0302 	orr.w	r3, r3, #2
 8005e52:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e54:	4b16      	ldr	r3, [pc, #88]	@ (8005eb0 <HAL_TIM_Base_MspInit+0x114>)
 8005e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	613b      	str	r3, [r7, #16]
 8005e5e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005e60:	2200      	movs	r2, #0
 8005e62:	2100      	movs	r1, #0
 8005e64:	201d      	movs	r0, #29
 8005e66:	f002 f9b6 	bl	80081d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005e6a:	201d      	movs	r0, #29
 8005e6c:	f002 f9cd 	bl	800820a <HAL_NVIC_EnableIRQ>
}
 8005e70:	e018      	b.n	8005ea4 <HAL_TIM_Base_MspInit+0x108>
  else if(htim_base->Instance==TIM16)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a12      	ldr	r2, [pc, #72]	@ (8005ec0 <HAL_TIM_Base_MspInit+0x124>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d113      	bne.n	8005ea4 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8005eb0 <HAL_TIM_Base_MspInit+0x114>)
 8005e7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e80:	4a0b      	ldr	r2, [pc, #44]	@ (8005eb0 <HAL_TIM_Base_MspInit+0x114>)
 8005e82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e86:	6613      	str	r3, [r2, #96]	@ 0x60
 8005e88:	4b09      	ldr	r3, [pc, #36]	@ (8005eb0 <HAL_TIM_Base_MspInit+0x114>)
 8005e8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005e94:	2200      	movs	r2, #0
 8005e96:	2100      	movs	r1, #0
 8005e98:	2019      	movs	r0, #25
 8005e9a:	f002 f99c 	bl	80081d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005e9e:	2019      	movs	r0, #25
 8005ea0:	f002 f9b3 	bl	800820a <HAL_NVIC_EnableIRQ>
}
 8005ea4:	bf00      	nop
 8005ea6:	3718      	adds	r7, #24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	40012c00 	.word	0x40012c00
 8005eb0:	40021000 	.word	0x40021000
 8005eb4:	20000c5c 	.word	0x20000c5c
 8005eb8:	40020044 	.word	0x40020044
 8005ebc:	40000400 	.word	0x40000400
 8005ec0:	40014400 	.word	0x40014400

08005ec4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b08a      	sub	sp, #40	@ 0x28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ecc:	f107 0314 	add.w	r3, r7, #20
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	605a      	str	r2, [r3, #4]
 8005ed6:	609a      	str	r2, [r3, #8]
 8005ed8:	60da      	str	r2, [r3, #12]
 8005eda:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a1c      	ldr	r2, [pc, #112]	@ (8005f54 <HAL_TIM_Encoder_MspInit+0x90>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d131      	bne.n	8005f4a <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8005f58 <HAL_TIM_Encoder_MspInit+0x94>)
 8005ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eea:	4a1b      	ldr	r2, [pc, #108]	@ (8005f58 <HAL_TIM_Encoder_MspInit+0x94>)
 8005eec:	f043 0304 	orr.w	r3, r3, #4
 8005ef0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ef2:	4b19      	ldr	r3, [pc, #100]	@ (8005f58 <HAL_TIM_Encoder_MspInit+0x94>)
 8005ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ef6:	f003 0304 	and.w	r3, r3, #4
 8005efa:	613b      	str	r3, [r7, #16]
 8005efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005efe:	4b16      	ldr	r3, [pc, #88]	@ (8005f58 <HAL_TIM_Encoder_MspInit+0x94>)
 8005f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f02:	4a15      	ldr	r2, [pc, #84]	@ (8005f58 <HAL_TIM_Encoder_MspInit+0x94>)
 8005f04:	f043 0301 	orr.w	r3, r3, #1
 8005f08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f0a:	4b13      	ldr	r3, [pc, #76]	@ (8005f58 <HAL_TIM_Encoder_MspInit+0x94>)
 8005f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	60fb      	str	r3, [r7, #12]
 8005f14:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
 8005f16:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f20:	2300      	movs	r3, #0
 8005f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f24:	2300      	movs	r3, #0
 8005f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8005f28:	230a      	movs	r3, #10
 8005f2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f2c:	f107 0314 	add.w	r3, r7, #20
 8005f30:	4619      	mov	r1, r3
 8005f32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005f36:	f002 fcb5 	bl	80088a4 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	201e      	movs	r0, #30
 8005f40:	f002 f949 	bl	80081d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005f44:	201e      	movs	r0, #30
 8005f46:	f002 f960 	bl	800820a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005f4a:	bf00      	nop
 8005f4c:	3728      	adds	r7, #40	@ 0x28
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	40000800 	.word	0x40000800
 8005f58:	40021000 	.word	0x40021000

08005f5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b088      	sub	sp, #32
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f64:	f107 030c 	add.w	r3, r7, #12
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	605a      	str	r2, [r3, #4]
 8005f6e:	609a      	str	r2, [r3, #8]
 8005f70:	60da      	str	r2, [r3, #12]
 8005f72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a11      	ldr	r2, [pc, #68]	@ (8005fc0 <HAL_TIM_MspPostInit+0x64>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d11b      	bne.n	8005fb6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f7e:	4b11      	ldr	r3, [pc, #68]	@ (8005fc4 <HAL_TIM_MspPostInit+0x68>)
 8005f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f82:	4a10      	ldr	r2, [pc, #64]	@ (8005fc4 <HAL_TIM_MspPostInit+0x68>)
 8005f84:	f043 0304 	orr.w	r3, r3, #4
 8005f88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8005fc4 <HAL_TIM_MspPostInit+0x68>)
 8005f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f8e:	f003 0304 	and.w	r3, r3, #4
 8005f92:	60bb      	str	r3, [r7, #8]
 8005f94:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_signal_Pin;
 8005f96:	2301      	movs	r3, #1
 8005f98:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_signal_GPIO_Port, &GPIO_InitStruct);
 8005faa:	f107 030c 	add.w	r3, r7, #12
 8005fae:	4619      	mov	r1, r3
 8005fb0:	4805      	ldr	r0, [pc, #20]	@ (8005fc8 <HAL_TIM_MspPostInit+0x6c>)
 8005fb2:	f002 fc77 	bl	80088a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005fb6:	bf00      	nop
 8005fb8:	3720      	adds	r7, #32
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	40012c00 	.word	0x40012c00
 8005fc4:	40021000 	.word	0x40021000
 8005fc8:	48000800 	.word	0x48000800

08005fcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b09e      	sub	sp, #120	@ 0x78
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fd4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005fd8:	2200      	movs	r2, #0
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	605a      	str	r2, [r3, #4]
 8005fde:	609a      	str	r2, [r3, #8]
 8005fe0:	60da      	str	r2, [r3, #12]
 8005fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005fe4:	f107 0310 	add.w	r3, r7, #16
 8005fe8:	2254      	movs	r2, #84	@ 0x54
 8005fea:	2100      	movs	r1, #0
 8005fec:	4618      	mov	r0, r3
 8005fee:	f007 ff38 	bl	800de62 <memset>
  if(huart->Instance==USART2)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a4d      	ldr	r2, [pc, #308]	@ (800612c <HAL_UART_MspInit+0x160>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	f040 8092 	bne.w	8006122 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005ffe:	2302      	movs	r3, #2
 8006000:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006002:	2300      	movs	r3, #0
 8006004:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006006:	f107 0310 	add.w	r3, r7, #16
 800600a:	4618      	mov	r0, r3
 800600c:	f003 fbf6 	bl	80097fc <HAL_RCCEx_PeriphCLKConfig>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006016:	f7fe ff1f 	bl	8004e58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800601a:	4b45      	ldr	r3, [pc, #276]	@ (8006130 <HAL_UART_MspInit+0x164>)
 800601c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800601e:	4a44      	ldr	r2, [pc, #272]	@ (8006130 <HAL_UART_MspInit+0x164>)
 8006020:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006024:	6593      	str	r3, [r2, #88]	@ 0x58
 8006026:	4b42      	ldr	r3, [pc, #264]	@ (8006130 <HAL_UART_MspInit+0x164>)
 8006028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800602a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800602e:	60fb      	str	r3, [r7, #12]
 8006030:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006032:	4b3f      	ldr	r3, [pc, #252]	@ (8006130 <HAL_UART_MspInit+0x164>)
 8006034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006036:	4a3e      	ldr	r2, [pc, #248]	@ (8006130 <HAL_UART_MspInit+0x164>)
 8006038:	f043 0301 	orr.w	r3, r3, #1
 800603c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800603e:	4b3c      	ldr	r3, [pc, #240]	@ (8006130 <HAL_UART_MspInit+0x164>)
 8006040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	60bb      	str	r3, [r7, #8]
 8006048:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800604a:	230c      	movs	r3, #12
 800604c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800604e:	2302      	movs	r3, #2
 8006050:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006052:	2300      	movs	r3, #0
 8006054:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006056:	2300      	movs	r3, #0
 8006058:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800605a:	2307      	movs	r3, #7
 800605c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800605e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8006062:	4619      	mov	r1, r3
 8006064:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006068:	f002 fc1c 	bl	80088a4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800606c:	4b31      	ldr	r3, [pc, #196]	@ (8006134 <HAL_UART_MspInit+0x168>)
 800606e:	4a32      	ldr	r2, [pc, #200]	@ (8006138 <HAL_UART_MspInit+0x16c>)
 8006070:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8006072:	4b30      	ldr	r3, [pc, #192]	@ (8006134 <HAL_UART_MspInit+0x168>)
 8006074:	221a      	movs	r2, #26
 8006076:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006078:	4b2e      	ldr	r3, [pc, #184]	@ (8006134 <HAL_UART_MspInit+0x168>)
 800607a:	2200      	movs	r2, #0
 800607c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800607e:	4b2d      	ldr	r3, [pc, #180]	@ (8006134 <HAL_UART_MspInit+0x168>)
 8006080:	2200      	movs	r2, #0
 8006082:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006084:	4b2b      	ldr	r3, [pc, #172]	@ (8006134 <HAL_UART_MspInit+0x168>)
 8006086:	2280      	movs	r2, #128	@ 0x80
 8006088:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800608a:	4b2a      	ldr	r3, [pc, #168]	@ (8006134 <HAL_UART_MspInit+0x168>)
 800608c:	2200      	movs	r2, #0
 800608e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006090:	4b28      	ldr	r3, [pc, #160]	@ (8006134 <HAL_UART_MspInit+0x168>)
 8006092:	2200      	movs	r2, #0
 8006094:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006096:	4b27      	ldr	r3, [pc, #156]	@ (8006134 <HAL_UART_MspInit+0x168>)
 8006098:	2200      	movs	r2, #0
 800609a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800609c:	4b25      	ldr	r3, [pc, #148]	@ (8006134 <HAL_UART_MspInit+0x168>)
 800609e:	2200      	movs	r2, #0
 80060a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80060a2:	4824      	ldr	r0, [pc, #144]	@ (8006134 <HAL_UART_MspInit+0x168>)
 80060a4:	f002 f8cc 	bl	8008240 <HAL_DMA_Init>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80060ae:	f7fe fed3 	bl	8004e58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a1f      	ldr	r2, [pc, #124]	@ (8006134 <HAL_UART_MspInit+0x168>)
 80060b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80060ba:	4a1e      	ldr	r2, [pc, #120]	@ (8006134 <HAL_UART_MspInit+0x168>)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 80060c0:	4b1e      	ldr	r3, [pc, #120]	@ (800613c <HAL_UART_MspInit+0x170>)
 80060c2:	4a1f      	ldr	r2, [pc, #124]	@ (8006140 <HAL_UART_MspInit+0x174>)
 80060c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80060c6:	4b1d      	ldr	r3, [pc, #116]	@ (800613c <HAL_UART_MspInit+0x170>)
 80060c8:	221b      	movs	r2, #27
 80060ca:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80060cc:	4b1b      	ldr	r3, [pc, #108]	@ (800613c <HAL_UART_MspInit+0x170>)
 80060ce:	2210      	movs	r2, #16
 80060d0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80060d2:	4b1a      	ldr	r3, [pc, #104]	@ (800613c <HAL_UART_MspInit+0x170>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80060d8:	4b18      	ldr	r3, [pc, #96]	@ (800613c <HAL_UART_MspInit+0x170>)
 80060da:	2280      	movs	r2, #128	@ 0x80
 80060dc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80060de:	4b17      	ldr	r3, [pc, #92]	@ (800613c <HAL_UART_MspInit+0x170>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80060e4:	4b15      	ldr	r3, [pc, #84]	@ (800613c <HAL_UART_MspInit+0x170>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80060ea:	4b14      	ldr	r3, [pc, #80]	@ (800613c <HAL_UART_MspInit+0x170>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80060f0:	4b12      	ldr	r3, [pc, #72]	@ (800613c <HAL_UART_MspInit+0x170>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80060f6:	4811      	ldr	r0, [pc, #68]	@ (800613c <HAL_UART_MspInit+0x170>)
 80060f8:	f002 f8a2 	bl	8008240 <HAL_DMA_Init>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8006102:	f7fe fea9 	bl	8004e58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a0c      	ldr	r2, [pc, #48]	@ (800613c <HAL_UART_MspInit+0x170>)
 800610a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800610c:	4a0b      	ldr	r2, [pc, #44]	@ (800613c <HAL_UART_MspInit+0x170>)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006112:	2200      	movs	r2, #0
 8006114:	2100      	movs	r1, #0
 8006116:	2026      	movs	r0, #38	@ 0x26
 8006118:	f002 f85d 	bl	80081d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800611c:	2026      	movs	r0, #38	@ 0x26
 800611e:	f002 f874 	bl	800820a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006122:	bf00      	nop
 8006124:	3778      	adds	r7, #120	@ 0x78
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	40004400 	.word	0x40004400
 8006130:	40021000 	.word	0x40021000
 8006134:	20000d88 	.word	0x20000d88
 8006138:	4002001c 	.word	0x4002001c
 800613c:	20000de8 	.word	0x20000de8
 8006140:	40020030 	.word	0x40020030

08006144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006144:	b480      	push	{r7}
 8006146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006148:	bf00      	nop
 800614a:	e7fd      	b.n	8006148 <NMI_Handler+0x4>

0800614c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800614c:	b480      	push	{r7}
 800614e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006150:	bf00      	nop
 8006152:	e7fd      	b.n	8006150 <HardFault_Handler+0x4>

08006154 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006154:	b480      	push	{r7}
 8006156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006158:	bf00      	nop
 800615a:	e7fd      	b.n	8006158 <MemManage_Handler+0x4>

0800615c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800615c:	b480      	push	{r7}
 800615e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006160:	bf00      	nop
 8006162:	e7fd      	b.n	8006160 <BusFault_Handler+0x4>

08006164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006164:	b480      	push	{r7}
 8006166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006168:	bf00      	nop
 800616a:	e7fd      	b.n	8006168 <UsageFault_Handler+0x4>

0800616c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800616c:	b480      	push	{r7}
 800616e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006170:	bf00      	nop
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800617a:	b480      	push	{r7}
 800617c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800617e:	bf00      	nop
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006188:	b480      	push	{r7}
 800618a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800618c:	bf00      	nop
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800619a:	f000 f901 	bl	80063a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800619e:	bf00      	nop
 80061a0:	bd80      	pop	{r7, pc}
	...

080061a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80061a8:	4802      	ldr	r0, [pc, #8]	@ (80061b4 <DMA1_Channel1_IRQHandler+0x10>)
 80061aa:	f002 fa2c 	bl	8008606 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80061ae:	bf00      	nop
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	200008cc 	.word	0x200008cc

080061b8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80061bc:	4802      	ldr	r0, [pc, #8]	@ (80061c8 <DMA1_Channel2_IRQHandler+0x10>)
 80061be:	f002 fa22 	bl	8008606 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80061c2:	bf00      	nop
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	20000d88 	.word	0x20000d88

080061cc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80061d0:	4802      	ldr	r0, [pc, #8]	@ (80061dc <DMA1_Channel3_IRQHandler+0x10>)
 80061d2:	f002 fa18 	bl	8008606 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80061d6:	bf00      	nop
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	20000de8 	.word	0x20000de8

080061e0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80061e4:	4802      	ldr	r0, [pc, #8]	@ (80061f0 <DMA1_Channel4_IRQHandler+0x10>)
 80061e6:	f002 fa0e 	bl	8008606 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80061ea:	bf00      	nop
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	20000c5c 	.word	0x20000c5c

080061f4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80061f8:	4802      	ldr	r0, [pc, #8]	@ (8006204 <ADC1_2_IRQHandler+0x10>)
 80061fa:	f000 fdbf 	bl	8006d7c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80061fe:	bf00      	nop
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	20000860 	.word	0x20000860

08006208 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800620c:	4803      	ldr	r0, [pc, #12]	@ (800621c <TIM1_UP_TIM16_IRQHandler+0x14>)
 800620e:	f004 faee 	bl	800a7ee <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8006212:	4803      	ldr	r0, [pc, #12]	@ (8006220 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8006214:	f004 faeb 	bl	800a7ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8006218:	bf00      	nop
 800621a:	bd80      	pop	{r7, pc}
 800621c:	2000092c 	.word	0x2000092c
 8006220:	20000b90 	.word	0x20000b90

08006224 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006228:	4802      	ldr	r0, [pc, #8]	@ (8006234 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800622a:	f004 fae0 	bl	800a7ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800622e:	bf00      	nop
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	2000092c 	.word	0x2000092c

08006238 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800623c:	4802      	ldr	r0, [pc, #8]	@ (8006248 <TIM3_IRQHandler+0x10>)
 800623e:	f004 fad6 	bl	800a7ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006242:	bf00      	nop
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	200009f8 	.word	0x200009f8

0800624c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006250:	4802      	ldr	r0, [pc, #8]	@ (800625c <TIM4_IRQHandler+0x10>)
 8006252:	f004 facc 	bl	800a7ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006256:	bf00      	nop
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	20000ac4 	.word	0x20000ac4

08006260 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006264:	4802      	ldr	r0, [pc, #8]	@ (8006270 <USART2_IRQHandler+0x10>)
 8006266:	f006 f895 	bl	800c394 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800626a:	bf00      	nop
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	20000cbc 	.word	0x20000cbc

08006274 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8006278:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800627c:	f002 fcc4 	bl	8008c08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006280:	bf00      	nop
 8006282:	bd80      	pop	{r7, pc}

08006284 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006284:	b480      	push	{r7}
 8006286:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006288:	4b06      	ldr	r3, [pc, #24]	@ (80062a4 <SystemInit+0x20>)
 800628a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800628e:	4a05      	ldr	r2, [pc, #20]	@ (80062a4 <SystemInit+0x20>)
 8006290:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006294:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006298:	bf00      	nop
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	e000ed00 	.word	0xe000ed00

080062a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80062a8:	480d      	ldr	r0, [pc, #52]	@ (80062e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80062aa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80062ac:	f7ff ffea 	bl	8006284 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80062b0:	480c      	ldr	r0, [pc, #48]	@ (80062e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80062b2:	490d      	ldr	r1, [pc, #52]	@ (80062e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80062b4:	4a0d      	ldr	r2, [pc, #52]	@ (80062ec <LoopForever+0xe>)
  movs r3, #0
 80062b6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80062b8:	e002      	b.n	80062c0 <LoopCopyDataInit>

080062ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80062ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80062bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80062be:	3304      	adds	r3, #4

080062c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80062c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80062c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80062c4:	d3f9      	bcc.n	80062ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80062c6:	4a0a      	ldr	r2, [pc, #40]	@ (80062f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80062c8:	4c0a      	ldr	r4, [pc, #40]	@ (80062f4 <LoopForever+0x16>)
  movs r3, #0
 80062ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80062cc:	e001      	b.n	80062d2 <LoopFillZerobss>

080062ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80062ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80062d0:	3204      	adds	r2, #4

080062d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80062d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80062d4:	d3fb      	bcc.n	80062ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80062d6:	f007 fdd3 	bl	800de80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80062da:	f7fc fe0f 	bl	8002efc <main>

080062de <LoopForever>:

LoopForever:
    b LoopForever
 80062de:	e7fe      	b.n	80062de <LoopForever>
  ldr   r0, =_estack
 80062e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80062e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80062e8:	20000320 	.word	0x20000320
  ldr r2, =_sidata
 80062ec:	0800e2f8 	.word	0x0800e2f8
  ldr r2, =_sbss
 80062f0:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 80062f4:	20001774 	.word	0x20001774

080062f8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80062f8:	e7fe      	b.n	80062f8 <ADC3_IRQHandler>

080062fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b082      	sub	sp, #8
 80062fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006300:	2300      	movs	r3, #0
 8006302:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006304:	2003      	movs	r0, #3
 8006306:	f001 ff5b 	bl	80081c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800630a:	2000      	movs	r0, #0
 800630c:	f000 f80e 	bl	800632c <HAL_InitTick>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d002      	beq.n	800631c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	71fb      	strb	r3, [r7, #7]
 800631a:	e001      	b.n	8006320 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800631c:	f7ff fc90 	bl	8005c40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006320:	79fb      	ldrb	r3, [r7, #7]

}
 8006322:	4618      	mov	r0, r3
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
	...

0800632c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006334:	2300      	movs	r3, #0
 8006336:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8006338:	4b16      	ldr	r3, [pc, #88]	@ (8006394 <HAL_InitTick+0x68>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d022      	beq.n	8006386 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8006340:	4b15      	ldr	r3, [pc, #84]	@ (8006398 <HAL_InitTick+0x6c>)
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	4b13      	ldr	r3, [pc, #76]	@ (8006394 <HAL_InitTick+0x68>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800634c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006350:	fbb2 f3f3 	udiv	r3, r2, r3
 8006354:	4618      	mov	r0, r3
 8006356:	f001 ff66 	bl	8008226 <HAL_SYSTICK_Config>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10f      	bne.n	8006380 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b0f      	cmp	r3, #15
 8006364:	d809      	bhi.n	800637a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006366:	2200      	movs	r2, #0
 8006368:	6879      	ldr	r1, [r7, #4]
 800636a:	f04f 30ff 	mov.w	r0, #4294967295
 800636e:	f001 ff32 	bl	80081d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006372:	4a0a      	ldr	r2, [pc, #40]	@ (800639c <HAL_InitTick+0x70>)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6013      	str	r3, [r2, #0]
 8006378:	e007      	b.n	800638a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	73fb      	strb	r3, [r7, #15]
 800637e:	e004      	b.n	800638a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	73fb      	strb	r3, [r7, #15]
 8006384:	e001      	b.n	800638a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800638a:	7bfb      	ldrb	r3, [r7, #15]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	200002b8 	.word	0x200002b8
 8006398:	200002b0 	.word	0x200002b0
 800639c:	200002b4 	.word	0x200002b4

080063a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80063a0:	b480      	push	{r7}
 80063a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80063a4:	4b05      	ldr	r3, [pc, #20]	@ (80063bc <HAL_IncTick+0x1c>)
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	4b05      	ldr	r3, [pc, #20]	@ (80063c0 <HAL_IncTick+0x20>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4413      	add	r3, r2
 80063ae:	4a03      	ldr	r2, [pc, #12]	@ (80063bc <HAL_IncTick+0x1c>)
 80063b0:	6013      	str	r3, [r2, #0]
}
 80063b2:	bf00      	nop
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	20001638 	.word	0x20001638
 80063c0:	200002b8 	.word	0x200002b8

080063c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80063c4:	b480      	push	{r7}
 80063c6:	af00      	add	r7, sp, #0
  return uwTick;
 80063c8:	4b03      	ldr	r3, [pc, #12]	@ (80063d8 <HAL_GetTick+0x14>)
 80063ca:	681b      	ldr	r3, [r3, #0]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	20001638 	.word	0x20001638

080063dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	431a      	orrs	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	609a      	str	r2, [r3, #8]
}
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006402:	b480      	push	{r7}
 8006404:	b083      	sub	sp, #12
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	431a      	orrs	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	609a      	str	r2, [r3, #8]
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8006438:	4618      	mov	r0, r3
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006444:	b480      	push	{r7}
 8006446:	b087      	sub	sp, #28
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
 8006450:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	3360      	adds	r3, #96	@ 0x60
 8006456:	461a      	mov	r2, r3
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	4b08      	ldr	r3, [pc, #32]	@ (8006488 <LL_ADC_SetOffset+0x44>)
 8006466:	4013      	ands	r3, r2
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	430a      	orrs	r2, r1
 8006472:	4313      	orrs	r3, r2
 8006474:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800647c:	bf00      	nop
 800647e:	371c      	adds	r7, #28
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	03fff000 	.word	0x03fff000

0800648c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	3360      	adds	r3, #96	@ 0x60
 800649a:	461a      	mov	r2, r3
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	3360      	adds	r3, #96	@ 0x60
 80064c8:	461a      	mov	r2, r3
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	431a      	orrs	r2, r3
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80064e2:	bf00      	nop
 80064e4:	371c      	adds	r7, #28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b087      	sub	sp, #28
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	60f8      	str	r0, [r7, #12]
 80064f6:	60b9      	str	r1, [r7, #8]
 80064f8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	3360      	adds	r3, #96	@ 0x60
 80064fe:	461a      	mov	r2, r3
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	431a      	orrs	r2, r3
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006518:	bf00      	nop
 800651a:	371c      	adds	r7, #28
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	3360      	adds	r3, #96	@ 0x60
 8006534:	461a      	mov	r2, r3
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	431a      	orrs	r2, r3
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800654e:	bf00      	nop
 8006550:	371c      	adds	r7, #28
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800655a:	b480      	push	{r7}
 800655c:	b083      	sub	sp, #12
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	431a      	orrs	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	615a      	str	r2, [r3, #20]
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006594:	2301      	movs	r3, #1
 8006596:	e000      	b.n	800659a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b087      	sub	sp, #28
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	60f8      	str	r0, [r7, #12]
 80065ae:	60b9      	str	r1, [r7, #8]
 80065b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	3330      	adds	r3, #48	@ 0x30
 80065b6:	461a      	mov	r2, r3
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	0a1b      	lsrs	r3, r3, #8
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	f003 030c 	and.w	r3, r3, #12
 80065c2:	4413      	add	r3, r2
 80065c4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f003 031f 	and.w	r3, r3, #31
 80065d0:	211f      	movs	r1, #31
 80065d2:	fa01 f303 	lsl.w	r3, r1, r3
 80065d6:	43db      	mvns	r3, r3
 80065d8:	401a      	ands	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	0e9b      	lsrs	r3, r3, #26
 80065de:	f003 011f 	and.w	r1, r3, #31
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	f003 031f 	and.w	r3, r3, #31
 80065e8:	fa01 f303 	lsl.w	r3, r1, r3
 80065ec:	431a      	orrs	r2, r3
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80065f2:	bf00      	nop
 80065f4:	371c      	adds	r7, #28
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80065fe:	b480      	push	{r7}
 8006600:	b083      	sub	sp, #12
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800660a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8006612:	2301      	movs	r3, #1
 8006614:	e000      	b.n	8006618 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006624:	b480      	push	{r7}
 8006626:	b087      	sub	sp, #28
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	3314      	adds	r3, #20
 8006634:	461a      	mov	r2, r3
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	0e5b      	lsrs	r3, r3, #25
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	4413      	add	r3, r2
 8006642:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	0d1b      	lsrs	r3, r3, #20
 800664c:	f003 031f 	and.w	r3, r3, #31
 8006650:	2107      	movs	r1, #7
 8006652:	fa01 f303 	lsl.w	r3, r1, r3
 8006656:	43db      	mvns	r3, r3
 8006658:	401a      	ands	r2, r3
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	0d1b      	lsrs	r3, r3, #20
 800665e:	f003 031f 	and.w	r3, r3, #31
 8006662:	6879      	ldr	r1, [r7, #4]
 8006664:	fa01 f303 	lsl.w	r3, r1, r3
 8006668:	431a      	orrs	r2, r3
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800666e:	bf00      	nop
 8006670:	371c      	adds	r7, #28
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
	...

0800667c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006694:	43db      	mvns	r3, r3
 8006696:	401a      	ands	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f003 0318 	and.w	r3, r3, #24
 800669e:	4908      	ldr	r1, [pc, #32]	@ (80066c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80066a0:	40d9      	lsrs	r1, r3
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	400b      	ands	r3, r1
 80066a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066aa:	431a      	orrs	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80066b2:	bf00      	nop
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	0007ffff 	.word	0x0007ffff

080066c4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f003 031f 	and.w	r3, r3, #31
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800670c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	6093      	str	r3, [r2, #8]
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006730:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006734:	d101      	bne.n	800673a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006736:	2301      	movs	r3, #1
 8006738:	e000      	b.n	800673c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8006758:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800675c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006780:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006784:	d101      	bne.n	800678a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006786:	2301      	movs	r3, #1
 8006788:	e000      	b.n	800678c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80067a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80067ac:	f043 0201 	orr.w	r2, r3, #1
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d101      	bne.n	80067d8 <LL_ADC_IsEnabled+0x18>
 80067d4:	2301      	movs	r3, #1
 80067d6:	e000      	b.n	80067da <LL_ADC_IsEnabled+0x1a>
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	370c      	adds	r7, #12
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b083      	sub	sp, #12
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80067f6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80067fa:	f043 0204 	orr.w	r2, r3, #4
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006802:	bf00      	nop
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800680e:	b480      	push	{r7}
 8006810:	b083      	sub	sp, #12
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f003 0304 	and.w	r3, r3, #4
 800681e:	2b04      	cmp	r3, #4
 8006820:	d101      	bne.n	8006826 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006822:	2301      	movs	r3, #1
 8006824:	e000      	b.n	8006828 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f003 0308 	and.w	r3, r3, #8
 8006844:	2b08      	cmp	r3, #8
 8006846:	d101      	bne.n	800684c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006848:	2301      	movs	r3, #1
 800684a:	e000      	b.n	800684e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
	...

0800685c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800685c:	b590      	push	{r4, r7, lr}
 800685e:	b089      	sub	sp, #36	@ 0x24
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006864:	2300      	movs	r3, #0
 8006866:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8006868:	2300      	movs	r3, #0
 800686a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e1a9      	b.n	8006bca <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006880:	2b00      	cmp	r3, #0
 8006882:	d109      	bne.n	8006898 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7ff f9ff 	bl	8005c88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4618      	mov	r0, r3
 800689e:	f7ff ff3f 	bl	8006720 <LL_ADC_IsDeepPowerDownEnabled>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d004      	beq.n	80068b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7ff ff25 	bl	80066fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4618      	mov	r0, r3
 80068b8:	f7ff ff5a 	bl	8006770 <LL_ADC_IsInternalRegulatorEnabled>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d115      	bne.n	80068ee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7ff ff3e 	bl	8006748 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80068cc:	4b9c      	ldr	r3, [pc, #624]	@ (8006b40 <HAL_ADC_Init+0x2e4>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	099b      	lsrs	r3, r3, #6
 80068d2:	4a9c      	ldr	r2, [pc, #624]	@ (8006b44 <HAL_ADC_Init+0x2e8>)
 80068d4:	fba2 2303 	umull	r2, r3, r2, r3
 80068d8:	099b      	lsrs	r3, r3, #6
 80068da:	3301      	adds	r3, #1
 80068dc:	005b      	lsls	r3, r3, #1
 80068de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80068e0:	e002      	b.n	80068e8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3b01      	subs	r3, #1
 80068e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1f9      	bne.n	80068e2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7ff ff3c 	bl	8006770 <LL_ADC_IsInternalRegulatorEnabled>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10d      	bne.n	800691a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006902:	f043 0210 	orr.w	r2, r3, #16
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800690e:	f043 0201 	orr.w	r2, r3, #1
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4618      	mov	r0, r3
 8006920:	f7ff ff75 	bl	800680e <LL_ADC_REG_IsConversionOngoing>
 8006924:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800692a:	f003 0310 	and.w	r3, r3, #16
 800692e:	2b00      	cmp	r3, #0
 8006930:	f040 8142 	bne.w	8006bb8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	2b00      	cmp	r3, #0
 8006938:	f040 813e 	bne.w	8006bb8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006940:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8006944:	f043 0202 	orr.w	r2, r3, #2
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4618      	mov	r0, r3
 8006952:	f7ff ff35 	bl	80067c0 <LL_ADC_IsEnabled>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d141      	bne.n	80069e0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006964:	d004      	beq.n	8006970 <HAL_ADC_Init+0x114>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a77      	ldr	r2, [pc, #476]	@ (8006b48 <HAL_ADC_Init+0x2ec>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d10f      	bne.n	8006990 <HAL_ADC_Init+0x134>
 8006970:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006974:	f7ff ff24 	bl	80067c0 <LL_ADC_IsEnabled>
 8006978:	4604      	mov	r4, r0
 800697a:	4873      	ldr	r0, [pc, #460]	@ (8006b48 <HAL_ADC_Init+0x2ec>)
 800697c:	f7ff ff20 	bl	80067c0 <LL_ADC_IsEnabled>
 8006980:	4603      	mov	r3, r0
 8006982:	4323      	orrs	r3, r4
 8006984:	2b00      	cmp	r3, #0
 8006986:	bf0c      	ite	eq
 8006988:	2301      	moveq	r3, #1
 800698a:	2300      	movne	r3, #0
 800698c:	b2db      	uxtb	r3, r3
 800698e:	e012      	b.n	80069b6 <HAL_ADC_Init+0x15a>
 8006990:	486e      	ldr	r0, [pc, #440]	@ (8006b4c <HAL_ADC_Init+0x2f0>)
 8006992:	f7ff ff15 	bl	80067c0 <LL_ADC_IsEnabled>
 8006996:	4604      	mov	r4, r0
 8006998:	486d      	ldr	r0, [pc, #436]	@ (8006b50 <HAL_ADC_Init+0x2f4>)
 800699a:	f7ff ff11 	bl	80067c0 <LL_ADC_IsEnabled>
 800699e:	4603      	mov	r3, r0
 80069a0:	431c      	orrs	r4, r3
 80069a2:	486c      	ldr	r0, [pc, #432]	@ (8006b54 <HAL_ADC_Init+0x2f8>)
 80069a4:	f7ff ff0c 	bl	80067c0 <LL_ADC_IsEnabled>
 80069a8:	4603      	mov	r3, r0
 80069aa:	4323      	orrs	r3, r4
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	bf0c      	ite	eq
 80069b0:	2301      	moveq	r3, #1
 80069b2:	2300      	movne	r3, #0
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d012      	beq.n	80069e0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80069c2:	d004      	beq.n	80069ce <HAL_ADC_Init+0x172>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a5f      	ldr	r2, [pc, #380]	@ (8006b48 <HAL_ADC_Init+0x2ec>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d101      	bne.n	80069d2 <HAL_ADC_Init+0x176>
 80069ce:	4a62      	ldr	r2, [pc, #392]	@ (8006b58 <HAL_ADC_Init+0x2fc>)
 80069d0:	e000      	b.n	80069d4 <HAL_ADC_Init+0x178>
 80069d2:	4a62      	ldr	r2, [pc, #392]	@ (8006b5c <HAL_ADC_Init+0x300>)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	4619      	mov	r1, r3
 80069da:	4610      	mov	r0, r2
 80069dc:	f7ff fcfe 	bl	80063dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	7f5b      	ldrb	r3, [r3, #29]
 80069e4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80069ea:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80069f0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80069f6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80069fe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006a00:	4313      	orrs	r3, r2
 8006a02:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d106      	bne.n	8006a1c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a12:	3b01      	subs	r3, #1
 8006a14:	045b      	lsls	r3, r3, #17
 8006a16:	69ba      	ldr	r2, [r7, #24]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d009      	beq.n	8006a38 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a28:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a30:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006a32:	69ba      	ldr	r2, [r7, #24]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	4b48      	ldr	r3, [pc, #288]	@ (8006b60 <HAL_ADC_Init+0x304>)
 8006a40:	4013      	ands	r3, r2
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	6812      	ldr	r2, [r2, #0]
 8006a46:	69b9      	ldr	r1, [r7, #24]
 8006a48:	430b      	orrs	r3, r1
 8006a4a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7ff fee4 	bl	8006834 <LL_ADC_INJ_IsConversionOngoing>
 8006a6c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d17f      	bne.n	8006b74 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d17c      	bne.n	8006b74 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006a7e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006a86:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a96:	f023 0302 	bic.w	r3, r3, #2
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	6812      	ldr	r2, [r2, #0]
 8006a9e:	69b9      	ldr	r1, [r7, #24]
 8006aa0:	430b      	orrs	r3, r1
 8006aa2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d017      	beq.n	8006adc <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	691a      	ldr	r2, [r3, #16]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006aba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006ac4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006ac8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	6911      	ldr	r1, [r2, #16]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	6812      	ldr	r2, [r2, #0]
 8006ad4:	430b      	orrs	r3, r1
 8006ad6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8006ada:	e013      	b.n	8006b04 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	691a      	ldr	r2, [r3, #16]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006aea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	6812      	ldr	r2, [r2, #0]
 8006af8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006afc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006b00:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d12a      	bne.n	8006b64 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006b18:	f023 0304 	bic.w	r3, r3, #4
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006b24:	4311      	orrs	r1, r2
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006b2a:	4311      	orrs	r1, r2
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006b30:	430a      	orrs	r2, r1
 8006b32:	431a      	orrs	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f042 0201 	orr.w	r2, r2, #1
 8006b3c:	611a      	str	r2, [r3, #16]
 8006b3e:	e019      	b.n	8006b74 <HAL_ADC_Init+0x318>
 8006b40:	200002b0 	.word	0x200002b0
 8006b44:	053e2d63 	.word	0x053e2d63
 8006b48:	50000100 	.word	0x50000100
 8006b4c:	50000400 	.word	0x50000400
 8006b50:	50000500 	.word	0x50000500
 8006b54:	50000600 	.word	0x50000600
 8006b58:	50000300 	.word	0x50000300
 8006b5c:	50000700 	.word	0x50000700
 8006b60:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	691a      	ldr	r2, [r3, #16]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f022 0201 	bic.w	r2, r2, #1
 8006b72:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d10c      	bne.n	8006b96 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b82:	f023 010f 	bic.w	r1, r3, #15
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	1e5a      	subs	r2, r3, #1
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	430a      	orrs	r2, r1
 8006b92:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b94:	e007      	b.n	8006ba6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 020f 	bic.w	r2, r2, #15
 8006ba4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006baa:	f023 0303 	bic.w	r3, r3, #3
 8006bae:	f043 0201 	orr.w	r2, r3, #1
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006bb6:	e007      	b.n	8006bc8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bbc:	f043 0210 	orr.w	r2, r3, #16
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006bc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3724      	adds	r7, #36	@ 0x24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd90      	pop	{r4, r7, pc}
 8006bd2:	bf00      	nop

08006bd4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006be8:	d004      	beq.n	8006bf4 <HAL_ADC_Start_DMA+0x20>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a5a      	ldr	r2, [pc, #360]	@ (8006d58 <HAL_ADC_Start_DMA+0x184>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d101      	bne.n	8006bf8 <HAL_ADC_Start_DMA+0x24>
 8006bf4:	4b59      	ldr	r3, [pc, #356]	@ (8006d5c <HAL_ADC_Start_DMA+0x188>)
 8006bf6:	e000      	b.n	8006bfa <HAL_ADC_Start_DMA+0x26>
 8006bf8:	4b59      	ldr	r3, [pc, #356]	@ (8006d60 <HAL_ADC_Start_DMA+0x18c>)
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7ff fd62 	bl	80066c4 <LL_ADC_GetMultimode>
 8006c00:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7ff fe01 	bl	800680e <LL_ADC_REG_IsConversionOngoing>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f040 809b 	bne.w	8006d4a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d101      	bne.n	8006c22 <HAL_ADC_Start_DMA+0x4e>
 8006c1e:	2302      	movs	r3, #2
 8006c20:	e096      	b.n	8006d50 <HAL_ADC_Start_DMA+0x17c>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a4d      	ldr	r2, [pc, #308]	@ (8006d64 <HAL_ADC_Start_DMA+0x190>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d008      	beq.n	8006c46 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d005      	beq.n	8006c46 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	2b05      	cmp	r3, #5
 8006c3e:	d002      	beq.n	8006c46 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	2b09      	cmp	r3, #9
 8006c44:	d17a      	bne.n	8006d3c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f000 ff60 	bl	8007b0c <ADC_Enable>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006c50:	7dfb      	ldrb	r3, [r7, #23]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d16d      	bne.n	8006d32 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c5a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006c5e:	f023 0301 	bic.w	r3, r3, #1
 8006c62:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a3a      	ldr	r2, [pc, #232]	@ (8006d58 <HAL_ADC_Start_DMA+0x184>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d009      	beq.n	8006c88 <HAL_ADC_Start_DMA+0xb4>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a3b      	ldr	r2, [pc, #236]	@ (8006d68 <HAL_ADC_Start_DMA+0x194>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d002      	beq.n	8006c84 <HAL_ADC_Start_DMA+0xb0>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	e003      	b.n	8006c8c <HAL_ADC_Start_DMA+0xb8>
 8006c84:	4b39      	ldr	r3, [pc, #228]	@ (8006d6c <HAL_ADC_Start_DMA+0x198>)
 8006c86:	e001      	b.n	8006c8c <HAL_ADC_Start_DMA+0xb8>
 8006c88:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	6812      	ldr	r2, [r2, #0]
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d002      	beq.n	8006c9a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d105      	bne.n	8006ca6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c9e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006caa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d006      	beq.n	8006cc0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cb6:	f023 0206 	bic.w	r2, r3, #6
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	661a      	str	r2, [r3, #96]	@ 0x60
 8006cbe:	e002      	b.n	8006cc6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cca:	4a29      	ldr	r2, [pc, #164]	@ (8006d70 <HAL_ADC_Start_DMA+0x19c>)
 8006ccc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cd2:	4a28      	ldr	r2, [pc, #160]	@ (8006d74 <HAL_ADC_Start_DMA+0x1a0>)
 8006cd4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cda:	4a27      	ldr	r2, [pc, #156]	@ (8006d78 <HAL_ADC_Start_DMA+0x1a4>)
 8006cdc:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	221c      	movs	r2, #28
 8006ce4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	685a      	ldr	r2, [r3, #4]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f042 0210 	orr.w	r2, r2, #16
 8006cfc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68da      	ldr	r2, [r3, #12]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f042 0201 	orr.w	r2, r2, #1
 8006d0c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3340      	adds	r3, #64	@ 0x40
 8006d18:	4619      	mov	r1, r3
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f001 fb37 	bl	8008390 <HAL_DMA_Start_IT>
 8006d22:	4603      	mov	r3, r0
 8006d24:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7ff fd5b 	bl	80067e6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006d30:	e00d      	b.n	8006d4e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8006d3a:	e008      	b.n	8006d4e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8006d48:	e001      	b.n	8006d4e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3718      	adds	r7, #24
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	50000100 	.word	0x50000100
 8006d5c:	50000300 	.word	0x50000300
 8006d60:	50000700 	.word	0x50000700
 8006d64:	50000600 	.word	0x50000600
 8006d68:	50000500 	.word	0x50000500
 8006d6c:	50000400 	.word	0x50000400
 8006d70:	08007c39 	.word	0x08007c39
 8006d74:	08007d11 	.word	0x08007d11
 8006d78:	08007d2d 	.word	0x08007d2d

08006d7c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b08a      	sub	sp, #40	@ 0x28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8006d84:	2300      	movs	r3, #0
 8006d86:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006da0:	d004      	beq.n	8006dac <HAL_ADC_IRQHandler+0x30>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a8e      	ldr	r2, [pc, #568]	@ (8006fe0 <HAL_ADC_IRQHandler+0x264>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d101      	bne.n	8006db0 <HAL_ADC_IRQHandler+0x34>
 8006dac:	4b8d      	ldr	r3, [pc, #564]	@ (8006fe4 <HAL_ADC_IRQHandler+0x268>)
 8006dae:	e000      	b.n	8006db2 <HAL_ADC_IRQHandler+0x36>
 8006db0:	4b8d      	ldr	r3, [pc, #564]	@ (8006fe8 <HAL_ADC_IRQHandler+0x26c>)
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7ff fc86 	bl	80066c4 <LL_ADC_GetMultimode>
 8006db8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	f003 0302 	and.w	r3, r3, #2
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d017      	beq.n	8006df4 <HAL_ADC_IRQHandler+0x78>
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	f003 0302 	and.w	r3, r3, #2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d012      	beq.n	8006df4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dd2:	f003 0310 	and.w	r3, r3, #16
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d105      	bne.n	8006de6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dde:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f001 f808 	bl	8007dfc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2202      	movs	r2, #2
 8006df2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	f003 0304 	and.w	r3, r3, #4
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d004      	beq.n	8006e08 <HAL_ADC_IRQHandler+0x8c>
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	f003 0304 	and.w	r3, r3, #4
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10b      	bne.n	8006e20 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f000 8094 	beq.w	8006f3c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	f003 0308 	and.w	r3, r3, #8
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 808e 	beq.w	8006f3c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e24:	f003 0310 	and.w	r3, r3, #16
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d105      	bne.n	8006e38 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e30:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7ff fb9f 	bl	8006580 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d072      	beq.n	8006f2e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a64      	ldr	r2, [pc, #400]	@ (8006fe0 <HAL_ADC_IRQHandler+0x264>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d009      	beq.n	8006e66 <HAL_ADC_IRQHandler+0xea>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a65      	ldr	r2, [pc, #404]	@ (8006fec <HAL_ADC_IRQHandler+0x270>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d002      	beq.n	8006e62 <HAL_ADC_IRQHandler+0xe6>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	e003      	b.n	8006e6a <HAL_ADC_IRQHandler+0xee>
 8006e62:	4b63      	ldr	r3, [pc, #396]	@ (8006ff0 <HAL_ADC_IRQHandler+0x274>)
 8006e64:	e001      	b.n	8006e6a <HAL_ADC_IRQHandler+0xee>
 8006e66:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	6812      	ldr	r2, [r2, #0]
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d008      	beq.n	8006e84 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d005      	beq.n	8006e84 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	2b05      	cmp	r3, #5
 8006e7c:	d002      	beq.n	8006e84 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	2b09      	cmp	r3, #9
 8006e82:	d104      	bne.n	8006e8e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	623b      	str	r3, [r7, #32]
 8006e8c:	e014      	b.n	8006eb8 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a53      	ldr	r2, [pc, #332]	@ (8006fe0 <HAL_ADC_IRQHandler+0x264>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d009      	beq.n	8006eac <HAL_ADC_IRQHandler+0x130>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a53      	ldr	r2, [pc, #332]	@ (8006fec <HAL_ADC_IRQHandler+0x270>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d002      	beq.n	8006ea8 <HAL_ADC_IRQHandler+0x12c>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	e003      	b.n	8006eb0 <HAL_ADC_IRQHandler+0x134>
 8006ea8:	4b51      	ldr	r3, [pc, #324]	@ (8006ff0 <HAL_ADC_IRQHandler+0x274>)
 8006eaa:	e001      	b.n	8006eb0 <HAL_ADC_IRQHandler+0x134>
 8006eac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006eb0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006eb8:	6a3b      	ldr	r3, [r7, #32]
 8006eba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d135      	bne.n	8006f2e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0308 	and.w	r3, r3, #8
 8006ecc:	2b08      	cmp	r3, #8
 8006ece:	d12e      	bne.n	8006f2e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7ff fc9a 	bl	800680e <LL_ADC_REG_IsConversionOngoing>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d11a      	bne.n	8006f16 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	685a      	ldr	r2, [r3, #4]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f022 020c 	bic.w	r2, r2, #12
 8006eee:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ef4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d112      	bne.n	8006f2e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f0c:	f043 0201 	orr.w	r2, r3, #1
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006f14:	e00b      	b.n	8006f2e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f1a:	f043 0210 	orr.w	r2, r3, #16
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f26:	f043 0201 	orr.w	r2, r3, #1
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f984 	bl	800723c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	220c      	movs	r2, #12
 8006f3a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	f003 0320 	and.w	r3, r3, #32
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d004      	beq.n	8006f50 <HAL_ADC_IRQHandler+0x1d4>
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	f003 0320 	and.w	r3, r3, #32
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10b      	bne.n	8006f68 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f000 80b3 	beq.w	80070c2 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f000 80ad 	beq.w	80070c2 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f6c:	f003 0310 	and.w	r3, r3, #16
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d105      	bne.n	8006f80 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f78:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7ff fb3a 	bl	80065fe <LL_ADC_INJ_IsTriggerSourceSWStart>
 8006f8a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7ff faf5 	bl	8006580 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006f96:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a10      	ldr	r2, [pc, #64]	@ (8006fe0 <HAL_ADC_IRQHandler+0x264>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d009      	beq.n	8006fb6 <HAL_ADC_IRQHandler+0x23a>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a11      	ldr	r2, [pc, #68]	@ (8006fec <HAL_ADC_IRQHandler+0x270>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d002      	beq.n	8006fb2 <HAL_ADC_IRQHandler+0x236>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	e003      	b.n	8006fba <HAL_ADC_IRQHandler+0x23e>
 8006fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8006ff0 <HAL_ADC_IRQHandler+0x274>)
 8006fb4:	e001      	b.n	8006fba <HAL_ADC_IRQHandler+0x23e>
 8006fb6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	6812      	ldr	r2, [r2, #0]
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d008      	beq.n	8006fd4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d005      	beq.n	8006fd4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	2b06      	cmp	r3, #6
 8006fcc:	d002      	beq.n	8006fd4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	2b07      	cmp	r3, #7
 8006fd2:	d10f      	bne.n	8006ff4 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	623b      	str	r3, [r7, #32]
 8006fdc:	e01f      	b.n	800701e <HAL_ADC_IRQHandler+0x2a2>
 8006fde:	bf00      	nop
 8006fe0:	50000100 	.word	0x50000100
 8006fe4:	50000300 	.word	0x50000300
 8006fe8:	50000700 	.word	0x50000700
 8006fec:	50000500 	.word	0x50000500
 8006ff0:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a8b      	ldr	r2, [pc, #556]	@ (8007228 <HAL_ADC_IRQHandler+0x4ac>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d009      	beq.n	8007012 <HAL_ADC_IRQHandler+0x296>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a8a      	ldr	r2, [pc, #552]	@ (800722c <HAL_ADC_IRQHandler+0x4b0>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d002      	beq.n	800700e <HAL_ADC_IRQHandler+0x292>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	e003      	b.n	8007016 <HAL_ADC_IRQHandler+0x29a>
 800700e:	4b88      	ldr	r3, [pc, #544]	@ (8007230 <HAL_ADC_IRQHandler+0x4b4>)
 8007010:	e001      	b.n	8007016 <HAL_ADC_IRQHandler+0x29a>
 8007012:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8007016:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d047      	beq.n	80070b4 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007024:	6a3b      	ldr	r3, [r7, #32]
 8007026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d007      	beq.n	800703e <HAL_ADC_IRQHandler+0x2c2>
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d03f      	beq.n	80070b4 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007034:	6a3b      	ldr	r3, [r7, #32]
 8007036:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800703a:	2b00      	cmp	r3, #0
 800703c:	d13a      	bne.n	80070b4 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007048:	2b40      	cmp	r3, #64	@ 0x40
 800704a:	d133      	bne.n	80070b4 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800704c:	6a3b      	ldr	r3, [r7, #32]
 800704e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d12e      	bne.n	80070b4 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4618      	mov	r0, r3
 800705c:	f7ff fbea 	bl	8006834 <LL_ADC_INJ_IsConversionOngoing>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d11a      	bne.n	800709c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007074:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800707a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800708a:	2b00      	cmp	r3, #0
 800708c:	d112      	bne.n	80070b4 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007092:	f043 0201 	orr.w	r2, r3, #1
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	65da      	str	r2, [r3, #92]	@ 0x5c
 800709a:	e00b      	b.n	80070b4 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070a0:	f043 0210 	orr.w	r2, r3, #16
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070ac:	f043 0201 	orr.w	r2, r3, #1
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fe79 	bl	8007dac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2260      	movs	r2, #96	@ 0x60
 80070c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d011      	beq.n	80070f0 <HAL_ADC_IRQHandler+0x374>
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00c      	beq.n	80070f0 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070da:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f8be 	bl	8007264 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2280      	movs	r2, #128	@ 0x80
 80070ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d012      	beq.n	8007120 <HAL_ADC_IRQHandler+0x3a4>
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00d      	beq.n	8007120 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007108:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fe5f 	bl	8007dd4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800711e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007126:	2b00      	cmp	r3, #0
 8007128:	d012      	beq.n	8007150 <HAL_ADC_IRQHandler+0x3d4>
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00d      	beq.n	8007150 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007138:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 fe51 	bl	8007de8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800714e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	f003 0310 	and.w	r3, r3, #16
 8007156:	2b00      	cmp	r3, #0
 8007158:	d043      	beq.n	80071e2 <HAL_ADC_IRQHandler+0x466>
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	f003 0310 	and.w	r3, r3, #16
 8007160:	2b00      	cmp	r3, #0
 8007162:	d03e      	beq.n	80071e2 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007168:	2b00      	cmp	r3, #0
 800716a:	d102      	bne.n	8007172 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 800716c:	2301      	movs	r3, #1
 800716e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007170:	e021      	b.n	80071b6 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d015      	beq.n	80071a4 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007180:	d004      	beq.n	800718c <HAL_ADC_IRQHandler+0x410>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a28      	ldr	r2, [pc, #160]	@ (8007228 <HAL_ADC_IRQHandler+0x4ac>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d101      	bne.n	8007190 <HAL_ADC_IRQHandler+0x414>
 800718c:	4b29      	ldr	r3, [pc, #164]	@ (8007234 <HAL_ADC_IRQHandler+0x4b8>)
 800718e:	e000      	b.n	8007192 <HAL_ADC_IRQHandler+0x416>
 8007190:	4b29      	ldr	r3, [pc, #164]	@ (8007238 <HAL_ADC_IRQHandler+0x4bc>)
 8007192:	4618      	mov	r0, r3
 8007194:	f7ff faa4 	bl	80066e0 <LL_ADC_GetMultiDMATransfer>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00b      	beq.n	80071b6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800719e:	2301      	movs	r3, #1
 80071a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80071a2:	e008      	b.n	80071b6 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d001      	beq.n	80071b6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80071b2:	2301      	movs	r3, #1
 80071b4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80071b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d10e      	bne.n	80071da <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071c0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071cc:	f043 0202 	orr.w	r2, r3, #2
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f84f 	bl	8007278 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2210      	movs	r2, #16
 80071e0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d018      	beq.n	800721e <HAL_ADC_IRQHandler+0x4a2>
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d013      	beq.n	800721e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071fa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007206:	f043 0208 	orr.w	r2, r3, #8
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007216:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 fdd1 	bl	8007dc0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800721e:	bf00      	nop
 8007220:	3728      	adds	r7, #40	@ 0x28
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	50000100 	.word	0x50000100
 800722c:	50000500 	.word	0x50000500
 8007230:	50000400 	.word	0x50000400
 8007234:	50000300 	.word	0x50000300
 8007238:	50000700 	.word	0x50000700

0800723c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b0b6      	sub	sp, #216	@ 0xd8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007296:	2300      	movs	r3, #0
 8007298:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800729c:	2300      	movs	r3, #0
 800729e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d102      	bne.n	80072b0 <HAL_ADC_ConfigChannel+0x24>
 80072aa:	2302      	movs	r3, #2
 80072ac:	f000 bc13 	b.w	8007ad6 <HAL_ADC_ConfigChannel+0x84a>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4618      	mov	r0, r3
 80072be:	f7ff faa6 	bl	800680e <LL_ADC_REG_IsConversionOngoing>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f040 83f3 	bne.w	8007ab0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6818      	ldr	r0, [r3, #0]
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	6859      	ldr	r1, [r3, #4]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	461a      	mov	r2, r3
 80072d8:	f7ff f965 	bl	80065a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4618      	mov	r0, r3
 80072e2:	f7ff fa94 	bl	800680e <LL_ADC_REG_IsConversionOngoing>
 80072e6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7ff faa0 	bl	8006834 <LL_ADC_INJ_IsConversionOngoing>
 80072f4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80072f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f040 81d9 	bne.w	80076b4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007302:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007306:	2b00      	cmp	r3, #0
 8007308:	f040 81d4 	bne.w	80076b4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007314:	d10f      	bne.n	8007336 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6818      	ldr	r0, [r3, #0]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2200      	movs	r2, #0
 8007320:	4619      	mov	r1, r3
 8007322:	f7ff f97f 	bl	8006624 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800732e:	4618      	mov	r0, r3
 8007330:	f7ff f913 	bl	800655a <LL_ADC_SetSamplingTimeCommonConfig>
 8007334:	e00e      	b.n	8007354 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6818      	ldr	r0, [r3, #0]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	6819      	ldr	r1, [r3, #0]
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	461a      	mov	r2, r3
 8007344:	f7ff f96e 	bl	8006624 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2100      	movs	r1, #0
 800734e:	4618      	mov	r0, r3
 8007350:	f7ff f903 	bl	800655a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	695a      	ldr	r2, [r3, #20]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	08db      	lsrs	r3, r3, #3
 8007360:	f003 0303 	and.w	r3, r3, #3
 8007364:	005b      	lsls	r3, r3, #1
 8007366:	fa02 f303 	lsl.w	r3, r2, r3
 800736a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	2b04      	cmp	r3, #4
 8007374:	d022      	beq.n	80073bc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6818      	ldr	r0, [r3, #0]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	6919      	ldr	r1, [r3, #16]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007386:	f7ff f85d 	bl	8006444 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6818      	ldr	r0, [r3, #0]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	6919      	ldr	r1, [r3, #16]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	461a      	mov	r2, r3
 8007398:	f7ff f8a9 	bl	80064ee <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6818      	ldr	r0, [r3, #0]
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d102      	bne.n	80073b2 <HAL_ADC_ConfigChannel+0x126>
 80073ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80073b0:	e000      	b.n	80073b4 <HAL_ADC_ConfigChannel+0x128>
 80073b2:	2300      	movs	r3, #0
 80073b4:	461a      	mov	r2, r3
 80073b6:	f7ff f8b5 	bl	8006524 <LL_ADC_SetOffsetSaturation>
 80073ba:	e17b      	b.n	80076b4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2100      	movs	r1, #0
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7ff f862 	bl	800648c <LL_ADC_GetOffsetChannel>
 80073c8:	4603      	mov	r3, r0
 80073ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10a      	bne.n	80073e8 <HAL_ADC_ConfigChannel+0x15c>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2100      	movs	r1, #0
 80073d8:	4618      	mov	r0, r3
 80073da:	f7ff f857 	bl	800648c <LL_ADC_GetOffsetChannel>
 80073de:	4603      	mov	r3, r0
 80073e0:	0e9b      	lsrs	r3, r3, #26
 80073e2:	f003 021f 	and.w	r2, r3, #31
 80073e6:	e01e      	b.n	8007426 <HAL_ADC_ConfigChannel+0x19a>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2100      	movs	r1, #0
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7ff f84c 	bl	800648c <LL_ADC_GetOffsetChannel>
 80073f4:	4603      	mov	r3, r0
 80073f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80073fe:	fa93 f3a3 	rbit	r3, r3
 8007402:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007406:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800740a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800740e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d101      	bne.n	800741a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8007416:	2320      	movs	r3, #32
 8007418:	e004      	b.n	8007424 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800741a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800741e:	fab3 f383 	clz	r3, r3
 8007422:	b2db      	uxtb	r3, r3
 8007424:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800742e:	2b00      	cmp	r3, #0
 8007430:	d105      	bne.n	800743e <HAL_ADC_ConfigChannel+0x1b2>
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	0e9b      	lsrs	r3, r3, #26
 8007438:	f003 031f 	and.w	r3, r3, #31
 800743c:	e018      	b.n	8007470 <HAL_ADC_ConfigChannel+0x1e4>
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007446:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800744a:	fa93 f3a3 	rbit	r3, r3
 800744e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8007452:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007456:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800745a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800745e:	2b00      	cmp	r3, #0
 8007460:	d101      	bne.n	8007466 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8007462:	2320      	movs	r3, #32
 8007464:	e004      	b.n	8007470 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8007466:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800746a:	fab3 f383 	clz	r3, r3
 800746e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007470:	429a      	cmp	r2, r3
 8007472:	d106      	bne.n	8007482 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2200      	movs	r2, #0
 800747a:	2100      	movs	r1, #0
 800747c:	4618      	mov	r0, r3
 800747e:	f7ff f81b 	bl	80064b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2101      	movs	r1, #1
 8007488:	4618      	mov	r0, r3
 800748a:	f7fe ffff 	bl	800648c <LL_ADC_GetOffsetChannel>
 800748e:	4603      	mov	r3, r0
 8007490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10a      	bne.n	80074ae <HAL_ADC_ConfigChannel+0x222>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2101      	movs	r1, #1
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fe fff4 	bl	800648c <LL_ADC_GetOffsetChannel>
 80074a4:	4603      	mov	r3, r0
 80074a6:	0e9b      	lsrs	r3, r3, #26
 80074a8:	f003 021f 	and.w	r2, r3, #31
 80074ac:	e01e      	b.n	80074ec <HAL_ADC_ConfigChannel+0x260>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2101      	movs	r1, #1
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7fe ffe9 	bl	800648c <LL_ADC_GetOffsetChannel>
 80074ba:	4603      	mov	r3, r0
 80074bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80074c4:	fa93 f3a3 	rbit	r3, r3
 80074c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80074cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80074d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80074d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d101      	bne.n	80074e0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80074dc:	2320      	movs	r3, #32
 80074de:	e004      	b.n	80074ea <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80074e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80074e4:	fab3 f383 	clz	r3, r3
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d105      	bne.n	8007504 <HAL_ADC_ConfigChannel+0x278>
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	0e9b      	lsrs	r3, r3, #26
 80074fe:	f003 031f 	and.w	r3, r3, #31
 8007502:	e018      	b.n	8007536 <HAL_ADC_ConfigChannel+0x2aa>
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800750c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007510:	fa93 f3a3 	rbit	r3, r3
 8007514:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8007518:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800751c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8007520:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007524:	2b00      	cmp	r3, #0
 8007526:	d101      	bne.n	800752c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8007528:	2320      	movs	r3, #32
 800752a:	e004      	b.n	8007536 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800752c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007530:	fab3 f383 	clz	r3, r3
 8007534:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007536:	429a      	cmp	r2, r3
 8007538:	d106      	bne.n	8007548 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2200      	movs	r2, #0
 8007540:	2101      	movs	r1, #1
 8007542:	4618      	mov	r0, r3
 8007544:	f7fe ffb8 	bl	80064b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2102      	movs	r1, #2
 800754e:	4618      	mov	r0, r3
 8007550:	f7fe ff9c 	bl	800648c <LL_ADC_GetOffsetChannel>
 8007554:	4603      	mov	r3, r0
 8007556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10a      	bne.n	8007574 <HAL_ADC_ConfigChannel+0x2e8>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2102      	movs	r1, #2
 8007564:	4618      	mov	r0, r3
 8007566:	f7fe ff91 	bl	800648c <LL_ADC_GetOffsetChannel>
 800756a:	4603      	mov	r3, r0
 800756c:	0e9b      	lsrs	r3, r3, #26
 800756e:	f003 021f 	and.w	r2, r3, #31
 8007572:	e01e      	b.n	80075b2 <HAL_ADC_ConfigChannel+0x326>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2102      	movs	r1, #2
 800757a:	4618      	mov	r0, r3
 800757c:	f7fe ff86 	bl	800648c <LL_ADC_GetOffsetChannel>
 8007580:	4603      	mov	r3, r0
 8007582:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007586:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800758a:	fa93 f3a3 	rbit	r3, r3
 800758e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8007592:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007596:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800759a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80075a2:	2320      	movs	r3, #32
 80075a4:	e004      	b.n	80075b0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80075a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80075aa:	fab3 f383 	clz	r3, r3
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d105      	bne.n	80075ca <HAL_ADC_ConfigChannel+0x33e>
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	0e9b      	lsrs	r3, r3, #26
 80075c4:	f003 031f 	and.w	r3, r3, #31
 80075c8:	e016      	b.n	80075f8 <HAL_ADC_ConfigChannel+0x36c>
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80075d6:	fa93 f3a3 	rbit	r3, r3
 80075da:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80075dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80075de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80075e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d101      	bne.n	80075ee <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80075ea:	2320      	movs	r3, #32
 80075ec:	e004      	b.n	80075f8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80075ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80075f2:	fab3 f383 	clz	r3, r3
 80075f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d106      	bne.n	800760a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2200      	movs	r2, #0
 8007602:	2102      	movs	r1, #2
 8007604:	4618      	mov	r0, r3
 8007606:	f7fe ff57 	bl	80064b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2103      	movs	r1, #3
 8007610:	4618      	mov	r0, r3
 8007612:	f7fe ff3b 	bl	800648c <LL_ADC_GetOffsetChannel>
 8007616:	4603      	mov	r3, r0
 8007618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10a      	bne.n	8007636 <HAL_ADC_ConfigChannel+0x3aa>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2103      	movs	r1, #3
 8007626:	4618      	mov	r0, r3
 8007628:	f7fe ff30 	bl	800648c <LL_ADC_GetOffsetChannel>
 800762c:	4603      	mov	r3, r0
 800762e:	0e9b      	lsrs	r3, r3, #26
 8007630:	f003 021f 	and.w	r2, r3, #31
 8007634:	e017      	b.n	8007666 <HAL_ADC_ConfigChannel+0x3da>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2103      	movs	r1, #3
 800763c:	4618      	mov	r0, r3
 800763e:	f7fe ff25 	bl	800648c <LL_ADC_GetOffsetChannel>
 8007642:	4603      	mov	r3, r0
 8007644:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007646:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007648:	fa93 f3a3 	rbit	r3, r3
 800764c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800764e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007650:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8007652:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8007658:	2320      	movs	r3, #32
 800765a:	e003      	b.n	8007664 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800765c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800765e:	fab3 f383 	clz	r3, r3
 8007662:	b2db      	uxtb	r3, r3
 8007664:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800766e:	2b00      	cmp	r3, #0
 8007670:	d105      	bne.n	800767e <HAL_ADC_ConfigChannel+0x3f2>
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	0e9b      	lsrs	r3, r3, #26
 8007678:	f003 031f 	and.w	r3, r3, #31
 800767c:	e011      	b.n	80076a2 <HAL_ADC_ConfigChannel+0x416>
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007684:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007686:	fa93 f3a3 	rbit	r3, r3
 800768a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800768c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800768e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8007690:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007692:	2b00      	cmp	r3, #0
 8007694:	d101      	bne.n	800769a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8007696:	2320      	movs	r3, #32
 8007698:	e003      	b.n	80076a2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800769a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800769c:	fab3 f383 	clz	r3, r3
 80076a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d106      	bne.n	80076b4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2200      	movs	r2, #0
 80076ac:	2103      	movs	r1, #3
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7fe ff02 	bl	80064b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7ff f881 	bl	80067c0 <LL_ADC_IsEnabled>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f040 813d 	bne.w	8007940 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6818      	ldr	r0, [r3, #0]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	6819      	ldr	r1, [r3, #0]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	461a      	mov	r2, r3
 80076d4:	f7fe ffd2 	bl	800667c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	4aa2      	ldr	r2, [pc, #648]	@ (8007968 <HAL_ADC_ConfigChannel+0x6dc>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	f040 812e 	bne.w	8007940 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d10b      	bne.n	800770c <HAL_ADC_ConfigChannel+0x480>
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	0e9b      	lsrs	r3, r3, #26
 80076fa:	3301      	adds	r3, #1
 80076fc:	f003 031f 	and.w	r3, r3, #31
 8007700:	2b09      	cmp	r3, #9
 8007702:	bf94      	ite	ls
 8007704:	2301      	movls	r3, #1
 8007706:	2300      	movhi	r3, #0
 8007708:	b2db      	uxtb	r3, r3
 800770a:	e019      	b.n	8007740 <HAL_ADC_ConfigChannel+0x4b4>
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007712:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007714:	fa93 f3a3 	rbit	r3, r3
 8007718:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800771a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800771c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800771e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007720:	2b00      	cmp	r3, #0
 8007722:	d101      	bne.n	8007728 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8007724:	2320      	movs	r3, #32
 8007726:	e003      	b.n	8007730 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8007728:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800772a:	fab3 f383 	clz	r3, r3
 800772e:	b2db      	uxtb	r3, r3
 8007730:	3301      	adds	r3, #1
 8007732:	f003 031f 	and.w	r3, r3, #31
 8007736:	2b09      	cmp	r3, #9
 8007738:	bf94      	ite	ls
 800773a:	2301      	movls	r3, #1
 800773c:	2300      	movhi	r3, #0
 800773e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007740:	2b00      	cmp	r3, #0
 8007742:	d079      	beq.n	8007838 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800774c:	2b00      	cmp	r3, #0
 800774e:	d107      	bne.n	8007760 <HAL_ADC_ConfigChannel+0x4d4>
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	0e9b      	lsrs	r3, r3, #26
 8007756:	3301      	adds	r3, #1
 8007758:	069b      	lsls	r3, r3, #26
 800775a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800775e:	e015      	b.n	800778c <HAL_ADC_ConfigChannel+0x500>
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007766:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007768:	fa93 f3a3 	rbit	r3, r3
 800776c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800776e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007770:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8007772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007774:	2b00      	cmp	r3, #0
 8007776:	d101      	bne.n	800777c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8007778:	2320      	movs	r3, #32
 800777a:	e003      	b.n	8007784 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800777c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800777e:	fab3 f383 	clz	r3, r3
 8007782:	b2db      	uxtb	r3, r3
 8007784:	3301      	adds	r3, #1
 8007786:	069b      	lsls	r3, r3, #26
 8007788:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007794:	2b00      	cmp	r3, #0
 8007796:	d109      	bne.n	80077ac <HAL_ADC_ConfigChannel+0x520>
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	0e9b      	lsrs	r3, r3, #26
 800779e:	3301      	adds	r3, #1
 80077a0:	f003 031f 	and.w	r3, r3, #31
 80077a4:	2101      	movs	r1, #1
 80077a6:	fa01 f303 	lsl.w	r3, r1, r3
 80077aa:	e017      	b.n	80077dc <HAL_ADC_ConfigChannel+0x550>
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077b4:	fa93 f3a3 	rbit	r3, r3
 80077b8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80077ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80077be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d101      	bne.n	80077c8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80077c4:	2320      	movs	r3, #32
 80077c6:	e003      	b.n	80077d0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80077c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077ca:	fab3 f383 	clz	r3, r3
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	3301      	adds	r3, #1
 80077d2:	f003 031f 	and.w	r3, r3, #31
 80077d6:	2101      	movs	r1, #1
 80077d8:	fa01 f303 	lsl.w	r3, r1, r3
 80077dc:	ea42 0103 	orr.w	r1, r2, r3
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10a      	bne.n	8007802 <HAL_ADC_ConfigChannel+0x576>
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	0e9b      	lsrs	r3, r3, #26
 80077f2:	3301      	adds	r3, #1
 80077f4:	f003 021f 	and.w	r2, r3, #31
 80077f8:	4613      	mov	r3, r2
 80077fa:	005b      	lsls	r3, r3, #1
 80077fc:	4413      	add	r3, r2
 80077fe:	051b      	lsls	r3, r3, #20
 8007800:	e018      	b.n	8007834 <HAL_ADC_ConfigChannel+0x5a8>
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800780a:	fa93 f3a3 	rbit	r3, r3
 800780e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8007810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007812:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8007814:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800781a:	2320      	movs	r3, #32
 800781c:	e003      	b.n	8007826 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800781e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007820:	fab3 f383 	clz	r3, r3
 8007824:	b2db      	uxtb	r3, r3
 8007826:	3301      	adds	r3, #1
 8007828:	f003 021f 	and.w	r2, r3, #31
 800782c:	4613      	mov	r3, r2
 800782e:	005b      	lsls	r3, r3, #1
 8007830:	4413      	add	r3, r2
 8007832:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007834:	430b      	orrs	r3, r1
 8007836:	e07e      	b.n	8007936 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007840:	2b00      	cmp	r3, #0
 8007842:	d107      	bne.n	8007854 <HAL_ADC_ConfigChannel+0x5c8>
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	0e9b      	lsrs	r3, r3, #26
 800784a:	3301      	adds	r3, #1
 800784c:	069b      	lsls	r3, r3, #26
 800784e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007852:	e015      	b.n	8007880 <HAL_ADC_ConfigChannel+0x5f4>
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800785a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800785c:	fa93 f3a3 	rbit	r3, r3
 8007860:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8007862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007864:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8007866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007868:	2b00      	cmp	r3, #0
 800786a:	d101      	bne.n	8007870 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800786c:	2320      	movs	r3, #32
 800786e:	e003      	b.n	8007878 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8007870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007872:	fab3 f383 	clz	r3, r3
 8007876:	b2db      	uxtb	r3, r3
 8007878:	3301      	adds	r3, #1
 800787a:	069b      	lsls	r3, r3, #26
 800787c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007888:	2b00      	cmp	r3, #0
 800788a:	d109      	bne.n	80078a0 <HAL_ADC_ConfigChannel+0x614>
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	0e9b      	lsrs	r3, r3, #26
 8007892:	3301      	adds	r3, #1
 8007894:	f003 031f 	and.w	r3, r3, #31
 8007898:	2101      	movs	r1, #1
 800789a:	fa01 f303 	lsl.w	r3, r1, r3
 800789e:	e017      	b.n	80078d0 <HAL_ADC_ConfigChannel+0x644>
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078a6:	6a3b      	ldr	r3, [r7, #32]
 80078a8:	fa93 f3a3 	rbit	r3, r3
 80078ac:	61fb      	str	r3, [r7, #28]
  return result;
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80078b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d101      	bne.n	80078bc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80078b8:	2320      	movs	r3, #32
 80078ba:	e003      	b.n	80078c4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80078bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078be:	fab3 f383 	clz	r3, r3
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	3301      	adds	r3, #1
 80078c6:	f003 031f 	and.w	r3, r3, #31
 80078ca:	2101      	movs	r1, #1
 80078cc:	fa01 f303 	lsl.w	r3, r1, r3
 80078d0:	ea42 0103 	orr.w	r1, r2, r3
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d10d      	bne.n	80078fc <HAL_ADC_ConfigChannel+0x670>
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	0e9b      	lsrs	r3, r3, #26
 80078e6:	3301      	adds	r3, #1
 80078e8:	f003 021f 	and.w	r2, r3, #31
 80078ec:	4613      	mov	r3, r2
 80078ee:	005b      	lsls	r3, r3, #1
 80078f0:	4413      	add	r3, r2
 80078f2:	3b1e      	subs	r3, #30
 80078f4:	051b      	lsls	r3, r3, #20
 80078f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80078fa:	e01b      	b.n	8007934 <HAL_ADC_ConfigChannel+0x6a8>
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	fa93 f3a3 	rbit	r3, r3
 8007908:	613b      	str	r3, [r7, #16]
  return result;
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d101      	bne.n	8007918 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8007914:	2320      	movs	r3, #32
 8007916:	e003      	b.n	8007920 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	fab3 f383 	clz	r3, r3
 800791e:	b2db      	uxtb	r3, r3
 8007920:	3301      	adds	r3, #1
 8007922:	f003 021f 	and.w	r2, r3, #31
 8007926:	4613      	mov	r3, r2
 8007928:	005b      	lsls	r3, r3, #1
 800792a:	4413      	add	r3, r2
 800792c:	3b1e      	subs	r3, #30
 800792e:	051b      	lsls	r3, r3, #20
 8007930:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007934:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800793a:	4619      	mov	r1, r3
 800793c:	f7fe fe72 	bl	8006624 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	4b09      	ldr	r3, [pc, #36]	@ (800796c <HAL_ADC_ConfigChannel+0x6e0>)
 8007946:	4013      	ands	r3, r2
 8007948:	2b00      	cmp	r3, #0
 800794a:	f000 80be 	beq.w	8007aca <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007956:	d004      	beq.n	8007962 <HAL_ADC_ConfigChannel+0x6d6>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a04      	ldr	r2, [pc, #16]	@ (8007970 <HAL_ADC_ConfigChannel+0x6e4>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d10a      	bne.n	8007978 <HAL_ADC_ConfigChannel+0x6ec>
 8007962:	4b04      	ldr	r3, [pc, #16]	@ (8007974 <HAL_ADC_ConfigChannel+0x6e8>)
 8007964:	e009      	b.n	800797a <HAL_ADC_ConfigChannel+0x6ee>
 8007966:	bf00      	nop
 8007968:	407f0000 	.word	0x407f0000
 800796c:	80080000 	.word	0x80080000
 8007970:	50000100 	.word	0x50000100
 8007974:	50000300 	.word	0x50000300
 8007978:	4b59      	ldr	r3, [pc, #356]	@ (8007ae0 <HAL_ADC_ConfigChannel+0x854>)
 800797a:	4618      	mov	r0, r3
 800797c:	f7fe fd54 	bl	8006428 <LL_ADC_GetCommonPathInternalCh>
 8007980:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a56      	ldr	r2, [pc, #344]	@ (8007ae4 <HAL_ADC_ConfigChannel+0x858>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d004      	beq.n	8007998 <HAL_ADC_ConfigChannel+0x70c>
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a55      	ldr	r2, [pc, #340]	@ (8007ae8 <HAL_ADC_ConfigChannel+0x85c>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d13a      	bne.n	8007a0e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007998:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800799c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d134      	bne.n	8007a0e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079ac:	d005      	beq.n	80079ba <HAL_ADC_ConfigChannel+0x72e>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a4e      	ldr	r2, [pc, #312]	@ (8007aec <HAL_ADC_ConfigChannel+0x860>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	f040 8085 	bne.w	8007ac4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079c2:	d004      	beq.n	80079ce <HAL_ADC_ConfigChannel+0x742>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a49      	ldr	r2, [pc, #292]	@ (8007af0 <HAL_ADC_ConfigChannel+0x864>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d101      	bne.n	80079d2 <HAL_ADC_ConfigChannel+0x746>
 80079ce:	4a49      	ldr	r2, [pc, #292]	@ (8007af4 <HAL_ADC_ConfigChannel+0x868>)
 80079d0:	e000      	b.n	80079d4 <HAL_ADC_ConfigChannel+0x748>
 80079d2:	4a43      	ldr	r2, [pc, #268]	@ (8007ae0 <HAL_ADC_ConfigChannel+0x854>)
 80079d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80079d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80079dc:	4619      	mov	r1, r3
 80079de:	4610      	mov	r0, r2
 80079e0:	f7fe fd0f 	bl	8006402 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80079e4:	4b44      	ldr	r3, [pc, #272]	@ (8007af8 <HAL_ADC_ConfigChannel+0x86c>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	099b      	lsrs	r3, r3, #6
 80079ea:	4a44      	ldr	r2, [pc, #272]	@ (8007afc <HAL_ADC_ConfigChannel+0x870>)
 80079ec:	fba2 2303 	umull	r2, r3, r2, r3
 80079f0:	099b      	lsrs	r3, r3, #6
 80079f2:	1c5a      	adds	r2, r3, #1
 80079f4:	4613      	mov	r3, r2
 80079f6:	005b      	lsls	r3, r3, #1
 80079f8:	4413      	add	r3, r2
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80079fe:	e002      	b.n	8007a06 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	3b01      	subs	r3, #1
 8007a04:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1f9      	bne.n	8007a00 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007a0c:	e05a      	b.n	8007ac4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a3b      	ldr	r2, [pc, #236]	@ (8007b00 <HAL_ADC_ConfigChannel+0x874>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d125      	bne.n	8007a64 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007a18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007a1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d11f      	bne.n	8007a64 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a31      	ldr	r2, [pc, #196]	@ (8007af0 <HAL_ADC_ConfigChannel+0x864>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d104      	bne.n	8007a38 <HAL_ADC_ConfigChannel+0x7ac>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a34      	ldr	r2, [pc, #208]	@ (8007b04 <HAL_ADC_ConfigChannel+0x878>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d047      	beq.n	8007ac8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a40:	d004      	beq.n	8007a4c <HAL_ADC_ConfigChannel+0x7c0>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a2a      	ldr	r2, [pc, #168]	@ (8007af0 <HAL_ADC_ConfigChannel+0x864>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d101      	bne.n	8007a50 <HAL_ADC_ConfigChannel+0x7c4>
 8007a4c:	4a29      	ldr	r2, [pc, #164]	@ (8007af4 <HAL_ADC_ConfigChannel+0x868>)
 8007a4e:	e000      	b.n	8007a52 <HAL_ADC_ConfigChannel+0x7c6>
 8007a50:	4a23      	ldr	r2, [pc, #140]	@ (8007ae0 <HAL_ADC_ConfigChannel+0x854>)
 8007a52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007a56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	4610      	mov	r0, r2
 8007a5e:	f7fe fcd0 	bl	8006402 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007a62:	e031      	b.n	8007ac8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a27      	ldr	r2, [pc, #156]	@ (8007b08 <HAL_ADC_ConfigChannel+0x87c>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d12d      	bne.n	8007aca <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007a6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007a72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d127      	bne.n	8007aca <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8007af0 <HAL_ADC_ConfigChannel+0x864>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d022      	beq.n	8007aca <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a8c:	d004      	beq.n	8007a98 <HAL_ADC_ConfigChannel+0x80c>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a17      	ldr	r2, [pc, #92]	@ (8007af0 <HAL_ADC_ConfigChannel+0x864>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d101      	bne.n	8007a9c <HAL_ADC_ConfigChannel+0x810>
 8007a98:	4a16      	ldr	r2, [pc, #88]	@ (8007af4 <HAL_ADC_ConfigChannel+0x868>)
 8007a9a:	e000      	b.n	8007a9e <HAL_ADC_ConfigChannel+0x812>
 8007a9c:	4a10      	ldr	r2, [pc, #64]	@ (8007ae0 <HAL_ADC_ConfigChannel+0x854>)
 8007a9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007aa2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	f7fe fcaa 	bl	8006402 <LL_ADC_SetCommonPathInternalCh>
 8007aae:	e00c      	b.n	8007aca <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ab4:	f043 0220 	orr.w	r2, r3, #32
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8007ac2:	e002      	b.n	8007aca <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007ac4:	bf00      	nop
 8007ac6:	e000      	b.n	8007aca <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007ac8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007ad2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	37d8      	adds	r7, #216	@ 0xd8
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	50000700 	.word	0x50000700
 8007ae4:	c3210000 	.word	0xc3210000
 8007ae8:	90c00010 	.word	0x90c00010
 8007aec:	50000600 	.word	0x50000600
 8007af0:	50000100 	.word	0x50000100
 8007af4:	50000300 	.word	0x50000300
 8007af8:	200002b0 	.word	0x200002b0
 8007afc:	053e2d63 	.word	0x053e2d63
 8007b00:	c7520000 	.word	0xc7520000
 8007b04:	50000500 	.word	0x50000500
 8007b08:	cb840000 	.word	0xcb840000

08007b0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007b14:	2300      	movs	r3, #0
 8007b16:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7fe fe4f 	bl	80067c0 <LL_ADC_IsEnabled>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d176      	bne.n	8007c16 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	689a      	ldr	r2, [r3, #8]
 8007b2e:	4b3c      	ldr	r3, [pc, #240]	@ (8007c20 <ADC_Enable+0x114>)
 8007b30:	4013      	ands	r3, r2
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00d      	beq.n	8007b52 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b3a:	f043 0210 	orr.w	r2, r3, #16
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b46:	f043 0201 	orr.w	r2, r3, #1
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e062      	b.n	8007c18 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fe fe1e 	bl	8006798 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b64:	d004      	beq.n	8007b70 <ADC_Enable+0x64>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a2e      	ldr	r2, [pc, #184]	@ (8007c24 <ADC_Enable+0x118>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d101      	bne.n	8007b74 <ADC_Enable+0x68>
 8007b70:	4b2d      	ldr	r3, [pc, #180]	@ (8007c28 <ADC_Enable+0x11c>)
 8007b72:	e000      	b.n	8007b76 <ADC_Enable+0x6a>
 8007b74:	4b2d      	ldr	r3, [pc, #180]	@ (8007c2c <ADC_Enable+0x120>)
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fe fc56 	bl	8006428 <LL_ADC_GetCommonPathInternalCh>
 8007b7c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8007b7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d013      	beq.n	8007bae <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007b86:	4b2a      	ldr	r3, [pc, #168]	@ (8007c30 <ADC_Enable+0x124>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	099b      	lsrs	r3, r3, #6
 8007b8c:	4a29      	ldr	r2, [pc, #164]	@ (8007c34 <ADC_Enable+0x128>)
 8007b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b92:	099b      	lsrs	r3, r3, #6
 8007b94:	1c5a      	adds	r2, r3, #1
 8007b96:	4613      	mov	r3, r2
 8007b98:	005b      	lsls	r3, r3, #1
 8007b9a:	4413      	add	r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007ba0:	e002      	b.n	8007ba8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1f9      	bne.n	8007ba2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007bae:	f7fe fc09 	bl	80063c4 <HAL_GetTick>
 8007bb2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007bb4:	e028      	b.n	8007c08 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fe fe00 	bl	80067c0 <LL_ADC_IsEnabled>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d104      	bne.n	8007bd0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7fe fde4 	bl	8006798 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007bd0:	f7fe fbf8 	bl	80063c4 <HAL_GetTick>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d914      	bls.n	8007c08 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 0301 	and.w	r3, r3, #1
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d00d      	beq.n	8007c08 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bf0:	f043 0210 	orr.w	r2, r3, #16
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bfc:	f043 0201 	orr.w	r2, r3, #1
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e007      	b.n	8007c18 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d1cf      	bne.n	8007bb6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	8000003f 	.word	0x8000003f
 8007c24:	50000100 	.word	0x50000100
 8007c28:	50000300 	.word	0x50000300
 8007c2c:	50000700 	.word	0x50000700
 8007c30:	200002b0 	.word	0x200002b0
 8007c34:	053e2d63 	.word	0x053e2d63

08007c38 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c44:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c4a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d14b      	bne.n	8007cea <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c56:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0308 	and.w	r3, r3, #8
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d021      	beq.n	8007cb0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7fe fc85 	bl	8006580 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d032      	beq.n	8007ce2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d12b      	bne.n	8007ce2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c8e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d11f      	bne.n	8007ce2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ca6:	f043 0201 	orr.w	r2, r3, #1
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007cae:	e018      	b.n	8007ce2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d111      	bne.n	8007ce2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cc2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d105      	bne.n	8007ce2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cda:	f043 0201 	orr.w	r2, r3, #1
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f7ff faaa 	bl	800723c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007ce8:	e00e      	b.n	8007d08 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cee:	f003 0310 	and.w	r3, r3, #16
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d003      	beq.n	8007cfe <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f7ff fabe 	bl	8007278 <HAL_ADC_ErrorCallback>
}
 8007cfc:	e004      	b.n	8007d08 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	4798      	blx	r3
}
 8007d08:	bf00      	nop
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d1c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f7ff fa96 	bl	8007250 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007d24:	bf00      	nop
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d38:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d3e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d4a:	f043 0204 	orr.w	r2, r3, #4
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f7ff fa90 	bl	8007278 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007d58:	bf00      	nop
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <LL_ADC_IsEnabled>:
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	f003 0301 	and.w	r3, r3, #1
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d101      	bne.n	8007d78 <LL_ADC_IsEnabled+0x18>
 8007d74:	2301      	movs	r3, #1
 8007d76:	e000      	b.n	8007d7a <LL_ADC_IsEnabled+0x1a>
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr

08007d86 <LL_ADC_REG_IsConversionOngoing>:
{
 8007d86:	b480      	push	{r7}
 8007d88:	b083      	sub	sp, #12
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f003 0304 	and.w	r3, r3, #4
 8007d96:	2b04      	cmp	r3, #4
 8007d98:	d101      	bne.n	8007d9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e000      	b.n	8007da0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007e04:	bf00      	nop
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8007e10:	b590      	push	{r4, r7, lr}
 8007e12:	b0a1      	sub	sp, #132	@ 0x84
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d101      	bne.n	8007e2e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007e2a:	2302      	movs	r3, #2
 8007e2c:	e0e7      	b.n	8007ffe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2201      	movs	r2, #1
 8007e32:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8007e36:	2300      	movs	r3, #0
 8007e38:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e46:	d102      	bne.n	8007e4e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007e48:	4b6f      	ldr	r3, [pc, #444]	@ (8008008 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007e4a:	60bb      	str	r3, [r7, #8]
 8007e4c:	e009      	b.n	8007e62 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a6e      	ldr	r2, [pc, #440]	@ (800800c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d102      	bne.n	8007e5e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8007e58:	4b6d      	ldr	r3, [pc, #436]	@ (8008010 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007e5a:	60bb      	str	r3, [r7, #8]
 8007e5c:	e001      	b.n	8007e62 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d10b      	bne.n	8007e80 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e6c:	f043 0220 	orr.w	r2, r3, #32
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e0be      	b.n	8007ffe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7ff ff7f 	bl	8007d86 <LL_ADC_REG_IsConversionOngoing>
 8007e88:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7ff ff79 	bl	8007d86 <LL_ADC_REG_IsConversionOngoing>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f040 80a0 	bne.w	8007fdc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8007e9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f040 809c 	bne.w	8007fdc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007eac:	d004      	beq.n	8007eb8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a55      	ldr	r2, [pc, #340]	@ (8008008 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d101      	bne.n	8007ebc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8007eb8:	4b56      	ldr	r3, [pc, #344]	@ (8008014 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8007eba:	e000      	b.n	8007ebe <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8007ebc:	4b56      	ldr	r3, [pc, #344]	@ (8008018 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8007ebe:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d04b      	beq.n	8007f60 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007ec8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	6859      	ldr	r1, [r3, #4]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007eda:	035b      	lsls	r3, r3, #13
 8007edc:	430b      	orrs	r3, r1
 8007ede:	431a      	orrs	r2, r3
 8007ee0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ee2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007eec:	d004      	beq.n	8007ef8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a45      	ldr	r2, [pc, #276]	@ (8008008 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d10f      	bne.n	8007f18 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8007ef8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007efc:	f7ff ff30 	bl	8007d60 <LL_ADC_IsEnabled>
 8007f00:	4604      	mov	r4, r0
 8007f02:	4841      	ldr	r0, [pc, #260]	@ (8008008 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007f04:	f7ff ff2c 	bl	8007d60 <LL_ADC_IsEnabled>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	4323      	orrs	r3, r4
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	bf0c      	ite	eq
 8007f10:	2301      	moveq	r3, #1
 8007f12:	2300      	movne	r3, #0
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	e012      	b.n	8007f3e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8007f18:	483c      	ldr	r0, [pc, #240]	@ (800800c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007f1a:	f7ff ff21 	bl	8007d60 <LL_ADC_IsEnabled>
 8007f1e:	4604      	mov	r4, r0
 8007f20:	483b      	ldr	r0, [pc, #236]	@ (8008010 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007f22:	f7ff ff1d 	bl	8007d60 <LL_ADC_IsEnabled>
 8007f26:	4603      	mov	r3, r0
 8007f28:	431c      	orrs	r4, r3
 8007f2a:	483c      	ldr	r0, [pc, #240]	@ (800801c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007f2c:	f7ff ff18 	bl	8007d60 <LL_ADC_IsEnabled>
 8007f30:	4603      	mov	r3, r0
 8007f32:	4323      	orrs	r3, r4
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	bf0c      	ite	eq
 8007f38:	2301      	moveq	r3, #1
 8007f3a:	2300      	movne	r3, #0
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d056      	beq.n	8007ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007f42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007f4a:	f023 030f 	bic.w	r3, r3, #15
 8007f4e:	683a      	ldr	r2, [r7, #0]
 8007f50:	6811      	ldr	r1, [r2, #0]
 8007f52:	683a      	ldr	r2, [r7, #0]
 8007f54:	6892      	ldr	r2, [r2, #8]
 8007f56:	430a      	orrs	r2, r1
 8007f58:	431a      	orrs	r2, r3
 8007f5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f5c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007f5e:	e047      	b.n	8007ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007f60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007f68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f6a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f74:	d004      	beq.n	8007f80 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a23      	ldr	r2, [pc, #140]	@ (8008008 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d10f      	bne.n	8007fa0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8007f80:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007f84:	f7ff feec 	bl	8007d60 <LL_ADC_IsEnabled>
 8007f88:	4604      	mov	r4, r0
 8007f8a:	481f      	ldr	r0, [pc, #124]	@ (8008008 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007f8c:	f7ff fee8 	bl	8007d60 <LL_ADC_IsEnabled>
 8007f90:	4603      	mov	r3, r0
 8007f92:	4323      	orrs	r3, r4
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	bf0c      	ite	eq
 8007f98:	2301      	moveq	r3, #1
 8007f9a:	2300      	movne	r3, #0
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	e012      	b.n	8007fc6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8007fa0:	481a      	ldr	r0, [pc, #104]	@ (800800c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007fa2:	f7ff fedd 	bl	8007d60 <LL_ADC_IsEnabled>
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	4819      	ldr	r0, [pc, #100]	@ (8008010 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007faa:	f7ff fed9 	bl	8007d60 <LL_ADC_IsEnabled>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	431c      	orrs	r4, r3
 8007fb2:	481a      	ldr	r0, [pc, #104]	@ (800801c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007fb4:	f7ff fed4 	bl	8007d60 <LL_ADC_IsEnabled>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	4323      	orrs	r3, r4
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	bf0c      	ite	eq
 8007fc0:	2301      	moveq	r3, #1
 8007fc2:	2300      	movne	r3, #0
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d012      	beq.n	8007ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007fca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007fd2:	f023 030f 	bic.w	r3, r3, #15
 8007fd6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007fd8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007fda:	e009      	b.n	8007ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fe0:	f043 0220 	orr.w	r2, r3, #32
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8007fee:	e000      	b.n	8007ff2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007ff0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007ffa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3784      	adds	r7, #132	@ 0x84
 8008002:	46bd      	mov	sp, r7
 8008004:	bd90      	pop	{r4, r7, pc}
 8008006:	bf00      	nop
 8008008:	50000100 	.word	0x50000100
 800800c:	50000400 	.word	0x50000400
 8008010:	50000500 	.word	0x50000500
 8008014:	50000300 	.word	0x50000300
 8008018:	50000700 	.word	0x50000700
 800801c:	50000600 	.word	0x50000600

08008020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f003 0307 	and.w	r3, r3, #7
 800802e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008030:	4b0c      	ldr	r3, [pc, #48]	@ (8008064 <__NVIC_SetPriorityGrouping+0x44>)
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008036:	68ba      	ldr	r2, [r7, #8]
 8008038:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800803c:	4013      	ands	r3, r2
 800803e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008048:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800804c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008052:	4a04      	ldr	r2, [pc, #16]	@ (8008064 <__NVIC_SetPriorityGrouping+0x44>)
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	60d3      	str	r3, [r2, #12]
}
 8008058:	bf00      	nop
 800805a:	3714      	adds	r7, #20
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr
 8008064:	e000ed00 	.word	0xe000ed00

08008068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008068:	b480      	push	{r7}
 800806a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800806c:	4b04      	ldr	r3, [pc, #16]	@ (8008080 <__NVIC_GetPriorityGrouping+0x18>)
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	0a1b      	lsrs	r3, r3, #8
 8008072:	f003 0307 	and.w	r3, r3, #7
}
 8008076:	4618      	mov	r0, r3
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr
 8008080:	e000ed00 	.word	0xe000ed00

08008084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	4603      	mov	r3, r0
 800808c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800808e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008092:	2b00      	cmp	r3, #0
 8008094:	db0b      	blt.n	80080ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008096:	79fb      	ldrb	r3, [r7, #7]
 8008098:	f003 021f 	and.w	r2, r3, #31
 800809c:	4907      	ldr	r1, [pc, #28]	@ (80080bc <__NVIC_EnableIRQ+0x38>)
 800809e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080a2:	095b      	lsrs	r3, r3, #5
 80080a4:	2001      	movs	r0, #1
 80080a6:	fa00 f202 	lsl.w	r2, r0, r2
 80080aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80080ae:	bf00      	nop
 80080b0:	370c      	adds	r7, #12
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	e000e100 	.word	0xe000e100

080080c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	4603      	mov	r3, r0
 80080c8:	6039      	str	r1, [r7, #0]
 80080ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	db0a      	blt.n	80080ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	b2da      	uxtb	r2, r3
 80080d8:	490c      	ldr	r1, [pc, #48]	@ (800810c <__NVIC_SetPriority+0x4c>)
 80080da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080de:	0112      	lsls	r2, r2, #4
 80080e0:	b2d2      	uxtb	r2, r2
 80080e2:	440b      	add	r3, r1
 80080e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80080e8:	e00a      	b.n	8008100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	b2da      	uxtb	r2, r3
 80080ee:	4908      	ldr	r1, [pc, #32]	@ (8008110 <__NVIC_SetPriority+0x50>)
 80080f0:	79fb      	ldrb	r3, [r7, #7]
 80080f2:	f003 030f 	and.w	r3, r3, #15
 80080f6:	3b04      	subs	r3, #4
 80080f8:	0112      	lsls	r2, r2, #4
 80080fa:	b2d2      	uxtb	r2, r2
 80080fc:	440b      	add	r3, r1
 80080fe:	761a      	strb	r2, [r3, #24]
}
 8008100:	bf00      	nop
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr
 800810c:	e000e100 	.word	0xe000e100
 8008110:	e000ed00 	.word	0xe000ed00

08008114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008114:	b480      	push	{r7}
 8008116:	b089      	sub	sp, #36	@ 0x24
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f003 0307 	and.w	r3, r3, #7
 8008126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	f1c3 0307 	rsb	r3, r3, #7
 800812e:	2b04      	cmp	r3, #4
 8008130:	bf28      	it	cs
 8008132:	2304      	movcs	r3, #4
 8008134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	3304      	adds	r3, #4
 800813a:	2b06      	cmp	r3, #6
 800813c:	d902      	bls.n	8008144 <NVIC_EncodePriority+0x30>
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	3b03      	subs	r3, #3
 8008142:	e000      	b.n	8008146 <NVIC_EncodePriority+0x32>
 8008144:	2300      	movs	r3, #0
 8008146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008148:	f04f 32ff 	mov.w	r2, #4294967295
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	fa02 f303 	lsl.w	r3, r2, r3
 8008152:	43da      	mvns	r2, r3
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	401a      	ands	r2, r3
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800815c:	f04f 31ff 	mov.w	r1, #4294967295
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	fa01 f303 	lsl.w	r3, r1, r3
 8008166:	43d9      	mvns	r1, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800816c:	4313      	orrs	r3, r2
         );
}
 800816e:	4618      	mov	r0, r3
 8008170:	3724      	adds	r7, #36	@ 0x24
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
	...

0800817c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	3b01      	subs	r3, #1
 8008188:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800818c:	d301      	bcc.n	8008192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800818e:	2301      	movs	r3, #1
 8008190:	e00f      	b.n	80081b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008192:	4a0a      	ldr	r2, [pc, #40]	@ (80081bc <SysTick_Config+0x40>)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	3b01      	subs	r3, #1
 8008198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800819a:	210f      	movs	r1, #15
 800819c:	f04f 30ff 	mov.w	r0, #4294967295
 80081a0:	f7ff ff8e 	bl	80080c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80081a4:	4b05      	ldr	r3, [pc, #20]	@ (80081bc <SysTick_Config+0x40>)
 80081a6:	2200      	movs	r2, #0
 80081a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80081aa:	4b04      	ldr	r3, [pc, #16]	@ (80081bc <SysTick_Config+0x40>)
 80081ac:	2207      	movs	r2, #7
 80081ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	e000e010 	.word	0xe000e010

080081c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f7ff ff29 	bl	8008020 <__NVIC_SetPriorityGrouping>
}
 80081ce:	bf00      	nop
 80081d0:	3708      	adds	r7, #8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b086      	sub	sp, #24
 80081da:	af00      	add	r7, sp, #0
 80081dc:	4603      	mov	r3, r0
 80081de:	60b9      	str	r1, [r7, #8]
 80081e0:	607a      	str	r2, [r7, #4]
 80081e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80081e4:	f7ff ff40 	bl	8008068 <__NVIC_GetPriorityGrouping>
 80081e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	68b9      	ldr	r1, [r7, #8]
 80081ee:	6978      	ldr	r0, [r7, #20]
 80081f0:	f7ff ff90 	bl	8008114 <NVIC_EncodePriority>
 80081f4:	4602      	mov	r2, r0
 80081f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081fa:	4611      	mov	r1, r2
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7ff ff5f 	bl	80080c0 <__NVIC_SetPriority>
}
 8008202:	bf00      	nop
 8008204:	3718      	adds	r7, #24
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b082      	sub	sp, #8
 800820e:	af00      	add	r7, sp, #0
 8008210:	4603      	mov	r3, r0
 8008212:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008218:	4618      	mov	r0, r3
 800821a:	f7ff ff33 	bl	8008084 <__NVIC_EnableIRQ>
}
 800821e:	bf00      	nop
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b082      	sub	sp, #8
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7ff ffa4 	bl	800817c <SysTick_Config>
 8008234:	4603      	mov	r3, r0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3708      	adds	r7, #8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
	...

08008240 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d101      	bne.n	8008252 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e08d      	b.n	800836e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	461a      	mov	r2, r3
 8008258:	4b47      	ldr	r3, [pc, #284]	@ (8008378 <HAL_DMA_Init+0x138>)
 800825a:	429a      	cmp	r2, r3
 800825c:	d80f      	bhi.n	800827e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	461a      	mov	r2, r3
 8008264:	4b45      	ldr	r3, [pc, #276]	@ (800837c <HAL_DMA_Init+0x13c>)
 8008266:	4413      	add	r3, r2
 8008268:	4a45      	ldr	r2, [pc, #276]	@ (8008380 <HAL_DMA_Init+0x140>)
 800826a:	fba2 2303 	umull	r2, r3, r2, r3
 800826e:	091b      	lsrs	r3, r3, #4
 8008270:	009a      	lsls	r2, r3, #2
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a42      	ldr	r2, [pc, #264]	@ (8008384 <HAL_DMA_Init+0x144>)
 800827a:	641a      	str	r2, [r3, #64]	@ 0x40
 800827c:	e00e      	b.n	800829c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	4b40      	ldr	r3, [pc, #256]	@ (8008388 <HAL_DMA_Init+0x148>)
 8008286:	4413      	add	r3, r2
 8008288:	4a3d      	ldr	r2, [pc, #244]	@ (8008380 <HAL_DMA_Init+0x140>)
 800828a:	fba2 2303 	umull	r2, r3, r2, r3
 800828e:	091b      	lsrs	r3, r3, #4
 8008290:	009a      	lsls	r2, r3, #2
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a3c      	ldr	r2, [pc, #240]	@ (800838c <HAL_DMA_Init+0x14c>)
 800829a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2202      	movs	r2, #2
 80082a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80082b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80082c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a1b      	ldr	r3, [r3, #32]
 80082de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fa76 	bl	80087e0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082fc:	d102      	bne.n	8008304 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685a      	ldr	r2, [r3, #4]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800830c:	b2d2      	uxtb	r2, r2
 800830e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008318:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d010      	beq.n	8008344 <HAL_DMA_Init+0x104>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	2b04      	cmp	r3, #4
 8008328:	d80c      	bhi.n	8008344 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fa96 	bl	800885c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008334:	2200      	movs	r2, #0
 8008336:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008340:	605a      	str	r2, [r3, #4]
 8008342:	e008      	b.n	8008356 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	40020407 	.word	0x40020407
 800837c:	bffdfff8 	.word	0xbffdfff8
 8008380:	cccccccd 	.word	0xcccccccd
 8008384:	40020000 	.word	0x40020000
 8008388:	bffdfbf8 	.word	0xbffdfbf8
 800838c:	40020400 	.word	0x40020400

08008390 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b086      	sub	sp, #24
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
 800839c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800839e:	2300      	movs	r3, #0
 80083a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d101      	bne.n	80083b0 <HAL_DMA_Start_IT+0x20>
 80083ac:	2302      	movs	r3, #2
 80083ae:	e066      	b.n	800847e <HAL_DMA_Start_IT+0xee>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d155      	bne.n	8008470 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2202      	movs	r2, #2
 80083c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2200      	movs	r2, #0
 80083d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f022 0201 	bic.w	r2, r2, #1
 80083e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	68b9      	ldr	r1, [r7, #8]
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f000 f9bb 	bl	8008764 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d008      	beq.n	8008408 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f042 020e 	orr.w	r2, r2, #14
 8008404:	601a      	str	r2, [r3, #0]
 8008406:	e00f      	b.n	8008428 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f022 0204 	bic.w	r2, r2, #4
 8008416:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f042 020a 	orr.w	r2, r2, #10
 8008426:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008432:	2b00      	cmp	r3, #0
 8008434:	d007      	beq.n	8008446 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008440:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008444:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800844a:	2b00      	cmp	r3, #0
 800844c:	d007      	beq.n	800845e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008458:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800845c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f042 0201 	orr.w	r2, r2, #1
 800846c:	601a      	str	r2, [r3, #0]
 800846e:	e005      	b.n	800847c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008478:	2302      	movs	r3, #2
 800847a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800847c:	7dfb      	ldrb	r3, [r7, #23]
}
 800847e:	4618      	mov	r0, r3
 8008480:	3718      	adds	r7, #24
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008486:	b480      	push	{r7}
 8008488:	b085      	sub	sp, #20
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800848e:	2300      	movs	r3, #0
 8008490:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008498:	b2db      	uxtb	r3, r3
 800849a:	2b02      	cmp	r3, #2
 800849c:	d005      	beq.n	80084aa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2204      	movs	r2, #4
 80084a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	73fb      	strb	r3, [r7, #15]
 80084a8:	e037      	b.n	800851a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f022 020e 	bic.w	r2, r2, #14
 80084b8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80084c8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f022 0201 	bic.w	r2, r2, #1
 80084d8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084de:	f003 021f 	and.w	r2, r3, #31
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e6:	2101      	movs	r1, #1
 80084e8:	fa01 f202 	lsl.w	r2, r1, r2
 80084ec:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80084f6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d00c      	beq.n	800851a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800850a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800850e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008518:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2201      	movs	r2, #1
 800851e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800852a:	7bfb      	ldrb	r3, [r7, #15]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3714      	adds	r7, #20
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008540:	2300      	movs	r3, #0
 8008542:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800854a:	b2db      	uxtb	r3, r3
 800854c:	2b02      	cmp	r3, #2
 800854e:	d00d      	beq.n	800856c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2204      	movs	r2, #4
 8008554:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2201      	movs	r2, #1
 800855a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	73fb      	strb	r3, [r7, #15]
 800856a:	e047      	b.n	80085fc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f022 020e 	bic.w	r2, r2, #14
 800857a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f022 0201 	bic.w	r2, r2, #1
 800858a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008596:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800859a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085a0:	f003 021f 	and.w	r2, r3, #31
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085a8:	2101      	movs	r1, #1
 80085aa:	fa01 f202 	lsl.w	r2, r1, r2
 80085ae:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80085b8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00c      	beq.n	80085dc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80085d0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80085da:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d003      	beq.n	80085fc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	4798      	blx	r3
    }
  }
  return status;
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b084      	sub	sp, #16
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008622:	f003 031f 	and.w	r3, r3, #31
 8008626:	2204      	movs	r2, #4
 8008628:	409a      	lsls	r2, r3
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	4013      	ands	r3, r2
 800862e:	2b00      	cmp	r3, #0
 8008630:	d026      	beq.n	8008680 <HAL_DMA_IRQHandler+0x7a>
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	f003 0304 	and.w	r3, r3, #4
 8008638:	2b00      	cmp	r3, #0
 800863a:	d021      	beq.n	8008680 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f003 0320 	and.w	r3, r3, #32
 8008646:	2b00      	cmp	r3, #0
 8008648:	d107      	bne.n	800865a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f022 0204 	bic.w	r2, r2, #4
 8008658:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800865e:	f003 021f 	and.w	r2, r3, #31
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008666:	2104      	movs	r1, #4
 8008668:	fa01 f202 	lsl.w	r2, r1, r2
 800866c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008672:	2b00      	cmp	r3, #0
 8008674:	d071      	beq.n	800875a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800867e:	e06c      	b.n	800875a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008684:	f003 031f 	and.w	r3, r3, #31
 8008688:	2202      	movs	r2, #2
 800868a:	409a      	lsls	r2, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	4013      	ands	r3, r2
 8008690:	2b00      	cmp	r3, #0
 8008692:	d02e      	beq.n	80086f2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	f003 0302 	and.w	r3, r3, #2
 800869a:	2b00      	cmp	r3, #0
 800869c:	d029      	beq.n	80086f2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 0320 	and.w	r3, r3, #32
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d10b      	bne.n	80086c4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f022 020a 	bic.w	r2, r2, #10
 80086ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086c8:	f003 021f 	and.w	r2, r3, #31
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086d0:	2102      	movs	r1, #2
 80086d2:	fa01 f202 	lsl.w	r2, r1, r2
 80086d6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d038      	beq.n	800875a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80086f0:	e033      	b.n	800875a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086f6:	f003 031f 	and.w	r3, r3, #31
 80086fa:	2208      	movs	r2, #8
 80086fc:	409a      	lsls	r2, r3
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	4013      	ands	r3, r2
 8008702:	2b00      	cmp	r3, #0
 8008704:	d02a      	beq.n	800875c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	f003 0308 	and.w	r3, r3, #8
 800870c:	2b00      	cmp	r3, #0
 800870e:	d025      	beq.n	800875c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f022 020e 	bic.w	r2, r2, #14
 800871e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008724:	f003 021f 	and.w	r2, r3, #31
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800872c:	2101      	movs	r1, #1
 800872e:	fa01 f202 	lsl.w	r2, r1, r2
 8008732:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2201      	movs	r2, #1
 800873e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800874e:	2b00      	cmp	r3, #0
 8008750:	d004      	beq.n	800875c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800875a:	bf00      	nop
 800875c:	bf00      	nop
}
 800875e:	3710      	adds	r7, #16
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
 8008770:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008776:	68fa      	ldr	r2, [r7, #12]
 8008778:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800877a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008780:	2b00      	cmp	r3, #0
 8008782:	d004      	beq.n	800878e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800878c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008792:	f003 021f 	and.w	r2, r3, #31
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800879a:	2101      	movs	r1, #1
 800879c:	fa01 f202 	lsl.w	r2, r1, r2
 80087a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	683a      	ldr	r2, [r7, #0]
 80087a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	2b10      	cmp	r3, #16
 80087b0:	d108      	bne.n	80087c4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80087c2:	e007      	b.n	80087d4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	60da      	str	r2, [r3, #12]
}
 80087d4:	bf00      	nop
 80087d6:	3714      	adds	r7, #20
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b087      	sub	sp, #28
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	461a      	mov	r2, r3
 80087ee:	4b16      	ldr	r3, [pc, #88]	@ (8008848 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d802      	bhi.n	80087fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80087f4:	4b15      	ldr	r3, [pc, #84]	@ (800884c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80087f6:	617b      	str	r3, [r7, #20]
 80087f8:	e001      	b.n	80087fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80087fa:	4b15      	ldr	r3, [pc, #84]	@ (8008850 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80087fc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	b2db      	uxtb	r3, r3
 8008808:	3b08      	subs	r3, #8
 800880a:	4a12      	ldr	r2, [pc, #72]	@ (8008854 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800880c:	fba2 2303 	umull	r2, r3, r2, r3
 8008810:	091b      	lsrs	r3, r3, #4
 8008812:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008818:	089b      	lsrs	r3, r3, #2
 800881a:	009a      	lsls	r2, r3, #2
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	4413      	add	r3, r2
 8008820:	461a      	mov	r2, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a0b      	ldr	r2, [pc, #44]	@ (8008858 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800882a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f003 031f 	and.w	r3, r3, #31
 8008832:	2201      	movs	r2, #1
 8008834:	409a      	lsls	r2, r3
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800883a:	bf00      	nop
 800883c:	371c      	adds	r7, #28
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop
 8008848:	40020407 	.word	0x40020407
 800884c:	40020800 	.word	0x40020800
 8008850:	40020820 	.word	0x40020820
 8008854:	cccccccd 	.word	0xcccccccd
 8008858:	40020880 	.word	0x40020880

0800885c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	b2db      	uxtb	r3, r3
 800886a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	4b0b      	ldr	r3, [pc, #44]	@ (800889c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008870:	4413      	add	r3, r2
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	461a      	mov	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a08      	ldr	r2, [pc, #32]	@ (80088a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800887e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	3b01      	subs	r3, #1
 8008884:	f003 031f 	and.w	r3, r3, #31
 8008888:	2201      	movs	r2, #1
 800888a:	409a      	lsls	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8008890:	bf00      	nop
 8008892:	3714      	adds	r7, #20
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr
 800889c:	1000823f 	.word	0x1000823f
 80088a0:	40020940 	.word	0x40020940

080088a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b087      	sub	sp, #28
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80088ae:	2300      	movs	r3, #0
 80088b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80088b2:	e15a      	b.n	8008b6a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	2101      	movs	r1, #1
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	fa01 f303 	lsl.w	r3, r1, r3
 80088c0:	4013      	ands	r3, r2
 80088c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f000 814c 	beq.w	8008b64 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	f003 0303 	and.w	r3, r3, #3
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d005      	beq.n	80088e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	d130      	bne.n	8008946 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	005b      	lsls	r3, r3, #1
 80088ee:	2203      	movs	r2, #3
 80088f0:	fa02 f303 	lsl.w	r3, r2, r3
 80088f4:	43db      	mvns	r3, r3
 80088f6:	693a      	ldr	r2, [r7, #16]
 80088f8:	4013      	ands	r3, r2
 80088fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	68da      	ldr	r2, [r3, #12]
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	005b      	lsls	r3, r3, #1
 8008904:	fa02 f303 	lsl.w	r3, r2, r3
 8008908:	693a      	ldr	r2, [r7, #16]
 800890a:	4313      	orrs	r3, r2
 800890c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	693a      	ldr	r2, [r7, #16]
 8008912:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800891a:	2201      	movs	r2, #1
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	fa02 f303 	lsl.w	r3, r2, r3
 8008922:	43db      	mvns	r3, r3
 8008924:	693a      	ldr	r2, [r7, #16]
 8008926:	4013      	ands	r3, r2
 8008928:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	091b      	lsrs	r3, r3, #4
 8008930:	f003 0201 	and.w	r2, r3, #1
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	fa02 f303 	lsl.w	r3, r2, r3
 800893a:	693a      	ldr	r2, [r7, #16]
 800893c:	4313      	orrs	r3, r2
 800893e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	f003 0303 	and.w	r3, r3, #3
 800894e:	2b03      	cmp	r3, #3
 8008950:	d017      	beq.n	8008982 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	005b      	lsls	r3, r3, #1
 800895c:	2203      	movs	r2, #3
 800895e:	fa02 f303 	lsl.w	r3, r2, r3
 8008962:	43db      	mvns	r3, r3
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	4013      	ands	r3, r2
 8008968:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	689a      	ldr	r2, [r3, #8]
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	005b      	lsls	r3, r3, #1
 8008972:	fa02 f303 	lsl.w	r3, r2, r3
 8008976:	693a      	ldr	r2, [r7, #16]
 8008978:	4313      	orrs	r3, r2
 800897a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	693a      	ldr	r2, [r7, #16]
 8008980:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	f003 0303 	and.w	r3, r3, #3
 800898a:	2b02      	cmp	r3, #2
 800898c:	d123      	bne.n	80089d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	08da      	lsrs	r2, r3, #3
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	3208      	adds	r2, #8
 8008996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800899a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	f003 0307 	and.w	r3, r3, #7
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	220f      	movs	r2, #15
 80089a6:	fa02 f303 	lsl.w	r3, r2, r3
 80089aa:	43db      	mvns	r3, r3
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	4013      	ands	r3, r2
 80089b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	691a      	ldr	r2, [r3, #16]
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	f003 0307 	and.w	r3, r3, #7
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	fa02 f303 	lsl.w	r3, r2, r3
 80089c2:	693a      	ldr	r2, [r7, #16]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	08da      	lsrs	r2, r3, #3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	3208      	adds	r2, #8
 80089d0:	6939      	ldr	r1, [r7, #16]
 80089d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	005b      	lsls	r3, r3, #1
 80089e0:	2203      	movs	r2, #3
 80089e2:	fa02 f303 	lsl.w	r3, r2, r3
 80089e6:	43db      	mvns	r3, r3
 80089e8:	693a      	ldr	r2, [r7, #16]
 80089ea:	4013      	ands	r3, r2
 80089ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	f003 0203 	and.w	r2, r3, #3
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	005b      	lsls	r3, r3, #1
 80089fa:	fa02 f303 	lsl.w	r3, r2, r3
 80089fe:	693a      	ldr	r2, [r7, #16]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	693a      	ldr	r2, [r7, #16]
 8008a08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	f000 80a6 	beq.w	8008b64 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a18:	4b5b      	ldr	r3, [pc, #364]	@ (8008b88 <HAL_GPIO_Init+0x2e4>)
 8008a1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a1c:	4a5a      	ldr	r2, [pc, #360]	@ (8008b88 <HAL_GPIO_Init+0x2e4>)
 8008a1e:	f043 0301 	orr.w	r3, r3, #1
 8008a22:	6613      	str	r3, [r2, #96]	@ 0x60
 8008a24:	4b58      	ldr	r3, [pc, #352]	@ (8008b88 <HAL_GPIO_Init+0x2e4>)
 8008a26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a28:	f003 0301 	and.w	r3, r3, #1
 8008a2c:	60bb      	str	r3, [r7, #8]
 8008a2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008a30:	4a56      	ldr	r2, [pc, #344]	@ (8008b8c <HAL_GPIO_Init+0x2e8>)
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	089b      	lsrs	r3, r3, #2
 8008a36:	3302      	adds	r3, #2
 8008a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	f003 0303 	and.w	r3, r3, #3
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	220f      	movs	r2, #15
 8008a48:	fa02 f303 	lsl.w	r3, r2, r3
 8008a4c:	43db      	mvns	r3, r3
 8008a4e:	693a      	ldr	r2, [r7, #16]
 8008a50:	4013      	ands	r3, r2
 8008a52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008a5a:	d01f      	beq.n	8008a9c <HAL_GPIO_Init+0x1f8>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4a4c      	ldr	r2, [pc, #304]	@ (8008b90 <HAL_GPIO_Init+0x2ec>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d019      	beq.n	8008a98 <HAL_GPIO_Init+0x1f4>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a4b      	ldr	r2, [pc, #300]	@ (8008b94 <HAL_GPIO_Init+0x2f0>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d013      	beq.n	8008a94 <HAL_GPIO_Init+0x1f0>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a4a      	ldr	r2, [pc, #296]	@ (8008b98 <HAL_GPIO_Init+0x2f4>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d00d      	beq.n	8008a90 <HAL_GPIO_Init+0x1ec>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a49      	ldr	r2, [pc, #292]	@ (8008b9c <HAL_GPIO_Init+0x2f8>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d007      	beq.n	8008a8c <HAL_GPIO_Init+0x1e8>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a48      	ldr	r2, [pc, #288]	@ (8008ba0 <HAL_GPIO_Init+0x2fc>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d101      	bne.n	8008a88 <HAL_GPIO_Init+0x1e4>
 8008a84:	2305      	movs	r3, #5
 8008a86:	e00a      	b.n	8008a9e <HAL_GPIO_Init+0x1fa>
 8008a88:	2306      	movs	r3, #6
 8008a8a:	e008      	b.n	8008a9e <HAL_GPIO_Init+0x1fa>
 8008a8c:	2304      	movs	r3, #4
 8008a8e:	e006      	b.n	8008a9e <HAL_GPIO_Init+0x1fa>
 8008a90:	2303      	movs	r3, #3
 8008a92:	e004      	b.n	8008a9e <HAL_GPIO_Init+0x1fa>
 8008a94:	2302      	movs	r3, #2
 8008a96:	e002      	b.n	8008a9e <HAL_GPIO_Init+0x1fa>
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e000      	b.n	8008a9e <HAL_GPIO_Init+0x1fa>
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	697a      	ldr	r2, [r7, #20]
 8008aa0:	f002 0203 	and.w	r2, r2, #3
 8008aa4:	0092      	lsls	r2, r2, #2
 8008aa6:	4093      	lsls	r3, r2
 8008aa8:	693a      	ldr	r2, [r7, #16]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008aae:	4937      	ldr	r1, [pc, #220]	@ (8008b8c <HAL_GPIO_Init+0x2e8>)
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	089b      	lsrs	r3, r3, #2
 8008ab4:	3302      	adds	r3, #2
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008abc:	4b39      	ldr	r3, [pc, #228]	@ (8008ba4 <HAL_GPIO_Init+0x300>)
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	43db      	mvns	r3, r3
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	4013      	ands	r3, r2
 8008aca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d003      	beq.n	8008ae0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008ad8:	693a      	ldr	r2, [r7, #16]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008ae0:	4a30      	ldr	r2, [pc, #192]	@ (8008ba4 <HAL_GPIO_Init+0x300>)
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008ae6:	4b2f      	ldr	r3, [pc, #188]	@ (8008ba4 <HAL_GPIO_Init+0x300>)
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	43db      	mvns	r3, r3
 8008af0:	693a      	ldr	r2, [r7, #16]
 8008af2:	4013      	ands	r3, r2
 8008af4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d003      	beq.n	8008b0a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008b02:	693a      	ldr	r2, [r7, #16]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008b0a:	4a26      	ldr	r2, [pc, #152]	@ (8008ba4 <HAL_GPIO_Init+0x300>)
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008b10:	4b24      	ldr	r3, [pc, #144]	@ (8008ba4 <HAL_GPIO_Init+0x300>)
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	43db      	mvns	r3, r3
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d003      	beq.n	8008b34 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008b34:	4a1b      	ldr	r2, [pc, #108]	@ (8008ba4 <HAL_GPIO_Init+0x300>)
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8008ba4 <HAL_GPIO_Init+0x300>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	43db      	mvns	r3, r3
 8008b44:	693a      	ldr	r2, [r7, #16]
 8008b46:	4013      	ands	r3, r2
 8008b48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d003      	beq.n	8008b5e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008b56:	693a      	ldr	r2, [r7, #16]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008b5e:	4a11      	ldr	r2, [pc, #68]	@ (8008ba4 <HAL_GPIO_Init+0x300>)
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	3301      	adds	r3, #1
 8008b68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	fa22 f303 	lsr.w	r3, r2, r3
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f47f ae9d 	bne.w	80088b4 <HAL_GPIO_Init+0x10>
  }
}
 8008b7a:	bf00      	nop
 8008b7c:	bf00      	nop
 8008b7e:	371c      	adds	r7, #28
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr
 8008b88:	40021000 	.word	0x40021000
 8008b8c:	40010000 	.word	0x40010000
 8008b90:	48000400 	.word	0x48000400
 8008b94:	48000800 	.word	0x48000800
 8008b98:	48000c00 	.word	0x48000c00
 8008b9c:	48001000 	.word	0x48001000
 8008ba0:	48001400 	.word	0x48001400
 8008ba4:	40010400 	.word	0x40010400

08008ba8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	691a      	ldr	r2, [r3, #16]
 8008bb8:	887b      	ldrh	r3, [r7, #2]
 8008bba:	4013      	ands	r3, r2
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d002      	beq.n	8008bc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	73fb      	strb	r3, [r7, #15]
 8008bc4:	e001      	b.n	8008bca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3714      	adds	r7, #20
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	460b      	mov	r3, r1
 8008be2:	807b      	strh	r3, [r7, #2]
 8008be4:	4613      	mov	r3, r2
 8008be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008be8:	787b      	ldrb	r3, [r7, #1]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d003      	beq.n	8008bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008bee:	887a      	ldrh	r2, [r7, #2]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008bf4:	e002      	b.n	8008bfc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008bf6:	887a      	ldrh	r2, [r7, #2]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008bfc:	bf00      	nop
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	4603      	mov	r3, r0
 8008c10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008c12:	4b08      	ldr	r3, [pc, #32]	@ (8008c34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008c14:	695a      	ldr	r2, [r3, #20]
 8008c16:	88fb      	ldrh	r3, [r7, #6]
 8008c18:	4013      	ands	r3, r2
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d006      	beq.n	8008c2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008c1e:	4a05      	ldr	r2, [pc, #20]	@ (8008c34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008c20:	88fb      	ldrh	r3, [r7, #6]
 8008c22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008c24:	88fb      	ldrh	r3, [r7, #6]
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7fb fed4 	bl	80049d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8008c2c:	bf00      	nop
 8008c2e:	3708      	adds	r7, #8
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	40010400 	.word	0x40010400

08008c38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d141      	bne.n	8008cca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008c46:	4b4b      	ldr	r3, [pc, #300]	@ (8008d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008c4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c52:	d131      	bne.n	8008cb8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008c54:	4b47      	ldr	r3, [pc, #284]	@ (8008d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c5a:	4a46      	ldr	r2, [pc, #280]	@ (8008d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008c64:	4b43      	ldr	r3, [pc, #268]	@ (8008d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008c6c:	4a41      	ldr	r2, [pc, #260]	@ (8008d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008c72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008c74:	4b40      	ldr	r3, [pc, #256]	@ (8008d78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2232      	movs	r2, #50	@ 0x32
 8008c7a:	fb02 f303 	mul.w	r3, r2, r3
 8008c7e:	4a3f      	ldr	r2, [pc, #252]	@ (8008d7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008c80:	fba2 2303 	umull	r2, r3, r2, r3
 8008c84:	0c9b      	lsrs	r3, r3, #18
 8008c86:	3301      	adds	r3, #1
 8008c88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008c8a:	e002      	b.n	8008c92 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	3b01      	subs	r3, #1
 8008c90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008c92:	4b38      	ldr	r3, [pc, #224]	@ (8008d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c9e:	d102      	bne.n	8008ca6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d1f2      	bne.n	8008c8c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008ca6:	4b33      	ldr	r3, [pc, #204]	@ (8008d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ca8:	695b      	ldr	r3, [r3, #20]
 8008caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008cae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008cb2:	d158      	bne.n	8008d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	e057      	b.n	8008d68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008cb8:	4b2e      	ldr	r3, [pc, #184]	@ (8008d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cbe:	4a2d      	ldr	r2, [pc, #180]	@ (8008d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008cc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008cc8:	e04d      	b.n	8008d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cd0:	d141      	bne.n	8008d56 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008cd2:	4b28      	ldr	r3, [pc, #160]	@ (8008d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008cde:	d131      	bne.n	8008d44 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008ce0:	4b24      	ldr	r3, [pc, #144]	@ (8008d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ce6:	4a23      	ldr	r2, [pc, #140]	@ (8008d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008cec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008cf0:	4b20      	ldr	r3, [pc, #128]	@ (8008d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008cf8:	4a1e      	ldr	r2, [pc, #120]	@ (8008d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008cfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008cfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008d00:	4b1d      	ldr	r3, [pc, #116]	@ (8008d78 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2232      	movs	r2, #50	@ 0x32
 8008d06:	fb02 f303 	mul.w	r3, r2, r3
 8008d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8008d7c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d10:	0c9b      	lsrs	r3, r3, #18
 8008d12:	3301      	adds	r3, #1
 8008d14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008d16:	e002      	b.n	8008d1e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008d1e:	4b15      	ldr	r3, [pc, #84]	@ (8008d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d20:	695b      	ldr	r3, [r3, #20]
 8008d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d2a:	d102      	bne.n	8008d32 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1f2      	bne.n	8008d18 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008d32:	4b10      	ldr	r3, [pc, #64]	@ (8008d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d34:	695b      	ldr	r3, [r3, #20]
 8008d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d3e:	d112      	bne.n	8008d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008d40:	2303      	movs	r3, #3
 8008d42:	e011      	b.n	8008d68 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008d44:	4b0b      	ldr	r3, [pc, #44]	@ (8008d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8008d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008d54:	e007      	b.n	8008d66 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008d56:	4b07      	ldr	r3, [pc, #28]	@ (8008d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008d5e:	4a05      	ldr	r2, [pc, #20]	@ (8008d74 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008d64:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3714      	adds	r7, #20
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr
 8008d74:	40007000 	.word	0x40007000
 8008d78:	200002b0 	.word	0x200002b0
 8008d7c:	431bde83 	.word	0x431bde83

08008d80 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008d80:	b480      	push	{r7}
 8008d82:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008d84:	4b05      	ldr	r3, [pc, #20]	@ (8008d9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	4a04      	ldr	r2, [pc, #16]	@ (8008d9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008d8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008d8e:	6093      	str	r3, [r2, #8]
}
 8008d90:	bf00      	nop
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	40007000 	.word	0x40007000

08008da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b088      	sub	sp, #32
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d101      	bne.n	8008db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e2fe      	b.n	80093b0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0301 	and.w	r3, r3, #1
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d075      	beq.n	8008eaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008dbe:	4b97      	ldr	r3, [pc, #604]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	f003 030c 	and.w	r3, r3, #12
 8008dc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008dc8:	4b94      	ldr	r3, [pc, #592]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	f003 0303 	and.w	r3, r3, #3
 8008dd0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008dd2:	69bb      	ldr	r3, [r7, #24]
 8008dd4:	2b0c      	cmp	r3, #12
 8008dd6:	d102      	bne.n	8008dde <HAL_RCC_OscConfig+0x3e>
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	d002      	beq.n	8008de4 <HAL_RCC_OscConfig+0x44>
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	2b08      	cmp	r3, #8
 8008de2:	d10b      	bne.n	8008dfc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008de4:	4b8d      	ldr	r3, [pc, #564]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d05b      	beq.n	8008ea8 <HAL_RCC_OscConfig+0x108>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d157      	bne.n	8008ea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e2d9      	b.n	80093b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e04:	d106      	bne.n	8008e14 <HAL_RCC_OscConfig+0x74>
 8008e06:	4b85      	ldr	r3, [pc, #532]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a84      	ldr	r2, [pc, #528]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e10:	6013      	str	r3, [r2, #0]
 8008e12:	e01d      	b.n	8008e50 <HAL_RCC_OscConfig+0xb0>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008e1c:	d10c      	bne.n	8008e38 <HAL_RCC_OscConfig+0x98>
 8008e1e:	4b7f      	ldr	r3, [pc, #508]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a7e      	ldr	r2, [pc, #504]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008e24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008e28:	6013      	str	r3, [r2, #0]
 8008e2a:	4b7c      	ldr	r3, [pc, #496]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a7b      	ldr	r2, [pc, #492]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e34:	6013      	str	r3, [r2, #0]
 8008e36:	e00b      	b.n	8008e50 <HAL_RCC_OscConfig+0xb0>
 8008e38:	4b78      	ldr	r3, [pc, #480]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a77      	ldr	r2, [pc, #476]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008e3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e42:	6013      	str	r3, [r2, #0]
 8008e44:	4b75      	ldr	r3, [pc, #468]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a74      	ldr	r2, [pc, #464]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008e4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d013      	beq.n	8008e80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e58:	f7fd fab4 	bl	80063c4 <HAL_GetTick>
 8008e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008e5e:	e008      	b.n	8008e72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e60:	f7fd fab0 	bl	80063c4 <HAL_GetTick>
 8008e64:	4602      	mov	r2, r0
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	1ad3      	subs	r3, r2, r3
 8008e6a:	2b64      	cmp	r3, #100	@ 0x64
 8008e6c:	d901      	bls.n	8008e72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008e6e:	2303      	movs	r3, #3
 8008e70:	e29e      	b.n	80093b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008e72:	4b6a      	ldr	r3, [pc, #424]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d0f0      	beq.n	8008e60 <HAL_RCC_OscConfig+0xc0>
 8008e7e:	e014      	b.n	8008eaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e80:	f7fd faa0 	bl	80063c4 <HAL_GetTick>
 8008e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008e86:	e008      	b.n	8008e9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e88:	f7fd fa9c 	bl	80063c4 <HAL_GetTick>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	1ad3      	subs	r3, r2, r3
 8008e92:	2b64      	cmp	r3, #100	@ 0x64
 8008e94:	d901      	bls.n	8008e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008e96:	2303      	movs	r3, #3
 8008e98:	e28a      	b.n	80093b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008e9a:	4b60      	ldr	r3, [pc, #384]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1f0      	bne.n	8008e88 <HAL_RCC_OscConfig+0xe8>
 8008ea6:	e000      	b.n	8008eaa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f003 0302 	and.w	r3, r3, #2
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d075      	beq.n	8008fa2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008eb6:	4b59      	ldr	r3, [pc, #356]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	f003 030c 	and.w	r3, r3, #12
 8008ebe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008ec0:	4b56      	ldr	r3, [pc, #344]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	f003 0303 	and.w	r3, r3, #3
 8008ec8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	2b0c      	cmp	r3, #12
 8008ece:	d102      	bne.n	8008ed6 <HAL_RCC_OscConfig+0x136>
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	2b02      	cmp	r3, #2
 8008ed4:	d002      	beq.n	8008edc <HAL_RCC_OscConfig+0x13c>
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	2b04      	cmp	r3, #4
 8008eda:	d11f      	bne.n	8008f1c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008edc:	4b4f      	ldr	r3, [pc, #316]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d005      	beq.n	8008ef4 <HAL_RCC_OscConfig+0x154>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d101      	bne.n	8008ef4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e25d      	b.n	80093b0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ef4:	4b49      	ldr	r3, [pc, #292]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	691b      	ldr	r3, [r3, #16]
 8008f00:	061b      	lsls	r3, r3, #24
 8008f02:	4946      	ldr	r1, [pc, #280]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008f04:	4313      	orrs	r3, r2
 8008f06:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008f08:	4b45      	ldr	r3, [pc, #276]	@ (8009020 <HAL_RCC_OscConfig+0x280>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f7fd fa0d 	bl	800632c <HAL_InitTick>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d043      	beq.n	8008fa0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e249      	b.n	80093b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d023      	beq.n	8008f6c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008f24:	4b3d      	ldr	r3, [pc, #244]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a3c      	ldr	r2, [pc, #240]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f30:	f7fd fa48 	bl	80063c4 <HAL_GetTick>
 8008f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f36:	e008      	b.n	8008f4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f38:	f7fd fa44 	bl	80063c4 <HAL_GetTick>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d901      	bls.n	8008f4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008f46:	2303      	movs	r3, #3
 8008f48:	e232      	b.n	80093b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f4a:	4b34      	ldr	r3, [pc, #208]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d0f0      	beq.n	8008f38 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f56:	4b31      	ldr	r3, [pc, #196]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	061b      	lsls	r3, r3, #24
 8008f64:	492d      	ldr	r1, [pc, #180]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008f66:	4313      	orrs	r3, r2
 8008f68:	604b      	str	r3, [r1, #4]
 8008f6a:	e01a      	b.n	8008fa2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a2a      	ldr	r2, [pc, #168]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008f72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f78:	f7fd fa24 	bl	80063c4 <HAL_GetTick>
 8008f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008f7e:	e008      	b.n	8008f92 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f80:	f7fd fa20 	bl	80063c4 <HAL_GetTick>
 8008f84:	4602      	mov	r2, r0
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	1ad3      	subs	r3, r2, r3
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d901      	bls.n	8008f92 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	e20e      	b.n	80093b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008f92:	4b22      	ldr	r3, [pc, #136]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1f0      	bne.n	8008f80 <HAL_RCC_OscConfig+0x1e0>
 8008f9e:	e000      	b.n	8008fa2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fa0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f003 0308 	and.w	r3, r3, #8
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d041      	beq.n	8009032 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	695b      	ldr	r3, [r3, #20]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d01c      	beq.n	8008ff0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008fb6:	4b19      	ldr	r3, [pc, #100]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008fbc:	4a17      	ldr	r2, [pc, #92]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008fbe:	f043 0301 	orr.w	r3, r3, #1
 8008fc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fc6:	f7fd f9fd 	bl	80063c4 <HAL_GetTick>
 8008fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008fcc:	e008      	b.n	8008fe0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008fce:	f7fd f9f9 	bl	80063c4 <HAL_GetTick>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	1ad3      	subs	r3, r2, r3
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	d901      	bls.n	8008fe0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008fdc:	2303      	movs	r3, #3
 8008fde:	e1e7      	b.n	80093b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008fe6:	f003 0302 	and.w	r3, r3, #2
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d0ef      	beq.n	8008fce <HAL_RCC_OscConfig+0x22e>
 8008fee:	e020      	b.n	8009032 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ff6:	4a09      	ldr	r2, [pc, #36]	@ (800901c <HAL_RCC_OscConfig+0x27c>)
 8008ff8:	f023 0301 	bic.w	r3, r3, #1
 8008ffc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009000:	f7fd f9e0 	bl	80063c4 <HAL_GetTick>
 8009004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009006:	e00d      	b.n	8009024 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009008:	f7fd f9dc 	bl	80063c4 <HAL_GetTick>
 800900c:	4602      	mov	r2, r0
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	2b02      	cmp	r3, #2
 8009014:	d906      	bls.n	8009024 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009016:	2303      	movs	r3, #3
 8009018:	e1ca      	b.n	80093b0 <HAL_RCC_OscConfig+0x610>
 800901a:	bf00      	nop
 800901c:	40021000 	.word	0x40021000
 8009020:	200002b4 	.word	0x200002b4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009024:	4b8c      	ldr	r3, [pc, #560]	@ (8009258 <HAL_RCC_OscConfig+0x4b8>)
 8009026:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800902a:	f003 0302 	and.w	r3, r3, #2
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1ea      	bne.n	8009008 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f003 0304 	and.w	r3, r3, #4
 800903a:	2b00      	cmp	r3, #0
 800903c:	f000 80a6 	beq.w	800918c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009040:	2300      	movs	r3, #0
 8009042:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009044:	4b84      	ldr	r3, [pc, #528]	@ (8009258 <HAL_RCC_OscConfig+0x4b8>)
 8009046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800904c:	2b00      	cmp	r3, #0
 800904e:	d101      	bne.n	8009054 <HAL_RCC_OscConfig+0x2b4>
 8009050:	2301      	movs	r3, #1
 8009052:	e000      	b.n	8009056 <HAL_RCC_OscConfig+0x2b6>
 8009054:	2300      	movs	r3, #0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00d      	beq.n	8009076 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800905a:	4b7f      	ldr	r3, [pc, #508]	@ (8009258 <HAL_RCC_OscConfig+0x4b8>)
 800905c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800905e:	4a7e      	ldr	r2, [pc, #504]	@ (8009258 <HAL_RCC_OscConfig+0x4b8>)
 8009060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009064:	6593      	str	r3, [r2, #88]	@ 0x58
 8009066:	4b7c      	ldr	r3, [pc, #496]	@ (8009258 <HAL_RCC_OscConfig+0x4b8>)
 8009068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800906a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800906e:	60fb      	str	r3, [r7, #12]
 8009070:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009072:	2301      	movs	r3, #1
 8009074:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009076:	4b79      	ldr	r3, [pc, #484]	@ (800925c <HAL_RCC_OscConfig+0x4bc>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800907e:	2b00      	cmp	r3, #0
 8009080:	d118      	bne.n	80090b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009082:	4b76      	ldr	r3, [pc, #472]	@ (800925c <HAL_RCC_OscConfig+0x4bc>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a75      	ldr	r2, [pc, #468]	@ (800925c <HAL_RCC_OscConfig+0x4bc>)
 8009088:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800908c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800908e:	f7fd f999 	bl	80063c4 <HAL_GetTick>
 8009092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009094:	e008      	b.n	80090a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009096:	f7fd f995 	bl	80063c4 <HAL_GetTick>
 800909a:	4602      	mov	r2, r0
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	d901      	bls.n	80090a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e183      	b.n	80093b0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80090a8:	4b6c      	ldr	r3, [pc, #432]	@ (800925c <HAL_RCC_OscConfig+0x4bc>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d0f0      	beq.n	8009096 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d108      	bne.n	80090ce <HAL_RCC_OscConfig+0x32e>
 80090bc:	4b66      	ldr	r3, [pc, #408]	@ (8009258 <HAL_RCC_OscConfig+0x4b8>)
 80090be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090c2:	4a65      	ldr	r2, [pc, #404]	@ (8009258 <HAL_RCC_OscConfig+0x4b8>)
 80090c4:	f043 0301 	orr.w	r3, r3, #1
 80090c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80090cc:	e024      	b.n	8009118 <HAL_RCC_OscConfig+0x378>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	2b05      	cmp	r3, #5
 80090d4:	d110      	bne.n	80090f8 <HAL_RCC_OscConfig+0x358>
 80090d6:	4b60      	ldr	r3, [pc, #384]	@ (8009258 <HAL_RCC_OscConfig+0x4b8>)
 80090d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090dc:	4a5e      	ldr	r2, [pc, #376]	@ (8009258 <HAL_RCC_OscConfig+0x4b8>)
 80090de:	f043 0304 	orr.w	r3, r3, #4
 80090e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80090e6:	4b5c      	ldr	r3, [pc, #368]	@ (8009258 <HAL_RCC_OscConfig+0x4b8>)
 80090e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090ec:	4a5a      	ldr	r2, [pc, #360]	@ (8009258 <HAL_RCC_OscConfig+0x4b8>)
 80090ee:	f043 0301 	orr.w	r3, r3, #1
 80090f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80090f6:	e00f      	b.n	8009118 <HAL_RCC_OscConfig+0x378>
 80090f8:	4b57      	ldr	r3, [pc, #348]	@ (8009258 <HAL_RCC_OscConfig+0x4b8>)
 80090fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090fe:	4a56      	ldr	r2, [pc, #344]	@ (8009258 <HAL_RCC_OscConfig+0x4b8>)
 8009100:	f023 0301 	bic.w	r3, r3, #1
 8009104:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009108:	4b53      	ldr	r3, [pc, #332]	@ (8009258 <HAL_RCC_OscConfig+0x4b8>)
 800910a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800910e:	4a52      	ldr	r2, [pc, #328]	@ (8009258 <HAL_RCC_OscConfig+0x4b8>)
 8009110:	f023 0304 	bic.w	r3, r3, #4
 8009114:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d016      	beq.n	800914e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009120:	f7fd f950 	bl	80063c4 <HAL_GetTick>
 8009124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009126:	e00a      	b.n	800913e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009128:	f7fd f94c 	bl	80063c4 <HAL_GetTick>
 800912c:	4602      	mov	r2, r0
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009136:	4293      	cmp	r3, r2
 8009138:	d901      	bls.n	800913e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800913a:	2303      	movs	r3, #3
 800913c:	e138      	b.n	80093b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800913e:	4b46      	ldr	r3, [pc, #280]	@ (8009258 <HAL_RCC_OscConfig+0x4b8>)
 8009140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009144:	f003 0302 	and.w	r3, r3, #2
 8009148:	2b00      	cmp	r3, #0
 800914a:	d0ed      	beq.n	8009128 <HAL_RCC_OscConfig+0x388>
 800914c:	e015      	b.n	800917a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800914e:	f7fd f939 	bl	80063c4 <HAL_GetTick>
 8009152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009154:	e00a      	b.n	800916c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009156:	f7fd f935 	bl	80063c4 <HAL_GetTick>
 800915a:	4602      	mov	r2, r0
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	1ad3      	subs	r3, r2, r3
 8009160:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009164:	4293      	cmp	r3, r2
 8009166:	d901      	bls.n	800916c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009168:	2303      	movs	r3, #3
 800916a:	e121      	b.n	80093b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800916c:	4b3a      	ldr	r3, [pc, #232]	@ (8009258 <HAL_RCC_OscConfig+0x4b8>)
 800916e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009172:	f003 0302 	and.w	r3, r3, #2
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1ed      	bne.n	8009156 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800917a:	7ffb      	ldrb	r3, [r7, #31]
 800917c:	2b01      	cmp	r3, #1
 800917e:	d105      	bne.n	800918c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009180:	4b35      	ldr	r3, [pc, #212]	@ (8009258 <HAL_RCC_OscConfig+0x4b8>)
 8009182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009184:	4a34      	ldr	r2, [pc, #208]	@ (8009258 <HAL_RCC_OscConfig+0x4b8>)
 8009186:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800918a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 0320 	and.w	r3, r3, #32
 8009194:	2b00      	cmp	r3, #0
 8009196:	d03c      	beq.n	8009212 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	699b      	ldr	r3, [r3, #24]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d01c      	beq.n	80091da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80091a0:	4b2d      	ldr	r3, [pc, #180]	@ (8009258 <HAL_RCC_OscConfig+0x4b8>)
 80091a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80091a6:	4a2c      	ldr	r2, [pc, #176]	@ (8009258 <HAL_RCC_OscConfig+0x4b8>)
 80091a8:	f043 0301 	orr.w	r3, r3, #1
 80091ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091b0:	f7fd f908 	bl	80063c4 <HAL_GetTick>
 80091b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80091b6:	e008      	b.n	80091ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80091b8:	f7fd f904 	bl	80063c4 <HAL_GetTick>
 80091bc:	4602      	mov	r2, r0
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d901      	bls.n	80091ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e0f2      	b.n	80093b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80091ca:	4b23      	ldr	r3, [pc, #140]	@ (8009258 <HAL_RCC_OscConfig+0x4b8>)
 80091cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80091d0:	f003 0302 	and.w	r3, r3, #2
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d0ef      	beq.n	80091b8 <HAL_RCC_OscConfig+0x418>
 80091d8:	e01b      	b.n	8009212 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80091da:	4b1f      	ldr	r3, [pc, #124]	@ (8009258 <HAL_RCC_OscConfig+0x4b8>)
 80091dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80091e0:	4a1d      	ldr	r2, [pc, #116]	@ (8009258 <HAL_RCC_OscConfig+0x4b8>)
 80091e2:	f023 0301 	bic.w	r3, r3, #1
 80091e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091ea:	f7fd f8eb 	bl	80063c4 <HAL_GetTick>
 80091ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80091f0:	e008      	b.n	8009204 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80091f2:	f7fd f8e7 	bl	80063c4 <HAL_GetTick>
 80091f6:	4602      	mov	r2, r0
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	1ad3      	subs	r3, r2, r3
 80091fc:	2b02      	cmp	r3, #2
 80091fe:	d901      	bls.n	8009204 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009200:	2303      	movs	r3, #3
 8009202:	e0d5      	b.n	80093b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009204:	4b14      	ldr	r3, [pc, #80]	@ (8009258 <HAL_RCC_OscConfig+0x4b8>)
 8009206:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800920a:	f003 0302 	and.w	r3, r3, #2
 800920e:	2b00      	cmp	r3, #0
 8009210:	d1ef      	bne.n	80091f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	69db      	ldr	r3, [r3, #28]
 8009216:	2b00      	cmp	r3, #0
 8009218:	f000 80c9 	beq.w	80093ae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800921c:	4b0e      	ldr	r3, [pc, #56]	@ (8009258 <HAL_RCC_OscConfig+0x4b8>)
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	f003 030c 	and.w	r3, r3, #12
 8009224:	2b0c      	cmp	r3, #12
 8009226:	f000 8083 	beq.w	8009330 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	69db      	ldr	r3, [r3, #28]
 800922e:	2b02      	cmp	r3, #2
 8009230:	d15e      	bne.n	80092f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009232:	4b09      	ldr	r3, [pc, #36]	@ (8009258 <HAL_RCC_OscConfig+0x4b8>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a08      	ldr	r2, [pc, #32]	@ (8009258 <HAL_RCC_OscConfig+0x4b8>)
 8009238:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800923c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800923e:	f7fd f8c1 	bl	80063c4 <HAL_GetTick>
 8009242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009244:	e00c      	b.n	8009260 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009246:	f7fd f8bd 	bl	80063c4 <HAL_GetTick>
 800924a:	4602      	mov	r2, r0
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	1ad3      	subs	r3, r2, r3
 8009250:	2b02      	cmp	r3, #2
 8009252:	d905      	bls.n	8009260 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009254:	2303      	movs	r3, #3
 8009256:	e0ab      	b.n	80093b0 <HAL_RCC_OscConfig+0x610>
 8009258:	40021000 	.word	0x40021000
 800925c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009260:	4b55      	ldr	r3, [pc, #340]	@ (80093b8 <HAL_RCC_OscConfig+0x618>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1ec      	bne.n	8009246 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800926c:	4b52      	ldr	r3, [pc, #328]	@ (80093b8 <HAL_RCC_OscConfig+0x618>)
 800926e:	68da      	ldr	r2, [r3, #12]
 8009270:	4b52      	ldr	r3, [pc, #328]	@ (80093bc <HAL_RCC_OscConfig+0x61c>)
 8009272:	4013      	ands	r3, r2
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	6a11      	ldr	r1, [r2, #32]
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800927c:	3a01      	subs	r2, #1
 800927e:	0112      	lsls	r2, r2, #4
 8009280:	4311      	orrs	r1, r2
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009286:	0212      	lsls	r2, r2, #8
 8009288:	4311      	orrs	r1, r2
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800928e:	0852      	lsrs	r2, r2, #1
 8009290:	3a01      	subs	r2, #1
 8009292:	0552      	lsls	r2, r2, #21
 8009294:	4311      	orrs	r1, r2
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800929a:	0852      	lsrs	r2, r2, #1
 800929c:	3a01      	subs	r2, #1
 800929e:	0652      	lsls	r2, r2, #25
 80092a0:	4311      	orrs	r1, r2
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80092a6:	06d2      	lsls	r2, r2, #27
 80092a8:	430a      	orrs	r2, r1
 80092aa:	4943      	ldr	r1, [pc, #268]	@ (80093b8 <HAL_RCC_OscConfig+0x618>)
 80092ac:	4313      	orrs	r3, r2
 80092ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80092b0:	4b41      	ldr	r3, [pc, #260]	@ (80093b8 <HAL_RCC_OscConfig+0x618>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a40      	ldr	r2, [pc, #256]	@ (80093b8 <HAL_RCC_OscConfig+0x618>)
 80092b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80092ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80092bc:	4b3e      	ldr	r3, [pc, #248]	@ (80093b8 <HAL_RCC_OscConfig+0x618>)
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	4a3d      	ldr	r2, [pc, #244]	@ (80093b8 <HAL_RCC_OscConfig+0x618>)
 80092c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80092c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092c8:	f7fd f87c 	bl	80063c4 <HAL_GetTick>
 80092cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80092ce:	e008      	b.n	80092e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092d0:	f7fd f878 	bl	80063c4 <HAL_GetTick>
 80092d4:	4602      	mov	r2, r0
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	1ad3      	subs	r3, r2, r3
 80092da:	2b02      	cmp	r3, #2
 80092dc:	d901      	bls.n	80092e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80092de:	2303      	movs	r3, #3
 80092e0:	e066      	b.n	80093b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80092e2:	4b35      	ldr	r3, [pc, #212]	@ (80093b8 <HAL_RCC_OscConfig+0x618>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d0f0      	beq.n	80092d0 <HAL_RCC_OscConfig+0x530>
 80092ee:	e05e      	b.n	80093ae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092f0:	4b31      	ldr	r3, [pc, #196]	@ (80093b8 <HAL_RCC_OscConfig+0x618>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a30      	ldr	r2, [pc, #192]	@ (80093b8 <HAL_RCC_OscConfig+0x618>)
 80092f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80092fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092fc:	f7fd f862 	bl	80063c4 <HAL_GetTick>
 8009300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009302:	e008      	b.n	8009316 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009304:	f7fd f85e 	bl	80063c4 <HAL_GetTick>
 8009308:	4602      	mov	r2, r0
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	2b02      	cmp	r3, #2
 8009310:	d901      	bls.n	8009316 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8009312:	2303      	movs	r3, #3
 8009314:	e04c      	b.n	80093b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009316:	4b28      	ldr	r3, [pc, #160]	@ (80093b8 <HAL_RCC_OscConfig+0x618>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800931e:	2b00      	cmp	r3, #0
 8009320:	d1f0      	bne.n	8009304 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009322:	4b25      	ldr	r3, [pc, #148]	@ (80093b8 <HAL_RCC_OscConfig+0x618>)
 8009324:	68da      	ldr	r2, [r3, #12]
 8009326:	4924      	ldr	r1, [pc, #144]	@ (80093b8 <HAL_RCC_OscConfig+0x618>)
 8009328:	4b25      	ldr	r3, [pc, #148]	@ (80093c0 <HAL_RCC_OscConfig+0x620>)
 800932a:	4013      	ands	r3, r2
 800932c:	60cb      	str	r3, [r1, #12]
 800932e:	e03e      	b.n	80093ae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	69db      	ldr	r3, [r3, #28]
 8009334:	2b01      	cmp	r3, #1
 8009336:	d101      	bne.n	800933c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8009338:	2301      	movs	r3, #1
 800933a:	e039      	b.n	80093b0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800933c:	4b1e      	ldr	r3, [pc, #120]	@ (80093b8 <HAL_RCC_OscConfig+0x618>)
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	f003 0203 	and.w	r2, r3, #3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6a1b      	ldr	r3, [r3, #32]
 800934c:	429a      	cmp	r2, r3
 800934e:	d12c      	bne.n	80093aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800935a:	3b01      	subs	r3, #1
 800935c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800935e:	429a      	cmp	r2, r3
 8009360:	d123      	bne.n	80093aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800936c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800936e:	429a      	cmp	r2, r3
 8009370:	d11b      	bne.n	80093aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800937c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800937e:	429a      	cmp	r2, r3
 8009380:	d113      	bne.n	80093aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800938c:	085b      	lsrs	r3, r3, #1
 800938e:	3b01      	subs	r3, #1
 8009390:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009392:	429a      	cmp	r2, r3
 8009394:	d109      	bne.n	80093aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093a0:	085b      	lsrs	r3, r3, #1
 80093a2:	3b01      	subs	r3, #1
 80093a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d001      	beq.n	80093ae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	e000      	b.n	80093b0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3720      	adds	r7, #32
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	40021000 	.word	0x40021000
 80093bc:	019f800c 	.word	0x019f800c
 80093c0:	feeefffc 	.word	0xfeeefffc

080093c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b086      	sub	sp, #24
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80093ce:	2300      	movs	r3, #0
 80093d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d101      	bne.n	80093dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80093d8:	2301      	movs	r3, #1
 80093da:	e11e      	b.n	800961a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80093dc:	4b91      	ldr	r3, [pc, #580]	@ (8009624 <HAL_RCC_ClockConfig+0x260>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f003 030f 	and.w	r3, r3, #15
 80093e4:	683a      	ldr	r2, [r7, #0]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d910      	bls.n	800940c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093ea:	4b8e      	ldr	r3, [pc, #568]	@ (8009624 <HAL_RCC_ClockConfig+0x260>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f023 020f 	bic.w	r2, r3, #15
 80093f2:	498c      	ldr	r1, [pc, #560]	@ (8009624 <HAL_RCC_ClockConfig+0x260>)
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80093fa:	4b8a      	ldr	r3, [pc, #552]	@ (8009624 <HAL_RCC_ClockConfig+0x260>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f003 030f 	and.w	r3, r3, #15
 8009402:	683a      	ldr	r2, [r7, #0]
 8009404:	429a      	cmp	r2, r3
 8009406:	d001      	beq.n	800940c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	e106      	b.n	800961a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f003 0301 	and.w	r3, r3, #1
 8009414:	2b00      	cmp	r3, #0
 8009416:	d073      	beq.n	8009500 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	2b03      	cmp	r3, #3
 800941e:	d129      	bne.n	8009474 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009420:	4b81      	ldr	r3, [pc, #516]	@ (8009628 <HAL_RCC_ClockConfig+0x264>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009428:	2b00      	cmp	r3, #0
 800942a:	d101      	bne.n	8009430 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800942c:	2301      	movs	r3, #1
 800942e:	e0f4      	b.n	800961a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009430:	f000 f99e 	bl	8009770 <RCC_GetSysClockFreqFromPLLSource>
 8009434:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	4a7c      	ldr	r2, [pc, #496]	@ (800962c <HAL_RCC_ClockConfig+0x268>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d93f      	bls.n	80094be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800943e:	4b7a      	ldr	r3, [pc, #488]	@ (8009628 <HAL_RCC_ClockConfig+0x264>)
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d009      	beq.n	800945e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009452:	2b00      	cmp	r3, #0
 8009454:	d033      	beq.n	80094be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800945a:	2b00      	cmp	r3, #0
 800945c:	d12f      	bne.n	80094be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800945e:	4b72      	ldr	r3, [pc, #456]	@ (8009628 <HAL_RCC_ClockConfig+0x264>)
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009466:	4a70      	ldr	r2, [pc, #448]	@ (8009628 <HAL_RCC_ClockConfig+0x264>)
 8009468:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800946c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800946e:	2380      	movs	r3, #128	@ 0x80
 8009470:	617b      	str	r3, [r7, #20]
 8009472:	e024      	b.n	80094be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	2b02      	cmp	r3, #2
 800947a:	d107      	bne.n	800948c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800947c:	4b6a      	ldr	r3, [pc, #424]	@ (8009628 <HAL_RCC_ClockConfig+0x264>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009484:	2b00      	cmp	r3, #0
 8009486:	d109      	bne.n	800949c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	e0c6      	b.n	800961a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800948c:	4b66      	ldr	r3, [pc, #408]	@ (8009628 <HAL_RCC_ClockConfig+0x264>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009494:	2b00      	cmp	r3, #0
 8009496:	d101      	bne.n	800949c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	e0be      	b.n	800961a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800949c:	f000 f8ce 	bl	800963c <HAL_RCC_GetSysClockFreq>
 80094a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	4a61      	ldr	r2, [pc, #388]	@ (800962c <HAL_RCC_ClockConfig+0x268>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d909      	bls.n	80094be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80094aa:	4b5f      	ldr	r3, [pc, #380]	@ (8009628 <HAL_RCC_ClockConfig+0x264>)
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80094b2:	4a5d      	ldr	r2, [pc, #372]	@ (8009628 <HAL_RCC_ClockConfig+0x264>)
 80094b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80094ba:	2380      	movs	r3, #128	@ 0x80
 80094bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80094be:	4b5a      	ldr	r3, [pc, #360]	@ (8009628 <HAL_RCC_ClockConfig+0x264>)
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	f023 0203 	bic.w	r2, r3, #3
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	4957      	ldr	r1, [pc, #348]	@ (8009628 <HAL_RCC_ClockConfig+0x264>)
 80094cc:	4313      	orrs	r3, r2
 80094ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094d0:	f7fc ff78 	bl	80063c4 <HAL_GetTick>
 80094d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094d6:	e00a      	b.n	80094ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094d8:	f7fc ff74 	bl	80063c4 <HAL_GetTick>
 80094dc:	4602      	mov	r2, r0
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	1ad3      	subs	r3, r2, r3
 80094e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d901      	bls.n	80094ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80094ea:	2303      	movs	r3, #3
 80094ec:	e095      	b.n	800961a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094ee:	4b4e      	ldr	r3, [pc, #312]	@ (8009628 <HAL_RCC_ClockConfig+0x264>)
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	f003 020c 	and.w	r2, r3, #12
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d1eb      	bne.n	80094d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f003 0302 	and.w	r3, r3, #2
 8009508:	2b00      	cmp	r3, #0
 800950a:	d023      	beq.n	8009554 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f003 0304 	and.w	r3, r3, #4
 8009514:	2b00      	cmp	r3, #0
 8009516:	d005      	beq.n	8009524 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009518:	4b43      	ldr	r3, [pc, #268]	@ (8009628 <HAL_RCC_ClockConfig+0x264>)
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	4a42      	ldr	r2, [pc, #264]	@ (8009628 <HAL_RCC_ClockConfig+0x264>)
 800951e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009522:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f003 0308 	and.w	r3, r3, #8
 800952c:	2b00      	cmp	r3, #0
 800952e:	d007      	beq.n	8009540 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009530:	4b3d      	ldr	r3, [pc, #244]	@ (8009628 <HAL_RCC_ClockConfig+0x264>)
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009538:	4a3b      	ldr	r2, [pc, #236]	@ (8009628 <HAL_RCC_ClockConfig+0x264>)
 800953a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800953e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009540:	4b39      	ldr	r3, [pc, #228]	@ (8009628 <HAL_RCC_ClockConfig+0x264>)
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	4936      	ldr	r1, [pc, #216]	@ (8009628 <HAL_RCC_ClockConfig+0x264>)
 800954e:	4313      	orrs	r3, r2
 8009550:	608b      	str	r3, [r1, #8]
 8009552:	e008      	b.n	8009566 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	2b80      	cmp	r3, #128	@ 0x80
 8009558:	d105      	bne.n	8009566 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800955a:	4b33      	ldr	r3, [pc, #204]	@ (8009628 <HAL_RCC_ClockConfig+0x264>)
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	4a32      	ldr	r2, [pc, #200]	@ (8009628 <HAL_RCC_ClockConfig+0x264>)
 8009560:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009564:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009566:	4b2f      	ldr	r3, [pc, #188]	@ (8009624 <HAL_RCC_ClockConfig+0x260>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f003 030f 	and.w	r3, r3, #15
 800956e:	683a      	ldr	r2, [r7, #0]
 8009570:	429a      	cmp	r2, r3
 8009572:	d21d      	bcs.n	80095b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009574:	4b2b      	ldr	r3, [pc, #172]	@ (8009624 <HAL_RCC_ClockConfig+0x260>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f023 020f 	bic.w	r2, r3, #15
 800957c:	4929      	ldr	r1, [pc, #164]	@ (8009624 <HAL_RCC_ClockConfig+0x260>)
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	4313      	orrs	r3, r2
 8009582:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009584:	f7fc ff1e 	bl	80063c4 <HAL_GetTick>
 8009588:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800958a:	e00a      	b.n	80095a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800958c:	f7fc ff1a 	bl	80063c4 <HAL_GetTick>
 8009590:	4602      	mov	r2, r0
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	1ad3      	subs	r3, r2, r3
 8009596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800959a:	4293      	cmp	r3, r2
 800959c:	d901      	bls.n	80095a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800959e:	2303      	movs	r3, #3
 80095a0:	e03b      	b.n	800961a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80095a2:	4b20      	ldr	r3, [pc, #128]	@ (8009624 <HAL_RCC_ClockConfig+0x260>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f003 030f 	and.w	r3, r3, #15
 80095aa:	683a      	ldr	r2, [r7, #0]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d1ed      	bne.n	800958c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f003 0304 	and.w	r3, r3, #4
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d008      	beq.n	80095ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80095bc:	4b1a      	ldr	r3, [pc, #104]	@ (8009628 <HAL_RCC_ClockConfig+0x264>)
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	4917      	ldr	r1, [pc, #92]	@ (8009628 <HAL_RCC_ClockConfig+0x264>)
 80095ca:	4313      	orrs	r3, r2
 80095cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f003 0308 	and.w	r3, r3, #8
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d009      	beq.n	80095ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80095da:	4b13      	ldr	r3, [pc, #76]	@ (8009628 <HAL_RCC_ClockConfig+0x264>)
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	691b      	ldr	r3, [r3, #16]
 80095e6:	00db      	lsls	r3, r3, #3
 80095e8:	490f      	ldr	r1, [pc, #60]	@ (8009628 <HAL_RCC_ClockConfig+0x264>)
 80095ea:	4313      	orrs	r3, r2
 80095ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80095ee:	f000 f825 	bl	800963c <HAL_RCC_GetSysClockFreq>
 80095f2:	4602      	mov	r2, r0
 80095f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009628 <HAL_RCC_ClockConfig+0x264>)
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	091b      	lsrs	r3, r3, #4
 80095fa:	f003 030f 	and.w	r3, r3, #15
 80095fe:	490c      	ldr	r1, [pc, #48]	@ (8009630 <HAL_RCC_ClockConfig+0x26c>)
 8009600:	5ccb      	ldrb	r3, [r1, r3]
 8009602:	f003 031f 	and.w	r3, r3, #31
 8009606:	fa22 f303 	lsr.w	r3, r2, r3
 800960a:	4a0a      	ldr	r2, [pc, #40]	@ (8009634 <HAL_RCC_ClockConfig+0x270>)
 800960c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800960e:	4b0a      	ldr	r3, [pc, #40]	@ (8009638 <HAL_RCC_ClockConfig+0x274>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4618      	mov	r0, r3
 8009614:	f7fc fe8a 	bl	800632c <HAL_InitTick>
 8009618:	4603      	mov	r3, r0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3718      	adds	r7, #24
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	40022000 	.word	0x40022000
 8009628:	40021000 	.word	0x40021000
 800962c:	04c4b400 	.word	0x04c4b400
 8009630:	0800e2a8 	.word	0x0800e2a8
 8009634:	200002b0 	.word	0x200002b0
 8009638:	200002b4 	.word	0x200002b4

0800963c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800963c:	b480      	push	{r7}
 800963e:	b087      	sub	sp, #28
 8009640:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009642:	4b2c      	ldr	r3, [pc, #176]	@ (80096f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	f003 030c 	and.w	r3, r3, #12
 800964a:	2b04      	cmp	r3, #4
 800964c:	d102      	bne.n	8009654 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800964e:	4b2a      	ldr	r3, [pc, #168]	@ (80096f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009650:	613b      	str	r3, [r7, #16]
 8009652:	e047      	b.n	80096e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009654:	4b27      	ldr	r3, [pc, #156]	@ (80096f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	f003 030c 	and.w	r3, r3, #12
 800965c:	2b08      	cmp	r3, #8
 800965e:	d102      	bne.n	8009666 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009660:	4b26      	ldr	r3, [pc, #152]	@ (80096fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8009662:	613b      	str	r3, [r7, #16]
 8009664:	e03e      	b.n	80096e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009666:	4b23      	ldr	r3, [pc, #140]	@ (80096f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	f003 030c 	and.w	r3, r3, #12
 800966e:	2b0c      	cmp	r3, #12
 8009670:	d136      	bne.n	80096e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009672:	4b20      	ldr	r3, [pc, #128]	@ (80096f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	f003 0303 	and.w	r3, r3, #3
 800967a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800967c:	4b1d      	ldr	r3, [pc, #116]	@ (80096f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	091b      	lsrs	r3, r3, #4
 8009682:	f003 030f 	and.w	r3, r3, #15
 8009686:	3301      	adds	r3, #1
 8009688:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2b03      	cmp	r3, #3
 800968e:	d10c      	bne.n	80096aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009690:	4a1a      	ldr	r2, [pc, #104]	@ (80096fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	fbb2 f3f3 	udiv	r3, r2, r3
 8009698:	4a16      	ldr	r2, [pc, #88]	@ (80096f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800969a:	68d2      	ldr	r2, [r2, #12]
 800969c:	0a12      	lsrs	r2, r2, #8
 800969e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80096a2:	fb02 f303 	mul.w	r3, r2, r3
 80096a6:	617b      	str	r3, [r7, #20]
      break;
 80096a8:	e00c      	b.n	80096c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80096aa:	4a13      	ldr	r2, [pc, #76]	@ (80096f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80096b2:	4a10      	ldr	r2, [pc, #64]	@ (80096f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80096b4:	68d2      	ldr	r2, [r2, #12]
 80096b6:	0a12      	lsrs	r2, r2, #8
 80096b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80096bc:	fb02 f303 	mul.w	r3, r2, r3
 80096c0:	617b      	str	r3, [r7, #20]
      break;
 80096c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80096c4:	4b0b      	ldr	r3, [pc, #44]	@ (80096f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	0e5b      	lsrs	r3, r3, #25
 80096ca:	f003 0303 	and.w	r3, r3, #3
 80096ce:	3301      	adds	r3, #1
 80096d0:	005b      	lsls	r3, r3, #1
 80096d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80096d4:	697a      	ldr	r2, [r7, #20]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80096dc:	613b      	str	r3, [r7, #16]
 80096de:	e001      	b.n	80096e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80096e0:	2300      	movs	r3, #0
 80096e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80096e4:	693b      	ldr	r3, [r7, #16]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	371c      	adds	r7, #28
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	40021000 	.word	0x40021000
 80096f8:	00f42400 	.word	0x00f42400
 80096fc:	016e3600 	.word	0x016e3600

08009700 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009700:	b480      	push	{r7}
 8009702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009704:	4b03      	ldr	r3, [pc, #12]	@ (8009714 <HAL_RCC_GetHCLKFreq+0x14>)
 8009706:	681b      	ldr	r3, [r3, #0]
}
 8009708:	4618      	mov	r0, r3
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop
 8009714:	200002b0 	.word	0x200002b0

08009718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800971c:	f7ff fff0 	bl	8009700 <HAL_RCC_GetHCLKFreq>
 8009720:	4602      	mov	r2, r0
 8009722:	4b06      	ldr	r3, [pc, #24]	@ (800973c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	0a1b      	lsrs	r3, r3, #8
 8009728:	f003 0307 	and.w	r3, r3, #7
 800972c:	4904      	ldr	r1, [pc, #16]	@ (8009740 <HAL_RCC_GetPCLK1Freq+0x28>)
 800972e:	5ccb      	ldrb	r3, [r1, r3]
 8009730:	f003 031f 	and.w	r3, r3, #31
 8009734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009738:	4618      	mov	r0, r3
 800973a:	bd80      	pop	{r7, pc}
 800973c:	40021000 	.word	0x40021000
 8009740:	0800e2b8 	.word	0x0800e2b8

08009744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009748:	f7ff ffda 	bl	8009700 <HAL_RCC_GetHCLKFreq>
 800974c:	4602      	mov	r2, r0
 800974e:	4b06      	ldr	r3, [pc, #24]	@ (8009768 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	0adb      	lsrs	r3, r3, #11
 8009754:	f003 0307 	and.w	r3, r3, #7
 8009758:	4904      	ldr	r1, [pc, #16]	@ (800976c <HAL_RCC_GetPCLK2Freq+0x28>)
 800975a:	5ccb      	ldrb	r3, [r1, r3]
 800975c:	f003 031f 	and.w	r3, r3, #31
 8009760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009764:	4618      	mov	r0, r3
 8009766:	bd80      	pop	{r7, pc}
 8009768:	40021000 	.word	0x40021000
 800976c:	0800e2b8 	.word	0x0800e2b8

08009770 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009770:	b480      	push	{r7}
 8009772:	b087      	sub	sp, #28
 8009774:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009776:	4b1e      	ldr	r3, [pc, #120]	@ (80097f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	f003 0303 	and.w	r3, r3, #3
 800977e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009780:	4b1b      	ldr	r3, [pc, #108]	@ (80097f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009782:	68db      	ldr	r3, [r3, #12]
 8009784:	091b      	lsrs	r3, r3, #4
 8009786:	f003 030f 	and.w	r3, r3, #15
 800978a:	3301      	adds	r3, #1
 800978c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	2b03      	cmp	r3, #3
 8009792:	d10c      	bne.n	80097ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009794:	4a17      	ldr	r2, [pc, #92]	@ (80097f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	fbb2 f3f3 	udiv	r3, r2, r3
 800979c:	4a14      	ldr	r2, [pc, #80]	@ (80097f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800979e:	68d2      	ldr	r2, [r2, #12]
 80097a0:	0a12      	lsrs	r2, r2, #8
 80097a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80097a6:	fb02 f303 	mul.w	r3, r2, r3
 80097aa:	617b      	str	r3, [r7, #20]
    break;
 80097ac:	e00c      	b.n	80097c8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80097ae:	4a12      	ldr	r2, [pc, #72]	@ (80097f8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80097b6:	4a0e      	ldr	r2, [pc, #56]	@ (80097f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80097b8:	68d2      	ldr	r2, [r2, #12]
 80097ba:	0a12      	lsrs	r2, r2, #8
 80097bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80097c0:	fb02 f303 	mul.w	r3, r2, r3
 80097c4:	617b      	str	r3, [r7, #20]
    break;
 80097c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80097c8:	4b09      	ldr	r3, [pc, #36]	@ (80097f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	0e5b      	lsrs	r3, r3, #25
 80097ce:	f003 0303 	and.w	r3, r3, #3
 80097d2:	3301      	adds	r3, #1
 80097d4:	005b      	lsls	r3, r3, #1
 80097d6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80097d8:	697a      	ldr	r2, [r7, #20]
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80097e0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80097e2:	687b      	ldr	r3, [r7, #4]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	371c      	adds	r7, #28
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr
 80097f0:	40021000 	.word	0x40021000
 80097f4:	016e3600 	.word	0x016e3600
 80097f8:	00f42400 	.word	0x00f42400

080097fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b086      	sub	sp, #24
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009804:	2300      	movs	r3, #0
 8009806:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009808:	2300      	movs	r3, #0
 800980a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009814:	2b00      	cmp	r3, #0
 8009816:	f000 8098 	beq.w	800994a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800981a:	2300      	movs	r3, #0
 800981c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800981e:	4b43      	ldr	r3, [pc, #268]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009826:	2b00      	cmp	r3, #0
 8009828:	d10d      	bne.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800982a:	4b40      	ldr	r3, [pc, #256]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800982c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800982e:	4a3f      	ldr	r2, [pc, #252]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009834:	6593      	str	r3, [r2, #88]	@ 0x58
 8009836:	4b3d      	ldr	r3, [pc, #244]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800983a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800983e:	60bb      	str	r3, [r7, #8]
 8009840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009842:	2301      	movs	r3, #1
 8009844:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009846:	4b3a      	ldr	r3, [pc, #232]	@ (8009930 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a39      	ldr	r2, [pc, #228]	@ (8009930 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800984c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009850:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009852:	f7fc fdb7 	bl	80063c4 <HAL_GetTick>
 8009856:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009858:	e009      	b.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800985a:	f7fc fdb3 	bl	80063c4 <HAL_GetTick>
 800985e:	4602      	mov	r2, r0
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	1ad3      	subs	r3, r2, r3
 8009864:	2b02      	cmp	r3, #2
 8009866:	d902      	bls.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009868:	2303      	movs	r3, #3
 800986a:	74fb      	strb	r3, [r7, #19]
        break;
 800986c:	e005      	b.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800986e:	4b30      	ldr	r3, [pc, #192]	@ (8009930 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009876:	2b00      	cmp	r3, #0
 8009878:	d0ef      	beq.n	800985a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800987a:	7cfb      	ldrb	r3, [r7, #19]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d159      	bne.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009880:	4b2a      	ldr	r3, [pc, #168]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009886:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800988a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d01e      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009896:	697a      	ldr	r2, [r7, #20]
 8009898:	429a      	cmp	r2, r3
 800989a:	d019      	beq.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800989c:	4b23      	ldr	r3, [pc, #140]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800989e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80098a8:	4b20      	ldr	r3, [pc, #128]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80098aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098ae:	4a1f      	ldr	r2, [pc, #124]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80098b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80098b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80098b8:	4b1c      	ldr	r3, [pc, #112]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80098ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098be:	4a1b      	ldr	r2, [pc, #108]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80098c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80098c8:	4a18      	ldr	r2, [pc, #96]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	f003 0301 	and.w	r3, r3, #1
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d016      	beq.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098da:	f7fc fd73 	bl	80063c4 <HAL_GetTick>
 80098de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80098e0:	e00b      	b.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80098e2:	f7fc fd6f 	bl	80063c4 <HAL_GetTick>
 80098e6:	4602      	mov	r2, r0
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	1ad3      	subs	r3, r2, r3
 80098ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d902      	bls.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80098f4:	2303      	movs	r3, #3
 80098f6:	74fb      	strb	r3, [r7, #19]
            break;
 80098f8:	e006      	b.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80098fa:	4b0c      	ldr	r3, [pc, #48]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80098fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009900:	f003 0302 	and.w	r3, r3, #2
 8009904:	2b00      	cmp	r3, #0
 8009906:	d0ec      	beq.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009908:	7cfb      	ldrb	r3, [r7, #19]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d10b      	bne.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800990e:	4b07      	ldr	r3, [pc, #28]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009914:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800991c:	4903      	ldr	r1, [pc, #12]	@ (800992c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800991e:	4313      	orrs	r3, r2
 8009920:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009924:	e008      	b.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009926:	7cfb      	ldrb	r3, [r7, #19]
 8009928:	74bb      	strb	r3, [r7, #18]
 800992a:	e005      	b.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800992c:	40021000 	.word	0x40021000
 8009930:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009934:	7cfb      	ldrb	r3, [r7, #19]
 8009936:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009938:	7c7b      	ldrb	r3, [r7, #17]
 800993a:	2b01      	cmp	r3, #1
 800993c:	d105      	bne.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800993e:	4ba7      	ldr	r3, [pc, #668]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009942:	4aa6      	ldr	r2, [pc, #664]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009944:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009948:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f003 0301 	and.w	r3, r3, #1
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00a      	beq.n	800996c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009956:	4ba1      	ldr	r3, [pc, #644]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800995c:	f023 0203 	bic.w	r2, r3, #3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	499d      	ldr	r1, [pc, #628]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009966:	4313      	orrs	r3, r2
 8009968:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f003 0302 	and.w	r3, r3, #2
 8009974:	2b00      	cmp	r3, #0
 8009976:	d00a      	beq.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009978:	4b98      	ldr	r3, [pc, #608]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800997a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800997e:	f023 020c 	bic.w	r2, r3, #12
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	4995      	ldr	r1, [pc, #596]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009988:	4313      	orrs	r3, r2
 800998a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f003 0304 	and.w	r3, r3, #4
 8009996:	2b00      	cmp	r3, #0
 8009998:	d00a      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800999a:	4b90      	ldr	r3, [pc, #576]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800999c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	498c      	ldr	r1, [pc, #560]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099aa:	4313      	orrs	r3, r2
 80099ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f003 0308 	and.w	r3, r3, #8
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00a      	beq.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80099bc:	4b87      	ldr	r3, [pc, #540]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	4984      	ldr	r1, [pc, #528]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099cc:	4313      	orrs	r3, r2
 80099ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f003 0310 	and.w	r3, r3, #16
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d00a      	beq.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80099de:	4b7f      	ldr	r3, [pc, #508]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	695b      	ldr	r3, [r3, #20]
 80099ec:	497b      	ldr	r1, [pc, #492]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80099ee:	4313      	orrs	r3, r2
 80099f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f003 0320 	and.w	r3, r3, #32
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d00a      	beq.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009a00:	4b76      	ldr	r3, [pc, #472]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a06:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	699b      	ldr	r3, [r3, #24]
 8009a0e:	4973      	ldr	r1, [pc, #460]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a10:	4313      	orrs	r3, r2
 8009a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d00a      	beq.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009a22:	4b6e      	ldr	r3, [pc, #440]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a28:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	69db      	ldr	r3, [r3, #28]
 8009a30:	496a      	ldr	r1, [pc, #424]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a32:	4313      	orrs	r3, r2
 8009a34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d00a      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009a44:	4b65      	ldr	r3, [pc, #404]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a4a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6a1b      	ldr	r3, [r3, #32]
 8009a52:	4962      	ldr	r1, [pc, #392]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a54:	4313      	orrs	r3, r2
 8009a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d00a      	beq.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009a66:	4b5d      	ldr	r3, [pc, #372]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a6c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a74:	4959      	ldr	r1, [pc, #356]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a76:	4313      	orrs	r3, r2
 8009a78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d00a      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009a88:	4b54      	ldr	r3, [pc, #336]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009a8e:	f023 0203 	bic.w	r2, r3, #3
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a96:	4951      	ldr	r1, [pc, #324]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d00a      	beq.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009aaa:	4b4c      	ldr	r3, [pc, #304]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ab0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab8:	4948      	ldr	r1, [pc, #288]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009aba:	4313      	orrs	r3, r2
 8009abc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d015      	beq.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009acc:	4b43      	ldr	r3, [pc, #268]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ad2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ada:	4940      	ldr	r1, [pc, #256]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009adc:	4313      	orrs	r3, r2
 8009ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ae6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009aea:	d105      	bne.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009aec:	4b3b      	ldr	r3, [pc, #236]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	4a3a      	ldr	r2, [pc, #232]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009af2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009af6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d015      	beq.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009b04:	4b35      	ldr	r3, [pc, #212]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b0a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b12:	4932      	ldr	r1, [pc, #200]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b14:	4313      	orrs	r3, r2
 8009b16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009b22:	d105      	bne.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b24:	4b2d      	ldr	r3, [pc, #180]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	4a2c      	ldr	r2, [pc, #176]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b2e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d015      	beq.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009b3c:	4b27      	ldr	r3, [pc, #156]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b42:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b4a:	4924      	ldr	r1, [pc, #144]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009b5a:	d105      	bne.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	4a1e      	ldr	r2, [pc, #120]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b66:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d015      	beq.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009b74:	4b19      	ldr	r3, [pc, #100]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b82:	4916      	ldr	r1, [pc, #88]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b84:	4313      	orrs	r3, r2
 8009b86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b92:	d105      	bne.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b94:	4b11      	ldr	r3, [pc, #68]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	4a10      	ldr	r2, [pc, #64]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b9e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d019      	beq.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009bac:	4b0b      	ldr	r3, [pc, #44]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bb2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bba:	4908      	ldr	r1, [pc, #32]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009bca:	d109      	bne.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009bcc:	4b03      	ldr	r3, [pc, #12]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	4a02      	ldr	r2, [pc, #8]	@ (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009bd6:	60d3      	str	r3, [r2, #12]
 8009bd8:	e002      	b.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009bda:	bf00      	nop
 8009bdc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d015      	beq.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009bec:	4b29      	ldr	r3, [pc, #164]	@ (8009c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bf2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bfa:	4926      	ldr	r1, [pc, #152]	@ (8009c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c0a:	d105      	bne.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009c0c:	4b21      	ldr	r3, [pc, #132]	@ (8009c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009c0e:	68db      	ldr	r3, [r3, #12]
 8009c10:	4a20      	ldr	r2, [pc, #128]	@ (8009c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009c12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c16:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d015      	beq.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009c24:	4b1b      	ldr	r3, [pc, #108]	@ (8009c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c2a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c32:	4918      	ldr	r1, [pc, #96]	@ (8009c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009c34:	4313      	orrs	r3, r2
 8009c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c42:	d105      	bne.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009c44:	4b13      	ldr	r3, [pc, #76]	@ (8009c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009c46:	68db      	ldr	r3, [r3, #12]
 8009c48:	4a12      	ldr	r2, [pc, #72]	@ (8009c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009c4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c4e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d015      	beq.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8009c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009c5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009c62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c6a:	490a      	ldr	r1, [pc, #40]	@ (8009c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c7a:	d105      	bne.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009c7c:	4b05      	ldr	r3, [pc, #20]	@ (8009c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	4a04      	ldr	r2, [pc, #16]	@ (8009c94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009c82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c86:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009c88:	7cbb      	ldrb	r3, [r7, #18]
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3718      	adds	r7, #24
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	40021000 	.word	0x40021000

08009c98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d101      	bne.n	8009caa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e054      	b.n	8009d54 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d111      	bne.n	8009cda <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f001 ff92 	bl	800bbe8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d102      	bne.n	8009cd2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	4a23      	ldr	r2, [pc, #140]	@ (8009d5c <HAL_TIM_Base_Init+0xc4>)
 8009cd0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2202      	movs	r2, #2
 8009cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	3304      	adds	r3, #4
 8009cea:	4619      	mov	r1, r3
 8009cec:	4610      	mov	r0, r2
 8009cee:	f001 fadb 	bl	800b2a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2201      	movs	r2, #1
 8009d06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2201      	movs	r2, #1
 8009d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2201      	movs	r2, #1
 8009d26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2201      	movs	r2, #1
 8009d36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2201      	movs	r2, #1
 8009d46:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3708      	adds	r7, #8
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}
 8009d5c:	08005d9d 	.word	0x08005d9d

08009d60 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b085      	sub	sp, #20
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d001      	beq.n	8009d78 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	e04c      	b.n	8009e12 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2202      	movs	r2, #2
 8009d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a26      	ldr	r2, [pc, #152]	@ (8009e20 <HAL_TIM_Base_Start+0xc0>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d022      	beq.n	8009dd0 <HAL_TIM_Base_Start+0x70>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d92:	d01d      	beq.n	8009dd0 <HAL_TIM_Base_Start+0x70>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a22      	ldr	r2, [pc, #136]	@ (8009e24 <HAL_TIM_Base_Start+0xc4>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d018      	beq.n	8009dd0 <HAL_TIM_Base_Start+0x70>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4a21      	ldr	r2, [pc, #132]	@ (8009e28 <HAL_TIM_Base_Start+0xc8>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d013      	beq.n	8009dd0 <HAL_TIM_Base_Start+0x70>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a1f      	ldr	r2, [pc, #124]	@ (8009e2c <HAL_TIM_Base_Start+0xcc>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d00e      	beq.n	8009dd0 <HAL_TIM_Base_Start+0x70>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a1e      	ldr	r2, [pc, #120]	@ (8009e30 <HAL_TIM_Base_Start+0xd0>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d009      	beq.n	8009dd0 <HAL_TIM_Base_Start+0x70>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a1c      	ldr	r2, [pc, #112]	@ (8009e34 <HAL_TIM_Base_Start+0xd4>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d004      	beq.n	8009dd0 <HAL_TIM_Base_Start+0x70>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a1b      	ldr	r2, [pc, #108]	@ (8009e38 <HAL_TIM_Base_Start+0xd8>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d115      	bne.n	8009dfc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	689a      	ldr	r2, [r3, #8]
 8009dd6:	4b19      	ldr	r3, [pc, #100]	@ (8009e3c <HAL_TIM_Base_Start+0xdc>)
 8009dd8:	4013      	ands	r3, r2
 8009dda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2b06      	cmp	r3, #6
 8009de0:	d015      	beq.n	8009e0e <HAL_TIM_Base_Start+0xae>
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009de8:	d011      	beq.n	8009e0e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f042 0201 	orr.w	r2, r2, #1
 8009df8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dfa:	e008      	b.n	8009e0e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f042 0201 	orr.w	r2, r2, #1
 8009e0a:	601a      	str	r2, [r3, #0]
 8009e0c:	e000      	b.n	8009e10 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3714      	adds	r7, #20
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	40012c00 	.word	0x40012c00
 8009e24:	40000400 	.word	0x40000400
 8009e28:	40000800 	.word	0x40000800
 8009e2c:	40000c00 	.word	0x40000c00
 8009e30:	40013400 	.word	0x40013400
 8009e34:	40014000 	.word	0x40014000
 8009e38:	40015000 	.word	0x40015000
 8009e3c:	00010007 	.word	0x00010007

08009e40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b085      	sub	sp, #20
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d001      	beq.n	8009e58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009e54:	2301      	movs	r3, #1
 8009e56:	e054      	b.n	8009f02 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2202      	movs	r2, #2
 8009e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	68da      	ldr	r2, [r3, #12]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f042 0201 	orr.w	r2, r2, #1
 8009e6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a26      	ldr	r2, [pc, #152]	@ (8009f10 <HAL_TIM_Base_Start_IT+0xd0>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d022      	beq.n	8009ec0 <HAL_TIM_Base_Start_IT+0x80>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e82:	d01d      	beq.n	8009ec0 <HAL_TIM_Base_Start_IT+0x80>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a22      	ldr	r2, [pc, #136]	@ (8009f14 <HAL_TIM_Base_Start_IT+0xd4>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d018      	beq.n	8009ec0 <HAL_TIM_Base_Start_IT+0x80>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a21      	ldr	r2, [pc, #132]	@ (8009f18 <HAL_TIM_Base_Start_IT+0xd8>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d013      	beq.n	8009ec0 <HAL_TIM_Base_Start_IT+0x80>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a1f      	ldr	r2, [pc, #124]	@ (8009f1c <HAL_TIM_Base_Start_IT+0xdc>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d00e      	beq.n	8009ec0 <HAL_TIM_Base_Start_IT+0x80>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8009f20 <HAL_TIM_Base_Start_IT+0xe0>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d009      	beq.n	8009ec0 <HAL_TIM_Base_Start_IT+0x80>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8009f24 <HAL_TIM_Base_Start_IT+0xe4>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d004      	beq.n	8009ec0 <HAL_TIM_Base_Start_IT+0x80>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a1b      	ldr	r2, [pc, #108]	@ (8009f28 <HAL_TIM_Base_Start_IT+0xe8>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d115      	bne.n	8009eec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	689a      	ldr	r2, [r3, #8]
 8009ec6:	4b19      	ldr	r3, [pc, #100]	@ (8009f2c <HAL_TIM_Base_Start_IT+0xec>)
 8009ec8:	4013      	ands	r3, r2
 8009eca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2b06      	cmp	r3, #6
 8009ed0:	d015      	beq.n	8009efe <HAL_TIM_Base_Start_IT+0xbe>
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ed8:	d011      	beq.n	8009efe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f042 0201 	orr.w	r2, r2, #1
 8009ee8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eea:	e008      	b.n	8009efe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f042 0201 	orr.w	r2, r2, #1
 8009efa:	601a      	str	r2, [r3, #0]
 8009efc:	e000      	b.n	8009f00 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009efe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3714      	adds	r7, #20
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr
 8009f0e:	bf00      	nop
 8009f10:	40012c00 	.word	0x40012c00
 8009f14:	40000400 	.word	0x40000400
 8009f18:	40000800 	.word	0x40000800
 8009f1c:	40000c00 	.word	0x40000c00
 8009f20:	40013400 	.word	0x40013400
 8009f24:	40014000 	.word	0x40014000
 8009f28:	40015000 	.word	0x40015000
 8009f2c:	00010007 	.word	0x00010007

08009f30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d101      	bne.n	8009f42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e054      	b.n	8009fec <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d111      	bne.n	8009f72 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f001 fe46 	bl	800bbe8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d102      	bne.n	8009f6a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	4a23      	ldr	r2, [pc, #140]	@ (8009ff4 <HAL_TIM_PWM_Init+0xc4>)
 8009f68:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2202      	movs	r2, #2
 8009f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	3304      	adds	r3, #4
 8009f82:	4619      	mov	r1, r3
 8009f84:	4610      	mov	r0, r2
 8009f86:	f001 f98f 	bl	800b2a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2201      	movs	r2, #1
 8009f96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2201      	movs	r2, #1
 8009fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2201      	movs	r2, #1
 8009fce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2201      	movs	r2, #1
 8009fde:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009fea:	2300      	movs	r3, #0
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	08009ff9 	.word	0x08009ff9

08009ff8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a000:	bf00      	nop
 800a002:	370c      	adds	r7, #12
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d109      	bne.n	800a030 <HAL_TIM_PWM_Start+0x24>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a022:	b2db      	uxtb	r3, r3
 800a024:	2b01      	cmp	r3, #1
 800a026:	bf14      	ite	ne
 800a028:	2301      	movne	r3, #1
 800a02a:	2300      	moveq	r3, #0
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	e03c      	b.n	800a0aa <HAL_TIM_PWM_Start+0x9e>
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	2b04      	cmp	r3, #4
 800a034:	d109      	bne.n	800a04a <HAL_TIM_PWM_Start+0x3e>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	2b01      	cmp	r3, #1
 800a040:	bf14      	ite	ne
 800a042:	2301      	movne	r3, #1
 800a044:	2300      	moveq	r3, #0
 800a046:	b2db      	uxtb	r3, r3
 800a048:	e02f      	b.n	800a0aa <HAL_TIM_PWM_Start+0x9e>
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	2b08      	cmp	r3, #8
 800a04e:	d109      	bne.n	800a064 <HAL_TIM_PWM_Start+0x58>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a056:	b2db      	uxtb	r3, r3
 800a058:	2b01      	cmp	r3, #1
 800a05a:	bf14      	ite	ne
 800a05c:	2301      	movne	r3, #1
 800a05e:	2300      	moveq	r3, #0
 800a060:	b2db      	uxtb	r3, r3
 800a062:	e022      	b.n	800a0aa <HAL_TIM_PWM_Start+0x9e>
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	2b0c      	cmp	r3, #12
 800a068:	d109      	bne.n	800a07e <HAL_TIM_PWM_Start+0x72>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a070:	b2db      	uxtb	r3, r3
 800a072:	2b01      	cmp	r3, #1
 800a074:	bf14      	ite	ne
 800a076:	2301      	movne	r3, #1
 800a078:	2300      	moveq	r3, #0
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	e015      	b.n	800a0aa <HAL_TIM_PWM_Start+0x9e>
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	2b10      	cmp	r3, #16
 800a082:	d109      	bne.n	800a098 <HAL_TIM_PWM_Start+0x8c>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	bf14      	ite	ne
 800a090:	2301      	movne	r3, #1
 800a092:	2300      	moveq	r3, #0
 800a094:	b2db      	uxtb	r3, r3
 800a096:	e008      	b.n	800a0aa <HAL_TIM_PWM_Start+0x9e>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a09e:	b2db      	uxtb	r3, r3
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	bf14      	ite	ne
 800a0a4:	2301      	movne	r3, #1
 800a0a6:	2300      	moveq	r3, #0
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d001      	beq.n	800a0b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e0a6      	b.n	800a200 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d104      	bne.n	800a0c2 <HAL_TIM_PWM_Start+0xb6>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2202      	movs	r2, #2
 800a0bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0c0:	e023      	b.n	800a10a <HAL_TIM_PWM_Start+0xfe>
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	2b04      	cmp	r3, #4
 800a0c6:	d104      	bne.n	800a0d2 <HAL_TIM_PWM_Start+0xc6>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2202      	movs	r2, #2
 800a0cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0d0:	e01b      	b.n	800a10a <HAL_TIM_PWM_Start+0xfe>
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	2b08      	cmp	r3, #8
 800a0d6:	d104      	bne.n	800a0e2 <HAL_TIM_PWM_Start+0xd6>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2202      	movs	r2, #2
 800a0dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0e0:	e013      	b.n	800a10a <HAL_TIM_PWM_Start+0xfe>
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	2b0c      	cmp	r3, #12
 800a0e6:	d104      	bne.n	800a0f2 <HAL_TIM_PWM_Start+0xe6>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2202      	movs	r2, #2
 800a0ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0f0:	e00b      	b.n	800a10a <HAL_TIM_PWM_Start+0xfe>
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	2b10      	cmp	r3, #16
 800a0f6:	d104      	bne.n	800a102 <HAL_TIM_PWM_Start+0xf6>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2202      	movs	r2, #2
 800a0fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a100:	e003      	b.n	800a10a <HAL_TIM_PWM_Start+0xfe>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2202      	movs	r2, #2
 800a106:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	2201      	movs	r2, #1
 800a110:	6839      	ldr	r1, [r7, #0]
 800a112:	4618      	mov	r0, r3
 800a114:	f001 fd42 	bl	800bb9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a3a      	ldr	r2, [pc, #232]	@ (800a208 <HAL_TIM_PWM_Start+0x1fc>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d018      	beq.n	800a154 <HAL_TIM_PWM_Start+0x148>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a39      	ldr	r2, [pc, #228]	@ (800a20c <HAL_TIM_PWM_Start+0x200>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d013      	beq.n	800a154 <HAL_TIM_PWM_Start+0x148>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a37      	ldr	r2, [pc, #220]	@ (800a210 <HAL_TIM_PWM_Start+0x204>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d00e      	beq.n	800a154 <HAL_TIM_PWM_Start+0x148>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a36      	ldr	r2, [pc, #216]	@ (800a214 <HAL_TIM_PWM_Start+0x208>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d009      	beq.n	800a154 <HAL_TIM_PWM_Start+0x148>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a34      	ldr	r2, [pc, #208]	@ (800a218 <HAL_TIM_PWM_Start+0x20c>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d004      	beq.n	800a154 <HAL_TIM_PWM_Start+0x148>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a33      	ldr	r2, [pc, #204]	@ (800a21c <HAL_TIM_PWM_Start+0x210>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d101      	bne.n	800a158 <HAL_TIM_PWM_Start+0x14c>
 800a154:	2301      	movs	r3, #1
 800a156:	e000      	b.n	800a15a <HAL_TIM_PWM_Start+0x14e>
 800a158:	2300      	movs	r3, #0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d007      	beq.n	800a16e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a16c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4a25      	ldr	r2, [pc, #148]	@ (800a208 <HAL_TIM_PWM_Start+0x1fc>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d022      	beq.n	800a1be <HAL_TIM_PWM_Start+0x1b2>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a180:	d01d      	beq.n	800a1be <HAL_TIM_PWM_Start+0x1b2>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a26      	ldr	r2, [pc, #152]	@ (800a220 <HAL_TIM_PWM_Start+0x214>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d018      	beq.n	800a1be <HAL_TIM_PWM_Start+0x1b2>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a24      	ldr	r2, [pc, #144]	@ (800a224 <HAL_TIM_PWM_Start+0x218>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d013      	beq.n	800a1be <HAL_TIM_PWM_Start+0x1b2>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a23      	ldr	r2, [pc, #140]	@ (800a228 <HAL_TIM_PWM_Start+0x21c>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d00e      	beq.n	800a1be <HAL_TIM_PWM_Start+0x1b2>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a19      	ldr	r2, [pc, #100]	@ (800a20c <HAL_TIM_PWM_Start+0x200>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d009      	beq.n	800a1be <HAL_TIM_PWM_Start+0x1b2>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a18      	ldr	r2, [pc, #96]	@ (800a210 <HAL_TIM_PWM_Start+0x204>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d004      	beq.n	800a1be <HAL_TIM_PWM_Start+0x1b2>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a18      	ldr	r2, [pc, #96]	@ (800a21c <HAL_TIM_PWM_Start+0x210>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d115      	bne.n	800a1ea <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	689a      	ldr	r2, [r3, #8]
 800a1c4:	4b19      	ldr	r3, [pc, #100]	@ (800a22c <HAL_TIM_PWM_Start+0x220>)
 800a1c6:	4013      	ands	r3, r2
 800a1c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2b06      	cmp	r3, #6
 800a1ce:	d015      	beq.n	800a1fc <HAL_TIM_PWM_Start+0x1f0>
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1d6:	d011      	beq.n	800a1fc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f042 0201 	orr.w	r2, r2, #1
 800a1e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1e8:	e008      	b.n	800a1fc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f042 0201 	orr.w	r2, r2, #1
 800a1f8:	601a      	str	r2, [r3, #0]
 800a1fa:	e000      	b.n	800a1fe <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	3710      	adds	r7, #16
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	40012c00 	.word	0x40012c00
 800a20c:	40013400 	.word	0x40013400
 800a210:	40014000 	.word	0x40014000
 800a214:	40014400 	.word	0x40014400
 800a218:	40014800 	.word	0x40014800
 800a21c:	40015000 	.word	0x40015000
 800a220:	40000400 	.word	0x40000400
 800a224:	40000800 	.word	0x40000800
 800a228:	40000c00 	.word	0x40000c00
 800a22c:	00010007 	.word	0x00010007

0800a230 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d101      	bne.n	800a244 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800a240:	2301      	movs	r3, #1
 800a242:	e04c      	b.n	800a2de <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d111      	bne.n	800a274 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2200      	movs	r2, #0
 800a254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f001 fcc5 	bl	800bbe8 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a262:	2b00      	cmp	r3, #0
 800a264:	d102      	bne.n	800a26c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	4a1f      	ldr	r2, [pc, #124]	@ (800a2e8 <HAL_TIM_OnePulse_Init+0xb8>)
 800a26a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2202      	movs	r2, #2
 800a278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681a      	ldr	r2, [r3, #0]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	3304      	adds	r3, #4
 800a284:	4619      	mov	r1, r3
 800a286:	4610      	mov	r0, r2
 800a288:	f001 f80e 	bl	800b2a8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f022 0208 	bic.w	r2, r2, #8
 800a29a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	6819      	ldr	r1, [r3, #0]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	683a      	ldr	r2, [r7, #0]
 800a2a8:	430a      	orrs	r2, r1
 800a2aa:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	0800a2ed 	.word	0x0800a2ed

0800a2ec <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800a2f4:	bf00      	nop
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a310:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a318:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a320:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a328:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a32a:	7bfb      	ldrb	r3, [r7, #15]
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d108      	bne.n	800a342 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a330:	7bbb      	ldrb	r3, [r7, #14]
 800a332:	2b01      	cmp	r3, #1
 800a334:	d105      	bne.n	800a342 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a336:	7b7b      	ldrb	r3, [r7, #13]
 800a338:	2b01      	cmp	r3, #1
 800a33a:	d102      	bne.n	800a342 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a33c:	7b3b      	ldrb	r3, [r7, #12]
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d001      	beq.n	800a346 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	e059      	b.n	800a3fa <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2202      	movs	r2, #2
 800a34a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2202      	movs	r2, #2
 800a352:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2202      	movs	r2, #2
 800a35a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2202      	movs	r2, #2
 800a362:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	68da      	ldr	r2, [r3, #12]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f042 0202 	orr.w	r2, r2, #2
 800a374:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	68da      	ldr	r2, [r3, #12]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f042 0204 	orr.w	r2, r2, #4
 800a384:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	2201      	movs	r2, #1
 800a38c:	2100      	movs	r1, #0
 800a38e:	4618      	mov	r0, r3
 800a390:	f001 fc04 	bl	800bb9c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	2201      	movs	r2, #1
 800a39a:	2104      	movs	r1, #4
 800a39c:	4618      	mov	r0, r3
 800a39e:	f001 fbfd 	bl	800bb9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4a17      	ldr	r2, [pc, #92]	@ (800a404 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d018      	beq.n	800a3de <HAL_TIM_OnePulse_Start_IT+0xde>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a15      	ldr	r2, [pc, #84]	@ (800a408 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d013      	beq.n	800a3de <HAL_TIM_OnePulse_Start_IT+0xde>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a14      	ldr	r2, [pc, #80]	@ (800a40c <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d00e      	beq.n	800a3de <HAL_TIM_OnePulse_Start_IT+0xde>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a12      	ldr	r2, [pc, #72]	@ (800a410 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d009      	beq.n	800a3de <HAL_TIM_OnePulse_Start_IT+0xde>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a11      	ldr	r2, [pc, #68]	@ (800a414 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d004      	beq.n	800a3de <HAL_TIM_OnePulse_Start_IT+0xde>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a0f      	ldr	r2, [pc, #60]	@ (800a418 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d101      	bne.n	800a3e2 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e000      	b.n	800a3e4 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d007      	beq.n	800a3f8 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a3f6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	40012c00 	.word	0x40012c00
 800a408:	40013400 	.word	0x40013400
 800a40c:	40014000 	.word	0x40014000
 800a410:	40014400 	.word	0x40014400
 800a414:	40014800 	.word	0x40014800
 800a418:	40015000 	.word	0x40015000

0800a41c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b086      	sub	sp, #24
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d101      	bne.n	800a430 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	e0a2      	b.n	800a576 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a436:	b2db      	uxtb	r3, r3
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d111      	bne.n	800a460 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f001 fbcf 	bl	800bbe8 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d102      	bne.n	800a458 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4a4a      	ldr	r2, [pc, #296]	@ (800a580 <HAL_TIM_Encoder_Init+0x164>)
 800a456:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2202      	movs	r2, #2
 800a464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	6812      	ldr	r2, [r2, #0]
 800a472:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800a476:	f023 0307 	bic.w	r3, r3, #7
 800a47a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	3304      	adds	r3, #4
 800a484:	4619      	mov	r1, r3
 800a486:	4610      	mov	r0, r2
 800a488:	f000 ff0e 	bl	800b2a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	699b      	ldr	r3, [r3, #24]
 800a49a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	6a1b      	ldr	r3, [r3, #32]
 800a4a2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	697a      	ldr	r2, [r7, #20]
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a4b4:	f023 0303 	bic.w	r3, r3, #3
 800a4b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	689a      	ldr	r2, [r3, #8]
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	699b      	ldr	r3, [r3, #24]
 800a4c2:	021b      	lsls	r3, r3, #8
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	693a      	ldr	r2, [r7, #16]
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a4d2:	f023 030c 	bic.w	r3, r3, #12
 800a4d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a4de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a4e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	68da      	ldr	r2, [r3, #12]
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	69db      	ldr	r3, [r3, #28]
 800a4ec:	021b      	lsls	r3, r3, #8
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	693a      	ldr	r2, [r7, #16]
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	011a      	lsls	r2, r3, #4
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	6a1b      	ldr	r3, [r3, #32]
 800a500:	031b      	lsls	r3, r3, #12
 800a502:	4313      	orrs	r3, r2
 800a504:	693a      	ldr	r2, [r7, #16]
 800a506:	4313      	orrs	r3, r2
 800a508:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800a510:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800a518:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	685a      	ldr	r2, [r3, #4]
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	695b      	ldr	r3, [r3, #20]
 800a522:	011b      	lsls	r3, r3, #4
 800a524:	4313      	orrs	r3, r2
 800a526:	68fa      	ldr	r2, [r7, #12]
 800a528:	4313      	orrs	r3, r2
 800a52a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	697a      	ldr	r2, [r7, #20]
 800a532:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	693a      	ldr	r2, [r7, #16]
 800a53a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	68fa      	ldr	r2, [r7, #12]
 800a542:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2201      	movs	r2, #1
 800a548:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2201      	movs	r2, #1
 800a550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2201      	movs	r2, #1
 800a558:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2201      	movs	r2, #1
 800a560:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2201      	movs	r2, #1
 800a568:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2201      	movs	r2, #1
 800a570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a574:	2300      	movs	r3, #0
}
 800a576:	4618      	mov	r0, r3
 800a578:	3718      	adds	r7, #24
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	08005ec5 	.word	0x08005ec5

0800a584 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a594:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a59c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a5a4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a5ac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d110      	bne.n	800a5d6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a5b4:	7bfb      	ldrb	r3, [r7, #15]
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d102      	bne.n	800a5c0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a5ba:	7b7b      	ldrb	r3, [r7, #13]
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d001      	beq.n	800a5c4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	e069      	b.n	800a698 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2202      	movs	r2, #2
 800a5c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2202      	movs	r2, #2
 800a5d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a5d4:	e031      	b.n	800a63a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	2b04      	cmp	r3, #4
 800a5da:	d110      	bne.n	800a5fe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a5dc:	7bbb      	ldrb	r3, [r7, #14]
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d102      	bne.n	800a5e8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a5e2:	7b3b      	ldrb	r3, [r7, #12]
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d001      	beq.n	800a5ec <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	e055      	b.n	800a698 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2202      	movs	r2, #2
 800a5f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2202      	movs	r2, #2
 800a5f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a5fc:	e01d      	b.n	800a63a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a5fe:	7bfb      	ldrb	r3, [r7, #15]
 800a600:	2b01      	cmp	r3, #1
 800a602:	d108      	bne.n	800a616 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a604:	7bbb      	ldrb	r3, [r7, #14]
 800a606:	2b01      	cmp	r3, #1
 800a608:	d105      	bne.n	800a616 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a60a:	7b7b      	ldrb	r3, [r7, #13]
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d102      	bne.n	800a616 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a610:	7b3b      	ldrb	r3, [r7, #12]
 800a612:	2b01      	cmp	r3, #1
 800a614:	d001      	beq.n	800a61a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a616:	2301      	movs	r3, #1
 800a618:	e03e      	b.n	800a698 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2202      	movs	r2, #2
 800a61e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2202      	movs	r2, #2
 800a626:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2202      	movs	r2, #2
 800a62e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2202      	movs	r2, #2
 800a636:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d003      	beq.n	800a648 <HAL_TIM_Encoder_Start+0xc4>
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	2b04      	cmp	r3, #4
 800a644:	d008      	beq.n	800a658 <HAL_TIM_Encoder_Start+0xd4>
 800a646:	e00f      	b.n	800a668 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2201      	movs	r2, #1
 800a64e:	2100      	movs	r1, #0
 800a650:	4618      	mov	r0, r3
 800a652:	f001 faa3 	bl	800bb9c <TIM_CCxChannelCmd>
      break;
 800a656:	e016      	b.n	800a686 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2201      	movs	r2, #1
 800a65e:	2104      	movs	r1, #4
 800a660:	4618      	mov	r0, r3
 800a662:	f001 fa9b 	bl	800bb9c <TIM_CCxChannelCmd>
      break;
 800a666:	e00e      	b.n	800a686 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	2201      	movs	r2, #1
 800a66e:	2100      	movs	r1, #0
 800a670:	4618      	mov	r0, r3
 800a672:	f001 fa93 	bl	800bb9c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	2201      	movs	r2, #1
 800a67c:	2104      	movs	r1, #4
 800a67e:	4618      	mov	r0, r3
 800a680:	f001 fa8c 	bl	800bb9c <TIM_CCxChannelCmd>
      break;
 800a684:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f042 0201 	orr.w	r2, r2, #1
 800a694:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a696:	2300      	movs	r3, #0
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3710      	adds	r7, #16
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d003      	beq.n	800a6b8 <HAL_TIM_Encoder_Stop+0x18>
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	2b04      	cmp	r3, #4
 800a6b4:	d008      	beq.n	800a6c8 <HAL_TIM_Encoder_Stop+0x28>
 800a6b6:	e00f      	b.n	800a6d8 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	2100      	movs	r1, #0
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f001 fa6b 	bl	800bb9c <TIM_CCxChannelCmd>
      break;
 800a6c6:	e016      	b.n	800a6f6 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	2104      	movs	r1, #4
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f001 fa63 	bl	800bb9c <TIM_CCxChannelCmd>
      break;
 800a6d6:	e00e      	b.n	800a6f6 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	2100      	movs	r1, #0
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f001 fa5b 	bl	800bb9c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	2104      	movs	r1, #4
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f001 fa54 	bl	800bb9c <TIM_CCxChannelCmd>
      break;
 800a6f4:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	6a1a      	ldr	r2, [r3, #32]
 800a6fc:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a700:	4013      	ands	r3, r2
 800a702:	2b00      	cmp	r3, #0
 800a704:	d10f      	bne.n	800a726 <HAL_TIM_Encoder_Stop+0x86>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	6a1a      	ldr	r2, [r3, #32]
 800a70c:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a710:	4013      	ands	r3, r2
 800a712:	2b00      	cmp	r3, #0
 800a714:	d107      	bne.n	800a726 <HAL_TIM_Encoder_Stop+0x86>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f022 0201 	bic.w	r2, r2, #1
 800a724:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d002      	beq.n	800a732 <HAL_TIM_Encoder_Stop+0x92>
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	2b04      	cmp	r3, #4
 800a730:	d148      	bne.n	800a7c4 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d104      	bne.n	800a742 <HAL_TIM_Encoder_Stop+0xa2>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2201      	movs	r2, #1
 800a73c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a740:	e023      	b.n	800a78a <HAL_TIM_Encoder_Stop+0xea>
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	2b04      	cmp	r3, #4
 800a746:	d104      	bne.n	800a752 <HAL_TIM_Encoder_Stop+0xb2>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2201      	movs	r2, #1
 800a74c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a750:	e01b      	b.n	800a78a <HAL_TIM_Encoder_Stop+0xea>
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	2b08      	cmp	r3, #8
 800a756:	d104      	bne.n	800a762 <HAL_TIM_Encoder_Stop+0xc2>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a760:	e013      	b.n	800a78a <HAL_TIM_Encoder_Stop+0xea>
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	2b0c      	cmp	r3, #12
 800a766:	d104      	bne.n	800a772 <HAL_TIM_Encoder_Stop+0xd2>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a770:	e00b      	b.n	800a78a <HAL_TIM_Encoder_Stop+0xea>
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	2b10      	cmp	r3, #16
 800a776:	d104      	bne.n	800a782 <HAL_TIM_Encoder_Stop+0xe2>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a780:	e003      	b.n	800a78a <HAL_TIM_Encoder_Stop+0xea>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2201      	movs	r2, #1
 800a786:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d104      	bne.n	800a79a <HAL_TIM_Encoder_Stop+0xfa>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a798:	e024      	b.n	800a7e4 <HAL_TIM_Encoder_Stop+0x144>
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	2b04      	cmp	r3, #4
 800a79e:	d104      	bne.n	800a7aa <HAL_TIM_Encoder_Stop+0x10a>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a7a8:	e01c      	b.n	800a7e4 <HAL_TIM_Encoder_Stop+0x144>
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	2b08      	cmp	r3, #8
 800a7ae:	d104      	bne.n	800a7ba <HAL_TIM_Encoder_Stop+0x11a>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a7b8:	e014      	b.n	800a7e4 <HAL_TIM_Encoder_Stop+0x144>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2201      	movs	r2, #1
 800a7be:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 800a7c2:	e00f      	b.n	800a7e4 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return HAL_OK;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3708      	adds	r7, #8
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b084      	sub	sp, #16
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	691b      	ldr	r3, [r3, #16]
 800a804:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	f003 0302 	and.w	r3, r3, #2
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d026      	beq.n	800a85e <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f003 0302 	and.w	r3, r3, #2
 800a816:	2b00      	cmp	r3, #0
 800a818:	d021      	beq.n	800a85e <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f06f 0202 	mvn.w	r2, #2
 800a822:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2201      	movs	r2, #1
 800a828:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	699b      	ldr	r3, [r3, #24]
 800a830:	f003 0303 	and.w	r3, r3, #3
 800a834:	2b00      	cmp	r3, #0
 800a836:	d005      	beq.n	800a844 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	4798      	blx	r3
 800a842:	e009      	b.n	800a858 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2200      	movs	r2, #0
 800a85c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	f003 0304 	and.w	r3, r3, #4
 800a864:	2b00      	cmp	r3, #0
 800a866:	d026      	beq.n	800a8b6 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f003 0304 	and.w	r3, r3, #4
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d021      	beq.n	800a8b6 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f06f 0204 	mvn.w	r2, #4
 800a87a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2202      	movs	r2, #2
 800a880:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	699b      	ldr	r3, [r3, #24]
 800a888:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d005      	beq.n	800a89c <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	4798      	blx	r3
 800a89a:	e009      	b.n	800a8b0 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	f003 0308 	and.w	r3, r3, #8
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d026      	beq.n	800a90e <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f003 0308 	and.w	r3, r3, #8
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d021      	beq.n	800a90e <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f06f 0208 	mvn.w	r2, #8
 800a8d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2204      	movs	r2, #4
 800a8d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	69db      	ldr	r3, [r3, #28]
 800a8e0:	f003 0303 	and.w	r3, r3, #3
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d005      	beq.n	800a8f4 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	4798      	blx	r3
 800a8f2:	e009      	b.n	800a908 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	f003 0310 	and.w	r3, r3, #16
 800a914:	2b00      	cmp	r3, #0
 800a916:	d026      	beq.n	800a966 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f003 0310 	and.w	r3, r3, #16
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d021      	beq.n	800a966 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f06f 0210 	mvn.w	r2, #16
 800a92a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2208      	movs	r2, #8
 800a930:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	69db      	ldr	r3, [r3, #28]
 800a938:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d005      	beq.n	800a94c <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	4798      	blx	r3
 800a94a:	e009      	b.n	800a960 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2200      	movs	r2, #0
 800a964:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	f003 0301 	and.w	r3, r3, #1
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d00e      	beq.n	800a98e <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f003 0301 	and.w	r3, r3, #1
 800a976:	2b00      	cmp	r3, #0
 800a978:	d009      	beq.n	800a98e <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f06f 0201 	mvn.w	r2, #1
 800a982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a994:	2b00      	cmp	r3, #0
 800a996:	d104      	bne.n	800a9a2 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d00e      	beq.n	800a9c0 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d009      	beq.n	800a9c0 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a9b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00e      	beq.n	800a9e8 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d009      	beq.n	800a9e8 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a9dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d00e      	beq.n	800aa10 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d009      	beq.n	800aa10 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800aa04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	f003 0320 	and.w	r3, r3, #32
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d00e      	beq.n	800aa38 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f003 0320 	and.w	r3, r3, #32
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d009      	beq.n	800aa38 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f06f 0220 	mvn.w	r2, #32
 800aa2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00e      	beq.n	800aa60 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d009      	beq.n	800aa60 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800aa54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d00e      	beq.n	800aa88 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d009      	beq.n	800aa88 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800aa7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d00e      	beq.n	800aab0 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d009      	beq.n	800aab0 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800aaa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00e      	beq.n	800aad8 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d009      	beq.n	800aad8 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800aacc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aad8:	bf00      	nop
 800aada:	3710      	adds	r7, #16
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b086      	sub	sp, #24
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aaec:	2300      	movs	r3, #0
 800aaee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	d101      	bne.n	800aafe <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aafa:	2302      	movs	r3, #2
 800aafc:	e0ff      	b.n	800acfe <HAL_TIM_PWM_ConfigChannel+0x21e>
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2201      	movs	r2, #1
 800ab02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2b14      	cmp	r3, #20
 800ab0a:	f200 80f0 	bhi.w	800acee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ab0e:	a201      	add	r2, pc, #4	@ (adr r2, 800ab14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ab10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab14:	0800ab69 	.word	0x0800ab69
 800ab18:	0800acef 	.word	0x0800acef
 800ab1c:	0800acef 	.word	0x0800acef
 800ab20:	0800acef 	.word	0x0800acef
 800ab24:	0800aba9 	.word	0x0800aba9
 800ab28:	0800acef 	.word	0x0800acef
 800ab2c:	0800acef 	.word	0x0800acef
 800ab30:	0800acef 	.word	0x0800acef
 800ab34:	0800abeb 	.word	0x0800abeb
 800ab38:	0800acef 	.word	0x0800acef
 800ab3c:	0800acef 	.word	0x0800acef
 800ab40:	0800acef 	.word	0x0800acef
 800ab44:	0800ac2b 	.word	0x0800ac2b
 800ab48:	0800acef 	.word	0x0800acef
 800ab4c:	0800acef 	.word	0x0800acef
 800ab50:	0800acef 	.word	0x0800acef
 800ab54:	0800ac6d 	.word	0x0800ac6d
 800ab58:	0800acef 	.word	0x0800acef
 800ab5c:	0800acef 	.word	0x0800acef
 800ab60:	0800acef 	.word	0x0800acef
 800ab64:	0800acad 	.word	0x0800acad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	68b9      	ldr	r1, [r7, #8]
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f000 fc4e 	bl	800b410 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	699a      	ldr	r2, [r3, #24]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f042 0208 	orr.w	r2, r2, #8
 800ab82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	699a      	ldr	r2, [r3, #24]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f022 0204 	bic.w	r2, r2, #4
 800ab92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	6999      	ldr	r1, [r3, #24]
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	691a      	ldr	r2, [r3, #16]
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	430a      	orrs	r2, r1
 800aba4:	619a      	str	r2, [r3, #24]
      break;
 800aba6:	e0a5      	b.n	800acf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	68b9      	ldr	r1, [r7, #8]
 800abae:	4618      	mov	r0, r3
 800abb0:	f000 fcc8 	bl	800b544 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	699a      	ldr	r2, [r3, #24]
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800abc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	699a      	ldr	r2, [r3, #24]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800abd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	6999      	ldr	r1, [r3, #24]
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	691b      	ldr	r3, [r3, #16]
 800abde:	021a      	lsls	r2, r3, #8
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	430a      	orrs	r2, r1
 800abe6:	619a      	str	r2, [r3, #24]
      break;
 800abe8:	e084      	b.n	800acf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	68b9      	ldr	r1, [r7, #8]
 800abf0:	4618      	mov	r0, r3
 800abf2:	f000 fd3b 	bl	800b66c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	69da      	ldr	r2, [r3, #28]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f042 0208 	orr.w	r2, r2, #8
 800ac04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	69da      	ldr	r2, [r3, #28]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f022 0204 	bic.w	r2, r2, #4
 800ac14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	69d9      	ldr	r1, [r3, #28]
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	691a      	ldr	r2, [r3, #16]
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	430a      	orrs	r2, r1
 800ac26:	61da      	str	r2, [r3, #28]
      break;
 800ac28:	e064      	b.n	800acf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	68b9      	ldr	r1, [r7, #8]
 800ac30:	4618      	mov	r0, r3
 800ac32:	f000 fdad 	bl	800b790 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	69da      	ldr	r2, [r3, #28]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ac44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	69da      	ldr	r2, [r3, #28]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ac54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	69d9      	ldr	r1, [r3, #28]
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	691b      	ldr	r3, [r3, #16]
 800ac60:	021a      	lsls	r2, r3, #8
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	430a      	orrs	r2, r1
 800ac68:	61da      	str	r2, [r3, #28]
      break;
 800ac6a:	e043      	b.n	800acf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	68b9      	ldr	r1, [r7, #8]
 800ac72:	4618      	mov	r0, r3
 800ac74:	f000 fe20 	bl	800b8b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f042 0208 	orr.w	r2, r2, #8
 800ac86:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f022 0204 	bic.w	r2, r2, #4
 800ac96:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	691a      	ldr	r2, [r3, #16]
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	430a      	orrs	r2, r1
 800aca8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800acaa:	e023      	b.n	800acf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68b9      	ldr	r1, [r7, #8]
 800acb2:	4618      	mov	r0, r3
 800acb4:	f000 fe6a 	bl	800b98c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800acc6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800acd6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	691b      	ldr	r3, [r3, #16]
 800ace2:	021a      	lsls	r2, r3, #8
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	430a      	orrs	r2, r1
 800acea:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800acec:	e002      	b.n	800acf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800acee:	2301      	movs	r3, #1
 800acf0:	75fb      	strb	r3, [r7, #23]
      break;
 800acf2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2200      	movs	r2, #0
 800acf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800acfc:	7dfb      	ldrb	r3, [r7, #23]
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3718      	adds	r7, #24
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop

0800ad08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ad12:	2300      	movs	r3, #0
 800ad14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d101      	bne.n	800ad24 <HAL_TIM_ConfigClockSource+0x1c>
 800ad20:	2302      	movs	r3, #2
 800ad22:	e0f6      	b.n	800af12 <HAL_TIM_ConfigClockSource+0x20a>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2201      	movs	r2, #1
 800ad28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2202      	movs	r2, #2
 800ad30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	689b      	ldr	r3, [r3, #8]
 800ad3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800ad42:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ad46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ad4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	68ba      	ldr	r2, [r7, #8]
 800ad56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a6f      	ldr	r2, [pc, #444]	@ (800af1c <HAL_TIM_ConfigClockSource+0x214>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	f000 80c1 	beq.w	800aee6 <HAL_TIM_ConfigClockSource+0x1de>
 800ad64:	4a6d      	ldr	r2, [pc, #436]	@ (800af1c <HAL_TIM_ConfigClockSource+0x214>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	f200 80c6 	bhi.w	800aef8 <HAL_TIM_ConfigClockSource+0x1f0>
 800ad6c:	4a6c      	ldr	r2, [pc, #432]	@ (800af20 <HAL_TIM_ConfigClockSource+0x218>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	f000 80b9 	beq.w	800aee6 <HAL_TIM_ConfigClockSource+0x1de>
 800ad74:	4a6a      	ldr	r2, [pc, #424]	@ (800af20 <HAL_TIM_ConfigClockSource+0x218>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	f200 80be 	bhi.w	800aef8 <HAL_TIM_ConfigClockSource+0x1f0>
 800ad7c:	4a69      	ldr	r2, [pc, #420]	@ (800af24 <HAL_TIM_ConfigClockSource+0x21c>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	f000 80b1 	beq.w	800aee6 <HAL_TIM_ConfigClockSource+0x1de>
 800ad84:	4a67      	ldr	r2, [pc, #412]	@ (800af24 <HAL_TIM_ConfigClockSource+0x21c>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	f200 80b6 	bhi.w	800aef8 <HAL_TIM_ConfigClockSource+0x1f0>
 800ad8c:	4a66      	ldr	r2, [pc, #408]	@ (800af28 <HAL_TIM_ConfigClockSource+0x220>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	f000 80a9 	beq.w	800aee6 <HAL_TIM_ConfigClockSource+0x1de>
 800ad94:	4a64      	ldr	r2, [pc, #400]	@ (800af28 <HAL_TIM_ConfigClockSource+0x220>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	f200 80ae 	bhi.w	800aef8 <HAL_TIM_ConfigClockSource+0x1f0>
 800ad9c:	4a63      	ldr	r2, [pc, #396]	@ (800af2c <HAL_TIM_ConfigClockSource+0x224>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	f000 80a1 	beq.w	800aee6 <HAL_TIM_ConfigClockSource+0x1de>
 800ada4:	4a61      	ldr	r2, [pc, #388]	@ (800af2c <HAL_TIM_ConfigClockSource+0x224>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	f200 80a6 	bhi.w	800aef8 <HAL_TIM_ConfigClockSource+0x1f0>
 800adac:	4a60      	ldr	r2, [pc, #384]	@ (800af30 <HAL_TIM_ConfigClockSource+0x228>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	f000 8099 	beq.w	800aee6 <HAL_TIM_ConfigClockSource+0x1de>
 800adb4:	4a5e      	ldr	r2, [pc, #376]	@ (800af30 <HAL_TIM_ConfigClockSource+0x228>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	f200 809e 	bhi.w	800aef8 <HAL_TIM_ConfigClockSource+0x1f0>
 800adbc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800adc0:	f000 8091 	beq.w	800aee6 <HAL_TIM_ConfigClockSource+0x1de>
 800adc4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800adc8:	f200 8096 	bhi.w	800aef8 <HAL_TIM_ConfigClockSource+0x1f0>
 800adcc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800add0:	f000 8089 	beq.w	800aee6 <HAL_TIM_ConfigClockSource+0x1de>
 800add4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800add8:	f200 808e 	bhi.w	800aef8 <HAL_TIM_ConfigClockSource+0x1f0>
 800addc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ade0:	d03e      	beq.n	800ae60 <HAL_TIM_ConfigClockSource+0x158>
 800ade2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ade6:	f200 8087 	bhi.w	800aef8 <HAL_TIM_ConfigClockSource+0x1f0>
 800adea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800adee:	f000 8086 	beq.w	800aefe <HAL_TIM_ConfigClockSource+0x1f6>
 800adf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800adf6:	d87f      	bhi.n	800aef8 <HAL_TIM_ConfigClockSource+0x1f0>
 800adf8:	2b70      	cmp	r3, #112	@ 0x70
 800adfa:	d01a      	beq.n	800ae32 <HAL_TIM_ConfigClockSource+0x12a>
 800adfc:	2b70      	cmp	r3, #112	@ 0x70
 800adfe:	d87b      	bhi.n	800aef8 <HAL_TIM_ConfigClockSource+0x1f0>
 800ae00:	2b60      	cmp	r3, #96	@ 0x60
 800ae02:	d050      	beq.n	800aea6 <HAL_TIM_ConfigClockSource+0x19e>
 800ae04:	2b60      	cmp	r3, #96	@ 0x60
 800ae06:	d877      	bhi.n	800aef8 <HAL_TIM_ConfigClockSource+0x1f0>
 800ae08:	2b50      	cmp	r3, #80	@ 0x50
 800ae0a:	d03c      	beq.n	800ae86 <HAL_TIM_ConfigClockSource+0x17e>
 800ae0c:	2b50      	cmp	r3, #80	@ 0x50
 800ae0e:	d873      	bhi.n	800aef8 <HAL_TIM_ConfigClockSource+0x1f0>
 800ae10:	2b40      	cmp	r3, #64	@ 0x40
 800ae12:	d058      	beq.n	800aec6 <HAL_TIM_ConfigClockSource+0x1be>
 800ae14:	2b40      	cmp	r3, #64	@ 0x40
 800ae16:	d86f      	bhi.n	800aef8 <HAL_TIM_ConfigClockSource+0x1f0>
 800ae18:	2b30      	cmp	r3, #48	@ 0x30
 800ae1a:	d064      	beq.n	800aee6 <HAL_TIM_ConfigClockSource+0x1de>
 800ae1c:	2b30      	cmp	r3, #48	@ 0x30
 800ae1e:	d86b      	bhi.n	800aef8 <HAL_TIM_ConfigClockSource+0x1f0>
 800ae20:	2b20      	cmp	r3, #32
 800ae22:	d060      	beq.n	800aee6 <HAL_TIM_ConfigClockSource+0x1de>
 800ae24:	2b20      	cmp	r3, #32
 800ae26:	d867      	bhi.n	800aef8 <HAL_TIM_ConfigClockSource+0x1f0>
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d05c      	beq.n	800aee6 <HAL_TIM_ConfigClockSource+0x1de>
 800ae2c:	2b10      	cmp	r3, #16
 800ae2e:	d05a      	beq.n	800aee6 <HAL_TIM_ConfigClockSource+0x1de>
 800ae30:	e062      	b.n	800aef8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ae42:	f000 fe8b 	bl	800bb5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ae54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	68ba      	ldr	r2, [r7, #8]
 800ae5c:	609a      	str	r2, [r3, #8]
      break;
 800ae5e:	e04f      	b.n	800af00 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ae70:	f000 fe74 	bl	800bb5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	689a      	ldr	r2, [r3, #8]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ae82:	609a      	str	r2, [r3, #8]
      break;
 800ae84:	e03c      	b.n	800af00 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae92:	461a      	mov	r2, r3
 800ae94:	f000 fde6 	bl	800ba64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	2150      	movs	r1, #80	@ 0x50
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f000 fe3f 	bl	800bb22 <TIM_ITRx_SetConfig>
      break;
 800aea4:	e02c      	b.n	800af00 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	f000 fe05 	bl	800bac2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	2160      	movs	r1, #96	@ 0x60
 800aebe:	4618      	mov	r0, r3
 800aec0:	f000 fe2f 	bl	800bb22 <TIM_ITRx_SetConfig>
      break;
 800aec4:	e01c      	b.n	800af00 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aed2:	461a      	mov	r2, r3
 800aed4:	f000 fdc6 	bl	800ba64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2140      	movs	r1, #64	@ 0x40
 800aede:	4618      	mov	r0, r3
 800aee0:	f000 fe1f 	bl	800bb22 <TIM_ITRx_SetConfig>
      break;
 800aee4:	e00c      	b.n	800af00 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4619      	mov	r1, r3
 800aef0:	4610      	mov	r0, r2
 800aef2:	f000 fe16 	bl	800bb22 <TIM_ITRx_SetConfig>
      break;
 800aef6:	e003      	b.n	800af00 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800aef8:	2301      	movs	r3, #1
 800aefa:	73fb      	strb	r3, [r7, #15]
      break;
 800aefc:	e000      	b.n	800af00 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800aefe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2201      	movs	r2, #1
 800af04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2200      	movs	r2, #0
 800af0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800af10:	7bfb      	ldrb	r3, [r7, #15]
}
 800af12:	4618      	mov	r0, r3
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	00100070 	.word	0x00100070
 800af20:	00100060 	.word	0x00100060
 800af24:	00100050 	.word	0x00100050
 800af28:	00100040 	.word	0x00100040
 800af2c:	00100030 	.word	0x00100030
 800af30:	00100020 	.word	0x00100020

0800af34 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800af3c:	bf00      	nop
 800af3e:	370c      	adds	r7, #12
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800af50:	bf00      	nop
 800af52:	370c      	adds	r7, #12
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr

0800af5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800af64:	bf00      	nop
 800af66:	370c      	adds	r7, #12
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr

0800af70 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800af70:	b480      	push	{r7}
 800af72:	b083      	sub	sp, #12
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800af78:	bf00      	nop
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800af8c:	bf00      	nop
 800af8e:	370c      	adds	r7, #12
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr

0800af98 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800af98:	b480      	push	{r7}
 800af9a:	b083      	sub	sp, #12
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800afa0:	bf00      	nop
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800afb4:	bf00      	nop
 800afb6:	370c      	adds	r7, #12
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr

0800afc0 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b083      	sub	sp, #12
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800afc8:	bf00      	nop
 800afca:	370c      	adds	r7, #12
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800afdc:	bf00      	nop
 800afde:	370c      	adds	r7, #12
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr

0800afe8 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800afe8:	b480      	push	{r7}
 800afea:	b087      	sub	sp, #28
 800afec:	af00      	add	r7, sp, #0
 800afee:	60f8      	str	r0, [r7, #12]
 800aff0:	460b      	mov	r3, r1
 800aff2:	607a      	str	r2, [r7, #4]
 800aff4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800aff6:	2300      	movs	r3, #0
 800aff8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d101      	bne.n	800b004 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800b000:	2301      	movs	r3, #1
 800b002:	e14a      	b.n	800b29a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	f040 80dd 	bne.w	800b1cc <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800b012:	7afb      	ldrb	r3, [r7, #11]
 800b014:	2b1f      	cmp	r3, #31
 800b016:	f200 80d6 	bhi.w	800b1c6 <HAL_TIM_RegisterCallback+0x1de>
 800b01a:	a201      	add	r2, pc, #4	@ (adr r2, 800b020 <HAL_TIM_RegisterCallback+0x38>)
 800b01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b020:	0800b0a1 	.word	0x0800b0a1
 800b024:	0800b0a9 	.word	0x0800b0a9
 800b028:	0800b0b1 	.word	0x0800b0b1
 800b02c:	0800b0b9 	.word	0x0800b0b9
 800b030:	0800b0c1 	.word	0x0800b0c1
 800b034:	0800b0c9 	.word	0x0800b0c9
 800b038:	0800b0d1 	.word	0x0800b0d1
 800b03c:	0800b0d9 	.word	0x0800b0d9
 800b040:	0800b0e1 	.word	0x0800b0e1
 800b044:	0800b0e9 	.word	0x0800b0e9
 800b048:	0800b0f1 	.word	0x0800b0f1
 800b04c:	0800b0f9 	.word	0x0800b0f9
 800b050:	0800b101 	.word	0x0800b101
 800b054:	0800b109 	.word	0x0800b109
 800b058:	0800b113 	.word	0x0800b113
 800b05c:	0800b11d 	.word	0x0800b11d
 800b060:	0800b127 	.word	0x0800b127
 800b064:	0800b131 	.word	0x0800b131
 800b068:	0800b13b 	.word	0x0800b13b
 800b06c:	0800b145 	.word	0x0800b145
 800b070:	0800b14f 	.word	0x0800b14f
 800b074:	0800b159 	.word	0x0800b159
 800b078:	0800b163 	.word	0x0800b163
 800b07c:	0800b16d 	.word	0x0800b16d
 800b080:	0800b177 	.word	0x0800b177
 800b084:	0800b181 	.word	0x0800b181
 800b088:	0800b18b 	.word	0x0800b18b
 800b08c:	0800b195 	.word	0x0800b195
 800b090:	0800b19f 	.word	0x0800b19f
 800b094:	0800b1a9 	.word	0x0800b1a9
 800b098:	0800b1b3 	.word	0x0800b1b3
 800b09c:	0800b1bd 	.word	0x0800b1bd
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	687a      	ldr	r2, [r7, #4]
 800b0a4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800b0a6:	e0f7      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b0ae:	e0f3      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800b0b6:	e0ef      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800b0be:	e0eb      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800b0c6:	e0e7      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800b0ce:	e0e3      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800b0d6:	e0df      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800b0de:	e0db      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800b0e6:	e0d7      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800b0ee:	e0d3      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800b0f6:	e0cf      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800b0fe:	e0cb      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800b106:	e0c7      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800b110:	e0c2      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	687a      	ldr	r2, [r7, #4]
 800b116:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800b11a:	e0bd      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800b124:	e0b8      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800b12e:	e0b3      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800b138:	e0ae      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800b142:	e0a9      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800b14c:	e0a4      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	687a      	ldr	r2, [r7, #4]
 800b152:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800b156:	e09f      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800b160:	e09a      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800b16a:	e095      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800b174:	e090      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800b17e:	e08b      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	687a      	ldr	r2, [r7, #4]
 800b184:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800b188:	e086      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800b192:	e081      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800b19c:	e07c      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800b1a6:	e077      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	687a      	ldr	r2, [r7, #4]
 800b1ac:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800b1b0:	e072      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800b1ba:	e06d      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800b1c4:	e068      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	75fb      	strb	r3, [r7, #23]
        break;
 800b1ca:	e065      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d15d      	bne.n	800b294 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800b1d8:	7afb      	ldrb	r3, [r7, #11]
 800b1da:	2b0d      	cmp	r3, #13
 800b1dc:	d857      	bhi.n	800b28e <HAL_TIM_RegisterCallback+0x2a6>
 800b1de:	a201      	add	r2, pc, #4	@ (adr r2, 800b1e4 <HAL_TIM_RegisterCallback+0x1fc>)
 800b1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1e4:	0800b21d 	.word	0x0800b21d
 800b1e8:	0800b225 	.word	0x0800b225
 800b1ec:	0800b22d 	.word	0x0800b22d
 800b1f0:	0800b235 	.word	0x0800b235
 800b1f4:	0800b23d 	.word	0x0800b23d
 800b1f8:	0800b245 	.word	0x0800b245
 800b1fc:	0800b24d 	.word	0x0800b24d
 800b200:	0800b255 	.word	0x0800b255
 800b204:	0800b25d 	.word	0x0800b25d
 800b208:	0800b265 	.word	0x0800b265
 800b20c:	0800b26d 	.word	0x0800b26d
 800b210:	0800b275 	.word	0x0800b275
 800b214:	0800b27d 	.word	0x0800b27d
 800b218:	0800b285 	.word	0x0800b285
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800b222:	e039      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	687a      	ldr	r2, [r7, #4]
 800b228:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b22a:	e035      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800b232:	e031      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	687a      	ldr	r2, [r7, #4]
 800b238:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800b23a:	e02d      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	687a      	ldr	r2, [r7, #4]
 800b240:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800b242:	e029      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800b24a:	e025      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800b252:	e021      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800b25a:	e01d      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800b262:	e019      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	687a      	ldr	r2, [r7, #4]
 800b268:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800b26a:	e015      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800b272:	e011      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800b27a:	e00d      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800b282:	e009      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800b28c:	e004      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b28e:	2301      	movs	r3, #1
 800b290:	75fb      	strb	r3, [r7, #23]
        break;
 800b292:	e001      	b.n	800b298 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800b294:	2301      	movs	r3, #1
 800b296:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b298:	7dfb      	ldrb	r3, [r7, #23]
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	371c      	adds	r7, #28
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr
 800b2a6:	bf00      	nop

0800b2a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b085      	sub	sp, #20
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	4a4c      	ldr	r2, [pc, #304]	@ (800b3ec <TIM_Base_SetConfig+0x144>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d017      	beq.n	800b2f0 <TIM_Base_SetConfig+0x48>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2c6:	d013      	beq.n	800b2f0 <TIM_Base_SetConfig+0x48>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	4a49      	ldr	r2, [pc, #292]	@ (800b3f0 <TIM_Base_SetConfig+0x148>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d00f      	beq.n	800b2f0 <TIM_Base_SetConfig+0x48>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	4a48      	ldr	r2, [pc, #288]	@ (800b3f4 <TIM_Base_SetConfig+0x14c>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d00b      	beq.n	800b2f0 <TIM_Base_SetConfig+0x48>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	4a47      	ldr	r2, [pc, #284]	@ (800b3f8 <TIM_Base_SetConfig+0x150>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d007      	beq.n	800b2f0 <TIM_Base_SetConfig+0x48>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	4a46      	ldr	r2, [pc, #280]	@ (800b3fc <TIM_Base_SetConfig+0x154>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d003      	beq.n	800b2f0 <TIM_Base_SetConfig+0x48>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	4a45      	ldr	r2, [pc, #276]	@ (800b400 <TIM_Base_SetConfig+0x158>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d108      	bne.n	800b302 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	68fa      	ldr	r2, [r7, #12]
 800b2fe:	4313      	orrs	r3, r2
 800b300:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	4a39      	ldr	r2, [pc, #228]	@ (800b3ec <TIM_Base_SetConfig+0x144>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d023      	beq.n	800b352 <TIM_Base_SetConfig+0xaa>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b310:	d01f      	beq.n	800b352 <TIM_Base_SetConfig+0xaa>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	4a36      	ldr	r2, [pc, #216]	@ (800b3f0 <TIM_Base_SetConfig+0x148>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d01b      	beq.n	800b352 <TIM_Base_SetConfig+0xaa>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4a35      	ldr	r2, [pc, #212]	@ (800b3f4 <TIM_Base_SetConfig+0x14c>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d017      	beq.n	800b352 <TIM_Base_SetConfig+0xaa>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	4a34      	ldr	r2, [pc, #208]	@ (800b3f8 <TIM_Base_SetConfig+0x150>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d013      	beq.n	800b352 <TIM_Base_SetConfig+0xaa>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	4a33      	ldr	r2, [pc, #204]	@ (800b3fc <TIM_Base_SetConfig+0x154>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d00f      	beq.n	800b352 <TIM_Base_SetConfig+0xaa>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	4a33      	ldr	r2, [pc, #204]	@ (800b404 <TIM_Base_SetConfig+0x15c>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d00b      	beq.n	800b352 <TIM_Base_SetConfig+0xaa>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	4a32      	ldr	r2, [pc, #200]	@ (800b408 <TIM_Base_SetConfig+0x160>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d007      	beq.n	800b352 <TIM_Base_SetConfig+0xaa>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	4a31      	ldr	r2, [pc, #196]	@ (800b40c <TIM_Base_SetConfig+0x164>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d003      	beq.n	800b352 <TIM_Base_SetConfig+0xaa>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	4a2c      	ldr	r2, [pc, #176]	@ (800b400 <TIM_Base_SetConfig+0x158>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d108      	bne.n	800b364 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	68db      	ldr	r3, [r3, #12]
 800b35e:	68fa      	ldr	r2, [r7, #12]
 800b360:	4313      	orrs	r3, r2
 800b362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	695b      	ldr	r3, [r3, #20]
 800b36e:	4313      	orrs	r3, r2
 800b370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	68fa      	ldr	r2, [r7, #12]
 800b376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	689a      	ldr	r2, [r3, #8]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	681a      	ldr	r2, [r3, #0]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	4a18      	ldr	r2, [pc, #96]	@ (800b3ec <TIM_Base_SetConfig+0x144>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d013      	beq.n	800b3b8 <TIM_Base_SetConfig+0x110>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	4a1a      	ldr	r2, [pc, #104]	@ (800b3fc <TIM_Base_SetConfig+0x154>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d00f      	beq.n	800b3b8 <TIM_Base_SetConfig+0x110>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	4a1a      	ldr	r2, [pc, #104]	@ (800b404 <TIM_Base_SetConfig+0x15c>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d00b      	beq.n	800b3b8 <TIM_Base_SetConfig+0x110>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	4a19      	ldr	r2, [pc, #100]	@ (800b408 <TIM_Base_SetConfig+0x160>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d007      	beq.n	800b3b8 <TIM_Base_SetConfig+0x110>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	4a18      	ldr	r2, [pc, #96]	@ (800b40c <TIM_Base_SetConfig+0x164>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d003      	beq.n	800b3b8 <TIM_Base_SetConfig+0x110>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	4a13      	ldr	r2, [pc, #76]	@ (800b400 <TIM_Base_SetConfig+0x158>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d103      	bne.n	800b3c0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	691a      	ldr	r2, [r3, #16]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	691b      	ldr	r3, [r3, #16]
 800b3ca:	f003 0301 	and.w	r3, r3, #1
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d105      	bne.n	800b3de <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	691b      	ldr	r3, [r3, #16]
 800b3d6:	f023 0201 	bic.w	r2, r3, #1
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	611a      	str	r2, [r3, #16]
  }
}
 800b3de:	bf00      	nop
 800b3e0:	3714      	adds	r7, #20
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr
 800b3ea:	bf00      	nop
 800b3ec:	40012c00 	.word	0x40012c00
 800b3f0:	40000400 	.word	0x40000400
 800b3f4:	40000800 	.word	0x40000800
 800b3f8:	40000c00 	.word	0x40000c00
 800b3fc:	40013400 	.word	0x40013400
 800b400:	40015000 	.word	0x40015000
 800b404:	40014000 	.word	0x40014000
 800b408:	40014400 	.word	0x40014400
 800b40c:	40014800 	.word	0x40014800

0800b410 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b410:	b480      	push	{r7}
 800b412:	b087      	sub	sp, #28
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6a1b      	ldr	r3, [r3, #32]
 800b41e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6a1b      	ldr	r3, [r3, #32]
 800b424:	f023 0201 	bic.w	r2, r3, #1
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	699b      	ldr	r3, [r3, #24]
 800b436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b43e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f023 0303 	bic.w	r3, r3, #3
 800b44a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	68fa      	ldr	r2, [r7, #12]
 800b452:	4313      	orrs	r3, r2
 800b454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	f023 0302 	bic.w	r3, r3, #2
 800b45c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	689b      	ldr	r3, [r3, #8]
 800b462:	697a      	ldr	r2, [r7, #20]
 800b464:	4313      	orrs	r3, r2
 800b466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	4a30      	ldr	r2, [pc, #192]	@ (800b52c <TIM_OC1_SetConfig+0x11c>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d013      	beq.n	800b498 <TIM_OC1_SetConfig+0x88>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	4a2f      	ldr	r2, [pc, #188]	@ (800b530 <TIM_OC1_SetConfig+0x120>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d00f      	beq.n	800b498 <TIM_OC1_SetConfig+0x88>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	4a2e      	ldr	r2, [pc, #184]	@ (800b534 <TIM_OC1_SetConfig+0x124>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d00b      	beq.n	800b498 <TIM_OC1_SetConfig+0x88>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	4a2d      	ldr	r2, [pc, #180]	@ (800b538 <TIM_OC1_SetConfig+0x128>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d007      	beq.n	800b498 <TIM_OC1_SetConfig+0x88>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	4a2c      	ldr	r2, [pc, #176]	@ (800b53c <TIM_OC1_SetConfig+0x12c>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d003      	beq.n	800b498 <TIM_OC1_SetConfig+0x88>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	4a2b      	ldr	r2, [pc, #172]	@ (800b540 <TIM_OC1_SetConfig+0x130>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d10c      	bne.n	800b4b2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	f023 0308 	bic.w	r3, r3, #8
 800b49e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	68db      	ldr	r3, [r3, #12]
 800b4a4:	697a      	ldr	r2, [r7, #20]
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	f023 0304 	bic.w	r3, r3, #4
 800b4b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	4a1d      	ldr	r2, [pc, #116]	@ (800b52c <TIM_OC1_SetConfig+0x11c>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d013      	beq.n	800b4e2 <TIM_OC1_SetConfig+0xd2>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4a1c      	ldr	r2, [pc, #112]	@ (800b530 <TIM_OC1_SetConfig+0x120>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d00f      	beq.n	800b4e2 <TIM_OC1_SetConfig+0xd2>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	4a1b      	ldr	r2, [pc, #108]	@ (800b534 <TIM_OC1_SetConfig+0x124>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d00b      	beq.n	800b4e2 <TIM_OC1_SetConfig+0xd2>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	4a1a      	ldr	r2, [pc, #104]	@ (800b538 <TIM_OC1_SetConfig+0x128>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d007      	beq.n	800b4e2 <TIM_OC1_SetConfig+0xd2>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	4a19      	ldr	r2, [pc, #100]	@ (800b53c <TIM_OC1_SetConfig+0x12c>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d003      	beq.n	800b4e2 <TIM_OC1_SetConfig+0xd2>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	4a18      	ldr	r2, [pc, #96]	@ (800b540 <TIM_OC1_SetConfig+0x130>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d111      	bne.n	800b506 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b4e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b4f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	695b      	ldr	r3, [r3, #20]
 800b4f6:	693a      	ldr	r2, [r7, #16]
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	699b      	ldr	r3, [r3, #24]
 800b500:	693a      	ldr	r2, [r7, #16]
 800b502:	4313      	orrs	r3, r2
 800b504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	693a      	ldr	r2, [r7, #16]
 800b50a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	68fa      	ldr	r2, [r7, #12]
 800b510:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	685a      	ldr	r2, [r3, #4]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	697a      	ldr	r2, [r7, #20]
 800b51e:	621a      	str	r2, [r3, #32]
}
 800b520:	bf00      	nop
 800b522:	371c      	adds	r7, #28
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr
 800b52c:	40012c00 	.word	0x40012c00
 800b530:	40013400 	.word	0x40013400
 800b534:	40014000 	.word	0x40014000
 800b538:	40014400 	.word	0x40014400
 800b53c:	40014800 	.word	0x40014800
 800b540:	40015000 	.word	0x40015000

0800b544 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b544:	b480      	push	{r7}
 800b546:	b087      	sub	sp, #28
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6a1b      	ldr	r3, [r3, #32]
 800b552:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6a1b      	ldr	r3, [r3, #32]
 800b558:	f023 0210 	bic.w	r2, r3, #16
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	699b      	ldr	r3, [r3, #24]
 800b56a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b572:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b57e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	021b      	lsls	r3, r3, #8
 800b586:	68fa      	ldr	r2, [r7, #12]
 800b588:	4313      	orrs	r3, r2
 800b58a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	f023 0320 	bic.w	r3, r3, #32
 800b592:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	689b      	ldr	r3, [r3, #8]
 800b598:	011b      	lsls	r3, r3, #4
 800b59a:	697a      	ldr	r2, [r7, #20]
 800b59c:	4313      	orrs	r3, r2
 800b59e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	4a2c      	ldr	r2, [pc, #176]	@ (800b654 <TIM_OC2_SetConfig+0x110>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d007      	beq.n	800b5b8 <TIM_OC2_SetConfig+0x74>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	4a2b      	ldr	r2, [pc, #172]	@ (800b658 <TIM_OC2_SetConfig+0x114>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d003      	beq.n	800b5b8 <TIM_OC2_SetConfig+0x74>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	4a2a      	ldr	r2, [pc, #168]	@ (800b65c <TIM_OC2_SetConfig+0x118>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d10d      	bne.n	800b5d4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b5be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	011b      	lsls	r3, r3, #4
 800b5c6:	697a      	ldr	r2, [r7, #20]
 800b5c8:	4313      	orrs	r3, r2
 800b5ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b5d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	4a1f      	ldr	r2, [pc, #124]	@ (800b654 <TIM_OC2_SetConfig+0x110>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d013      	beq.n	800b604 <TIM_OC2_SetConfig+0xc0>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	4a1e      	ldr	r2, [pc, #120]	@ (800b658 <TIM_OC2_SetConfig+0x114>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d00f      	beq.n	800b604 <TIM_OC2_SetConfig+0xc0>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	4a1e      	ldr	r2, [pc, #120]	@ (800b660 <TIM_OC2_SetConfig+0x11c>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d00b      	beq.n	800b604 <TIM_OC2_SetConfig+0xc0>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	4a1d      	ldr	r2, [pc, #116]	@ (800b664 <TIM_OC2_SetConfig+0x120>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d007      	beq.n	800b604 <TIM_OC2_SetConfig+0xc0>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	4a1c      	ldr	r2, [pc, #112]	@ (800b668 <TIM_OC2_SetConfig+0x124>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d003      	beq.n	800b604 <TIM_OC2_SetConfig+0xc0>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	4a17      	ldr	r2, [pc, #92]	@ (800b65c <TIM_OC2_SetConfig+0x118>)
 800b600:	4293      	cmp	r3, r2
 800b602:	d113      	bne.n	800b62c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b60a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b612:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	695b      	ldr	r3, [r3, #20]
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	693a      	ldr	r2, [r7, #16]
 800b61c:	4313      	orrs	r3, r2
 800b61e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	699b      	ldr	r3, [r3, #24]
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	693a      	ldr	r2, [r7, #16]
 800b628:	4313      	orrs	r3, r2
 800b62a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	693a      	ldr	r2, [r7, #16]
 800b630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	68fa      	ldr	r2, [r7, #12]
 800b636:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	685a      	ldr	r2, [r3, #4]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	697a      	ldr	r2, [r7, #20]
 800b644:	621a      	str	r2, [r3, #32]
}
 800b646:	bf00      	nop
 800b648:	371c      	adds	r7, #28
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr
 800b652:	bf00      	nop
 800b654:	40012c00 	.word	0x40012c00
 800b658:	40013400 	.word	0x40013400
 800b65c:	40015000 	.word	0x40015000
 800b660:	40014000 	.word	0x40014000
 800b664:	40014400 	.word	0x40014400
 800b668:	40014800 	.word	0x40014800

0800b66c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b087      	sub	sp, #28
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6a1b      	ldr	r3, [r3, #32]
 800b67a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6a1b      	ldr	r3, [r3, #32]
 800b680:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	69db      	ldr	r3, [r3, #28]
 800b692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b69a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b69e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f023 0303 	bic.w	r3, r3, #3
 800b6a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	68fa      	ldr	r2, [r7, #12]
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b6b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	021b      	lsls	r3, r3, #8
 800b6c0:	697a      	ldr	r2, [r7, #20]
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	4a2b      	ldr	r2, [pc, #172]	@ (800b778 <TIM_OC3_SetConfig+0x10c>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d007      	beq.n	800b6de <TIM_OC3_SetConfig+0x72>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	4a2a      	ldr	r2, [pc, #168]	@ (800b77c <TIM_OC3_SetConfig+0x110>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d003      	beq.n	800b6de <TIM_OC3_SetConfig+0x72>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	4a29      	ldr	r2, [pc, #164]	@ (800b780 <TIM_OC3_SetConfig+0x114>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d10d      	bne.n	800b6fa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b6e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	68db      	ldr	r3, [r3, #12]
 800b6ea:	021b      	lsls	r3, r3, #8
 800b6ec:	697a      	ldr	r2, [r7, #20]
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b6f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	4a1e      	ldr	r2, [pc, #120]	@ (800b778 <TIM_OC3_SetConfig+0x10c>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d013      	beq.n	800b72a <TIM_OC3_SetConfig+0xbe>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	4a1d      	ldr	r2, [pc, #116]	@ (800b77c <TIM_OC3_SetConfig+0x110>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d00f      	beq.n	800b72a <TIM_OC3_SetConfig+0xbe>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	4a1d      	ldr	r2, [pc, #116]	@ (800b784 <TIM_OC3_SetConfig+0x118>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d00b      	beq.n	800b72a <TIM_OC3_SetConfig+0xbe>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	4a1c      	ldr	r2, [pc, #112]	@ (800b788 <TIM_OC3_SetConfig+0x11c>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d007      	beq.n	800b72a <TIM_OC3_SetConfig+0xbe>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4a1b      	ldr	r2, [pc, #108]	@ (800b78c <TIM_OC3_SetConfig+0x120>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d003      	beq.n	800b72a <TIM_OC3_SetConfig+0xbe>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	4a16      	ldr	r2, [pc, #88]	@ (800b780 <TIM_OC3_SetConfig+0x114>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d113      	bne.n	800b752 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	695b      	ldr	r3, [r3, #20]
 800b73e:	011b      	lsls	r3, r3, #4
 800b740:	693a      	ldr	r2, [r7, #16]
 800b742:	4313      	orrs	r3, r2
 800b744:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	699b      	ldr	r3, [r3, #24]
 800b74a:	011b      	lsls	r3, r3, #4
 800b74c:	693a      	ldr	r2, [r7, #16]
 800b74e:	4313      	orrs	r3, r2
 800b750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	693a      	ldr	r2, [r7, #16]
 800b756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	68fa      	ldr	r2, [r7, #12]
 800b75c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	685a      	ldr	r2, [r3, #4]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	697a      	ldr	r2, [r7, #20]
 800b76a:	621a      	str	r2, [r3, #32]
}
 800b76c:	bf00      	nop
 800b76e:	371c      	adds	r7, #28
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr
 800b778:	40012c00 	.word	0x40012c00
 800b77c:	40013400 	.word	0x40013400
 800b780:	40015000 	.word	0x40015000
 800b784:	40014000 	.word	0x40014000
 800b788:	40014400 	.word	0x40014400
 800b78c:	40014800 	.word	0x40014800

0800b790 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b790:	b480      	push	{r7}
 800b792:	b087      	sub	sp, #28
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6a1b      	ldr	r3, [r3, #32]
 800b79e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6a1b      	ldr	r3, [r3, #32]
 800b7a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	685b      	ldr	r3, [r3, #4]
 800b7b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	69db      	ldr	r3, [r3, #28]
 800b7b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b7be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b7c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b7ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	021b      	lsls	r3, r3, #8
 800b7d2:	68fa      	ldr	r2, [r7, #12]
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b7de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	689b      	ldr	r3, [r3, #8]
 800b7e4:	031b      	lsls	r3, r3, #12
 800b7e6:	697a      	ldr	r2, [r7, #20]
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	4a2c      	ldr	r2, [pc, #176]	@ (800b8a0 <TIM_OC4_SetConfig+0x110>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d007      	beq.n	800b804 <TIM_OC4_SetConfig+0x74>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	4a2b      	ldr	r2, [pc, #172]	@ (800b8a4 <TIM_OC4_SetConfig+0x114>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d003      	beq.n	800b804 <TIM_OC4_SetConfig+0x74>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	4a2a      	ldr	r2, [pc, #168]	@ (800b8a8 <TIM_OC4_SetConfig+0x118>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d10d      	bne.n	800b820 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b80a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	68db      	ldr	r3, [r3, #12]
 800b810:	031b      	lsls	r3, r3, #12
 800b812:	697a      	ldr	r2, [r7, #20]
 800b814:	4313      	orrs	r3, r2
 800b816:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b81e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	4a1f      	ldr	r2, [pc, #124]	@ (800b8a0 <TIM_OC4_SetConfig+0x110>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d013      	beq.n	800b850 <TIM_OC4_SetConfig+0xc0>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	4a1e      	ldr	r2, [pc, #120]	@ (800b8a4 <TIM_OC4_SetConfig+0x114>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d00f      	beq.n	800b850 <TIM_OC4_SetConfig+0xc0>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	4a1e      	ldr	r2, [pc, #120]	@ (800b8ac <TIM_OC4_SetConfig+0x11c>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d00b      	beq.n	800b850 <TIM_OC4_SetConfig+0xc0>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	4a1d      	ldr	r2, [pc, #116]	@ (800b8b0 <TIM_OC4_SetConfig+0x120>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d007      	beq.n	800b850 <TIM_OC4_SetConfig+0xc0>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	4a1c      	ldr	r2, [pc, #112]	@ (800b8b4 <TIM_OC4_SetConfig+0x124>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d003      	beq.n	800b850 <TIM_OC4_SetConfig+0xc0>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	4a17      	ldr	r2, [pc, #92]	@ (800b8a8 <TIM_OC4_SetConfig+0x118>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d113      	bne.n	800b878 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b856:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b85e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	695b      	ldr	r3, [r3, #20]
 800b864:	019b      	lsls	r3, r3, #6
 800b866:	693a      	ldr	r2, [r7, #16]
 800b868:	4313      	orrs	r3, r2
 800b86a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	699b      	ldr	r3, [r3, #24]
 800b870:	019b      	lsls	r3, r3, #6
 800b872:	693a      	ldr	r2, [r7, #16]
 800b874:	4313      	orrs	r3, r2
 800b876:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	693a      	ldr	r2, [r7, #16]
 800b87c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	685a      	ldr	r2, [r3, #4]
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	697a      	ldr	r2, [r7, #20]
 800b890:	621a      	str	r2, [r3, #32]
}
 800b892:	bf00      	nop
 800b894:	371c      	adds	r7, #28
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr
 800b89e:	bf00      	nop
 800b8a0:	40012c00 	.word	0x40012c00
 800b8a4:	40013400 	.word	0x40013400
 800b8a8:	40015000 	.word	0x40015000
 800b8ac:	40014000 	.word	0x40014000
 800b8b0:	40014400 	.word	0x40014400
 800b8b4:	40014800 	.word	0x40014800

0800b8b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b087      	sub	sp, #28
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6a1b      	ldr	r3, [r3, #32]
 800b8c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6a1b      	ldr	r3, [r3, #32]
 800b8cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b8e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	68fa      	ldr	r2, [r7, #12]
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b8fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	689b      	ldr	r3, [r3, #8]
 800b902:	041b      	lsls	r3, r3, #16
 800b904:	693a      	ldr	r2, [r7, #16]
 800b906:	4313      	orrs	r3, r2
 800b908:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	4a19      	ldr	r2, [pc, #100]	@ (800b974 <TIM_OC5_SetConfig+0xbc>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d013      	beq.n	800b93a <TIM_OC5_SetConfig+0x82>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	4a18      	ldr	r2, [pc, #96]	@ (800b978 <TIM_OC5_SetConfig+0xc0>)
 800b916:	4293      	cmp	r3, r2
 800b918:	d00f      	beq.n	800b93a <TIM_OC5_SetConfig+0x82>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	4a17      	ldr	r2, [pc, #92]	@ (800b97c <TIM_OC5_SetConfig+0xc4>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d00b      	beq.n	800b93a <TIM_OC5_SetConfig+0x82>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	4a16      	ldr	r2, [pc, #88]	@ (800b980 <TIM_OC5_SetConfig+0xc8>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d007      	beq.n	800b93a <TIM_OC5_SetConfig+0x82>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	4a15      	ldr	r2, [pc, #84]	@ (800b984 <TIM_OC5_SetConfig+0xcc>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d003      	beq.n	800b93a <TIM_OC5_SetConfig+0x82>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	4a14      	ldr	r2, [pc, #80]	@ (800b988 <TIM_OC5_SetConfig+0xd0>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d109      	bne.n	800b94e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b940:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	695b      	ldr	r3, [r3, #20]
 800b946:	021b      	lsls	r3, r3, #8
 800b948:	697a      	ldr	r2, [r7, #20]
 800b94a:	4313      	orrs	r3, r2
 800b94c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	697a      	ldr	r2, [r7, #20]
 800b952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	68fa      	ldr	r2, [r7, #12]
 800b958:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	685a      	ldr	r2, [r3, #4]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	693a      	ldr	r2, [r7, #16]
 800b966:	621a      	str	r2, [r3, #32]
}
 800b968:	bf00      	nop
 800b96a:	371c      	adds	r7, #28
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr
 800b974:	40012c00 	.word	0x40012c00
 800b978:	40013400 	.word	0x40013400
 800b97c:	40014000 	.word	0x40014000
 800b980:	40014400 	.word	0x40014400
 800b984:	40014800 	.word	0x40014800
 800b988:	40015000 	.word	0x40015000

0800b98c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b087      	sub	sp, #28
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6a1b      	ldr	r3, [r3, #32]
 800b99a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6a1b      	ldr	r3, [r3, #32]
 800b9a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b9ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b9be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	021b      	lsls	r3, r3, #8
 800b9c6:	68fa      	ldr	r2, [r7, #12]
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b9d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	689b      	ldr	r3, [r3, #8]
 800b9d8:	051b      	lsls	r3, r3, #20
 800b9da:	693a      	ldr	r2, [r7, #16]
 800b9dc:	4313      	orrs	r3, r2
 800b9de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	4a1a      	ldr	r2, [pc, #104]	@ (800ba4c <TIM_OC6_SetConfig+0xc0>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d013      	beq.n	800ba10 <TIM_OC6_SetConfig+0x84>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	4a19      	ldr	r2, [pc, #100]	@ (800ba50 <TIM_OC6_SetConfig+0xc4>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d00f      	beq.n	800ba10 <TIM_OC6_SetConfig+0x84>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	4a18      	ldr	r2, [pc, #96]	@ (800ba54 <TIM_OC6_SetConfig+0xc8>)
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d00b      	beq.n	800ba10 <TIM_OC6_SetConfig+0x84>
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	4a17      	ldr	r2, [pc, #92]	@ (800ba58 <TIM_OC6_SetConfig+0xcc>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d007      	beq.n	800ba10 <TIM_OC6_SetConfig+0x84>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	4a16      	ldr	r2, [pc, #88]	@ (800ba5c <TIM_OC6_SetConfig+0xd0>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d003      	beq.n	800ba10 <TIM_OC6_SetConfig+0x84>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	4a15      	ldr	r2, [pc, #84]	@ (800ba60 <TIM_OC6_SetConfig+0xd4>)
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d109      	bne.n	800ba24 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ba16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	695b      	ldr	r3, [r3, #20]
 800ba1c:	029b      	lsls	r3, r3, #10
 800ba1e:	697a      	ldr	r2, [r7, #20]
 800ba20:	4313      	orrs	r3, r2
 800ba22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	697a      	ldr	r2, [r7, #20]
 800ba28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	68fa      	ldr	r2, [r7, #12]
 800ba2e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	685a      	ldr	r2, [r3, #4]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	693a      	ldr	r2, [r7, #16]
 800ba3c:	621a      	str	r2, [r3, #32]
}
 800ba3e:	bf00      	nop
 800ba40:	371c      	adds	r7, #28
 800ba42:	46bd      	mov	sp, r7
 800ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba48:	4770      	bx	lr
 800ba4a:	bf00      	nop
 800ba4c:	40012c00 	.word	0x40012c00
 800ba50:	40013400 	.word	0x40013400
 800ba54:	40014000 	.word	0x40014000
 800ba58:	40014400 	.word	0x40014400
 800ba5c:	40014800 	.word	0x40014800
 800ba60:	40015000 	.word	0x40015000

0800ba64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba64:	b480      	push	{r7}
 800ba66:	b087      	sub	sp, #28
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	60f8      	str	r0, [r7, #12]
 800ba6c:	60b9      	str	r1, [r7, #8]
 800ba6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	6a1b      	ldr	r3, [r3, #32]
 800ba74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	6a1b      	ldr	r3, [r3, #32]
 800ba7a:	f023 0201 	bic.w	r2, r3, #1
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	699b      	ldr	r3, [r3, #24]
 800ba86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ba8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	011b      	lsls	r3, r3, #4
 800ba94:	693a      	ldr	r2, [r7, #16]
 800ba96:	4313      	orrs	r3, r2
 800ba98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	f023 030a 	bic.w	r3, r3, #10
 800baa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800baa2:	697a      	ldr	r2, [r7, #20]
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	4313      	orrs	r3, r2
 800baa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	693a      	ldr	r2, [r7, #16]
 800baae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	697a      	ldr	r2, [r7, #20]
 800bab4:	621a      	str	r2, [r3, #32]
}
 800bab6:	bf00      	nop
 800bab8:	371c      	adds	r7, #28
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr

0800bac2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bac2:	b480      	push	{r7}
 800bac4:	b087      	sub	sp, #28
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	60f8      	str	r0, [r7, #12]
 800baca:	60b9      	str	r1, [r7, #8]
 800bacc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	6a1b      	ldr	r3, [r3, #32]
 800bad2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	6a1b      	ldr	r3, [r3, #32]
 800bad8:	f023 0210 	bic.w	r2, r3, #16
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	699b      	ldr	r3, [r3, #24]
 800bae4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800baec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	031b      	lsls	r3, r3, #12
 800baf2:	693a      	ldr	r2, [r7, #16]
 800baf4:	4313      	orrs	r3, r2
 800baf6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bafe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	011b      	lsls	r3, r3, #4
 800bb04:	697a      	ldr	r2, [r7, #20]
 800bb06:	4313      	orrs	r3, r2
 800bb08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	693a      	ldr	r2, [r7, #16]
 800bb0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	697a      	ldr	r2, [r7, #20]
 800bb14:	621a      	str	r2, [r3, #32]
}
 800bb16:	bf00      	nop
 800bb18:	371c      	adds	r7, #28
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr

0800bb22 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bb22:	b480      	push	{r7}
 800bb24:	b085      	sub	sp, #20
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
 800bb2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	689b      	ldr	r3, [r3, #8]
 800bb30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800bb38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bb3e:	683a      	ldr	r2, [r7, #0]
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	4313      	orrs	r3, r2
 800bb44:	f043 0307 	orr.w	r3, r3, #7
 800bb48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	68fa      	ldr	r2, [r7, #12]
 800bb4e:	609a      	str	r2, [r3, #8]
}
 800bb50:	bf00      	nop
 800bb52:	3714      	adds	r7, #20
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b087      	sub	sp, #28
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	60f8      	str	r0, [r7, #12]
 800bb64:	60b9      	str	r1, [r7, #8]
 800bb66:	607a      	str	r2, [r7, #4]
 800bb68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	689b      	ldr	r3, [r3, #8]
 800bb6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bb76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	021a      	lsls	r2, r3, #8
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	431a      	orrs	r2, r3
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	4313      	orrs	r3, r2
 800bb84:	697a      	ldr	r2, [r7, #20]
 800bb86:	4313      	orrs	r3, r2
 800bb88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	697a      	ldr	r2, [r7, #20]
 800bb8e:	609a      	str	r2, [r3, #8]
}
 800bb90:	bf00      	nop
 800bb92:	371c      	adds	r7, #28
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr

0800bb9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b087      	sub	sp, #28
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	60f8      	str	r0, [r7, #12]
 800bba4:	60b9      	str	r1, [r7, #8]
 800bba6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	f003 031f 	and.w	r3, r3, #31
 800bbae:	2201      	movs	r2, #1
 800bbb0:	fa02 f303 	lsl.w	r3, r2, r3
 800bbb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	6a1a      	ldr	r2, [r3, #32]
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	43db      	mvns	r3, r3
 800bbbe:	401a      	ands	r2, r3
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	6a1a      	ldr	r2, [r3, #32]
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	f003 031f 	and.w	r3, r3, #31
 800bbce:	6879      	ldr	r1, [r7, #4]
 800bbd0:	fa01 f303 	lsl.w	r3, r1, r3
 800bbd4:	431a      	orrs	r2, r3
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	621a      	str	r2, [r3, #32]
}
 800bbda:	bf00      	nop
 800bbdc:	371c      	adds	r7, #28
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe4:	4770      	bx	lr
	...

0800bbe8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	4a26      	ldr	r2, [pc, #152]	@ (800bc8c <TIM_ResetCallback+0xa4>)
 800bbf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	4a25      	ldr	r2, [pc, #148]	@ (800bc90 <TIM_ResetCallback+0xa8>)
 800bbfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	4a24      	ldr	r2, [pc, #144]	@ (800bc94 <TIM_ResetCallback+0xac>)
 800bc04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	4a23      	ldr	r2, [pc, #140]	@ (800bc98 <TIM_ResetCallback+0xb0>)
 800bc0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	4a22      	ldr	r2, [pc, #136]	@ (800bc9c <TIM_ResetCallback+0xb4>)
 800bc14:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	4a21      	ldr	r2, [pc, #132]	@ (800bca0 <TIM_ResetCallback+0xb8>)
 800bc1c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	4a20      	ldr	r2, [pc, #128]	@ (800bca4 <TIM_ResetCallback+0xbc>)
 800bc24:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	4a1f      	ldr	r2, [pc, #124]	@ (800bca8 <TIM_ResetCallback+0xc0>)
 800bc2c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	4a1e      	ldr	r2, [pc, #120]	@ (800bcac <TIM_ResetCallback+0xc4>)
 800bc34:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	4a1d      	ldr	r2, [pc, #116]	@ (800bcb0 <TIM_ResetCallback+0xc8>)
 800bc3c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	4a1c      	ldr	r2, [pc, #112]	@ (800bcb4 <TIM_ResetCallback+0xcc>)
 800bc44:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	4a1b      	ldr	r2, [pc, #108]	@ (800bcb8 <TIM_ResetCallback+0xd0>)
 800bc4c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	4a1a      	ldr	r2, [pc, #104]	@ (800bcbc <TIM_ResetCallback+0xd4>)
 800bc54:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	4a19      	ldr	r2, [pc, #100]	@ (800bcc0 <TIM_ResetCallback+0xd8>)
 800bc5c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	4a18      	ldr	r2, [pc, #96]	@ (800bcc4 <TIM_ResetCallback+0xdc>)
 800bc64:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	4a17      	ldr	r2, [pc, #92]	@ (800bcc8 <TIM_ResetCallback+0xe0>)
 800bc6c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	4a16      	ldr	r2, [pc, #88]	@ (800bccc <TIM_ResetCallback+0xe4>)
 800bc74:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	4a15      	ldr	r2, [pc, #84]	@ (800bcd0 <TIM_ResetCallback+0xe8>)
 800bc7c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800bc80:	bf00      	nop
 800bc82:	370c      	adds	r7, #12
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr
 800bc8c:	08004891 	.word	0x08004891
 800bc90:	0800af35 	.word	0x0800af35
 800bc94:	0800afad 	.word	0x0800afad
 800bc98:	0800afc1 	.word	0x0800afc1
 800bc9c:	0800af5d 	.word	0x0800af5d
 800bca0:	0800af71 	.word	0x0800af71
 800bca4:	0800af49 	.word	0x0800af49
 800bca8:	0800af85 	.word	0x0800af85
 800bcac:	0800af99 	.word	0x0800af99
 800bcb0:	0800afd5 	.word	0x0800afd5
 800bcb4:	0800bf29 	.word	0x0800bf29
 800bcb8:	0800bf3d 	.word	0x0800bf3d
 800bcbc:	0800bf51 	.word	0x0800bf51
 800bcc0:	0800bf65 	.word	0x0800bf65
 800bcc4:	0800bf79 	.word	0x0800bf79
 800bcc8:	0800bf8d 	.word	0x0800bf8d
 800bccc:	0800bfa1 	.word	0x0800bfa1
 800bcd0:	0800bfb5 	.word	0x0800bfb5

0800bcd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b085      	sub	sp, #20
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bce4:	2b01      	cmp	r3, #1
 800bce6:	d101      	bne.n	800bcec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bce8:	2302      	movs	r3, #2
 800bcea:	e074      	b.n	800bdd6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2201      	movs	r2, #1
 800bcf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2202      	movs	r2, #2
 800bcf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	685b      	ldr	r3, [r3, #4]
 800bd02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	689b      	ldr	r3, [r3, #8]
 800bd0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4a34      	ldr	r2, [pc, #208]	@ (800bde4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d009      	beq.n	800bd2a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4a33      	ldr	r2, [pc, #204]	@ (800bde8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d004      	beq.n	800bd2a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4a31      	ldr	r2, [pc, #196]	@ (800bdec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d108      	bne.n	800bd3c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bd30:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	68fa      	ldr	r2, [r7, #12]
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800bd42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	68fa      	ldr	r2, [r7, #12]
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	68fa      	ldr	r2, [r7, #12]
 800bd58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	4a21      	ldr	r2, [pc, #132]	@ (800bde4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d022      	beq.n	800bdaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd6c:	d01d      	beq.n	800bdaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4a1f      	ldr	r2, [pc, #124]	@ (800bdf0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d018      	beq.n	800bdaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4a1d      	ldr	r2, [pc, #116]	@ (800bdf4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d013      	beq.n	800bdaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	4a1c      	ldr	r2, [pc, #112]	@ (800bdf8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d00e      	beq.n	800bdaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4a15      	ldr	r2, [pc, #84]	@ (800bde8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d009      	beq.n	800bdaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	4a18      	ldr	r2, [pc, #96]	@ (800bdfc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d004      	beq.n	800bdaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	4a11      	ldr	r2, [pc, #68]	@ (800bdec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d10c      	bne.n	800bdc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bdb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	689b      	ldr	r3, [r3, #8]
 800bdb6:	68ba      	ldr	r2, [r7, #8]
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	68ba      	ldr	r2, [r7, #8]
 800bdc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bdd4:	2300      	movs	r3, #0
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3714      	adds	r7, #20
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr
 800bde2:	bf00      	nop
 800bde4:	40012c00 	.word	0x40012c00
 800bde8:	40013400 	.word	0x40013400
 800bdec:	40015000 	.word	0x40015000
 800bdf0:	40000400 	.word	0x40000400
 800bdf4:	40000800 	.word	0x40000800
 800bdf8:	40000c00 	.word	0x40000c00
 800bdfc:	40014000 	.word	0x40014000

0800be00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800be00:	b480      	push	{r7}
 800be02:	b085      	sub	sp, #20
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800be0a:	2300      	movs	r3, #0
 800be0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800be14:	2b01      	cmp	r3, #1
 800be16:	d101      	bne.n	800be1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800be18:	2302      	movs	r3, #2
 800be1a:	e078      	b.n	800bf0e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2201      	movs	r2, #1
 800be20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	68db      	ldr	r3, [r3, #12]
 800be2e:	4313      	orrs	r3, r2
 800be30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	689b      	ldr	r3, [r3, #8]
 800be3c:	4313      	orrs	r3, r2
 800be3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	4313      	orrs	r3, r2
 800be4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	4313      	orrs	r3, r2
 800be5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	691b      	ldr	r3, [r3, #16]
 800be66:	4313      	orrs	r3, r2
 800be68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	695b      	ldr	r3, [r3, #20]
 800be74:	4313      	orrs	r3, r2
 800be76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be82:	4313      	orrs	r3, r2
 800be84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	699b      	ldr	r3, [r3, #24]
 800be90:	041b      	lsls	r3, r3, #16
 800be92:	4313      	orrs	r3, r2
 800be94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	69db      	ldr	r3, [r3, #28]
 800bea0:	4313      	orrs	r3, r2
 800bea2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	4a1c      	ldr	r2, [pc, #112]	@ (800bf1c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d009      	beq.n	800bec2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	4a1b      	ldr	r2, [pc, #108]	@ (800bf20 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d004      	beq.n	800bec2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a19      	ldr	r2, [pc, #100]	@ (800bf24 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d11c      	bne.n	800befc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800becc:	051b      	lsls	r3, r3, #20
 800bece:	4313      	orrs	r3, r2
 800bed0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	6a1b      	ldr	r3, [r3, #32]
 800bedc:	4313      	orrs	r3, r2
 800bede:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beea:	4313      	orrs	r3, r2
 800beec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bef8:	4313      	orrs	r3, r2
 800befa:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	68fa      	ldr	r2, [r7, #12]
 800bf02:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2200      	movs	r2, #0
 800bf08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bf0c:	2300      	movs	r3, #0
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3714      	adds	r7, #20
 800bf12:	46bd      	mov	sp, r7
 800bf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf18:	4770      	bx	lr
 800bf1a:	bf00      	nop
 800bf1c:	40012c00 	.word	0x40012c00
 800bf20:	40013400 	.word	0x40013400
 800bf24:	40015000 	.word	0x40015000

0800bf28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b083      	sub	sp, #12
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bf30:	bf00      	nop
 800bf32:	370c      	adds	r7, #12
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr

0800bf3c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b083      	sub	sp, #12
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800bf44:	bf00      	nop
 800bf46:	370c      	adds	r7, #12
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr

0800bf50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b083      	sub	sp, #12
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bf58:	bf00      	nop
 800bf5a:	370c      	adds	r7, #12
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf62:	4770      	bx	lr

0800bf64 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bf64:	b480      	push	{r7}
 800bf66:	b083      	sub	sp, #12
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bf6c:	bf00      	nop
 800bf6e:	370c      	adds	r7, #12
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr

0800bf78 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b083      	sub	sp, #12
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800bf80:	bf00      	nop
 800bf82:	370c      	adds	r7, #12
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr

0800bf8c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b083      	sub	sp, #12
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800bf94:	bf00      	nop
 800bf96:	370c      	adds	r7, #12
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr

0800bfa0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b083      	sub	sp, #12
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800bfa8:	bf00      	nop
 800bfaa:	370c      	adds	r7, #12
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr

0800bfb4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b083      	sub	sp, #12
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800bfbc:	bf00      	nop
 800bfbe:	370c      	adds	r7, #12
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d101      	bne.n	800bfda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	e050      	b.n	800c07c <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d114      	bne.n	800c00e <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 fdc5 	bl	800cb7c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d103      	bne.n	800c004 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	4a21      	ldr	r2, [pc, #132]	@ (800c084 <HAL_UART_Init+0xbc>)
 800c000:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2224      	movs	r2, #36	@ 0x24
 800c012:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	681a      	ldr	r2, [r3, #0]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f022 0201 	bic.w	r2, r2, #1
 800c024:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d002      	beq.n	800c034 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f001 f8f2 	bl	800d218 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 fdf3 	bl	800cc20 <UART_SetConfig>
 800c03a:	4603      	mov	r3, r0
 800c03c:	2b01      	cmp	r3, #1
 800c03e:	d101      	bne.n	800c044 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800c040:	2301      	movs	r3, #1
 800c042:	e01b      	b.n	800c07c <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	685a      	ldr	r2, [r3, #4]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c052:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	689a      	ldr	r2, [r3, #8]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c062:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f042 0201 	orr.w	r2, r2, #1
 800c072:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f001 f971 	bl	800d35c <UART_CheckIdleState>
 800c07a:	4603      	mov	r3, r0
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3708      	adds	r7, #8
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}
 800c084:	08005fcd 	.word	0x08005fcd

0800c088 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800c088:	b480      	push	{r7}
 800c08a:	b087      	sub	sp, #28
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	60f8      	str	r0, [r7, #12]
 800c090:	460b      	mov	r3, r1
 800c092:	607a      	str	r2, [r7, #4]
 800c094:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800c096:	2300      	movs	r3, #0
 800c098:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d109      	bne.n	800c0b4 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	e09c      	b.n	800c1ee <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c0ba:	2b20      	cmp	r3, #32
 800c0bc:	d16c      	bne.n	800c198 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800c0be:	7afb      	ldrb	r3, [r7, #11]
 800c0c0:	2b0c      	cmp	r3, #12
 800c0c2:	d85e      	bhi.n	800c182 <HAL_UART_RegisterCallback+0xfa>
 800c0c4:	a201      	add	r2, pc, #4	@ (adr r2, 800c0cc <HAL_UART_RegisterCallback+0x44>)
 800c0c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ca:	bf00      	nop
 800c0cc:	0800c101 	.word	0x0800c101
 800c0d0:	0800c10b 	.word	0x0800c10b
 800c0d4:	0800c115 	.word	0x0800c115
 800c0d8:	0800c11f 	.word	0x0800c11f
 800c0dc:	0800c129 	.word	0x0800c129
 800c0e0:	0800c133 	.word	0x0800c133
 800c0e4:	0800c13d 	.word	0x0800c13d
 800c0e8:	0800c147 	.word	0x0800c147
 800c0ec:	0800c151 	.word	0x0800c151
 800c0f0:	0800c15b 	.word	0x0800c15b
 800c0f4:	0800c165 	.word	0x0800c165
 800c0f8:	0800c16f 	.word	0x0800c16f
 800c0fc:	0800c179 	.word	0x0800c179
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	687a      	ldr	r2, [r7, #4]
 800c104:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800c108:	e070      	b.n	800c1ec <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	687a      	ldr	r2, [r7, #4]
 800c10e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800c112:	e06b      	b.n	800c1ec <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800c11c:	e066      	b.n	800c1ec <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	687a      	ldr	r2, [r7, #4]
 800c122:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800c126:	e061      	b.n	800c1ec <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800c130:	e05c      	b.n	800c1ec <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	687a      	ldr	r2, [r7, #4]
 800c136:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800c13a:	e057      	b.n	800c1ec <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	687a      	ldr	r2, [r7, #4]
 800c140:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800c144:	e052      	b.n	800c1ec <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	687a      	ldr	r2, [r7, #4]
 800c14a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800c14e:	e04d      	b.n	800c1ec <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	687a      	ldr	r2, [r7, #4]
 800c154:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800c158:	e048      	b.n	800c1ec <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	687a      	ldr	r2, [r7, #4]
 800c15e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800c162:	e043      	b.n	800c1ec <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	687a      	ldr	r2, [r7, #4]
 800c168:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800c16c:	e03e      	b.n	800c1ec <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	687a      	ldr	r2, [r7, #4]
 800c172:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800c176:	e039      	b.n	800c1ec <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800c180:	e034      	b.n	800c1ec <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c188:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800c192:	2301      	movs	r3, #1
 800c194:	75fb      	strb	r3, [r7, #23]
        break;
 800c196:	e029      	b.n	800c1ec <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d11a      	bne.n	800c1d8 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800c1a2:	7afb      	ldrb	r3, [r7, #11]
 800c1a4:	2b0b      	cmp	r3, #11
 800c1a6:	d002      	beq.n	800c1ae <HAL_UART_RegisterCallback+0x126>
 800c1a8:	2b0c      	cmp	r3, #12
 800c1aa:	d005      	beq.n	800c1b8 <HAL_UART_RegisterCallback+0x130>
 800c1ac:	e009      	b.n	800c1c2 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800c1b6:	e019      	b.n	800c1ec <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800c1c0:	e014      	b.n	800c1ec <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1c8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	75fb      	strb	r3, [r7, #23]
        break;
 800c1d6:	e009      	b.n	800c1ec <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c1ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	371c      	adds	r7, #28
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f8:	4770      	bx	lr
 800c1fa:	bf00      	nop

0800c1fc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b08a      	sub	sp, #40	@ 0x28
 800c200:	af00      	add	r7, sp, #0
 800c202:	60f8      	str	r0, [r7, #12]
 800c204:	60b9      	str	r1, [r7, #8]
 800c206:	4613      	mov	r3, r2
 800c208:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c210:	2b20      	cmp	r3, #32
 800c212:	d167      	bne.n	800c2e4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d002      	beq.n	800c220 <HAL_UART_Transmit_DMA+0x24>
 800c21a:	88fb      	ldrh	r3, [r7, #6]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d101      	bne.n	800c224 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c220:	2301      	movs	r3, #1
 800c222:	e060      	b.n	800c2e6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	68ba      	ldr	r2, [r7, #8]
 800c228:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	88fa      	ldrh	r2, [r7, #6]
 800c22e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	88fa      	ldrh	r2, [r7, #6]
 800c236:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	2200      	movs	r2, #0
 800c23e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	2221      	movs	r2, #33	@ 0x21
 800c246:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d028      	beq.n	800c2a4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c256:	4a26      	ldr	r2, [pc, #152]	@ (800c2f0 <HAL_UART_Transmit_DMA+0xf4>)
 800c258:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c25e:	4a25      	ldr	r2, [pc, #148]	@ (800c2f4 <HAL_UART_Transmit_DMA+0xf8>)
 800c260:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c266:	4a24      	ldr	r2, [pc, #144]	@ (800c2f8 <HAL_UART_Transmit_DMA+0xfc>)
 800c268:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c26e:	2200      	movs	r2, #0
 800c270:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c27a:	4619      	mov	r1, r3
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	3328      	adds	r3, #40	@ 0x28
 800c282:	461a      	mov	r2, r3
 800c284:	88fb      	ldrh	r3, [r7, #6]
 800c286:	f7fc f883 	bl	8008390 <HAL_DMA_Start_IT>
 800c28a:	4603      	mov	r3, r0
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d009      	beq.n	800c2a4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2210      	movs	r2, #16
 800c294:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2220      	movs	r2, #32
 800c29c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	e020      	b.n	800c2e6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2240      	movs	r2, #64	@ 0x40
 800c2aa:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	3308      	adds	r3, #8
 800c2b2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	e853 3f00 	ldrex	r3, [r3]
 800c2ba:	613b      	str	r3, [r7, #16]
   return(result);
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2c2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	3308      	adds	r3, #8
 800c2ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2cc:	623a      	str	r2, [r7, #32]
 800c2ce:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d0:	69f9      	ldr	r1, [r7, #28]
 800c2d2:	6a3a      	ldr	r2, [r7, #32]
 800c2d4:	e841 2300 	strex	r3, r2, [r1]
 800c2d8:	61bb      	str	r3, [r7, #24]
   return(result);
 800c2da:	69bb      	ldr	r3, [r7, #24]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d1e5      	bne.n	800c2ac <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	e000      	b.n	800c2e6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c2e4:	2302      	movs	r3, #2
  }
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3728      	adds	r7, #40	@ 0x28
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	bf00      	nop
 800c2f0:	0800d827 	.word	0x0800d827
 800c2f4:	0800d8c5 	.word	0x0800d8c5
 800c2f8:	0800da5f 	.word	0x0800da5f

0800c2fc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b08a      	sub	sp, #40	@ 0x28
 800c300:	af00      	add	r7, sp, #0
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	60b9      	str	r1, [r7, #8]
 800c306:	4613      	mov	r3, r2
 800c308:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c310:	2b20      	cmp	r3, #32
 800c312:	d137      	bne.n	800c384 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d002      	beq.n	800c320 <HAL_UART_Receive_DMA+0x24>
 800c31a:	88fb      	ldrh	r3, [r7, #6]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d101      	bne.n	800c324 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c320:	2301      	movs	r3, #1
 800c322:	e030      	b.n	800c386 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2200      	movs	r2, #0
 800c328:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	4a18      	ldr	r2, [pc, #96]	@ (800c390 <HAL_UART_Receive_DMA+0x94>)
 800c330:	4293      	cmp	r3, r2
 800c332:	d01f      	beq.n	800c374 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d018      	beq.n	800c374 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	e853 3f00 	ldrex	r3, [r3]
 800c34e:	613b      	str	r3, [r7, #16]
   return(result);
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c356:	627b      	str	r3, [r7, #36]	@ 0x24
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	461a      	mov	r2, r3
 800c35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c360:	623b      	str	r3, [r7, #32]
 800c362:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c364:	69f9      	ldr	r1, [r7, #28]
 800c366:	6a3a      	ldr	r2, [r7, #32]
 800c368:	e841 2300 	strex	r3, r2, [r1]
 800c36c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c36e:	69bb      	ldr	r3, [r7, #24]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d1e6      	bne.n	800c342 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c374:	88fb      	ldrh	r3, [r7, #6]
 800c376:	461a      	mov	r2, r3
 800c378:	68b9      	ldr	r1, [r7, #8]
 800c37a:	68f8      	ldr	r0, [r7, #12]
 800c37c:	f001 f906 	bl	800d58c <UART_Start_Receive_DMA>
 800c380:	4603      	mov	r3, r0
 800c382:	e000      	b.n	800c386 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c384:	2302      	movs	r3, #2
  }
}
 800c386:	4618      	mov	r0, r3
 800c388:	3728      	adds	r7, #40	@ 0x28
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop
 800c390:	40008000 	.word	0x40008000

0800c394 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b0ba      	sub	sp, #232	@ 0xe8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	69db      	ldr	r3, [r3, #28]
 800c3a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	689b      	ldr	r3, [r3, #8]
 800c3b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c3ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c3be:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c3c2:	4013      	ands	r3, r2
 800c3c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c3c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d11b      	bne.n	800c408 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c3d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3d4:	f003 0320 	and.w	r3, r3, #32
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d015      	beq.n	800c408 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c3dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c3e0:	f003 0320 	and.w	r3, r3, #32
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d105      	bne.n	800c3f4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c3e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c3ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d009      	beq.n	800c408 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	f000 82f3 	beq.w	800c9e4 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	4798      	blx	r3
      }
      return;
 800c406:	e2ed      	b.n	800c9e4 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c408:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	f000 8129 	beq.w	800c664 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c412:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c416:	4b90      	ldr	r3, [pc, #576]	@ (800c658 <HAL_UART_IRQHandler+0x2c4>)
 800c418:	4013      	ands	r3, r2
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d106      	bne.n	800c42c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c41e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c422:	4b8e      	ldr	r3, [pc, #568]	@ (800c65c <HAL_UART_IRQHandler+0x2c8>)
 800c424:	4013      	ands	r3, r2
 800c426:	2b00      	cmp	r3, #0
 800c428:	f000 811c 	beq.w	800c664 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c42c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c430:	f003 0301 	and.w	r3, r3, #1
 800c434:	2b00      	cmp	r3, #0
 800c436:	d011      	beq.n	800c45c <HAL_UART_IRQHandler+0xc8>
 800c438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c43c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c440:	2b00      	cmp	r3, #0
 800c442:	d00b      	beq.n	800c45c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	2201      	movs	r2, #1
 800c44a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c452:	f043 0201 	orr.w	r2, r3, #1
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c45c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c460:	f003 0302 	and.w	r3, r3, #2
 800c464:	2b00      	cmp	r3, #0
 800c466:	d011      	beq.n	800c48c <HAL_UART_IRQHandler+0xf8>
 800c468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c46c:	f003 0301 	and.w	r3, r3, #1
 800c470:	2b00      	cmp	r3, #0
 800c472:	d00b      	beq.n	800c48c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	2202      	movs	r2, #2
 800c47a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c482:	f043 0204 	orr.w	r2, r3, #4
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c48c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c490:	f003 0304 	and.w	r3, r3, #4
 800c494:	2b00      	cmp	r3, #0
 800c496:	d011      	beq.n	800c4bc <HAL_UART_IRQHandler+0x128>
 800c498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c49c:	f003 0301 	and.w	r3, r3, #1
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d00b      	beq.n	800c4bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	2204      	movs	r2, #4
 800c4aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4b2:	f043 0202 	orr.w	r2, r3, #2
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c4bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4c0:	f003 0308 	and.w	r3, r3, #8
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d017      	beq.n	800c4f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c4c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4cc:	f003 0320 	and.w	r3, r3, #32
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d105      	bne.n	800c4e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c4d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c4d8:	4b5f      	ldr	r3, [pc, #380]	@ (800c658 <HAL_UART_IRQHandler+0x2c4>)
 800c4da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d00b      	beq.n	800c4f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	2208      	movs	r2, #8
 800c4e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4ee:	f043 0208 	orr.w	r2, r3, #8
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c4f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c500:	2b00      	cmp	r3, #0
 800c502:	d012      	beq.n	800c52a <HAL_UART_IRQHandler+0x196>
 800c504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c508:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d00c      	beq.n	800c52a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c518:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c520:	f043 0220 	orr.w	r2, r3, #32
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c530:	2b00      	cmp	r3, #0
 800c532:	f000 8259 	beq.w	800c9e8 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c53a:	f003 0320 	and.w	r3, r3, #32
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d013      	beq.n	800c56a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c546:	f003 0320 	and.w	r3, r3, #32
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d105      	bne.n	800c55a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c54e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c556:	2b00      	cmp	r3, #0
 800c558:	d007      	beq.n	800c56a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d003      	beq.n	800c56a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c570:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	689b      	ldr	r3, [r3, #8]
 800c57a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c57e:	2b40      	cmp	r3, #64	@ 0x40
 800c580:	d005      	beq.n	800c58e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c586:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d058      	beq.n	800c640 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f001 f8e3 	bl	800d75a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	689b      	ldr	r3, [r3, #8]
 800c59a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c59e:	2b40      	cmp	r3, #64	@ 0x40
 800c5a0:	d148      	bne.n	800c634 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	3308      	adds	r3, #8
 800c5a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c5b0:	e853 3f00 	ldrex	r3, [r3]
 800c5b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c5b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c5bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	3308      	adds	r3, #8
 800c5ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c5ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c5d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c5da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c5de:	e841 2300 	strex	r3, r2, [r1]
 800c5e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c5e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d1d9      	bne.n	800c5a2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d017      	beq.n	800c628 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c5fe:	4a18      	ldr	r2, [pc, #96]	@ (800c660 <HAL_UART_IRQHandler+0x2cc>)
 800c600:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c608:	4618      	mov	r0, r3
 800c60a:	f7fb ff95 	bl	8008538 <HAL_DMA_Abort_IT>
 800c60e:	4603      	mov	r3, r0
 800c610:	2b00      	cmp	r3, #0
 800c612:	d01f      	beq.n	800c654 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c61a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c61c:	687a      	ldr	r2, [r7, #4]
 800c61e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c622:	4610      	mov	r0, r2
 800c624:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c626:	e015      	b.n	800c654 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c632:	e00f      	b.n	800c654 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c63e:	e009      	b.n	800c654 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2200      	movs	r2, #0
 800c64e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c652:	e1c9      	b.n	800c9e8 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c654:	bf00      	nop
    return;
 800c656:	e1c7      	b.n	800c9e8 <HAL_UART_IRQHandler+0x654>
 800c658:	10000001 	.word	0x10000001
 800c65c:	04000120 	.word	0x04000120
 800c660:	0800dae3 	.word	0x0800dae3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c668:	2b01      	cmp	r3, #1
 800c66a:	f040 8157 	bne.w	800c91c <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c66e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c672:	f003 0310 	and.w	r3, r3, #16
 800c676:	2b00      	cmp	r3, #0
 800c678:	f000 8150 	beq.w	800c91c <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c67c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c680:	f003 0310 	and.w	r3, r3, #16
 800c684:	2b00      	cmp	r3, #0
 800c686:	f000 8149 	beq.w	800c91c <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	2210      	movs	r2, #16
 800c690:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	689b      	ldr	r3, [r3, #8]
 800c698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c69c:	2b40      	cmp	r3, #64	@ 0x40
 800c69e:	f040 80bd 	bne.w	800c81c <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c6b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	f000 8199 	beq.w	800c9ec <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c6c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	f080 8191 	bcs.w	800c9ec <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c6d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f003 0320 	and.w	r3, r3, #32
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	f040 8087 	bne.w	800c7f6 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c6f4:	e853 3f00 	ldrex	r3, [r3]
 800c6f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c6fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c700:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c704:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	461a      	mov	r2, r3
 800c70e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c712:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c716:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c71a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c71e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c722:	e841 2300 	strex	r3, r2, [r1]
 800c726:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c72a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d1da      	bne.n	800c6e8 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	3308      	adds	r3, #8
 800c738:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c73a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c73c:	e853 3f00 	ldrex	r3, [r3]
 800c740:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c742:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c744:	f023 0301 	bic.w	r3, r3, #1
 800c748:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	3308      	adds	r3, #8
 800c752:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c756:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c75a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c75c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c75e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c762:	e841 2300 	strex	r3, r2, [r1]
 800c766:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c768:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d1e1      	bne.n	800c732 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	3308      	adds	r3, #8
 800c774:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c776:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c778:	e853 3f00 	ldrex	r3, [r3]
 800c77c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c77e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c780:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c784:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	3308      	adds	r3, #8
 800c78e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c792:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c794:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c796:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c798:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c79a:	e841 2300 	strex	r3, r2, [r1]
 800c79e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c7a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d1e3      	bne.n	800c76e <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2220      	movs	r2, #32
 800c7aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c7bc:	e853 3f00 	ldrex	r3, [r3]
 800c7c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c7c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c7c4:	f023 0310 	bic.w	r3, r3, #16
 800c7c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c7d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c7d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c7dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c7de:	e841 2300 	strex	r3, r2, [r1]
 800c7e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c7e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d1e4      	bne.n	800c7b4 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7fb fe48 	bl	8008486 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2202      	movs	r2, #2
 800c7fa:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800c808:	687a      	ldr	r2, [r7, #4]
 800c80a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800c80e:	b292      	uxth	r2, r2
 800c810:	1a8a      	subs	r2, r1, r2
 800c812:	b292      	uxth	r2, r2
 800c814:	4611      	mov	r1, r2
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c81a:	e0e7      	b.n	800c9ec <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c828:	b29b      	uxth	r3, r3
 800c82a:	1ad3      	subs	r3, r2, r3
 800c82c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c836:	b29b      	uxth	r3, r3
 800c838:	2b00      	cmp	r3, #0
 800c83a:	f000 80d9 	beq.w	800c9f0 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800c83e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c842:	2b00      	cmp	r3, #0
 800c844:	f000 80d4 	beq.w	800c9f0 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c84e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c850:	e853 3f00 	ldrex	r3, [r3]
 800c854:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c858:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c85c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	461a      	mov	r2, r3
 800c866:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c86a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c86c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c86e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c870:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c872:	e841 2300 	strex	r3, r2, [r1]
 800c876:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d1e4      	bne.n	800c848 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	3308      	adds	r3, #8
 800c884:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c888:	e853 3f00 	ldrex	r3, [r3]
 800c88c:	623b      	str	r3, [r7, #32]
   return(result);
 800c88e:	6a3b      	ldr	r3, [r7, #32]
 800c890:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c894:	f023 0301 	bic.w	r3, r3, #1
 800c898:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	3308      	adds	r3, #8
 800c8a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c8a6:	633a      	str	r2, [r7, #48]	@ 0x30
 800c8a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c8ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8ae:	e841 2300 	strex	r3, r2, [r1]
 800c8b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c8b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d1e1      	bne.n	800c87e <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2220      	movs	r2, #32
 800c8be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	e853 3f00 	ldrex	r3, [r3]
 800c8da:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f023 0310 	bic.w	r3, r3, #16
 800c8e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c8f0:	61fb      	str	r3, [r7, #28]
 800c8f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8f4:	69b9      	ldr	r1, [r7, #24]
 800c8f6:	69fa      	ldr	r2, [r7, #28]
 800c8f8:	e841 2300 	strex	r3, r2, [r1]
 800c8fc:	617b      	str	r3, [r7, #20]
   return(result);
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d1e4      	bne.n	800c8ce <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2202      	movs	r2, #2
 800c908:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c910:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800c914:	4611      	mov	r1, r2
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c91a:	e069      	b.n	800c9f0 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c91c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c920:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c924:	2b00      	cmp	r3, #0
 800c926:	d010      	beq.n	800c94a <HAL_UART_IRQHandler+0x5b6>
 800c928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c92c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c930:	2b00      	cmp	r3, #0
 800c932:	d00a      	beq.n	800c94a <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c93c:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c948:	e055      	b.n	800c9f6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c94a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c94e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c952:	2b00      	cmp	r3, #0
 800c954:	d014      	beq.n	800c980 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c95a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d105      	bne.n	800c96e <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c966:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d008      	beq.n	800c980 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c972:	2b00      	cmp	r3, #0
 800c974:	d03e      	beq.n	800c9f4 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	4798      	blx	r3
    }
    return;
 800c97e:	e039      	b.n	800c9f4 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d009      	beq.n	800c9a0 <HAL_UART_IRQHandler+0x60c>
 800c98c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c994:	2b00      	cmp	r3, #0
 800c996:	d003      	beq.n	800c9a0 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f001 f8ba 	bl	800db12 <UART_EndTransmit_IT>
    return;
 800c99e:	e02a      	b.n	800c9f6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c9a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d00b      	beq.n	800c9c4 <HAL_UART_IRQHandler+0x630>
 800c9ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c9b0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d005      	beq.n	800c9c4 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c9c2:	e018      	b.n	800c9f6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c9c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d012      	beq.n	800c9f6 <HAL_UART_IRQHandler+0x662>
 800c9d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	da0e      	bge.n	800c9f6 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c9e2:	e008      	b.n	800c9f6 <HAL_UART_IRQHandler+0x662>
      return;
 800c9e4:	bf00      	nop
 800c9e6:	e006      	b.n	800c9f6 <HAL_UART_IRQHandler+0x662>
    return;
 800c9e8:	bf00      	nop
 800c9ea:	e004      	b.n	800c9f6 <HAL_UART_IRQHandler+0x662>
      return;
 800c9ec:	bf00      	nop
 800c9ee:	e002      	b.n	800c9f6 <HAL_UART_IRQHandler+0x662>
      return;
 800c9f0:	bf00      	nop
 800c9f2:	e000      	b.n	800c9f6 <HAL_UART_IRQHandler+0x662>
    return;
 800c9f4:	bf00      	nop
  }
}
 800c9f6:	37e8      	adds	r7, #232	@ 0xe8
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c9fc:	b480      	push	{r7}
 800c9fe:	b083      	sub	sp, #12
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ca04:	bf00      	nop
 800ca06:	370c      	adds	r7, #12
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0e:	4770      	bx	lr

0800ca10 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b083      	sub	sp, #12
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ca18:	bf00      	nop
 800ca1a:	370c      	adds	r7, #12
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr

0800ca24 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ca24:	b480      	push	{r7}
 800ca26:	b083      	sub	sp, #12
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ca2c:	bf00      	nop
 800ca2e:	370c      	adds	r7, #12
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr

0800ca38 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b083      	sub	sp, #12
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ca40:	bf00      	nop
 800ca42:	370c      	adds	r7, #12
 800ca44:	46bd      	mov	sp, r7
 800ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4a:	4770      	bx	lr

0800ca4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b083      	sub	sp, #12
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ca54:	bf00      	nop
 800ca56:	370c      	adds	r7, #12
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5e:	4770      	bx	lr

0800ca60 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b083      	sub	sp, #12
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800ca68:	bf00      	nop
 800ca6a:	370c      	adds	r7, #12
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr

0800ca74 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b083      	sub	sp, #12
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800ca7c:	bf00      	nop
 800ca7e:	370c      	adds	r7, #12
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b083      	sub	sp, #12
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ca90:	bf00      	nop
 800ca92:	370c      	adds	r7, #12
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr

0800ca9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b083      	sub	sp, #12
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	460b      	mov	r3, r1
 800caa6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800caa8:	bf00      	nop
 800caaa:	370c      	adds	r7, #12
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr

0800cab4 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800cab4:	b480      	push	{r7}
 800cab6:	b083      	sub	sp, #12
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	4a09      	ldr	r2, [pc, #36]	@ (800cae8 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800cac4:	4293      	cmp	r3, r2
 800cac6:	d009      	beq.n	800cadc <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	695b      	ldr	r3, [r3, #20]
 800cace:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	683a      	ldr	r2, [r7, #0]
 800cad8:	430a      	orrs	r2, r1
 800cada:	615a      	str	r2, [r3, #20]
  }
}
 800cadc:	bf00      	nop
 800cade:	370c      	adds	r7, #12
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr
 800cae8:	40008000 	.word	0x40008000

0800caec <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800caec:	b480      	push	{r7}
 800caee:	b083      	sub	sp, #12
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	4a18      	ldr	r2, [pc, #96]	@ (800cb5c <HAL_UART_EnableReceiverTimeout+0x70>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d027      	beq.n	800cb4e <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb04:	2b20      	cmp	r3, #32
 800cb06:	d120      	bne.n	800cb4a <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	d101      	bne.n	800cb16 <HAL_UART_EnableReceiverTimeout+0x2a>
 800cb12:	2302      	movs	r3, #2
 800cb14:	e01c      	b.n	800cb50 <HAL_UART_EnableReceiverTimeout+0x64>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2201      	movs	r2, #1
 800cb1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2224      	movs	r2, #36	@ 0x24
 800cb22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	685a      	ldr	r2, [r3, #4]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800cb34:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2220      	movs	r2, #32
 800cb3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2200      	movs	r2, #0
 800cb42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800cb46:	2300      	movs	r3, #0
 800cb48:	e002      	b.n	800cb50 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800cb4a:	2302      	movs	r3, #2
 800cb4c:	e000      	b.n	800cb50 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800cb4e:	2301      	movs	r3, #1
  }
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	370c      	adds	r7, #12
 800cb54:	46bd      	mov	sp, r7
 800cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5a:	4770      	bx	lr
 800cb5c:	40008000 	.word	0x40008000

0800cb60 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800cb60:	b480      	push	{r7}
 800cb62:	b083      	sub	sp, #12
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	370c      	adds	r7, #12
 800cb72:	46bd      	mov	sp, r7
 800cb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb78:	4770      	bx	lr
	...

0800cb7c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b083      	sub	sp, #12
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	4a1a      	ldr	r2, [pc, #104]	@ (800cbf0 <UART_InitCallbacksToDefault+0x74>)
 800cb88:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	4a19      	ldr	r2, [pc, #100]	@ (800cbf4 <UART_InitCallbacksToDefault+0x78>)
 800cb90:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	4a18      	ldr	r2, [pc, #96]	@ (800cbf8 <UART_InitCallbacksToDefault+0x7c>)
 800cb98:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	4a17      	ldr	r2, [pc, #92]	@ (800cbfc <UART_InitCallbacksToDefault+0x80>)
 800cba0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	4a16      	ldr	r2, [pc, #88]	@ (800cc00 <UART_InitCallbacksToDefault+0x84>)
 800cba8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	4a15      	ldr	r2, [pc, #84]	@ (800cc04 <UART_InitCallbacksToDefault+0x88>)
 800cbb0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	4a14      	ldr	r2, [pc, #80]	@ (800cc08 <UART_InitCallbacksToDefault+0x8c>)
 800cbb8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	4a13      	ldr	r2, [pc, #76]	@ (800cc0c <UART_InitCallbacksToDefault+0x90>)
 800cbc0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	4a12      	ldr	r2, [pc, #72]	@ (800cc10 <UART_InitCallbacksToDefault+0x94>)
 800cbc8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	4a11      	ldr	r2, [pc, #68]	@ (800cc14 <UART_InitCallbacksToDefault+0x98>)
 800cbd0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	4a10      	ldr	r2, [pc, #64]	@ (800cc18 <UART_InitCallbacksToDefault+0x9c>)
 800cbd8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	4a0f      	ldr	r2, [pc, #60]	@ (800cc1c <UART_InitCallbacksToDefault+0xa0>)
 800cbe0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800cbe4:	bf00      	nop
 800cbe6:	370c      	adds	r7, #12
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr
 800cbf0:	0800ca11 	.word	0x0800ca11
 800cbf4:	0800c9fd 	.word	0x0800c9fd
 800cbf8:	0800ca39 	.word	0x0800ca39
 800cbfc:	0800ca25 	.word	0x0800ca25
 800cc00:	0800ca4d 	.word	0x0800ca4d
 800cc04:	0800ca61 	.word	0x0800ca61
 800cc08:	0800ca75 	.word	0x0800ca75
 800cc0c:	0800ca89 	.word	0x0800ca89
 800cc10:	0800db6d 	.word	0x0800db6d
 800cc14:	0800db81 	.word	0x0800db81
 800cc18:	0800db95 	.word	0x0800db95
 800cc1c:	0800ca9d 	.word	0x0800ca9d

0800cc20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cc20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cc24:	b08c      	sub	sp, #48	@ 0x30
 800cc26:	af00      	add	r7, sp, #0
 800cc28:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cc30:	697b      	ldr	r3, [r7, #20]
 800cc32:	689a      	ldr	r2, [r3, #8]
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	691b      	ldr	r3, [r3, #16]
 800cc38:	431a      	orrs	r2, r3
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	695b      	ldr	r3, [r3, #20]
 800cc3e:	431a      	orrs	r2, r3
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	69db      	ldr	r3, [r3, #28]
 800cc44:	4313      	orrs	r3, r2
 800cc46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	681a      	ldr	r2, [r3, #0]
 800cc4e:	4baa      	ldr	r3, [pc, #680]	@ (800cef8 <UART_SetConfig+0x2d8>)
 800cc50:	4013      	ands	r3, r2
 800cc52:	697a      	ldr	r2, [r7, #20]
 800cc54:	6812      	ldr	r2, [r2, #0]
 800cc56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cc58:	430b      	orrs	r3, r1
 800cc5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	68da      	ldr	r2, [r3, #12]
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	430a      	orrs	r2, r1
 800cc70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	699b      	ldr	r3, [r3, #24]
 800cc76:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a9f      	ldr	r2, [pc, #636]	@ (800cefc <UART_SetConfig+0x2dc>)
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d004      	beq.n	800cc8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	6a1b      	ldr	r3, [r3, #32]
 800cc86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc88:	4313      	orrs	r3, r2
 800cc8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	689b      	ldr	r3, [r3, #8]
 800cc92:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800cc96:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800cc9a:	697a      	ldr	r2, [r7, #20]
 800cc9c:	6812      	ldr	r2, [r2, #0]
 800cc9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cca0:	430b      	orrs	r3, r1
 800cca2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccaa:	f023 010f 	bic.w	r1, r3, #15
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	430a      	orrs	r2, r1
 800ccb8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	4a90      	ldr	r2, [pc, #576]	@ (800cf00 <UART_SetConfig+0x2e0>)
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	d125      	bne.n	800cd10 <UART_SetConfig+0xf0>
 800ccc4:	4b8f      	ldr	r3, [pc, #572]	@ (800cf04 <UART_SetConfig+0x2e4>)
 800ccc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ccca:	f003 0303 	and.w	r3, r3, #3
 800ccce:	2b03      	cmp	r3, #3
 800ccd0:	d81a      	bhi.n	800cd08 <UART_SetConfig+0xe8>
 800ccd2:	a201      	add	r2, pc, #4	@ (adr r2, 800ccd8 <UART_SetConfig+0xb8>)
 800ccd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccd8:	0800cce9 	.word	0x0800cce9
 800ccdc:	0800ccf9 	.word	0x0800ccf9
 800cce0:	0800ccf1 	.word	0x0800ccf1
 800cce4:	0800cd01 	.word	0x0800cd01
 800cce8:	2301      	movs	r3, #1
 800ccea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ccee:	e116      	b.n	800cf1e <UART_SetConfig+0x2fe>
 800ccf0:	2302      	movs	r3, #2
 800ccf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ccf6:	e112      	b.n	800cf1e <UART_SetConfig+0x2fe>
 800ccf8:	2304      	movs	r3, #4
 800ccfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ccfe:	e10e      	b.n	800cf1e <UART_SetConfig+0x2fe>
 800cd00:	2308      	movs	r3, #8
 800cd02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd06:	e10a      	b.n	800cf1e <UART_SetConfig+0x2fe>
 800cd08:	2310      	movs	r3, #16
 800cd0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd0e:	e106      	b.n	800cf1e <UART_SetConfig+0x2fe>
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	4a7c      	ldr	r2, [pc, #496]	@ (800cf08 <UART_SetConfig+0x2e8>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d138      	bne.n	800cd8c <UART_SetConfig+0x16c>
 800cd1a:	4b7a      	ldr	r3, [pc, #488]	@ (800cf04 <UART_SetConfig+0x2e4>)
 800cd1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cd20:	f003 030c 	and.w	r3, r3, #12
 800cd24:	2b0c      	cmp	r3, #12
 800cd26:	d82d      	bhi.n	800cd84 <UART_SetConfig+0x164>
 800cd28:	a201      	add	r2, pc, #4	@ (adr r2, 800cd30 <UART_SetConfig+0x110>)
 800cd2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd2e:	bf00      	nop
 800cd30:	0800cd65 	.word	0x0800cd65
 800cd34:	0800cd85 	.word	0x0800cd85
 800cd38:	0800cd85 	.word	0x0800cd85
 800cd3c:	0800cd85 	.word	0x0800cd85
 800cd40:	0800cd75 	.word	0x0800cd75
 800cd44:	0800cd85 	.word	0x0800cd85
 800cd48:	0800cd85 	.word	0x0800cd85
 800cd4c:	0800cd85 	.word	0x0800cd85
 800cd50:	0800cd6d 	.word	0x0800cd6d
 800cd54:	0800cd85 	.word	0x0800cd85
 800cd58:	0800cd85 	.word	0x0800cd85
 800cd5c:	0800cd85 	.word	0x0800cd85
 800cd60:	0800cd7d 	.word	0x0800cd7d
 800cd64:	2300      	movs	r3, #0
 800cd66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd6a:	e0d8      	b.n	800cf1e <UART_SetConfig+0x2fe>
 800cd6c:	2302      	movs	r3, #2
 800cd6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd72:	e0d4      	b.n	800cf1e <UART_SetConfig+0x2fe>
 800cd74:	2304      	movs	r3, #4
 800cd76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd7a:	e0d0      	b.n	800cf1e <UART_SetConfig+0x2fe>
 800cd7c:	2308      	movs	r3, #8
 800cd7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd82:	e0cc      	b.n	800cf1e <UART_SetConfig+0x2fe>
 800cd84:	2310      	movs	r3, #16
 800cd86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd8a:	e0c8      	b.n	800cf1e <UART_SetConfig+0x2fe>
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4a5e      	ldr	r2, [pc, #376]	@ (800cf0c <UART_SetConfig+0x2ec>)
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d125      	bne.n	800cde2 <UART_SetConfig+0x1c2>
 800cd96:	4b5b      	ldr	r3, [pc, #364]	@ (800cf04 <UART_SetConfig+0x2e4>)
 800cd98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cd9c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800cda0:	2b30      	cmp	r3, #48	@ 0x30
 800cda2:	d016      	beq.n	800cdd2 <UART_SetConfig+0x1b2>
 800cda4:	2b30      	cmp	r3, #48	@ 0x30
 800cda6:	d818      	bhi.n	800cdda <UART_SetConfig+0x1ba>
 800cda8:	2b20      	cmp	r3, #32
 800cdaa:	d00a      	beq.n	800cdc2 <UART_SetConfig+0x1a2>
 800cdac:	2b20      	cmp	r3, #32
 800cdae:	d814      	bhi.n	800cdda <UART_SetConfig+0x1ba>
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d002      	beq.n	800cdba <UART_SetConfig+0x19a>
 800cdb4:	2b10      	cmp	r3, #16
 800cdb6:	d008      	beq.n	800cdca <UART_SetConfig+0x1aa>
 800cdb8:	e00f      	b.n	800cdda <UART_SetConfig+0x1ba>
 800cdba:	2300      	movs	r3, #0
 800cdbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cdc0:	e0ad      	b.n	800cf1e <UART_SetConfig+0x2fe>
 800cdc2:	2302      	movs	r3, #2
 800cdc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cdc8:	e0a9      	b.n	800cf1e <UART_SetConfig+0x2fe>
 800cdca:	2304      	movs	r3, #4
 800cdcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cdd0:	e0a5      	b.n	800cf1e <UART_SetConfig+0x2fe>
 800cdd2:	2308      	movs	r3, #8
 800cdd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cdd8:	e0a1      	b.n	800cf1e <UART_SetConfig+0x2fe>
 800cdda:	2310      	movs	r3, #16
 800cddc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cde0:	e09d      	b.n	800cf1e <UART_SetConfig+0x2fe>
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	4a4a      	ldr	r2, [pc, #296]	@ (800cf10 <UART_SetConfig+0x2f0>)
 800cde8:	4293      	cmp	r3, r2
 800cdea:	d125      	bne.n	800ce38 <UART_SetConfig+0x218>
 800cdec:	4b45      	ldr	r3, [pc, #276]	@ (800cf04 <UART_SetConfig+0x2e4>)
 800cdee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cdf2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cdf6:	2bc0      	cmp	r3, #192	@ 0xc0
 800cdf8:	d016      	beq.n	800ce28 <UART_SetConfig+0x208>
 800cdfa:	2bc0      	cmp	r3, #192	@ 0xc0
 800cdfc:	d818      	bhi.n	800ce30 <UART_SetConfig+0x210>
 800cdfe:	2b80      	cmp	r3, #128	@ 0x80
 800ce00:	d00a      	beq.n	800ce18 <UART_SetConfig+0x1f8>
 800ce02:	2b80      	cmp	r3, #128	@ 0x80
 800ce04:	d814      	bhi.n	800ce30 <UART_SetConfig+0x210>
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d002      	beq.n	800ce10 <UART_SetConfig+0x1f0>
 800ce0a:	2b40      	cmp	r3, #64	@ 0x40
 800ce0c:	d008      	beq.n	800ce20 <UART_SetConfig+0x200>
 800ce0e:	e00f      	b.n	800ce30 <UART_SetConfig+0x210>
 800ce10:	2300      	movs	r3, #0
 800ce12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce16:	e082      	b.n	800cf1e <UART_SetConfig+0x2fe>
 800ce18:	2302      	movs	r3, #2
 800ce1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce1e:	e07e      	b.n	800cf1e <UART_SetConfig+0x2fe>
 800ce20:	2304      	movs	r3, #4
 800ce22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce26:	e07a      	b.n	800cf1e <UART_SetConfig+0x2fe>
 800ce28:	2308      	movs	r3, #8
 800ce2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce2e:	e076      	b.n	800cf1e <UART_SetConfig+0x2fe>
 800ce30:	2310      	movs	r3, #16
 800ce32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce36:	e072      	b.n	800cf1e <UART_SetConfig+0x2fe>
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	4a35      	ldr	r2, [pc, #212]	@ (800cf14 <UART_SetConfig+0x2f4>)
 800ce3e:	4293      	cmp	r3, r2
 800ce40:	d12a      	bne.n	800ce98 <UART_SetConfig+0x278>
 800ce42:	4b30      	ldr	r3, [pc, #192]	@ (800cf04 <UART_SetConfig+0x2e4>)
 800ce44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ce4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ce50:	d01a      	beq.n	800ce88 <UART_SetConfig+0x268>
 800ce52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ce56:	d81b      	bhi.n	800ce90 <UART_SetConfig+0x270>
 800ce58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce5c:	d00c      	beq.n	800ce78 <UART_SetConfig+0x258>
 800ce5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce62:	d815      	bhi.n	800ce90 <UART_SetConfig+0x270>
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d003      	beq.n	800ce70 <UART_SetConfig+0x250>
 800ce68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce6c:	d008      	beq.n	800ce80 <UART_SetConfig+0x260>
 800ce6e:	e00f      	b.n	800ce90 <UART_SetConfig+0x270>
 800ce70:	2300      	movs	r3, #0
 800ce72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce76:	e052      	b.n	800cf1e <UART_SetConfig+0x2fe>
 800ce78:	2302      	movs	r3, #2
 800ce7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce7e:	e04e      	b.n	800cf1e <UART_SetConfig+0x2fe>
 800ce80:	2304      	movs	r3, #4
 800ce82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce86:	e04a      	b.n	800cf1e <UART_SetConfig+0x2fe>
 800ce88:	2308      	movs	r3, #8
 800ce8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce8e:	e046      	b.n	800cf1e <UART_SetConfig+0x2fe>
 800ce90:	2310      	movs	r3, #16
 800ce92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce96:	e042      	b.n	800cf1e <UART_SetConfig+0x2fe>
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	4a17      	ldr	r2, [pc, #92]	@ (800cefc <UART_SetConfig+0x2dc>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d13a      	bne.n	800cf18 <UART_SetConfig+0x2f8>
 800cea2:	4b18      	ldr	r3, [pc, #96]	@ (800cf04 <UART_SetConfig+0x2e4>)
 800cea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cea8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ceac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ceb0:	d01a      	beq.n	800cee8 <UART_SetConfig+0x2c8>
 800ceb2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ceb6:	d81b      	bhi.n	800cef0 <UART_SetConfig+0x2d0>
 800ceb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cebc:	d00c      	beq.n	800ced8 <UART_SetConfig+0x2b8>
 800cebe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cec2:	d815      	bhi.n	800cef0 <UART_SetConfig+0x2d0>
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d003      	beq.n	800ced0 <UART_SetConfig+0x2b0>
 800cec8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cecc:	d008      	beq.n	800cee0 <UART_SetConfig+0x2c0>
 800cece:	e00f      	b.n	800cef0 <UART_SetConfig+0x2d0>
 800ced0:	2300      	movs	r3, #0
 800ced2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ced6:	e022      	b.n	800cf1e <UART_SetConfig+0x2fe>
 800ced8:	2302      	movs	r3, #2
 800ceda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cede:	e01e      	b.n	800cf1e <UART_SetConfig+0x2fe>
 800cee0:	2304      	movs	r3, #4
 800cee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cee6:	e01a      	b.n	800cf1e <UART_SetConfig+0x2fe>
 800cee8:	2308      	movs	r3, #8
 800ceea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ceee:	e016      	b.n	800cf1e <UART_SetConfig+0x2fe>
 800cef0:	2310      	movs	r3, #16
 800cef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cef6:	e012      	b.n	800cf1e <UART_SetConfig+0x2fe>
 800cef8:	cfff69f3 	.word	0xcfff69f3
 800cefc:	40008000 	.word	0x40008000
 800cf00:	40013800 	.word	0x40013800
 800cf04:	40021000 	.word	0x40021000
 800cf08:	40004400 	.word	0x40004400
 800cf0c:	40004800 	.word	0x40004800
 800cf10:	40004c00 	.word	0x40004c00
 800cf14:	40005000 	.word	0x40005000
 800cf18:	2310      	movs	r3, #16
 800cf1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	4aae      	ldr	r2, [pc, #696]	@ (800d1dc <UART_SetConfig+0x5bc>)
 800cf24:	4293      	cmp	r3, r2
 800cf26:	f040 8097 	bne.w	800d058 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cf2a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800cf2e:	2b08      	cmp	r3, #8
 800cf30:	d823      	bhi.n	800cf7a <UART_SetConfig+0x35a>
 800cf32:	a201      	add	r2, pc, #4	@ (adr r2, 800cf38 <UART_SetConfig+0x318>)
 800cf34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf38:	0800cf5d 	.word	0x0800cf5d
 800cf3c:	0800cf7b 	.word	0x0800cf7b
 800cf40:	0800cf65 	.word	0x0800cf65
 800cf44:	0800cf7b 	.word	0x0800cf7b
 800cf48:	0800cf6b 	.word	0x0800cf6b
 800cf4c:	0800cf7b 	.word	0x0800cf7b
 800cf50:	0800cf7b 	.word	0x0800cf7b
 800cf54:	0800cf7b 	.word	0x0800cf7b
 800cf58:	0800cf73 	.word	0x0800cf73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf5c:	f7fc fbdc 	bl	8009718 <HAL_RCC_GetPCLK1Freq>
 800cf60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cf62:	e010      	b.n	800cf86 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cf64:	4b9e      	ldr	r3, [pc, #632]	@ (800d1e0 <UART_SetConfig+0x5c0>)
 800cf66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cf68:	e00d      	b.n	800cf86 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cf6a:	f7fc fb67 	bl	800963c <HAL_RCC_GetSysClockFreq>
 800cf6e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cf70:	e009      	b.n	800cf86 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cf76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cf78:	e005      	b.n	800cf86 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800cf7e:	2301      	movs	r3, #1
 800cf80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800cf84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cf86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	f000 8130 	beq.w	800d1ee <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf92:	4a94      	ldr	r2, [pc, #592]	@ (800d1e4 <UART_SetConfig+0x5c4>)
 800cf94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf98:	461a      	mov	r2, r3
 800cf9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf9c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cfa0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	685a      	ldr	r2, [r3, #4]
 800cfa6:	4613      	mov	r3, r2
 800cfa8:	005b      	lsls	r3, r3, #1
 800cfaa:	4413      	add	r3, r2
 800cfac:	69ba      	ldr	r2, [r7, #24]
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d305      	bcc.n	800cfbe <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	685b      	ldr	r3, [r3, #4]
 800cfb6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cfb8:	69ba      	ldr	r2, [r7, #24]
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d903      	bls.n	800cfc6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800cfc4:	e113      	b.n	800d1ee <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cfc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfc8:	2200      	movs	r2, #0
 800cfca:	60bb      	str	r3, [r7, #8]
 800cfcc:	60fa      	str	r2, [r7, #12]
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfd2:	4a84      	ldr	r2, [pc, #528]	@ (800d1e4 <UART_SetConfig+0x5c4>)
 800cfd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cfd8:	b29b      	uxth	r3, r3
 800cfda:	2200      	movs	r2, #0
 800cfdc:	603b      	str	r3, [r7, #0]
 800cfde:	607a      	str	r2, [r7, #4]
 800cfe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfe4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cfe8:	f7f3 fe1a 	bl	8000c20 <__aeabi_uldivmod>
 800cfec:	4602      	mov	r2, r0
 800cfee:	460b      	mov	r3, r1
 800cff0:	4610      	mov	r0, r2
 800cff2:	4619      	mov	r1, r3
 800cff4:	f04f 0200 	mov.w	r2, #0
 800cff8:	f04f 0300 	mov.w	r3, #0
 800cffc:	020b      	lsls	r3, r1, #8
 800cffe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d002:	0202      	lsls	r2, r0, #8
 800d004:	6979      	ldr	r1, [r7, #20]
 800d006:	6849      	ldr	r1, [r1, #4]
 800d008:	0849      	lsrs	r1, r1, #1
 800d00a:	2000      	movs	r0, #0
 800d00c:	460c      	mov	r4, r1
 800d00e:	4605      	mov	r5, r0
 800d010:	eb12 0804 	adds.w	r8, r2, r4
 800d014:	eb43 0905 	adc.w	r9, r3, r5
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	685b      	ldr	r3, [r3, #4]
 800d01c:	2200      	movs	r2, #0
 800d01e:	469a      	mov	sl, r3
 800d020:	4693      	mov	fp, r2
 800d022:	4652      	mov	r2, sl
 800d024:	465b      	mov	r3, fp
 800d026:	4640      	mov	r0, r8
 800d028:	4649      	mov	r1, r9
 800d02a:	f7f3 fdf9 	bl	8000c20 <__aeabi_uldivmod>
 800d02e:	4602      	mov	r2, r0
 800d030:	460b      	mov	r3, r1
 800d032:	4613      	mov	r3, r2
 800d034:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d036:	6a3b      	ldr	r3, [r7, #32]
 800d038:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d03c:	d308      	bcc.n	800d050 <UART_SetConfig+0x430>
 800d03e:	6a3b      	ldr	r3, [r7, #32]
 800d040:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d044:	d204      	bcs.n	800d050 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	6a3a      	ldr	r2, [r7, #32]
 800d04c:	60da      	str	r2, [r3, #12]
 800d04e:	e0ce      	b.n	800d1ee <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800d050:	2301      	movs	r3, #1
 800d052:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d056:	e0ca      	b.n	800d1ee <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	69db      	ldr	r3, [r3, #28]
 800d05c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d060:	d166      	bne.n	800d130 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800d062:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d066:	2b08      	cmp	r3, #8
 800d068:	d827      	bhi.n	800d0ba <UART_SetConfig+0x49a>
 800d06a:	a201      	add	r2, pc, #4	@ (adr r2, 800d070 <UART_SetConfig+0x450>)
 800d06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d070:	0800d095 	.word	0x0800d095
 800d074:	0800d09d 	.word	0x0800d09d
 800d078:	0800d0a5 	.word	0x0800d0a5
 800d07c:	0800d0bb 	.word	0x0800d0bb
 800d080:	0800d0ab 	.word	0x0800d0ab
 800d084:	0800d0bb 	.word	0x0800d0bb
 800d088:	0800d0bb 	.word	0x0800d0bb
 800d08c:	0800d0bb 	.word	0x0800d0bb
 800d090:	0800d0b3 	.word	0x0800d0b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d094:	f7fc fb40 	bl	8009718 <HAL_RCC_GetPCLK1Freq>
 800d098:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d09a:	e014      	b.n	800d0c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d09c:	f7fc fb52 	bl	8009744 <HAL_RCC_GetPCLK2Freq>
 800d0a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d0a2:	e010      	b.n	800d0c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d0a4:	4b4e      	ldr	r3, [pc, #312]	@ (800d1e0 <UART_SetConfig+0x5c0>)
 800d0a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d0a8:	e00d      	b.n	800d0c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d0aa:	f7fc fac7 	bl	800963c <HAL_RCC_GetSysClockFreq>
 800d0ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d0b0:	e009      	b.n	800d0c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d0b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d0b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d0b8:	e005      	b.n	800d0c6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d0be:	2301      	movs	r3, #1
 800d0c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d0c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	f000 8090 	beq.w	800d1ee <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0d2:	4a44      	ldr	r2, [pc, #272]	@ (800d1e4 <UART_SetConfig+0x5c4>)
 800d0d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d0d8:	461a      	mov	r2, r3
 800d0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0e0:	005a      	lsls	r2, r3, #1
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	685b      	ldr	r3, [r3, #4]
 800d0e6:	085b      	lsrs	r3, r3, #1
 800d0e8:	441a      	add	r2, r3
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	685b      	ldr	r3, [r3, #4]
 800d0ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d0f4:	6a3b      	ldr	r3, [r7, #32]
 800d0f6:	2b0f      	cmp	r3, #15
 800d0f8:	d916      	bls.n	800d128 <UART_SetConfig+0x508>
 800d0fa:	6a3b      	ldr	r3, [r7, #32]
 800d0fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d100:	d212      	bcs.n	800d128 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d102:	6a3b      	ldr	r3, [r7, #32]
 800d104:	b29b      	uxth	r3, r3
 800d106:	f023 030f 	bic.w	r3, r3, #15
 800d10a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d10c:	6a3b      	ldr	r3, [r7, #32]
 800d10e:	085b      	lsrs	r3, r3, #1
 800d110:	b29b      	uxth	r3, r3
 800d112:	f003 0307 	and.w	r3, r3, #7
 800d116:	b29a      	uxth	r2, r3
 800d118:	8bfb      	ldrh	r3, [r7, #30]
 800d11a:	4313      	orrs	r3, r2
 800d11c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	8bfa      	ldrh	r2, [r7, #30]
 800d124:	60da      	str	r2, [r3, #12]
 800d126:	e062      	b.n	800d1ee <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800d128:	2301      	movs	r3, #1
 800d12a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d12e:	e05e      	b.n	800d1ee <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d130:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d134:	2b08      	cmp	r3, #8
 800d136:	d828      	bhi.n	800d18a <UART_SetConfig+0x56a>
 800d138:	a201      	add	r2, pc, #4	@ (adr r2, 800d140 <UART_SetConfig+0x520>)
 800d13a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d13e:	bf00      	nop
 800d140:	0800d165 	.word	0x0800d165
 800d144:	0800d16d 	.word	0x0800d16d
 800d148:	0800d175 	.word	0x0800d175
 800d14c:	0800d18b 	.word	0x0800d18b
 800d150:	0800d17b 	.word	0x0800d17b
 800d154:	0800d18b 	.word	0x0800d18b
 800d158:	0800d18b 	.word	0x0800d18b
 800d15c:	0800d18b 	.word	0x0800d18b
 800d160:	0800d183 	.word	0x0800d183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d164:	f7fc fad8 	bl	8009718 <HAL_RCC_GetPCLK1Freq>
 800d168:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d16a:	e014      	b.n	800d196 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d16c:	f7fc faea 	bl	8009744 <HAL_RCC_GetPCLK2Freq>
 800d170:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d172:	e010      	b.n	800d196 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d174:	4b1a      	ldr	r3, [pc, #104]	@ (800d1e0 <UART_SetConfig+0x5c0>)
 800d176:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d178:	e00d      	b.n	800d196 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d17a:	f7fc fa5f 	bl	800963c <HAL_RCC_GetSysClockFreq>
 800d17e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d180:	e009      	b.n	800d196 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d182:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d186:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d188:	e005      	b.n	800d196 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800d18a:	2300      	movs	r3, #0
 800d18c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d18e:	2301      	movs	r3, #1
 800d190:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d194:	bf00      	nop
    }

    if (pclk != 0U)
 800d196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d028      	beq.n	800d1ee <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1a0:	4a10      	ldr	r2, [pc, #64]	@ (800d1e4 <UART_SetConfig+0x5c4>)
 800d1a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1a6:	461a      	mov	r2, r3
 800d1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1aa:	fbb3 f2f2 	udiv	r2, r3, r2
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	685b      	ldr	r3, [r3, #4]
 800d1b2:	085b      	lsrs	r3, r3, #1
 800d1b4:	441a      	add	r2, r3
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	685b      	ldr	r3, [r3, #4]
 800d1ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d1c0:	6a3b      	ldr	r3, [r7, #32]
 800d1c2:	2b0f      	cmp	r3, #15
 800d1c4:	d910      	bls.n	800d1e8 <UART_SetConfig+0x5c8>
 800d1c6:	6a3b      	ldr	r3, [r7, #32]
 800d1c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d1cc:	d20c      	bcs.n	800d1e8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d1ce:	6a3b      	ldr	r3, [r7, #32]
 800d1d0:	b29a      	uxth	r2, r3
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	60da      	str	r2, [r3, #12]
 800d1d8:	e009      	b.n	800d1ee <UART_SetConfig+0x5ce>
 800d1da:	bf00      	nop
 800d1dc:	40008000 	.word	0x40008000
 800d1e0:	00f42400 	.word	0x00f42400
 800d1e4:	0800e2c0 	.word	0x0800e2c0
      }
      else
      {
        ret = HAL_ERROR;
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	2200      	movs	r2, #0
 800d202:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	2200      	movs	r2, #0
 800d208:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d20a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800d20e:	4618      	mov	r0, r3
 800d210:	3730      	adds	r7, #48	@ 0x30
 800d212:	46bd      	mov	sp, r7
 800d214:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d218 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d218:	b480      	push	{r7}
 800d21a:	b083      	sub	sp, #12
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d224:	f003 0308 	and.w	r3, r3, #8
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d00a      	beq.n	800d242 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	430a      	orrs	r2, r1
 800d240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d246:	f003 0301 	and.w	r3, r3, #1
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d00a      	beq.n	800d264 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	430a      	orrs	r2, r1
 800d262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d268:	f003 0302 	and.w	r3, r3, #2
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d00a      	beq.n	800d286 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	685b      	ldr	r3, [r3, #4]
 800d276:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	430a      	orrs	r2, r1
 800d284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d28a:	f003 0304 	and.w	r3, r3, #4
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d00a      	beq.n	800d2a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	685b      	ldr	r3, [r3, #4]
 800d298:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	430a      	orrs	r2, r1
 800d2a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2ac:	f003 0310 	and.w	r3, r3, #16
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d00a      	beq.n	800d2ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	689b      	ldr	r3, [r3, #8]
 800d2ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	430a      	orrs	r2, r1
 800d2c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2ce:	f003 0320 	and.w	r3, r3, #32
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d00a      	beq.n	800d2ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	689b      	ldr	r3, [r3, #8]
 800d2dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	430a      	orrs	r2, r1
 800d2ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d01a      	beq.n	800d32e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	685b      	ldr	r3, [r3, #4]
 800d2fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	430a      	orrs	r2, r1
 800d30c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d312:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d316:	d10a      	bne.n	800d32e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	685b      	ldr	r3, [r3, #4]
 800d31e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	430a      	orrs	r2, r1
 800d32c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d336:	2b00      	cmp	r3, #0
 800d338:	d00a      	beq.n	800d350 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	685b      	ldr	r3, [r3, #4]
 800d340:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	430a      	orrs	r2, r1
 800d34e:	605a      	str	r2, [r3, #4]
  }
}
 800d350:	bf00      	nop
 800d352:	370c      	adds	r7, #12
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr

0800d35c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b098      	sub	sp, #96	@ 0x60
 800d360:	af02      	add	r7, sp, #8
 800d362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2200      	movs	r2, #0
 800d368:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d36c:	f7f9 f82a 	bl	80063c4 <HAL_GetTick>
 800d370:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f003 0308 	and.w	r3, r3, #8
 800d37c:	2b08      	cmp	r3, #8
 800d37e:	d12f      	bne.n	800d3e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d380:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d384:	9300      	str	r3, [sp, #0]
 800d386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d388:	2200      	movs	r2, #0
 800d38a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f000 f88e 	bl	800d4b0 <UART_WaitOnFlagUntilTimeout>
 800d394:	4603      	mov	r3, r0
 800d396:	2b00      	cmp	r3, #0
 800d398:	d022      	beq.n	800d3e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3a2:	e853 3f00 	ldrex	r3, [r3]
 800d3a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d3a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d3ae:	653b      	str	r3, [r7, #80]	@ 0x50
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	461a      	mov	r2, r3
 800d3b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3b8:	647b      	str	r3, [r7, #68]	@ 0x44
 800d3ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d3be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d3c0:	e841 2300 	strex	r3, r2, [r1]
 800d3c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d3c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d1e6      	bne.n	800d39a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2220      	movs	r2, #32
 800d3d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d3dc:	2303      	movs	r3, #3
 800d3de:	e063      	b.n	800d4a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f003 0304 	and.w	r3, r3, #4
 800d3ea:	2b04      	cmp	r3, #4
 800d3ec:	d149      	bne.n	800d482 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d3ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d3f2:	9300      	str	r3, [sp, #0]
 800d3f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f000 f857 	bl	800d4b0 <UART_WaitOnFlagUntilTimeout>
 800d402:	4603      	mov	r3, r0
 800d404:	2b00      	cmp	r3, #0
 800d406:	d03c      	beq.n	800d482 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d410:	e853 3f00 	ldrex	r3, [r3]
 800d414:	623b      	str	r3, [r7, #32]
   return(result);
 800d416:	6a3b      	ldr	r3, [r7, #32]
 800d418:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d41c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	461a      	mov	r2, r3
 800d424:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d426:	633b      	str	r3, [r7, #48]	@ 0x30
 800d428:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d42a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d42c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d42e:	e841 2300 	strex	r3, r2, [r1]
 800d432:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d436:	2b00      	cmp	r3, #0
 800d438:	d1e6      	bne.n	800d408 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	3308      	adds	r3, #8
 800d440:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	e853 3f00 	ldrex	r3, [r3]
 800d448:	60fb      	str	r3, [r7, #12]
   return(result);
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	f023 0301 	bic.w	r3, r3, #1
 800d450:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	3308      	adds	r3, #8
 800d458:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d45a:	61fa      	str	r2, [r7, #28]
 800d45c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d45e:	69b9      	ldr	r1, [r7, #24]
 800d460:	69fa      	ldr	r2, [r7, #28]
 800d462:	e841 2300 	strex	r3, r2, [r1]
 800d466:	617b      	str	r3, [r7, #20]
   return(result);
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d1e5      	bne.n	800d43a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2220      	movs	r2, #32
 800d472:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2200      	movs	r2, #0
 800d47a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d47e:	2303      	movs	r3, #3
 800d480:	e012      	b.n	800d4a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2220      	movs	r2, #32
 800d486:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2220      	movs	r2, #32
 800d48e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2200      	movs	r2, #0
 800d496:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2200      	movs	r2, #0
 800d49c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d4a6:	2300      	movs	r3, #0
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3758      	adds	r7, #88	@ 0x58
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b084      	sub	sp, #16
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	60f8      	str	r0, [r7, #12]
 800d4b8:	60b9      	str	r1, [r7, #8]
 800d4ba:	603b      	str	r3, [r7, #0]
 800d4bc:	4613      	mov	r3, r2
 800d4be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d4c0:	e04f      	b.n	800d562 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d4c2:	69bb      	ldr	r3, [r7, #24]
 800d4c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4c8:	d04b      	beq.n	800d562 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4ca:	f7f8 ff7b 	bl	80063c4 <HAL_GetTick>
 800d4ce:	4602      	mov	r2, r0
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	1ad3      	subs	r3, r2, r3
 800d4d4:	69ba      	ldr	r2, [r7, #24]
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	d302      	bcc.n	800d4e0 <UART_WaitOnFlagUntilTimeout+0x30>
 800d4da:	69bb      	ldr	r3, [r7, #24]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d101      	bne.n	800d4e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d4e0:	2303      	movs	r3, #3
 800d4e2:	e04e      	b.n	800d582 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f003 0304 	and.w	r3, r3, #4
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d037      	beq.n	800d562 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	2b80      	cmp	r3, #128	@ 0x80
 800d4f6:	d034      	beq.n	800d562 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	2b40      	cmp	r3, #64	@ 0x40
 800d4fc:	d031      	beq.n	800d562 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	69db      	ldr	r3, [r3, #28]
 800d504:	f003 0308 	and.w	r3, r3, #8
 800d508:	2b08      	cmp	r3, #8
 800d50a:	d110      	bne.n	800d52e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	2208      	movs	r2, #8
 800d512:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d514:	68f8      	ldr	r0, [r7, #12]
 800d516:	f000 f920 	bl	800d75a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	2208      	movs	r2, #8
 800d51e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	2200      	movs	r2, #0
 800d526:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d52a:	2301      	movs	r3, #1
 800d52c:	e029      	b.n	800d582 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	69db      	ldr	r3, [r3, #28]
 800d534:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d538:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d53c:	d111      	bne.n	800d562 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d546:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d548:	68f8      	ldr	r0, [r7, #12]
 800d54a:	f000 f906 	bl	800d75a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	2220      	movs	r2, #32
 800d552:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	2200      	movs	r2, #0
 800d55a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d55e:	2303      	movs	r3, #3
 800d560:	e00f      	b.n	800d582 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	69da      	ldr	r2, [r3, #28]
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	4013      	ands	r3, r2
 800d56c:	68ba      	ldr	r2, [r7, #8]
 800d56e:	429a      	cmp	r2, r3
 800d570:	bf0c      	ite	eq
 800d572:	2301      	moveq	r3, #1
 800d574:	2300      	movne	r3, #0
 800d576:	b2db      	uxtb	r3, r3
 800d578:	461a      	mov	r2, r3
 800d57a:	79fb      	ldrb	r3, [r7, #7]
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d0a0      	beq.n	800d4c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d580:	2300      	movs	r3, #0
}
 800d582:	4618      	mov	r0, r3
 800d584:	3710      	adds	r7, #16
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}
	...

0800d58c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b096      	sub	sp, #88	@ 0x58
 800d590:	af00      	add	r7, sp, #0
 800d592:	60f8      	str	r0, [r7, #12]
 800d594:	60b9      	str	r1, [r7, #8]
 800d596:	4613      	mov	r3, r2
 800d598:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	68ba      	ldr	r2, [r7, #8]
 800d59e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	88fa      	ldrh	r2, [r7, #6]
 800d5a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2222      	movs	r2, #34	@ 0x22
 800d5b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d02d      	beq.n	800d61e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5c8:	4a40      	ldr	r2, [pc, #256]	@ (800d6cc <UART_Start_Receive_DMA+0x140>)
 800d5ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5d2:	4a3f      	ldr	r2, [pc, #252]	@ (800d6d0 <UART_Start_Receive_DMA+0x144>)
 800d5d4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5dc:	4a3d      	ldr	r2, [pc, #244]	@ (800d6d4 <UART_Start_Receive_DMA+0x148>)
 800d5de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	3324      	adds	r3, #36	@ 0x24
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	88fb      	ldrh	r3, [r7, #6]
 800d600:	f7fa fec6 	bl	8008390 <HAL_DMA_Start_IT>
 800d604:	4603      	mov	r3, r0
 800d606:	2b00      	cmp	r3, #0
 800d608:	d009      	beq.n	800d61e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	2210      	movs	r2, #16
 800d60e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	2220      	movs	r2, #32
 800d616:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800d61a:	2301      	movs	r3, #1
 800d61c:	e051      	b.n	800d6c2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	691b      	ldr	r3, [r3, #16]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d018      	beq.n	800d658 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d62c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d62e:	e853 3f00 	ldrex	r3, [r3]
 800d632:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d636:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d63a:	657b      	str	r3, [r7, #84]	@ 0x54
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	461a      	mov	r2, r3
 800d642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d644:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d646:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d648:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d64a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d64c:	e841 2300 	strex	r3, r2, [r1]
 800d650:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d652:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d654:	2b00      	cmp	r3, #0
 800d656:	d1e6      	bne.n	800d626 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	3308      	adds	r3, #8
 800d65e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d662:	e853 3f00 	ldrex	r3, [r3]
 800d666:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d66a:	f043 0301 	orr.w	r3, r3, #1
 800d66e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	3308      	adds	r3, #8
 800d676:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d678:	637a      	str	r2, [r7, #52]	@ 0x34
 800d67a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d67c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d67e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d680:	e841 2300 	strex	r3, r2, [r1]
 800d684:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d1e5      	bne.n	800d658 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	3308      	adds	r3, #8
 800d692:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	e853 3f00 	ldrex	r3, [r3]
 800d69a:	613b      	str	r3, [r7, #16]
   return(result);
 800d69c:	693b      	ldr	r3, [r7, #16]
 800d69e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	3308      	adds	r3, #8
 800d6aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d6ac:	623a      	str	r2, [r7, #32]
 800d6ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6b0:	69f9      	ldr	r1, [r7, #28]
 800d6b2:	6a3a      	ldr	r2, [r7, #32]
 800d6b4:	e841 2300 	strex	r3, r2, [r1]
 800d6b8:	61bb      	str	r3, [r7, #24]
   return(result);
 800d6ba:	69bb      	ldr	r3, [r7, #24]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d1e5      	bne.n	800d68c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800d6c0:	2300      	movs	r3, #0
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3758      	adds	r7, #88	@ 0x58
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
 800d6ca:	bf00      	nop
 800d6cc:	0800d8e5 	.word	0x0800d8e5
 800d6d0:	0800da19 	.word	0x0800da19
 800d6d4:	0800da5f 	.word	0x0800da5f

0800d6d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b08f      	sub	sp, #60	@ 0x3c
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6e6:	6a3b      	ldr	r3, [r7, #32]
 800d6e8:	e853 3f00 	ldrex	r3, [r3]
 800d6ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800d6ee:	69fb      	ldr	r3, [r7, #28]
 800d6f0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d6f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d700:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d702:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d704:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d706:	e841 2300 	strex	r3, r2, [r1]
 800d70a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d1e6      	bne.n	800d6e0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	3308      	adds	r3, #8
 800d718:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	e853 3f00 	ldrex	r3, [r3]
 800d720:	60bb      	str	r3, [r7, #8]
   return(result);
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d728:	633b      	str	r3, [r7, #48]	@ 0x30
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	3308      	adds	r3, #8
 800d730:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d732:	61ba      	str	r2, [r7, #24]
 800d734:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d736:	6979      	ldr	r1, [r7, #20]
 800d738:	69ba      	ldr	r2, [r7, #24]
 800d73a:	e841 2300 	strex	r3, r2, [r1]
 800d73e:	613b      	str	r3, [r7, #16]
   return(result);
 800d740:	693b      	ldr	r3, [r7, #16]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d1e5      	bne.n	800d712 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2220      	movs	r2, #32
 800d74a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800d74e:	bf00      	nop
 800d750:	373c      	adds	r7, #60	@ 0x3c
 800d752:	46bd      	mov	sp, r7
 800d754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d758:	4770      	bx	lr

0800d75a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d75a:	b480      	push	{r7}
 800d75c:	b095      	sub	sp, #84	@ 0x54
 800d75e:	af00      	add	r7, sp, #0
 800d760:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d76a:	e853 3f00 	ldrex	r3, [r3]
 800d76e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d772:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d776:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	461a      	mov	r2, r3
 800d77e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d780:	643b      	str	r3, [r7, #64]	@ 0x40
 800d782:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d784:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d786:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d788:	e841 2300 	strex	r3, r2, [r1]
 800d78c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d78e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d790:	2b00      	cmp	r3, #0
 800d792:	d1e6      	bne.n	800d762 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	3308      	adds	r3, #8
 800d79a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d79c:	6a3b      	ldr	r3, [r7, #32]
 800d79e:	e853 3f00 	ldrex	r3, [r3]
 800d7a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800d7a4:	69fb      	ldr	r3, [r7, #28]
 800d7a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d7aa:	f023 0301 	bic.w	r3, r3, #1
 800d7ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	3308      	adds	r3, #8
 800d7b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d7b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d7ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d7be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d7c0:	e841 2300 	strex	r3, r2, [r1]
 800d7c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d1e3      	bne.n	800d794 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d118      	bne.n	800d806 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	e853 3f00 	ldrex	r3, [r3]
 800d7e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	f023 0310 	bic.w	r3, r3, #16
 800d7e8:	647b      	str	r3, [r7, #68]	@ 0x44
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	461a      	mov	r2, r3
 800d7f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7f2:	61bb      	str	r3, [r7, #24]
 800d7f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7f6:	6979      	ldr	r1, [r7, #20]
 800d7f8:	69ba      	ldr	r2, [r7, #24]
 800d7fa:	e841 2300 	strex	r3, r2, [r1]
 800d7fe:	613b      	str	r3, [r7, #16]
   return(result);
 800d800:	693b      	ldr	r3, [r7, #16]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d1e6      	bne.n	800d7d4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2220      	movs	r2, #32
 800d80a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2200      	movs	r2, #0
 800d812:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2200      	movs	r2, #0
 800d818:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d81a:	bf00      	nop
 800d81c:	3754      	adds	r7, #84	@ 0x54
 800d81e:	46bd      	mov	sp, r7
 800d820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d824:	4770      	bx	lr

0800d826 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d826:	b580      	push	{r7, lr}
 800d828:	b090      	sub	sp, #64	@ 0x40
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d832:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	f003 0320 	and.w	r3, r3, #32
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d137      	bne.n	800d8b2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800d842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d844:	2200      	movs	r2, #0
 800d846:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d84a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	3308      	adds	r3, #8
 800d850:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d854:	e853 3f00 	ldrex	r3, [r3]
 800d858:	623b      	str	r3, [r7, #32]
   return(result);
 800d85a:	6a3b      	ldr	r3, [r7, #32]
 800d85c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d860:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	3308      	adds	r3, #8
 800d868:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d86a:	633a      	str	r2, [r7, #48]	@ 0x30
 800d86c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d86e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d870:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d872:	e841 2300 	strex	r3, r2, [r1]
 800d876:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d1e5      	bne.n	800d84a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d87e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	e853 3f00 	ldrex	r3, [r3]
 800d88a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d892:	637b      	str	r3, [r7, #52]	@ 0x34
 800d894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	461a      	mov	r2, r3
 800d89a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d89c:	61fb      	str	r3, [r7, #28]
 800d89e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8a0:	69b9      	ldr	r1, [r7, #24]
 800d8a2:	69fa      	ldr	r2, [r7, #28]
 800d8a4:	e841 2300 	strex	r3, r2, [r1]
 800d8a8:	617b      	str	r3, [r7, #20]
   return(result);
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d1e6      	bne.n	800d87e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d8b0:	e004      	b.n	800d8bc <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800d8b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d8b8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d8ba:	4798      	blx	r3
}
 800d8bc:	bf00      	nop
 800d8be:	3740      	adds	r7, #64	@ 0x40
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}

0800d8c4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b084      	sub	sp, #16
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8d0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d8d8:	68f8      	ldr	r0, [r7, #12]
 800d8da:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d8dc:	bf00      	nop
 800d8de:	3710      	adds	r7, #16
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}

0800d8e4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b09c      	sub	sp, #112	@ 0x70
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8f0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	f003 0320 	and.w	r3, r3, #32
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d171      	bne.n	800d9e4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800d900:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d902:	2200      	movs	r2, #0
 800d904:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d908:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d90e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d910:	e853 3f00 	ldrex	r3, [r3]
 800d914:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d918:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d91c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d91e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	461a      	mov	r2, r3
 800d924:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d926:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d928:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d92a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d92c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d92e:	e841 2300 	strex	r3, r2, [r1]
 800d932:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d934:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d936:	2b00      	cmp	r3, #0
 800d938:	d1e6      	bne.n	800d908 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d93a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	3308      	adds	r3, #8
 800d940:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d944:	e853 3f00 	ldrex	r3, [r3]
 800d948:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d94a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d94c:	f023 0301 	bic.w	r3, r3, #1
 800d950:	667b      	str	r3, [r7, #100]	@ 0x64
 800d952:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	3308      	adds	r3, #8
 800d958:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d95a:	647a      	str	r2, [r7, #68]	@ 0x44
 800d95c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d95e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d960:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d962:	e841 2300 	strex	r3, r2, [r1]
 800d966:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d1e5      	bne.n	800d93a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d96e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	3308      	adds	r3, #8
 800d974:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d978:	e853 3f00 	ldrex	r3, [r3]
 800d97c:	623b      	str	r3, [r7, #32]
   return(result);
 800d97e:	6a3b      	ldr	r3, [r7, #32]
 800d980:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d984:	663b      	str	r3, [r7, #96]	@ 0x60
 800d986:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	3308      	adds	r3, #8
 800d98c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d98e:	633a      	str	r2, [r7, #48]	@ 0x30
 800d990:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d992:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d996:	e841 2300 	strex	r3, r2, [r1]
 800d99a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d1e5      	bne.n	800d96e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d9a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d9a4:	2220      	movs	r2, #32
 800d9a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d9ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d9ae:	2b01      	cmp	r3, #1
 800d9b0:	d118      	bne.n	800d9e4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	e853 3f00 	ldrex	r3, [r3]
 800d9be:	60fb      	str	r3, [r7, #12]
   return(result);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f023 0310 	bic.w	r3, r3, #16
 800d9c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d9c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d9d0:	61fb      	str	r3, [r7, #28]
 800d9d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9d4:	69b9      	ldr	r1, [r7, #24]
 800d9d6:	69fa      	ldr	r2, [r7, #28]
 800d9d8:	e841 2300 	strex	r3, r2, [r1]
 800d9dc:	617b      	str	r3, [r7, #20]
   return(result);
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d1e6      	bne.n	800d9b2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d9e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d9ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d9ee:	2b01      	cmp	r3, #1
 800d9f0:	d109      	bne.n	800da06 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800d9f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d9f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d9f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d9fa:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800d9fe:	4611      	mov	r1, r2
 800da00:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800da02:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800da04:	e004      	b.n	800da10 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800da06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800da0c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800da0e:	4798      	blx	r3
}
 800da10:	bf00      	nop
 800da12:	3770      	adds	r7, #112	@ 0x70
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}

0800da18 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da24:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	2201      	movs	r2, #1
 800da2a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da30:	2b01      	cmp	r3, #1
 800da32:	d10b      	bne.n	800da4c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800da3a:	68fa      	ldr	r2, [r7, #12]
 800da3c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800da40:	0852      	lsrs	r2, r2, #1
 800da42:	b292      	uxth	r2, r2
 800da44:	4611      	mov	r1, r2
 800da46:	68f8      	ldr	r0, [r7, #12]
 800da48:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800da4a:	e004      	b.n	800da56 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800da52:	68f8      	ldr	r0, [r7, #12]
 800da54:	4798      	blx	r3
}
 800da56:	bf00      	nop
 800da58:	3710      	adds	r7, #16
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}

0800da5e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800da5e:	b580      	push	{r7, lr}
 800da60:	b086      	sub	sp, #24
 800da62:	af00      	add	r7, sp, #0
 800da64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da6a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800da72:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800da7a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	689b      	ldr	r3, [r3, #8]
 800da82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da86:	2b80      	cmp	r3, #128	@ 0x80
 800da88:	d109      	bne.n	800da9e <UART_DMAError+0x40>
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	2b21      	cmp	r3, #33	@ 0x21
 800da8e:	d106      	bne.n	800da9e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	2200      	movs	r2, #0
 800da94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800da98:	6978      	ldr	r0, [r7, #20]
 800da9a:	f7ff fe1d 	bl	800d6d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	689b      	ldr	r3, [r3, #8]
 800daa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800daa8:	2b40      	cmp	r3, #64	@ 0x40
 800daaa:	d109      	bne.n	800dac0 <UART_DMAError+0x62>
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	2b22      	cmp	r3, #34	@ 0x22
 800dab0:	d106      	bne.n	800dac0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	2200      	movs	r2, #0
 800dab6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800daba:	6978      	ldr	r0, [r7, #20]
 800dabc:	f7ff fe4d 	bl	800d75a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dac6:	f043 0210 	orr.w	r2, r3, #16
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800dad6:	6978      	ldr	r0, [r7, #20]
 800dad8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dada:	bf00      	nop
 800dadc:	3718      	adds	r7, #24
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}

0800dae2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dae2:	b580      	push	{r7, lr}
 800dae4:	b084      	sub	sp, #16
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800daee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	2200      	movs	r2, #0
 800daf4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2200      	movs	r2, #0
 800dafc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800db06:	68f8      	ldr	r0, [r7, #12]
 800db08:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db0a:	bf00      	nop
 800db0c:	3710      	adds	r7, #16
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}

0800db12 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800db12:	b580      	push	{r7, lr}
 800db14:	b088      	sub	sp, #32
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	e853 3f00 	ldrex	r3, [r3]
 800db26:	60bb      	str	r3, [r7, #8]
   return(result);
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800db2e:	61fb      	str	r3, [r7, #28]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	461a      	mov	r2, r3
 800db36:	69fb      	ldr	r3, [r7, #28]
 800db38:	61bb      	str	r3, [r7, #24]
 800db3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db3c:	6979      	ldr	r1, [r7, #20]
 800db3e:	69ba      	ldr	r2, [r7, #24]
 800db40:	e841 2300 	strex	r3, r2, [r1]
 800db44:	613b      	str	r3, [r7, #16]
   return(result);
 800db46:	693b      	ldr	r3, [r7, #16]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d1e6      	bne.n	800db1a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2220      	movs	r2, #32
 800db50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2200      	movs	r2, #0
 800db58:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db64:	bf00      	nop
 800db66:	3720      	adds	r7, #32
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}

0800db6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800db6c:	b480      	push	{r7}
 800db6e:	b083      	sub	sp, #12
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800db74:	bf00      	nop
 800db76:	370c      	adds	r7, #12
 800db78:	46bd      	mov	sp, r7
 800db7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7e:	4770      	bx	lr

0800db80 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800db80:	b480      	push	{r7}
 800db82:	b083      	sub	sp, #12
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800db88:	bf00      	nop
 800db8a:	370c      	adds	r7, #12
 800db8c:	46bd      	mov	sp, r7
 800db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db92:	4770      	bx	lr

0800db94 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800db94:	b480      	push	{r7}
 800db96:	b083      	sub	sp, #12
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800db9c:	bf00      	nop
 800db9e:	370c      	adds	r7, #12
 800dba0:	46bd      	mov	sp, r7
 800dba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba6:	4770      	bx	lr

0800dba8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dba8:	b480      	push	{r7}
 800dbaa:	b085      	sub	sp, #20
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dbb6:	2b01      	cmp	r3, #1
 800dbb8:	d101      	bne.n	800dbbe <HAL_UARTEx_DisableFifoMode+0x16>
 800dbba:	2302      	movs	r3, #2
 800dbbc:	e027      	b.n	800dc0e <HAL_UARTEx_DisableFifoMode+0x66>
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2201      	movs	r2, #1
 800dbc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2224      	movs	r2, #36	@ 0x24
 800dbca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	681a      	ldr	r2, [r3, #0]
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	f022 0201 	bic.w	r2, r2, #1
 800dbe4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800dbec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	68fa      	ldr	r2, [r7, #12]
 800dbfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2220      	movs	r2, #32
 800dc00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2200      	movs	r2, #0
 800dc08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dc0c:	2300      	movs	r3, #0
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3714      	adds	r7, #20
 800dc12:	46bd      	mov	sp, r7
 800dc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc18:	4770      	bx	lr

0800dc1a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dc1a:	b580      	push	{r7, lr}
 800dc1c:	b084      	sub	sp, #16
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	6078      	str	r0, [r7, #4]
 800dc22:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dc2a:	2b01      	cmp	r3, #1
 800dc2c:	d101      	bne.n	800dc32 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dc2e:	2302      	movs	r3, #2
 800dc30:	e02d      	b.n	800dc8e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2201      	movs	r2, #1
 800dc36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2224      	movs	r2, #36	@ 0x24
 800dc3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	681a      	ldr	r2, [r3, #0]
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	f022 0201 	bic.w	r2, r2, #1
 800dc58:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	689b      	ldr	r3, [r3, #8]
 800dc60:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	683a      	ldr	r2, [r7, #0]
 800dc6a:	430a      	orrs	r2, r1
 800dc6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f000 f850 	bl	800dd14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	68fa      	ldr	r2, [r7, #12]
 800dc7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2220      	movs	r2, #32
 800dc80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2200      	movs	r2, #0
 800dc88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dc8c:	2300      	movs	r3, #0
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	3710      	adds	r7, #16
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}

0800dc96 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dc96:	b580      	push	{r7, lr}
 800dc98:	b084      	sub	sp, #16
 800dc9a:	af00      	add	r7, sp, #0
 800dc9c:	6078      	str	r0, [r7, #4]
 800dc9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dca6:	2b01      	cmp	r3, #1
 800dca8:	d101      	bne.n	800dcae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dcaa:	2302      	movs	r3, #2
 800dcac:	e02d      	b.n	800dd0a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2201      	movs	r2, #1
 800dcb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2224      	movs	r2, #36	@ 0x24
 800dcba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	681a      	ldr	r2, [r3, #0]
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f022 0201 	bic.w	r2, r2, #1
 800dcd4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	689b      	ldr	r3, [r3, #8]
 800dcdc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	683a      	ldr	r2, [r7, #0]
 800dce6:	430a      	orrs	r2, r1
 800dce8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f000 f812 	bl	800dd14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	68fa      	ldr	r2, [r7, #12]
 800dcf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2220      	movs	r2, #32
 800dcfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2200      	movs	r2, #0
 800dd04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dd08:	2300      	movs	r3, #0
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3710      	adds	r7, #16
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
	...

0800dd14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dd14:	b480      	push	{r7}
 800dd16:	b085      	sub	sp, #20
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d108      	bne.n	800dd36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2201      	movs	r2, #1
 800dd28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2201      	movs	r2, #1
 800dd30:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dd34:	e031      	b.n	800dd9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dd36:	2308      	movs	r3, #8
 800dd38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dd3a:	2308      	movs	r3, #8
 800dd3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	689b      	ldr	r3, [r3, #8]
 800dd44:	0e5b      	lsrs	r3, r3, #25
 800dd46:	b2db      	uxtb	r3, r3
 800dd48:	f003 0307 	and.w	r3, r3, #7
 800dd4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	689b      	ldr	r3, [r3, #8]
 800dd54:	0f5b      	lsrs	r3, r3, #29
 800dd56:	b2db      	uxtb	r3, r3
 800dd58:	f003 0307 	and.w	r3, r3, #7
 800dd5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd5e:	7bbb      	ldrb	r3, [r7, #14]
 800dd60:	7b3a      	ldrb	r2, [r7, #12]
 800dd62:	4911      	ldr	r1, [pc, #68]	@ (800dda8 <UARTEx_SetNbDataToProcess+0x94>)
 800dd64:	5c8a      	ldrb	r2, [r1, r2]
 800dd66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dd6a:	7b3a      	ldrb	r2, [r7, #12]
 800dd6c:	490f      	ldr	r1, [pc, #60]	@ (800ddac <UARTEx_SetNbDataToProcess+0x98>)
 800dd6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd70:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd74:	b29a      	uxth	r2, r3
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd7c:	7bfb      	ldrb	r3, [r7, #15]
 800dd7e:	7b7a      	ldrb	r2, [r7, #13]
 800dd80:	4909      	ldr	r1, [pc, #36]	@ (800dda8 <UARTEx_SetNbDataToProcess+0x94>)
 800dd82:	5c8a      	ldrb	r2, [r1, r2]
 800dd84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dd88:	7b7a      	ldrb	r2, [r7, #13]
 800dd8a:	4908      	ldr	r1, [pc, #32]	@ (800ddac <UARTEx_SetNbDataToProcess+0x98>)
 800dd8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd8e:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd92:	b29a      	uxth	r2, r3
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800dd9a:	bf00      	nop
 800dd9c:	3714      	adds	r7, #20
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda4:	4770      	bx	lr
 800dda6:	bf00      	nop
 800dda8:	0800e2d8 	.word	0x0800e2d8
 800ddac:	0800e2e0 	.word	0x0800e2e0

0800ddb0 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b085      	sub	sp, #20
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	60f8      	str	r0, [r7, #12]
 800ddb8:	607b      	str	r3, [r7, #4]
 800ddba:	460b      	mov	r3, r1
 800ddbc:	817b      	strh	r3, [r7, #10]
 800ddbe:	4613      	mov	r3, r2
 800ddc0:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	897a      	ldrh	r2, [r7, #10]
 800ddc6:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	893a      	ldrh	r2, [r7, #8]
 800ddcc:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	687a      	ldr	r2, [r7, #4]
 800ddd2:	605a      	str	r2, [r3, #4]
}
 800ddd4:	bf00      	nop
 800ddd6:	3714      	adds	r7, #20
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddde:	4770      	bx	lr

0800dde0 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800dde0:	b480      	push	{r7}
 800dde2:	b08b      	sub	sp, #44	@ 0x2c
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	685b      	ldr	r3, [r3, #4]
 800ddee:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	685b      	ldr	r3, [r3, #4]
 800ddf4:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	881b      	ldrh	r3, [r3, #0]
 800ddfa:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	885b      	ldrh	r3, [r3, #2]
 800de00:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800de02:	89fb      	ldrh	r3, [r7, #14]
 800de04:	61bb      	str	r3, [r7, #24]
 800de06:	2300      	movs	r3, #0
 800de08:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	009b      	lsls	r3, r3, #2
 800de0e:	693a      	ldr	r2, [r7, #16]
 800de10:	4413      	add	r3, r2
 800de12:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800de14:	89bb      	ldrh	r3, [r7, #12]
 800de16:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800de18:	e00d      	b.n	800de36 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800de1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de1c:	1d1a      	adds	r2, r3, #4
 800de1e:	627a      	str	r2, [r7, #36]	@ 0x24
 800de20:	681a      	ldr	r2, [r3, #0]
 800de22:	6a3b      	ldr	r3, [r7, #32]
 800de24:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800de26:	89fb      	ldrh	r3, [r7, #14]
 800de28:	009b      	lsls	r3, r3, #2
 800de2a:	6a3a      	ldr	r2, [r7, #32]
 800de2c:	4413      	add	r3, r2
 800de2e:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800de30:	69fb      	ldr	r3, [r7, #28]
 800de32:	3b01      	subs	r3, #1
 800de34:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800de36:	69fb      	ldr	r3, [r7, #28]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d1ee      	bne.n	800de1a <arm_mat_trans_f32+0x3a>
      }

      i++;
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	3301      	adds	r3, #1
 800de40:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800de42:	69bb      	ldr	r3, [r7, #24]
 800de44:	3b01      	subs	r3, #1
 800de46:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800de48:	69bb      	ldr	r3, [r7, #24]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d1dd      	bne.n	800de0a <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800de4e:	2300      	movs	r3, #0
 800de50:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800de52:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800de56:	4618      	mov	r0, r3
 800de58:	372c      	adds	r7, #44	@ 0x2c
 800de5a:	46bd      	mov	sp, r7
 800de5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de60:	4770      	bx	lr

0800de62 <memset>:
 800de62:	4402      	add	r2, r0
 800de64:	4603      	mov	r3, r0
 800de66:	4293      	cmp	r3, r2
 800de68:	d100      	bne.n	800de6c <memset+0xa>
 800de6a:	4770      	bx	lr
 800de6c:	f803 1b01 	strb.w	r1, [r3], #1
 800de70:	e7f9      	b.n	800de66 <memset+0x4>
	...

0800de74 <__errno>:
 800de74:	4b01      	ldr	r3, [pc, #4]	@ (800de7c <__errno+0x8>)
 800de76:	6818      	ldr	r0, [r3, #0]
 800de78:	4770      	bx	lr
 800de7a:	bf00      	nop
 800de7c:	200002bc 	.word	0x200002bc

0800de80 <__libc_init_array>:
 800de80:	b570      	push	{r4, r5, r6, lr}
 800de82:	4d0d      	ldr	r5, [pc, #52]	@ (800deb8 <__libc_init_array+0x38>)
 800de84:	4c0d      	ldr	r4, [pc, #52]	@ (800debc <__libc_init_array+0x3c>)
 800de86:	1b64      	subs	r4, r4, r5
 800de88:	10a4      	asrs	r4, r4, #2
 800de8a:	2600      	movs	r6, #0
 800de8c:	42a6      	cmp	r6, r4
 800de8e:	d109      	bne.n	800dea4 <__libc_init_array+0x24>
 800de90:	4d0b      	ldr	r5, [pc, #44]	@ (800dec0 <__libc_init_array+0x40>)
 800de92:	4c0c      	ldr	r4, [pc, #48]	@ (800dec4 <__libc_init_array+0x44>)
 800de94:	f000 f9a8 	bl	800e1e8 <_init>
 800de98:	1b64      	subs	r4, r4, r5
 800de9a:	10a4      	asrs	r4, r4, #2
 800de9c:	2600      	movs	r6, #0
 800de9e:	42a6      	cmp	r6, r4
 800dea0:	d105      	bne.n	800deae <__libc_init_array+0x2e>
 800dea2:	bd70      	pop	{r4, r5, r6, pc}
 800dea4:	f855 3b04 	ldr.w	r3, [r5], #4
 800dea8:	4798      	blx	r3
 800deaa:	3601      	adds	r6, #1
 800deac:	e7ee      	b.n	800de8c <__libc_init_array+0xc>
 800deae:	f855 3b04 	ldr.w	r3, [r5], #4
 800deb2:	4798      	blx	r3
 800deb4:	3601      	adds	r6, #1
 800deb6:	e7f2      	b.n	800de9e <__libc_init_array+0x1e>
 800deb8:	0800e2f0 	.word	0x0800e2f0
 800debc:	0800e2f0 	.word	0x0800e2f0
 800dec0:	0800e2f0 	.word	0x0800e2f0
 800dec4:	0800e2f4 	.word	0x0800e2f4

0800dec8 <memcpy>:
 800dec8:	440a      	add	r2, r1
 800deca:	4291      	cmp	r1, r2
 800decc:	f100 33ff 	add.w	r3, r0, #4294967295
 800ded0:	d100      	bne.n	800ded4 <memcpy+0xc>
 800ded2:	4770      	bx	lr
 800ded4:	b510      	push	{r4, lr}
 800ded6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800deda:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dede:	4291      	cmp	r1, r2
 800dee0:	d1f9      	bne.n	800ded6 <memcpy+0xe>
 800dee2:	bd10      	pop	{r4, pc}

0800dee4 <sqrt>:
 800dee4:	b538      	push	{r3, r4, r5, lr}
 800dee6:	ed2d 8b02 	vpush	{d8}
 800deea:	ec55 4b10 	vmov	r4, r5, d0
 800deee:	f000 f825 	bl	800df3c <__ieee754_sqrt>
 800def2:	4622      	mov	r2, r4
 800def4:	462b      	mov	r3, r5
 800def6:	4620      	mov	r0, r4
 800def8:	4629      	mov	r1, r5
 800defa:	eeb0 8a40 	vmov.f32	s16, s0
 800defe:	eef0 8a60 	vmov.f32	s17, s1
 800df02:	f7f2 fddf 	bl	8000ac4 <__aeabi_dcmpun>
 800df06:	b990      	cbnz	r0, 800df2e <sqrt+0x4a>
 800df08:	2200      	movs	r2, #0
 800df0a:	2300      	movs	r3, #0
 800df0c:	4620      	mov	r0, r4
 800df0e:	4629      	mov	r1, r5
 800df10:	f7f2 fdb0 	bl	8000a74 <__aeabi_dcmplt>
 800df14:	b158      	cbz	r0, 800df2e <sqrt+0x4a>
 800df16:	f7ff ffad 	bl	800de74 <__errno>
 800df1a:	2321      	movs	r3, #33	@ 0x21
 800df1c:	6003      	str	r3, [r0, #0]
 800df1e:	2200      	movs	r2, #0
 800df20:	2300      	movs	r3, #0
 800df22:	4610      	mov	r0, r2
 800df24:	4619      	mov	r1, r3
 800df26:	f7f2 fc5d 	bl	80007e4 <__aeabi_ddiv>
 800df2a:	ec41 0b18 	vmov	d8, r0, r1
 800df2e:	eeb0 0a48 	vmov.f32	s0, s16
 800df32:	eef0 0a68 	vmov.f32	s1, s17
 800df36:	ecbd 8b02 	vpop	{d8}
 800df3a:	bd38      	pop	{r3, r4, r5, pc}

0800df3c <__ieee754_sqrt>:
 800df3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df40:	4a68      	ldr	r2, [pc, #416]	@ (800e0e4 <__ieee754_sqrt+0x1a8>)
 800df42:	ec55 4b10 	vmov	r4, r5, d0
 800df46:	43aa      	bics	r2, r5
 800df48:	462b      	mov	r3, r5
 800df4a:	4621      	mov	r1, r4
 800df4c:	d110      	bne.n	800df70 <__ieee754_sqrt+0x34>
 800df4e:	4622      	mov	r2, r4
 800df50:	4620      	mov	r0, r4
 800df52:	4629      	mov	r1, r5
 800df54:	f7f2 fb1c 	bl	8000590 <__aeabi_dmul>
 800df58:	4602      	mov	r2, r0
 800df5a:	460b      	mov	r3, r1
 800df5c:	4620      	mov	r0, r4
 800df5e:	4629      	mov	r1, r5
 800df60:	f7f2 f960 	bl	8000224 <__adddf3>
 800df64:	4604      	mov	r4, r0
 800df66:	460d      	mov	r5, r1
 800df68:	ec45 4b10 	vmov	d0, r4, r5
 800df6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df70:	2d00      	cmp	r5, #0
 800df72:	dc0e      	bgt.n	800df92 <__ieee754_sqrt+0x56>
 800df74:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800df78:	4322      	orrs	r2, r4
 800df7a:	d0f5      	beq.n	800df68 <__ieee754_sqrt+0x2c>
 800df7c:	b19d      	cbz	r5, 800dfa6 <__ieee754_sqrt+0x6a>
 800df7e:	4622      	mov	r2, r4
 800df80:	4620      	mov	r0, r4
 800df82:	4629      	mov	r1, r5
 800df84:	f7f2 f94c 	bl	8000220 <__aeabi_dsub>
 800df88:	4602      	mov	r2, r0
 800df8a:	460b      	mov	r3, r1
 800df8c:	f7f2 fc2a 	bl	80007e4 <__aeabi_ddiv>
 800df90:	e7e8      	b.n	800df64 <__ieee754_sqrt+0x28>
 800df92:	152a      	asrs	r2, r5, #20
 800df94:	d115      	bne.n	800dfc2 <__ieee754_sqrt+0x86>
 800df96:	2000      	movs	r0, #0
 800df98:	e009      	b.n	800dfae <__ieee754_sqrt+0x72>
 800df9a:	0acb      	lsrs	r3, r1, #11
 800df9c:	3a15      	subs	r2, #21
 800df9e:	0549      	lsls	r1, r1, #21
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d0fa      	beq.n	800df9a <__ieee754_sqrt+0x5e>
 800dfa4:	e7f7      	b.n	800df96 <__ieee754_sqrt+0x5a>
 800dfa6:	462a      	mov	r2, r5
 800dfa8:	e7fa      	b.n	800dfa0 <__ieee754_sqrt+0x64>
 800dfaa:	005b      	lsls	r3, r3, #1
 800dfac:	3001      	adds	r0, #1
 800dfae:	02dc      	lsls	r4, r3, #11
 800dfb0:	d5fb      	bpl.n	800dfaa <__ieee754_sqrt+0x6e>
 800dfb2:	1e44      	subs	r4, r0, #1
 800dfb4:	1b12      	subs	r2, r2, r4
 800dfb6:	f1c0 0420 	rsb	r4, r0, #32
 800dfba:	fa21 f404 	lsr.w	r4, r1, r4
 800dfbe:	4323      	orrs	r3, r4
 800dfc0:	4081      	lsls	r1, r0
 800dfc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dfc6:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800dfca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dfce:	07d2      	lsls	r2, r2, #31
 800dfd0:	bf5c      	itt	pl
 800dfd2:	005b      	lslpl	r3, r3, #1
 800dfd4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800dfd8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dfdc:	bf58      	it	pl
 800dfde:	0049      	lslpl	r1, r1, #1
 800dfe0:	2600      	movs	r6, #0
 800dfe2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800dfe6:	106d      	asrs	r5, r5, #1
 800dfe8:	0049      	lsls	r1, r1, #1
 800dfea:	2016      	movs	r0, #22
 800dfec:	4632      	mov	r2, r6
 800dfee:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800dff2:	1917      	adds	r7, r2, r4
 800dff4:	429f      	cmp	r7, r3
 800dff6:	bfde      	ittt	le
 800dff8:	193a      	addle	r2, r7, r4
 800dffa:	1bdb      	suble	r3, r3, r7
 800dffc:	1936      	addle	r6, r6, r4
 800dffe:	0fcf      	lsrs	r7, r1, #31
 800e000:	3801      	subs	r0, #1
 800e002:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800e006:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e00a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e00e:	d1f0      	bne.n	800dff2 <__ieee754_sqrt+0xb6>
 800e010:	4604      	mov	r4, r0
 800e012:	2720      	movs	r7, #32
 800e014:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800e018:	429a      	cmp	r2, r3
 800e01a:	eb00 0e0c 	add.w	lr, r0, ip
 800e01e:	db02      	blt.n	800e026 <__ieee754_sqrt+0xea>
 800e020:	d113      	bne.n	800e04a <__ieee754_sqrt+0x10e>
 800e022:	458e      	cmp	lr, r1
 800e024:	d811      	bhi.n	800e04a <__ieee754_sqrt+0x10e>
 800e026:	f1be 0f00 	cmp.w	lr, #0
 800e02a:	eb0e 000c 	add.w	r0, lr, ip
 800e02e:	da42      	bge.n	800e0b6 <__ieee754_sqrt+0x17a>
 800e030:	2800      	cmp	r0, #0
 800e032:	db40      	blt.n	800e0b6 <__ieee754_sqrt+0x17a>
 800e034:	f102 0801 	add.w	r8, r2, #1
 800e038:	1a9b      	subs	r3, r3, r2
 800e03a:	458e      	cmp	lr, r1
 800e03c:	bf88      	it	hi
 800e03e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e042:	eba1 010e 	sub.w	r1, r1, lr
 800e046:	4464      	add	r4, ip
 800e048:	4642      	mov	r2, r8
 800e04a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800e04e:	3f01      	subs	r7, #1
 800e050:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800e054:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e058:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800e05c:	d1dc      	bne.n	800e018 <__ieee754_sqrt+0xdc>
 800e05e:	4319      	orrs	r1, r3
 800e060:	d01b      	beq.n	800e09a <__ieee754_sqrt+0x15e>
 800e062:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800e0e8 <__ieee754_sqrt+0x1ac>
 800e066:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800e0ec <__ieee754_sqrt+0x1b0>
 800e06a:	e9da 0100 	ldrd	r0, r1, [sl]
 800e06e:	e9db 2300 	ldrd	r2, r3, [fp]
 800e072:	f7f2 f8d5 	bl	8000220 <__aeabi_dsub>
 800e076:	e9da 8900 	ldrd	r8, r9, [sl]
 800e07a:	4602      	mov	r2, r0
 800e07c:	460b      	mov	r3, r1
 800e07e:	4640      	mov	r0, r8
 800e080:	4649      	mov	r1, r9
 800e082:	f7f2 fd01 	bl	8000a88 <__aeabi_dcmple>
 800e086:	b140      	cbz	r0, 800e09a <__ieee754_sqrt+0x15e>
 800e088:	f1b4 3fff 	cmp.w	r4, #4294967295
 800e08c:	e9da 0100 	ldrd	r0, r1, [sl]
 800e090:	e9db 2300 	ldrd	r2, r3, [fp]
 800e094:	d111      	bne.n	800e0ba <__ieee754_sqrt+0x17e>
 800e096:	3601      	adds	r6, #1
 800e098:	463c      	mov	r4, r7
 800e09a:	1072      	asrs	r2, r6, #1
 800e09c:	0863      	lsrs	r3, r4, #1
 800e09e:	07f1      	lsls	r1, r6, #31
 800e0a0:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800e0a4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800e0a8:	bf48      	it	mi
 800e0aa:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800e0ae:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	e756      	b.n	800df64 <__ieee754_sqrt+0x28>
 800e0b6:	4690      	mov	r8, r2
 800e0b8:	e7be      	b.n	800e038 <__ieee754_sqrt+0xfc>
 800e0ba:	f7f2 f8b3 	bl	8000224 <__adddf3>
 800e0be:	e9da 8900 	ldrd	r8, r9, [sl]
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	460b      	mov	r3, r1
 800e0c6:	4640      	mov	r0, r8
 800e0c8:	4649      	mov	r1, r9
 800e0ca:	f7f2 fcd3 	bl	8000a74 <__aeabi_dcmplt>
 800e0ce:	b120      	cbz	r0, 800e0da <__ieee754_sqrt+0x19e>
 800e0d0:	1ca0      	adds	r0, r4, #2
 800e0d2:	bf08      	it	eq
 800e0d4:	3601      	addeq	r6, #1
 800e0d6:	3402      	adds	r4, #2
 800e0d8:	e7df      	b.n	800e09a <__ieee754_sqrt+0x15e>
 800e0da:	1c63      	adds	r3, r4, #1
 800e0dc:	f023 0401 	bic.w	r4, r3, #1
 800e0e0:	e7db      	b.n	800e09a <__ieee754_sqrt+0x15e>
 800e0e2:	bf00      	nop
 800e0e4:	7ff00000 	.word	0x7ff00000
 800e0e8:	20000318 	.word	0x20000318
 800e0ec:	20000310 	.word	0x20000310

0800e0f0 <floor>:
 800e0f0:	ec51 0b10 	vmov	r0, r1, d0
 800e0f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0fc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800e100:	2e13      	cmp	r6, #19
 800e102:	460c      	mov	r4, r1
 800e104:	4605      	mov	r5, r0
 800e106:	4680      	mov	r8, r0
 800e108:	dc34      	bgt.n	800e174 <floor+0x84>
 800e10a:	2e00      	cmp	r6, #0
 800e10c:	da17      	bge.n	800e13e <floor+0x4e>
 800e10e:	a332      	add	r3, pc, #200	@ (adr r3, 800e1d8 <floor+0xe8>)
 800e110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e114:	f7f2 f886 	bl	8000224 <__adddf3>
 800e118:	2200      	movs	r2, #0
 800e11a:	2300      	movs	r3, #0
 800e11c:	f7f2 fcc8 	bl	8000ab0 <__aeabi_dcmpgt>
 800e120:	b150      	cbz	r0, 800e138 <floor+0x48>
 800e122:	2c00      	cmp	r4, #0
 800e124:	da55      	bge.n	800e1d2 <floor+0xe2>
 800e126:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800e12a:	432c      	orrs	r4, r5
 800e12c:	2500      	movs	r5, #0
 800e12e:	42ac      	cmp	r4, r5
 800e130:	4c2b      	ldr	r4, [pc, #172]	@ (800e1e0 <floor+0xf0>)
 800e132:	bf08      	it	eq
 800e134:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800e138:	4621      	mov	r1, r4
 800e13a:	4628      	mov	r0, r5
 800e13c:	e023      	b.n	800e186 <floor+0x96>
 800e13e:	4f29      	ldr	r7, [pc, #164]	@ (800e1e4 <floor+0xf4>)
 800e140:	4137      	asrs	r7, r6
 800e142:	ea01 0307 	and.w	r3, r1, r7
 800e146:	4303      	orrs	r3, r0
 800e148:	d01d      	beq.n	800e186 <floor+0x96>
 800e14a:	a323      	add	r3, pc, #140	@ (adr r3, 800e1d8 <floor+0xe8>)
 800e14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e150:	f7f2 f868 	bl	8000224 <__adddf3>
 800e154:	2200      	movs	r2, #0
 800e156:	2300      	movs	r3, #0
 800e158:	f7f2 fcaa 	bl	8000ab0 <__aeabi_dcmpgt>
 800e15c:	2800      	cmp	r0, #0
 800e15e:	d0eb      	beq.n	800e138 <floor+0x48>
 800e160:	2c00      	cmp	r4, #0
 800e162:	bfbe      	ittt	lt
 800e164:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800e168:	4133      	asrlt	r3, r6
 800e16a:	18e4      	addlt	r4, r4, r3
 800e16c:	ea24 0407 	bic.w	r4, r4, r7
 800e170:	2500      	movs	r5, #0
 800e172:	e7e1      	b.n	800e138 <floor+0x48>
 800e174:	2e33      	cmp	r6, #51	@ 0x33
 800e176:	dd0a      	ble.n	800e18e <floor+0x9e>
 800e178:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800e17c:	d103      	bne.n	800e186 <floor+0x96>
 800e17e:	4602      	mov	r2, r0
 800e180:	460b      	mov	r3, r1
 800e182:	f7f2 f84f 	bl	8000224 <__adddf3>
 800e186:	ec41 0b10 	vmov	d0, r0, r1
 800e18a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e18e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800e192:	f04f 37ff 	mov.w	r7, #4294967295
 800e196:	40df      	lsrs	r7, r3
 800e198:	4207      	tst	r7, r0
 800e19a:	d0f4      	beq.n	800e186 <floor+0x96>
 800e19c:	a30e      	add	r3, pc, #56	@ (adr r3, 800e1d8 <floor+0xe8>)
 800e19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a2:	f7f2 f83f 	bl	8000224 <__adddf3>
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	f7f2 fc81 	bl	8000ab0 <__aeabi_dcmpgt>
 800e1ae:	2800      	cmp	r0, #0
 800e1b0:	d0c2      	beq.n	800e138 <floor+0x48>
 800e1b2:	2c00      	cmp	r4, #0
 800e1b4:	da0a      	bge.n	800e1cc <floor+0xdc>
 800e1b6:	2e14      	cmp	r6, #20
 800e1b8:	d101      	bne.n	800e1be <floor+0xce>
 800e1ba:	3401      	adds	r4, #1
 800e1bc:	e006      	b.n	800e1cc <floor+0xdc>
 800e1be:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	40b3      	lsls	r3, r6
 800e1c6:	441d      	add	r5, r3
 800e1c8:	4545      	cmp	r5, r8
 800e1ca:	d3f6      	bcc.n	800e1ba <floor+0xca>
 800e1cc:	ea25 0507 	bic.w	r5, r5, r7
 800e1d0:	e7b2      	b.n	800e138 <floor+0x48>
 800e1d2:	2500      	movs	r5, #0
 800e1d4:	462c      	mov	r4, r5
 800e1d6:	e7af      	b.n	800e138 <floor+0x48>
 800e1d8:	8800759c 	.word	0x8800759c
 800e1dc:	7e37e43c 	.word	0x7e37e43c
 800e1e0:	bff00000 	.word	0xbff00000
 800e1e4:	000fffff 	.word	0x000fffff

0800e1e8 <_init>:
 800e1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ea:	bf00      	nop
 800e1ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1ee:	bc08      	pop	{r3}
 800e1f0:	469e      	mov	lr, r3
 800e1f2:	4770      	bx	lr

0800e1f4 <_fini>:
 800e1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1f6:	bf00      	nop
 800e1f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1fa:	bc08      	pop	{r3}
 800e1fc:	469e      	mov	lr, r3
 800e1fe:	4770      	bx	lr


Onedof_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab28  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800ad00  0800ad00  0000bd00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae34  0800ae34  0000c058  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae34  0800ae34  0000be34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae3c  0800ae3c  0000c058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae3c  0800ae3c  0000be3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ae40  0800ae40  0000be40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  0800ae44  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000144c  20000058  0800ae9c  0000c058  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200014a4  0800ae9c  0000c4a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c058  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025722  00000000  00000000  0000c088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004268  00000000  00000000  000317aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001918  00000000  00000000  00035a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001389  00000000  00000000  00037330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b3b4  00000000  00000000  000386b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024c42  00000000  00000000  00063a6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117175  00000000  00000000  000886af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019f824  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d00  00000000  00000000  0019f868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001a6568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000058 	.word	0x20000058
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800ace8 	.word	0x0800ace8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000005c 	.word	0x2000005c
 8000214:	0800ace8 	.word	0x0800ace8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b96a 	b.w	8000d80 <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	460c      	mov	r4, r1
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d14e      	bne.n	8000b6e <__udivmoddi4+0xaa>
 8000ad0:	4694      	mov	ip, r2
 8000ad2:	458c      	cmp	ip, r1
 8000ad4:	4686      	mov	lr, r0
 8000ad6:	fab2 f282 	clz	r2, r2
 8000ada:	d962      	bls.n	8000ba2 <__udivmoddi4+0xde>
 8000adc:	b14a      	cbz	r2, 8000af2 <__udivmoddi4+0x2e>
 8000ade:	f1c2 0320 	rsb	r3, r2, #32
 8000ae2:	4091      	lsls	r1, r2
 8000ae4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aec:	4319      	orrs	r1, r3
 8000aee:	fa00 fe02 	lsl.w	lr, r0, r2
 8000af2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af6:	fa1f f68c 	uxth.w	r6, ip
 8000afa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000afe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b02:	fb07 1114 	mls	r1, r7, r4, r1
 8000b06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0a:	fb04 f106 	mul.w	r1, r4, r6
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	d90a      	bls.n	8000b28 <__udivmoddi4+0x64>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b1a:	f080 8112 	bcs.w	8000d42 <__udivmoddi4+0x27e>
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	f240 810f 	bls.w	8000d42 <__udivmoddi4+0x27e>
 8000b24:	3c02      	subs	r4, #2
 8000b26:	4463      	add	r3, ip
 8000b28:	1a59      	subs	r1, r3, r1
 8000b2a:	fa1f f38e 	uxth.w	r3, lr
 8000b2e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b32:	fb07 1110 	mls	r1, r7, r0, r1
 8000b36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3a:	fb00 f606 	mul.w	r6, r0, r6
 8000b3e:	429e      	cmp	r6, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x94>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b4a:	f080 80fc 	bcs.w	8000d46 <__udivmoddi4+0x282>
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	f240 80f9 	bls.w	8000d46 <__udivmoddi4+0x282>
 8000b54:	4463      	add	r3, ip
 8000b56:	3802      	subs	r0, #2
 8000b58:	1b9b      	subs	r3, r3, r6
 8000b5a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b5e:	2100      	movs	r1, #0
 8000b60:	b11d      	cbz	r5, 8000b6a <__udivmoddi4+0xa6>
 8000b62:	40d3      	lsrs	r3, r2
 8000b64:	2200      	movs	r2, #0
 8000b66:	e9c5 3200 	strd	r3, r2, [r5]
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	428b      	cmp	r3, r1
 8000b70:	d905      	bls.n	8000b7e <__udivmoddi4+0xba>
 8000b72:	b10d      	cbz	r5, 8000b78 <__udivmoddi4+0xb4>
 8000b74:	e9c5 0100 	strd	r0, r1, [r5]
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e7f5      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000b7e:	fab3 f183 	clz	r1, r3
 8000b82:	2900      	cmp	r1, #0
 8000b84:	d146      	bne.n	8000c14 <__udivmoddi4+0x150>
 8000b86:	42a3      	cmp	r3, r4
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xcc>
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	f0c0 80f0 	bcc.w	8000d70 <__udivmoddi4+0x2ac>
 8000b90:	1a86      	subs	r6, r0, r2
 8000b92:	eb64 0303 	sbc.w	r3, r4, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	2d00      	cmp	r5, #0
 8000b9a:	d0e6      	beq.n	8000b6a <__udivmoddi4+0xa6>
 8000b9c:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba0:	e7e3      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000ba2:	2a00      	cmp	r2, #0
 8000ba4:	f040 8090 	bne.w	8000cc8 <__udivmoddi4+0x204>
 8000ba8:	eba1 040c 	sub.w	r4, r1, ip
 8000bac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb0:	fa1f f78c 	uxth.w	r7, ip
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bbe:	fb08 4416 	mls	r4, r8, r6, r4
 8000bc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bc6:	fb07 f006 	mul.w	r0, r7, r6
 8000bca:	4298      	cmp	r0, r3
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x11c>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x11a>
 8000bd8:	4298      	cmp	r0, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2b4>
 8000bde:	4626      	mov	r6, r4
 8000be0:	1a1c      	subs	r4, r3, r0
 8000be2:	fa1f f38e 	uxth.w	r3, lr
 8000be6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bea:	fb08 4410 	mls	r4, r8, r0, r4
 8000bee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bf2:	fb00 f707 	mul.w	r7, r0, r7
 8000bf6:	429f      	cmp	r7, r3
 8000bf8:	d908      	bls.n	8000c0c <__udivmoddi4+0x148>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c02:	d202      	bcs.n	8000c0a <__udivmoddi4+0x146>
 8000c04:	429f      	cmp	r7, r3
 8000c06:	f200 80b0 	bhi.w	8000d6a <__udivmoddi4+0x2a6>
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	1bdb      	subs	r3, r3, r7
 8000c0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c12:	e7a5      	b.n	8000b60 <__udivmoddi4+0x9c>
 8000c14:	f1c1 0620 	rsb	r6, r1, #32
 8000c18:	408b      	lsls	r3, r1
 8000c1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c24:	fa04 f301 	lsl.w	r3, r4, r1
 8000c28:	ea43 030c 	orr.w	r3, r3, ip
 8000c2c:	40f4      	lsrs	r4, r6
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	0c38      	lsrs	r0, r7, #16
 8000c34:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c38:	fbb4 fef0 	udiv	lr, r4, r0
 8000c3c:	fa1f fc87 	uxth.w	ip, r7
 8000c40:	fb00 441e 	mls	r4, r0, lr, r4
 8000c44:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c48:	fb0e f90c 	mul.w	r9, lr, ip
 8000c4c:	45a1      	cmp	r9, r4
 8000c4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x1a6>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c5a:	f080 8084 	bcs.w	8000d66 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8081 	bls.w	8000d66 <__udivmoddi4+0x2a2>
 8000c64:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c68:	443c      	add	r4, r7
 8000c6a:	eba4 0409 	sub.w	r4, r4, r9
 8000c6e:	fa1f f983 	uxth.w	r9, r3
 8000c72:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c76:	fb00 4413 	mls	r4, r0, r3, r4
 8000c7a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c7e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c82:	45a4      	cmp	ip, r4
 8000c84:	d907      	bls.n	8000c96 <__udivmoddi4+0x1d2>
 8000c86:	193c      	adds	r4, r7, r4
 8000c88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c8c:	d267      	bcs.n	8000d5e <__udivmoddi4+0x29a>
 8000c8e:	45a4      	cmp	ip, r4
 8000c90:	d965      	bls.n	8000d5e <__udivmoddi4+0x29a>
 8000c92:	3b02      	subs	r3, #2
 8000c94:	443c      	add	r4, r7
 8000c96:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c9a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c9e:	eba4 040c 	sub.w	r4, r4, ip
 8000ca2:	429c      	cmp	r4, r3
 8000ca4:	46ce      	mov	lr, r9
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	d351      	bcc.n	8000d4e <__udivmoddi4+0x28a>
 8000caa:	d04e      	beq.n	8000d4a <__udivmoddi4+0x286>
 8000cac:	b155      	cbz	r5, 8000cc4 <__udivmoddi4+0x200>
 8000cae:	ebb8 030e 	subs.w	r3, r8, lr
 8000cb2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cba:	40cb      	lsrs	r3, r1
 8000cbc:	431e      	orrs	r6, r3
 8000cbe:	40cc      	lsrs	r4, r1
 8000cc0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e750      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000cc8:	f1c2 0320 	rsb	r3, r2, #32
 8000ccc:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd4:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd8:	4094      	lsls	r4, r2
 8000cda:	430c      	orrs	r4, r1
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cec:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf0:	0c23      	lsrs	r3, r4, #16
 8000cf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf6:	fb00 f107 	mul.w	r1, r0, r7
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x24c>
 8000cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000d02:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d06:	d22c      	bcs.n	8000d62 <__udivmoddi4+0x29e>
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d92a      	bls.n	8000d62 <__udivmoddi4+0x29e>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d18:	fb08 3311 	mls	r3, r8, r1, r3
 8000d1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d20:	fb01 f307 	mul.w	r3, r1, r7
 8000d24:	42a3      	cmp	r3, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x276>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d30:	d213      	bcs.n	8000d5a <__udivmoddi4+0x296>
 8000d32:	42a3      	cmp	r3, r4
 8000d34:	d911      	bls.n	8000d5a <__udivmoddi4+0x296>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4464      	add	r4, ip
 8000d3a:	1ae4      	subs	r4, r4, r3
 8000d3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d40:	e739      	b.n	8000bb6 <__udivmoddi4+0xf2>
 8000d42:	4604      	mov	r4, r0
 8000d44:	e6f0      	b.n	8000b28 <__udivmoddi4+0x64>
 8000d46:	4608      	mov	r0, r1
 8000d48:	e706      	b.n	8000b58 <__udivmoddi4+0x94>
 8000d4a:	45c8      	cmp	r8, r9
 8000d4c:	d2ae      	bcs.n	8000cac <__udivmoddi4+0x1e8>
 8000d4e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d52:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d56:	3801      	subs	r0, #1
 8000d58:	e7a8      	b.n	8000cac <__udivmoddi4+0x1e8>
 8000d5a:	4631      	mov	r1, r6
 8000d5c:	e7ed      	b.n	8000d3a <__udivmoddi4+0x276>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	e799      	b.n	8000c96 <__udivmoddi4+0x1d2>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e7d4      	b.n	8000d10 <__udivmoddi4+0x24c>
 8000d66:	46d6      	mov	lr, sl
 8000d68:	e77f      	b.n	8000c6a <__udivmoddi4+0x1a6>
 8000d6a:	4463      	add	r3, ip
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	e74d      	b.n	8000c0c <__udivmoddi4+0x148>
 8000d70:	4606      	mov	r6, r0
 8000d72:	4623      	mov	r3, r4
 8000d74:	4608      	mov	r0, r1
 8000d76:	e70f      	b.n	8000b98 <__udivmoddi4+0xd4>
 8000d78:	3e02      	subs	r6, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	e730      	b.n	8000be0 <__udivmoddi4+0x11c>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <Gripper_Movement_Status>:
        strcpy(Vacuum, "Off");
        eff -> solenoid_command[0] = 0;
    }
}

void Gripper_Movement_Status(EFF* eff){
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
    //Movement Forward
    if (registerFrame[0x03].U16 == 1){ // ใช้ == แทน =
 8000d8c:	4b12      	ldr	r3, [pc, #72]	@ (8000dd8 <Gripper_Movement_Status+0x54>)
 8000d8e:	88db      	ldrh	r3, [r3, #6]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d10c      	bne.n	8000dae <Gripper_Movement_Status+0x2a>
        strcpy(Gripper, "Forward");
 8000d94:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <Gripper_Movement_Status+0x58>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	@ (8000de0 <Gripper_Movement_Status+0x5c>)
 8000d98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d9c:	e883 0003 	stmia.w	r3, {r0, r1}
        eff -> solenoid_command[1] = 1;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2201      	movs	r2, #1
 8000da4:	70da      	strb	r2, [r3, #3]
        eff -> solenoid_command[2] = 0;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	711a      	strb	r2, [r3, #4]
    else if (registerFrame[0x03].U16 == 0){ // ใช้ == แทน =
        strcpy(Gripper, "Backward");
        eff -> solenoid_command[1] = 0;
        eff -> solenoid_command[2] = 1;
    }
}
 8000dac:	e00e      	b.n	8000dcc <Gripper_Movement_Status+0x48>
    else if (registerFrame[0x03].U16 == 0){ // ใช้ == แทน =
 8000dae:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd8 <Gripper_Movement_Status+0x54>)
 8000db0:	88db      	ldrh	r3, [r3, #6]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d10a      	bne.n	8000dcc <Gripper_Movement_Status+0x48>
        strcpy(Gripper, "Backward");
 8000db6:	4b09      	ldr	r3, [pc, #36]	@ (8000ddc <Gripper_Movement_Status+0x58>)
 8000db8:	4a0a      	ldr	r2, [pc, #40]	@ (8000de4 <Gripper_Movement_Status+0x60>)
 8000dba:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dbc:	c303      	stmia	r3!, {r0, r1}
 8000dbe:	701a      	strb	r2, [r3, #0]
        eff -> solenoid_command[1] = 0;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	70da      	strb	r2, [r3, #3]
        eff -> solenoid_command[2] = 1;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	711a      	strb	r2, [r3, #4]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	20000c74 	.word	0x20000c74
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	0800ad04 	.word	0x0800ad04
 8000de4:	0800ad0c 	.word	0x0800ad0c

08000de8 <Set_Goal_Point>:
    registerFrame[0x26].U16 = 8;  //4th Shelve Position
    registerFrame[0x27].U16 = 8;  //5th Shelve Position
}

// wait for Data type check
uint16_t Set_Goal_Point(){
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
	return registerFrame[0x30].U16;
 8000dec:	4b03      	ldr	r3, [pc, #12]	@ (8000dfc <Set_Goal_Point+0x14>)
 8000dee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	20000c74 	.word	0x20000c74

08000e00 <Run_Point_Mode>:

uint16_t Run_Point_Mode(){
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
	if (registerFrame[0x01].U16 == 8){
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <Run_Point_Mode+0x30>)
 8000e06:	885b      	ldrh	r3, [r3, #2]
 8000e08:	2b08      	cmp	r3, #8
 8000e0a:	d10b      	bne.n	8000e24 <Run_Point_Mode+0x24>
		registerFrame[0x01].U16 = 0;
 8000e0c:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <Run_Point_Mode+0x30>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 16;
 8000e12:	4b07      	ldr	r3, [pc, #28]	@ (8000e30 <Run_Point_Mode+0x30>)
 8000e14:	2210      	movs	r2, #16
 8000e16:	841a      	strh	r2, [r3, #32]
		state = registerFrame[0x10].U16;
 8000e18:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <Run_Point_Mode+0x30>)
 8000e1a:	8c1a      	ldrh	r2, [r3, #32]
 8000e1c:	4b05      	ldr	r3, [pc, #20]	@ (8000e34 <Run_Point_Mode+0x34>)
 8000e1e:	801a      	strh	r2, [r3, #0]
		return 1;
 8000e20:	2301      	movs	r3, #1
 8000e22:	e000      	b.n	8000e26 <Run_Point_Mode+0x26>
	}else{return 0;}
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	20000c74 	.word	0x20000c74
 8000e34:	20000074 	.word	0x20000074

08000e38 <Set_Home>:

void Set_Home(){
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
	if(registerFrame[0x10].U16 == 2){
 8000e3c:	4b08      	ldr	r3, [pc, #32]	@ (8000e60 <Set_Home+0x28>)
 8000e3e:	8c1b      	ldrh	r3, [r3, #32]
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d108      	bne.n	8000e56 <Set_Home+0x1e>
		state = 2;
 8000e44:	4b07      	ldr	r3, [pc, #28]	@ (8000e64 <Set_Home+0x2c>)
 8000e46:	2202      	movs	r2, #2
 8000e48:	801a      	strh	r2, [r3, #0]
		strcpy(Home, "Homing...");
 8000e4a:	4b07      	ldr	r3, [pc, #28]	@ (8000e68 <Set_Home+0x30>)
 8000e4c:	4a07      	ldr	r2, [pc, #28]	@ (8000e6c <Set_Home+0x34>)
 8000e4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e50:	c303      	stmia	r3!, {r0, r1}
 8000e52:	801a      	strh	r2, [r3, #0]
 8000e54:	e000      	b.n	8000e58 <Set_Home+0x20>
	}
	else{
		return;
 8000e56:	bf00      	nop
//	if (Jogginghome == 1){
//		registerFrame[0x01].U16 = 0;
//	}


}
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	20000c74 	.word	0x20000c74
 8000e64:	20000074 	.word	0x20000074
 8000e68:	20000014 	.word	0x20000014
 8000e6c:	0800ad18 	.word	0x0800ad18

08000e70 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000e74:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <modbus_1t5_Timeout+0x3c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2201      	movs	r2, #1
 8000e7a:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <modbus_1t5_Timeout+0x3c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	691b      	ldr	r3, [r3, #16]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2200      	movs	r2, #0
 8000e86:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000e88:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <modbus_1t5_Timeout+0x3c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	691b      	ldr	r3, [r3, #16]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <modbus_1t5_Timeout+0x3c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	691b      	ldr	r3, [r3, #16]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f042 0201 	orr.w	r2, r2, #1
 8000e9e:	601a      	str	r2, [r3, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000550 	.word	0x20000550

08000eb0 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000eb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ecc <modbus_3t5_Timeout+0x1c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	755a      	strb	r2, [r3, #21]

}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	20000550 	.word	0x20000550

08000ed0 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f008 fdf9 	bl	8009ad0 <HAL_UART_GetError>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b20      	cmp	r3, #32
 8000ee2:	d101      	bne.n	8000ee8 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8000ee4:	f7ff ffc4 	bl	8000e70 <modbus_1t5_Timeout>

	}
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000efa:	4a25      	ldr	r2, [pc, #148]	@ (8000f90 <Modbus_init+0xa0>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000f00:	4b23      	ldr	r3, [pc, #140]	@ (8000f90 <Modbus_init+0xa0>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	683a      	ldr	r2, [r7, #0]
 8000f06:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	4a21      	ldr	r2, [pc, #132]	@ (8000f94 <Modbus_init+0xa4>)
 8000f0e:	210e      	movs	r1, #14
 8000f10:	4618      	mov	r0, r3
 8000f12:	f007 f8a1 	bl	8008058 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	2110      	movs	r1, #16
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f008 fd81 	bl	8009a24 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f008 fd98 	bl	8009a5c <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	4a19      	ldr	r2, [pc, #100]	@ (8000f98 <Modbus_init+0xa8>)
 8000f32:	2104      	movs	r1, #4
 8000f34:	4618      	mov	r0, r3
 8000f36:	f008 f8df 	bl	80090f8 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8000f3a:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <Modbus_init+0xa0>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8000f40:	4b13      	ldr	r3, [pc, #76]	@ (8000f90 <Modbus_init+0xa0>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <Modbus_init+0xa0>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8000f4c:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000f50:	4413      	add	r3, r2
 8000f52:	3302      	adds	r3, #2
 8000f54:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f008 f987 	bl	800926c <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <Modbus_init+0xa0>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	691b      	ldr	r3, [r3, #16]
 8000f64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d10c      	bne.n	8000f88 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000f6e:	4b08      	ldr	r3, [pc, #32]	@ (8000f90 <Modbus_init+0xa0>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	691b      	ldr	r3, [r3, #16]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f006 f841 	bl	8006ffc <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000f7a:	4b05      	ldr	r3, [pc, #20]	@ (8000f90 <Modbus_init+0xa0>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	691b      	ldr	r3, [r3, #16]
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f006 fa9a 	bl	80074bc <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000550 	.word	0x20000550
 8000f94:	08000eb1 	.word	0x08000eb1
 8000f98:	08000ed1 	.word	0x08000ed1

08000f9c <ADC_init>:
 *      Author: naker
 */

#include "adc.h"

void ADC_init(ADC_HandleTypeDef* hadc, ADC* adc){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, adc -> adc_buffer, 50);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	2232      	movs	r2, #50	@ 0x32
 8000faa:	4619      	mov	r1, r3
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f002 feef 	bl	8003d90 <HAL_ADC_Start_DMA>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <Update_actual_eff>:
 *      Author: naker
 */

#include "eff.h"

void Update_actual_eff(EFF* eff, GPIO_TypeDef* GPIO_Pull, uint16_t GPIO_Pin_Pull, GPIO_TypeDef* GPIO_Push, uint16_t GPIO_Pin_Push){
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b084      	sub	sp, #16
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	60f8      	str	r0, [r7, #12]
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	80fb      	strh	r3, [r7, #6]
	eff -> actual_status[0] = HAL_GPIO_ReadPin(GPIO_Pull, GPIO_Pin_Pull);
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	68b8      	ldr	r0, [r7, #8]
 8000fd0:	f004 fec8 	bl	8005d64 <HAL_GPIO_ReadPin>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	701a      	strb	r2, [r3, #0]
	eff -> actual_status[1] = HAL_GPIO_ReadPin(GPIO_Push, GPIO_Pin_Push);
 8000fdc:	8b3b      	ldrh	r3, [r7, #24]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	6838      	ldr	r0, [r7, #0]
 8000fe2:	f004 febf 	bl	8005d64 <HAL_GPIO_ReadPin>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	461a      	mov	r2, r3
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	705a      	strb	r2, [r3, #1]
	if(eff -> actual_status[0] && !eff -> actual_status[1]){
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d007      	beq.n	8001006 <Update_actual_eff+0x4c>
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	785b      	ldrb	r3, [r3, #1]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d103      	bne.n	8001006 <Update_actual_eff+0x4c>
		// Pull reed switch on and Push reed switch off
		eff -> update_actual_status[0x04].U16 = 1;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2201      	movs	r2, #1
 8001002:	81da      	strh	r2, [r3, #14]
 8001004:	e00f      	b.n	8001026 <Update_actual_eff+0x6c>
//		registerFrame[0x04] -> U16 = 1;
	}
	else if(!eff -> actual_status[0] && eff -> actual_status[1]){
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d107      	bne.n	800101e <Update_actual_eff+0x64>
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	785b      	ldrb	r3, [r3, #1]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <Update_actual_eff+0x64>
		// Pull reed switch off and Push reed switch on
		eff -> update_actual_status[0x04].U16 = 2;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2202      	movs	r2, #2
 800101a:	81da      	strh	r2, [r3, #14]
 800101c:	e003      	b.n	8001026 <Update_actual_eff+0x6c>
//		registerFrame[0x04] -> U16 = 2;
	}
	else{
		// Pull reed switch off and Push reed switch off
		eff -> update_actual_status[0x04].U16 = 0;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2200      	movs	r2, #0
 8001022:	81da      	strh	r2, [r3, #14]
//		registerFrame[0x04] = 0;
	}
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <Update_joy>:
 *      Author: naker
 */

#include "joy.h"

void Update_joy(JOY *joy){
 8001030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001034:	b084      	sub	sp, #16
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
	uint8_t s_1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 800103a:	2120      	movs	r1, #32
 800103c:	4835      	ldr	r0, [pc, #212]	@ (8001114 <Update_joy+0xe4>)
 800103e:	f004 fe91 	bl	8005d64 <HAL_GPIO_ReadPin>
 8001042:	4603      	mov	r3, r0
 8001044:	73fb      	strb	r3, [r7, #15]
	uint8_t s_2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8001046:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800104a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800104e:	f004 fe89 	bl	8005d64 <HAL_GPIO_ReadPin>
 8001052:	4603      	mov	r3, r0
 8001054:	73bb      	strb	r3, [r7, #14]
	uint8_t s_3 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4);
 8001056:	2110      	movs	r1, #16
 8001058:	482f      	ldr	r0, [pc, #188]	@ (8001118 <Update_joy+0xe8>)
 800105a:	f004 fe83 	bl	8005d64 <HAL_GPIO_ReadPin>
 800105e:	4603      	mov	r3, r0
 8001060:	737b      	strb	r3, [r7, #13]
	uint8_t s_4 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8001062:	2120      	movs	r1, #32
 8001064:	482c      	ldr	r0, [pc, #176]	@ (8001118 <Update_joy+0xe8>)
 8001066:	f004 fe7d 	bl	8005d64 <HAL_GPIO_ReadPin>
 800106a:	4603      	mov	r3, r0
 800106c:	733b      	strb	r3, [r7, #12]
	if(!s_1 || !s_2 || !s_3 || !s_4){
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d008      	beq.n	8001086 <Update_joy+0x56>
 8001074:	7bbb      	ldrb	r3, [r7, #14]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d005      	beq.n	8001086 <Update_joy+0x56>
 800107a:	7b7b      	ldrb	r3, [r7, #13]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d002      	beq.n	8001086 <Update_joy+0x56>
 8001080:	7b3b      	ldrb	r3, [r7, #12]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d133      	bne.n	80010ee <Update_joy+0xbe>
		static uint8_t is_first = 1;
		static uint64_t timestamp = 0;
		if(is_first){
 8001086:	4b25      	ldr	r3, [pc, #148]	@ (800111c <Update_joy+0xec>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d00c      	beq.n	80010a8 <Update_joy+0x78>
			timestamp = HAL_GetTick() + 50;
 800108e:	f002 fa77 	bl	8003580 <HAL_GetTick>
 8001092:	4603      	mov	r3, r0
 8001094:	3332      	adds	r3, #50	@ 0x32
 8001096:	2200      	movs	r2, #0
 8001098:	469a      	mov	sl, r3
 800109a:	4693      	mov	fp, r2
 800109c:	4b20      	ldr	r3, [pc, #128]	@ (8001120 <Update_joy+0xf0>)
 800109e:	e9c3 ab00 	strd	sl, fp, [r3]
			is_first = 0;
 80010a2:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <Update_joy+0xec>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() > timestamp){
 80010a8:	f002 fa6a 	bl	8003580 <HAL_GetTick>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2200      	movs	r2, #0
 80010b0:	461c      	mov	r4, r3
 80010b2:	4615      	mov	r5, r2
 80010b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001120 <Update_joy+0xf0>)
 80010b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ba:	42a2      	cmp	r2, r4
 80010bc:	41ab      	sbcs	r3, r5
 80010be:	d223      	bcs.n	8001108 <Update_joy+0xd8>
			timestamp = HAL_GetTick() + 50;
 80010c0:	f002 fa5e 	bl	8003580 <HAL_GetTick>
 80010c4:	4603      	mov	r3, r0
 80010c6:	3332      	adds	r3, #50	@ 0x32
 80010c8:	2200      	movs	r2, #0
 80010ca:	4698      	mov	r8, r3
 80010cc:	4691      	mov	r9, r2
 80010ce:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <Update_joy+0xf0>)
 80010d0:	e9c3 8900 	strd	r8, r9, [r3]
			joy -> s_1 = s_1;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	7bfa      	ldrb	r2, [r7, #15]
 80010d8:	701a      	strb	r2, [r3, #0]
			joy -> s_2 = s_2;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	7bba      	ldrb	r2, [r7, #14]
 80010de:	705a      	strb	r2, [r3, #1]
			joy -> s_3 = s_3;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	7b7a      	ldrb	r2, [r7, #13]
 80010e4:	709a      	strb	r2, [r3, #2]
			joy -> s_4 = s_4;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	7b3a      	ldrb	r2, [r7, #12]
 80010ea:	70da      	strb	r2, [r3, #3]
	if(!s_1 || !s_2 || !s_3 || !s_4){
 80010ec:	e00c      	b.n	8001108 <Update_joy+0xd8>
		}
	}else{
		joy -> s_1 = 1;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]
		joy -> s_2 = 1;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2201      	movs	r2, #1
 80010f8:	705a      	strb	r2, [r3, #1]
		joy -> s_3 = 1;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2201      	movs	r2, #1
 80010fe:	709a      	strb	r2, [r3, #2]
		joy -> s_4 = 1;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2201      	movs	r2, #1
 8001104:	70da      	strb	r2, [r3, #3]
	}
}
 8001106:	e000      	b.n	800110a <Update_joy+0xda>
	if(!s_1 || !s_2 || !s_3 || !s_4){
 8001108:	bf00      	nop
}
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001114:	48000400 	.word	0x48000400
 8001118:	48000800 	.word	0x48000800
 800111c:	20000028 	.word	0x20000028
 8001120:	20000558 	.word	0x20000558

08001124 <Kalman_Start>:
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
	  filter->Kalman_Speed = filter->X_k[1];
	  return  filter->Kalman_Speed;
}

void Kalman_Start(KalmanFilter* filter){
 8001124:	b5b0      	push	{r4, r5, r7, lr}
 8001126:	b0b4      	sub	sp, #208	@ 0xd0
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	filter->Q = 100.0f;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a42      	ldr	r2, [pc, #264]	@ (8001238 <Kalman_Start+0x114>)
 8001130:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = 1.0f;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800113a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t a[16] = {1.0f, 0.000999981278535715f, -0.000114956304180341f, 7.18067814869762e-06f,
 800113e:	4b3f      	ldr	r3, [pc, #252]	@ (800123c <Kalman_Start+0x118>)
 8001140:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8001144:	461d      	mov	r5, r3
 8001146:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800114a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800114c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800114e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001150:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001152:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001156:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	                   0.0f, 0.999950617296464f,   -0.229910715302858f, 0.0143220709019020f,
	                   0.0f, 0.0f   ,   1.0f  , 0.0f,
	                   0.0f,-0.00496113160650046f, 0.000571883719539551f, 0.983689934032327f};

	float32_t b[4] = {	1.90888950589463e-07f,
 800115a:	4b39      	ldr	r3, [pc, #228]	@ (8001240 <Kalman_Start+0x11c>)
 800115c:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8001160:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001162:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
						0.000571883719539551f,
						0.0f,
						0.0789912369575374f};

	float32_t c[4] = {0.0f, 1.0f, 0.0f, 0.0f};
 8001166:	f04f 0300 	mov.w	r3, #0
 800116a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800116c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001170:	673b      	str	r3, [r7, #112]	@ 0x70
 8001172:	f04f 0300 	mov.w	r3, #0
 8001176:	677b      	str	r3, [r7, #116]	@ 0x74
 8001178:	f04f 0300 	mov.w	r3, #0
 800117c:	67bb      	str	r3, [r7, #120]	@ 0x78

	float32_t g[4] = {0.0f,
 800117e:	f04f 0300 	mov.w	r3, #0
 8001182:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001184:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001188:	663b      	str	r3, [r7, #96]	@ 0x60
 800118a:	f04f 0300 	mov.w	r3, #0
 800118e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	66bb      	str	r3, [r7, #104]	@ 0x68
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8001196:	4b2b      	ldr	r3, [pc, #172]	@ (8001244 <Kalman_Start+0x120>)
 8001198:	f107 041c 	add.w	r4, r7, #28
 800119c:	461d      	mov	r5, r3
 800119e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f04f 0200 	mov.w	r2, #0
 80011c6:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80011d0:	e029      	b.n	8001226 <Kalman_Start+0x102>
	{
		filter->A[i] = a[i];
 80011d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	33d0      	adds	r3, #208	@ 0xd0
 80011da:	443b      	add	r3, r7
 80011dc:	3b44      	subs	r3, #68	@ 0x44
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	6879      	ldr	r1, [r7, #4]
 80011e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80011e6:	3314      	adds	r3, #20
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	440b      	add	r3, r1
 80011ec:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 80011ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	33d0      	adds	r3, #208	@ 0xd0
 80011f6:	443b      	add	r3, r7
 80011f8:	3bb4      	subs	r3, #180	@ 0xb4
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001202:	3398      	adds	r3, #152	@ 0x98
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	440b      	add	r3, r1
 8001208:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001210:	3304      	adds	r3, #4
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 800121c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001220:	3301      	adds	r3, #1
 8001222:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001226:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800122a:	2b0f      	cmp	r3, #15
 800122c:	ddd1      	ble.n	80011d2 <Kalman_Start+0xae>
	}

	for(i=0;i<4;i++)
 800122e:	2300      	movs	r3, #0
 8001230:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001234:	e044      	b.n	80012c0 <Kalman_Start+0x19c>
 8001236:	bf00      	nop
 8001238:	42c80000 	.word	0x42c80000
 800123c:	0800ad64 	.word	0x0800ad64
 8001240:	0800ada4 	.word	0x0800ada4
 8001244:	0800adb4 	.word	0x0800adb4
	{
		filter->X_k[i] = x_k[i];
 8001248:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	33d0      	adds	r3, #208	@ 0xd0
 8001250:	443b      	add	r3, r7
 8001252:	3bc4      	subs	r3, #196	@ 0xc4
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	440b      	add	r3, r1
 8001260:	601a      	str	r2, [r3, #0]
		filter->B[i] = b[i];
 8001262:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	33d0      	adds	r3, #208	@ 0xd0
 800126a:	443b      	add	r3, r7
 800126c:	3b54      	subs	r3, #84	@ 0x54
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001276:	3324      	adds	r3, #36	@ 0x24
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	440b      	add	r3, r1
 800127c:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 800127e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	33d0      	adds	r3, #208	@ 0xd0
 8001286:	443b      	add	r3, r7
 8001288:	3b64      	subs	r3, #100	@ 0x64
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001292:	3328      	adds	r3, #40	@ 0x28
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	440b      	add	r3, r1
 8001298:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 800129a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	33d0      	adds	r3, #208	@ 0xd0
 80012a2:	443b      	add	r3, r7
 80012a4:	3b74      	subs	r3, #116	@ 0x74
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80012ae:	332c      	adds	r3, #44	@ 0x2c
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	440b      	add	r3, r1
 80012b4:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 80012b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80012ba:	3301      	adds	r3, #1
 80012bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80012c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	ddbf      	ble.n	8001248 <Kalman_Start+0x124>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2201      	movs	r2, #1
 80012d2:	2104      	movs	r1, #4
 80012d4:	f009 fcc4 	bl	800ac60 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3310      	adds	r3, #16
 80012e2:	2204      	movs	r2, #4
 80012e4:	2104      	movs	r1, #4
 80012e6:	f009 fcbb 	bl	800ac60 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3350      	adds	r3, #80	@ 0x50
 80012f4:	2204      	movs	r2, #4
 80012f6:	2104      	movs	r1, #4
 80012f8:	f009 fcb2 	bl	800ac60 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3390      	adds	r3, #144	@ 0x90
 8001306:	2201      	movs	r2, #1
 8001308:	2104      	movs	r1, #4
 800130a:	f009 fca9 	bl	800ac60 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	33a0      	adds	r3, #160	@ 0xa0
 8001318:	2204      	movs	r2, #4
 800131a:	2101      	movs	r1, #1
 800131c:	f009 fca0 	bl	800ac60 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	33b0      	adds	r3, #176	@ 0xb0
 800132a:	2201      	movs	r2, #1
 800132c:	2104      	movs	r1, #4
 800132e:	f009 fc97 	bl	800ac60 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	33c8      	adds	r3, #200	@ 0xc8
 800133c:	2204      	movs	r2, #4
 800133e:	2104      	movs	r1, #4
 8001340:	f009 fc8e 	bl	800ac60 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8001350:	2201      	movs	r2, #1
 8001352:	2104      	movs	r1, #4
 8001354:	f009 fc84 	bl	800ac60 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8001364:	2204      	movs	r2, #4
 8001366:	2101      	movs	r1, #1
 8001368:	f009 fc7a 	bl	800ac60 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001378:	2204      	movs	r2, #4
 800137a:	2104      	movs	r1, #4
 800137c:	f009 fc70 	bl	800ac60 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800138c:	2204      	movs	r2, #4
 800138e:	2104      	movs	r1, #4
 8001390:	f009 fc66 	bl	800ac60 <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80013a0:	2201      	movs	r2, #1
 80013a2:	2104      	movs	r1, #4
 80013a4:	f009 fc5c 	bl	800ac60 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 80013b4:	2201      	movs	r2, #1
 80013b6:	2104      	movs	r1, #4
 80013b8:	f009 fc52 	bl	800ac60 <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80013c8:	2204      	movs	r2, #4
 80013ca:	2101      	movs	r1, #1
 80013cc:	f009 fc48 	bl	800ac60 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80013dc:	2201      	movs	r2, #1
 80013de:	2101      	movs	r1, #1
 80013e0:	f009 fc3e 	bl	800ac60 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 80013f0:	2201      	movs	r2, #1
 80013f2:	2101      	movs	r1, #1
 80013f4:	f009 fc34 	bl	800ac60 <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8001404:	2201      	movs	r2, #1
 8001406:	2104      	movs	r1, #4
 8001408:	f009 fc2a 	bl	800ac60 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8001418:	2201      	movs	r2, #1
 800141a:	2104      	movs	r1, #4
 800141c:	f009 fc20 	bl	800ac60 <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800142c:	2201      	movs	r2, #1
 800142e:	2101      	movs	r1, #1
 8001430:	f009 fc16 	bl	800ac60 <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8001440:	2201      	movs	r2, #1
 8001442:	2101      	movs	r1, #1
 8001444:	f009 fc0c 	bl	800ac60 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8001454:	2201      	movs	r2, #1
 8001456:	2101      	movs	r1, #1
 8001458:	f009 fc02 	bl	800ac60 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8001468:	2201      	movs	r2, #1
 800146a:	2104      	movs	r1, #4
 800146c:	f009 fbf8 	bl	800ac60 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800147c:	2201      	movs	r2, #1
 800147e:	2101      	movs	r1, #1
 8001480:	f009 fbee 	bl	800ac60 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001490:	2204      	movs	r2, #4
 8001492:	2104      	movs	r1, #4
 8001494:	f009 fbe4 	bl	800ac60 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	33c4      	adds	r3, #196	@ 0xc4
 80014a2:	2201      	movs	r2, #1
 80014a4:	2101      	movs	r1, #1
 80014a6:	f009 fbdb 	bl	800ac60 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 80014b6:	2201      	movs	r2, #1
 80014b8:	2101      	movs	r1, #1
 80014ba:	f009 fbd1 	bl	800ac60 <arm_mat_init_f32>
}
 80014be:	bf00      	nop
 80014c0:	37d0      	adds	r7, #208	@ 0xd0
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bdb0      	pop	{r4, r5, r7, pc}
 80014c6:	bf00      	nop

080014c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014cc:	f001 fff3 	bl	80034b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d0:	f000 f8b2 	bl	8001638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d4:	f000 fbd4 	bl	8001c80 <MX_GPIO_Init>
  MX_DMA_Init();
 80014d8:	f000 fb90 	bl	8001bfc <MX_DMA_Init>
  MX_TIM1_Init();
 80014dc:	f000 f96e 	bl	80017bc <MX_TIM1_Init>
  MX_TIM3_Init();
 80014e0:	f000 fa1c 	bl	800191c <MX_TIM3_Init>
  MX_TIM4_Init();
 80014e4:	f000 fa68 	bl	80019b8 <MX_TIM4_Init>
  MX_ADC1_Init();
 80014e8:	f000 f8f0 	bl	80016cc <MX_ADC1_Init>
  MX_TIM5_Init();
 80014ec:	f000 faba 	bl	8001a64 <MX_TIM5_Init>
  MX_TIM16_Init();
 80014f0:	f000 fb06 	bl	8001b00 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80014f4:	f000 fb34 	bl	8001b60 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Modbus setting
  hmodbus.huart = &huart2;
 80014f8:	4b35      	ldr	r3, [pc, #212]	@ (80015d0 <main+0x108>)
 80014fa:	4a36      	ldr	r2, [pc, #216]	@ (80015d4 <main+0x10c>)
 80014fc:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 80014fe:	4b34      	ldr	r3, [pc, #208]	@ (80015d0 <main+0x108>)
 8001500:	4a35      	ldr	r2, [pc, #212]	@ (80015d8 <main+0x110>)
 8001502:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8001504:	4b32      	ldr	r3, [pc, #200]	@ (80015d0 <main+0x108>)
 8001506:	2215      	movs	r2, #21
 8001508:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 800150a:	4b31      	ldr	r3, [pc, #196]	@ (80015d0 <main+0x108>)
 800150c:	22c8      	movs	r2, #200	@ 0xc8
 800150e:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8001510:	4932      	ldr	r1, [pc, #200]	@ (80015dc <main+0x114>)
 8001512:	482f      	ldr	r0, [pc, #188]	@ (80015d0 <main+0x108>)
 8001514:	f7ff fcec 	bl	8000ef0 <Modbus_init>
  registerFrame[0x00].U16 = 22881; // Set default heart beat to "Ya"
 8001518:	4b30      	ldr	r3, [pc, #192]	@ (80015dc <main+0x114>)
 800151a:	f645 1261 	movw	r2, #22881	@ 0x5961
 800151e:	801a      	strh	r2, [r3, #0]
  // Update MODBUS timer
  HAL_TIM_Base_Start_IT(&modbus_tim);
 8001520:	482f      	ldr	r0, [pc, #188]	@ (80015e0 <main+0x118>)
 8001522:	f005 fd6b 	bl	8006ffc <HAL_TIM_Base_Start_IT>

  // Update command timer
  HAL_TIM_Base_Start_IT(&main_loop_tim);
 8001526:	482f      	ldr	r0, [pc, #188]	@ (80015e4 <main+0x11c>)
 8001528:	f005 fd68 	bl	8006ffc <HAL_TIM_Base_Start_IT>

  // PWM generator
  HAL_TIM_Base_Start(&pwm_tim);
 800152c:	482e      	ldr	r0, [pc, #184]	@ (80015e8 <main+0x120>)
 800152e:	f005 fcf5 	bl	8006f1c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&pwm_tim, pwm_channel);
 8001532:	2100      	movs	r1, #0
 8001534:	482c      	ldr	r0, [pc, #176]	@ (80015e8 <main+0x120>)
 8001536:	f005 fe47 	bl	80071c8 <HAL_TIM_PWM_Start>

  // Encoder reader
  HAL_TIM_Encoder_Start(&encoder_tim, encoder_channel);
 800153a:	213c      	movs	r1, #60	@ 0x3c
 800153c:	482b      	ldr	r0, [pc, #172]	@ (80015ec <main+0x124>)
 800153e:	f006 f8ff 	bl	8007740 <HAL_TIM_Encoder_Start>
  QEI_init(&encoder, encoder_ppr, encoder_frequency, encoder_cnt_period);
 8001542:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001546:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800154a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800154e:	4828      	ldr	r0, [pc, #160]	@ (80015f0 <main+0x128>)
 8001550:	f001 f897 	bl	8002682 <QEI_init>

  // Current reader
  ADC_init(&current_adc, &current_sensor);
 8001554:	4927      	ldr	r1, [pc, #156]	@ (80015f4 <main+0x12c>)
 8001556:	4828      	ldr	r0, [pc, #160]	@ (80015f8 <main+0x130>)
 8001558:	f7ff fd20 	bl	8000f9c <ADC_init>

  // Position PID
  PID_init(&p_pid, p_kp, p_ki, p_kd, 0.005);
 800155c:	4b27      	ldr	r3, [pc, #156]	@ (80015fc <main+0x134>)
 800155e:	edd3 7a00 	vldr	s15, [r3]
 8001562:	4b27      	ldr	r3, [pc, #156]	@ (8001600 <main+0x138>)
 8001564:	ed93 7a00 	vldr	s14, [r3]
 8001568:	4b26      	ldr	r3, [pc, #152]	@ (8001604 <main+0x13c>)
 800156a:	edd3 6a00 	vldr	s13, [r3]
 800156e:	eddf 1a26 	vldr	s3, [pc, #152]	@ 8001608 <main+0x140>
 8001572:	eeb0 1a66 	vmov.f32	s2, s13
 8001576:	eef0 0a47 	vmov.f32	s1, s14
 800157a:	eeb0 0a67 	vmov.f32	s0, s15
 800157e:	4823      	ldr	r0, [pc, #140]	@ (800160c <main+0x144>)
 8001580:	f000 fed4 	bl	800232c <PID_init>
  PID_init(&v_pid, v_kp, v_ki, v_kd, 0.001);
 8001584:	4b22      	ldr	r3, [pc, #136]	@ (8001610 <main+0x148>)
 8001586:	edd3 7a00 	vldr	s15, [r3]
 800158a:	4b22      	ldr	r3, [pc, #136]	@ (8001614 <main+0x14c>)
 800158c:	ed93 7a00 	vldr	s14, [r3]
 8001590:	4b21      	ldr	r3, [pc, #132]	@ (8001618 <main+0x150>)
 8001592:	edd3 6a00 	vldr	s13, [r3]
 8001596:	eddf 1a21 	vldr	s3, [pc, #132]	@ 800161c <main+0x154>
 800159a:	eeb0 1a66 	vmov.f32	s2, s13
 800159e:	eef0 0a47 	vmov.f32	s1, s14
 80015a2:	eeb0 0a67 	vmov.f32	s0, s15
 80015a6:	481e      	ldr	r0, [pc, #120]	@ (8001620 <main+0x158>)
 80015a8:	f000 fec0 	bl	800232c <PID_init>

  // Kalman filter
  Kalman_Start(&kalman);
 80015ac:	481d      	ldr	r0, [pc, #116]	@ (8001624 <main+0x15c>)
 80015ae:	f7ff fdb9 	bl	8001124 <Kalman_Start>

  // State initialize
  homing_init(&home);
 80015b2:	481d      	ldr	r0, [pc, #116]	@ (8001628 <main+0x160>)
 80015b4:	f001 fa2e 	bl	8002a14 <homing_init>
  point_init(&point);
 80015b8:	481c      	ldr	r0, [pc, #112]	@ (800162c <main+0x164>)
 80015ba:	f001 fa1a 	bl	80029f2 <point_init>
  emer_init(&emer);
 80015be:	481c      	ldr	r0, [pc, #112]	@ (8001630 <main+0x168>)
 80015c0:	f001 fbdb 	bl	8002d7a <emer_init>

  //Set point
  set_point = 0.0;
 80015c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001634 <main+0x16c>)
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <main+0x104>
 80015d0:	20000078 	.word	0x20000078
 80015d4:	20000a88 	.word	0x20000a88
 80015d8:	2000095c 	.word	0x2000095c
 80015dc:	20000c74 	.word	0x20000c74
 80015e0:	20000890 	.word	0x20000890
 80015e4:	200006f8 	.word	0x200006f8
 80015e8:	2000062c 	.word	0x2000062c
 80015ec:	200007c4 	.word	0x200007c4
 80015f0:	20001078 	.word	0x20001078
 80015f4:	20000fa4 	.word	0x20000fa4
 80015f8:	20000560 	.word	0x20000560
 80015fc:	20000048 	.word	0x20000048
 8001600:	20001104 	.word	0x20001104
 8001604:	20001108 	.word	0x20001108
 8001608:	3ba3d70a 	.word	0x3ba3d70a
 800160c:	200010f0 	.word	0x200010f0
 8001610:	20000040 	.word	0x20000040
 8001614:	20000044 	.word	0x20000044
 8001618:	200010e4 	.word	0x200010e4
 800161c:	3a83126f 	.word	0x3a83126f
 8001620:	200010d0 	.word	0x200010d0
 8001624:	2000110c 	.word	0x2000110c
 8001628:	20000c58 	.word	0x20000c58
 800162c:	20000c50 	.word	0x20000c50
 8001630:	20000c70 	.word	0x20000c70
 8001634:	20000c48 	.word	0x20000c48

08001638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b094      	sub	sp, #80	@ 0x50
 800163c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163e:	f107 0318 	add.w	r3, r7, #24
 8001642:	2238      	movs	r2, #56	@ 0x38
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f009 fb22 	bl	800ac90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
 8001658:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800165a:	2000      	movs	r0, #0
 800165c:	f004 fbca 	bl	8005df4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001660:	2301      	movs	r3, #1
 8001662:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001664:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001668:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800166a:	2302      	movs	r3, #2
 800166c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800166e:	2303      	movs	r3, #3
 8001670:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001672:	2306      	movs	r3, #6
 8001674:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001676:	2355      	movs	r3, #85	@ 0x55
 8001678:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800167a:	2302      	movs	r3, #2
 800167c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800167e:	2302      	movs	r3, #2
 8001680:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001682:	2302      	movs	r3, #2
 8001684:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001686:	f107 0318 	add.w	r3, r7, #24
 800168a:	4618      	mov	r0, r3
 800168c:	f004 fc66 	bl	8005f5c <HAL_RCC_OscConfig>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001696:	f000 fe43 	bl	8002320 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800169a:	230f      	movs	r3, #15
 800169c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800169e:	2303      	movs	r3, #3
 80016a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	2104      	movs	r1, #4
 80016b2:	4618      	mov	r0, r3
 80016b4:	f004 ff64 	bl	8006580 <HAL_RCC_ClockConfig>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80016be:	f000 fe2f 	bl	8002320 <Error_Handler>
  }
}
 80016c2:	bf00      	nop
 80016c4:	3750      	adds	r7, #80	@ 0x50
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08c      	sub	sp, #48	@ 0x30
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80016d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	2220      	movs	r2, #32
 80016e2:	2100      	movs	r1, #0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f009 fad3 	bl	800ac90 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016ea:	4b32      	ldr	r3, [pc, #200]	@ (80017b4 <MX_ADC1_Init+0xe8>)
 80016ec:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80016f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016f2:	4b30      	ldr	r3, [pc, #192]	@ (80017b4 <MX_ADC1_Init+0xe8>)
 80016f4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80016f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016fa:	4b2e      	ldr	r3, [pc, #184]	@ (80017b4 <MX_ADC1_Init+0xe8>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001700:	4b2c      	ldr	r3, [pc, #176]	@ (80017b4 <MX_ADC1_Init+0xe8>)
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001706:	4b2b      	ldr	r3, [pc, #172]	@ (80017b4 <MX_ADC1_Init+0xe8>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800170c:	4b29      	ldr	r3, [pc, #164]	@ (80017b4 <MX_ADC1_Init+0xe8>)
 800170e:	2200      	movs	r2, #0
 8001710:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001712:	4b28      	ldr	r3, [pc, #160]	@ (80017b4 <MX_ADC1_Init+0xe8>)
 8001714:	2204      	movs	r2, #4
 8001716:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001718:	4b26      	ldr	r3, [pc, #152]	@ (80017b4 <MX_ADC1_Init+0xe8>)
 800171a:	2200      	movs	r2, #0
 800171c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800171e:	4b25      	ldr	r3, [pc, #148]	@ (80017b4 <MX_ADC1_Init+0xe8>)
 8001720:	2201      	movs	r2, #1
 8001722:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001724:	4b23      	ldr	r3, [pc, #140]	@ (80017b4 <MX_ADC1_Init+0xe8>)
 8001726:	2201      	movs	r2, #1
 8001728:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800172a:	4b22      	ldr	r3, [pc, #136]	@ (80017b4 <MX_ADC1_Init+0xe8>)
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001732:	4b20      	ldr	r3, [pc, #128]	@ (80017b4 <MX_ADC1_Init+0xe8>)
 8001734:	2200      	movs	r2, #0
 8001736:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001738:	4b1e      	ldr	r3, [pc, #120]	@ (80017b4 <MX_ADC1_Init+0xe8>)
 800173a:	2200      	movs	r2, #0
 800173c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800173e:	4b1d      	ldr	r3, [pc, #116]	@ (80017b4 <MX_ADC1_Init+0xe8>)
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001746:	4b1b      	ldr	r3, [pc, #108]	@ (80017b4 <MX_ADC1_Init+0xe8>)
 8001748:	2200      	movs	r2, #0
 800174a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800174c:	4b19      	ldr	r3, [pc, #100]	@ (80017b4 <MX_ADC1_Init+0xe8>)
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001754:	4817      	ldr	r0, [pc, #92]	@ (80017b4 <MX_ADC1_Init+0xe8>)
 8001756:	f002 f95f 	bl	8003a18 <HAL_ADC_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001760:	f000 fdde 	bl	8002320 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001764:	2300      	movs	r3, #0
 8001766:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001768:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800176c:	4619      	mov	r1, r3
 800176e:	4811      	ldr	r0, [pc, #68]	@ (80017b4 <MX_ADC1_Init+0xe8>)
 8001770:	f003 fc2c 	bl	8004fcc <HAL_ADCEx_MultiModeConfigChannel>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800177a:	f000 fdd1 	bl	8002320 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800177e:	4b0e      	ldr	r3, [pc, #56]	@ (80017b8 <MX_ADC1_Init+0xec>)
 8001780:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001782:	2306      	movs	r3, #6
 8001784:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800178a:	237f      	movs	r3, #127	@ 0x7f
 800178c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800178e:	2304      	movs	r3, #4
 8001790:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	4619      	mov	r1, r3
 800179a:	4806      	ldr	r0, [pc, #24]	@ (80017b4 <MX_ADC1_Init+0xe8>)
 800179c:	f002 fe54 	bl	8004448 <HAL_ADC_ConfigChannel>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80017a6:	f000 fdbb 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	3730      	adds	r7, #48	@ 0x30
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000560 	.word	0x20000560
 80017b8:	04300002 	.word	0x04300002

080017bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b09c      	sub	sp, #112	@ 0x70
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017c2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017dc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
 80017ec:	615a      	str	r2, [r3, #20]
 80017ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	2234      	movs	r2, #52	@ 0x34
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f009 fa4a 	bl	800ac90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017fc:	4b45      	ldr	r3, [pc, #276]	@ (8001914 <MX_TIM1_Init+0x158>)
 80017fe:	4a46      	ldr	r2, [pc, #280]	@ (8001918 <MX_TIM1_Init+0x15c>)
 8001800:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8001802:	4b44      	ldr	r3, [pc, #272]	@ (8001914 <MX_TIM1_Init+0x158>)
 8001804:	22a9      	movs	r2, #169	@ 0xa9
 8001806:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001808:	4b42      	ldr	r3, [pc, #264]	@ (8001914 <MX_TIM1_Init+0x158>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800180e:	4b41      	ldr	r3, [pc, #260]	@ (8001914 <MX_TIM1_Init+0x158>)
 8001810:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001814:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001816:	4b3f      	ldr	r3, [pc, #252]	@ (8001914 <MX_TIM1_Init+0x158>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800181c:	4b3d      	ldr	r3, [pc, #244]	@ (8001914 <MX_TIM1_Init+0x158>)
 800181e:	2200      	movs	r2, #0
 8001820:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001822:	4b3c      	ldr	r3, [pc, #240]	@ (8001914 <MX_TIM1_Init+0x158>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001828:	483a      	ldr	r0, [pc, #232]	@ (8001914 <MX_TIM1_Init+0x158>)
 800182a:	f005 fb13 	bl	8006e54 <HAL_TIM_Base_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001834:	f000 fd74 	bl	8002320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001838:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800183c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800183e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001842:	4619      	mov	r1, r3
 8001844:	4833      	ldr	r0, [pc, #204]	@ (8001914 <MX_TIM1_Init+0x158>)
 8001846:	f006 fa97 	bl	8007d78 <HAL_TIM_ConfigClockSource>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001850:	f000 fd66 	bl	8002320 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001854:	482f      	ldr	r0, [pc, #188]	@ (8001914 <MX_TIM1_Init+0x158>)
 8001856:	f005 fc49 	bl	80070ec <HAL_TIM_PWM_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001860:	f000 fd5e 	bl	8002320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001864:	2300      	movs	r3, #0
 8001866:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001868:	2300      	movs	r3, #0
 800186a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186c:	2300      	movs	r3, #0
 800186e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001870:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001874:	4619      	mov	r1, r3
 8001876:	4827      	ldr	r0, [pc, #156]	@ (8001914 <MX_TIM1_Init+0x158>)
 8001878:	f007 fa64 	bl	8008d44 <HAL_TIMEx_MasterConfigSynchronization>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001882:	f000 fd4d 	bl	8002320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001886:	2360      	movs	r3, #96	@ 0x60
 8001888:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800188e:	2300      	movs	r3, #0
 8001890:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001892:	2300      	movs	r3, #0
 8001894:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001896:	2304      	movs	r3, #4
 8001898:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800189a:	2300      	movs	r3, #0
 800189c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800189e:	2300      	movs	r3, #0
 80018a0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018a2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80018a6:	2200      	movs	r2, #0
 80018a8:	4619      	mov	r1, r3
 80018aa:	481a      	ldr	r0, [pc, #104]	@ (8001914 <MX_TIM1_Init+0x158>)
 80018ac:	f006 f950 	bl	8007b50 <HAL_TIM_PWM_ConfigChannel>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80018b6:	f000 fd33 	bl	8002320 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018d2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80018d8:	2300      	movs	r3, #0
 80018da:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80018ea:	2300      	movs	r3, #0
 80018ec:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	4619      	mov	r1, r3
 80018f6:	4807      	ldr	r0, [pc, #28]	@ (8001914 <MX_TIM1_Init+0x158>)
 80018f8:	f007 faba 	bl	8008e70 <HAL_TIMEx_ConfigBreakDeadTime>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8001902:	f000 fd0d 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001906:	4803      	ldr	r0, [pc, #12]	@ (8001914 <MX_TIM1_Init+0x158>)
 8001908:	f001 fc02 	bl	8003110 <HAL_TIM_MspPostInit>

}
 800190c:	bf00      	nop
 800190e:	3770      	adds	r7, #112	@ 0x70
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	2000062c 	.word	0x2000062c
 8001918:	40012c00 	.word	0x40012c00

0800191c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001922:	f107 0310 	add.w	r3, r7, #16
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	609a      	str	r2, [r3, #8]
 800192e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800193a:	4b1d      	ldr	r3, [pc, #116]	@ (80019b0 <MX_TIM3_Init+0x94>)
 800193c:	4a1d      	ldr	r2, [pc, #116]	@ (80019b4 <MX_TIM3_Init+0x98>)
 800193e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001940:	4b1b      	ldr	r3, [pc, #108]	@ (80019b0 <MX_TIM3_Init+0x94>)
 8001942:	22a9      	movs	r2, #169	@ 0xa9
 8001944:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001946:	4b1a      	ldr	r3, [pc, #104]	@ (80019b0 <MX_TIM3_Init+0x94>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800194c:	4b18      	ldr	r3, [pc, #96]	@ (80019b0 <MX_TIM3_Init+0x94>)
 800194e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001952:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001954:	4b16      	ldr	r3, [pc, #88]	@ (80019b0 <MX_TIM3_Init+0x94>)
 8001956:	2200      	movs	r2, #0
 8001958:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195a:	4b15      	ldr	r3, [pc, #84]	@ (80019b0 <MX_TIM3_Init+0x94>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001960:	4813      	ldr	r0, [pc, #76]	@ (80019b0 <MX_TIM3_Init+0x94>)
 8001962:	f005 fa77 	bl	8006e54 <HAL_TIM_Base_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800196c:	f000 fcd8 	bl	8002320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001970:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001974:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001976:	f107 0310 	add.w	r3, r7, #16
 800197a:	4619      	mov	r1, r3
 800197c:	480c      	ldr	r0, [pc, #48]	@ (80019b0 <MX_TIM3_Init+0x94>)
 800197e:	f006 f9fb 	bl	8007d78 <HAL_TIM_ConfigClockSource>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001988:	f000 fcca 	bl	8002320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198c:	2300      	movs	r3, #0
 800198e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	4619      	mov	r1, r3
 8001998:	4805      	ldr	r0, [pc, #20]	@ (80019b0 <MX_TIM3_Init+0x94>)
 800199a:	f007 f9d3 	bl	8008d44 <HAL_TIMEx_MasterConfigSynchronization>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80019a4:	f000 fcbc 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019a8:	bf00      	nop
 80019aa:	3720      	adds	r7, #32
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	200006f8 	.word	0x200006f8
 80019b4:	40000400 	.word	0x40000400

080019b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08c      	sub	sp, #48	@ 0x30
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019be:	f107 030c 	add.w	r3, r7, #12
 80019c2:	2224      	movs	r2, #36	@ 0x24
 80019c4:	2100      	movs	r1, #0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f009 f962 	bl	800ac90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019cc:	463b      	mov	r3, r7
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019d6:	4b21      	ldr	r3, [pc, #132]	@ (8001a5c <MX_TIM4_Init+0xa4>)
 80019d8:	4a21      	ldr	r2, [pc, #132]	@ (8001a60 <MX_TIM4_Init+0xa8>)
 80019da:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80019dc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a5c <MX_TIM4_Init+0xa4>)
 80019de:	2200      	movs	r2, #0
 80019e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a5c <MX_TIM4_Init+0xa4>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80019e8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a5c <MX_TIM4_Init+0xa4>)
 80019ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a5c <MX_TIM4_Init+0xa4>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f6:	4b19      	ldr	r3, [pc, #100]	@ (8001a5c <MX_TIM4_Init+0xa4>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019fc:	2303      	movs	r3, #3
 80019fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a00:	2300      	movs	r3, #0
 8001a02:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a04:	2301      	movs	r3, #1
 8001a06:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a10:	2300      	movs	r3, #0
 8001a12:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a14:	2301      	movs	r3, #1
 8001a16:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001a20:	f107 030c 	add.w	r3, r7, #12
 8001a24:	4619      	mov	r1, r3
 8001a26:	480d      	ldr	r0, [pc, #52]	@ (8001a5c <MX_TIM4_Init+0xa4>)
 8001a28:	f005 fdd6 	bl	80075d8 <HAL_TIM_Encoder_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001a32:	f000 fc75 	bl	8002320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a36:	2300      	movs	r3, #0
 8001a38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a3e:	463b      	mov	r3, r7
 8001a40:	4619      	mov	r1, r3
 8001a42:	4806      	ldr	r0, [pc, #24]	@ (8001a5c <MX_TIM4_Init+0xa4>)
 8001a44:	f007 f97e 	bl	8008d44 <HAL_TIMEx_MasterConfigSynchronization>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001a4e:	f000 fc67 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a52:	bf00      	nop
 8001a54:	3730      	adds	r7, #48	@ 0x30
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200007c4 	.word	0x200007c4
 8001a60:	40000800 	.word	0x40000800

08001a64 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6a:	f107 0310 	add.w	r3, r7, #16
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a82:	4b1d      	ldr	r3, [pc, #116]	@ (8001af8 <MX_TIM5_Init+0x94>)
 8001a84:	4a1d      	ldr	r2, [pc, #116]	@ (8001afc <MX_TIM5_Init+0x98>)
 8001a86:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8001a88:	4b1b      	ldr	r3, [pc, #108]	@ (8001af8 <MX_TIM5_Init+0x94>)
 8001a8a:	22a9      	movs	r2, #169	@ 0xa9
 8001a8c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001af8 <MX_TIM5_Init+0x94>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001a94:	4b18      	ldr	r3, [pc, #96]	@ (8001af8 <MX_TIM5_Init+0x94>)
 8001a96:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a9a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a9c:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <MX_TIM5_Init+0x94>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa2:	4b15      	ldr	r3, [pc, #84]	@ (8001af8 <MX_TIM5_Init+0x94>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001aa8:	4813      	ldr	r0, [pc, #76]	@ (8001af8 <MX_TIM5_Init+0x94>)
 8001aaa:	f005 f9d3 	bl	8006e54 <HAL_TIM_Base_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001ab4:	f000 fc34 	bl	8002320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001abc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001abe:	f107 0310 	add.w	r3, r7, #16
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	480c      	ldr	r0, [pc, #48]	@ (8001af8 <MX_TIM5_Init+0x94>)
 8001ac6:	f006 f957 	bl	8007d78 <HAL_TIM_ConfigClockSource>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001ad0:	f000 fc26 	bl	8002320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4805      	ldr	r0, [pc, #20]	@ (8001af8 <MX_TIM5_Init+0x94>)
 8001ae2:	f007 f92f 	bl	8008d44 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001aec:	f000 fc18 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001af0:	bf00      	nop
 8001af2:	3720      	adds	r7, #32
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000890 	.word	0x20000890
 8001afc:	40000c00 	.word	0x40000c00

08001b00 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001b04:	4b14      	ldr	r3, [pc, #80]	@ (8001b58 <MX_TIM16_Init+0x58>)
 8001b06:	4a15      	ldr	r2, [pc, #84]	@ (8001b5c <MX_TIM16_Init+0x5c>)
 8001b08:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8001b0a:	4b13      	ldr	r3, [pc, #76]	@ (8001b58 <MX_TIM16_Init+0x58>)
 8001b0c:	22a9      	movs	r2, #169	@ 0xa9
 8001b0e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b10:	4b11      	ldr	r3, [pc, #68]	@ (8001b58 <MX_TIM16_Init+0x58>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8001b16:	4b10      	ldr	r3, [pc, #64]	@ (8001b58 <MX_TIM16_Init+0x58>)
 8001b18:	f240 4279 	movw	r2, #1145	@ 0x479
 8001b1c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b58 <MX_TIM16_Init+0x58>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001b24:	4b0c      	ldr	r3, [pc, #48]	@ (8001b58 <MX_TIM16_Init+0x58>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <MX_TIM16_Init+0x58>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001b30:	4809      	ldr	r0, [pc, #36]	@ (8001b58 <MX_TIM16_Init+0x58>)
 8001b32:	f005 f98f 	bl	8006e54 <HAL_TIM_Base_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001b3c:	f000 fbf0 	bl	8002320 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001b40:	2108      	movs	r1, #8
 8001b42:	4805      	ldr	r0, [pc, #20]	@ (8001b58 <MX_TIM16_Init+0x58>)
 8001b44:	f005 fc52 	bl	80073ec <HAL_TIM_OnePulse_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8001b4e:	f000 fbe7 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	2000095c 	.word	0x2000095c
 8001b5c:	40014400 	.word	0x40014400

08001b60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b64:	4b23      	ldr	r3, [pc, #140]	@ (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001b66:	4a24      	ldr	r2, [pc, #144]	@ (8001bf8 <MX_USART2_UART_Init+0x98>)
 8001b68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001b6a:	4b22      	ldr	r3, [pc, #136]	@ (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001b6c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001b70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001b72:	4b20      	ldr	r3, [pc, #128]	@ (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001b74:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b78:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001b80:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001b82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b88:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001b8a:	220c      	movs	r2, #12
 8001b8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b8e:	4b19      	ldr	r3, [pc, #100]	@ (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b94:	4b17      	ldr	r3, [pc, #92]	@ (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b9a:	4b16      	ldr	r3, [pc, #88]	@ (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ba0:	4b14      	ldr	r3, [pc, #80]	@ (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ba6:	4b13      	ldr	r3, [pc, #76]	@ (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bac:	4811      	ldr	r0, [pc, #68]	@ (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001bae:	f007 fa43 	bl	8009038 <HAL_UART_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8001bb8:	f000 fbb2 	bl	8002320 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	480d      	ldr	r0, [pc, #52]	@ (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001bc0:	f008 ff84 	bl	800aacc <HAL_UARTEx_SetTxFifoThreshold>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8001bca:	f000 fba9 	bl	8002320 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4808      	ldr	r0, [pc, #32]	@ (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001bd2:	f008 ffb9 	bl	800ab48 <HAL_UARTEx_SetRxFifoThreshold>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8001bdc:	f000 fba0 	bl	8002320 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001be0:	4804      	ldr	r0, [pc, #16]	@ (8001bf4 <MX_USART2_UART_Init+0x94>)
 8001be2:	f008 ff3a 	bl	800aa5a <HAL_UARTEx_DisableFifoMode>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8001bec:	f000 fb98 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000a88 	.word	0x20000a88
 8001bf8:	40004400 	.word	0x40004400

08001bfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001c02:	4b1e      	ldr	r3, [pc, #120]	@ (8001c7c <MX_DMA_Init+0x80>)
 8001c04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c06:	4a1d      	ldr	r2, [pc, #116]	@ (8001c7c <MX_DMA_Init+0x80>)
 8001c08:	f043 0304 	orr.w	r3, r3, #4
 8001c0c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c7c <MX_DMA_Init+0x80>)
 8001c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c1a:	4b18      	ldr	r3, [pc, #96]	@ (8001c7c <MX_DMA_Init+0x80>)
 8001c1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c1e:	4a17      	ldr	r2, [pc, #92]	@ (8001c7c <MX_DMA_Init+0x80>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6493      	str	r3, [r2, #72]	@ 0x48
 8001c26:	4b15      	ldr	r3, [pc, #84]	@ (8001c7c <MX_DMA_Init+0x80>)
 8001c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2100      	movs	r1, #0
 8001c36:	200b      	movs	r0, #11
 8001c38:	f003 fbab 	bl	8005392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c3c:	200b      	movs	r0, #11
 8001c3e:	f003 fbc2 	bl	80053c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2100      	movs	r1, #0
 8001c46:	200c      	movs	r0, #12
 8001c48:	f003 fba3 	bl	8005392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001c4c:	200c      	movs	r0, #12
 8001c4e:	f003 fbba 	bl	80053c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2100      	movs	r1, #0
 8001c56:	200d      	movs	r0, #13
 8001c58:	f003 fb9b 	bl	8005392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001c5c:	200d      	movs	r0, #13
 8001c5e:	f003 fbb2 	bl	80053c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2100      	movs	r1, #0
 8001c66:	200e      	movs	r0, #14
 8001c68:	f003 fb93 	bl	8005392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001c6c:	200e      	movs	r0, #14
 8001c6e:	f003 fbaa 	bl	80053c6 <HAL_NVIC_EnableIRQ>

}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40021000 	.word	0x40021000

08001c80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	@ 0x28
 8001c84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	60da      	str	r2, [r3, #12]
 8001c94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c96:	4b67      	ldr	r3, [pc, #412]	@ (8001e34 <MX_GPIO_Init+0x1b4>)
 8001c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9a:	4a66      	ldr	r2, [pc, #408]	@ (8001e34 <MX_GPIO_Init+0x1b4>)
 8001c9c:	f043 0304 	orr.w	r3, r3, #4
 8001ca0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ca2:	4b64      	ldr	r3, [pc, #400]	@ (8001e34 <MX_GPIO_Init+0x1b4>)
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cae:	4b61      	ldr	r3, [pc, #388]	@ (8001e34 <MX_GPIO_Init+0x1b4>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb2:	4a60      	ldr	r2, [pc, #384]	@ (8001e34 <MX_GPIO_Init+0x1b4>)
 8001cb4:	f043 0320 	orr.w	r3, r3, #32
 8001cb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cba:	4b5e      	ldr	r3, [pc, #376]	@ (8001e34 <MX_GPIO_Init+0x1b4>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cbe:	f003 0320 	and.w	r3, r3, #32
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc6:	4b5b      	ldr	r3, [pc, #364]	@ (8001e34 <MX_GPIO_Init+0x1b4>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cca:	4a5a      	ldr	r2, [pc, #360]	@ (8001e34 <MX_GPIO_Init+0x1b4>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cd2:	4b58      	ldr	r3, [pc, #352]	@ (8001e34 <MX_GPIO_Init+0x1b4>)
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cde:	4b55      	ldr	r3, [pc, #340]	@ (8001e34 <MX_GPIO_Init+0x1b4>)
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce2:	4a54      	ldr	r2, [pc, #336]	@ (8001e34 <MX_GPIO_Init+0x1b4>)
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cea:	4b52      	ldr	r3, [pc, #328]	@ (8001e34 <MX_GPIO_Init+0x1b4>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Direaction_motor_Pin|Emergency_light_Pin, GPIO_PIN_RESET);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001cfc:	484e      	ldr	r0, [pc, #312]	@ (8001e38 <MX_GPIO_Init+0x1b8>)
 8001cfe:	f004 f849 	bl	8005d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Solenoid_valve_push_Pin, GPIO_PIN_RESET);
 8001d02:	2200      	movs	r2, #0
 8001d04:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8001d08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d0c:	f004 f842 	bl	8005d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin, GPIO_PIN_RESET);
 8001d10:	2200      	movs	r2, #0
 8001d12:	f240 4116 	movw	r1, #1046	@ 0x416
 8001d16:	4849      	ldr	r0, [pc, #292]	@ (8001e3c <MX_GPIO_Init+0x1bc>)
 8001d18:	f004 f83c 	bl	8005d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d22:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	4619      	mov	r1, r3
 8001d32:	4841      	ldr	r0, [pc, #260]	@ (8001e38 <MX_GPIO_Init+0x1b8>)
 8001d34:	f003 fe94 	bl	8005a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : Direaction_motor_Pin */
  GPIO_InitStruct.Pin = Direaction_motor_Pin;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d44:	2303      	movs	r3, #3
 8001d46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direaction_motor_GPIO_Port, &GPIO_InitStruct);
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	483a      	ldr	r0, [pc, #232]	@ (8001e38 <MX_GPIO_Init+0x1b8>)
 8001d50:	f003 fe86 	bl	8005a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Solenoid_valve_push_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Solenoid_valve_push_Pin;
 8001d54:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d62:	2300      	movs	r3, #0
 8001d64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d70:	f003 fe76 	bl	8005a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : joy_switch_3_Pin joy_switch_4_Pin Set_home_Pin Reed_switch_pull_Pin */
  GPIO_InitStruct.Pin = joy_switch_3_Pin|joy_switch_4_Pin|Set_home_Pin|Reed_switch_pull_Pin;
 8001d74:	23f0      	movs	r3, #240	@ 0xf0
 8001d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	4619      	mov	r1, r3
 8001d86:	482c      	ldr	r0, [pc, #176]	@ (8001e38 <MX_GPIO_Init+0x1b8>)
 8001d88:	f003 fe6a 	bl	8005a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pilot_controller_error_Pin Pilot_motor_error_Pin Solenoid_valve_pull_Pin Solenoid_valve_vacuum_Pin */
  GPIO_InitStruct.Pin = Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin;
 8001d8c:	f240 4316 	movw	r3, #1046	@ 0x416
 8001d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d92:	2301      	movs	r3, #1
 8001d94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9e:	f107 0314 	add.w	r3, r7, #20
 8001da2:	4619      	mov	r1, r3
 8001da4:	4825      	ldr	r0, [pc, #148]	@ (8001e3c <MX_GPIO_Init+0x1bc>)
 8001da6:	f003 fe5b 	bl	8005a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : Proximity_Pin joy_switch_1_Pin */
  GPIO_InitStruct.Pin = Proximity_Pin|joy_switch_1_Pin;
 8001daa:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8001dae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	481f      	ldr	r0, [pc, #124]	@ (8001e3c <MX_GPIO_Init+0x1bc>)
 8001dc0:	f003 fe4e 	bl	8005a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_switch_Pin */
  GPIO_InitStruct.Pin = Emergency_switch_Pin;
 8001dc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001dca:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_switch_GPIO_Port, &GPIO_InitStruct);
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4818      	ldr	r0, [pc, #96]	@ (8001e3c <MX_GPIO_Init+0x1bc>)
 8001ddc:	f003 fe40 	bl	8005a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_light_Pin */
  GPIO_InitStruct.Pin = Emergency_light_Pin;
 8001de0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de6:	2301      	movs	r3, #1
 8001de8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Emergency_light_GPIO_Port, &GPIO_InitStruct);
 8001df2:	f107 0314 	add.w	r3, r7, #20
 8001df6:	4619      	mov	r1, r3
 8001df8:	480f      	ldr	r0, [pc, #60]	@ (8001e38 <MX_GPIO_Init+0x1b8>)
 8001dfa:	f003 fe31 	bl	8005a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : Reed_switch_push_Pin joy_switch_2_Pin */
  GPIO_InitStruct.Pin = Reed_switch_push_Pin|joy_switch_2_Pin;
 8001dfe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	4619      	mov	r1, r3
 8001e12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e16:	f003 fe23 	bl	8005a60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2028      	movs	r0, #40	@ 0x28
 8001e20:	f003 fab7 	bl	8005392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e24:	2028      	movs	r0, #40	@ 0x28
 8001e26:	f003 face 	bl	80053c6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e2a:	bf00      	nop
 8001e2c:	3728      	adds	r7, #40	@ 0x28
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40021000 	.word	0x40021000
 8001e38:	48000800 	.word	0x48000800
 8001e3c:	48000400 	.word	0x48000400

08001e40 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Main timer interrupt for run program with accuracy time
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e44:	b08c      	sub	sp, #48	@ 0x30
 8001e46:	af02      	add	r7, sp, #8
 8001e48:	6278      	str	r0, [r7, #36]	@ 0x24
	// Run with 1000 Hz
	if(htim == &htim5){
 8001e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e4c:	4b96      	ldr	r3, [pc, #600]	@ (80020a8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d14e      	bne.n	8001ef0 <HAL_TIM_PeriodElapsedCallback+0xb0>
		//Update modbus
		if(registerFrame[0x00].U16 == 18537){
 8001e52:	4b96      	ldr	r3, [pc, #600]	@ (80020ac <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001e54:	881a      	ldrh	r2, [r3, #0]
 8001e56:	f644 0369 	movw	r3, #18537	@ 0x4869
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d107      	bne.n	8001e6e <HAL_TIM_PeriodElapsedCallback+0x2e>
			registerFrame[0x00].U16 = 22881;
 8001e5e:	4a93      	ldr	r2, [pc, #588]	@ (80020ac <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001e60:	f645 1361 	movw	r3, #22881	@ 0x5961
 8001e64:	8013      	strh	r3, [r2, #0]
			heartbeat_status = 1;
 8001e66:	4a92      	ldr	r2, [pc, #584]	@ (80020b0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001e68:	2301      	movs	r3, #1
 8001e6a:	7013      	strb	r3, [r2, #0]
 8001e6c:	e040      	b.n	8001ef0 <HAL_TIM_PeriodElapsedCallback+0xb0>
		}
		else if(heartbeat_status == 0){
 8001e6e:	4b90      	ldr	r3, [pc, #576]	@ (80020b0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d104      	bne.n	8001e80 <HAL_TIM_PeriodElapsedCallback+0x40>
			registerFrame[0x00].U16 = 22881;
 8001e76:	4a8d      	ldr	r2, [pc, #564]	@ (80020ac <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001e78:	f645 1361 	movw	r3, #22881	@ 0x5961
 8001e7c:	8013      	strh	r3, [r2, #0]
 8001e7e:	e037      	b.n	8001ef0 <HAL_TIM_PeriodElapsedCallback+0xb0>
		}
		else if(heartbeat_status == 1){
 8001e80:	4b8b      	ldr	r3, [pc, #556]	@ (80020b0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d133      	bne.n	8001ef0 <HAL_TIM_PeriodElapsedCallback+0xb0>
		  	//Routine
			registerFrame[0x04].U16 = eff.update_actual_status[0x04].U16;	// Gripper Movement Actual Status(0x10)
 8001e88:	4b8a      	ldr	r3, [pc, #552]	@ (80020b4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001e8a:	89db      	ldrh	r3, [r3, #14]
 8001e8c:	4a87      	ldr	r2, [pc, #540]	@ (80020ac <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001e8e:	8113      	strh	r3, [r2, #8]
			registerFrame[0x10].U16 = state;							// Z-axis Moving Status(0x10)
 8001e90:	4b89      	ldr	r3, [pc, #548]	@ (80020b8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	4a85      	ldr	r2, [pc, #532]	@ (80020ac <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001e96:	8413      	strh	r3, [r2, #32]
			registerFrame[0x11].U16 = encoder.mm;						// Z-axis Actual Position(0x11)
 8001e98:	4b88      	ldr	r3, [pc, #544]	@ (80020bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001e9a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001e9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ea2:	ee17 3a90 	vmov	r3, s15
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	4a80      	ldr	r2, [pc, #512]	@ (80020ac <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001eaa:	8453      	strh	r3, [r2, #34]	@ 0x22
			registerFrame[0x12].U16 = encoder.mmps;						// Z-axis Actual Speed (0x12)
 8001eac:	4b83      	ldr	r3, [pc, #524]	@ (80020bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001eae:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001eb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eb6:	ee17 3a90 	vmov	r3, s15
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	4a7b      	ldr	r2, [pc, #492]	@ (80020ac <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001ebe:	8493      	strh	r3, [r2, #36]	@ 0x24
			registerFrame[0x13].U16 = encoder.mmpss;					// Z-axis Acceleration(0x13)    //////ความเร่งต้องเปลี่ยน/////
 8001ec0:	4b7e      	ldr	r3, [pc, #504]	@ (80020bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001ec2:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eca:	ee17 3a90 	vmov	r3, s15
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	4a76      	ldr	r2, [pc, #472]	@ (80020ac <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001ed2:	84d3      	strh	r3, [r2, #38]	@ 0x26
			registerFrame[0x40].U16 = encoder.rpm;						// X-axis Actual Position(0x40)
 8001ed4:	4b79      	ldr	r3, [pc, #484]	@ (80020bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001ed6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ede:	ee17 3a90 	vmov	r3, s15
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	4a71      	ldr	r2, [pc, #452]	@ (80020ac <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001ee6:	f8a2 3080 	strh.w	r3, [r2, #128]	@ 0x80
		  heartbeat_status = 0;
 8001eea:	4a71      	ldr	r2, [pc, #452]	@ (80020b0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001eec:	2300      	movs	r3, #0
 8001eee:	7013      	strb	r3, [r2, #0]
		}
	}
	// Run with 1000 Hz
	if(htim == &htim3){
 8001ef0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ef2:	4b73      	ldr	r3, [pc, #460]	@ (80020c0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	f040 8197 	bne.w	8002228 <HAL_TIM_PeriodElapsedCallback+0x3e8>
		// Update main
		if(first_check == 1){
 8001efa:	4b72      	ldr	r3, [pc, #456]	@ (80020c4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d10b      	bne.n	8001f1a <HAL_TIM_PeriodElapsedCallback+0xda>
			QEI_init(&encoder, encoder_ppr, encoder_frequency, encoder_cnt_period);
 8001f02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f06:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f0e:	486b      	ldr	r0, [pc, #428]	@ (80020bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001f10:	f000 fbb7 	bl	8002682 <QEI_init>
			first_check = 0;
 8001f14:	4a6b      	ldr	r2, [pc, #428]	@ (80020c4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001f16:	2300      	movs	r3, #0
 8001f18:	7013      	strb	r3, [r2, #0]
//				ready = 0;
//			}else{return;}
//		}

		// Update encoder
		Update_qei(&encoder, &htim4);
 8001f1a:	496b      	ldr	r1, [pc, #428]	@ (80020c8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001f1c:	4867      	ldr	r0, [pc, #412]	@ (80020bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001f1e:	f000 fc07 	bl	8002730 <Update_qei>

		// Update current sensor
//		Update_adc(&current_sensor);

		// Update reed switch status
		Update_actual_eff(&eff, reed_pull_gpio, reed_pull_pin, reed_push_gpio, reed_push_pin);
 8001f22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001f2c:	2280      	movs	r2, #128	@ 0x80
 8001f2e:	4967      	ldr	r1, [pc, #412]	@ (80020cc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001f30:	4860      	ldr	r0, [pc, #384]	@ (80020b4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001f32:	f7ff f842 	bl	8000fba <Update_actual_eff>

		// Update gripper command from base system
		Gripper_Movement_Status(&eff);
 8001f36:	485f      	ldr	r0, [pc, #380]	@ (80020b4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001f38:	f7fe ff24 	bl	8000d84 <Gripper_Movement_Status>
//		// Enable gripper with command
//		Update_eff(&eff, solenoid_pull_gpio, solenoid_pull_pin, solenoid_push_gpio, solenoid_push_pin, vacuum_gpio, vacuum_pin);

		// Update point mode (set goal point)
		point.goal = (float32_t)Set_Goal_Point();
 8001f3c:	f7fe ff54 	bl	8000de8 <Set_Goal_Point>
 8001f40:	4603      	mov	r3, r0
 8001f42:	ee07 3a90 	vmov	s15, r3
 8001f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f4a:	ee17 0a90 	vmov	r0, s15
 8001f4e:	f7fe fac7 	bl	80004e0 <__aeabi_f2d>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	495e      	ldr	r1, [pc, #376]	@ (80020d0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001f58:	e9c1 2300 	strd	r2, r3, [r1]
		mode = Run_Point_Mode();
 8001f5c:	f7fe ff50 	bl	8000e00 <Run_Point_Mode>
 8001f60:	4603      	mov	r3, r0
 8001f62:	4a5c      	ldr	r2, [pc, #368]	@ (80020d4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001f64:	8013      	strh	r3, [r2, #0]

//		kalman_velocity = SteadyStateKalmanFilter(&kalman, test, encoder.mmps);

		//  homing command from Homing button and Base system Check command
		Set_Home(); // Refresh homing command from base system
 8001f66:	f7fe ff67 	bl	8000e38 <Set_Home>
		if(home.homing_command == 0){
 8001f6a:	4b5b      	ldr	r3, [pc, #364]	@ (80020d8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001f6c:	789b      	ldrb	r3, [r3, #2]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d117      	bne.n	8001fa2 <HAL_TIM_PeriodElapsedCallback+0x162>
			if(state == 0b0010){
 8001f72:	4b51      	ldr	r3, [pc, #324]	@ (80020b8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d109      	bne.n	8001f8e <HAL_TIM_PeriodElapsedCallback+0x14e>
				// Have command from base system
				home.homing_command = 1;
 8001f7a:	4a57      	ldr	r2, [pc, #348]	@ (80020d8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	7093      	strb	r3, [r2, #2]
				registerFrame[0x01].U16 = 0b0000; // Reset data of base system status
 8001f80:	4a4a      	ldr	r2, [pc, #296]	@ (80020ac <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001f82:	2300      	movs	r3, #0
 8001f84:	8053      	strh	r3, [r2, #2]
				registerFrame[0x10].U16 = 0b0010; // Set data of moving status to Home
 8001f86:	4a49      	ldr	r2, [pc, #292]	@ (80020ac <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001f88:	2302      	movs	r3, #2
 8001f8a:	8413      	strh	r3, [r2, #32]
 8001f8c:	e009      	b.n	8001fa2 <HAL_TIM_PeriodElapsedCallback+0x162>
			}
			else if(HAL_GPIO_ReadPin(home_gpio, home_pin) == 1){
 8001f8e:	2140      	movs	r1, #64	@ 0x40
 8001f90:	484e      	ldr	r0, [pc, #312]	@ (80020cc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001f92:	f003 fee7 	bl	8005d64 <HAL_GPIO_ReadPin>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d102      	bne.n	8001fa2 <HAL_TIM_PeriodElapsedCallback+0x162>
				// Have command from home switch
				home.homing_command = 1;
 8001f9c:	4a4e      	ldr	r2, [pc, #312]	@ (80020d8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	7093      	strb	r3, [r2, #2]
//				registerFrame[0x10].U16 = 0b0010; // Set data of moving status to Home
			}
		}
		// Homing state
		homing(&home, GPIOB, GPIO_PIN_12); // Homing function
 8001fa2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001fa6:	494d      	ldr	r1, [pc, #308]	@ (80020dc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001fa8:	484b      	ldr	r0, [pc, #300]	@ (80020d8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001faa:	f000 fd56 	bl	8002a5a <homing>
		if(home.homing_command == 1){
 8001fae:	4b4a      	ldr	r3, [pc, #296]	@ (80020d8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001fb0:	789b      	ldrb	r3, [r3, #2]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d104      	bne.n	8001fc0 <HAL_TIM_PeriodElapsedCallback+0x180>
			pwm_signal = home.pwm; // Set PWM from homing function
 8001fb6:	4b48      	ldr	r3, [pc, #288]	@ (80020d8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001fb8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001fbc:	4a48      	ldr	r2, [pc, #288]	@ (80020e0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001fbe:	8013      	strh	r3, [r2, #0]
		}

		if(home.is_home == 1 && encoder.pulse != 0){
 8001fc0:	4b45      	ldr	r3, [pc, #276]	@ (80020d8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001fc2:	78db      	ldrb	r3, [r3, #3]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d10a      	bne.n	8001fde <HAL_TIM_PeriodElapsedCallback+0x19e>
 8001fc8:	4b3c      	ldr	r3, [pc, #240]	@ (80020bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001fca:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	d005      	beq.n	8001fde <HAL_TIM_PeriodElapsedCallback+0x19e>
			// Finish homing state
			Reset_qei(&encoder); // Reset encoder data
 8001fd2:	483a      	ldr	r0, [pc, #232]	@ (80020bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001fd4:	f000 fcb4 	bl	8002940 <Reset_qei>
			registerFrame[0x10].U16 = 0b0000; // Reset data of moving status
 8001fd8:	4a34      	ldr	r2, [pc, #208]	@ (80020ac <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001fda:	2300      	movs	r3, #0
 8001fdc:	8413      	strh	r3, [r2, #32]
		}

		// Finish homing while normal run not in emergency break state
		if(emer.emer_state == 0){
 8001fde:	4b41      	ldr	r3, [pc, #260]	@ (80020e4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10b      	bne.n	8001ffe <HAL_TIM_PeriodElapsedCallback+0x1be>
			if(home.is_home == 1 && encoder.pulse == 0){
 8001fe6:	4b3c      	ldr	r3, [pc, #240]	@ (80020d8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001fe8:	78db      	ldrb	r3, [r3, #3]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d107      	bne.n	8001ffe <HAL_TIM_PeriodElapsedCallback+0x1be>
 8001fee:	4b33      	ldr	r3, [pc, #204]	@ (80020bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001ff0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	d102      	bne.n	8001ffe <HAL_TIM_PeriodElapsedCallback+0x1be>
				home.is_home = 0; // Reset is_home state
 8001ff8:	4a37      	ldr	r2, [pc, #220]	@ (80020d8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	70d3      	strb	r3, [r2, #3]
			}
		}

		// Emergency break state
		emergency(&emer, emer_light_gpio, emer_light_pin); // Activate emergency light
 8001ffe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002002:	4932      	ldr	r1, [pc, #200]	@ (80020cc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002004:	4837      	ldr	r0, [pc, #220]	@ (80020e4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002006:	f000 fec5 	bl	8002d94 <emergency>
		if(emer.emer_state == 1){
 800200a:	4b36      	ldr	r3, [pc, #216]	@ (80020e4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d111      	bne.n	8002036 <HAL_TIM_PeriodElapsedCallback+0x1f6>
			if(home.is_home == 1 && encoder.pulse == 0){
 8002012:	4b31      	ldr	r3, [pc, #196]	@ (80020d8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002014:	78db      	ldrb	r3, [r3, #3]
 8002016:	2b01      	cmp	r3, #1
 8002018:	f040 80fc 	bne.w	8002214 <HAL_TIM_PeriodElapsedCallback+0x3d4>
 800201c:	4b27      	ldr	r3, [pc, #156]	@ (80020bc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800201e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	f040 80f6 	bne.w	8002214 <HAL_TIM_PeriodElapsedCallback+0x3d4>
				emer.emer_state = 0; // Reset emergency state
 8002028:	4b2e      	ldr	r3, [pc, #184]	@ (80020e4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
				home.is_home = 0; // Reset is_home state
 800202e:	4b2a      	ldr	r3, [pc, #168]	@ (80020d8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002030:	2200      	movs	r2, #0
 8002032:	70da      	strb	r2, [r3, #3]
 8002034:	e0ee      	b.n	8002214 <HAL_TIM_PeriodElapsedCallback+0x3d4>
//		else if(encoder.mm >= 685 || encoder.mm <= 5){
//			Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
//		}

//		// Tuning and test mode(PID & Trajectory)
		else if(tuning == 1 && home.homing_command == 0){
 8002036:	4b2c      	ldr	r3, [pc, #176]	@ (80020e8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d12c      	bne.n	8002098 <HAL_TIM_PeriodElapsedCallback+0x258>
 800203e:	4b26      	ldr	r3, [pc, #152]	@ (80020d8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002040:	789b      	ldrb	r3, [r3, #2]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d128      	bne.n	8002098 <HAL_TIM_PeriodElapsedCallback+0x258>
//			repeat_cheack++;
			static uint64_t control_loop_ts = 0;
			if(control_loop_ts == 5){
 8002046:	4b29      	ldr	r3, [pc, #164]	@ (80020ec <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204c:	1f51      	subs	r1, r2, #5
 800204e:	430b      	orrs	r3, r1
 8002050:	d107      	bne.n	8002062 <HAL_TIM_PeriodElapsedCallback+0x222>
				// Position control loop update
//				Update_position_control(v_output);
				control_loop_ts = 0;
 8002052:	4926      	ldr	r1, [pc, #152]	@ (80020ec <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	f04f 0300 	mov.w	r3, #0
 800205c:	e9c1 2300 	strd	r2, r3, [r1]
 8002060:	e008      	b.n	8002074 <HAL_TIM_PeriodElapsedCallback+0x234>
			}
			else{control_loop_ts++;}
 8002062:	4b22      	ldr	r3, [pc, #136]	@ (80020ec <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002068:	1c54      	adds	r4, r2, #1
 800206a:	f143 0500 	adc.w	r5, r3, #0
 800206e:	4b1f      	ldr	r3, [pc, #124]	@ (80020ec <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002070:	e9c3 4500 	strd	r4, r5, [r3]
			// Velocity control loop update
			Update_velocity_control(test);
 8002074:	4b1e      	ldr	r3, [pc, #120]	@ (80020f0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207a:	4610      	mov	r0, r2
 800207c:	4619      	mov	r1, r3
 800207e:	f7fe fcb9 	bl	80009f4 <__aeabi_d2f>
 8002082:	4603      	mov	r3, r0
 8002084:	ee00 3a10 	vmov	s0, r3
 8002088:	f000 f90a 	bl	80022a0 <Update_velocity_control>
			// PWM signal update
			pwm_signal = v_output;
 800208c:	4b19      	ldr	r3, [pc, #100]	@ (80020f4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	b21a      	sxth	r2, r3
 8002092:	4b13      	ldr	r3, [pc, #76]	@ (80020e0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002094:	801a      	strh	r2, [r3, #0]
		else if(tuning == 1 && home.homing_command == 0){
 8002096:	e0bd      	b.n	8002214 <HAL_TIM_PeriodElapsedCallback+0x3d4>
		}
		// Tuning and test mode(Joy control)
		else if(tuning == 2){
 8002098:	4b13      	ldr	r3, [pc, #76]	@ (80020e8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d12d      	bne.n	80020fc <HAL_TIM_PeriodElapsedCallback+0x2bc>
			Update_joy(&joy);
 80020a0:	4815      	ldr	r0, [pc, #84]	@ (80020f8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80020a2:	f7fe ffc5 	bl	8001030 <Update_joy>
 80020a6:	e0b5      	b.n	8002214 <HAL_TIM_PeriodElapsedCallback+0x3d4>
 80020a8:	20000890 	.word	0x20000890
 80020ac:	20000c74 	.word	0x20000c74
 80020b0:	20000e04 	.word	0x20000e04
 80020b4:	20000e08 	.word	0x20000e08
 80020b8:	20000074 	.word	0x20000074
 80020bc:	20001078 	.word	0x20001078
 80020c0:	200006f8 	.word	0x200006f8
 80020c4:	2000003c 	.word	0x2000003c
 80020c8:	200007c4 	.word	0x200007c4
 80020cc:	48000800 	.word	0x48000800
 80020d0:	20000c50 	.word	0x20000c50
 80020d4:	20000c4c 	.word	0x20000c4c
 80020d8:	20000c58 	.word	0x20000c58
 80020dc:	48000400 	.word	0x48000400
 80020e0:	20001070 	.word	0x20001070
 80020e4:	20000c70 	.word	0x20000c70
 80020e8:	20000029 	.word	0x20000029
 80020ec:	20001490 	.word	0x20001490
 80020f0:	20000030 	.word	0x20000030
 80020f4:	200010ec 	.word	0x200010ec
 80020f8:	20000fa0 	.word	0x20000fa0
		}
		// Tuning and test mode(Sensor or other check)
		else if(tuning == 3){
 80020fc:	4b4d      	ldr	r3, [pc, #308]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b03      	cmp	r3, #3
 8002102:	d151      	bne.n	80021a8 <HAL_TIM_PeriodElapsedCallback+0x368>
		  sensor[0] = __HAL_TIM_GET_COUNTER(&encoder_tim);
 8002104:	4b4c      	ldr	r3, [pc, #304]	@ (8002238 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210a:	2200      	movs	r2, #0
 800210c:	4698      	mov	r8, r3
 800210e:	4691      	mov	r9, r2
 8002110:	4b4a      	ldr	r3, [pc, #296]	@ (800223c <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8002112:	e9c3 8900 	strd	r8, r9, [r3]
		  sensor[1] = HAL_GPIO_ReadPin(proximity_gpio, proximity_pin);
 8002116:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800211a:	4849      	ldr	r0, [pc, #292]	@ (8002240 <HAL_TIM_PeriodElapsedCallback+0x400>)
 800211c:	f003 fe22 	bl	8005d64 <HAL_GPIO_ReadPin>
 8002120:	4603      	mov	r3, r0
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2200      	movs	r2, #0
 8002126:	61bb      	str	r3, [r7, #24]
 8002128:	61fa      	str	r2, [r7, #28]
 800212a:	4b44      	ldr	r3, [pc, #272]	@ (800223c <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 800212c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002130:	e9c3 1202 	strd	r1, r2, [r3, #8]
		  sensor[2] = HAL_GPIO_ReadPin(reed_pull_gpio, reed_pull_pin);
 8002134:	2180      	movs	r1, #128	@ 0x80
 8002136:	4843      	ldr	r0, [pc, #268]	@ (8002244 <HAL_TIM_PeriodElapsedCallback+0x404>)
 8002138:	f003 fe14 	bl	8005d64 <HAL_GPIO_ReadPin>
 800213c:	4603      	mov	r3, r0
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2200      	movs	r2, #0
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	617a      	str	r2, [r7, #20]
 8002146:	4b3d      	ldr	r3, [pc, #244]	@ (800223c <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8002148:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800214c:	e9c3 1204 	strd	r1, r2, [r3, #16]
		  sensor[3] = HAL_GPIO_ReadPin(reed_push_gpio, reed_push_pin);
 8002150:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002154:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002158:	f003 fe04 	bl	8005d64 <HAL_GPIO_ReadPin>
 800215c:	4603      	mov	r3, r0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2200      	movs	r2, #0
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	60fa      	str	r2, [r7, #12]
 8002166:	4b35      	ldr	r3, [pc, #212]	@ (800223c <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8002168:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800216c:	e9c3 1206 	strd	r1, r2, [r3, #24]
		  sensor[4] = HAL_GPIO_ReadPin(emer_gpio, emer_pin);
 8002170:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002174:	4832      	ldr	r0, [pc, #200]	@ (8002240 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8002176:	f003 fdf5 	bl	8005d64 <HAL_GPIO_ReadPin>
 800217a:	4603      	mov	r3, r0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2200      	movs	r2, #0
 8002180:	603b      	str	r3, [r7, #0]
 8002182:	607a      	str	r2, [r7, #4]
 8002184:	4b2d      	ldr	r3, [pc, #180]	@ (800223c <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8002186:	e9d7 1200 	ldrd	r1, r2, [r7]
 800218a:	e9c3 1208 	strd	r1, r2, [r3, #32]
		  sensor[5] = HAL_GPIO_ReadPin(home_gpio, home_pin);
 800218e:	2140      	movs	r1, #64	@ 0x40
 8002190:	482c      	ldr	r0, [pc, #176]	@ (8002244 <HAL_TIM_PeriodElapsedCallback+0x404>)
 8002192:	f003 fde7 	bl	8005d64 <HAL_GPIO_ReadPin>
 8002196:	4603      	mov	r3, r0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2200      	movs	r2, #0
 800219c:	469a      	mov	sl, r3
 800219e:	4693      	mov	fp, r2
 80021a0:	4b26      	ldr	r3, [pc, #152]	@ (800223c <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 80021a2:	e9c3 ab0a 	strd	sl, fp, [r3, #40]	@ 0x28
 80021a6:	e035      	b.n	8002214 <HAL_TIM_PeriodElapsedCallback+0x3d4>
		}

		// Run point mode
		else if(mode == 1 && tuning == 0 && emer.emer_state == 0 && home.is_home == 0){
 80021a8:	4b27      	ldr	r3, [pc, #156]	@ (8002248 <HAL_TIM_PeriodElapsedCallback+0x408>)
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d131      	bne.n	8002214 <HAL_TIM_PeriodElapsedCallback+0x3d4>
 80021b0:	4b20      	ldr	r3, [pc, #128]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d12d      	bne.n	8002214 <HAL_TIM_PeriodElapsedCallback+0x3d4>
 80021b8:	4b24      	ldr	r3, [pc, #144]	@ (800224c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d129      	bne.n	8002214 <HAL_TIM_PeriodElapsedCallback+0x3d4>
 80021c0:	4b23      	ldr	r3, [pc, #140]	@ (8002250 <HAL_TIM_PeriodElapsedCallback+0x410>)
 80021c2:	78db      	ldrb	r3, [r3, #3]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10a      	bne.n	80021de <HAL_TIM_PeriodElapsedCallback+0x39e>
			// Check for set shelves command
			set_point = point.goal;
 80021c8:	4b22      	ldr	r3, [pc, #136]	@ (8002254 <HAL_TIM_PeriodElapsedCallback+0x414>)
 80021ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	f7fe fc0f 	bl	80009f4 <__aeabi_d2f>
 80021d6:	4603      	mov	r3, r0
 80021d8:	4a1f      	ldr	r2, [pc, #124]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x418>)
 80021da:	6013      	str	r3, [r2, #0]
 80021dc:	e01a      	b.n	8002214 <HAL_TIM_PeriodElapsedCallback+0x3d4>
		}

		// Set shelve mode
		else if(mode == 2 && tuning == 0 && emer.emer_state == 0 && home.is_home == 0){
 80021de:	4b1a      	ldr	r3, [pc, #104]	@ (8002248 <HAL_TIM_PeriodElapsedCallback+0x408>)
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d116      	bne.n	8002214 <HAL_TIM_PeriodElapsedCallback+0x3d4>
 80021e6:	4b13      	ldr	r3, [pc, #76]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d112      	bne.n	8002214 <HAL_TIM_PeriodElapsedCallback+0x3d4>
 80021ee:	4b17      	ldr	r3, [pc, #92]	@ (800224c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10e      	bne.n	8002214 <HAL_TIM_PeriodElapsedCallback+0x3d4>
 80021f6:	4b16      	ldr	r3, [pc, #88]	@ (8002250 <HAL_TIM_PeriodElapsedCallback+0x410>)
 80021f8:	78db      	ldrb	r3, [r3, #3]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00a      	beq.n	8002214 <HAL_TIM_PeriodElapsedCallback+0x3d4>

		}
		// Run jog mode
		else if(mode == 3 && tuning == 0 && emer.emer_state == 0 && home.is_home == 0){
 80021fe:	4b12      	ldr	r3, [pc, #72]	@ (8002248 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	2b03      	cmp	r3, #3
 8002204:	d106      	bne.n	8002214 <HAL_TIM_PeriodElapsedCallback+0x3d4>
 8002206:	4b0b      	ldr	r3, [pc, #44]	@ (8002234 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d102      	bne.n	8002214 <HAL_TIM_PeriodElapsedCallback+0x3d4>
 800220e:	4b0f      	ldr	r3, [pc, #60]	@ (800224c <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
////			pwm_signal = v_output;
////			if((encoder.mm >= (set_point-0.1) && encoder.mm <= (set_point+0.1)) && (mode == 1 || mode == 2 || mode == 3)){
////				finish_job = 1;
////			}
//		}
		Update_pwm(&pwm_tim, pwm_channel, dir_gpio, dir_pin, pwm_signal); // Update main PWM signal
 8002214:	4b11      	ldr	r3, [pc, #68]	@ (800225c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8002216:	f9b3 3000 	ldrsh.w	r3, [r3]
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	2302      	movs	r3, #2
 800221e:	4a09      	ldr	r2, [pc, #36]	@ (8002244 <HAL_TIM_PeriodElapsedCallback+0x404>)
 8002220:	2100      	movs	r1, #0
 8002222:	480f      	ldr	r0, [pc, #60]	@ (8002260 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8002224:	f000 f996 	bl	8002554 <Update_pwm>
	}
}
 8002228:	bf00      	nop
 800222a:	3728      	adds	r7, #40	@ 0x28
 800222c:	46bd      	mov	sp, r7
 800222e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002232:	bf00      	nop
 8002234:	20000029 	.word	0x20000029
 8002238:	200007c4 	.word	0x200007c4
 800223c:	20000c18 	.word	0x20000c18
 8002240:	48000400 	.word	0x48000400
 8002244:	48000800 	.word	0x48000800
 8002248:	20000c4c 	.word	0x20000c4c
 800224c:	20000c70 	.word	0x20000c70
 8002250:	20000c58 	.word	0x20000c58
 8002254:	20000c50 	.word	0x20000c50
 8002258:	20000c48 	.word	0x20000c48
 800225c:	20001070 	.word	0x20001070
 8002260:	2000062c 	.word	0x2000062c

08002264 <HAL_GPIO_EXTI_Callback>:

// GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	80fb      	strh	r3, [r7, #6]
	// Activate and Deactivate tuning mode
	if(GPIO_Pin == GPIO_PIN_13){
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002274:	d10c      	bne.n	8002290 <HAL_GPIO_EXTI_Callback+0x2c>
		tuning++;
 8002276:	4b09      	ldr	r3, [pc, #36]	@ (800229c <HAL_GPIO_EXTI_Callback+0x38>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	3301      	adds	r3, #1
 800227c:	b2da      	uxtb	r2, r3
 800227e:	4b07      	ldr	r3, [pc, #28]	@ (800229c <HAL_GPIO_EXTI_Callback+0x38>)
 8002280:	701a      	strb	r2, [r3, #0]
		if(tuning == 4){
 8002282:	4b06      	ldr	r3, [pc, #24]	@ (800229c <HAL_GPIO_EXTI_Callback+0x38>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b04      	cmp	r3, #4
 8002288:	d102      	bne.n	8002290 <HAL_GPIO_EXTI_Callback+0x2c>
			tuning = 0;
 800228a:	4b04      	ldr	r3, [pc, #16]	@ (800229c <HAL_GPIO_EXTI_Callback+0x38>)
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
//		pwm_signal = 0;
//		// Emergency light enable
//		HAL_GPIO_WritePin(emer_light_gpio, emer_light_pin, SET);
//		emer.emer_state = 1;
	}
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	20000029 	.word	0x20000029

080022a0 <Update_velocity_control>:
// Torque control update
void Update_torque_control(float32_t s){

}
// Velocity control update
void Update_velocity_control(float32_t s){
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	ed87 0a01 	vstr	s0, [r7, #4]
	//input is pulse unit
	v_e = s - Get_mmps(&encoder);
 80022aa:	4817      	ldr	r0, [pc, #92]	@ (8002308 <Update_velocity_control+0x68>)
 80022ac:	f000 fb92 	bl	80029d4 <Get_mmps>
 80022b0:	eeb0 7a40 	vmov.f32	s14, s0
 80022b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80022b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022bc:	4b13      	ldr	r3, [pc, #76]	@ (800230c <Update_velocity_control+0x6c>)
 80022be:	edc3 7a00 	vstr	s15, [r3]

//	pid_time[0]++;
	if(v_e < min_error){
 80022c2:	4b12      	ldr	r3, [pc, #72]	@ (800230c <Update_velocity_control+0x6c>)
 80022c4:	ed93 7a00 	vldr	s14, [r3]
 80022c8:	4b11      	ldr	r3, [pc, #68]	@ (8002310 <Update_velocity_control+0x70>)
 80022ca:	edd3 7a00 	vldr	s15, [r3]
 80022ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d6:	d503      	bpl.n	80022e0 <Update_velocity_control+0x40>
		min_error = v_e;
 80022d8:	4b0c      	ldr	r3, [pc, #48]	@ (800230c <Update_velocity_control+0x6c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0c      	ldr	r2, [pc, #48]	@ (8002310 <Update_velocity_control+0x70>)
 80022de:	6013      	str	r3, [r2, #0]
//		pid_time[1] = pid_time[0];
	}

	v_output = Update_pid(&v_pid, v_e, 1000.0, 1000.0);
 80022e0:	4b0a      	ldr	r3, [pc, #40]	@ (800230c <Update_velocity_control+0x6c>)
 80022e2:	edd3 7a00 	vldr	s15, [r3]
 80022e6:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 8002314 <Update_velocity_control+0x74>
 80022ea:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8002314 <Update_velocity_control+0x74>
 80022ee:	eeb0 0a67 	vmov.f32	s0, s15
 80022f2:	4809      	ldr	r0, [pc, #36]	@ (8002318 <Update_velocity_control+0x78>)
 80022f4:	f000 f83c 	bl	8002370 <Update_pid>
 80022f8:	4603      	mov	r3, r0
 80022fa:	4a08      	ldr	r2, [pc, #32]	@ (800231c <Update_velocity_control+0x7c>)
 80022fc:	6013      	str	r3, [r2, #0]
//	v_output = PIDController_Update(&v_pid, test , Get_mmps(&encoder) );




}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20001078 	.word	0x20001078
 800230c:	200010e8 	.word	0x200010e8
 8002310:	20000038 	.word	0x20000038
 8002314:	447a0000 	.word	0x447a0000
 8002318:	200010d0 	.word	0x200010d0
 800231c:	200010ec 	.word	0x200010ec

08002320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002324:	b672      	cpsid	i
}
 8002326:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002328:	bf00      	nop
 800232a:	e7fd      	b.n	8002328 <Error_Handler+0x8>

0800232c <PID_init>:
 *  Created on: Apr 26, 2024
 *      Author: naker
 */
#include "pid.h"

void PID_init(PID* pid, float32_t _kp,  float32_t _ki, float32_t _kd, float32_t _sampt){
 800232c:	b480      	push	{r7}
 800232e:	b087      	sub	sp, #28
 8002330:	af00      	add	r7, sp, #0
 8002332:	6178      	str	r0, [r7, #20]
 8002334:	ed87 0a04 	vstr	s0, [r7, #16]
 8002338:	edc7 0a03 	vstr	s1, [r7, #12]
 800233c:	ed87 1a02 	vstr	s2, [r7, #8]
 8002340:	edc7 1a01 	vstr	s3, [r7, #4]
	pid -> kp = _kp;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	601a      	str	r2, [r3, #0]
	pid -> ki = _ki;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	605a      	str	r2, [r3, #4]
	pid -> kd = _kd;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	609a      	str	r2, [r3, #8]
	pid -> sampt = _sampt;
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	60da      	str	r2, [r3, #12]
	pid -> y_n = 0.0;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	611a      	str	r2, [r3, #16]
}
 8002364:	bf00      	nop
 8002366:	371c      	adds	r7, #28
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <Update_pid>:
int32_t Update_pid(PID *pid, float32_t error, float32_t pid_sat, float32_t plant_sat) {
 8002370:	b5b0      	push	{r4, r5, r7, lr}
 8002372:	b08a      	sub	sp, #40	@ 0x28
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	ed87 0a02 	vstr	s0, [r7, #8]
 800237c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002380:	ed87 1a00 	vstr	s2, [r7]
	static float32_t y_n_1 = 0.0; // Output[n-1]
	float32_t e_n = error; // error[n]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	61bb      	str	r3, [r7, #24]
	static float32_t e_n_1 = 0.0; // error[n-1]

	float32_t p_term = e_n * pid -> kp;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	edd3 7a00 	vldr	s15, [r3]
 800238e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002396:	edc7 7a05 	vstr	s15, [r7, #20]
	float32_t d_term = ((e_n - e_n_1) * pid -> kd) / pid -> sampt;
 800239a:	4b6c      	ldr	r3, [pc, #432]	@ (800254c <Update_pid+0x1dc>)
 800239c:	edd3 7a00 	vldr	s15, [r3]
 80023a0:	ed97 7a06 	vldr	s14, [r7, #24]
 80023a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80023ae:	ee67 6a27 	vmul.f32	s13, s14, s15
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	ed93 7a03 	vldr	s14, [r3, #12]
 80023b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023bc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float32_t i_term = ((pid -> ki * pid -> sampt * (e_n + e_n_1)) / 2.0) + (y_n_1);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	ed93 7a01 	vldr	s14, [r3, #4]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80023cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023d0:	4b5e      	ldr	r3, [pc, #376]	@ (800254c <Update_pid+0x1dc>)
 80023d2:	edd3 6a00 	vldr	s13, [r3]
 80023d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80023da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e2:	ee17 0a90 	vmov	r0, s15
 80023e6:	f7fe f87b 	bl	80004e0 <__aeabi_f2d>
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023f2:	f7fe f9f7 	bl	80007e4 <__aeabi_ddiv>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	4614      	mov	r4, r2
 80023fc:	461d      	mov	r5, r3
 80023fe:	4b54      	ldr	r3, [pc, #336]	@ (8002550 <Update_pid+0x1e0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe f86c 	bl	80004e0 <__aeabi_f2d>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4620      	mov	r0, r4
 800240e:	4629      	mov	r1, r5
 8002410:	f7fd ff08 	bl	8000224 <__adddf3>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4610      	mov	r0, r2
 800241a:	4619      	mov	r1, r3
 800241c:	f7fe faea 	bl	80009f4 <__aeabi_d2f>
 8002420:	4603      	mov	r3, r0
 8002422:	623b      	str	r3, [r7, #32]
	if(pid -> ki == 0){
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	edd3 7a01 	vldr	s15, [r3, #4]
 800242a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800242e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002432:	d102      	bne.n	800243a <Update_pid+0xca>
		i_term = 0.0;
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	623b      	str	r3, [r7, #32]
	}
	if(pid -> kd == 0){
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002440:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002448:	d102      	bne.n	8002450 <Update_pid+0xe0>
		d_term = 0.0;
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	pid -> y_n = p_term + d_term + i_term; // pid output
 8002450:	ed97 7a05 	vldr	s14, [r7, #20]
 8002454:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002458:	ee37 7a27 	vadd.f32	s14, s14, s15
 800245c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	edc3 7a04 	vstr	s15, [r3, #16]
	uint8_t is_sat = 0;
 800246a:	2300      	movs	r3, #0
 800246c:	77fb      	strb	r3, [r7, #31]
	// check is pid output is saturating
	if(pid -> y_n > pid_sat){
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	edd3 7a04 	vldr	s15, [r3, #16]
 8002474:	ed97 7a01 	vldr	s14, [r7, #4]
 8002478:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800247c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002480:	d502      	bpl.n	8002488 <Update_pid+0x118>
		is_sat = 1;
 8002482:	2301      	movs	r3, #1
 8002484:	77fb      	strb	r3, [r7, #31]
 8002486:	e00d      	b.n	80024a4 <Update_pid+0x134>
	}
	else if(pid -> y_n < -(pid_sat)){
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	ed93 7a04 	vldr	s14, [r3, #16]
 800248e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002492:	eef1 7a67 	vneg.f32	s15, s15
 8002496:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800249a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249e:	d501      	bpl.n	80024a4 <Update_pid+0x134>
		is_sat = 1;
 80024a0:	2301      	movs	r3, #1
 80024a2:	77fb      	strb	r3, [r7, #31]
	}
	// check is error sign and output sign is equal
	if(e_n * pid -> y_n == fabs(e_n * pid -> y_n)){
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	ed93 7a04 	vldr	s14, [r3, #16]
 80024aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80024ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	edd3 6a04 	vldr	s13, [r3, #16]
 80024b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80024bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024c0:	eef0 7ae7 	vabs.f32	s15, s15
 80024c4:	eeb4 7a67 	vcmp.f32	s14, s15
 80024c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024cc:	d10b      	bne.n	80024e6 <Update_pid+0x176>
		// if pid output is saturating and error sign and output sign is  i_term = 0;
		if(is_sat == 1){
 80024ce:	7ffb      	ldrb	r3, [r7, #31]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d108      	bne.n	80024e6 <Update_pid+0x176>
			pid -> y_n = p_term + d_term;
 80024d4:	ed97 7a05 	vldr	s14, [r7, #20]
 80024d8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80024dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	edc3 7a04 	vstr	s15, [r3, #16]
		}
	}
	// Plant saturation
	if(pid -> y_n > plant_sat){
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	edd3 7a04 	vldr	s15, [r3, #16]
 80024ec:	ed97 7a00 	vldr	s14, [r7]
 80024f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f8:	d503      	bpl.n	8002502 <Update_pid+0x192>
		pid -> y_n = plant_sat;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	611a      	str	r2, [r3, #16]
 8002500:	e012      	b.n	8002528 <Update_pid+0x1b8>
	}
	else if(pid -> y_n < -(plant_sat)){
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	ed93 7a04 	vldr	s14, [r3, #16]
 8002508:	edd7 7a00 	vldr	s15, [r7]
 800250c:	eef1 7a67 	vneg.f32	s15, s15
 8002510:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002518:	d506      	bpl.n	8002528 <Update_pid+0x1b8>
		pid -> y_n = (-(plant_sat));
 800251a:	edd7 7a00 	vldr	s15, [r7]
 800251e:	eef1 7a67 	vneg.f32	s15, s15
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	edc3 7a04 	vstr	s15, [r3, #16]
	}
	// Update value
	y_n_1 = pid -> y_n;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	4a08      	ldr	r2, [pc, #32]	@ (8002550 <Update_pid+0x1e0>)
 800252e:	6013      	str	r3, [r2, #0]
	e_n_1 = e_n;
 8002530:	4a06      	ldr	r2, [pc, #24]	@ (800254c <Update_pid+0x1dc>)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	6013      	str	r3, [r2, #0]

	return (int32_t)pid -> y_n;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	edd3 7a04 	vldr	s15, [r3, #16]
 800253c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002540:	ee17 3a90 	vmov	r3, s15
}
 8002544:	4618      	mov	r0, r3
 8002546:	3728      	adds	r7, #40	@ 0x28
 8002548:	46bd      	mov	sp, r7
 800254a:	bdb0      	pop	{r4, r5, r7, pc}
 800254c:	20001498 	.word	0x20001498
 8002550:	2000149c 	.word	0x2000149c

08002554 <Update_pwm>:
 *      Author: naker
 */

#include "pwm.h"

void Update_pwm(TIM_HandleTypeDef* htim, uint16_t htim_channel,GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, int32_t pwm_signal) {
 8002554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002558:	b08b      	sub	sp, #44	@ 0x2c
 800255a:	af00      	add	r7, sp, #0
 800255c:	6278      	str	r0, [r7, #36]	@ 0x24
 800255e:	61fa      	str	r2, [r7, #28]
 8002560:	461a      	mov	r2, r3
 8002562:	460b      	mov	r3, r1
 8002564:	847b      	strh	r3, [r7, #34]	@ 0x22
 8002566:	4613      	mov	r3, r2
 8002568:	843b      	strh	r3, [r7, #32]
	__HAL_TIM_SET_COMPARE(htim, htim_channel, fabs(pwm_signal));
 800256a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800256c:	2b00      	cmp	r3, #0
 800256e:	d111      	bne.n	8002594 <Update_pwm+0x40>
 8002570:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002572:	f7fd ffa3 	bl	80004bc <__aeabi_i2d>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	613a      	str	r2, [r7, #16]
 800257c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002584:	681c      	ldr	r4, [r3, #0]
 8002586:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800258a:	f7fe fa13 	bl	80009b4 <__aeabi_d2uiz>
 800258e:	4603      	mov	r3, r0
 8002590:	6363      	str	r3, [r4, #52]	@ 0x34
 8002592:	e061      	b.n	8002658 <Update_pwm+0x104>
 8002594:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002596:	2b04      	cmp	r3, #4
 8002598:	d111      	bne.n	80025be <Update_pwm+0x6a>
 800259a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800259c:	f7fd ff8e 	bl	80004bc <__aeabi_i2d>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	60ba      	str	r2, [r7, #8]
 80025a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ae:	681c      	ldr	r4, [r3, #0]
 80025b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025b4:	f7fe f9fe 	bl	80009b4 <__aeabi_d2uiz>
 80025b8:	4603      	mov	r3, r0
 80025ba:	63a3      	str	r3, [r4, #56]	@ 0x38
 80025bc:	e04c      	b.n	8002658 <Update_pwm+0x104>
 80025be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d111      	bne.n	80025e8 <Update_pwm+0x94>
 80025c4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80025c6:	f7fd ff79 	bl	80004bc <__aeabi_i2d>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	603a      	str	r2, [r7, #0]
 80025d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025d4:	607b      	str	r3, [r7, #4]
 80025d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d8:	681c      	ldr	r4, [r3, #0]
 80025da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025de:	f7fe f9e9 	bl	80009b4 <__aeabi_d2uiz>
 80025e2:	4603      	mov	r3, r0
 80025e4:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80025e6:	e037      	b.n	8002658 <Update_pwm+0x104>
 80025e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80025ea:	2b0c      	cmp	r3, #12
 80025ec:	d110      	bne.n	8002610 <Update_pwm+0xbc>
 80025ee:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80025f0:	f7fd ff64 	bl	80004bc <__aeabi_i2d>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4615      	mov	r5, r2
 80025fa:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 80025fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002600:	681c      	ldr	r4, [r3, #0]
 8002602:	4628      	mov	r0, r5
 8002604:	4631      	mov	r1, r6
 8002606:	f7fe f9d5 	bl	80009b4 <__aeabi_d2uiz>
 800260a:	4603      	mov	r3, r0
 800260c:	6423      	str	r3, [r4, #64]	@ 0x40
 800260e:	e023      	b.n	8002658 <Update_pwm+0x104>
 8002610:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002612:	2b10      	cmp	r3, #16
 8002614:	d110      	bne.n	8002638 <Update_pwm+0xe4>
 8002616:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002618:	f7fd ff50 	bl	80004bc <__aeabi_i2d>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4692      	mov	sl, r2
 8002622:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8002626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002628:	681c      	ldr	r4, [r3, #0]
 800262a:	4650      	mov	r0, sl
 800262c:	4659      	mov	r1, fp
 800262e:	f7fe f9c1 	bl	80009b4 <__aeabi_d2uiz>
 8002632:	4603      	mov	r3, r0
 8002634:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002636:	e00f      	b.n	8002658 <Update_pwm+0x104>
 8002638:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800263a:	f7fd ff3f 	bl	80004bc <__aeabi_i2d>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4690      	mov	r8, r2
 8002644:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8002648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264a:	681c      	ldr	r4, [r3, #0]
 800264c:	4640      	mov	r0, r8
 800264e:	4649      	mov	r1, r9
 8002650:	f7fe f9b0 	bl	80009b4 <__aeabi_d2uiz>
 8002654:	4603      	mov	r3, r0
 8002656:	64e3      	str	r3, [r4, #76]	@ 0x4c
	if (pwm_signal < 0) {
 8002658:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800265a:	2b00      	cmp	r3, #0
 800265c:	da06      	bge.n	800266c <Update_pwm+0x118>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, RESET);
 800265e:	8c3b      	ldrh	r3, [r7, #32]
 8002660:	2200      	movs	r2, #0
 8002662:	4619      	mov	r1, r3
 8002664:	69f8      	ldr	r0, [r7, #28]
 8002666:	f003 fb95 	bl	8005d94 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
	}
}
 800266a:	e005      	b.n	8002678 <Update_pwm+0x124>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
 800266c:	8c3b      	ldrh	r3, [r7, #32]
 800266e:	2201      	movs	r2, #1
 8002670:	4619      	mov	r1, r3
 8002672:	69f8      	ldr	r0, [r7, #28]
 8002674:	f003 fb8e 	bl	8005d94 <HAL_GPIO_WritePin>
}
 8002678:	bf00      	nop
 800267a:	372c      	adds	r7, #44	@ 0x2c
 800267c:	46bd      	mov	sp, r7
 800267e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002682 <QEI_init>:
 *  Created on: Apr 24, 2024
 *      Author: naker
 */
#include "qei.h"

void QEI_init(QEI* qei, int32_t ppr, int32_t freq, int32_t period){
 8002682:	b480      	push	{r7}
 8002684:	b085      	sub	sp, #20
 8002686:	af00      	add	r7, sp, #0
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607a      	str	r2, [r7, #4]
 800268e:	603b      	str	r3, [r7, #0]
	qei -> ppr = ppr;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	601a      	str	r2, [r3, #0]
	qei -> freq = freq;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	605a      	str	r2, [r3, #4]
	qei -> period = period;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	609a      	str	r2, [r3, #8]
	qei -> counter_value[NEW] = 0;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 80026b4:	68f9      	ldr	r1, [r7, #12]
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0.0;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0.0;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	621a      	str	r2, [r3, #32]
	qei -> mm = 0.0;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	629a      	str	r2, [r3, #40]	@ 0x28
	qei -> pps = 0.0;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	62da      	str	r2, [r3, #44]	@ 0x2c
	qei -> rpm = 0.0;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	631a      	str	r2, [r3, #48]	@ 0x30
	qei -> radps = 0.0;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	635a      	str	r2, [r3, #52]	@ 0x34
	qei -> mmps = 0.0;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> radpss = 0.0;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	64da      	str	r2, [r3, #76]	@ 0x4c
	qei -> rpms = 0.0;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	651a      	str	r2, [r3, #80]	@ 0x50
	qei -> mmpss = 0.0;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	655a      	str	r2, [r3, #84]	@ 0x54
	qei -> velocity_value[NEW] = 0;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> velocity_value[OLD] = 0;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	641a      	str	r2, [r3, #64]	@ 0x40

}
 8002722:	bf00      	nop
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <Update_qei>:

void Update_qei(QEI* qei, TIM_HandleTypeDef* htim){
 8002730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	6039      	str	r1, [r7, #0]
	// Update counter
	qei -> counter_value[NEW] = __HAL_TIM_GET_COUNTER(htim);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	60da      	str	r2, [r3, #12]
	// Update difference of counter's value = NEW - OLD
	qei -> diff_counter_value = qei -> counter_value[NEW] - qei -> counter_value[OLD];
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	461a      	mov	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	615a      	str	r2, [r3, #20]
	if(qei -> diff_counter_value > qei -> period / 2){
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695a      	ldr	r2, [r3, #20]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	0fd9      	lsrs	r1, r3, #31
 8002760:	440b      	add	r3, r1
 8002762:	105b      	asrs	r3, r3, #1
 8002764:	429a      	cmp	r2, r3
 8002766:	dd06      	ble.n	8002776 <Update_qei+0x46>
		qei -> diff_counter_value -= qei -> period;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	695a      	ldr	r2, [r3, #20]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	1ad2      	subs	r2, r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	615a      	str	r2, [r3, #20]
	}
	// over flow problem
	if(qei -> diff_counter_value < -(qei -> period) / 2){
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695a      	ldr	r2, [r3, #20]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	425b      	negs	r3, r3
 8002780:	0fd9      	lsrs	r1, r3, #31
 8002782:	440b      	add	r3, r1
 8002784:	105b      	asrs	r3, r3, #1
 8002786:	429a      	cmp	r2, r3
 8002788:	da06      	bge.n	8002798 <Update_qei+0x68>
		qei -> diff_counter_value += qei -> period;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695a      	ldr	r2, [r3, #20]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	441a      	add	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	615a      	str	r2, [r3, #20]
	}
	// Update velocity at difference unit
	qei -> pps = (float32_t)qei -> diff_counter_value * (float32_t)(qei -> freq);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	ee07 3a90 	vmov	s15, r3
 80027a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	ee07 3a90 	vmov	s15, r3
 80027ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
//	qei -> radps = qei -> pps * 2.0 * M_PI / (float)(qei -> ppr);
//	qei -> rpm = qei -> pps * 60.0 / (float)(qei -> ppr) ;
	qei -> mmps = qei -> pps * 16.0 / (float32_t)(qei -> ppr);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fd fe8e 	bl	80004e0 <__aeabi_f2d>
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	4b5c      	ldr	r3, [pc, #368]	@ (800293c <Update_qei+0x20c>)
 80027ca:	f7fd fee1 	bl	8000590 <__aeabi_dmul>
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	4692      	mov	sl, r2
 80027d4:	469b      	mov	fp, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	ee07 3a90 	vmov	s15, r3
 80027de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027e2:	ee17 0a90 	vmov	r0, s15
 80027e6:	f7fd fe7b 	bl	80004e0 <__aeabi_f2d>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4650      	mov	r0, sl
 80027f0:	4659      	mov	r1, fp
 80027f2:	f7fd fff7 	bl	80007e4 <__aeabi_ddiv>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4610      	mov	r0, r2
 80027fc:	4619      	mov	r1, r3
 80027fe:	f7fe f8f9 	bl	80009f4 <__aeabi_d2f>
 8002802:	4602      	mov	r2, r0
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	639a      	str	r2, [r3, #56]	@ 0x38

	// Update position at difference unit
	qei -> pulse += qei -> diff_counter_value;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	6949      	ldr	r1, [r1, #20]
 8002812:	17c8      	asrs	r0, r1, #31
 8002814:	460c      	mov	r4, r1
 8002816:	4605      	mov	r5, r0
 8002818:	eb12 0804 	adds.w	r8, r2, r4
 800281c:	eb43 0905 	adc.w	r9, r3, r5
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	e9c3 8906 	strd	r8, r9, [r3, #24]
//	qei -> rad += (float)qei -> diff_counter_value * 2.0 * M_PI / (float)(qei -> ppr);
//	qei -> rev += (float)qei -> diff_counter_value / (float)(qei -> ppr);
	qei -> mm += (float32_t)qei -> diff_counter_value * 16.0 / (float32_t)(qei -> ppr); // for lead 16 mm.
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800282a:	4618      	mov	r0, r3
 800282c:	f7fd fe58 	bl	80004e0 <__aeabi_f2d>
 8002830:	4604      	mov	r4, r0
 8002832:	460d      	mov	r5, r1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	ee07 3a90 	vmov	s15, r3
 800283c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002840:	ee17 0a90 	vmov	r0, s15
 8002844:	f7fd fe4c 	bl	80004e0 <__aeabi_f2d>
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	4b3b      	ldr	r3, [pc, #236]	@ (800293c <Update_qei+0x20c>)
 800284e:	f7fd fe9f 	bl	8000590 <__aeabi_dmul>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	4690      	mov	r8, r2
 8002858:	4699      	mov	r9, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	ee07 3a90 	vmov	s15, r3
 8002862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002866:	ee17 0a90 	vmov	r0, s15
 800286a:	f7fd fe39 	bl	80004e0 <__aeabi_f2d>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4640      	mov	r0, r8
 8002874:	4649      	mov	r1, r9
 8002876:	f7fd ffb5 	bl	80007e4 <__aeabi_ddiv>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4620      	mov	r0, r4
 8002880:	4629      	mov	r1, r5
 8002882:	f7fd fccf 	bl	8000224 <__adddf3>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4610      	mov	r0, r2
 800288c:	4619      	mov	r1, r3
 800288e:	f7fe f8b1 	bl	80009f4 <__aeabi_d2f>
 8002892:	4602      	mov	r2, r0
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	629a      	str	r2, [r3, #40]	@ 0x28

	// Update acceleration
	qei -> velocity_value[NEW] = qei -> pps;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> diff_velocity_value = qei -> velocity_value[NEW] - qei -> velocity_value[OLD];
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80028ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	qei -> ppss = qei -> diff_velocity_value * (float32_t)(qei -> freq);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	ee07 3a90 	vmov	s15, r3
 80028c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
//	qei -> radpss = qei -> ppss * 2.0 * M_PI / (float)(qei -> ppr);
//	qei -> rpms = qei -> ppss * 60.0 / (float)(qei -> ppr);
	qei -> mmpss = qei -> ppss * 16.0 / (float32_t)(qei -> ppr); // Acceleration in mm/s^2
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fd fe02 	bl	80004e0 <__aeabi_f2d>
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	4b16      	ldr	r3, [pc, #88]	@ (800293c <Update_qei+0x20c>)
 80028e2:	f7fd fe55 	bl	8000590 <__aeabi_dmul>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4614      	mov	r4, r2
 80028ec:	461d      	mov	r5, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	ee07 3a90 	vmov	s15, r3
 80028f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028fa:	ee17 0a90 	vmov	r0, s15
 80028fe:	f7fd fdef 	bl	80004e0 <__aeabi_f2d>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4620      	mov	r0, r4
 8002908:	4629      	mov	r1, r5
 800290a:	f7fd ff6b 	bl	80007e4 <__aeabi_ddiv>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4610      	mov	r0, r2
 8002914:	4619      	mov	r1, r3
 8002916:	f7fe f86d 	bl	80009f4 <__aeabi_d2f>
 800291a:	4602      	mov	r2, r0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	655a      	str	r2, [r3, #84]	@ 0x54

	// Update OLD value
	qei -> counter_value[OLD] = qei -> counter_value[NEW];
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	611a      	str	r2, [r3, #16]
	qei -> velocity_value[OLD] = qei -> velocity_value[NEW];
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	641a      	str	r2, [r3, #64]	@ 0x40

}
 8002930:	bf00      	nop
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800293a:	bf00      	nop
 800293c:	40300000 	.word	0x40300000

08002940 <Reset_qei>:

void Reset_qei(QEI* qei){
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
	qei -> counter_value[NEW] = 0;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0.0;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0.0;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	621a      	str	r2, [r3, #32]
	qei -> mm = 0.0;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	629a      	str	r2, [r3, #40]	@ 0x28
	qei -> pps = 0.0;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	62da      	str	r2, [r3, #44]	@ 0x2c
	qei -> rpm = 0.0;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	631a      	str	r2, [r3, #48]	@ 0x30
	qei -> radps = 0.0;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	635a      	str	r2, [r3, #52]	@ 0x34
	qei -> mmps = 0.0;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f04f 0200 	mov.w	r2, #0
 800299e:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> radpss = 0.0;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	64da      	str	r2, [r3, #76]	@ 0x4c
	qei -> rpms = 0.0;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	651a      	str	r2, [r3, #80]	@ 0x50
	qei -> mmpss = 0.0;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f04f 0200 	mov.w	r2, #0
 80029b6:	655a      	str	r2, [r3, #84]	@ 0x54
	qei -> velocity_value[NEW] = 0;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> velocity_value[OLD] = 0;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <Get_mmps>:

float32_t Get_mmps(QEI* qei){
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
	return qei -> mmps;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e0:	ee07 3a90 	vmov	s15, r3
}
 80029e4:	eeb0 0a67 	vmov.f32	s0, s15
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <point_init>:
 *  Created on: May 3, 2024
 *      Author: naker
 */
#include "state.h"

void point_init(POINT* point){
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
	point -> goal = 0.0;
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	f04f 0300 	mov.w	r3, #0
 8002a04:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <homing_init>:



void homing_init(HOME* home){
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
	home -> homing_command = 0;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	709a      	strb	r2, [r3, #2]
	home -> homing_state[0] = 0;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	701a      	strb	r2, [r3, #0]
	home -> homing_state[1] = 0;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	705a      	strb	r2, [r3, #1]
	home -> is_home = 0;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	70da      	strb	r2, [r3, #3]
	home -> homing_first = 0;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	711a      	strb	r2, [r3, #4]
	home -> homing_ts = 0;
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	e9c1 2302 	strd	r2, r3, [r1, #8]
	home -> pwm = 0;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	821a      	strh	r2, [r3, #16]
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <homing>:
void homing(HOME* home, GPIO_TypeDef* GPIO_Prox, uint16_t GPIO_Pin_Prox)
{
 8002a5a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6178      	str	r0, [r7, #20]
 8002a64:	6139      	str	r1, [r7, #16]
 8002a66:	4613      	mov	r3, r2
 8002a68:	81fb      	strh	r3, [r7, #14]
	// If we have homing command
	if(home -> homing_command == 1){
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	789b      	ldrb	r3, [r3, #2]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	f040 817c 	bne.w	8002d6c <homing+0x312>
		if(home -> homing_state[0] == 0){
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d121      	bne.n	8002ac0 <homing+0x66>
			// Homing state selection
			// Robot is not home but proximity is detecting
			if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && home -> is_home == 0){
 8002a7c:	89fb      	ldrh	r3, [r7, #14]
 8002a7e:	4619      	mov	r1, r3
 8002a80:	6938      	ldr	r0, [r7, #16]
 8002a82:	f003 f96f 	bl	8005d64 <HAL_GPIO_ReadPin>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d107      	bne.n	8002a9c <homing+0x42>
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	78db      	ldrb	r3, [r3, #3]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d103      	bne.n	8002a9c <homing+0x42>
				home -> homing_state[1] = 2;
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	2202      	movs	r2, #2
 8002a98:	705a      	strb	r2, [r3, #1]
 8002a9a:	e00e      	b.n	8002aba <homing+0x60>
			}
			// Robot is not home and proximity isn't detecting
			else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && home -> is_home == 0){
 8002a9c:	89fb      	ldrh	r3, [r7, #14]
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	6938      	ldr	r0, [r7, #16]
 8002aa2:	f003 f95f 	bl	8005d64 <HAL_GPIO_ReadPin>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d106      	bne.n	8002aba <homing+0x60>
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	78db      	ldrb	r3, [r3, #3]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d102      	bne.n	8002aba <homing+0x60>
				home -> homing_state[1] = 3;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	705a      	strb	r2, [r3, #1]
			}
			// Set homing state
			home -> homing_state[0] = 1;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2201      	movs	r2, #1
 8002abe:	701a      	strb	r2, [r3, #0]
		}
		if(home -> homing_state[0] == 1){
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	f040 8154 	bne.w	8002d72 <homing+0x318>
			// Homing
			if(home -> homing_state[1] == 2){
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	785b      	ldrb	r3, [r3, #1]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d179      	bne.n	8002bc6 <homing+0x16c>
//				home -> state_check += 10;
				if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1 && home -> homing_ts > 2000){
 8002ad2:	89fb      	ldrh	r3, [r7, #14]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	6938      	ldr	r0, [r7, #16]
 8002ad8:	f003 f944 	bl	8005d64 <HAL_GPIO_ReadPin>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d11f      	bne.n	8002b22 <homing+0xc8>
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002ae8:	f240 71d1 	movw	r1, #2001	@ 0x7d1
 8002aec:	428a      	cmp	r2, r1
 8002aee:	f173 0300 	sbcs.w	r3, r3, #0
 8002af2:	d316      	bcc.n	8002b22 <homing+0xc8>
					// Stop when proximity was detected
					home -> pwm = 0;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	2200      	movs	r2, #0
 8002af8:	821a      	strh	r2, [r3, #16]
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0);
					// Reset homing state and other
					home -> homing_ts = 0;
 8002afa:	6979      	ldr	r1, [r7, #20]
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	e9c1 2302 	strd	r2, r3, [r1, #8]
					home -> homing_state[0] = 0;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	701a      	strb	r2, [r3, #0]
					home -> homing_state[1] = 0;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2200      	movs	r2, #0
 8002b12:	705a      	strb	r2, [r3, #1]
					home -> homing_command = 0;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	2200      	movs	r2, #0
 8002b18:	709a      	strb	r2, [r3, #2]
					home -> is_home = 1;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	70da      	strb	r2, [r3, #3]
					return;
 8002b20:	e127      	b.n	8002d72 <homing+0x318>
				}else if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1 && home -> homing_ts >= 0 && home -> homing_ts < 1000){
 8002b22:	89fb      	ldrh	r3, [r7, #14]
 8002b24:	4619      	mov	r1, r3
 8002b26:	6938      	ldr	r0, [r7, #16]
 8002b28:	f003 f91c 	bl	8005d64 <HAL_GPIO_ReadPin>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d10b      	bne.n	8002b4a <homing+0xf0>
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002b38:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8002b3c:	f173 0300 	sbcs.w	r3, r3, #0
 8002b40:	d203      	bcs.n	8002b4a <homing+0xf0>
					// Move upper
					home -> pwm = 200;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	22c8      	movs	r2, #200	@ 0xc8
 8002b46:	821a      	strh	r2, [r3, #16]
 8002b48:	e02f      	b.n	8002baa <homing+0x150>
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 200);
				}else if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0 && home -> homing_ts >= 1000 && home -> homing_ts < 2000){ // wait 1.0 secs
 8002b4a:	89fb      	ldrh	r3, [r7, #14]
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	6938      	ldr	r0, [r7, #16]
 8002b50:	f003 f908 	bl	8005d64 <HAL_GPIO_ReadPin>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d113      	bne.n	8002b82 <homing+0x128>
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002b60:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8002b64:	f173 0300 	sbcs.w	r3, r3, #0
 8002b68:	d30b      	bcc.n	8002b82 <homing+0x128>
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002b70:	f5b2 6ffa 	cmp.w	r2, #2000	@ 0x7d0
 8002b74:	f173 0300 	sbcs.w	r3, r3, #0
 8002b78:	d203      	bcs.n	8002b82 <homing+0x128>
					// Stop
					home -> pwm = 0;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	821a      	strh	r2, [r3, #16]
 8002b80:	e013      	b.n	8002baa <homing+0x150>
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0);
				}else if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0 && home -> homing_ts >= 2000){ // wait 1.25 secs
 8002b82:	89fb      	ldrh	r3, [r7, #14]
 8002b84:	4619      	mov	r1, r3
 8002b86:	6938      	ldr	r0, [r7, #16]
 8002b88:	f003 f8ec 	bl	8005d64 <HAL_GPIO_ReadPin>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10b      	bne.n	8002baa <homing+0x150>
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002b98:	f5b2 6ffa 	cmp.w	r2, #2000	@ 0x7d0
 8002b9c:	f173 0300 	sbcs.w	r3, r3, #0
 8002ba0:	d303      	bcc.n	8002baa <homing+0x150>
					// Move lower
					home -> pwm = -120;
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f64f 7288 	movw	r2, #65416	@ 0xff88
 8002ba8:	821a      	strh	r2, [r3, #16]
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, -120);
				}
				home -> homing_ts++;
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002bb0:	1c51      	adds	r1, r2, #1
 8002bb2:	6039      	str	r1, [r7, #0]
 8002bb4:	f143 0300 	adc.w	r3, r3, #0
 8002bb8:	607b      	str	r3, [r7, #4]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002bc0:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8002bc4:	e0d5      	b.n	8002d72 <homing+0x318>
			}
			else if(home -> homing_state[1] == 3){
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	785b      	ldrb	r3, [r3, #1]
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	f040 80d1 	bne.w	8002d72 <homing+0x318>
				if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && (home -> homing_first == 1)){
 8002bd0:	89fb      	ldrh	r3, [r7, #14]
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	6938      	ldr	r0, [r7, #16]
 8002bd6:	f003 f8c5 	bl	8005d64 <HAL_GPIO_ReadPin>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d11d      	bne.n	8002c1c <homing+0x1c2>
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	791b      	ldrb	r3, [r3, #4]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d119      	bne.n	8002c1c <homing+0x1c2>
					// Stop when proximity was detected
					home -> pwm = 0;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	2200      	movs	r2, #0
 8002bec:	821a      	strh	r2, [r3, #16]
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0);
					// Reset homing state and other
					home -> homing_ts = 0;
 8002bee:	6979      	ldr	r1, [r7, #20]
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	e9c1 2302 	strd	r2, r3, [r1, #8]
					home -> homing_first = 0;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	711a      	strb	r2, [r3, #4]
					home -> homing_state[0] = 0;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2200      	movs	r2, #0
 8002c06:	701a      	strb	r2, [r3, #0]
					home -> homing_state[1] = 0;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	705a      	strb	r2, [r3, #1]
					home -> homing_command = 0;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2200      	movs	r2, #0
 8002c12:	709a      	strb	r2, [r3, #2]
					home -> is_home = 1;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2201      	movs	r2, #1
 8002c18:	70da      	strb	r2, [r3, #3]
					return;
 8002c1a:	e0aa      	b.n	8002d72 <homing+0x318>
				}else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && (home -> homing_first == 0)){
 8002c1c:	89fb      	ldrh	r3, [r7, #14]
 8002c1e:	4619      	mov	r1, r3
 8002c20:	6938      	ldr	r0, [r7, #16]
 8002c22:	f003 f89f 	bl	8005d64 <HAL_GPIO_ReadPin>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d12a      	bne.n	8002c82 <homing+0x228>
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	791b      	ldrb	r3, [r3, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d126      	bne.n	8002c82 <homing+0x228>
					// Stop when proximity was detected
					if(home -> homing_ts == 0){
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	d102      	bne.n	8002c44 <homing+0x1ea>
						home -> pwm = 0;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2200      	movs	r2, #0
 8002c42:	821a      	strh	r2, [r3, #16]
//						Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0);
					}
					home -> homing_ts++;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c4a:	f112 0a01 	adds.w	sl, r2, #1
 8002c4e:	f143 0b00 	adc.w	fp, r3, #0
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	e9c3 ab02 	strd	sl, fp, [r3, #8]
					if(home -> homing_ts >= 1000 && home -> homing_ts < 2000){ // wait 0.25 secs
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c5e:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8002c62:	f173 0300 	sbcs.w	r3, r3, #0
 8002c66:	f0c0 8083 	bcc.w	8002d70 <homing+0x316>
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c70:	f5b2 6ffa 	cmp.w	r2, #2000	@ 0x7d0
 8002c74:	f173 0300 	sbcs.w	r3, r3, #0
 8002c78:	d27a      	bcs.n	8002d70 <homing+0x316>
						 // Move upper
						home -> pwm = 200;
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	22c8      	movs	r2, #200	@ 0xc8
 8002c7e:	821a      	strh	r2, [r3, #16]
					if(home -> homing_ts >= 1000 && home -> homing_ts < 2000){ // wait 0.25 secs
 8002c80:	e076      	b.n	8002d70 <homing+0x316>
//						Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 200);
					}
				}else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && (home -> homing_first == 1) && home -> homing_ts >= 2000 && home -> homing_ts < 3000){ // wait 0.5 secs
 8002c82:	89fb      	ldrh	r3, [r7, #14]
 8002c84:	4619      	mov	r1, r3
 8002c86:	6938      	ldr	r0, [r7, #16]
 8002c88:	f003 f86c 	bl	8005d64 <HAL_GPIO_ReadPin>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d122      	bne.n	8002cd8 <homing+0x27e>
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	791b      	ldrb	r3, [r3, #4]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d11e      	bne.n	8002cd8 <homing+0x27e>
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002ca0:	f5b2 6ffa 	cmp.w	r2, #2000	@ 0x7d0
 8002ca4:	f173 0300 	sbcs.w	r3, r3, #0
 8002ca8:	d316      	bcc.n	8002cd8 <homing+0x27e>
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002cb0:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8002cb4:	428a      	cmp	r2, r1
 8002cb6:	f173 0300 	sbcs.w	r3, r3, #0
 8002cba:	d20d      	bcs.n	8002cd8 <homing+0x27e>
					// Stop
					home -> pwm = 0;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	821a      	strh	r2, [r3, #16]
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0);
					home -> homing_ts++;
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002cc8:	f112 0801 	adds.w	r8, r2, #1
 8002ccc:	f143 0900 	adc.w	r9, r3, #0
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8002cd6:	e04c      	b.n	8002d72 <homing+0x318>
				}else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && (home -> homing_first == 1) && home -> homing_ts >= 3000){ // wait 1.25 secs
 8002cd8:	89fb      	ldrh	r3, [r7, #14]
 8002cda:	4619      	mov	r1, r3
 8002cdc:	6938      	ldr	r0, [r7, #16]
 8002cde:	f003 f841 	bl	8005d64 <HAL_GPIO_ReadPin>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d111      	bne.n	8002d0c <homing+0x2b2>
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	791b      	ldrb	r3, [r3, #4]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d10d      	bne.n	8002d0c <homing+0x2b2>
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002cf6:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8002cfa:	428a      	cmp	r2, r1
 8002cfc:	f173 0300 	sbcs.w	r3, r3, #0
 8002d00:	d304      	bcc.n	8002d0c <homing+0x2b2>
					// Move lower
					home -> pwm = -120;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f64f 7288 	movw	r2, #65416	@ 0xff88
 8002d08:	821a      	strh	r2, [r3, #16]
 8002d0a:	e032      	b.n	8002d72 <homing+0x318>
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, -120);
				}else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && (home -> homing_first == 1)){
 8002d0c:	89fb      	ldrh	r3, [r7, #14]
 8002d0e:	4619      	mov	r1, r3
 8002d10:	6938      	ldr	r0, [r7, #16]
 8002d12:	f003 f827 	bl	8005d64 <HAL_GPIO_ReadPin>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10d      	bne.n	8002d38 <homing+0x2de>
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	791b      	ldrb	r3, [r3, #4]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d109      	bne.n	8002d38 <homing+0x2de>
					home -> homing_ts++;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002d2a:	1c54      	adds	r4, r2, #1
 8002d2c:	f143 0500 	adc.w	r5, r3, #0
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	e9c3 4502 	strd	r4, r5, [r3, #8]
 8002d36:	e01c      	b.n	8002d72 <homing+0x318>
				}else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && (home -> homing_first == 0) && home -> homing_ts == 0){
 8002d38:	89fb      	ldrh	r3, [r7, #14]
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	6938      	ldr	r0, [r7, #16]
 8002d3e:	f003 f811 	bl	8005d64 <HAL_GPIO_ReadPin>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10d      	bne.n	8002d64 <homing+0x30a>
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	791b      	ldrb	r3, [r3, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d109      	bne.n	8002d64 <homing+0x30a>
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	d104      	bne.n	8002d64 <homing+0x30a>
					home -> pwm = -120;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f64f 7288 	movw	r2, #65416	@ 0xff88
 8002d60:	821a      	strh	r2, [r3, #16]
 8002d62:	e006      	b.n	8002d72 <homing+0x318>
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, -120); // Move lower
				}else{
					home -> homing_first = 1;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	2201      	movs	r2, #1
 8002d68:	711a      	strb	r2, [r3, #4]
 8002d6a:	e002      	b.n	8002d72 <homing+0x318>
			}
		}
	}
	// Nothing happen
	else{
		return;
 8002d6c:	bf00      	nop
 8002d6e:	e000      	b.n	8002d72 <homing+0x318>
					if(home -> homing_ts >= 1000 && home -> homing_ts < 2000){ // wait 0.25 secs
 8002d70:	bf00      	nop
	}
}
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002d7a <emer_init>:

void emer_init(EMER* emer){
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
	emer -> emer_state = 0;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	701a      	strb	r2, [r3, #0]
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <emergency>:

void emergency(EMER* emer, GPIO_TypeDef* GPIO_EmerLight, uint16_t GPIO_Pin_EmerLight){
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	80fb      	strh	r3, [r7, #6]
	if(emer -> emer_state == 1){
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d106      	bne.n	8002db8 <emergency+0x24>
		HAL_GPIO_WritePin(GPIO_EmerLight, GPIO_Pin_EmerLight, SET);
 8002daa:	88fb      	ldrh	r3, [r7, #6]
 8002dac:	2201      	movs	r2, #1
 8002dae:	4619      	mov	r1, r3
 8002db0:	68b8      	ldr	r0, [r7, #8]
 8002db2:	f002 ffef 	bl	8005d94 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIO_EmerLight, GPIO_Pin_EmerLight, RESET);
	}
	return;
 8002db6:	e006      	b.n	8002dc6 <emergency+0x32>
		HAL_GPIO_WritePin(GPIO_EmerLight, GPIO_Pin_EmerLight, RESET);
 8002db8:	88fb      	ldrh	r3, [r7, #6]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	68b8      	ldr	r0, [r7, #8]
 8002dc0:	f002 ffe8 	bl	8005d94 <HAL_GPIO_WritePin>
	return;
 8002dc4:	bf00      	nop
}
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8002e10 <HAL_MspInit+0x44>)
 8002dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dd6:	4a0e      	ldr	r2, [pc, #56]	@ (8002e10 <HAL_MspInit+0x44>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	6613      	str	r3, [r2, #96]	@ 0x60
 8002dde:	4b0c      	ldr	r3, [pc, #48]	@ (8002e10 <HAL_MspInit+0x44>)
 8002de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	607b      	str	r3, [r7, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dea:	4b09      	ldr	r3, [pc, #36]	@ (8002e10 <HAL_MspInit+0x44>)
 8002dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dee:	4a08      	ldr	r2, [pc, #32]	@ (8002e10 <HAL_MspInit+0x44>)
 8002df0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002df4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002df6:	4b06      	ldr	r3, [pc, #24]	@ (8002e10 <HAL_MspInit+0x44>)
 8002df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dfe:	603b      	str	r3, [r7, #0]
 8002e00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002e02:	f003 f89b 	bl	8005f3c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40021000 	.word	0x40021000

08002e14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b09e      	sub	sp, #120	@ 0x78
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e1c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	60da      	str	r2, [r3, #12]
 8002e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e2c:	f107 0310 	add.w	r3, r7, #16
 8002e30:	2254      	movs	r2, #84	@ 0x54
 8002e32:	2100      	movs	r1, #0
 8002e34:	4618      	mov	r0, r3
 8002e36:	f007 ff2b 	bl	800ac90 <memset>
  if(hadc->Instance==ADC1)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e42:	d167      	bne.n	8002f14 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002e44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e48:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002e4a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002e4e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e50:	f107 0310 	add.w	r3, r7, #16
 8002e54:	4618      	mov	r0, r3
 8002e56:	f003 fdaf 	bl	80069b8 <HAL_RCCEx_PeriphCLKConfig>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002e60:	f7ff fa5e 	bl	8002320 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002e64:	4b2d      	ldr	r3, [pc, #180]	@ (8002f1c <HAL_ADC_MspInit+0x108>)
 8002e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e68:	4a2c      	ldr	r2, [pc, #176]	@ (8002f1c <HAL_ADC_MspInit+0x108>)
 8002e6a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e70:	4b2a      	ldr	r3, [pc, #168]	@ (8002f1c <HAL_ADC_MspInit+0x108>)
 8002e72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e7c:	4b27      	ldr	r3, [pc, #156]	@ (8002f1c <HAL_ADC_MspInit+0x108>)
 8002e7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e80:	4a26      	ldr	r2, [pc, #152]	@ (8002f1c <HAL_ADC_MspInit+0x108>)
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e88:	4b24      	ldr	r3, [pc, #144]	@ (8002f1c <HAL_ADC_MspInit+0x108>)
 8002e8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Current_sensor_Pin;
 8002e94:	2301      	movs	r3, #1
 8002e96:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Current_sensor_GPIO_Port, &GPIO_InitStruct);
 8002ea0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002eaa:	f002 fdd9 	bl	8005a60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002eae:	4b1c      	ldr	r3, [pc, #112]	@ (8002f20 <HAL_ADC_MspInit+0x10c>)
 8002eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8002f24 <HAL_ADC_MspInit+0x110>)
 8002eb2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8002f20 <HAL_ADC_MspInit+0x10c>)
 8002eb6:	2205      	movs	r2, #5
 8002eb8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002eba:	4b19      	ldr	r3, [pc, #100]	@ (8002f20 <HAL_ADC_MspInit+0x10c>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ec0:	4b17      	ldr	r3, [pc, #92]	@ (8002f20 <HAL_ADC_MspInit+0x10c>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002ec6:	4b16      	ldr	r3, [pc, #88]	@ (8002f20 <HAL_ADC_MspInit+0x10c>)
 8002ec8:	2280      	movs	r2, #128	@ 0x80
 8002eca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ecc:	4b14      	ldr	r3, [pc, #80]	@ (8002f20 <HAL_ADC_MspInit+0x10c>)
 8002ece:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ed2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ed4:	4b12      	ldr	r3, [pc, #72]	@ (8002f20 <HAL_ADC_MspInit+0x10c>)
 8002ed6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002eda:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002edc:	4b10      	ldr	r3, [pc, #64]	@ (8002f20 <HAL_ADC_MspInit+0x10c>)
 8002ede:	2220      	movs	r2, #32
 8002ee0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8002f20 <HAL_ADC_MspInit+0x10c>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ee8:	480d      	ldr	r0, [pc, #52]	@ (8002f20 <HAL_ADC_MspInit+0x10c>)
 8002eea:	f002 fa87 	bl	80053fc <HAL_DMA_Init>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8002ef4:	f7ff fa14 	bl	8002320 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a09      	ldr	r2, [pc, #36]	@ (8002f20 <HAL_ADC_MspInit+0x10c>)
 8002efc:	655a      	str	r2, [r3, #84]	@ 0x54
 8002efe:	4a08      	ldr	r2, [pc, #32]	@ (8002f20 <HAL_ADC_MspInit+0x10c>)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002f04:	2200      	movs	r2, #0
 8002f06:	2100      	movs	r1, #0
 8002f08:	2012      	movs	r0, #18
 8002f0a:	f002 fa42 	bl	8005392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002f0e:	2012      	movs	r0, #18
 8002f10:	f002 fa59 	bl	80053c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f14:	bf00      	nop
 8002f16:	3778      	adds	r7, #120	@ 0x78
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	200005cc 	.word	0x200005cc
 8002f24:	40020008 	.word	0x40020008

08002f28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a49      	ldr	r2, [pc, #292]	@ (800305c <HAL_TIM_Base_MspInit+0x134>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d13f      	bne.n	8002fba <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f3a:	4b49      	ldr	r3, [pc, #292]	@ (8003060 <HAL_TIM_Base_MspInit+0x138>)
 8002f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f3e:	4a48      	ldr	r2, [pc, #288]	@ (8003060 <HAL_TIM_Base_MspInit+0x138>)
 8002f40:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002f44:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f46:	4b46      	ldr	r3, [pc, #280]	@ (8003060 <HAL_TIM_Base_MspInit+0x138>)
 8002f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel4;
 8002f52:	4b44      	ldr	r3, [pc, #272]	@ (8003064 <HAL_TIM_Base_MspInit+0x13c>)
 8002f54:	4a44      	ldr	r2, [pc, #272]	@ (8003068 <HAL_TIM_Base_MspInit+0x140>)
 8002f56:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8002f58:	4b42      	ldr	r3, [pc, #264]	@ (8003064 <HAL_TIM_Base_MspInit+0x13c>)
 8002f5a:	222a      	movs	r2, #42	@ 0x2a
 8002f5c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f5e:	4b41      	ldr	r3, [pc, #260]	@ (8003064 <HAL_TIM_Base_MspInit+0x13c>)
 8002f60:	2210      	movs	r2, #16
 8002f62:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f64:	4b3f      	ldr	r3, [pc, #252]	@ (8003064 <HAL_TIM_Base_MspInit+0x13c>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002f6a:	4b3e      	ldr	r3, [pc, #248]	@ (8003064 <HAL_TIM_Base_MspInit+0x13c>)
 8002f6c:	2280      	movs	r2, #128	@ 0x80
 8002f6e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f70:	4b3c      	ldr	r3, [pc, #240]	@ (8003064 <HAL_TIM_Base_MspInit+0x13c>)
 8002f72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f76:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f78:	4b3a      	ldr	r3, [pc, #232]	@ (8003064 <HAL_TIM_Base_MspInit+0x13c>)
 8002f7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f7e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8002f80:	4b38      	ldr	r3, [pc, #224]	@ (8003064 <HAL_TIM_Base_MspInit+0x13c>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002f86:	4b37      	ldr	r3, [pc, #220]	@ (8003064 <HAL_TIM_Base_MspInit+0x13c>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002f8c:	4835      	ldr	r0, [pc, #212]	@ (8003064 <HAL_TIM_Base_MspInit+0x13c>)
 8002f8e:	f002 fa35 	bl	80053fc <HAL_DMA_Init>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8002f98:	f7ff f9c2 	bl	8002320 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a31      	ldr	r2, [pc, #196]	@ (8003064 <HAL_TIM_Base_MspInit+0x13c>)
 8002fa0:	625a      	str	r2, [r3, #36]	@ 0x24
 8002fa2:	4a30      	ldr	r2, [pc, #192]	@ (8003064 <HAL_TIM_Base_MspInit+0x13c>)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2100      	movs	r1, #0
 8002fac:	2019      	movs	r0, #25
 8002fae:	f002 f9f0 	bl	8005392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002fb2:	2019      	movs	r0, #25
 8002fb4:	f002 fa07 	bl	80053c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002fb8:	e04c      	b.n	8003054 <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM3)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a2b      	ldr	r2, [pc, #172]	@ (800306c <HAL_TIM_Base_MspInit+0x144>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d114      	bne.n	8002fee <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fc4:	4b26      	ldr	r3, [pc, #152]	@ (8003060 <HAL_TIM_Base_MspInit+0x138>)
 8002fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc8:	4a25      	ldr	r2, [pc, #148]	@ (8003060 <HAL_TIM_Base_MspInit+0x138>)
 8002fca:	f043 0302 	orr.w	r3, r3, #2
 8002fce:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fd0:	4b23      	ldr	r3, [pc, #140]	@ (8003060 <HAL_TIM_Base_MspInit+0x138>)
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2100      	movs	r1, #0
 8002fe0:	201d      	movs	r0, #29
 8002fe2:	f002 f9d6 	bl	8005392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002fe6:	201d      	movs	r0, #29
 8002fe8:	f002 f9ed 	bl	80053c6 <HAL_NVIC_EnableIRQ>
}
 8002fec:	e032      	b.n	8003054 <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM5)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a1f      	ldr	r2, [pc, #124]	@ (8003070 <HAL_TIM_Base_MspInit+0x148>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d114      	bne.n	8003022 <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ff8:	4b19      	ldr	r3, [pc, #100]	@ (8003060 <HAL_TIM_Base_MspInit+0x138>)
 8002ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffc:	4a18      	ldr	r2, [pc, #96]	@ (8003060 <HAL_TIM_Base_MspInit+0x138>)
 8002ffe:	f043 0308 	orr.w	r3, r3, #8
 8003002:	6593      	str	r3, [r2, #88]	@ 0x58
 8003004:	4b16      	ldr	r3, [pc, #88]	@ (8003060 <HAL_TIM_Base_MspInit+0x138>)
 8003006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003008:	f003 0308 	and.w	r3, r3, #8
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003010:	2200      	movs	r2, #0
 8003012:	2100      	movs	r1, #0
 8003014:	2032      	movs	r0, #50	@ 0x32
 8003016:	f002 f9bc 	bl	8005392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800301a:	2032      	movs	r0, #50	@ 0x32
 800301c:	f002 f9d3 	bl	80053c6 <HAL_NVIC_EnableIRQ>
}
 8003020:	e018      	b.n	8003054 <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM16)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a13      	ldr	r2, [pc, #76]	@ (8003074 <HAL_TIM_Base_MspInit+0x14c>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d113      	bne.n	8003054 <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800302c:	4b0c      	ldr	r3, [pc, #48]	@ (8003060 <HAL_TIM_Base_MspInit+0x138>)
 800302e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003030:	4a0b      	ldr	r2, [pc, #44]	@ (8003060 <HAL_TIM_Base_MspInit+0x138>)
 8003032:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003036:	6613      	str	r3, [r2, #96]	@ 0x60
 8003038:	4b09      	ldr	r3, [pc, #36]	@ (8003060 <HAL_TIM_Base_MspInit+0x138>)
 800303a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800303c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003040:	60bb      	str	r3, [r7, #8]
 8003042:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003044:	2200      	movs	r2, #0
 8003046:	2100      	movs	r1, #0
 8003048:	2019      	movs	r0, #25
 800304a:	f002 f9a2 	bl	8005392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800304e:	2019      	movs	r0, #25
 8003050:	f002 f9b9 	bl	80053c6 <HAL_NVIC_EnableIRQ>
}
 8003054:	bf00      	nop
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40012c00 	.word	0x40012c00
 8003060:	40021000 	.word	0x40021000
 8003064:	20000a28 	.word	0x20000a28
 8003068:	40020044 	.word	0x40020044
 800306c:	40000400 	.word	0x40000400
 8003070:	40000c00 	.word	0x40000c00
 8003074:	40014400 	.word	0x40014400

08003078 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08a      	sub	sp, #40	@ 0x28
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003080:	f107 0314 	add.w	r3, r7, #20
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	605a      	str	r2, [r3, #4]
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	60da      	str	r2, [r3, #12]
 800308e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a1c      	ldr	r2, [pc, #112]	@ (8003108 <HAL_TIM_Encoder_MspInit+0x90>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d131      	bne.n	80030fe <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800309a:	4b1c      	ldr	r3, [pc, #112]	@ (800310c <HAL_TIM_Encoder_MspInit+0x94>)
 800309c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309e:	4a1b      	ldr	r2, [pc, #108]	@ (800310c <HAL_TIM_Encoder_MspInit+0x94>)
 80030a0:	f043 0304 	orr.w	r3, r3, #4
 80030a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80030a6:	4b19      	ldr	r3, [pc, #100]	@ (800310c <HAL_TIM_Encoder_MspInit+0x94>)
 80030a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	613b      	str	r3, [r7, #16]
 80030b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b2:	4b16      	ldr	r3, [pc, #88]	@ (800310c <HAL_TIM_Encoder_MspInit+0x94>)
 80030b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030b6:	4a15      	ldr	r2, [pc, #84]	@ (800310c <HAL_TIM_Encoder_MspInit+0x94>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030be:	4b13      	ldr	r3, [pc, #76]	@ (800310c <HAL_TIM_Encoder_MspInit+0x94>)
 80030c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
 80030ca:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80030ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d0:	2302      	movs	r3, #2
 80030d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d8:	2300      	movs	r3, #0
 80030da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80030dc:	230a      	movs	r3, #10
 80030de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e0:	f107 0314 	add.w	r3, r7, #20
 80030e4:	4619      	mov	r1, r3
 80030e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030ea:	f002 fcb9 	bl	8005a60 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80030ee:	2200      	movs	r2, #0
 80030f0:	2100      	movs	r1, #0
 80030f2:	201e      	movs	r0, #30
 80030f4:	f002 f94d 	bl	8005392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80030f8:	201e      	movs	r0, #30
 80030fa:	f002 f964 	bl	80053c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80030fe:	bf00      	nop
 8003100:	3728      	adds	r7, #40	@ 0x28
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40000800 	.word	0x40000800
 800310c:	40021000 	.word	0x40021000

08003110 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003118:	f107 030c 	add.w	r3, r7, #12
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	60da      	str	r2, [r3, #12]
 8003126:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a11      	ldr	r2, [pc, #68]	@ (8003174 <HAL_TIM_MspPostInit+0x64>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d11b      	bne.n	800316a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003132:	4b11      	ldr	r3, [pc, #68]	@ (8003178 <HAL_TIM_MspPostInit+0x68>)
 8003134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003136:	4a10      	ldr	r2, [pc, #64]	@ (8003178 <HAL_TIM_MspPostInit+0x68>)
 8003138:	f043 0304 	orr.w	r3, r3, #4
 800313c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800313e:	4b0e      	ldr	r3, [pc, #56]	@ (8003178 <HAL_TIM_MspPostInit+0x68>)
 8003140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	60bb      	str	r3, [r7, #8]
 8003148:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_signal_Pin;
 800314a:	2301      	movs	r3, #1
 800314c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314e:	2302      	movs	r3, #2
 8003150:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003156:	2300      	movs	r3, #0
 8003158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800315a:	2302      	movs	r3, #2
 800315c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_signal_GPIO_Port, &GPIO_InitStruct);
 800315e:	f107 030c 	add.w	r3, r7, #12
 8003162:	4619      	mov	r1, r3
 8003164:	4805      	ldr	r0, [pc, #20]	@ (800317c <HAL_TIM_MspPostInit+0x6c>)
 8003166:	f002 fc7b 	bl	8005a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800316a:	bf00      	nop
 800316c:	3720      	adds	r7, #32
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40012c00 	.word	0x40012c00
 8003178:	40021000 	.word	0x40021000
 800317c:	48000800 	.word	0x48000800

08003180 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b09e      	sub	sp, #120	@ 0x78
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003188:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	609a      	str	r2, [r3, #8]
 8003194:	60da      	str	r2, [r3, #12]
 8003196:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003198:	f107 0310 	add.w	r3, r7, #16
 800319c:	2254      	movs	r2, #84	@ 0x54
 800319e:	2100      	movs	r1, #0
 80031a0:	4618      	mov	r0, r3
 80031a2:	f007 fd75 	bl	800ac90 <memset>
  if(huart->Instance==USART2)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a4d      	ldr	r2, [pc, #308]	@ (80032e0 <HAL_UART_MspInit+0x160>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	f040 8092 	bne.w	80032d6 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80031b2:	2302      	movs	r3, #2
 80031b4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031ba:	f107 0310 	add.w	r3, r7, #16
 80031be:	4618      	mov	r0, r3
 80031c0:	f003 fbfa 	bl	80069b8 <HAL_RCCEx_PeriphCLKConfig>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80031ca:	f7ff f8a9 	bl	8002320 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80031ce:	4b45      	ldr	r3, [pc, #276]	@ (80032e4 <HAL_UART_MspInit+0x164>)
 80031d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d2:	4a44      	ldr	r2, [pc, #272]	@ (80032e4 <HAL_UART_MspInit+0x164>)
 80031d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80031da:	4b42      	ldr	r3, [pc, #264]	@ (80032e4 <HAL_UART_MspInit+0x164>)
 80031dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e6:	4b3f      	ldr	r3, [pc, #252]	@ (80032e4 <HAL_UART_MspInit+0x164>)
 80031e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ea:	4a3e      	ldr	r2, [pc, #248]	@ (80032e4 <HAL_UART_MspInit+0x164>)
 80031ec:	f043 0301 	orr.w	r3, r3, #1
 80031f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031f2:	4b3c      	ldr	r3, [pc, #240]	@ (80032e4 <HAL_UART_MspInit+0x164>)
 80031f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	60bb      	str	r3, [r7, #8]
 80031fc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80031fe:	230c      	movs	r3, #12
 8003200:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003202:	2302      	movs	r3, #2
 8003204:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003206:	2300      	movs	r3, #0
 8003208:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320a:	2300      	movs	r3, #0
 800320c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800320e:	2307      	movs	r3, #7
 8003210:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003212:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003216:	4619      	mov	r1, r3
 8003218:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800321c:	f002 fc20 	bl	8005a60 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8003220:	4b31      	ldr	r3, [pc, #196]	@ (80032e8 <HAL_UART_MspInit+0x168>)
 8003222:	4a32      	ldr	r2, [pc, #200]	@ (80032ec <HAL_UART_MspInit+0x16c>)
 8003224:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003226:	4b30      	ldr	r3, [pc, #192]	@ (80032e8 <HAL_UART_MspInit+0x168>)
 8003228:	221a      	movs	r2, #26
 800322a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800322c:	4b2e      	ldr	r3, [pc, #184]	@ (80032e8 <HAL_UART_MspInit+0x168>)
 800322e:	2200      	movs	r2, #0
 8003230:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003232:	4b2d      	ldr	r3, [pc, #180]	@ (80032e8 <HAL_UART_MspInit+0x168>)
 8003234:	2200      	movs	r2, #0
 8003236:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003238:	4b2b      	ldr	r3, [pc, #172]	@ (80032e8 <HAL_UART_MspInit+0x168>)
 800323a:	2280      	movs	r2, #128	@ 0x80
 800323c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800323e:	4b2a      	ldr	r3, [pc, #168]	@ (80032e8 <HAL_UART_MspInit+0x168>)
 8003240:	2200      	movs	r2, #0
 8003242:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003244:	4b28      	ldr	r3, [pc, #160]	@ (80032e8 <HAL_UART_MspInit+0x168>)
 8003246:	2200      	movs	r2, #0
 8003248:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800324a:	4b27      	ldr	r3, [pc, #156]	@ (80032e8 <HAL_UART_MspInit+0x168>)
 800324c:	2200      	movs	r2, #0
 800324e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003250:	4b25      	ldr	r3, [pc, #148]	@ (80032e8 <HAL_UART_MspInit+0x168>)
 8003252:	2200      	movs	r2, #0
 8003254:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003256:	4824      	ldr	r0, [pc, #144]	@ (80032e8 <HAL_UART_MspInit+0x168>)
 8003258:	f002 f8d0 	bl	80053fc <HAL_DMA_Init>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8003262:	f7ff f85d 	bl	8002320 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a1f      	ldr	r2, [pc, #124]	@ (80032e8 <HAL_UART_MspInit+0x168>)
 800326a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800326e:	4a1e      	ldr	r2, [pc, #120]	@ (80032e8 <HAL_UART_MspInit+0x168>)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8003274:	4b1e      	ldr	r3, [pc, #120]	@ (80032f0 <HAL_UART_MspInit+0x170>)
 8003276:	4a1f      	ldr	r2, [pc, #124]	@ (80032f4 <HAL_UART_MspInit+0x174>)
 8003278:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800327a:	4b1d      	ldr	r3, [pc, #116]	@ (80032f0 <HAL_UART_MspInit+0x170>)
 800327c:	221b      	movs	r2, #27
 800327e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003280:	4b1b      	ldr	r3, [pc, #108]	@ (80032f0 <HAL_UART_MspInit+0x170>)
 8003282:	2210      	movs	r2, #16
 8003284:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003286:	4b1a      	ldr	r3, [pc, #104]	@ (80032f0 <HAL_UART_MspInit+0x170>)
 8003288:	2200      	movs	r2, #0
 800328a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800328c:	4b18      	ldr	r3, [pc, #96]	@ (80032f0 <HAL_UART_MspInit+0x170>)
 800328e:	2280      	movs	r2, #128	@ 0x80
 8003290:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003292:	4b17      	ldr	r3, [pc, #92]	@ (80032f0 <HAL_UART_MspInit+0x170>)
 8003294:	2200      	movs	r2, #0
 8003296:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003298:	4b15      	ldr	r3, [pc, #84]	@ (80032f0 <HAL_UART_MspInit+0x170>)
 800329a:	2200      	movs	r2, #0
 800329c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800329e:	4b14      	ldr	r3, [pc, #80]	@ (80032f0 <HAL_UART_MspInit+0x170>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032a4:	4b12      	ldr	r3, [pc, #72]	@ (80032f0 <HAL_UART_MspInit+0x170>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80032aa:	4811      	ldr	r0, [pc, #68]	@ (80032f0 <HAL_UART_MspInit+0x170>)
 80032ac:	f002 f8a6 	bl	80053fc <HAL_DMA_Init>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80032b6:	f7ff f833 	bl	8002320 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a0c      	ldr	r2, [pc, #48]	@ (80032f0 <HAL_UART_MspInit+0x170>)
 80032be:	67da      	str	r2, [r3, #124]	@ 0x7c
 80032c0:	4a0b      	ldr	r2, [pc, #44]	@ (80032f0 <HAL_UART_MspInit+0x170>)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80032c6:	2200      	movs	r2, #0
 80032c8:	2100      	movs	r1, #0
 80032ca:	2026      	movs	r0, #38	@ 0x26
 80032cc:	f002 f861 	bl	8005392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80032d0:	2026      	movs	r0, #38	@ 0x26
 80032d2:	f002 f878 	bl	80053c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80032d6:	bf00      	nop
 80032d8:	3778      	adds	r7, #120	@ 0x78
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40004400 	.word	0x40004400
 80032e4:	40021000 	.word	0x40021000
 80032e8:	20000b54 	.word	0x20000b54
 80032ec:	4002001c 	.word	0x4002001c
 80032f0:	20000bb4 	.word	0x20000bb4
 80032f4:	40020030 	.word	0x40020030

080032f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032fc:	bf00      	nop
 80032fe:	e7fd      	b.n	80032fc <NMI_Handler+0x4>

08003300 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003304:	bf00      	nop
 8003306:	e7fd      	b.n	8003304 <HardFault_Handler+0x4>

08003308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800330c:	bf00      	nop
 800330e:	e7fd      	b.n	800330c <MemManage_Handler+0x4>

08003310 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003314:	bf00      	nop
 8003316:	e7fd      	b.n	8003314 <BusFault_Handler+0x4>

08003318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800331c:	bf00      	nop
 800331e:	e7fd      	b.n	800331c <UsageFault_Handler+0x4>

08003320 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003324:	bf00      	nop
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800332e:	b480      	push	{r7}
 8003330:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003332:	bf00      	nop
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003340:	bf00      	nop
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800334e:	f000 f905 	bl	800355c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800335c:	4802      	ldr	r0, [pc, #8]	@ (8003368 <DMA1_Channel1_IRQHandler+0x10>)
 800335e:	f002 fa30 	bl	80057c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003362:	bf00      	nop
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	200005cc 	.word	0x200005cc

0800336c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003370:	4802      	ldr	r0, [pc, #8]	@ (800337c <DMA1_Channel2_IRQHandler+0x10>)
 8003372:	f002 fa26 	bl	80057c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003376:	bf00      	nop
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	20000b54 	.word	0x20000b54

08003380 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003384:	4802      	ldr	r0, [pc, #8]	@ (8003390 <DMA1_Channel3_IRQHandler+0x10>)
 8003386:	f002 fa1c 	bl	80057c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000bb4 	.word	0x20000bb4

08003394 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8003398:	4802      	ldr	r0, [pc, #8]	@ (80033a4 <DMA1_Channel4_IRQHandler+0x10>)
 800339a:	f002 fa12 	bl	80057c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800339e:	bf00      	nop
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20000a28 	.word	0x20000a28

080033a8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80033ac:	4802      	ldr	r0, [pc, #8]	@ (80033b8 <ADC1_2_IRQHandler+0x10>)
 80033ae:	f000 fdc3 	bl	8003f38 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20000560 	.word	0x20000560

080033bc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033c0:	4803      	ldr	r0, [pc, #12]	@ (80033d0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80033c2:	f004 fa4b 	bl	800785c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80033c6:	4803      	ldr	r0, [pc, #12]	@ (80033d4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80033c8:	f004 fa48 	bl	800785c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80033cc:	bf00      	nop
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	2000062c 	.word	0x2000062c
 80033d4:	2000095c 	.word	0x2000095c

080033d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80033dc:	4802      	ldr	r0, [pc, #8]	@ (80033e8 <TIM3_IRQHandler+0x10>)
 80033de:	f004 fa3d 	bl	800785c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80033e2:	bf00      	nop
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	200006f8 	.word	0x200006f8

080033ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80033f0:	4802      	ldr	r0, [pc, #8]	@ (80033fc <TIM4_IRQHandler+0x10>)
 80033f2:	f004 fa33 	bl	800785c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80033f6:	bf00      	nop
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	200007c4 	.word	0x200007c4

08003400 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003404:	4802      	ldr	r0, [pc, #8]	@ (8003410 <USART2_IRQHandler+0x10>)
 8003406:	f005 ff7d 	bl	8009304 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800340a:	bf00      	nop
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20000a88 	.word	0x20000a88

08003414 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003418:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800341c:	f002 fcd2 	bl	8005dc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_switch_Pin);
 8003420:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003424:	f002 fcce 	bl	8005dc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003428:	bf00      	nop
 800342a:	bd80      	pop	{r7, pc}

0800342c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003430:	4802      	ldr	r0, [pc, #8]	@ (800343c <TIM5_IRQHandler+0x10>)
 8003432:	f004 fa13 	bl	800785c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000890 	.word	0x20000890

08003440 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003444:	4b06      	ldr	r3, [pc, #24]	@ (8003460 <SystemInit+0x20>)
 8003446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800344a:	4a05      	ldr	r2, [pc, #20]	@ (8003460 <SystemInit+0x20>)
 800344c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003450:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003454:	bf00      	nop
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	e000ed00 	.word	0xe000ed00

08003464 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003464:	480d      	ldr	r0, [pc, #52]	@ (800349c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003466:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003468:	f7ff ffea 	bl	8003440 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800346c:	480c      	ldr	r0, [pc, #48]	@ (80034a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800346e:	490d      	ldr	r1, [pc, #52]	@ (80034a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003470:	4a0d      	ldr	r2, [pc, #52]	@ (80034a8 <LoopForever+0xe>)
  movs r3, #0
 8003472:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003474:	e002      	b.n	800347c <LoopCopyDataInit>

08003476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800347a:	3304      	adds	r3, #4

0800347c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800347c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800347e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003480:	d3f9      	bcc.n	8003476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003482:	4a0a      	ldr	r2, [pc, #40]	@ (80034ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8003484:	4c0a      	ldr	r4, [pc, #40]	@ (80034b0 <LoopForever+0x16>)
  movs r3, #0
 8003486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003488:	e001      	b.n	800348e <LoopFillZerobss>

0800348a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800348a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800348c:	3204      	adds	r2, #4

0800348e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800348e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003490:	d3fb      	bcc.n	800348a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003492:	f007 fc05 	bl	800aca0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003496:	f7fe f817 	bl	80014c8 <main>

0800349a <LoopForever>:

LoopForever:
    b LoopForever
 800349a:	e7fe      	b.n	800349a <LoopForever>
  ldr   r0, =_estack
 800349c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80034a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034a4:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 80034a8:	0800ae44 	.word	0x0800ae44
  ldr r2, =_sbss
 80034ac:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 80034b0:	200014a4 	.word	0x200014a4

080034b4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80034b4:	e7fe      	b.n	80034b4 <ADC3_IRQHandler>

080034b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80034bc:	2300      	movs	r3, #0
 80034be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034c0:	2003      	movs	r0, #3
 80034c2:	f001 ff5b 	bl	800537c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034c6:	2000      	movs	r0, #0
 80034c8:	f000 f80e 	bl	80034e8 <HAL_InitTick>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	71fb      	strb	r3, [r7, #7]
 80034d6:	e001      	b.n	80034dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80034d8:	f7ff fc78 	bl	8002dcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80034dc:	79fb      	ldrb	r3, [r7, #7]

}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80034f0:	2300      	movs	r3, #0
 80034f2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80034f4:	4b16      	ldr	r3, [pc, #88]	@ (8003550 <HAL_InitTick+0x68>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d022      	beq.n	8003542 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80034fc:	4b15      	ldr	r3, [pc, #84]	@ (8003554 <HAL_InitTick+0x6c>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4b13      	ldr	r3, [pc, #76]	@ (8003550 <HAL_InitTick+0x68>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003508:	fbb1 f3f3 	udiv	r3, r1, r3
 800350c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003510:	4618      	mov	r0, r3
 8003512:	f001 ff66 	bl	80053e2 <HAL_SYSTICK_Config>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10f      	bne.n	800353c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b0f      	cmp	r3, #15
 8003520:	d809      	bhi.n	8003536 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003522:	2200      	movs	r2, #0
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	f04f 30ff 	mov.w	r0, #4294967295
 800352a:	f001 ff32 	bl	8005392 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800352e:	4a0a      	ldr	r2, [pc, #40]	@ (8003558 <HAL_InitTick+0x70>)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	e007      	b.n	8003546 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	73fb      	strb	r3, [r7, #15]
 800353a:	e004      	b.n	8003546 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
 8003540:	e001      	b.n	8003546 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003546:	7bfb      	ldrb	r3, [r7, #15]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	20000054 	.word	0x20000054
 8003554:	2000004c 	.word	0x2000004c
 8003558:	20000050 	.word	0x20000050

0800355c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003560:	4b05      	ldr	r3, [pc, #20]	@ (8003578 <HAL_IncTick+0x1c>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	4b05      	ldr	r3, [pc, #20]	@ (800357c <HAL_IncTick+0x20>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4413      	add	r3, r2
 800356a:	4a03      	ldr	r2, [pc, #12]	@ (8003578 <HAL_IncTick+0x1c>)
 800356c:	6013      	str	r3, [r2, #0]
}
 800356e:	bf00      	nop
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	200014a0 	.word	0x200014a0
 800357c:	20000054 	.word	0x20000054

08003580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  return uwTick;
 8003584:	4b03      	ldr	r3, [pc, #12]	@ (8003594 <HAL_GetTick+0x14>)
 8003586:	681b      	ldr	r3, [r3, #0]
}
 8003588:	4618      	mov	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	200014a0 	.word	0x200014a0

08003598 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	609a      	str	r2, [r3, #8]
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	609a      	str	r2, [r3, #8]
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003600:	b480      	push	{r7}
 8003602:	b087      	sub	sp, #28
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	3360      	adds	r3, #96	@ 0x60
 8003612:	461a      	mov	r2, r3
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	4b08      	ldr	r3, [pc, #32]	@ (8003644 <LL_ADC_SetOffset+0x44>)
 8003622:	4013      	ands	r3, r2
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	4313      	orrs	r3, r2
 8003630:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003638:	bf00      	nop
 800363a:	371c      	adds	r7, #28
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	03fff000 	.word	0x03fff000

08003648 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3360      	adds	r3, #96	@ 0x60
 8003656:	461a      	mov	r2, r3
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	3360      	adds	r3, #96	@ 0x60
 8003684:	461a      	mov	r2, r3
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	431a      	orrs	r2, r3
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800369e:	bf00      	nop
 80036a0:	371c      	adds	r7, #28
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b087      	sub	sp, #28
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	3360      	adds	r3, #96	@ 0x60
 80036ba:	461a      	mov	r2, r3
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80036d4:	bf00      	nop
 80036d6:	371c      	adds	r7, #28
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	3360      	adds	r3, #96	@ 0x60
 80036f0:	461a      	mov	r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	431a      	orrs	r2, r3
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800370a:	bf00      	nop
 800370c:	371c      	adds	r7, #28
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	615a      	str	r2, [r3, #20]
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003750:	2301      	movs	r3, #1
 8003752:	e000      	b.n	8003756 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003762:	b480      	push	{r7}
 8003764:	b087      	sub	sp, #28
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	3330      	adds	r3, #48	@ 0x30
 8003772:	461a      	mov	r2, r3
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	0a1b      	lsrs	r3, r3, #8
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	f003 030c 	and.w	r3, r3, #12
 800377e:	4413      	add	r3, r2
 8003780:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	f003 031f 	and.w	r3, r3, #31
 800378c:	211f      	movs	r1, #31
 800378e:	fa01 f303 	lsl.w	r3, r1, r3
 8003792:	43db      	mvns	r3, r3
 8003794:	401a      	ands	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	0e9b      	lsrs	r3, r3, #26
 800379a:	f003 011f 	and.w	r1, r3, #31
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f003 031f 	and.w	r3, r3, #31
 80037a4:	fa01 f303 	lsl.w	r3, r1, r3
 80037a8:	431a      	orrs	r2, r3
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80037ae:	bf00      	nop
 80037b0:	371c      	adds	r7, #28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037c6:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	3314      	adds	r3, #20
 80037f0:	461a      	mov	r2, r3
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	0e5b      	lsrs	r3, r3, #25
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	4413      	add	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	0d1b      	lsrs	r3, r3, #20
 8003808:	f003 031f 	and.w	r3, r3, #31
 800380c:	2107      	movs	r1, #7
 800380e:	fa01 f303 	lsl.w	r3, r1, r3
 8003812:	43db      	mvns	r3, r3
 8003814:	401a      	ands	r2, r3
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	0d1b      	lsrs	r3, r3, #20
 800381a:	f003 031f 	and.w	r3, r3, #31
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	fa01 f303 	lsl.w	r3, r1, r3
 8003824:	431a      	orrs	r2, r3
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800382a:	bf00      	nop
 800382c:	371c      	adds	r7, #28
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
	...

08003838 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003850:	43db      	mvns	r3, r3
 8003852:	401a      	ands	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f003 0318 	and.w	r3, r3, #24
 800385a:	4908      	ldr	r1, [pc, #32]	@ (800387c <LL_ADC_SetChannelSingleDiff+0x44>)
 800385c:	40d9      	lsrs	r1, r3
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	400b      	ands	r3, r1
 8003862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003866:	431a      	orrs	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800386e:	bf00      	nop
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	0007ffff 	.word	0x0007ffff

08003880 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 031f 	and.w	r3, r3, #31
}
 8003890:	4618      	mov	r0, r3
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80038c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6093      	str	r3, [r2, #8]
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038f0:	d101      	bne.n	80038f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80038f2:	2301      	movs	r3, #1
 80038f4:	e000      	b.n	80038f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003914:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003918:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800393c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003940:	d101      	bne.n	8003946 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003964:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003968:	f043 0201 	orr.w	r2, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <LL_ADC_IsEnabled+0x18>
 8003990:	2301      	movs	r3, #1
 8003992:	e000      	b.n	8003996 <LL_ADC_IsEnabled+0x1a>
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b083      	sub	sp, #12
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039b2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039b6:	f043 0204 	orr.w	r2, r3, #4
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d101      	bne.n	80039e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d101      	bne.n	8003a08 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003a04:	2301      	movs	r3, #1
 8003a06:	e000      	b.n	8003a0a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
	...

08003a18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a18:	b590      	push	{r4, r7, lr}
 8003a1a:	b089      	sub	sp, #36	@ 0x24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a20:	2300      	movs	r3, #0
 8003a22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003a24:	2300      	movs	r3, #0
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e1a9      	b.n	8003d86 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d109      	bne.n	8003a54 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff f9e7 	bl	8002e14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff ff3f 	bl	80038dc <LL_ADC_IsDeepPowerDownEnabled>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d004      	beq.n	8003a6e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff ff25 	bl	80038b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff ff5a 	bl	800392c <LL_ADC_IsInternalRegulatorEnabled>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d115      	bne.n	8003aaa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff ff3e 	bl	8003904 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a88:	4b9c      	ldr	r3, [pc, #624]	@ (8003cfc <HAL_ADC_Init+0x2e4>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	099b      	lsrs	r3, r3, #6
 8003a8e:	4a9c      	ldr	r2, [pc, #624]	@ (8003d00 <HAL_ADC_Init+0x2e8>)
 8003a90:	fba2 2303 	umull	r2, r3, r2, r3
 8003a94:	099b      	lsrs	r3, r3, #6
 8003a96:	3301      	adds	r3, #1
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003a9c:	e002      	b.n	8003aa4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f9      	bne.n	8003a9e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff ff3c 	bl	800392c <LL_ADC_IsInternalRegulatorEnabled>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10d      	bne.n	8003ad6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003abe:	f043 0210 	orr.w	r2, r3, #16
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aca:	f043 0201 	orr.w	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7ff ff75 	bl	80039ca <LL_ADC_REG_IsConversionOngoing>
 8003ae0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae6:	f003 0310 	and.w	r3, r3, #16
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f040 8142 	bne.w	8003d74 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f040 813e 	bne.w	8003d74 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003b00:	f043 0202 	orr.w	r2, r3, #2
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff ff35 	bl	800397c <LL_ADC_IsEnabled>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d141      	bne.n	8003b9c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b20:	d004      	beq.n	8003b2c <HAL_ADC_Init+0x114>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a77      	ldr	r2, [pc, #476]	@ (8003d04 <HAL_ADC_Init+0x2ec>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d10f      	bne.n	8003b4c <HAL_ADC_Init+0x134>
 8003b2c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003b30:	f7ff ff24 	bl	800397c <LL_ADC_IsEnabled>
 8003b34:	4604      	mov	r4, r0
 8003b36:	4873      	ldr	r0, [pc, #460]	@ (8003d04 <HAL_ADC_Init+0x2ec>)
 8003b38:	f7ff ff20 	bl	800397c <LL_ADC_IsEnabled>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	4323      	orrs	r3, r4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	bf0c      	ite	eq
 8003b44:	2301      	moveq	r3, #1
 8003b46:	2300      	movne	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	e012      	b.n	8003b72 <HAL_ADC_Init+0x15a>
 8003b4c:	486e      	ldr	r0, [pc, #440]	@ (8003d08 <HAL_ADC_Init+0x2f0>)
 8003b4e:	f7ff ff15 	bl	800397c <LL_ADC_IsEnabled>
 8003b52:	4604      	mov	r4, r0
 8003b54:	486d      	ldr	r0, [pc, #436]	@ (8003d0c <HAL_ADC_Init+0x2f4>)
 8003b56:	f7ff ff11 	bl	800397c <LL_ADC_IsEnabled>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	431c      	orrs	r4, r3
 8003b5e:	486c      	ldr	r0, [pc, #432]	@ (8003d10 <HAL_ADC_Init+0x2f8>)
 8003b60:	f7ff ff0c 	bl	800397c <LL_ADC_IsEnabled>
 8003b64:	4603      	mov	r3, r0
 8003b66:	4323      	orrs	r3, r4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	bf0c      	ite	eq
 8003b6c:	2301      	moveq	r3, #1
 8003b6e:	2300      	movne	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d012      	beq.n	8003b9c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b7e:	d004      	beq.n	8003b8a <HAL_ADC_Init+0x172>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a5f      	ldr	r2, [pc, #380]	@ (8003d04 <HAL_ADC_Init+0x2ec>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d101      	bne.n	8003b8e <HAL_ADC_Init+0x176>
 8003b8a:	4a62      	ldr	r2, [pc, #392]	@ (8003d14 <HAL_ADC_Init+0x2fc>)
 8003b8c:	e000      	b.n	8003b90 <HAL_ADC_Init+0x178>
 8003b8e:	4a62      	ldr	r2, [pc, #392]	@ (8003d18 <HAL_ADC_Init+0x300>)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	4619      	mov	r1, r3
 8003b96:	4610      	mov	r0, r2
 8003b98:	f7ff fcfe 	bl	8003598 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	7f5b      	ldrb	r3, [r3, #29]
 8003ba0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ba6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003bac:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003bb2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003bba:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d106      	bne.n	8003bd8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	045b      	lsls	r3, r3, #17
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d009      	beq.n	8003bf4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bec:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	4b48      	ldr	r3, [pc, #288]	@ (8003d1c <HAL_ADC_Init+0x304>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6812      	ldr	r2, [r2, #0]
 8003c02:	69b9      	ldr	r1, [r7, #24]
 8003c04:	430b      	orrs	r3, r1
 8003c06:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7ff fee4 	bl	80039f0 <LL_ADC_INJ_IsConversionOngoing>
 8003c28:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d17f      	bne.n	8003d30 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d17c      	bne.n	8003d30 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c3a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c42:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003c44:	4313      	orrs	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c52:	f023 0302 	bic.w	r3, r3, #2
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6812      	ldr	r2, [r2, #0]
 8003c5a:	69b9      	ldr	r1, [r7, #24]
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d017      	beq.n	8003c98 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003c76:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003c80:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003c84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6911      	ldr	r1, [r2, #16]
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	430b      	orrs	r3, r1
 8003c92:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003c96:	e013      	b.n	8003cc0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	691a      	ldr	r2, [r3, #16]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003ca6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6812      	ldr	r2, [r2, #0]
 8003cb4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003cb8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003cbc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d12a      	bne.n	8003d20 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003cd4:	f023 0304 	bic.w	r3, r3, #4
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003ce0:	4311      	orrs	r1, r2
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003ce6:	4311      	orrs	r1, r2
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003cec:	430a      	orrs	r2, r1
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f042 0201 	orr.w	r2, r2, #1
 8003cf8:	611a      	str	r2, [r3, #16]
 8003cfa:	e019      	b.n	8003d30 <HAL_ADC_Init+0x318>
 8003cfc:	2000004c 	.word	0x2000004c
 8003d00:	053e2d63 	.word	0x053e2d63
 8003d04:	50000100 	.word	0x50000100
 8003d08:	50000400 	.word	0x50000400
 8003d0c:	50000500 	.word	0x50000500
 8003d10:	50000600 	.word	0x50000600
 8003d14:	50000300 	.word	0x50000300
 8003d18:	50000700 	.word	0x50000700
 8003d1c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	691a      	ldr	r2, [r3, #16]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0201 	bic.w	r2, r2, #1
 8003d2e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d10c      	bne.n	8003d52 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3e:	f023 010f 	bic.w	r1, r3, #15
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	1e5a      	subs	r2, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d50:	e007      	b.n	8003d62 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 020f 	bic.w	r2, r2, #15
 8003d60:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d66:	f023 0303 	bic.w	r3, r3, #3
 8003d6a:	f043 0201 	orr.w	r2, r3, #1
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d72:	e007      	b.n	8003d84 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d78:	f043 0210 	orr.w	r2, r3, #16
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d84:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3724      	adds	r7, #36	@ 0x24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd90      	pop	{r4, r7, pc}
 8003d8e:	bf00      	nop

08003d90 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003da4:	d004      	beq.n	8003db0 <HAL_ADC_Start_DMA+0x20>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a5a      	ldr	r2, [pc, #360]	@ (8003f14 <HAL_ADC_Start_DMA+0x184>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d101      	bne.n	8003db4 <HAL_ADC_Start_DMA+0x24>
 8003db0:	4b59      	ldr	r3, [pc, #356]	@ (8003f18 <HAL_ADC_Start_DMA+0x188>)
 8003db2:	e000      	b.n	8003db6 <HAL_ADC_Start_DMA+0x26>
 8003db4:	4b59      	ldr	r3, [pc, #356]	@ (8003f1c <HAL_ADC_Start_DMA+0x18c>)
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff fd62 	bl	8003880 <LL_ADC_GetMultimode>
 8003dbc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff fe01 	bl	80039ca <LL_ADC_REG_IsConversionOngoing>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f040 809b 	bne.w	8003f06 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d101      	bne.n	8003dde <HAL_ADC_Start_DMA+0x4e>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e096      	b.n	8003f0c <HAL_ADC_Start_DMA+0x17c>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a4d      	ldr	r2, [pc, #308]	@ (8003f20 <HAL_ADC_Start_DMA+0x190>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d008      	beq.n	8003e02 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d005      	beq.n	8003e02 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	2b05      	cmp	r3, #5
 8003dfa:	d002      	beq.n	8003e02 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	2b09      	cmp	r3, #9
 8003e00:	d17a      	bne.n	8003ef8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 ff60 	bl	8004cc8 <ADC_Enable>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003e0c:	7dfb      	ldrb	r3, [r7, #23]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d16d      	bne.n	8003eee <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e16:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e1a:	f023 0301 	bic.w	r3, r3, #1
 8003e1e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a3a      	ldr	r2, [pc, #232]	@ (8003f14 <HAL_ADC_Start_DMA+0x184>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d009      	beq.n	8003e44 <HAL_ADC_Start_DMA+0xb4>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a3b      	ldr	r2, [pc, #236]	@ (8003f24 <HAL_ADC_Start_DMA+0x194>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d002      	beq.n	8003e40 <HAL_ADC_Start_DMA+0xb0>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	e003      	b.n	8003e48 <HAL_ADC_Start_DMA+0xb8>
 8003e40:	4b39      	ldr	r3, [pc, #228]	@ (8003f28 <HAL_ADC_Start_DMA+0x198>)
 8003e42:	e001      	b.n	8003e48 <HAL_ADC_Start_DMA+0xb8>
 8003e44:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	6812      	ldr	r2, [r2, #0]
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d002      	beq.n	8003e56 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d105      	bne.n	8003e62 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e5a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d006      	beq.n	8003e7c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e72:	f023 0206 	bic.w	r2, r3, #6
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	661a      	str	r2, [r3, #96]	@ 0x60
 8003e7a:	e002      	b.n	8003e82 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e86:	4a29      	ldr	r2, [pc, #164]	@ (8003f2c <HAL_ADC_Start_DMA+0x19c>)
 8003e88:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8e:	4a28      	ldr	r2, [pc, #160]	@ (8003f30 <HAL_ADC_Start_DMA+0x1a0>)
 8003e90:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e96:	4a27      	ldr	r2, [pc, #156]	@ (8003f34 <HAL_ADC_Start_DMA+0x1a4>)
 8003e98:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	221c      	movs	r2, #28
 8003ea0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f042 0210 	orr.w	r2, r2, #16
 8003eb8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68da      	ldr	r2, [r3, #12]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f042 0201 	orr.w	r2, r2, #1
 8003ec8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3340      	adds	r3, #64	@ 0x40
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f001 fb37 	bl	800554c <HAL_DMA_Start_IT>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff fd5b 	bl	80039a2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003eec:	e00d      	b.n	8003f0a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003ef6:	e008      	b.n	8003f0a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003f04:	e001      	b.n	8003f0a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003f06:	2302      	movs	r3, #2
 8003f08:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	50000100 	.word	0x50000100
 8003f18:	50000300 	.word	0x50000300
 8003f1c:	50000700 	.word	0x50000700
 8003f20:	50000600 	.word	0x50000600
 8003f24:	50000500 	.word	0x50000500
 8003f28:	50000400 	.word	0x50000400
 8003f2c:	08004df5 	.word	0x08004df5
 8003f30:	08004ecd 	.word	0x08004ecd
 8003f34:	08004ee9 	.word	0x08004ee9

08003f38 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08a      	sub	sp, #40	@ 0x28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003f40:	2300      	movs	r3, #0
 8003f42:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f5c:	d004      	beq.n	8003f68 <HAL_ADC_IRQHandler+0x30>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a8e      	ldr	r2, [pc, #568]	@ (800419c <HAL_ADC_IRQHandler+0x264>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d101      	bne.n	8003f6c <HAL_ADC_IRQHandler+0x34>
 8003f68:	4b8d      	ldr	r3, [pc, #564]	@ (80041a0 <HAL_ADC_IRQHandler+0x268>)
 8003f6a:	e000      	b.n	8003f6e <HAL_ADC_IRQHandler+0x36>
 8003f6c:	4b8d      	ldr	r3, [pc, #564]	@ (80041a4 <HAL_ADC_IRQHandler+0x26c>)
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff fc86 	bl	8003880 <LL_ADC_GetMultimode>
 8003f74:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d017      	beq.n	8003fb0 <HAL_ADC_IRQHandler+0x78>
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d012      	beq.n	8003fb0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f8e:	f003 0310 	and.w	r3, r3, #16
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d105      	bne.n	8003fa2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f9a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f001 f808 	bl	8004fb8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2202      	movs	r2, #2
 8003fae:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d004      	beq.n	8003fc4 <HAL_ADC_IRQHandler+0x8c>
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10b      	bne.n	8003fdc <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 8094 	beq.w	80040f8 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 808e 	beq.w	80040f8 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe0:	f003 0310 	and.w	r3, r3, #16
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d105      	bne.n	8003ff4 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7ff fb9f 	bl	800373c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d072      	beq.n	80040ea <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a64      	ldr	r2, [pc, #400]	@ (800419c <HAL_ADC_IRQHandler+0x264>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d009      	beq.n	8004022 <HAL_ADC_IRQHandler+0xea>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a65      	ldr	r2, [pc, #404]	@ (80041a8 <HAL_ADC_IRQHandler+0x270>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d002      	beq.n	800401e <HAL_ADC_IRQHandler+0xe6>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	e003      	b.n	8004026 <HAL_ADC_IRQHandler+0xee>
 800401e:	4b63      	ldr	r3, [pc, #396]	@ (80041ac <HAL_ADC_IRQHandler+0x274>)
 8004020:	e001      	b.n	8004026 <HAL_ADC_IRQHandler+0xee>
 8004022:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6812      	ldr	r2, [r2, #0]
 800402a:	4293      	cmp	r3, r2
 800402c:	d008      	beq.n	8004040 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	2b05      	cmp	r3, #5
 8004038:	d002      	beq.n	8004040 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2b09      	cmp	r3, #9
 800403e:	d104      	bne.n	800404a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	623b      	str	r3, [r7, #32]
 8004048:	e014      	b.n	8004074 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a53      	ldr	r2, [pc, #332]	@ (800419c <HAL_ADC_IRQHandler+0x264>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d009      	beq.n	8004068 <HAL_ADC_IRQHandler+0x130>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a53      	ldr	r2, [pc, #332]	@ (80041a8 <HAL_ADC_IRQHandler+0x270>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d002      	beq.n	8004064 <HAL_ADC_IRQHandler+0x12c>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	e003      	b.n	800406c <HAL_ADC_IRQHandler+0x134>
 8004064:	4b51      	ldr	r3, [pc, #324]	@ (80041ac <HAL_ADC_IRQHandler+0x274>)
 8004066:	e001      	b.n	800406c <HAL_ADC_IRQHandler+0x134>
 8004068:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800406c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d135      	bne.n	80040ea <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0308 	and.w	r3, r3, #8
 8004088:	2b08      	cmp	r3, #8
 800408a:	d12e      	bne.n	80040ea <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff fc9a 	bl	80039ca <LL_ADC_REG_IsConversionOngoing>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d11a      	bne.n	80040d2 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 020c 	bic.w	r2, r2, #12
 80040aa:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d112      	bne.n	80040ea <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040c8:	f043 0201 	orr.w	r2, r3, #1
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80040d0:	e00b      	b.n	80040ea <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d6:	f043 0210 	orr.w	r2, r3, #16
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040e2:	f043 0201 	orr.w	r2, r3, #1
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f984 	bl	80043f8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	220c      	movs	r2, #12
 80040f6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d004      	beq.n	800410c <HAL_ADC_IRQHandler+0x1d4>
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	f003 0320 	and.w	r3, r3, #32
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10b      	bne.n	8004124 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004112:	2b00      	cmp	r3, #0
 8004114:	f000 80b3 	beq.w	800427e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 80ad 	beq.w	800427e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004128:	f003 0310 	and.w	r3, r3, #16
 800412c:	2b00      	cmp	r3, #0
 800412e:	d105      	bne.n	800413c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004134:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff fb3a 	bl	80037ba <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004146:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff faf5 	bl	800373c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004152:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a10      	ldr	r2, [pc, #64]	@ (800419c <HAL_ADC_IRQHandler+0x264>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d009      	beq.n	8004172 <HAL_ADC_IRQHandler+0x23a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a11      	ldr	r2, [pc, #68]	@ (80041a8 <HAL_ADC_IRQHandler+0x270>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d002      	beq.n	800416e <HAL_ADC_IRQHandler+0x236>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	e003      	b.n	8004176 <HAL_ADC_IRQHandler+0x23e>
 800416e:	4b0f      	ldr	r3, [pc, #60]	@ (80041ac <HAL_ADC_IRQHandler+0x274>)
 8004170:	e001      	b.n	8004176 <HAL_ADC_IRQHandler+0x23e>
 8004172:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6812      	ldr	r2, [r2, #0]
 800417a:	4293      	cmp	r3, r2
 800417c:	d008      	beq.n	8004190 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2b06      	cmp	r3, #6
 8004188:	d002      	beq.n	8004190 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2b07      	cmp	r3, #7
 800418e:	d10f      	bne.n	80041b0 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	623b      	str	r3, [r7, #32]
 8004198:	e01f      	b.n	80041da <HAL_ADC_IRQHandler+0x2a2>
 800419a:	bf00      	nop
 800419c:	50000100 	.word	0x50000100
 80041a0:	50000300 	.word	0x50000300
 80041a4:	50000700 	.word	0x50000700
 80041a8:	50000500 	.word	0x50000500
 80041ac:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a8b      	ldr	r2, [pc, #556]	@ (80043e4 <HAL_ADC_IRQHandler+0x4ac>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d009      	beq.n	80041ce <HAL_ADC_IRQHandler+0x296>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a8a      	ldr	r2, [pc, #552]	@ (80043e8 <HAL_ADC_IRQHandler+0x4b0>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d002      	beq.n	80041ca <HAL_ADC_IRQHandler+0x292>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	e003      	b.n	80041d2 <HAL_ADC_IRQHandler+0x29a>
 80041ca:	4b88      	ldr	r3, [pc, #544]	@ (80043ec <HAL_ADC_IRQHandler+0x4b4>)
 80041cc:	e001      	b.n	80041d2 <HAL_ADC_IRQHandler+0x29a>
 80041ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80041d2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d047      	beq.n	8004270 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d007      	beq.n	80041fa <HAL_ADC_IRQHandler+0x2c2>
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d03f      	beq.n	8004270 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d13a      	bne.n	8004270 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004204:	2b40      	cmp	r3, #64	@ 0x40
 8004206:	d133      	bne.n	8004270 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d12e      	bne.n	8004270 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff fbea 	bl	80039f0 <LL_ADC_INJ_IsConversionOngoing>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d11a      	bne.n	8004258 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004230:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004236:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004246:	2b00      	cmp	r3, #0
 8004248:	d112      	bne.n	8004270 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800424e:	f043 0201 	orr.w	r2, r3, #1
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004256:	e00b      	b.n	8004270 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800425c:	f043 0210 	orr.w	r2, r3, #16
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004268:	f043 0201 	orr.w	r2, r3, #1
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 fe79 	bl	8004f68 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2260      	movs	r2, #96	@ 0x60
 800427c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004284:	2b00      	cmp	r3, #0
 8004286:	d011      	beq.n	80042ac <HAL_ADC_IRQHandler+0x374>
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00c      	beq.n	80042ac <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004296:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f8be 	bl	8004420 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2280      	movs	r2, #128	@ 0x80
 80042aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d012      	beq.n	80042dc <HAL_ADC_IRQHandler+0x3a4>
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00d      	beq.n	80042dc <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 fe5f 	bl	8004f90 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80042da:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d012      	beq.n	800430c <HAL_ADC_IRQHandler+0x3d4>
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00d      	beq.n	800430c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 fe51 	bl	8004fa4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800430a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f003 0310 	and.w	r3, r3, #16
 8004312:	2b00      	cmp	r3, #0
 8004314:	d043      	beq.n	800439e <HAL_ADC_IRQHandler+0x466>
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	f003 0310 	and.w	r3, r3, #16
 800431c:	2b00      	cmp	r3, #0
 800431e:	d03e      	beq.n	800439e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004324:	2b00      	cmp	r3, #0
 8004326:	d102      	bne.n	800432e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8004328:	2301      	movs	r3, #1
 800432a:	627b      	str	r3, [r7, #36]	@ 0x24
 800432c:	e021      	b.n	8004372 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d015      	beq.n	8004360 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800433c:	d004      	beq.n	8004348 <HAL_ADC_IRQHandler+0x410>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a28      	ldr	r2, [pc, #160]	@ (80043e4 <HAL_ADC_IRQHandler+0x4ac>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d101      	bne.n	800434c <HAL_ADC_IRQHandler+0x414>
 8004348:	4b29      	ldr	r3, [pc, #164]	@ (80043f0 <HAL_ADC_IRQHandler+0x4b8>)
 800434a:	e000      	b.n	800434e <HAL_ADC_IRQHandler+0x416>
 800434c:	4b29      	ldr	r3, [pc, #164]	@ (80043f4 <HAL_ADC_IRQHandler+0x4bc>)
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff faa4 	bl	800389c <LL_ADC_GetMultiDMATransfer>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00b      	beq.n	8004372 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800435a:	2301      	movs	r3, #1
 800435c:	627b      	str	r3, [r7, #36]	@ 0x24
 800435e:	e008      	b.n	8004372 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800436e:	2301      	movs	r3, #1
 8004370:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004374:	2b01      	cmp	r3, #1
 8004376:	d10e      	bne.n	8004396 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800437c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004388:	f043 0202 	orr.w	r2, r3, #2
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f84f 	bl	8004434 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2210      	movs	r2, #16
 800439c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d018      	beq.n	80043da <HAL_ADC_IRQHandler+0x4a2>
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d013      	beq.n	80043da <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043b6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043c2:	f043 0208 	orr.w	r2, r3, #8
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80043d2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 fdd1 	bl	8004f7c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80043da:	bf00      	nop
 80043dc:	3728      	adds	r7, #40	@ 0x28
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	50000100 	.word	0x50000100
 80043e8:	50000500 	.word	0x50000500
 80043ec:	50000400 	.word	0x50000400
 80043f0:	50000300 	.word	0x50000300
 80043f4:	50000700 	.word	0x50000700

080043f8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b0b6      	sub	sp, #216	@ 0xd8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004458:	2300      	movs	r3, #0
 800445a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004462:	2b01      	cmp	r3, #1
 8004464:	d102      	bne.n	800446c <HAL_ADC_ConfigChannel+0x24>
 8004466:	2302      	movs	r3, #2
 8004468:	f000 bc13 	b.w	8004c92 <HAL_ADC_ConfigChannel+0x84a>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff faa6 	bl	80039ca <LL_ADC_REG_IsConversionOngoing>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	f040 83f3 	bne.w	8004c6c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6818      	ldr	r0, [r3, #0]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	6859      	ldr	r1, [r3, #4]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	f7ff f965 	bl	8003762 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4618      	mov	r0, r3
 800449e:	f7ff fa94 	bl	80039ca <LL_ADC_REG_IsConversionOngoing>
 80044a2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff faa0 	bl	80039f0 <LL_ADC_INJ_IsConversionOngoing>
 80044b0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80044b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f040 81d9 	bne.w	8004870 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80044be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f040 81d4 	bne.w	8004870 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044d0:	d10f      	bne.n	80044f2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6818      	ldr	r0, [r3, #0]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2200      	movs	r2, #0
 80044dc:	4619      	mov	r1, r3
 80044de:	f7ff f97f 	bl	80037e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff f913 	bl	8003716 <LL_ADC_SetSamplingTimeCommonConfig>
 80044f0:	e00e      	b.n	8004510 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6818      	ldr	r0, [r3, #0]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	6819      	ldr	r1, [r3, #0]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	461a      	mov	r2, r3
 8004500:	f7ff f96e 	bl	80037e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2100      	movs	r1, #0
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff f903 	bl	8003716 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	695a      	ldr	r2, [r3, #20]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	08db      	lsrs	r3, r3, #3
 800451c:	f003 0303 	and.w	r3, r3, #3
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	fa02 f303 	lsl.w	r3, r2, r3
 8004526:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	2b04      	cmp	r3, #4
 8004530:	d022      	beq.n	8004578 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	6919      	ldr	r1, [r3, #16]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004542:	f7ff f85d 	bl	8003600 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6818      	ldr	r0, [r3, #0]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	6919      	ldr	r1, [r3, #16]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	461a      	mov	r2, r3
 8004554:	f7ff f8a9 	bl	80036aa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6818      	ldr	r0, [r3, #0]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004564:	2b01      	cmp	r3, #1
 8004566:	d102      	bne.n	800456e <HAL_ADC_ConfigChannel+0x126>
 8004568:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800456c:	e000      	b.n	8004570 <HAL_ADC_ConfigChannel+0x128>
 800456e:	2300      	movs	r3, #0
 8004570:	461a      	mov	r2, r3
 8004572:	f7ff f8b5 	bl	80036e0 <LL_ADC_SetOffsetSaturation>
 8004576:	e17b      	b.n	8004870 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2100      	movs	r1, #0
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff f862 	bl	8003648 <LL_ADC_GetOffsetChannel>
 8004584:	4603      	mov	r3, r0
 8004586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10a      	bne.n	80045a4 <HAL_ADC_ConfigChannel+0x15c>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2100      	movs	r1, #0
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff f857 	bl	8003648 <LL_ADC_GetOffsetChannel>
 800459a:	4603      	mov	r3, r0
 800459c:	0e9b      	lsrs	r3, r3, #26
 800459e:	f003 021f 	and.w	r2, r3, #31
 80045a2:	e01e      	b.n	80045e2 <HAL_ADC_ConfigChannel+0x19a>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2100      	movs	r1, #0
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff f84c 	bl	8003648 <LL_ADC_GetOffsetChannel>
 80045b0:	4603      	mov	r3, r0
 80045b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80045ba:	fa93 f3a3 	rbit	r3, r3
 80045be:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80045c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80045c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80045ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80045d2:	2320      	movs	r3, #32
 80045d4:	e004      	b.n	80045e0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80045d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80045da:	fab3 f383 	clz	r3, r3
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d105      	bne.n	80045fa <HAL_ADC_ConfigChannel+0x1b2>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	0e9b      	lsrs	r3, r3, #26
 80045f4:	f003 031f 	and.w	r3, r3, #31
 80045f8:	e018      	b.n	800462c <HAL_ADC_ConfigChannel+0x1e4>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004602:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004606:	fa93 f3a3 	rbit	r3, r3
 800460a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800460e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004612:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004616:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800461e:	2320      	movs	r3, #32
 8004620:	e004      	b.n	800462c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004622:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004626:	fab3 f383 	clz	r3, r3
 800462a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800462c:	429a      	cmp	r2, r3
 800462e:	d106      	bne.n	800463e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2200      	movs	r2, #0
 8004636:	2100      	movs	r1, #0
 8004638:	4618      	mov	r0, r3
 800463a:	f7ff f81b 	bl	8003674 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2101      	movs	r1, #1
 8004644:	4618      	mov	r0, r3
 8004646:	f7fe ffff 	bl	8003648 <LL_ADC_GetOffsetChannel>
 800464a:	4603      	mov	r3, r0
 800464c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10a      	bne.n	800466a <HAL_ADC_ConfigChannel+0x222>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2101      	movs	r1, #1
 800465a:	4618      	mov	r0, r3
 800465c:	f7fe fff4 	bl	8003648 <LL_ADC_GetOffsetChannel>
 8004660:	4603      	mov	r3, r0
 8004662:	0e9b      	lsrs	r3, r3, #26
 8004664:	f003 021f 	and.w	r2, r3, #31
 8004668:	e01e      	b.n	80046a8 <HAL_ADC_ConfigChannel+0x260>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2101      	movs	r1, #1
 8004670:	4618      	mov	r0, r3
 8004672:	f7fe ffe9 	bl	8003648 <LL_ADC_GetOffsetChannel>
 8004676:	4603      	mov	r3, r0
 8004678:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004680:	fa93 f3a3 	rbit	r3, r3
 8004684:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004688:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800468c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004690:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004698:	2320      	movs	r3, #32
 800469a:	e004      	b.n	80046a6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800469c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80046a0:	fab3 f383 	clz	r3, r3
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d105      	bne.n	80046c0 <HAL_ADC_ConfigChannel+0x278>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	0e9b      	lsrs	r3, r3, #26
 80046ba:	f003 031f 	and.w	r3, r3, #31
 80046be:	e018      	b.n	80046f2 <HAL_ADC_ConfigChannel+0x2aa>
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046cc:	fa93 f3a3 	rbit	r3, r3
 80046d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80046d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80046d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80046dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80046e4:	2320      	movs	r3, #32
 80046e6:	e004      	b.n	80046f2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80046e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80046ec:	fab3 f383 	clz	r3, r3
 80046f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d106      	bne.n	8004704 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2200      	movs	r2, #0
 80046fc:	2101      	movs	r1, #1
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fe ffb8 	bl	8003674 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2102      	movs	r1, #2
 800470a:	4618      	mov	r0, r3
 800470c:	f7fe ff9c 	bl	8003648 <LL_ADC_GetOffsetChannel>
 8004710:	4603      	mov	r3, r0
 8004712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10a      	bne.n	8004730 <HAL_ADC_ConfigChannel+0x2e8>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2102      	movs	r1, #2
 8004720:	4618      	mov	r0, r3
 8004722:	f7fe ff91 	bl	8003648 <LL_ADC_GetOffsetChannel>
 8004726:	4603      	mov	r3, r0
 8004728:	0e9b      	lsrs	r3, r3, #26
 800472a:	f003 021f 	and.w	r2, r3, #31
 800472e:	e01e      	b.n	800476e <HAL_ADC_ConfigChannel+0x326>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2102      	movs	r1, #2
 8004736:	4618      	mov	r0, r3
 8004738:	f7fe ff86 	bl	8003648 <LL_ADC_GetOffsetChannel>
 800473c:	4603      	mov	r3, r0
 800473e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004742:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004746:	fa93 f3a3 	rbit	r3, r3
 800474a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800474e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004752:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004756:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800475e:	2320      	movs	r3, #32
 8004760:	e004      	b.n	800476c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004762:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004766:	fab3 f383 	clz	r3, r3
 800476a:	b2db      	uxtb	r3, r3
 800476c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004776:	2b00      	cmp	r3, #0
 8004778:	d105      	bne.n	8004786 <HAL_ADC_ConfigChannel+0x33e>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	0e9b      	lsrs	r3, r3, #26
 8004780:	f003 031f 	and.w	r3, r3, #31
 8004784:	e016      	b.n	80047b4 <HAL_ADC_ConfigChannel+0x36c>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004792:	fa93 f3a3 	rbit	r3, r3
 8004796:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004798:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800479a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800479e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80047a6:	2320      	movs	r3, #32
 80047a8:	e004      	b.n	80047b4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80047aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047ae:	fab3 f383 	clz	r3, r3
 80047b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d106      	bne.n	80047c6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2200      	movs	r2, #0
 80047be:	2102      	movs	r1, #2
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7fe ff57 	bl	8003674 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2103      	movs	r1, #3
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fe ff3b 	bl	8003648 <LL_ADC_GetOffsetChannel>
 80047d2:	4603      	mov	r3, r0
 80047d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10a      	bne.n	80047f2 <HAL_ADC_ConfigChannel+0x3aa>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2103      	movs	r1, #3
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fe ff30 	bl	8003648 <LL_ADC_GetOffsetChannel>
 80047e8:	4603      	mov	r3, r0
 80047ea:	0e9b      	lsrs	r3, r3, #26
 80047ec:	f003 021f 	and.w	r2, r3, #31
 80047f0:	e017      	b.n	8004822 <HAL_ADC_ConfigChannel+0x3da>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2103      	movs	r1, #3
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7fe ff25 	bl	8003648 <LL_ADC_GetOffsetChannel>
 80047fe:	4603      	mov	r3, r0
 8004800:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004802:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004804:	fa93 f3a3 	rbit	r3, r3
 8004808:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800480a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800480c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800480e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004814:	2320      	movs	r3, #32
 8004816:	e003      	b.n	8004820 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004818:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800481a:	fab3 f383 	clz	r3, r3
 800481e:	b2db      	uxtb	r3, r3
 8004820:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800482a:	2b00      	cmp	r3, #0
 800482c:	d105      	bne.n	800483a <HAL_ADC_ConfigChannel+0x3f2>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	0e9b      	lsrs	r3, r3, #26
 8004834:	f003 031f 	and.w	r3, r3, #31
 8004838:	e011      	b.n	800485e <HAL_ADC_ConfigChannel+0x416>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004840:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004842:	fa93 f3a3 	rbit	r3, r3
 8004846:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004848:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800484a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800484c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004852:	2320      	movs	r3, #32
 8004854:	e003      	b.n	800485e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004856:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004858:	fab3 f383 	clz	r3, r3
 800485c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800485e:	429a      	cmp	r2, r3
 8004860:	d106      	bne.n	8004870 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2200      	movs	r2, #0
 8004868:	2103      	movs	r1, #3
 800486a:	4618      	mov	r0, r3
 800486c:	f7fe ff02 	bl	8003674 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f7ff f881 	bl	800397c <LL_ADC_IsEnabled>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	f040 813d 	bne.w	8004afc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6818      	ldr	r0, [r3, #0]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	6819      	ldr	r1, [r3, #0]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	461a      	mov	r2, r3
 8004890:	f7fe ffd2 	bl	8003838 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	4aa2      	ldr	r2, [pc, #648]	@ (8004b24 <HAL_ADC_ConfigChannel+0x6dc>)
 800489a:	4293      	cmp	r3, r2
 800489c:	f040 812e 	bne.w	8004afc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10b      	bne.n	80048c8 <HAL_ADC_ConfigChannel+0x480>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	0e9b      	lsrs	r3, r3, #26
 80048b6:	3301      	adds	r3, #1
 80048b8:	f003 031f 	and.w	r3, r3, #31
 80048bc:	2b09      	cmp	r3, #9
 80048be:	bf94      	ite	ls
 80048c0:	2301      	movls	r3, #1
 80048c2:	2300      	movhi	r3, #0
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	e019      	b.n	80048fc <HAL_ADC_ConfigChannel+0x4b4>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048d0:	fa93 f3a3 	rbit	r3, r3
 80048d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80048d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048d8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80048da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80048e0:	2320      	movs	r3, #32
 80048e2:	e003      	b.n	80048ec <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80048e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048e6:	fab3 f383 	clz	r3, r3
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	3301      	adds	r3, #1
 80048ee:	f003 031f 	and.w	r3, r3, #31
 80048f2:	2b09      	cmp	r3, #9
 80048f4:	bf94      	ite	ls
 80048f6:	2301      	movls	r3, #1
 80048f8:	2300      	movhi	r3, #0
 80048fa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d079      	beq.n	80049f4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004908:	2b00      	cmp	r3, #0
 800490a:	d107      	bne.n	800491c <HAL_ADC_ConfigChannel+0x4d4>
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	0e9b      	lsrs	r3, r3, #26
 8004912:	3301      	adds	r3, #1
 8004914:	069b      	lsls	r3, r3, #26
 8004916:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800491a:	e015      	b.n	8004948 <HAL_ADC_ConfigChannel+0x500>
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004922:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004924:	fa93 f3a3 	rbit	r3, r3
 8004928:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800492a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800492c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800492e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004934:	2320      	movs	r3, #32
 8004936:	e003      	b.n	8004940 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800493a:	fab3 f383 	clz	r3, r3
 800493e:	b2db      	uxtb	r3, r3
 8004940:	3301      	adds	r3, #1
 8004942:	069b      	lsls	r3, r3, #26
 8004944:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004950:	2b00      	cmp	r3, #0
 8004952:	d109      	bne.n	8004968 <HAL_ADC_ConfigChannel+0x520>
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	0e9b      	lsrs	r3, r3, #26
 800495a:	3301      	adds	r3, #1
 800495c:	f003 031f 	and.w	r3, r3, #31
 8004960:	2101      	movs	r1, #1
 8004962:	fa01 f303 	lsl.w	r3, r1, r3
 8004966:	e017      	b.n	8004998 <HAL_ADC_ConfigChannel+0x550>
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004970:	fa93 f3a3 	rbit	r3, r3
 8004974:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004976:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004978:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800497a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004980:	2320      	movs	r3, #32
 8004982:	e003      	b.n	800498c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004984:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004986:	fab3 f383 	clz	r3, r3
 800498a:	b2db      	uxtb	r3, r3
 800498c:	3301      	adds	r3, #1
 800498e:	f003 031f 	and.w	r3, r3, #31
 8004992:	2101      	movs	r1, #1
 8004994:	fa01 f303 	lsl.w	r3, r1, r3
 8004998:	ea42 0103 	orr.w	r1, r2, r3
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10a      	bne.n	80049be <HAL_ADC_ConfigChannel+0x576>
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	0e9b      	lsrs	r3, r3, #26
 80049ae:	3301      	adds	r3, #1
 80049b0:	f003 021f 	and.w	r2, r3, #31
 80049b4:	4613      	mov	r3, r2
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	4413      	add	r3, r2
 80049ba:	051b      	lsls	r3, r3, #20
 80049bc:	e018      	b.n	80049f0 <HAL_ADC_ConfigChannel+0x5a8>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c6:	fa93 f3a3 	rbit	r3, r3
 80049ca:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80049cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80049d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80049d6:	2320      	movs	r3, #32
 80049d8:	e003      	b.n	80049e2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80049da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049dc:	fab3 f383 	clz	r3, r3
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	3301      	adds	r3, #1
 80049e4:	f003 021f 	and.w	r2, r3, #31
 80049e8:	4613      	mov	r3, r2
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	4413      	add	r3, r2
 80049ee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049f0:	430b      	orrs	r3, r1
 80049f2:	e07e      	b.n	8004af2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d107      	bne.n	8004a10 <HAL_ADC_ConfigChannel+0x5c8>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	0e9b      	lsrs	r3, r3, #26
 8004a06:	3301      	adds	r3, #1
 8004a08:	069b      	lsls	r3, r3, #26
 8004a0a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a0e:	e015      	b.n	8004a3c <HAL_ADC_ConfigChannel+0x5f4>
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a18:	fa93 f3a3 	rbit	r3, r3
 8004a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a20:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004a28:	2320      	movs	r3, #32
 8004a2a:	e003      	b.n	8004a34 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a2e:	fab3 f383 	clz	r3, r3
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	3301      	adds	r3, #1
 8004a36:	069b      	lsls	r3, r3, #26
 8004a38:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d109      	bne.n	8004a5c <HAL_ADC_ConfigChannel+0x614>
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	0e9b      	lsrs	r3, r3, #26
 8004a4e:	3301      	adds	r3, #1
 8004a50:	f003 031f 	and.w	r3, r3, #31
 8004a54:	2101      	movs	r1, #1
 8004a56:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5a:	e017      	b.n	8004a8c <HAL_ADC_ConfigChannel+0x644>
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	fa93 f3a3 	rbit	r3, r3
 8004a68:	61fb      	str	r3, [r7, #28]
  return result;
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004a74:	2320      	movs	r3, #32
 8004a76:	e003      	b.n	8004a80 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7a:	fab3 f383 	clz	r3, r3
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	3301      	adds	r3, #1
 8004a82:	f003 031f 	and.w	r3, r3, #31
 8004a86:	2101      	movs	r1, #1
 8004a88:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8c:	ea42 0103 	orr.w	r1, r2, r3
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10d      	bne.n	8004ab8 <HAL_ADC_ConfigChannel+0x670>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	0e9b      	lsrs	r3, r3, #26
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	f003 021f 	and.w	r2, r3, #31
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	4413      	add	r3, r2
 8004aae:	3b1e      	subs	r3, #30
 8004ab0:	051b      	lsls	r3, r3, #20
 8004ab2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004ab6:	e01b      	b.n	8004af0 <HAL_ADC_ConfigChannel+0x6a8>
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	fa93 f3a3 	rbit	r3, r3
 8004ac4:	613b      	str	r3, [r7, #16]
  return result;
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004ad0:	2320      	movs	r3, #32
 8004ad2:	e003      	b.n	8004adc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	fab3 f383 	clz	r3, r3
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	3301      	adds	r3, #1
 8004ade:	f003 021f 	and.w	r2, r3, #31
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	4413      	add	r3, r2
 8004ae8:	3b1e      	subs	r3, #30
 8004aea:	051b      	lsls	r3, r3, #20
 8004aec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004af0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004af6:	4619      	mov	r1, r3
 8004af8:	f7fe fe72 	bl	80037e0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	4b09      	ldr	r3, [pc, #36]	@ (8004b28 <HAL_ADC_ConfigChannel+0x6e0>)
 8004b02:	4013      	ands	r3, r2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 80be 	beq.w	8004c86 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b12:	d004      	beq.n	8004b1e <HAL_ADC_ConfigChannel+0x6d6>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a04      	ldr	r2, [pc, #16]	@ (8004b2c <HAL_ADC_ConfigChannel+0x6e4>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d10a      	bne.n	8004b34 <HAL_ADC_ConfigChannel+0x6ec>
 8004b1e:	4b04      	ldr	r3, [pc, #16]	@ (8004b30 <HAL_ADC_ConfigChannel+0x6e8>)
 8004b20:	e009      	b.n	8004b36 <HAL_ADC_ConfigChannel+0x6ee>
 8004b22:	bf00      	nop
 8004b24:	407f0000 	.word	0x407f0000
 8004b28:	80080000 	.word	0x80080000
 8004b2c:	50000100 	.word	0x50000100
 8004b30:	50000300 	.word	0x50000300
 8004b34:	4b59      	ldr	r3, [pc, #356]	@ (8004c9c <HAL_ADC_ConfigChannel+0x854>)
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fe fd54 	bl	80035e4 <LL_ADC_GetCommonPathInternalCh>
 8004b3c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a56      	ldr	r2, [pc, #344]	@ (8004ca0 <HAL_ADC_ConfigChannel+0x858>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d004      	beq.n	8004b54 <HAL_ADC_ConfigChannel+0x70c>
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a55      	ldr	r2, [pc, #340]	@ (8004ca4 <HAL_ADC_ConfigChannel+0x85c>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d13a      	bne.n	8004bca <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004b54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d134      	bne.n	8004bca <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b68:	d005      	beq.n	8004b76 <HAL_ADC_ConfigChannel+0x72e>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a4e      	ldr	r2, [pc, #312]	@ (8004ca8 <HAL_ADC_ConfigChannel+0x860>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	f040 8085 	bne.w	8004c80 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b7e:	d004      	beq.n	8004b8a <HAL_ADC_ConfigChannel+0x742>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a49      	ldr	r2, [pc, #292]	@ (8004cac <HAL_ADC_ConfigChannel+0x864>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d101      	bne.n	8004b8e <HAL_ADC_ConfigChannel+0x746>
 8004b8a:	4a49      	ldr	r2, [pc, #292]	@ (8004cb0 <HAL_ADC_ConfigChannel+0x868>)
 8004b8c:	e000      	b.n	8004b90 <HAL_ADC_ConfigChannel+0x748>
 8004b8e:	4a43      	ldr	r2, [pc, #268]	@ (8004c9c <HAL_ADC_ConfigChannel+0x854>)
 8004b90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	f7fe fd0f 	bl	80035be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ba0:	4b44      	ldr	r3, [pc, #272]	@ (8004cb4 <HAL_ADC_ConfigChannel+0x86c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	099b      	lsrs	r3, r3, #6
 8004ba6:	4a44      	ldr	r2, [pc, #272]	@ (8004cb8 <HAL_ADC_ConfigChannel+0x870>)
 8004ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bac:	099b      	lsrs	r3, r3, #6
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	4413      	add	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004bba:	e002      	b.n	8004bc2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1f9      	bne.n	8004bbc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004bc8:	e05a      	b.n	8004c80 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a3b      	ldr	r2, [pc, #236]	@ (8004cbc <HAL_ADC_ConfigChannel+0x874>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d125      	bne.n	8004c20 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004bd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004bd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d11f      	bne.n	8004c20 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a31      	ldr	r2, [pc, #196]	@ (8004cac <HAL_ADC_ConfigChannel+0x864>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d104      	bne.n	8004bf4 <HAL_ADC_ConfigChannel+0x7ac>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a34      	ldr	r2, [pc, #208]	@ (8004cc0 <HAL_ADC_ConfigChannel+0x878>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d047      	beq.n	8004c84 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bfc:	d004      	beq.n	8004c08 <HAL_ADC_ConfigChannel+0x7c0>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a2a      	ldr	r2, [pc, #168]	@ (8004cac <HAL_ADC_ConfigChannel+0x864>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d101      	bne.n	8004c0c <HAL_ADC_ConfigChannel+0x7c4>
 8004c08:	4a29      	ldr	r2, [pc, #164]	@ (8004cb0 <HAL_ADC_ConfigChannel+0x868>)
 8004c0a:	e000      	b.n	8004c0e <HAL_ADC_ConfigChannel+0x7c6>
 8004c0c:	4a23      	ldr	r2, [pc, #140]	@ (8004c9c <HAL_ADC_ConfigChannel+0x854>)
 8004c0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004c12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c16:	4619      	mov	r1, r3
 8004c18:	4610      	mov	r0, r2
 8004c1a:	f7fe fcd0 	bl	80035be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c1e:	e031      	b.n	8004c84 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a27      	ldr	r2, [pc, #156]	@ (8004cc4 <HAL_ADC_ConfigChannel+0x87c>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d12d      	bne.n	8004c86 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004c2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d127      	bne.n	8004c86 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a1c      	ldr	r2, [pc, #112]	@ (8004cac <HAL_ADC_ConfigChannel+0x864>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d022      	beq.n	8004c86 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c48:	d004      	beq.n	8004c54 <HAL_ADC_ConfigChannel+0x80c>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a17      	ldr	r2, [pc, #92]	@ (8004cac <HAL_ADC_ConfigChannel+0x864>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d101      	bne.n	8004c58 <HAL_ADC_ConfigChannel+0x810>
 8004c54:	4a16      	ldr	r2, [pc, #88]	@ (8004cb0 <HAL_ADC_ConfigChannel+0x868>)
 8004c56:	e000      	b.n	8004c5a <HAL_ADC_ConfigChannel+0x812>
 8004c58:	4a10      	ldr	r2, [pc, #64]	@ (8004c9c <HAL_ADC_ConfigChannel+0x854>)
 8004c5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004c5e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004c62:	4619      	mov	r1, r3
 8004c64:	4610      	mov	r0, r2
 8004c66:	f7fe fcaa 	bl	80035be <LL_ADC_SetCommonPathInternalCh>
 8004c6a:	e00c      	b.n	8004c86 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c70:	f043 0220 	orr.w	r2, r3, #32
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004c7e:	e002      	b.n	8004c86 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c80:	bf00      	nop
 8004c82:	e000      	b.n	8004c86 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c84:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004c8e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	37d8      	adds	r7, #216	@ 0xd8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	50000700 	.word	0x50000700
 8004ca0:	c3210000 	.word	0xc3210000
 8004ca4:	90c00010 	.word	0x90c00010
 8004ca8:	50000600 	.word	0x50000600
 8004cac:	50000100 	.word	0x50000100
 8004cb0:	50000300 	.word	0x50000300
 8004cb4:	2000004c 	.word	0x2000004c
 8004cb8:	053e2d63 	.word	0x053e2d63
 8004cbc:	c7520000 	.word	0xc7520000
 8004cc0:	50000500 	.word	0x50000500
 8004cc4:	cb840000 	.word	0xcb840000

08004cc8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7fe fe4f 	bl	800397c <LL_ADC_IsEnabled>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d176      	bne.n	8004dd2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689a      	ldr	r2, [r3, #8]
 8004cea:	4b3c      	ldr	r3, [pc, #240]	@ (8004ddc <ADC_Enable+0x114>)
 8004cec:	4013      	ands	r3, r2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00d      	beq.n	8004d0e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cf6:	f043 0210 	orr.w	r2, r3, #16
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d02:	f043 0201 	orr.w	r2, r3, #1
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e062      	b.n	8004dd4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fe fe1e 	bl	8003954 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d20:	d004      	beq.n	8004d2c <ADC_Enable+0x64>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a2e      	ldr	r2, [pc, #184]	@ (8004de0 <ADC_Enable+0x118>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d101      	bne.n	8004d30 <ADC_Enable+0x68>
 8004d2c:	4b2d      	ldr	r3, [pc, #180]	@ (8004de4 <ADC_Enable+0x11c>)
 8004d2e:	e000      	b.n	8004d32 <ADC_Enable+0x6a>
 8004d30:	4b2d      	ldr	r3, [pc, #180]	@ (8004de8 <ADC_Enable+0x120>)
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fe fc56 	bl	80035e4 <LL_ADC_GetCommonPathInternalCh>
 8004d38:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004d3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d013      	beq.n	8004d6a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d42:	4b2a      	ldr	r3, [pc, #168]	@ (8004dec <ADC_Enable+0x124>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	099b      	lsrs	r3, r3, #6
 8004d48:	4a29      	ldr	r2, [pc, #164]	@ (8004df0 <ADC_Enable+0x128>)
 8004d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4e:	099b      	lsrs	r3, r3, #6
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	4613      	mov	r3, r2
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	4413      	add	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004d5c:	e002      	b.n	8004d64 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	3b01      	subs	r3, #1
 8004d62:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1f9      	bne.n	8004d5e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004d6a:	f7fe fc09 	bl	8003580 <HAL_GetTick>
 8004d6e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d70:	e028      	b.n	8004dc4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fe fe00 	bl	800397c <LL_ADC_IsEnabled>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d104      	bne.n	8004d8c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fe fde4 	bl	8003954 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004d8c:	f7fe fbf8 	bl	8003580 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d914      	bls.n	8004dc4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d00d      	beq.n	8004dc4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dac:	f043 0210 	orr.w	r2, r3, #16
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004db8:	f043 0201 	orr.w	r2, r3, #1
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e007      	b.n	8004dd4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d1cf      	bne.n	8004d72 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	8000003f 	.word	0x8000003f
 8004de0:	50000100 	.word	0x50000100
 8004de4:	50000300 	.word	0x50000300
 8004de8:	50000700 	.word	0x50000700
 8004dec:	2000004c 	.word	0x2000004c
 8004df0:	053e2d63 	.word	0x053e2d63

08004df4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e00:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e06:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d14b      	bne.n	8004ea6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e12:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d021      	beq.n	8004e6c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7fe fc85 	bl	800373c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d032      	beq.n	8004e9e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d12b      	bne.n	8004e9e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e4a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d11f      	bne.n	8004e9e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e62:	f043 0201 	orr.w	r2, r3, #1
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e6a:	e018      	b.n	8004e9e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d111      	bne.n	8004e9e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e7e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d105      	bne.n	8004e9e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e96:	f043 0201 	orr.w	r2, r3, #1
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f7ff faaa 	bl	80043f8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004ea4:	e00e      	b.n	8004ec4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eaa:	f003 0310 	and.w	r3, r3, #16
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f7ff fabe 	bl	8004434 <HAL_ADC_ErrorCallback>
}
 8004eb8:	e004      	b.n	8004ec4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	4798      	blx	r3
}
 8004ec4:	bf00      	nop
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f7ff fa96 	bl	800440c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ee0:	bf00      	nop
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004efa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f06:	f043 0204 	orr.w	r2, r3, #4
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f7ff fa90 	bl	8004434 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f14:	bf00      	nop
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <LL_ADC_IsEnabled>:
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d101      	bne.n	8004f34 <LL_ADC_IsEnabled+0x18>
 8004f30:	2301      	movs	r3, #1
 8004f32:	e000      	b.n	8004f36 <LL_ADC_IsEnabled+0x1a>
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <LL_ADC_REG_IsConversionOngoing>:
{
 8004f42:	b480      	push	{r7}
 8004f44:	b083      	sub	sp, #12
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 0304 	and.w	r3, r3, #4
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d101      	bne.n	8004f5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004fcc:	b590      	push	{r4, r7, lr}
 8004fce:	b0a1      	sub	sp, #132	@ 0x84
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d101      	bne.n	8004fea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	e0e7      	b.n	80051ba <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005002:	d102      	bne.n	800500a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005004:	4b6f      	ldr	r3, [pc, #444]	@ (80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005006:	60bb      	str	r3, [r7, #8]
 8005008:	e009      	b.n	800501e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a6e      	ldr	r2, [pc, #440]	@ (80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d102      	bne.n	800501a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005014:	4b6d      	ldr	r3, [pc, #436]	@ (80051cc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005016:	60bb      	str	r3, [r7, #8]
 8005018:	e001      	b.n	800501e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800501a:	2300      	movs	r3, #0
 800501c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10b      	bne.n	800503c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005028:	f043 0220 	orr.w	r2, r3, #32
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e0be      	b.n	80051ba <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	4618      	mov	r0, r3
 8005040:	f7ff ff7f 	bl	8004f42 <LL_ADC_REG_IsConversionOngoing>
 8005044:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4618      	mov	r0, r3
 800504c:	f7ff ff79 	bl	8004f42 <LL_ADC_REG_IsConversionOngoing>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	f040 80a0 	bne.w	8005198 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005058:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800505a:	2b00      	cmp	r3, #0
 800505c:	f040 809c 	bne.w	8005198 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005068:	d004      	beq.n	8005074 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a55      	ldr	r2, [pc, #340]	@ (80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d101      	bne.n	8005078 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005074:	4b56      	ldr	r3, [pc, #344]	@ (80051d0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005076:	e000      	b.n	800507a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005078:	4b56      	ldr	r3, [pc, #344]	@ (80051d4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800507a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d04b      	beq.n	800511c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005084:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	6859      	ldr	r1, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005096:	035b      	lsls	r3, r3, #13
 8005098:	430b      	orrs	r3, r1
 800509a:	431a      	orrs	r2, r3
 800509c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800509e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050a8:	d004      	beq.n	80050b4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a45      	ldr	r2, [pc, #276]	@ (80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d10f      	bne.n	80050d4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80050b4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80050b8:	f7ff ff30 	bl	8004f1c <LL_ADC_IsEnabled>
 80050bc:	4604      	mov	r4, r0
 80050be:	4841      	ldr	r0, [pc, #260]	@ (80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80050c0:	f7ff ff2c 	bl	8004f1c <LL_ADC_IsEnabled>
 80050c4:	4603      	mov	r3, r0
 80050c6:	4323      	orrs	r3, r4
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	bf0c      	ite	eq
 80050cc:	2301      	moveq	r3, #1
 80050ce:	2300      	movne	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	e012      	b.n	80050fa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80050d4:	483c      	ldr	r0, [pc, #240]	@ (80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80050d6:	f7ff ff21 	bl	8004f1c <LL_ADC_IsEnabled>
 80050da:	4604      	mov	r4, r0
 80050dc:	483b      	ldr	r0, [pc, #236]	@ (80051cc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80050de:	f7ff ff1d 	bl	8004f1c <LL_ADC_IsEnabled>
 80050e2:	4603      	mov	r3, r0
 80050e4:	431c      	orrs	r4, r3
 80050e6:	483c      	ldr	r0, [pc, #240]	@ (80051d8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80050e8:	f7ff ff18 	bl	8004f1c <LL_ADC_IsEnabled>
 80050ec:	4603      	mov	r3, r0
 80050ee:	4323      	orrs	r3, r4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	bf0c      	ite	eq
 80050f4:	2301      	moveq	r3, #1
 80050f6:	2300      	movne	r3, #0
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d056      	beq.n	80051ac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80050fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005106:	f023 030f 	bic.w	r3, r3, #15
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	6811      	ldr	r1, [r2, #0]
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	6892      	ldr	r2, [r2, #8]
 8005112:	430a      	orrs	r2, r1
 8005114:	431a      	orrs	r2, r3
 8005116:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005118:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800511a:	e047      	b.n	80051ac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800511c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005124:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005126:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005130:	d004      	beq.n	800513c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a23      	ldr	r2, [pc, #140]	@ (80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d10f      	bne.n	800515c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800513c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005140:	f7ff feec 	bl	8004f1c <LL_ADC_IsEnabled>
 8005144:	4604      	mov	r4, r0
 8005146:	481f      	ldr	r0, [pc, #124]	@ (80051c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005148:	f7ff fee8 	bl	8004f1c <LL_ADC_IsEnabled>
 800514c:	4603      	mov	r3, r0
 800514e:	4323      	orrs	r3, r4
 8005150:	2b00      	cmp	r3, #0
 8005152:	bf0c      	ite	eq
 8005154:	2301      	moveq	r3, #1
 8005156:	2300      	movne	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	e012      	b.n	8005182 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800515c:	481a      	ldr	r0, [pc, #104]	@ (80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800515e:	f7ff fedd 	bl	8004f1c <LL_ADC_IsEnabled>
 8005162:	4604      	mov	r4, r0
 8005164:	4819      	ldr	r0, [pc, #100]	@ (80051cc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005166:	f7ff fed9 	bl	8004f1c <LL_ADC_IsEnabled>
 800516a:	4603      	mov	r3, r0
 800516c:	431c      	orrs	r4, r3
 800516e:	481a      	ldr	r0, [pc, #104]	@ (80051d8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005170:	f7ff fed4 	bl	8004f1c <LL_ADC_IsEnabled>
 8005174:	4603      	mov	r3, r0
 8005176:	4323      	orrs	r3, r4
 8005178:	2b00      	cmp	r3, #0
 800517a:	bf0c      	ite	eq
 800517c:	2301      	moveq	r3, #1
 800517e:	2300      	movne	r3, #0
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d012      	beq.n	80051ac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005186:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800518e:	f023 030f 	bic.w	r3, r3, #15
 8005192:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005194:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005196:	e009      	b.n	80051ac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800519c:	f043 0220 	orr.w	r2, r3, #32
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80051aa:	e000      	b.n	80051ae <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80051ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80051b6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3784      	adds	r7, #132	@ 0x84
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd90      	pop	{r4, r7, pc}
 80051c2:	bf00      	nop
 80051c4:	50000100 	.word	0x50000100
 80051c8:	50000400 	.word	0x50000400
 80051cc:	50000500 	.word	0x50000500
 80051d0:	50000300 	.word	0x50000300
 80051d4:	50000700 	.word	0x50000700
 80051d8:	50000600 	.word	0x50000600

080051dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005220 <__NVIC_SetPriorityGrouping+0x44>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80051f8:	4013      	ands	r3, r2
 80051fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005204:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005208:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800520c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800520e:	4a04      	ldr	r2, [pc, #16]	@ (8005220 <__NVIC_SetPriorityGrouping+0x44>)
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	60d3      	str	r3, [r2, #12]
}
 8005214:	bf00      	nop
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	e000ed00 	.word	0xe000ed00

08005224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005228:	4b04      	ldr	r3, [pc, #16]	@ (800523c <__NVIC_GetPriorityGrouping+0x18>)
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	0a1b      	lsrs	r3, r3, #8
 800522e:	f003 0307 	and.w	r3, r3, #7
}
 8005232:	4618      	mov	r0, r3
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	e000ed00 	.word	0xe000ed00

08005240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	4603      	mov	r3, r0
 8005248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800524a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800524e:	2b00      	cmp	r3, #0
 8005250:	db0b      	blt.n	800526a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005252:	79fb      	ldrb	r3, [r7, #7]
 8005254:	f003 021f 	and.w	r2, r3, #31
 8005258:	4907      	ldr	r1, [pc, #28]	@ (8005278 <__NVIC_EnableIRQ+0x38>)
 800525a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800525e:	095b      	lsrs	r3, r3, #5
 8005260:	2001      	movs	r0, #1
 8005262:	fa00 f202 	lsl.w	r2, r0, r2
 8005266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800526a:	bf00      	nop
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	e000e100 	.word	0xe000e100

0800527c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	4603      	mov	r3, r0
 8005284:	6039      	str	r1, [r7, #0]
 8005286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800528c:	2b00      	cmp	r3, #0
 800528e:	db0a      	blt.n	80052a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	b2da      	uxtb	r2, r3
 8005294:	490c      	ldr	r1, [pc, #48]	@ (80052c8 <__NVIC_SetPriority+0x4c>)
 8005296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800529a:	0112      	lsls	r2, r2, #4
 800529c:	b2d2      	uxtb	r2, r2
 800529e:	440b      	add	r3, r1
 80052a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052a4:	e00a      	b.n	80052bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	4908      	ldr	r1, [pc, #32]	@ (80052cc <__NVIC_SetPriority+0x50>)
 80052ac:	79fb      	ldrb	r3, [r7, #7]
 80052ae:	f003 030f 	and.w	r3, r3, #15
 80052b2:	3b04      	subs	r3, #4
 80052b4:	0112      	lsls	r2, r2, #4
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	440b      	add	r3, r1
 80052ba:	761a      	strb	r2, [r3, #24]
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	e000e100 	.word	0xe000e100
 80052cc:	e000ed00 	.word	0xe000ed00

080052d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b089      	sub	sp, #36	@ 0x24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	f1c3 0307 	rsb	r3, r3, #7
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	bf28      	it	cs
 80052ee:	2304      	movcs	r3, #4
 80052f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	3304      	adds	r3, #4
 80052f6:	2b06      	cmp	r3, #6
 80052f8:	d902      	bls.n	8005300 <NVIC_EncodePriority+0x30>
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	3b03      	subs	r3, #3
 80052fe:	e000      	b.n	8005302 <NVIC_EncodePriority+0x32>
 8005300:	2300      	movs	r3, #0
 8005302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005304:	f04f 32ff 	mov.w	r2, #4294967295
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	fa02 f303 	lsl.w	r3, r2, r3
 800530e:	43da      	mvns	r2, r3
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	401a      	ands	r2, r3
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005318:	f04f 31ff 	mov.w	r1, #4294967295
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	fa01 f303 	lsl.w	r3, r1, r3
 8005322:	43d9      	mvns	r1, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005328:	4313      	orrs	r3, r2
         );
}
 800532a:	4618      	mov	r0, r3
 800532c:	3724      	adds	r7, #36	@ 0x24
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
	...

08005338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	3b01      	subs	r3, #1
 8005344:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005348:	d301      	bcc.n	800534e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800534a:	2301      	movs	r3, #1
 800534c:	e00f      	b.n	800536e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800534e:	4a0a      	ldr	r2, [pc, #40]	@ (8005378 <SysTick_Config+0x40>)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3b01      	subs	r3, #1
 8005354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005356:	210f      	movs	r1, #15
 8005358:	f04f 30ff 	mov.w	r0, #4294967295
 800535c:	f7ff ff8e 	bl	800527c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005360:	4b05      	ldr	r3, [pc, #20]	@ (8005378 <SysTick_Config+0x40>)
 8005362:	2200      	movs	r2, #0
 8005364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005366:	4b04      	ldr	r3, [pc, #16]	@ (8005378 <SysTick_Config+0x40>)
 8005368:	2207      	movs	r2, #7
 800536a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	e000e010 	.word	0xe000e010

0800537c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7ff ff29 	bl	80051dc <__NVIC_SetPriorityGrouping>
}
 800538a:	bf00      	nop
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b086      	sub	sp, #24
 8005396:	af00      	add	r7, sp, #0
 8005398:	4603      	mov	r3, r0
 800539a:	60b9      	str	r1, [r7, #8]
 800539c:	607a      	str	r2, [r7, #4]
 800539e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053a0:	f7ff ff40 	bl	8005224 <__NVIC_GetPriorityGrouping>
 80053a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	68b9      	ldr	r1, [r7, #8]
 80053aa:	6978      	ldr	r0, [r7, #20]
 80053ac:	f7ff ff90 	bl	80052d0 <NVIC_EncodePriority>
 80053b0:	4602      	mov	r2, r0
 80053b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053b6:	4611      	mov	r1, r2
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff ff5f 	bl	800527c <__NVIC_SetPriority>
}
 80053be:	bf00      	nop
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b082      	sub	sp, #8
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	4603      	mov	r3, r0
 80053ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7ff ff33 	bl	8005240 <__NVIC_EnableIRQ>
}
 80053da:	bf00      	nop
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b082      	sub	sp, #8
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7ff ffa4 	bl	8005338 <SysTick_Config>
 80053f0:	4603      	mov	r3, r0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
	...

080053fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e08d      	b.n	800552a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	4b47      	ldr	r3, [pc, #284]	@ (8005534 <HAL_DMA_Init+0x138>)
 8005416:	429a      	cmp	r2, r3
 8005418:	d80f      	bhi.n	800543a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	461a      	mov	r2, r3
 8005420:	4b45      	ldr	r3, [pc, #276]	@ (8005538 <HAL_DMA_Init+0x13c>)
 8005422:	4413      	add	r3, r2
 8005424:	4a45      	ldr	r2, [pc, #276]	@ (800553c <HAL_DMA_Init+0x140>)
 8005426:	fba2 2303 	umull	r2, r3, r2, r3
 800542a:	091b      	lsrs	r3, r3, #4
 800542c:	009a      	lsls	r2, r3, #2
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a42      	ldr	r2, [pc, #264]	@ (8005540 <HAL_DMA_Init+0x144>)
 8005436:	641a      	str	r2, [r3, #64]	@ 0x40
 8005438:	e00e      	b.n	8005458 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	4b40      	ldr	r3, [pc, #256]	@ (8005544 <HAL_DMA_Init+0x148>)
 8005442:	4413      	add	r3, r2
 8005444:	4a3d      	ldr	r2, [pc, #244]	@ (800553c <HAL_DMA_Init+0x140>)
 8005446:	fba2 2303 	umull	r2, r3, r2, r3
 800544a:	091b      	lsrs	r3, r3, #4
 800544c:	009a      	lsls	r2, r3, #2
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a3c      	ldr	r2, [pc, #240]	@ (8005548 <HAL_DMA_Init+0x14c>)
 8005456:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800546e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005472:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800547c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005488:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005494:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 fa76 	bl	800599c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054b8:	d102      	bne.n	80054c0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054c8:	b2d2      	uxtb	r2, r2
 80054ca:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80054d4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d010      	beq.n	8005500 <HAL_DMA_Init+0x104>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d80c      	bhi.n	8005500 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fa96 	bl	8005a18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80054fc:	605a      	str	r2, [r3, #4]
 80054fe:	e008      	b.n	8005512 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	40020407 	.word	0x40020407
 8005538:	bffdfff8 	.word	0xbffdfff8
 800553c:	cccccccd 	.word	0xcccccccd
 8005540:	40020000 	.word	0x40020000
 8005544:	bffdfbf8 	.word	0xbffdfbf8
 8005548:	40020400 	.word	0x40020400

0800554c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005564:	2b01      	cmp	r3, #1
 8005566:	d101      	bne.n	800556c <HAL_DMA_Start_IT+0x20>
 8005568:	2302      	movs	r3, #2
 800556a:	e066      	b.n	800563a <HAL_DMA_Start_IT+0xee>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b01      	cmp	r3, #1
 800557e:	d155      	bne.n	800562c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0201 	bic.w	r2, r2, #1
 800559c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	68b9      	ldr	r1, [r7, #8]
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f000 f9bb 	bl	8005920 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d008      	beq.n	80055c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f042 020e 	orr.w	r2, r2, #14
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	e00f      	b.n	80055e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0204 	bic.w	r2, r2, #4
 80055d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 020a 	orr.w	r2, r2, #10
 80055e2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d007      	beq.n	8005602 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005600:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005606:	2b00      	cmp	r3, #0
 8005608:	d007      	beq.n	800561a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005614:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005618:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f042 0201 	orr.w	r2, r2, #1
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	e005      	b.n	8005638 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005634:	2302      	movs	r3, #2
 8005636:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005638:	7dfb      	ldrb	r3, [r7, #23]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3718      	adds	r7, #24
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005642:	b480      	push	{r7}
 8005644:	b085      	sub	sp, #20
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800564a:	2300      	movs	r3, #0
 800564c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d005      	beq.n	8005666 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2204      	movs	r2, #4
 800565e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	73fb      	strb	r3, [r7, #15]
 8005664:	e037      	b.n	80056d6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 020e 	bic.w	r2, r2, #14
 8005674:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005680:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005684:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 0201 	bic.w	r2, r2, #1
 8005694:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800569a:	f003 021f 	and.w	r2, r3, #31
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a2:	2101      	movs	r1, #1
 80056a4:	fa01 f202 	lsl.w	r2, r1, r2
 80056a8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80056b2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00c      	beq.n	80056d6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056ca:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80056d4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80056e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056fc:	2300      	movs	r3, #0
 80056fe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b02      	cmp	r3, #2
 800570a:	d00d      	beq.n	8005728 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2204      	movs	r2, #4
 8005710:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	73fb      	strb	r3, [r7, #15]
 8005726:	e047      	b.n	80057b8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 020e 	bic.w	r2, r2, #14
 8005736:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0201 	bic.w	r2, r2, #1
 8005746:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005752:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005756:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800575c:	f003 021f 	and.w	r2, r3, #31
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005764:	2101      	movs	r1, #1
 8005766:	fa01 f202 	lsl.w	r2, r1, r2
 800576a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005774:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00c      	beq.n	8005798 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005788:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800578c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005796:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	4798      	blx	r3
    }
  }
  return status;
 80057b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b084      	sub	sp, #16
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057de:	f003 031f 	and.w	r3, r3, #31
 80057e2:	2204      	movs	r2, #4
 80057e4:	409a      	lsls	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4013      	ands	r3, r2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d026      	beq.n	800583c <HAL_DMA_IRQHandler+0x7a>
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	f003 0304 	and.w	r3, r3, #4
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d021      	beq.n	800583c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0320 	and.w	r3, r3, #32
 8005802:	2b00      	cmp	r3, #0
 8005804:	d107      	bne.n	8005816 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0204 	bic.w	r2, r2, #4
 8005814:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800581a:	f003 021f 	and.w	r2, r3, #31
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005822:	2104      	movs	r1, #4
 8005824:	fa01 f202 	lsl.w	r2, r1, r2
 8005828:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582e:	2b00      	cmp	r3, #0
 8005830:	d071      	beq.n	8005916 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800583a:	e06c      	b.n	8005916 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005840:	f003 031f 	and.w	r3, r3, #31
 8005844:	2202      	movs	r2, #2
 8005846:	409a      	lsls	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4013      	ands	r3, r2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d02e      	beq.n	80058ae <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d029      	beq.n	80058ae <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0320 	and.w	r3, r3, #32
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10b      	bne.n	8005880 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 020a 	bic.w	r2, r2, #10
 8005876:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005884:	f003 021f 	and.w	r2, r3, #31
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800588c:	2102      	movs	r1, #2
 800588e:	fa01 f202 	lsl.w	r2, r1, r2
 8005892:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d038      	beq.n	8005916 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80058ac:	e033      	b.n	8005916 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058b2:	f003 031f 	and.w	r3, r3, #31
 80058b6:	2208      	movs	r2, #8
 80058b8:	409a      	lsls	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	4013      	ands	r3, r2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d02a      	beq.n	8005918 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d025      	beq.n	8005918 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 020e 	bic.w	r2, r2, #14
 80058da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e0:	f003 021f 	and.w	r2, r3, #31
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e8:	2101      	movs	r1, #1
 80058ea:	fa01 f202 	lsl.w	r2, r1, r2
 80058ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800590a:	2b00      	cmp	r3, #0
 800590c:	d004      	beq.n	8005918 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005916:	bf00      	nop
 8005918:	bf00      	nop
}
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
 800592c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005936:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800593c:	2b00      	cmp	r3, #0
 800593e:	d004      	beq.n	800594a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005948:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800594e:	f003 021f 	and.w	r2, r3, #31
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005956:	2101      	movs	r1, #1
 8005958:	fa01 f202 	lsl.w	r2, r1, r2
 800595c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	2b10      	cmp	r3, #16
 800596c:	d108      	bne.n	8005980 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800597e:	e007      	b.n	8005990 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	60da      	str	r2, [r3, #12]
}
 8005990:	bf00      	nop
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800599c:	b480      	push	{r7}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	461a      	mov	r2, r3
 80059aa:	4b16      	ldr	r3, [pc, #88]	@ (8005a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d802      	bhi.n	80059b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80059b0:	4b15      	ldr	r3, [pc, #84]	@ (8005a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80059b2:	617b      	str	r3, [r7, #20]
 80059b4:	e001      	b.n	80059ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80059b6:	4b15      	ldr	r3, [pc, #84]	@ (8005a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80059b8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	3b08      	subs	r3, #8
 80059c6:	4a12      	ldr	r2, [pc, #72]	@ (8005a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80059c8:	fba2 2303 	umull	r2, r3, r2, r3
 80059cc:	091b      	lsrs	r3, r3, #4
 80059ce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059d4:	089b      	lsrs	r3, r3, #2
 80059d6:	009a      	lsls	r2, r3, #2
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	4413      	add	r3, r2
 80059dc:	461a      	mov	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a0b      	ldr	r2, [pc, #44]	@ (8005a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80059e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f003 031f 	and.w	r3, r3, #31
 80059ee:	2201      	movs	r2, #1
 80059f0:	409a      	lsls	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80059f6:	bf00      	nop
 80059f8:	371c      	adds	r7, #28
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	40020407 	.word	0x40020407
 8005a08:	40020800 	.word	0x40020800
 8005a0c:	40020820 	.word	0x40020820
 8005a10:	cccccccd 	.word	0xcccccccd
 8005a14:	40020880 	.word	0x40020880

08005a18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005a2c:	4413      	add	r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	461a      	mov	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a08      	ldr	r2, [pc, #32]	@ (8005a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005a3a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	f003 031f 	and.w	r3, r3, #31
 8005a44:	2201      	movs	r2, #1
 8005a46:	409a      	lsls	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005a4c:	bf00      	nop
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	1000823f 	.word	0x1000823f
 8005a5c:	40020940 	.word	0x40020940

08005a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005a6e:	e15a      	b.n	8005d26 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	2101      	movs	r1, #1
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	fa01 f303 	lsl.w	r3, r1, r3
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 814c 	beq.w	8005d20 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f003 0303 	and.w	r3, r3, #3
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d005      	beq.n	8005aa0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d130      	bne.n	8005b02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	005b      	lsls	r3, r3, #1
 8005aaa:	2203      	movs	r2, #3
 8005aac:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab0:	43db      	mvns	r3, r3
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	68da      	ldr	r2, [r3, #12]
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	fa02 f303 	lsl.w	r3, r2, r3
 8005ade:	43db      	mvns	r3, r3
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	091b      	lsrs	r3, r3, #4
 8005aec:	f003 0201 	and.w	r2, r3, #1
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	fa02 f303 	lsl.w	r3, r2, r3
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f003 0303 	and.w	r3, r3, #3
 8005b0a:	2b03      	cmp	r3, #3
 8005b0c:	d017      	beq.n	8005b3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	2203      	movs	r2, #3
 8005b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1e:	43db      	mvns	r3, r3
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	4013      	ands	r3, r2
 8005b24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	689a      	ldr	r2, [r3, #8]
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f003 0303 	and.w	r3, r3, #3
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d123      	bne.n	8005b92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	08da      	lsrs	r2, r3, #3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	3208      	adds	r2, #8
 8005b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	f003 0307 	and.w	r3, r3, #7
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	220f      	movs	r2, #15
 8005b62:	fa02 f303 	lsl.w	r3, r2, r3
 8005b66:	43db      	mvns	r3, r3
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	691a      	ldr	r2, [r3, #16]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f003 0307 	and.w	r3, r3, #7
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	08da      	lsrs	r2, r3, #3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3208      	adds	r2, #8
 8005b8c:	6939      	ldr	r1, [r7, #16]
 8005b8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	2203      	movs	r2, #3
 8005b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba2:	43db      	mvns	r3, r3
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f003 0203 	and.w	r2, r3, #3
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f000 80a6 	beq.w	8005d20 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bd4:	4b5b      	ldr	r3, [pc, #364]	@ (8005d44 <HAL_GPIO_Init+0x2e4>)
 8005bd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bd8:	4a5a      	ldr	r2, [pc, #360]	@ (8005d44 <HAL_GPIO_Init+0x2e4>)
 8005bda:	f043 0301 	orr.w	r3, r3, #1
 8005bde:	6613      	str	r3, [r2, #96]	@ 0x60
 8005be0:	4b58      	ldr	r3, [pc, #352]	@ (8005d44 <HAL_GPIO_Init+0x2e4>)
 8005be2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	60bb      	str	r3, [r7, #8]
 8005bea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005bec:	4a56      	ldr	r2, [pc, #344]	@ (8005d48 <HAL_GPIO_Init+0x2e8>)
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	089b      	lsrs	r3, r3, #2
 8005bf2:	3302      	adds	r3, #2
 8005bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f003 0303 	and.w	r3, r3, #3
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	220f      	movs	r2, #15
 8005c04:	fa02 f303 	lsl.w	r3, r2, r3
 8005c08:	43db      	mvns	r3, r3
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005c16:	d01f      	beq.n	8005c58 <HAL_GPIO_Init+0x1f8>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a4c      	ldr	r2, [pc, #304]	@ (8005d4c <HAL_GPIO_Init+0x2ec>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d019      	beq.n	8005c54 <HAL_GPIO_Init+0x1f4>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a4b      	ldr	r2, [pc, #300]	@ (8005d50 <HAL_GPIO_Init+0x2f0>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d013      	beq.n	8005c50 <HAL_GPIO_Init+0x1f0>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a4a      	ldr	r2, [pc, #296]	@ (8005d54 <HAL_GPIO_Init+0x2f4>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d00d      	beq.n	8005c4c <HAL_GPIO_Init+0x1ec>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a49      	ldr	r2, [pc, #292]	@ (8005d58 <HAL_GPIO_Init+0x2f8>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d007      	beq.n	8005c48 <HAL_GPIO_Init+0x1e8>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a48      	ldr	r2, [pc, #288]	@ (8005d5c <HAL_GPIO_Init+0x2fc>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d101      	bne.n	8005c44 <HAL_GPIO_Init+0x1e4>
 8005c40:	2305      	movs	r3, #5
 8005c42:	e00a      	b.n	8005c5a <HAL_GPIO_Init+0x1fa>
 8005c44:	2306      	movs	r3, #6
 8005c46:	e008      	b.n	8005c5a <HAL_GPIO_Init+0x1fa>
 8005c48:	2304      	movs	r3, #4
 8005c4a:	e006      	b.n	8005c5a <HAL_GPIO_Init+0x1fa>
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e004      	b.n	8005c5a <HAL_GPIO_Init+0x1fa>
 8005c50:	2302      	movs	r3, #2
 8005c52:	e002      	b.n	8005c5a <HAL_GPIO_Init+0x1fa>
 8005c54:	2301      	movs	r3, #1
 8005c56:	e000      	b.n	8005c5a <HAL_GPIO_Init+0x1fa>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	f002 0203 	and.w	r2, r2, #3
 8005c60:	0092      	lsls	r2, r2, #2
 8005c62:	4093      	lsls	r3, r2
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c6a:	4937      	ldr	r1, [pc, #220]	@ (8005d48 <HAL_GPIO_Init+0x2e8>)
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	089b      	lsrs	r3, r3, #2
 8005c70:	3302      	adds	r3, #2
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c78:	4b39      	ldr	r3, [pc, #228]	@ (8005d60 <HAL_GPIO_Init+0x300>)
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	43db      	mvns	r3, r3
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	4013      	ands	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005c9c:	4a30      	ldr	r2, [pc, #192]	@ (8005d60 <HAL_GPIO_Init+0x300>)
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005ca2:	4b2f      	ldr	r3, [pc, #188]	@ (8005d60 <HAL_GPIO_Init+0x300>)
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	43db      	mvns	r3, r3
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	4013      	ands	r3, r2
 8005cb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005cc6:	4a26      	ldr	r2, [pc, #152]	@ (8005d60 <HAL_GPIO_Init+0x300>)
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005ccc:	4b24      	ldr	r3, [pc, #144]	@ (8005d60 <HAL_GPIO_Init+0x300>)
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	43db      	mvns	r3, r3
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	4013      	ands	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d003      	beq.n	8005cf0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005cf0:	4a1b      	ldr	r2, [pc, #108]	@ (8005d60 <HAL_GPIO_Init+0x300>)
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8005d60 <HAL_GPIO_Init+0x300>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	43db      	mvns	r3, r3
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	4013      	ands	r3, r2
 8005d04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005d1a:	4a11      	ldr	r2, [pc, #68]	@ (8005d60 <HAL_GPIO_Init+0x300>)
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	3301      	adds	r3, #1
 8005d24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f47f ae9d 	bne.w	8005a70 <HAL_GPIO_Init+0x10>
  }
}
 8005d36:	bf00      	nop
 8005d38:	bf00      	nop
 8005d3a:	371c      	adds	r7, #28
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	40021000 	.word	0x40021000
 8005d48:	40010000 	.word	0x40010000
 8005d4c:	48000400 	.word	0x48000400
 8005d50:	48000800 	.word	0x48000800
 8005d54:	48000c00 	.word	0x48000c00
 8005d58:	48001000 	.word	0x48001000
 8005d5c:	48001400 	.word	0x48001400
 8005d60:	40010400 	.word	0x40010400

08005d64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691a      	ldr	r2, [r3, #16]
 8005d74:	887b      	ldrh	r3, [r7, #2]
 8005d76:	4013      	ands	r3, r2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	73fb      	strb	r3, [r7, #15]
 8005d80:	e001      	b.n	8005d86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d82:	2300      	movs	r3, #0
 8005d84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	807b      	strh	r3, [r7, #2]
 8005da0:	4613      	mov	r3, r2
 8005da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005da4:	787b      	ldrb	r3, [r7, #1]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005daa:	887a      	ldrh	r2, [r7, #2]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005db0:	e002      	b.n	8005db8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005db2:	887a      	ldrh	r2, [r7, #2]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	4603      	mov	r3, r0
 8005dcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005dce:	4b08      	ldr	r3, [pc, #32]	@ (8005df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005dd0:	695a      	ldr	r2, [r3, #20]
 8005dd2:	88fb      	ldrh	r3, [r7, #6]
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d006      	beq.n	8005de8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005dda:	4a05      	ldr	r2, [pc, #20]	@ (8005df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ddc:	88fb      	ldrh	r3, [r7, #6]
 8005dde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005de0:	88fb      	ldrh	r3, [r7, #6]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7fc fa3e 	bl	8002264 <HAL_GPIO_EXTI_Callback>
  }
}
 8005de8:	bf00      	nop
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	40010400 	.word	0x40010400

08005df4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d141      	bne.n	8005e86 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e02:	4b4b      	ldr	r3, [pc, #300]	@ (8005f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005e0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e0e:	d131      	bne.n	8005e74 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e10:	4b47      	ldr	r3, [pc, #284]	@ (8005f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e16:	4a46      	ldr	r2, [pc, #280]	@ (8005f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e20:	4b43      	ldr	r3, [pc, #268]	@ (8005f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e28:	4a41      	ldr	r2, [pc, #260]	@ (8005f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e30:	4b40      	ldr	r3, [pc, #256]	@ (8005f34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2232      	movs	r2, #50	@ 0x32
 8005e36:	fb02 f303 	mul.w	r3, r2, r3
 8005e3a:	4a3f      	ldr	r2, [pc, #252]	@ (8005f38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e40:	0c9b      	lsrs	r3, r3, #18
 8005e42:	3301      	adds	r3, #1
 8005e44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e46:	e002      	b.n	8005e4e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e4e:	4b38      	ldr	r3, [pc, #224]	@ (8005f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e5a:	d102      	bne.n	8005e62 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1f2      	bne.n	8005e48 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e62:	4b33      	ldr	r3, [pc, #204]	@ (8005f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e6e:	d158      	bne.n	8005f22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e057      	b.n	8005f24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e74:	4b2e      	ldr	r3, [pc, #184]	@ (8005f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e7a:	4a2d      	ldr	r2, [pc, #180]	@ (8005f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005e84:	e04d      	b.n	8005f22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e8c:	d141      	bne.n	8005f12 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e8e:	4b28      	ldr	r3, [pc, #160]	@ (8005f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005e96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e9a:	d131      	bne.n	8005f00 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e9c:	4b24      	ldr	r3, [pc, #144]	@ (8005f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ea2:	4a23      	ldr	r2, [pc, #140]	@ (8005f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ea8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005eac:	4b20      	ldr	r3, [pc, #128]	@ (8005f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005eb4:	4a1e      	ldr	r2, [pc, #120]	@ (8005f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005eb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005eba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8005f34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2232      	movs	r2, #50	@ 0x32
 8005ec2:	fb02 f303 	mul.w	r3, r2, r3
 8005ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8005f38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ecc:	0c9b      	lsrs	r3, r3, #18
 8005ece:	3301      	adds	r3, #1
 8005ed0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ed2:	e002      	b.n	8005eda <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005eda:	4b15      	ldr	r3, [pc, #84]	@ (8005f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ee6:	d102      	bne.n	8005eee <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1f2      	bne.n	8005ed4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005eee:	4b10      	ldr	r3, [pc, #64]	@ (8005f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005efa:	d112      	bne.n	8005f22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e011      	b.n	8005f24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f00:	4b0b      	ldr	r3, [pc, #44]	@ (8005f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f06:	4a0a      	ldr	r2, [pc, #40]	@ (8005f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005f10:	e007      	b.n	8005f22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005f12:	4b07      	ldr	r3, [pc, #28]	@ (8005f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005f1a:	4a05      	ldr	r2, [pc, #20]	@ (8005f30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005f20:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	40007000 	.word	0x40007000
 8005f34:	2000004c 	.word	0x2000004c
 8005f38:	431bde83 	.word	0x431bde83

08005f3c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005f40:	4b05      	ldr	r3, [pc, #20]	@ (8005f58 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	4a04      	ldr	r2, [pc, #16]	@ (8005f58 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005f46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005f4a:	6093      	str	r3, [r2, #8]
}
 8005f4c:	bf00      	nop
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	40007000 	.word	0x40007000

08005f5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b088      	sub	sp, #32
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e2fe      	b.n	800656c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d075      	beq.n	8006066 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f7a:	4b97      	ldr	r3, [pc, #604]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 030c 	and.w	r3, r3, #12
 8005f82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f84:	4b94      	ldr	r3, [pc, #592]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f003 0303 	and.w	r3, r3, #3
 8005f8c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	2b0c      	cmp	r3, #12
 8005f92:	d102      	bne.n	8005f9a <HAL_RCC_OscConfig+0x3e>
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	2b03      	cmp	r3, #3
 8005f98:	d002      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x44>
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	2b08      	cmp	r3, #8
 8005f9e:	d10b      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fa0:	4b8d      	ldr	r3, [pc, #564]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d05b      	beq.n	8006064 <HAL_RCC_OscConfig+0x108>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d157      	bne.n	8006064 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e2d9      	b.n	800656c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fc0:	d106      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x74>
 8005fc2:	4b85      	ldr	r3, [pc, #532]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a84      	ldr	r2, [pc, #528]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 8005fc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	e01d      	b.n	800600c <HAL_RCC_OscConfig+0xb0>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005fd8:	d10c      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x98>
 8005fda:	4b7f      	ldr	r3, [pc, #508]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a7e      	ldr	r2, [pc, #504]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 8005fe0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005fe4:	6013      	str	r3, [r2, #0]
 8005fe6:	4b7c      	ldr	r3, [pc, #496]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a7b      	ldr	r2, [pc, #492]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 8005fec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ff0:	6013      	str	r3, [r2, #0]
 8005ff2:	e00b      	b.n	800600c <HAL_RCC_OscConfig+0xb0>
 8005ff4:	4b78      	ldr	r3, [pc, #480]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a77      	ldr	r2, [pc, #476]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 8005ffa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	4b75      	ldr	r3, [pc, #468]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a74      	ldr	r2, [pc, #464]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 8006006:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800600a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d013      	beq.n	800603c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006014:	f7fd fab4 	bl	8003580 <HAL_GetTick>
 8006018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800601a:	e008      	b.n	800602e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800601c:	f7fd fab0 	bl	8003580 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b64      	cmp	r3, #100	@ 0x64
 8006028:	d901      	bls.n	800602e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e29e      	b.n	800656c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800602e:	4b6a      	ldr	r3, [pc, #424]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d0f0      	beq.n	800601c <HAL_RCC_OscConfig+0xc0>
 800603a:	e014      	b.n	8006066 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800603c:	f7fd faa0 	bl	8003580 <HAL_GetTick>
 8006040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006042:	e008      	b.n	8006056 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006044:	f7fd fa9c 	bl	8003580 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	2b64      	cmp	r3, #100	@ 0x64
 8006050:	d901      	bls.n	8006056 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e28a      	b.n	800656c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006056:	4b60      	ldr	r3, [pc, #384]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1f0      	bne.n	8006044 <HAL_RCC_OscConfig+0xe8>
 8006062:	e000      	b.n	8006066 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b00      	cmp	r3, #0
 8006070:	d075      	beq.n	800615e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006072:	4b59      	ldr	r3, [pc, #356]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f003 030c 	and.w	r3, r3, #12
 800607a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800607c:	4b56      	ldr	r3, [pc, #344]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	f003 0303 	and.w	r3, r3, #3
 8006084:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	2b0c      	cmp	r3, #12
 800608a:	d102      	bne.n	8006092 <HAL_RCC_OscConfig+0x136>
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	2b02      	cmp	r3, #2
 8006090:	d002      	beq.n	8006098 <HAL_RCC_OscConfig+0x13c>
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	2b04      	cmp	r3, #4
 8006096:	d11f      	bne.n	80060d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006098:	4b4f      	ldr	r3, [pc, #316]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d005      	beq.n	80060b0 <HAL_RCC_OscConfig+0x154>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e25d      	b.n	800656c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060b0:	4b49      	ldr	r3, [pc, #292]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	061b      	lsls	r3, r3, #24
 80060be:	4946      	ldr	r1, [pc, #280]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80060c4:	4b45      	ldr	r3, [pc, #276]	@ (80061dc <HAL_RCC_OscConfig+0x280>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7fd fa0d 	bl	80034e8 <HAL_InitTick>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d043      	beq.n	800615c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e249      	b.n	800656c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d023      	beq.n	8006128 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060e0:	4b3d      	ldr	r3, [pc, #244]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a3c      	ldr	r2, [pc, #240]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 80060e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ec:	f7fd fa48 	bl	8003580 <HAL_GetTick>
 80060f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060f2:	e008      	b.n	8006106 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060f4:	f7fd fa44 	bl	8003580 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d901      	bls.n	8006106 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e232      	b.n	800656c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006106:	4b34      	ldr	r3, [pc, #208]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800610e:	2b00      	cmp	r3, #0
 8006110:	d0f0      	beq.n	80060f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006112:	4b31      	ldr	r3, [pc, #196]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	061b      	lsls	r3, r3, #24
 8006120:	492d      	ldr	r1, [pc, #180]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 8006122:	4313      	orrs	r3, r2
 8006124:	604b      	str	r3, [r1, #4]
 8006126:	e01a      	b.n	800615e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006128:	4b2b      	ldr	r3, [pc, #172]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a2a      	ldr	r2, [pc, #168]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 800612e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006134:	f7fd fa24 	bl	8003580 <HAL_GetTick>
 8006138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800613a:	e008      	b.n	800614e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800613c:	f7fd fa20 	bl	8003580 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	2b02      	cmp	r3, #2
 8006148:	d901      	bls.n	800614e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e20e      	b.n	800656c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800614e:	4b22      	ldr	r3, [pc, #136]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1f0      	bne.n	800613c <HAL_RCC_OscConfig+0x1e0>
 800615a:	e000      	b.n	800615e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800615c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0308 	and.w	r3, r3, #8
 8006166:	2b00      	cmp	r3, #0
 8006168:	d041      	beq.n	80061ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d01c      	beq.n	80061ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006172:	4b19      	ldr	r3, [pc, #100]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 8006174:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006178:	4a17      	ldr	r2, [pc, #92]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 800617a:	f043 0301 	orr.w	r3, r3, #1
 800617e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006182:	f7fd f9fd 	bl	8003580 <HAL_GetTick>
 8006186:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006188:	e008      	b.n	800619c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800618a:	f7fd f9f9 	bl	8003580 <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	2b02      	cmp	r3, #2
 8006196:	d901      	bls.n	800619c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e1e7      	b.n	800656c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800619c:	4b0e      	ldr	r3, [pc, #56]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 800619e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d0ef      	beq.n	800618a <HAL_RCC_OscConfig+0x22e>
 80061aa:	e020      	b.n	80061ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061ac:	4b0a      	ldr	r3, [pc, #40]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 80061ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061b2:	4a09      	ldr	r2, [pc, #36]	@ (80061d8 <HAL_RCC_OscConfig+0x27c>)
 80061b4:	f023 0301 	bic.w	r3, r3, #1
 80061b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061bc:	f7fd f9e0 	bl	8003580 <HAL_GetTick>
 80061c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80061c2:	e00d      	b.n	80061e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061c4:	f7fd f9dc 	bl	8003580 <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d906      	bls.n	80061e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e1ca      	b.n	800656c <HAL_RCC_OscConfig+0x610>
 80061d6:	bf00      	nop
 80061d8:	40021000 	.word	0x40021000
 80061dc:	20000050 	.word	0x20000050
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80061e0:	4b8c      	ldr	r3, [pc, #560]	@ (8006414 <HAL_RCC_OscConfig+0x4b8>)
 80061e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1ea      	bne.n	80061c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0304 	and.w	r3, r3, #4
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f000 80a6 	beq.w	8006348 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061fc:	2300      	movs	r3, #0
 80061fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006200:	4b84      	ldr	r3, [pc, #528]	@ (8006414 <HAL_RCC_OscConfig+0x4b8>)
 8006202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006204:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <HAL_RCC_OscConfig+0x2b4>
 800620c:	2301      	movs	r3, #1
 800620e:	e000      	b.n	8006212 <HAL_RCC_OscConfig+0x2b6>
 8006210:	2300      	movs	r3, #0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00d      	beq.n	8006232 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006216:	4b7f      	ldr	r3, [pc, #508]	@ (8006414 <HAL_RCC_OscConfig+0x4b8>)
 8006218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800621a:	4a7e      	ldr	r2, [pc, #504]	@ (8006414 <HAL_RCC_OscConfig+0x4b8>)
 800621c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006220:	6593      	str	r3, [r2, #88]	@ 0x58
 8006222:	4b7c      	ldr	r3, [pc, #496]	@ (8006414 <HAL_RCC_OscConfig+0x4b8>)
 8006224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800622e:	2301      	movs	r3, #1
 8006230:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006232:	4b79      	ldr	r3, [pc, #484]	@ (8006418 <HAL_RCC_OscConfig+0x4bc>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800623a:	2b00      	cmp	r3, #0
 800623c:	d118      	bne.n	8006270 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800623e:	4b76      	ldr	r3, [pc, #472]	@ (8006418 <HAL_RCC_OscConfig+0x4bc>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a75      	ldr	r2, [pc, #468]	@ (8006418 <HAL_RCC_OscConfig+0x4bc>)
 8006244:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800624a:	f7fd f999 	bl	8003580 <HAL_GetTick>
 800624e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006250:	e008      	b.n	8006264 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006252:	f7fd f995 	bl	8003580 <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	2b02      	cmp	r3, #2
 800625e:	d901      	bls.n	8006264 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	e183      	b.n	800656c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006264:	4b6c      	ldr	r3, [pc, #432]	@ (8006418 <HAL_RCC_OscConfig+0x4bc>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800626c:	2b00      	cmp	r3, #0
 800626e:	d0f0      	beq.n	8006252 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d108      	bne.n	800628a <HAL_RCC_OscConfig+0x32e>
 8006278:	4b66      	ldr	r3, [pc, #408]	@ (8006414 <HAL_RCC_OscConfig+0x4b8>)
 800627a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800627e:	4a65      	ldr	r2, [pc, #404]	@ (8006414 <HAL_RCC_OscConfig+0x4b8>)
 8006280:	f043 0301 	orr.w	r3, r3, #1
 8006284:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006288:	e024      	b.n	80062d4 <HAL_RCC_OscConfig+0x378>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	2b05      	cmp	r3, #5
 8006290:	d110      	bne.n	80062b4 <HAL_RCC_OscConfig+0x358>
 8006292:	4b60      	ldr	r3, [pc, #384]	@ (8006414 <HAL_RCC_OscConfig+0x4b8>)
 8006294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006298:	4a5e      	ldr	r2, [pc, #376]	@ (8006414 <HAL_RCC_OscConfig+0x4b8>)
 800629a:	f043 0304 	orr.w	r3, r3, #4
 800629e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80062a2:	4b5c      	ldr	r3, [pc, #368]	@ (8006414 <HAL_RCC_OscConfig+0x4b8>)
 80062a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062a8:	4a5a      	ldr	r2, [pc, #360]	@ (8006414 <HAL_RCC_OscConfig+0x4b8>)
 80062aa:	f043 0301 	orr.w	r3, r3, #1
 80062ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80062b2:	e00f      	b.n	80062d4 <HAL_RCC_OscConfig+0x378>
 80062b4:	4b57      	ldr	r3, [pc, #348]	@ (8006414 <HAL_RCC_OscConfig+0x4b8>)
 80062b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ba:	4a56      	ldr	r2, [pc, #344]	@ (8006414 <HAL_RCC_OscConfig+0x4b8>)
 80062bc:	f023 0301 	bic.w	r3, r3, #1
 80062c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80062c4:	4b53      	ldr	r3, [pc, #332]	@ (8006414 <HAL_RCC_OscConfig+0x4b8>)
 80062c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ca:	4a52      	ldr	r2, [pc, #328]	@ (8006414 <HAL_RCC_OscConfig+0x4b8>)
 80062cc:	f023 0304 	bic.w	r3, r3, #4
 80062d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d016      	beq.n	800630a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062dc:	f7fd f950 	bl	8003580 <HAL_GetTick>
 80062e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062e2:	e00a      	b.n	80062fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062e4:	f7fd f94c 	bl	8003580 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d901      	bls.n	80062fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e138      	b.n	800656c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062fa:	4b46      	ldr	r3, [pc, #280]	@ (8006414 <HAL_RCC_OscConfig+0x4b8>)
 80062fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006300:	f003 0302 	and.w	r3, r3, #2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d0ed      	beq.n	80062e4 <HAL_RCC_OscConfig+0x388>
 8006308:	e015      	b.n	8006336 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800630a:	f7fd f939 	bl	8003580 <HAL_GetTick>
 800630e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006310:	e00a      	b.n	8006328 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006312:	f7fd f935 	bl	8003580 <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006320:	4293      	cmp	r3, r2
 8006322:	d901      	bls.n	8006328 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e121      	b.n	800656c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006328:	4b3a      	ldr	r3, [pc, #232]	@ (8006414 <HAL_RCC_OscConfig+0x4b8>)
 800632a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800632e:	f003 0302 	and.w	r3, r3, #2
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1ed      	bne.n	8006312 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006336:	7ffb      	ldrb	r3, [r7, #31]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d105      	bne.n	8006348 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800633c:	4b35      	ldr	r3, [pc, #212]	@ (8006414 <HAL_RCC_OscConfig+0x4b8>)
 800633e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006340:	4a34      	ldr	r2, [pc, #208]	@ (8006414 <HAL_RCC_OscConfig+0x4b8>)
 8006342:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006346:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0320 	and.w	r3, r3, #32
 8006350:	2b00      	cmp	r3, #0
 8006352:	d03c      	beq.n	80063ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d01c      	beq.n	8006396 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800635c:	4b2d      	ldr	r3, [pc, #180]	@ (8006414 <HAL_RCC_OscConfig+0x4b8>)
 800635e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006362:	4a2c      	ldr	r2, [pc, #176]	@ (8006414 <HAL_RCC_OscConfig+0x4b8>)
 8006364:	f043 0301 	orr.w	r3, r3, #1
 8006368:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800636c:	f7fd f908 	bl	8003580 <HAL_GetTick>
 8006370:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006372:	e008      	b.n	8006386 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006374:	f7fd f904 	bl	8003580 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b02      	cmp	r3, #2
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e0f2      	b.n	800656c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006386:	4b23      	ldr	r3, [pc, #140]	@ (8006414 <HAL_RCC_OscConfig+0x4b8>)
 8006388:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800638c:	f003 0302 	and.w	r3, r3, #2
 8006390:	2b00      	cmp	r3, #0
 8006392:	d0ef      	beq.n	8006374 <HAL_RCC_OscConfig+0x418>
 8006394:	e01b      	b.n	80063ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006396:	4b1f      	ldr	r3, [pc, #124]	@ (8006414 <HAL_RCC_OscConfig+0x4b8>)
 8006398:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800639c:	4a1d      	ldr	r2, [pc, #116]	@ (8006414 <HAL_RCC_OscConfig+0x4b8>)
 800639e:	f023 0301 	bic.w	r3, r3, #1
 80063a2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063a6:	f7fd f8eb 	bl	8003580 <HAL_GetTick>
 80063aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80063ac:	e008      	b.n	80063c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063ae:	f7fd f8e7 	bl	8003580 <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d901      	bls.n	80063c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e0d5      	b.n	800656c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80063c0:	4b14      	ldr	r3, [pc, #80]	@ (8006414 <HAL_RCC_OscConfig+0x4b8>)
 80063c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1ef      	bne.n	80063ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f000 80c9 	beq.w	800656a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063d8:	4b0e      	ldr	r3, [pc, #56]	@ (8006414 <HAL_RCC_OscConfig+0x4b8>)
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f003 030c 	and.w	r3, r3, #12
 80063e0:	2b0c      	cmp	r3, #12
 80063e2:	f000 8083 	beq.w	80064ec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d15e      	bne.n	80064ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063ee:	4b09      	ldr	r3, [pc, #36]	@ (8006414 <HAL_RCC_OscConfig+0x4b8>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a08      	ldr	r2, [pc, #32]	@ (8006414 <HAL_RCC_OscConfig+0x4b8>)
 80063f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063fa:	f7fd f8c1 	bl	8003580 <HAL_GetTick>
 80063fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006400:	e00c      	b.n	800641c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006402:	f7fd f8bd 	bl	8003580 <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	2b02      	cmp	r3, #2
 800640e:	d905      	bls.n	800641c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e0ab      	b.n	800656c <HAL_RCC_OscConfig+0x610>
 8006414:	40021000 	.word	0x40021000
 8006418:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800641c:	4b55      	ldr	r3, [pc, #340]	@ (8006574 <HAL_RCC_OscConfig+0x618>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1ec      	bne.n	8006402 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006428:	4b52      	ldr	r3, [pc, #328]	@ (8006574 <HAL_RCC_OscConfig+0x618>)
 800642a:	68da      	ldr	r2, [r3, #12]
 800642c:	4b52      	ldr	r3, [pc, #328]	@ (8006578 <HAL_RCC_OscConfig+0x61c>)
 800642e:	4013      	ands	r3, r2
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	6a11      	ldr	r1, [r2, #32]
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006438:	3a01      	subs	r2, #1
 800643a:	0112      	lsls	r2, r2, #4
 800643c:	4311      	orrs	r1, r2
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006442:	0212      	lsls	r2, r2, #8
 8006444:	4311      	orrs	r1, r2
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800644a:	0852      	lsrs	r2, r2, #1
 800644c:	3a01      	subs	r2, #1
 800644e:	0552      	lsls	r2, r2, #21
 8006450:	4311      	orrs	r1, r2
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006456:	0852      	lsrs	r2, r2, #1
 8006458:	3a01      	subs	r2, #1
 800645a:	0652      	lsls	r2, r2, #25
 800645c:	4311      	orrs	r1, r2
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006462:	06d2      	lsls	r2, r2, #27
 8006464:	430a      	orrs	r2, r1
 8006466:	4943      	ldr	r1, [pc, #268]	@ (8006574 <HAL_RCC_OscConfig+0x618>)
 8006468:	4313      	orrs	r3, r2
 800646a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800646c:	4b41      	ldr	r3, [pc, #260]	@ (8006574 <HAL_RCC_OscConfig+0x618>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a40      	ldr	r2, [pc, #256]	@ (8006574 <HAL_RCC_OscConfig+0x618>)
 8006472:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006476:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006478:	4b3e      	ldr	r3, [pc, #248]	@ (8006574 <HAL_RCC_OscConfig+0x618>)
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	4a3d      	ldr	r2, [pc, #244]	@ (8006574 <HAL_RCC_OscConfig+0x618>)
 800647e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006482:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006484:	f7fd f87c 	bl	8003580 <HAL_GetTick>
 8006488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800648a:	e008      	b.n	800649e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800648c:	f7fd f878 	bl	8003580 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	2b02      	cmp	r3, #2
 8006498:	d901      	bls.n	800649e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e066      	b.n	800656c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800649e:	4b35      	ldr	r3, [pc, #212]	@ (8006574 <HAL_RCC_OscConfig+0x618>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d0f0      	beq.n	800648c <HAL_RCC_OscConfig+0x530>
 80064aa:	e05e      	b.n	800656a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064ac:	4b31      	ldr	r3, [pc, #196]	@ (8006574 <HAL_RCC_OscConfig+0x618>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a30      	ldr	r2, [pc, #192]	@ (8006574 <HAL_RCC_OscConfig+0x618>)
 80064b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b8:	f7fd f862 	bl	8003580 <HAL_GetTick>
 80064bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064be:	e008      	b.n	80064d2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064c0:	f7fd f85e 	bl	8003580 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d901      	bls.n	80064d2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e04c      	b.n	800656c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064d2:	4b28      	ldr	r3, [pc, #160]	@ (8006574 <HAL_RCC_OscConfig+0x618>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1f0      	bne.n	80064c0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80064de:	4b25      	ldr	r3, [pc, #148]	@ (8006574 <HAL_RCC_OscConfig+0x618>)
 80064e0:	68da      	ldr	r2, [r3, #12]
 80064e2:	4924      	ldr	r1, [pc, #144]	@ (8006574 <HAL_RCC_OscConfig+0x618>)
 80064e4:	4b25      	ldr	r3, [pc, #148]	@ (800657c <HAL_RCC_OscConfig+0x620>)
 80064e6:	4013      	ands	r3, r2
 80064e8:	60cb      	str	r3, [r1, #12]
 80064ea:	e03e      	b.n	800656a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	69db      	ldr	r3, [r3, #28]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d101      	bne.n	80064f8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e039      	b.n	800656c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80064f8:	4b1e      	ldr	r3, [pc, #120]	@ (8006574 <HAL_RCC_OscConfig+0x618>)
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f003 0203 	and.w	r2, r3, #3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	429a      	cmp	r2, r3
 800650a:	d12c      	bne.n	8006566 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006516:	3b01      	subs	r3, #1
 8006518:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800651a:	429a      	cmp	r2, r3
 800651c:	d123      	bne.n	8006566 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006528:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800652a:	429a      	cmp	r2, r3
 800652c:	d11b      	bne.n	8006566 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006538:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800653a:	429a      	cmp	r2, r3
 800653c:	d113      	bne.n	8006566 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006548:	085b      	lsrs	r3, r3, #1
 800654a:	3b01      	subs	r3, #1
 800654c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800654e:	429a      	cmp	r2, r3
 8006550:	d109      	bne.n	8006566 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800655c:	085b      	lsrs	r3, r3, #1
 800655e:	3b01      	subs	r3, #1
 8006560:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006562:	429a      	cmp	r2, r3
 8006564:	d001      	beq.n	800656a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e000      	b.n	800656c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3720      	adds	r7, #32
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	40021000 	.word	0x40021000
 8006578:	019f800c 	.word	0x019f800c
 800657c:	feeefffc 	.word	0xfeeefffc

08006580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800658a:	2300      	movs	r3, #0
 800658c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e11e      	b.n	80067d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006598:	4b91      	ldr	r3, [pc, #580]	@ (80067e0 <HAL_RCC_ClockConfig+0x260>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 030f 	and.w	r3, r3, #15
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d910      	bls.n	80065c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065a6:	4b8e      	ldr	r3, [pc, #568]	@ (80067e0 <HAL_RCC_ClockConfig+0x260>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f023 020f 	bic.w	r2, r3, #15
 80065ae:	498c      	ldr	r1, [pc, #560]	@ (80067e0 <HAL_RCC_ClockConfig+0x260>)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065b6:	4b8a      	ldr	r3, [pc, #552]	@ (80067e0 <HAL_RCC_ClockConfig+0x260>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 030f 	and.w	r3, r3, #15
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d001      	beq.n	80065c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e106      	b.n	80067d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0301 	and.w	r3, r3, #1
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d073      	beq.n	80066bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	2b03      	cmp	r3, #3
 80065da:	d129      	bne.n	8006630 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065dc:	4b81      	ldr	r3, [pc, #516]	@ (80067e4 <HAL_RCC_ClockConfig+0x264>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d101      	bne.n	80065ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e0f4      	b.n	80067d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80065ec:	f000 f99e 	bl	800692c <RCC_GetSysClockFreqFromPLLSource>
 80065f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	4a7c      	ldr	r2, [pc, #496]	@ (80067e8 <HAL_RCC_ClockConfig+0x268>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d93f      	bls.n	800667a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80065fa:	4b7a      	ldr	r3, [pc, #488]	@ (80067e4 <HAL_RCC_ClockConfig+0x264>)
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d009      	beq.n	800661a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800660e:	2b00      	cmp	r3, #0
 8006610:	d033      	beq.n	800667a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006616:	2b00      	cmp	r3, #0
 8006618:	d12f      	bne.n	800667a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800661a:	4b72      	ldr	r3, [pc, #456]	@ (80067e4 <HAL_RCC_ClockConfig+0x264>)
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006622:	4a70      	ldr	r2, [pc, #448]	@ (80067e4 <HAL_RCC_ClockConfig+0x264>)
 8006624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006628:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800662a:	2380      	movs	r3, #128	@ 0x80
 800662c:	617b      	str	r3, [r7, #20]
 800662e:	e024      	b.n	800667a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	2b02      	cmp	r3, #2
 8006636:	d107      	bne.n	8006648 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006638:	4b6a      	ldr	r3, [pc, #424]	@ (80067e4 <HAL_RCC_ClockConfig+0x264>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d109      	bne.n	8006658 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e0c6      	b.n	80067d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006648:	4b66      	ldr	r3, [pc, #408]	@ (80067e4 <HAL_RCC_ClockConfig+0x264>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006650:	2b00      	cmp	r3, #0
 8006652:	d101      	bne.n	8006658 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e0be      	b.n	80067d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006658:	f000 f8ce 	bl	80067f8 <HAL_RCC_GetSysClockFreq>
 800665c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	4a61      	ldr	r2, [pc, #388]	@ (80067e8 <HAL_RCC_ClockConfig+0x268>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d909      	bls.n	800667a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006666:	4b5f      	ldr	r3, [pc, #380]	@ (80067e4 <HAL_RCC_ClockConfig+0x264>)
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800666e:	4a5d      	ldr	r2, [pc, #372]	@ (80067e4 <HAL_RCC_ClockConfig+0x264>)
 8006670:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006674:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006676:	2380      	movs	r3, #128	@ 0x80
 8006678:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800667a:	4b5a      	ldr	r3, [pc, #360]	@ (80067e4 <HAL_RCC_ClockConfig+0x264>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f023 0203 	bic.w	r2, r3, #3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	4957      	ldr	r1, [pc, #348]	@ (80067e4 <HAL_RCC_ClockConfig+0x264>)
 8006688:	4313      	orrs	r3, r2
 800668a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800668c:	f7fc ff78 	bl	8003580 <HAL_GetTick>
 8006690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006692:	e00a      	b.n	80066aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006694:	f7fc ff74 	bl	8003580 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e095      	b.n	80067d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066aa:	4b4e      	ldr	r3, [pc, #312]	@ (80067e4 <HAL_RCC_ClockConfig+0x264>)
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f003 020c 	and.w	r2, r3, #12
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d1eb      	bne.n	8006694 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0302 	and.w	r3, r3, #2
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d023      	beq.n	8006710 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d005      	beq.n	80066e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066d4:	4b43      	ldr	r3, [pc, #268]	@ (80067e4 <HAL_RCC_ClockConfig+0x264>)
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	4a42      	ldr	r2, [pc, #264]	@ (80067e4 <HAL_RCC_ClockConfig+0x264>)
 80066da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80066de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0308 	and.w	r3, r3, #8
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d007      	beq.n	80066fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80066ec:	4b3d      	ldr	r3, [pc, #244]	@ (80067e4 <HAL_RCC_ClockConfig+0x264>)
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80066f4:	4a3b      	ldr	r2, [pc, #236]	@ (80067e4 <HAL_RCC_ClockConfig+0x264>)
 80066f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80066fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066fc:	4b39      	ldr	r3, [pc, #228]	@ (80067e4 <HAL_RCC_ClockConfig+0x264>)
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	4936      	ldr	r1, [pc, #216]	@ (80067e4 <HAL_RCC_ClockConfig+0x264>)
 800670a:	4313      	orrs	r3, r2
 800670c:	608b      	str	r3, [r1, #8]
 800670e:	e008      	b.n	8006722 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	2b80      	cmp	r3, #128	@ 0x80
 8006714:	d105      	bne.n	8006722 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006716:	4b33      	ldr	r3, [pc, #204]	@ (80067e4 <HAL_RCC_ClockConfig+0x264>)
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	4a32      	ldr	r2, [pc, #200]	@ (80067e4 <HAL_RCC_ClockConfig+0x264>)
 800671c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006720:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006722:	4b2f      	ldr	r3, [pc, #188]	@ (80067e0 <HAL_RCC_ClockConfig+0x260>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 030f 	and.w	r3, r3, #15
 800672a:	683a      	ldr	r2, [r7, #0]
 800672c:	429a      	cmp	r2, r3
 800672e:	d21d      	bcs.n	800676c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006730:	4b2b      	ldr	r3, [pc, #172]	@ (80067e0 <HAL_RCC_ClockConfig+0x260>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f023 020f 	bic.w	r2, r3, #15
 8006738:	4929      	ldr	r1, [pc, #164]	@ (80067e0 <HAL_RCC_ClockConfig+0x260>)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	4313      	orrs	r3, r2
 800673e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006740:	f7fc ff1e 	bl	8003580 <HAL_GetTick>
 8006744:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006746:	e00a      	b.n	800675e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006748:	f7fc ff1a 	bl	8003580 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006756:	4293      	cmp	r3, r2
 8006758:	d901      	bls.n	800675e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e03b      	b.n	80067d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800675e:	4b20      	ldr	r3, [pc, #128]	@ (80067e0 <HAL_RCC_ClockConfig+0x260>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 030f 	and.w	r3, r3, #15
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	429a      	cmp	r2, r3
 800676a:	d1ed      	bne.n	8006748 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0304 	and.w	r3, r3, #4
 8006774:	2b00      	cmp	r3, #0
 8006776:	d008      	beq.n	800678a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006778:	4b1a      	ldr	r3, [pc, #104]	@ (80067e4 <HAL_RCC_ClockConfig+0x264>)
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	4917      	ldr	r1, [pc, #92]	@ (80067e4 <HAL_RCC_ClockConfig+0x264>)
 8006786:	4313      	orrs	r3, r2
 8006788:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0308 	and.w	r3, r3, #8
 8006792:	2b00      	cmp	r3, #0
 8006794:	d009      	beq.n	80067aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006796:	4b13      	ldr	r3, [pc, #76]	@ (80067e4 <HAL_RCC_ClockConfig+0x264>)
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	490f      	ldr	r1, [pc, #60]	@ (80067e4 <HAL_RCC_ClockConfig+0x264>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80067aa:	f000 f825 	bl	80067f8 <HAL_RCC_GetSysClockFreq>
 80067ae:	4602      	mov	r2, r0
 80067b0:	4b0c      	ldr	r3, [pc, #48]	@ (80067e4 <HAL_RCC_ClockConfig+0x264>)
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	091b      	lsrs	r3, r3, #4
 80067b6:	f003 030f 	and.w	r3, r3, #15
 80067ba:	490c      	ldr	r1, [pc, #48]	@ (80067ec <HAL_RCC_ClockConfig+0x26c>)
 80067bc:	5ccb      	ldrb	r3, [r1, r3]
 80067be:	f003 031f 	and.w	r3, r3, #31
 80067c2:	fa22 f303 	lsr.w	r3, r2, r3
 80067c6:	4a0a      	ldr	r2, [pc, #40]	@ (80067f0 <HAL_RCC_ClockConfig+0x270>)
 80067c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80067ca:	4b0a      	ldr	r3, [pc, #40]	@ (80067f4 <HAL_RCC_ClockConfig+0x274>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7fc fe8a 	bl	80034e8 <HAL_InitTick>
 80067d4:	4603      	mov	r3, r0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	40022000 	.word	0x40022000
 80067e4:	40021000 	.word	0x40021000
 80067e8:	04c4b400 	.word	0x04c4b400
 80067ec:	0800adf4 	.word	0x0800adf4
 80067f0:	2000004c 	.word	0x2000004c
 80067f4:	20000050 	.word	0x20000050

080067f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80067fe:	4b2c      	ldr	r3, [pc, #176]	@ (80068b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f003 030c 	and.w	r3, r3, #12
 8006806:	2b04      	cmp	r3, #4
 8006808:	d102      	bne.n	8006810 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800680a:	4b2a      	ldr	r3, [pc, #168]	@ (80068b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800680c:	613b      	str	r3, [r7, #16]
 800680e:	e047      	b.n	80068a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006810:	4b27      	ldr	r3, [pc, #156]	@ (80068b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f003 030c 	and.w	r3, r3, #12
 8006818:	2b08      	cmp	r3, #8
 800681a:	d102      	bne.n	8006822 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800681c:	4b26      	ldr	r3, [pc, #152]	@ (80068b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800681e:	613b      	str	r3, [r7, #16]
 8006820:	e03e      	b.n	80068a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006822:	4b23      	ldr	r3, [pc, #140]	@ (80068b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f003 030c 	and.w	r3, r3, #12
 800682a:	2b0c      	cmp	r3, #12
 800682c:	d136      	bne.n	800689c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800682e:	4b20      	ldr	r3, [pc, #128]	@ (80068b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	f003 0303 	and.w	r3, r3, #3
 8006836:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006838:	4b1d      	ldr	r3, [pc, #116]	@ (80068b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	091b      	lsrs	r3, r3, #4
 800683e:	f003 030f 	and.w	r3, r3, #15
 8006842:	3301      	adds	r3, #1
 8006844:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2b03      	cmp	r3, #3
 800684a:	d10c      	bne.n	8006866 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800684c:	4a1a      	ldr	r2, [pc, #104]	@ (80068b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	fbb2 f3f3 	udiv	r3, r2, r3
 8006854:	4a16      	ldr	r2, [pc, #88]	@ (80068b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006856:	68d2      	ldr	r2, [r2, #12]
 8006858:	0a12      	lsrs	r2, r2, #8
 800685a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800685e:	fb02 f303 	mul.w	r3, r2, r3
 8006862:	617b      	str	r3, [r7, #20]
      break;
 8006864:	e00c      	b.n	8006880 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006866:	4a13      	ldr	r2, [pc, #76]	@ (80068b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	fbb2 f3f3 	udiv	r3, r2, r3
 800686e:	4a10      	ldr	r2, [pc, #64]	@ (80068b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006870:	68d2      	ldr	r2, [r2, #12]
 8006872:	0a12      	lsrs	r2, r2, #8
 8006874:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006878:	fb02 f303 	mul.w	r3, r2, r3
 800687c:	617b      	str	r3, [r7, #20]
      break;
 800687e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006880:	4b0b      	ldr	r3, [pc, #44]	@ (80068b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	0e5b      	lsrs	r3, r3, #25
 8006886:	f003 0303 	and.w	r3, r3, #3
 800688a:	3301      	adds	r3, #1
 800688c:	005b      	lsls	r3, r3, #1
 800688e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006890:	697a      	ldr	r2, [r7, #20]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	fbb2 f3f3 	udiv	r3, r2, r3
 8006898:	613b      	str	r3, [r7, #16]
 800689a:	e001      	b.n	80068a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800689c:	2300      	movs	r3, #0
 800689e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80068a0:	693b      	ldr	r3, [r7, #16]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	371c      	adds	r7, #28
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	40021000 	.word	0x40021000
 80068b4:	00f42400 	.word	0x00f42400
 80068b8:	016e3600 	.word	0x016e3600

080068bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068bc:	b480      	push	{r7}
 80068be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068c0:	4b03      	ldr	r3, [pc, #12]	@ (80068d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80068c2:	681b      	ldr	r3, [r3, #0]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	2000004c 	.word	0x2000004c

080068d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80068d8:	f7ff fff0 	bl	80068bc <HAL_RCC_GetHCLKFreq>
 80068dc:	4602      	mov	r2, r0
 80068de:	4b06      	ldr	r3, [pc, #24]	@ (80068f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	0a1b      	lsrs	r3, r3, #8
 80068e4:	f003 0307 	and.w	r3, r3, #7
 80068e8:	4904      	ldr	r1, [pc, #16]	@ (80068fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80068ea:	5ccb      	ldrb	r3, [r1, r3]
 80068ec:	f003 031f 	and.w	r3, r3, #31
 80068f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	40021000 	.word	0x40021000
 80068fc:	0800ae04 	.word	0x0800ae04

08006900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006904:	f7ff ffda 	bl	80068bc <HAL_RCC_GetHCLKFreq>
 8006908:	4602      	mov	r2, r0
 800690a:	4b06      	ldr	r3, [pc, #24]	@ (8006924 <HAL_RCC_GetPCLK2Freq+0x24>)
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	0adb      	lsrs	r3, r3, #11
 8006910:	f003 0307 	and.w	r3, r3, #7
 8006914:	4904      	ldr	r1, [pc, #16]	@ (8006928 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006916:	5ccb      	ldrb	r3, [r1, r3]
 8006918:	f003 031f 	and.w	r3, r3, #31
 800691c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006920:	4618      	mov	r0, r3
 8006922:	bd80      	pop	{r7, pc}
 8006924:	40021000 	.word	0x40021000
 8006928:	0800ae04 	.word	0x0800ae04

0800692c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006932:	4b1e      	ldr	r3, [pc, #120]	@ (80069ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	f003 0303 	and.w	r3, r3, #3
 800693a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800693c:	4b1b      	ldr	r3, [pc, #108]	@ (80069ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	091b      	lsrs	r3, r3, #4
 8006942:	f003 030f 	and.w	r3, r3, #15
 8006946:	3301      	adds	r3, #1
 8006948:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	2b03      	cmp	r3, #3
 800694e:	d10c      	bne.n	800696a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006950:	4a17      	ldr	r2, [pc, #92]	@ (80069b0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	fbb2 f3f3 	udiv	r3, r2, r3
 8006958:	4a14      	ldr	r2, [pc, #80]	@ (80069ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800695a:	68d2      	ldr	r2, [r2, #12]
 800695c:	0a12      	lsrs	r2, r2, #8
 800695e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006962:	fb02 f303 	mul.w	r3, r2, r3
 8006966:	617b      	str	r3, [r7, #20]
    break;
 8006968:	e00c      	b.n	8006984 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800696a:	4a12      	ldr	r2, [pc, #72]	@ (80069b4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006972:	4a0e      	ldr	r2, [pc, #56]	@ (80069ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006974:	68d2      	ldr	r2, [r2, #12]
 8006976:	0a12      	lsrs	r2, r2, #8
 8006978:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800697c:	fb02 f303 	mul.w	r3, r2, r3
 8006980:	617b      	str	r3, [r7, #20]
    break;
 8006982:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006984:	4b09      	ldr	r3, [pc, #36]	@ (80069ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	0e5b      	lsrs	r3, r3, #25
 800698a:	f003 0303 	and.w	r3, r3, #3
 800698e:	3301      	adds	r3, #1
 8006990:	005b      	lsls	r3, r3, #1
 8006992:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	fbb2 f3f3 	udiv	r3, r2, r3
 800699c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800699e:	687b      	ldr	r3, [r7, #4]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	371c      	adds	r7, #28
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	40021000 	.word	0x40021000
 80069b0:	016e3600 	.word	0x016e3600
 80069b4:	00f42400 	.word	0x00f42400

080069b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80069c0:	2300      	movs	r3, #0
 80069c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80069c4:	2300      	movs	r3, #0
 80069c6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f000 8098 	beq.w	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069d6:	2300      	movs	r3, #0
 80069d8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069da:	4b43      	ldr	r3, [pc, #268]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10d      	bne.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069e6:	4b40      	ldr	r3, [pc, #256]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ea:	4a3f      	ldr	r2, [pc, #252]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80069f2:	4b3d      	ldr	r3, [pc, #244]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069fa:	60bb      	str	r3, [r7, #8]
 80069fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069fe:	2301      	movs	r3, #1
 8006a00:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a02:	4b3a      	ldr	r3, [pc, #232]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a39      	ldr	r2, [pc, #228]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a0e:	f7fc fdb7 	bl	8003580 <HAL_GetTick>
 8006a12:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a14:	e009      	b.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a16:	f7fc fdb3 	bl	8003580 <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d902      	bls.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	74fb      	strb	r3, [r7, #19]
        break;
 8006a28:	e005      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a2a:	4b30      	ldr	r3, [pc, #192]	@ (8006aec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d0ef      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006a36:	7cfb      	ldrb	r3, [r7, #19]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d159      	bne.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006a3c:	4b2a      	ldr	r3, [pc, #168]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a46:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d01e      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d019      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006a58:	4b23      	ldr	r3, [pc, #140]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a64:	4b20      	ldr	r3, [pc, #128]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a6a:	4a1f      	ldr	r2, [pc, #124]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a74:	4b1c      	ldr	r3, [pc, #112]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006a84:	4a18      	ldr	r2, [pc, #96]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f003 0301 	and.w	r3, r3, #1
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d016      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a96:	f7fc fd73 	bl	8003580 <HAL_GetTick>
 8006a9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a9c:	e00b      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a9e:	f7fc fd6f 	bl	8003580 <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d902      	bls.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	74fb      	strb	r3, [r7, #19]
            break;
 8006ab4:	e006      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006abc:	f003 0302 	and.w	r3, r3, #2
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d0ec      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006ac4:	7cfb      	ldrb	r3, [r7, #19]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10b      	bne.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006aca:	4b07      	ldr	r3, [pc, #28]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ad0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ad8:	4903      	ldr	r1, [pc, #12]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006ae0:	e008      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ae2:	7cfb      	ldrb	r3, [r7, #19]
 8006ae4:	74bb      	strb	r3, [r7, #18]
 8006ae6:	e005      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006ae8:	40021000 	.word	0x40021000
 8006aec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af0:	7cfb      	ldrb	r3, [r7, #19]
 8006af2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006af4:	7c7b      	ldrb	r3, [r7, #17]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d105      	bne.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006afa:	4ba7      	ldr	r3, [pc, #668]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006afe:	4aa6      	ldr	r2, [pc, #664]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b04:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00a      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b12:	4ba1      	ldr	r3, [pc, #644]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b18:	f023 0203 	bic.w	r2, r3, #3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	499d      	ldr	r1, [pc, #628]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b22:	4313      	orrs	r3, r2
 8006b24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00a      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b34:	4b98      	ldr	r3, [pc, #608]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b3a:	f023 020c 	bic.w	r2, r3, #12
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	4995      	ldr	r1, [pc, #596]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0304 	and.w	r3, r3, #4
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00a      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b56:	4b90      	ldr	r3, [pc, #576]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b5c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	498c      	ldr	r1, [pc, #560]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0308 	and.w	r3, r3, #8
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00a      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b78:	4b87      	ldr	r3, [pc, #540]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b7e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	4984      	ldr	r1, [pc, #528]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0310 	and.w	r3, r3, #16
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00a      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006b9a:	4b7f      	ldr	r3, [pc, #508]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ba0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	497b      	ldr	r1, [pc, #492]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0320 	and.w	r3, r3, #32
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00a      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006bbc:	4b76      	ldr	r3, [pc, #472]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bc2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	4973      	ldr	r1, [pc, #460]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00a      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006bde:	4b6e      	ldr	r3, [pc, #440]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006be4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	69db      	ldr	r3, [r3, #28]
 8006bec:	496a      	ldr	r1, [pc, #424]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00a      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c00:	4b65      	ldr	r3, [pc, #404]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c06:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	4962      	ldr	r1, [pc, #392]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00a      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c22:	4b5d      	ldr	r3, [pc, #372]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c28:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c30:	4959      	ldr	r1, [pc, #356]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00a      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c44:	4b54      	ldr	r3, [pc, #336]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c4a:	f023 0203 	bic.w	r2, r3, #3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c52:	4951      	ldr	r1, [pc, #324]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c54:	4313      	orrs	r3, r2
 8006c56:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00a      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c66:	4b4c      	ldr	r3, [pc, #304]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c6c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c74:	4948      	ldr	r1, [pc, #288]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c76:	4313      	orrs	r3, r2
 8006c78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d015      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c88:	4b43      	ldr	r3, [pc, #268]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c96:	4940      	ldr	r1, [pc, #256]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ca6:	d105      	bne.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ca8:	4b3b      	ldr	r3, [pc, #236]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	4a3a      	ldr	r2, [pc, #232]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cb2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d015      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006cc0:	4b35      	ldr	r3, [pc, #212]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cc6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cce:	4932      	ldr	r1, [pc, #200]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cde:	d105      	bne.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ce0:	4b2d      	ldr	r3, [pc, #180]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	4a2c      	ldr	r2, [pc, #176]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ce6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d015      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006cf8:	4b27      	ldr	r3, [pc, #156]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cfe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d06:	4924      	ldr	r1, [pc, #144]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d16:	d105      	bne.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d18:	4b1f      	ldr	r3, [pc, #124]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	4a1e      	ldr	r2, [pc, #120]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d22:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d015      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d30:	4b19      	ldr	r3, [pc, #100]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d36:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d3e:	4916      	ldr	r1, [pc, #88]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d4e:	d105      	bne.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d50:	4b11      	ldr	r3, [pc, #68]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	4a10      	ldr	r2, [pc, #64]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d5a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d019      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d68:	4b0b      	ldr	r3, [pc, #44]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d76:	4908      	ldr	r1, [pc, #32]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d86:	d109      	bne.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d88:	4b03      	ldr	r3, [pc, #12]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	4a02      	ldr	r2, [pc, #8]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d92:	60d3      	str	r3, [r2, #12]
 8006d94:	e002      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006d96:	bf00      	nop
 8006d98:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d015      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006da8:	4b29      	ldr	r3, [pc, #164]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006db6:	4926      	ldr	r1, [pc, #152]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006db8:	4313      	orrs	r3, r2
 8006dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006dc6:	d105      	bne.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006dc8:	4b21      	ldr	r3, [pc, #132]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	4a20      	ldr	r2, [pc, #128]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006dce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dd2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d015      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006de0:	4b1b      	ldr	r3, [pc, #108]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006de6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dee:	4918      	ldr	r1, [pc, #96]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dfe:	d105      	bne.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006e00:	4b13      	ldr	r3, [pc, #76]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	4a12      	ldr	r2, [pc, #72]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e0a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d015      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006e18:	4b0d      	ldr	r3, [pc, #52]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e26:	490a      	ldr	r1, [pc, #40]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e36:	d105      	bne.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e38:	4b05      	ldr	r3, [pc, #20]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	4a04      	ldr	r2, [pc, #16]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e42:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006e44:	7cbb      	ldrb	r3, [r7, #18]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3718      	adds	r7, #24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	40021000 	.word	0x40021000

08006e54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d101      	bne.n	8006e66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e054      	b.n	8006f10 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d111      	bne.n	8006e96 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f001 feec 	bl	8008c58 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d102      	bne.n	8006e8e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a23      	ldr	r2, [pc, #140]	@ (8006f18 <HAL_TIM_Base_Init+0xc4>)
 8006e8c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2202      	movs	r2, #2
 8006e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	4610      	mov	r0, r2
 8006eaa:	f001 fa35 	bl	8008318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	08002f29 	.word	0x08002f29

08006f1c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d001      	beq.n	8006f34 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e04c      	b.n	8006fce <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2202      	movs	r2, #2
 8006f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a26      	ldr	r2, [pc, #152]	@ (8006fdc <HAL_TIM_Base_Start+0xc0>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d022      	beq.n	8006f8c <HAL_TIM_Base_Start+0x70>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f4e:	d01d      	beq.n	8006f8c <HAL_TIM_Base_Start+0x70>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a22      	ldr	r2, [pc, #136]	@ (8006fe0 <HAL_TIM_Base_Start+0xc4>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d018      	beq.n	8006f8c <HAL_TIM_Base_Start+0x70>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a21      	ldr	r2, [pc, #132]	@ (8006fe4 <HAL_TIM_Base_Start+0xc8>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d013      	beq.n	8006f8c <HAL_TIM_Base_Start+0x70>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a1f      	ldr	r2, [pc, #124]	@ (8006fe8 <HAL_TIM_Base_Start+0xcc>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d00e      	beq.n	8006f8c <HAL_TIM_Base_Start+0x70>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a1e      	ldr	r2, [pc, #120]	@ (8006fec <HAL_TIM_Base_Start+0xd0>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d009      	beq.n	8006f8c <HAL_TIM_Base_Start+0x70>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a1c      	ldr	r2, [pc, #112]	@ (8006ff0 <HAL_TIM_Base_Start+0xd4>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d004      	beq.n	8006f8c <HAL_TIM_Base_Start+0x70>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a1b      	ldr	r2, [pc, #108]	@ (8006ff4 <HAL_TIM_Base_Start+0xd8>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d115      	bne.n	8006fb8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689a      	ldr	r2, [r3, #8]
 8006f92:	4b19      	ldr	r3, [pc, #100]	@ (8006ff8 <HAL_TIM_Base_Start+0xdc>)
 8006f94:	4013      	ands	r3, r2
 8006f96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2b06      	cmp	r3, #6
 8006f9c:	d015      	beq.n	8006fca <HAL_TIM_Base_Start+0xae>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fa4:	d011      	beq.n	8006fca <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f042 0201 	orr.w	r2, r2, #1
 8006fb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fb6:	e008      	b.n	8006fca <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f042 0201 	orr.w	r2, r2, #1
 8006fc6:	601a      	str	r2, [r3, #0]
 8006fc8:	e000      	b.n	8006fcc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3714      	adds	r7, #20
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	40012c00 	.word	0x40012c00
 8006fe0:	40000400 	.word	0x40000400
 8006fe4:	40000800 	.word	0x40000800
 8006fe8:	40000c00 	.word	0x40000c00
 8006fec:	40013400 	.word	0x40013400
 8006ff0:	40014000 	.word	0x40014000
 8006ff4:	40015000 	.word	0x40015000
 8006ff8:	00010007 	.word	0x00010007

08006ffc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b01      	cmp	r3, #1
 800700e:	d001      	beq.n	8007014 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e054      	b.n	80070be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2202      	movs	r2, #2
 8007018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68da      	ldr	r2, [r3, #12]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f042 0201 	orr.w	r2, r2, #1
 800702a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a26      	ldr	r2, [pc, #152]	@ (80070cc <HAL_TIM_Base_Start_IT+0xd0>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d022      	beq.n	800707c <HAL_TIM_Base_Start_IT+0x80>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800703e:	d01d      	beq.n	800707c <HAL_TIM_Base_Start_IT+0x80>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a22      	ldr	r2, [pc, #136]	@ (80070d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d018      	beq.n	800707c <HAL_TIM_Base_Start_IT+0x80>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a21      	ldr	r2, [pc, #132]	@ (80070d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d013      	beq.n	800707c <HAL_TIM_Base_Start_IT+0x80>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a1f      	ldr	r2, [pc, #124]	@ (80070d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d00e      	beq.n	800707c <HAL_TIM_Base_Start_IT+0x80>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a1e      	ldr	r2, [pc, #120]	@ (80070dc <HAL_TIM_Base_Start_IT+0xe0>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d009      	beq.n	800707c <HAL_TIM_Base_Start_IT+0x80>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a1c      	ldr	r2, [pc, #112]	@ (80070e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d004      	beq.n	800707c <HAL_TIM_Base_Start_IT+0x80>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a1b      	ldr	r2, [pc, #108]	@ (80070e4 <HAL_TIM_Base_Start_IT+0xe8>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d115      	bne.n	80070a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689a      	ldr	r2, [r3, #8]
 8007082:	4b19      	ldr	r3, [pc, #100]	@ (80070e8 <HAL_TIM_Base_Start_IT+0xec>)
 8007084:	4013      	ands	r3, r2
 8007086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2b06      	cmp	r3, #6
 800708c:	d015      	beq.n	80070ba <HAL_TIM_Base_Start_IT+0xbe>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007094:	d011      	beq.n	80070ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f042 0201 	orr.w	r2, r2, #1
 80070a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a6:	e008      	b.n	80070ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f042 0201 	orr.w	r2, r2, #1
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	e000      	b.n	80070bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	40012c00 	.word	0x40012c00
 80070d0:	40000400 	.word	0x40000400
 80070d4:	40000800 	.word	0x40000800
 80070d8:	40000c00 	.word	0x40000c00
 80070dc:	40013400 	.word	0x40013400
 80070e0:	40014000 	.word	0x40014000
 80070e4:	40015000 	.word	0x40015000
 80070e8:	00010007 	.word	0x00010007

080070ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d101      	bne.n	80070fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e054      	b.n	80071a8 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d111      	bne.n	800712e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f001 fda0 	bl	8008c58 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800711c:	2b00      	cmp	r3, #0
 800711e:	d102      	bne.n	8007126 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a23      	ldr	r2, [pc, #140]	@ (80071b0 <HAL_TIM_PWM_Init+0xc4>)
 8007124:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2202      	movs	r2, #2
 8007132:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	3304      	adds	r3, #4
 800713e:	4619      	mov	r1, r3
 8007140:	4610      	mov	r0, r2
 8007142:	f001 f8e9 	bl	8008318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2201      	movs	r2, #1
 800714a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2201      	movs	r2, #1
 8007152:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2201      	movs	r2, #1
 8007162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2201      	movs	r2, #1
 800716a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2201      	movs	r2, #1
 800717a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2201      	movs	r2, #1
 8007182:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	080071b5 	.word	0x080071b5

080071b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80071bc:	bf00      	nop
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d109      	bne.n	80071ec <HAL_TIM_PWM_Start+0x24>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	bf14      	ite	ne
 80071e4:	2301      	movne	r3, #1
 80071e6:	2300      	moveq	r3, #0
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	e03c      	b.n	8007266 <HAL_TIM_PWM_Start+0x9e>
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	2b04      	cmp	r3, #4
 80071f0:	d109      	bne.n	8007206 <HAL_TIM_PWM_Start+0x3e>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	bf14      	ite	ne
 80071fe:	2301      	movne	r3, #1
 8007200:	2300      	moveq	r3, #0
 8007202:	b2db      	uxtb	r3, r3
 8007204:	e02f      	b.n	8007266 <HAL_TIM_PWM_Start+0x9e>
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	2b08      	cmp	r3, #8
 800720a:	d109      	bne.n	8007220 <HAL_TIM_PWM_Start+0x58>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b01      	cmp	r3, #1
 8007216:	bf14      	ite	ne
 8007218:	2301      	movne	r3, #1
 800721a:	2300      	moveq	r3, #0
 800721c:	b2db      	uxtb	r3, r3
 800721e:	e022      	b.n	8007266 <HAL_TIM_PWM_Start+0x9e>
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	2b0c      	cmp	r3, #12
 8007224:	d109      	bne.n	800723a <HAL_TIM_PWM_Start+0x72>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b01      	cmp	r3, #1
 8007230:	bf14      	ite	ne
 8007232:	2301      	movne	r3, #1
 8007234:	2300      	moveq	r3, #0
 8007236:	b2db      	uxtb	r3, r3
 8007238:	e015      	b.n	8007266 <HAL_TIM_PWM_Start+0x9e>
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2b10      	cmp	r3, #16
 800723e:	d109      	bne.n	8007254 <HAL_TIM_PWM_Start+0x8c>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b01      	cmp	r3, #1
 800724a:	bf14      	ite	ne
 800724c:	2301      	movne	r3, #1
 800724e:	2300      	moveq	r3, #0
 8007250:	b2db      	uxtb	r3, r3
 8007252:	e008      	b.n	8007266 <HAL_TIM_PWM_Start+0x9e>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800725a:	b2db      	uxtb	r3, r3
 800725c:	2b01      	cmp	r3, #1
 800725e:	bf14      	ite	ne
 8007260:	2301      	movne	r3, #1
 8007262:	2300      	moveq	r3, #0
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	d001      	beq.n	800726e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e0a6      	b.n	80073bc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d104      	bne.n	800727e <HAL_TIM_PWM_Start+0xb6>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2202      	movs	r2, #2
 8007278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800727c:	e023      	b.n	80072c6 <HAL_TIM_PWM_Start+0xfe>
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	2b04      	cmp	r3, #4
 8007282:	d104      	bne.n	800728e <HAL_TIM_PWM_Start+0xc6>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2202      	movs	r2, #2
 8007288:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800728c:	e01b      	b.n	80072c6 <HAL_TIM_PWM_Start+0xfe>
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	2b08      	cmp	r3, #8
 8007292:	d104      	bne.n	800729e <HAL_TIM_PWM_Start+0xd6>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2202      	movs	r2, #2
 8007298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800729c:	e013      	b.n	80072c6 <HAL_TIM_PWM_Start+0xfe>
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	2b0c      	cmp	r3, #12
 80072a2:	d104      	bne.n	80072ae <HAL_TIM_PWM_Start+0xe6>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2202      	movs	r2, #2
 80072a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80072ac:	e00b      	b.n	80072c6 <HAL_TIM_PWM_Start+0xfe>
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	2b10      	cmp	r3, #16
 80072b2:	d104      	bne.n	80072be <HAL_TIM_PWM_Start+0xf6>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2202      	movs	r2, #2
 80072b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072bc:	e003      	b.n	80072c6 <HAL_TIM_PWM_Start+0xfe>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2202      	movs	r2, #2
 80072c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2201      	movs	r2, #1
 80072cc:	6839      	ldr	r1, [r7, #0]
 80072ce:	4618      	mov	r0, r3
 80072d0:	f001 fc9c 	bl	8008c0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a3a      	ldr	r2, [pc, #232]	@ (80073c4 <HAL_TIM_PWM_Start+0x1fc>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d018      	beq.n	8007310 <HAL_TIM_PWM_Start+0x148>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a39      	ldr	r2, [pc, #228]	@ (80073c8 <HAL_TIM_PWM_Start+0x200>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d013      	beq.n	8007310 <HAL_TIM_PWM_Start+0x148>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a37      	ldr	r2, [pc, #220]	@ (80073cc <HAL_TIM_PWM_Start+0x204>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d00e      	beq.n	8007310 <HAL_TIM_PWM_Start+0x148>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a36      	ldr	r2, [pc, #216]	@ (80073d0 <HAL_TIM_PWM_Start+0x208>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d009      	beq.n	8007310 <HAL_TIM_PWM_Start+0x148>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a34      	ldr	r2, [pc, #208]	@ (80073d4 <HAL_TIM_PWM_Start+0x20c>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d004      	beq.n	8007310 <HAL_TIM_PWM_Start+0x148>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a33      	ldr	r2, [pc, #204]	@ (80073d8 <HAL_TIM_PWM_Start+0x210>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d101      	bne.n	8007314 <HAL_TIM_PWM_Start+0x14c>
 8007310:	2301      	movs	r3, #1
 8007312:	e000      	b.n	8007316 <HAL_TIM_PWM_Start+0x14e>
 8007314:	2300      	movs	r3, #0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d007      	beq.n	800732a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007328:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a25      	ldr	r2, [pc, #148]	@ (80073c4 <HAL_TIM_PWM_Start+0x1fc>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d022      	beq.n	800737a <HAL_TIM_PWM_Start+0x1b2>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800733c:	d01d      	beq.n	800737a <HAL_TIM_PWM_Start+0x1b2>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a26      	ldr	r2, [pc, #152]	@ (80073dc <HAL_TIM_PWM_Start+0x214>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d018      	beq.n	800737a <HAL_TIM_PWM_Start+0x1b2>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a24      	ldr	r2, [pc, #144]	@ (80073e0 <HAL_TIM_PWM_Start+0x218>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d013      	beq.n	800737a <HAL_TIM_PWM_Start+0x1b2>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a23      	ldr	r2, [pc, #140]	@ (80073e4 <HAL_TIM_PWM_Start+0x21c>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d00e      	beq.n	800737a <HAL_TIM_PWM_Start+0x1b2>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a19      	ldr	r2, [pc, #100]	@ (80073c8 <HAL_TIM_PWM_Start+0x200>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d009      	beq.n	800737a <HAL_TIM_PWM_Start+0x1b2>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a18      	ldr	r2, [pc, #96]	@ (80073cc <HAL_TIM_PWM_Start+0x204>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d004      	beq.n	800737a <HAL_TIM_PWM_Start+0x1b2>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a18      	ldr	r2, [pc, #96]	@ (80073d8 <HAL_TIM_PWM_Start+0x210>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d115      	bne.n	80073a6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	689a      	ldr	r2, [r3, #8]
 8007380:	4b19      	ldr	r3, [pc, #100]	@ (80073e8 <HAL_TIM_PWM_Start+0x220>)
 8007382:	4013      	ands	r3, r2
 8007384:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2b06      	cmp	r3, #6
 800738a:	d015      	beq.n	80073b8 <HAL_TIM_PWM_Start+0x1f0>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007392:	d011      	beq.n	80073b8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f042 0201 	orr.w	r2, r2, #1
 80073a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073a4:	e008      	b.n	80073b8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f042 0201 	orr.w	r2, r2, #1
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	e000      	b.n	80073ba <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	40012c00 	.word	0x40012c00
 80073c8:	40013400 	.word	0x40013400
 80073cc:	40014000 	.word	0x40014000
 80073d0:	40014400 	.word	0x40014400
 80073d4:	40014800 	.word	0x40014800
 80073d8:	40015000 	.word	0x40015000
 80073dc:	40000400 	.word	0x40000400
 80073e0:	40000800 	.word	0x40000800
 80073e4:	40000c00 	.word	0x40000c00
 80073e8:	00010007 	.word	0x00010007

080073ec <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d101      	bne.n	8007400 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e04c      	b.n	800749a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b00      	cmp	r3, #0
 800740a:	d111      	bne.n	8007430 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f001 fc1f 	bl	8008c58 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800741e:	2b00      	cmp	r3, #0
 8007420:	d102      	bne.n	8007428 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a1f      	ldr	r2, [pc, #124]	@ (80074a4 <HAL_TIM_OnePulse_Init+0xb8>)
 8007426:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2202      	movs	r2, #2
 8007434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	3304      	adds	r3, #4
 8007440:	4619      	mov	r1, r3
 8007442:	4610      	mov	r0, r2
 8007444:	f000 ff68 	bl	8008318 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f022 0208 	bic.w	r2, r2, #8
 8007456:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6819      	ldr	r1, [r3, #0]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	430a      	orrs	r2, r1
 8007466:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	080074a9 	.word	0x080074a9

080074a8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80074cc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80074d4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074dc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074e4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80074e6:	7bfb      	ldrb	r3, [r7, #15]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d108      	bne.n	80074fe <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80074ec:	7bbb      	ldrb	r3, [r7, #14]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d105      	bne.n	80074fe <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80074f2:	7b7b      	ldrb	r3, [r7, #13]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d102      	bne.n	80074fe <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80074f8:	7b3b      	ldrb	r3, [r7, #12]
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d001      	beq.n	8007502 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e059      	b.n	80075b6 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2202      	movs	r2, #2
 8007506:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2202      	movs	r2, #2
 800750e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2202      	movs	r2, #2
 8007516:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2202      	movs	r2, #2
 800751e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68da      	ldr	r2, [r3, #12]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f042 0202 	orr.w	r2, r2, #2
 8007530:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68da      	ldr	r2, [r3, #12]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f042 0204 	orr.w	r2, r2, #4
 8007540:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2201      	movs	r2, #1
 8007548:	2100      	movs	r1, #0
 800754a:	4618      	mov	r0, r3
 800754c:	f001 fb5e 	bl	8008c0c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2201      	movs	r2, #1
 8007556:	2104      	movs	r1, #4
 8007558:	4618      	mov	r0, r3
 800755a:	f001 fb57 	bl	8008c0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a17      	ldr	r2, [pc, #92]	@ (80075c0 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d018      	beq.n	800759a <HAL_TIM_OnePulse_Start_IT+0xde>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a15      	ldr	r2, [pc, #84]	@ (80075c4 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d013      	beq.n	800759a <HAL_TIM_OnePulse_Start_IT+0xde>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a14      	ldr	r2, [pc, #80]	@ (80075c8 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d00e      	beq.n	800759a <HAL_TIM_OnePulse_Start_IT+0xde>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a12      	ldr	r2, [pc, #72]	@ (80075cc <HAL_TIM_OnePulse_Start_IT+0x110>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d009      	beq.n	800759a <HAL_TIM_OnePulse_Start_IT+0xde>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a11      	ldr	r2, [pc, #68]	@ (80075d0 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d004      	beq.n	800759a <HAL_TIM_OnePulse_Start_IT+0xde>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a0f      	ldr	r2, [pc, #60]	@ (80075d4 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d101      	bne.n	800759e <HAL_TIM_OnePulse_Start_IT+0xe2>
 800759a:	2301      	movs	r3, #1
 800759c:	e000      	b.n	80075a0 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800759e:	2300      	movs	r3, #0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d007      	beq.n	80075b4 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80075b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	40012c00 	.word	0x40012c00
 80075c4:	40013400 	.word	0x40013400
 80075c8:	40014000 	.word	0x40014000
 80075cc:	40014400 	.word	0x40014400
 80075d0:	40014800 	.word	0x40014800
 80075d4:	40015000 	.word	0x40015000

080075d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d101      	bne.n	80075ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e0a2      	b.n	8007732 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d111      	bne.n	800761c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f001 fb29 	bl	8008c58 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800760a:	2b00      	cmp	r3, #0
 800760c:	d102      	bne.n	8007614 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a4a      	ldr	r2, [pc, #296]	@ (800773c <HAL_TIM_Encoder_Init+0x164>)
 8007612:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	6812      	ldr	r2, [r2, #0]
 800762e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007632:	f023 0307 	bic.w	r3, r3, #7
 8007636:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	3304      	adds	r3, #4
 8007640:	4619      	mov	r1, r3
 8007642:	4610      	mov	r0, r2
 8007644:	f000 fe68 	bl	8008318 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	697a      	ldr	r2, [r7, #20]
 8007666:	4313      	orrs	r3, r2
 8007668:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007670:	f023 0303 	bic.w	r3, r3, #3
 8007674:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	689a      	ldr	r2, [r3, #8]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	021b      	lsls	r3, r3, #8
 8007680:	4313      	orrs	r3, r2
 8007682:	693a      	ldr	r2, [r7, #16]
 8007684:	4313      	orrs	r3, r2
 8007686:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800768e:	f023 030c 	bic.w	r3, r3, #12
 8007692:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800769a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800769e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	68da      	ldr	r2, [r3, #12]
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	69db      	ldr	r3, [r3, #28]
 80076a8:	021b      	lsls	r3, r3, #8
 80076aa:	4313      	orrs	r3, r2
 80076ac:	693a      	ldr	r2, [r7, #16]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	011a      	lsls	r2, r3, #4
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	6a1b      	ldr	r3, [r3, #32]
 80076bc:	031b      	lsls	r3, r3, #12
 80076be:	4313      	orrs	r3, r2
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80076cc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80076d4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	685a      	ldr	r2, [r3, #4]
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	011b      	lsls	r3, r3, #4
 80076e0:	4313      	orrs	r3, r2
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	697a      	ldr	r2, [r7, #20]
 80076ee:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3718      	adds	r7, #24
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	08003079 	.word	0x08003079

08007740 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007750:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007758:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007760:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007768:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d110      	bne.n	8007792 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007770:	7bfb      	ldrb	r3, [r7, #15]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d102      	bne.n	800777c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007776:	7b7b      	ldrb	r3, [r7, #13]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d001      	beq.n	8007780 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e069      	b.n	8007854 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2202      	movs	r2, #2
 8007784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2202      	movs	r2, #2
 800778c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007790:	e031      	b.n	80077f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2b04      	cmp	r3, #4
 8007796:	d110      	bne.n	80077ba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007798:	7bbb      	ldrb	r3, [r7, #14]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d102      	bne.n	80077a4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800779e:	7b3b      	ldrb	r3, [r7, #12]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d001      	beq.n	80077a8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e055      	b.n	8007854 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2202      	movs	r2, #2
 80077ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2202      	movs	r2, #2
 80077b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077b8:	e01d      	b.n	80077f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80077ba:	7bfb      	ldrb	r3, [r7, #15]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d108      	bne.n	80077d2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80077c0:	7bbb      	ldrb	r3, [r7, #14]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d105      	bne.n	80077d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80077c6:	7b7b      	ldrb	r3, [r7, #13]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d102      	bne.n	80077d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80077cc:	7b3b      	ldrb	r3, [r7, #12]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d001      	beq.n	80077d6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e03e      	b.n	8007854 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2202      	movs	r2, #2
 80077da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2202      	movs	r2, #2
 80077e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2202      	movs	r2, #2
 80077ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2202      	movs	r2, #2
 80077f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d003      	beq.n	8007804 <HAL_TIM_Encoder_Start+0xc4>
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	2b04      	cmp	r3, #4
 8007800:	d008      	beq.n	8007814 <HAL_TIM_Encoder_Start+0xd4>
 8007802:	e00f      	b.n	8007824 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2201      	movs	r2, #1
 800780a:	2100      	movs	r1, #0
 800780c:	4618      	mov	r0, r3
 800780e:	f001 f9fd 	bl	8008c0c <TIM_CCxChannelCmd>
      break;
 8007812:	e016      	b.n	8007842 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2201      	movs	r2, #1
 800781a:	2104      	movs	r1, #4
 800781c:	4618      	mov	r0, r3
 800781e:	f001 f9f5 	bl	8008c0c <TIM_CCxChannelCmd>
      break;
 8007822:	e00e      	b.n	8007842 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2201      	movs	r2, #1
 800782a:	2100      	movs	r1, #0
 800782c:	4618      	mov	r0, r3
 800782e:	f001 f9ed 	bl	8008c0c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2201      	movs	r2, #1
 8007838:	2104      	movs	r1, #4
 800783a:	4618      	mov	r0, r3
 800783c:	f001 f9e6 	bl	8008c0c <TIM_CCxChannelCmd>
      break;
 8007840:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f042 0201 	orr.w	r2, r2, #1
 8007850:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	f003 0302 	and.w	r3, r3, #2
 800787a:	2b00      	cmp	r3, #0
 800787c:	d026      	beq.n	80078cc <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f003 0302 	and.w	r3, r3, #2
 8007884:	2b00      	cmp	r3, #0
 8007886:	d021      	beq.n	80078cc <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f06f 0202 	mvn.w	r2, #2
 8007890:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2201      	movs	r2, #1
 8007896:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	f003 0303 	and.w	r3, r3, #3
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d005      	beq.n	80078b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	4798      	blx	r3
 80078b0:	e009      	b.n	80078c6 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	f003 0304 	and.w	r3, r3, #4
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d026      	beq.n	8007924 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f003 0304 	and.w	r3, r3, #4
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d021      	beq.n	8007924 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f06f 0204 	mvn.w	r2, #4
 80078e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2202      	movs	r2, #2
 80078ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d005      	beq.n	800790a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	4798      	blx	r3
 8007908:	e009      	b.n	800791e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	f003 0308 	and.w	r3, r3, #8
 800792a:	2b00      	cmp	r3, #0
 800792c:	d026      	beq.n	800797c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f003 0308 	and.w	r3, r3, #8
 8007934:	2b00      	cmp	r3, #0
 8007936:	d021      	beq.n	800797c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f06f 0208 	mvn.w	r2, #8
 8007940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2204      	movs	r2, #4
 8007946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	69db      	ldr	r3, [r3, #28]
 800794e:	f003 0303 	and.w	r3, r3, #3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d005      	beq.n	8007962 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	4798      	blx	r3
 8007960:	e009      	b.n	8007976 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	f003 0310 	and.w	r3, r3, #16
 8007982:	2b00      	cmp	r3, #0
 8007984:	d026      	beq.n	80079d4 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f003 0310 	and.w	r3, r3, #16
 800798c:	2b00      	cmp	r3, #0
 800798e:	d021      	beq.n	80079d4 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f06f 0210 	mvn.w	r2, #16
 8007998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2208      	movs	r2, #8
 800799e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	69db      	ldr	r3, [r3, #28]
 80079a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d005      	beq.n	80079ba <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	4798      	blx	r3
 80079b8:	e009      	b.n	80079ce <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00e      	beq.n	80079fc <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f003 0301 	and.w	r3, r3, #1
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d009      	beq.n	80079fc <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f06f 0201 	mvn.w	r2, #1
 80079f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d104      	bne.n	8007a10 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00e      	beq.n	8007a2e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d009      	beq.n	8007a2e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00e      	beq.n	8007a56 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d009      	beq.n	8007a56 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00e      	beq.n	8007a7e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d009      	beq.n	8007a7e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	f003 0320 	and.w	r3, r3, #32
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d00e      	beq.n	8007aa6 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f003 0320 	and.w	r3, r3, #32
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d009      	beq.n	8007aa6 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f06f 0220 	mvn.w	r2, #32
 8007a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00e      	beq.n	8007ace <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d009      	beq.n	8007ace <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00e      	beq.n	8007af6 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d009      	beq.n	8007af6 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00e      	beq.n	8007b1e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d009      	beq.n	8007b1e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00e      	beq.n	8007b46 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d009      	beq.n	8007b46 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b46:	bf00      	nop
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
	...

08007b50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b086      	sub	sp, #24
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d101      	bne.n	8007b6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b6a:	2302      	movs	r3, #2
 8007b6c:	e0ff      	b.n	8007d6e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2b14      	cmp	r3, #20
 8007b7a:	f200 80f0 	bhi.w	8007d5e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b84:	08007bd9 	.word	0x08007bd9
 8007b88:	08007d5f 	.word	0x08007d5f
 8007b8c:	08007d5f 	.word	0x08007d5f
 8007b90:	08007d5f 	.word	0x08007d5f
 8007b94:	08007c19 	.word	0x08007c19
 8007b98:	08007d5f 	.word	0x08007d5f
 8007b9c:	08007d5f 	.word	0x08007d5f
 8007ba0:	08007d5f 	.word	0x08007d5f
 8007ba4:	08007c5b 	.word	0x08007c5b
 8007ba8:	08007d5f 	.word	0x08007d5f
 8007bac:	08007d5f 	.word	0x08007d5f
 8007bb0:	08007d5f 	.word	0x08007d5f
 8007bb4:	08007c9b 	.word	0x08007c9b
 8007bb8:	08007d5f 	.word	0x08007d5f
 8007bbc:	08007d5f 	.word	0x08007d5f
 8007bc0:	08007d5f 	.word	0x08007d5f
 8007bc4:	08007cdd 	.word	0x08007cdd
 8007bc8:	08007d5f 	.word	0x08007d5f
 8007bcc:	08007d5f 	.word	0x08007d5f
 8007bd0:	08007d5f 	.word	0x08007d5f
 8007bd4:	08007d1d 	.word	0x08007d1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68b9      	ldr	r1, [r7, #8]
 8007bde:	4618      	mov	r0, r3
 8007be0:	f000 fc4e 	bl	8008480 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	699a      	ldr	r2, [r3, #24]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f042 0208 	orr.w	r2, r2, #8
 8007bf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	699a      	ldr	r2, [r3, #24]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f022 0204 	bic.w	r2, r2, #4
 8007c02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6999      	ldr	r1, [r3, #24]
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	691a      	ldr	r2, [r3, #16]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	430a      	orrs	r2, r1
 8007c14:	619a      	str	r2, [r3, #24]
      break;
 8007c16:	e0a5      	b.n	8007d64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68b9      	ldr	r1, [r7, #8]
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f000 fcc8 	bl	80085b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	699a      	ldr	r2, [r3, #24]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	699a      	ldr	r2, [r3, #24]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6999      	ldr	r1, [r3, #24]
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	021a      	lsls	r2, r3, #8
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	430a      	orrs	r2, r1
 8007c56:	619a      	str	r2, [r3, #24]
      break;
 8007c58:	e084      	b.n	8007d64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68b9      	ldr	r1, [r7, #8]
 8007c60:	4618      	mov	r0, r3
 8007c62:	f000 fd3b 	bl	80086dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	69da      	ldr	r2, [r3, #28]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f042 0208 	orr.w	r2, r2, #8
 8007c74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	69da      	ldr	r2, [r3, #28]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f022 0204 	bic.w	r2, r2, #4
 8007c84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	69d9      	ldr	r1, [r3, #28]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	691a      	ldr	r2, [r3, #16]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	430a      	orrs	r2, r1
 8007c96:	61da      	str	r2, [r3, #28]
      break;
 8007c98:	e064      	b.n	8007d64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68b9      	ldr	r1, [r7, #8]
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f000 fdad 	bl	8008800 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	69da      	ldr	r2, [r3, #28]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007cb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	69da      	ldr	r2, [r3, #28]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007cc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	69d9      	ldr	r1, [r3, #28]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	021a      	lsls	r2, r3, #8
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	61da      	str	r2, [r3, #28]
      break;
 8007cda:	e043      	b.n	8007d64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68b9      	ldr	r1, [r7, #8]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 fe20 	bl	8008928 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f042 0208 	orr.w	r2, r2, #8
 8007cf6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f022 0204 	bic.w	r2, r2, #4
 8007d06:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	691a      	ldr	r2, [r3, #16]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	430a      	orrs	r2, r1
 8007d18:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007d1a:	e023      	b.n	8007d64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	68b9      	ldr	r1, [r7, #8]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f000 fe6a 	bl	80089fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d36:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d46:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	021a      	lsls	r2, r3, #8
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007d5c:	e002      	b.n	8007d64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	75fb      	strb	r3, [r7, #23]
      break;
 8007d62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3718      	adds	r7, #24
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop

08007d78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d82:	2300      	movs	r3, #0
 8007d84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d101      	bne.n	8007d94 <HAL_TIM_ConfigClockSource+0x1c>
 8007d90:	2302      	movs	r3, #2
 8007d92:	e0f6      	b.n	8007f82 <HAL_TIM_ConfigClockSource+0x20a>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2202      	movs	r2, #2
 8007da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007db2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007db6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007dbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a6f      	ldr	r2, [pc, #444]	@ (8007f8c <HAL_TIM_ConfigClockSource+0x214>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	f000 80c1 	beq.w	8007f56 <HAL_TIM_ConfigClockSource+0x1de>
 8007dd4:	4a6d      	ldr	r2, [pc, #436]	@ (8007f8c <HAL_TIM_ConfigClockSource+0x214>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	f200 80c6 	bhi.w	8007f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8007ddc:	4a6c      	ldr	r2, [pc, #432]	@ (8007f90 <HAL_TIM_ConfigClockSource+0x218>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	f000 80b9 	beq.w	8007f56 <HAL_TIM_ConfigClockSource+0x1de>
 8007de4:	4a6a      	ldr	r2, [pc, #424]	@ (8007f90 <HAL_TIM_ConfigClockSource+0x218>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	f200 80be 	bhi.w	8007f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8007dec:	4a69      	ldr	r2, [pc, #420]	@ (8007f94 <HAL_TIM_ConfigClockSource+0x21c>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	f000 80b1 	beq.w	8007f56 <HAL_TIM_ConfigClockSource+0x1de>
 8007df4:	4a67      	ldr	r2, [pc, #412]	@ (8007f94 <HAL_TIM_ConfigClockSource+0x21c>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	f200 80b6 	bhi.w	8007f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8007dfc:	4a66      	ldr	r2, [pc, #408]	@ (8007f98 <HAL_TIM_ConfigClockSource+0x220>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	f000 80a9 	beq.w	8007f56 <HAL_TIM_ConfigClockSource+0x1de>
 8007e04:	4a64      	ldr	r2, [pc, #400]	@ (8007f98 <HAL_TIM_ConfigClockSource+0x220>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	f200 80ae 	bhi.w	8007f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8007e0c:	4a63      	ldr	r2, [pc, #396]	@ (8007f9c <HAL_TIM_ConfigClockSource+0x224>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	f000 80a1 	beq.w	8007f56 <HAL_TIM_ConfigClockSource+0x1de>
 8007e14:	4a61      	ldr	r2, [pc, #388]	@ (8007f9c <HAL_TIM_ConfigClockSource+0x224>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	f200 80a6 	bhi.w	8007f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8007e1c:	4a60      	ldr	r2, [pc, #384]	@ (8007fa0 <HAL_TIM_ConfigClockSource+0x228>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	f000 8099 	beq.w	8007f56 <HAL_TIM_ConfigClockSource+0x1de>
 8007e24:	4a5e      	ldr	r2, [pc, #376]	@ (8007fa0 <HAL_TIM_ConfigClockSource+0x228>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	f200 809e 	bhi.w	8007f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8007e2c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007e30:	f000 8091 	beq.w	8007f56 <HAL_TIM_ConfigClockSource+0x1de>
 8007e34:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007e38:	f200 8096 	bhi.w	8007f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8007e3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e40:	f000 8089 	beq.w	8007f56 <HAL_TIM_ConfigClockSource+0x1de>
 8007e44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e48:	f200 808e 	bhi.w	8007f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8007e4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e50:	d03e      	beq.n	8007ed0 <HAL_TIM_ConfigClockSource+0x158>
 8007e52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e56:	f200 8087 	bhi.w	8007f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8007e5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e5e:	f000 8086 	beq.w	8007f6e <HAL_TIM_ConfigClockSource+0x1f6>
 8007e62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e66:	d87f      	bhi.n	8007f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8007e68:	2b70      	cmp	r3, #112	@ 0x70
 8007e6a:	d01a      	beq.n	8007ea2 <HAL_TIM_ConfigClockSource+0x12a>
 8007e6c:	2b70      	cmp	r3, #112	@ 0x70
 8007e6e:	d87b      	bhi.n	8007f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8007e70:	2b60      	cmp	r3, #96	@ 0x60
 8007e72:	d050      	beq.n	8007f16 <HAL_TIM_ConfigClockSource+0x19e>
 8007e74:	2b60      	cmp	r3, #96	@ 0x60
 8007e76:	d877      	bhi.n	8007f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8007e78:	2b50      	cmp	r3, #80	@ 0x50
 8007e7a:	d03c      	beq.n	8007ef6 <HAL_TIM_ConfigClockSource+0x17e>
 8007e7c:	2b50      	cmp	r3, #80	@ 0x50
 8007e7e:	d873      	bhi.n	8007f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8007e80:	2b40      	cmp	r3, #64	@ 0x40
 8007e82:	d058      	beq.n	8007f36 <HAL_TIM_ConfigClockSource+0x1be>
 8007e84:	2b40      	cmp	r3, #64	@ 0x40
 8007e86:	d86f      	bhi.n	8007f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8007e88:	2b30      	cmp	r3, #48	@ 0x30
 8007e8a:	d064      	beq.n	8007f56 <HAL_TIM_ConfigClockSource+0x1de>
 8007e8c:	2b30      	cmp	r3, #48	@ 0x30
 8007e8e:	d86b      	bhi.n	8007f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8007e90:	2b20      	cmp	r3, #32
 8007e92:	d060      	beq.n	8007f56 <HAL_TIM_ConfigClockSource+0x1de>
 8007e94:	2b20      	cmp	r3, #32
 8007e96:	d867      	bhi.n	8007f68 <HAL_TIM_ConfigClockSource+0x1f0>
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d05c      	beq.n	8007f56 <HAL_TIM_ConfigClockSource+0x1de>
 8007e9c:	2b10      	cmp	r3, #16
 8007e9e:	d05a      	beq.n	8007f56 <HAL_TIM_ConfigClockSource+0x1de>
 8007ea0:	e062      	b.n	8007f68 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007eb2:	f000 fe8b 	bl	8008bcc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007ec4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	609a      	str	r2, [r3, #8]
      break;
 8007ece:	e04f      	b.n	8007f70 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ee0:	f000 fe74 	bl	8008bcc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	689a      	ldr	r2, [r3, #8]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ef2:	609a      	str	r2, [r3, #8]
      break;
 8007ef4:	e03c      	b.n	8007f70 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f02:	461a      	mov	r2, r3
 8007f04:	f000 fde6 	bl	8008ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2150      	movs	r1, #80	@ 0x50
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 fe3f 	bl	8008b92 <TIM_ITRx_SetConfig>
      break;
 8007f14:	e02c      	b.n	8007f70 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f22:	461a      	mov	r2, r3
 8007f24:	f000 fe05 	bl	8008b32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2160      	movs	r1, #96	@ 0x60
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f000 fe2f 	bl	8008b92 <TIM_ITRx_SetConfig>
      break;
 8007f34:	e01c      	b.n	8007f70 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f42:	461a      	mov	r2, r3
 8007f44:	f000 fdc6 	bl	8008ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2140      	movs	r1, #64	@ 0x40
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f000 fe1f 	bl	8008b92 <TIM_ITRx_SetConfig>
      break;
 8007f54:	e00c      	b.n	8007f70 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4619      	mov	r1, r3
 8007f60:	4610      	mov	r0, r2
 8007f62:	f000 fe16 	bl	8008b92 <TIM_ITRx_SetConfig>
      break;
 8007f66:	e003      	b.n	8007f70 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f6c:	e000      	b.n	8007f70 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007f6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	00100070 	.word	0x00100070
 8007f90:	00100060 	.word	0x00100060
 8007f94:	00100050 	.word	0x00100050
 8007f98:	00100040 	.word	0x00100040
 8007f9c:	00100030 	.word	0x00100030
 8007fa0:	00100020 	.word	0x00100020

08007fa4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007fac:	bf00      	nop
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007fd4:	bf00      	nop
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007fe8:	bf00      	nop
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008058:	b480      	push	{r7}
 800805a:	b087      	sub	sp, #28
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	460b      	mov	r3, r1
 8008062:	607a      	str	r2, [r7, #4]
 8008064:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008066:	2300      	movs	r3, #0
 8008068:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d101      	bne.n	8008074 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	e14a      	b.n	800830a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800807a:	b2db      	uxtb	r3, r3
 800807c:	2b01      	cmp	r3, #1
 800807e:	f040 80dd 	bne.w	800823c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8008082:	7afb      	ldrb	r3, [r7, #11]
 8008084:	2b1f      	cmp	r3, #31
 8008086:	f200 80d6 	bhi.w	8008236 <HAL_TIM_RegisterCallback+0x1de>
 800808a:	a201      	add	r2, pc, #4	@ (adr r2, 8008090 <HAL_TIM_RegisterCallback+0x38>)
 800808c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008090:	08008111 	.word	0x08008111
 8008094:	08008119 	.word	0x08008119
 8008098:	08008121 	.word	0x08008121
 800809c:	08008129 	.word	0x08008129
 80080a0:	08008131 	.word	0x08008131
 80080a4:	08008139 	.word	0x08008139
 80080a8:	08008141 	.word	0x08008141
 80080ac:	08008149 	.word	0x08008149
 80080b0:	08008151 	.word	0x08008151
 80080b4:	08008159 	.word	0x08008159
 80080b8:	08008161 	.word	0x08008161
 80080bc:	08008169 	.word	0x08008169
 80080c0:	08008171 	.word	0x08008171
 80080c4:	08008179 	.word	0x08008179
 80080c8:	08008183 	.word	0x08008183
 80080cc:	0800818d 	.word	0x0800818d
 80080d0:	08008197 	.word	0x08008197
 80080d4:	080081a1 	.word	0x080081a1
 80080d8:	080081ab 	.word	0x080081ab
 80080dc:	080081b5 	.word	0x080081b5
 80080e0:	080081bf 	.word	0x080081bf
 80080e4:	080081c9 	.word	0x080081c9
 80080e8:	080081d3 	.word	0x080081d3
 80080ec:	080081dd 	.word	0x080081dd
 80080f0:	080081e7 	.word	0x080081e7
 80080f4:	080081f1 	.word	0x080081f1
 80080f8:	080081fb 	.word	0x080081fb
 80080fc:	08008205 	.word	0x08008205
 8008100:	0800820f 	.word	0x0800820f
 8008104:	08008219 	.word	0x08008219
 8008108:	08008223 	.word	0x08008223
 800810c:	0800822d 	.word	0x0800822d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008116:	e0f7      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800811e:	e0f3      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008126:	e0ef      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800812e:	e0eb      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008136:	e0e7      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800813e:	e0e3      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008146:	e0df      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800814e:	e0db      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008156:	e0d7      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800815e:	e0d3      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008166:	e0cf      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800816e:	e0cb      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008176:	e0c7      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008180:	e0c2      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800818a:	e0bd      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8008194:	e0b8      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800819e:	e0b3      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 80081a8:	e0ae      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80081b2:	e0a9      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80081bc:	e0a4      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80081c6:	e09f      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80081d0:	e09a      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80081da:	e095      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80081e4:	e090      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80081ee:	e08b      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80081f8:	e086      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008202:	e081      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800820c:	e07c      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008216:	e077      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8008220:	e072      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800822a:	e06d      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008234:	e068      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	75fb      	strb	r3, [r7, #23]
        break;
 800823a:	e065      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008242:	b2db      	uxtb	r3, r3
 8008244:	2b00      	cmp	r3, #0
 8008246:	d15d      	bne.n	8008304 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008248:	7afb      	ldrb	r3, [r7, #11]
 800824a:	2b0d      	cmp	r3, #13
 800824c:	d857      	bhi.n	80082fe <HAL_TIM_RegisterCallback+0x2a6>
 800824e:	a201      	add	r2, pc, #4	@ (adr r2, 8008254 <HAL_TIM_RegisterCallback+0x1fc>)
 8008250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008254:	0800828d 	.word	0x0800828d
 8008258:	08008295 	.word	0x08008295
 800825c:	0800829d 	.word	0x0800829d
 8008260:	080082a5 	.word	0x080082a5
 8008264:	080082ad 	.word	0x080082ad
 8008268:	080082b5 	.word	0x080082b5
 800826c:	080082bd 	.word	0x080082bd
 8008270:	080082c5 	.word	0x080082c5
 8008274:	080082cd 	.word	0x080082cd
 8008278:	080082d5 	.word	0x080082d5
 800827c:	080082dd 	.word	0x080082dd
 8008280:	080082e5 	.word	0x080082e5
 8008284:	080082ed 	.word	0x080082ed
 8008288:	080082f5 	.word	0x080082f5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008292:	e039      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800829a:	e035      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80082a2:	e031      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80082aa:	e02d      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80082b2:	e029      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80082ba:	e025      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80082c2:	e021      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80082ca:	e01d      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80082d2:	e019      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80082da:	e015      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80082e2:	e011      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80082ea:	e00d      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80082f2:	e009      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80082fc:	e004      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	75fb      	strb	r3, [r7, #23]
        break;
 8008302:	e001      	b.n	8008308 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008308:	7dfb      	ldrb	r3, [r7, #23]
}
 800830a:	4618      	mov	r0, r3
 800830c:	371c      	adds	r7, #28
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop

08008318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a4c      	ldr	r2, [pc, #304]	@ (800845c <TIM_Base_SetConfig+0x144>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d017      	beq.n	8008360 <TIM_Base_SetConfig+0x48>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008336:	d013      	beq.n	8008360 <TIM_Base_SetConfig+0x48>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a49      	ldr	r2, [pc, #292]	@ (8008460 <TIM_Base_SetConfig+0x148>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d00f      	beq.n	8008360 <TIM_Base_SetConfig+0x48>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a48      	ldr	r2, [pc, #288]	@ (8008464 <TIM_Base_SetConfig+0x14c>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d00b      	beq.n	8008360 <TIM_Base_SetConfig+0x48>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a47      	ldr	r2, [pc, #284]	@ (8008468 <TIM_Base_SetConfig+0x150>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d007      	beq.n	8008360 <TIM_Base_SetConfig+0x48>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a46      	ldr	r2, [pc, #280]	@ (800846c <TIM_Base_SetConfig+0x154>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d003      	beq.n	8008360 <TIM_Base_SetConfig+0x48>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a45      	ldr	r2, [pc, #276]	@ (8008470 <TIM_Base_SetConfig+0x158>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d108      	bne.n	8008372 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	4313      	orrs	r3, r2
 8008370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4a39      	ldr	r2, [pc, #228]	@ (800845c <TIM_Base_SetConfig+0x144>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d023      	beq.n	80083c2 <TIM_Base_SetConfig+0xaa>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008380:	d01f      	beq.n	80083c2 <TIM_Base_SetConfig+0xaa>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a36      	ldr	r2, [pc, #216]	@ (8008460 <TIM_Base_SetConfig+0x148>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d01b      	beq.n	80083c2 <TIM_Base_SetConfig+0xaa>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a35      	ldr	r2, [pc, #212]	@ (8008464 <TIM_Base_SetConfig+0x14c>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d017      	beq.n	80083c2 <TIM_Base_SetConfig+0xaa>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4a34      	ldr	r2, [pc, #208]	@ (8008468 <TIM_Base_SetConfig+0x150>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d013      	beq.n	80083c2 <TIM_Base_SetConfig+0xaa>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a33      	ldr	r2, [pc, #204]	@ (800846c <TIM_Base_SetConfig+0x154>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d00f      	beq.n	80083c2 <TIM_Base_SetConfig+0xaa>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a33      	ldr	r2, [pc, #204]	@ (8008474 <TIM_Base_SetConfig+0x15c>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d00b      	beq.n	80083c2 <TIM_Base_SetConfig+0xaa>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a32      	ldr	r2, [pc, #200]	@ (8008478 <TIM_Base_SetConfig+0x160>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d007      	beq.n	80083c2 <TIM_Base_SetConfig+0xaa>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a31      	ldr	r2, [pc, #196]	@ (800847c <TIM_Base_SetConfig+0x164>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d003      	beq.n	80083c2 <TIM_Base_SetConfig+0xaa>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a2c      	ldr	r2, [pc, #176]	@ (8008470 <TIM_Base_SetConfig+0x158>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d108      	bne.n	80083d4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	695b      	ldr	r3, [r3, #20]
 80083de:	4313      	orrs	r3, r2
 80083e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	689a      	ldr	r2, [r3, #8]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a18      	ldr	r2, [pc, #96]	@ (800845c <TIM_Base_SetConfig+0x144>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d013      	beq.n	8008428 <TIM_Base_SetConfig+0x110>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a1a      	ldr	r2, [pc, #104]	@ (800846c <TIM_Base_SetConfig+0x154>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d00f      	beq.n	8008428 <TIM_Base_SetConfig+0x110>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a1a      	ldr	r2, [pc, #104]	@ (8008474 <TIM_Base_SetConfig+0x15c>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d00b      	beq.n	8008428 <TIM_Base_SetConfig+0x110>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a19      	ldr	r2, [pc, #100]	@ (8008478 <TIM_Base_SetConfig+0x160>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d007      	beq.n	8008428 <TIM_Base_SetConfig+0x110>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a18      	ldr	r2, [pc, #96]	@ (800847c <TIM_Base_SetConfig+0x164>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d003      	beq.n	8008428 <TIM_Base_SetConfig+0x110>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a13      	ldr	r2, [pc, #76]	@ (8008470 <TIM_Base_SetConfig+0x158>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d103      	bne.n	8008430 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	691a      	ldr	r2, [r3, #16]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	f003 0301 	and.w	r3, r3, #1
 800843e:	2b01      	cmp	r3, #1
 8008440:	d105      	bne.n	800844e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	f023 0201 	bic.w	r2, r3, #1
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	611a      	str	r2, [r3, #16]
  }
}
 800844e:	bf00      	nop
 8008450:	3714      	adds	r7, #20
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	40012c00 	.word	0x40012c00
 8008460:	40000400 	.word	0x40000400
 8008464:	40000800 	.word	0x40000800
 8008468:	40000c00 	.word	0x40000c00
 800846c:	40013400 	.word	0x40013400
 8008470:	40015000 	.word	0x40015000
 8008474:	40014000 	.word	0x40014000
 8008478:	40014400 	.word	0x40014400
 800847c:	40014800 	.word	0x40014800

08008480 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008480:	b480      	push	{r7}
 8008482:	b087      	sub	sp, #28
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a1b      	ldr	r3, [r3, #32]
 800848e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a1b      	ldr	r3, [r3, #32]
 8008494:	f023 0201 	bic.w	r2, r3, #1
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	699b      	ldr	r3, [r3, #24]
 80084a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f023 0303 	bic.w	r3, r3, #3
 80084ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	f023 0302 	bic.w	r3, r3, #2
 80084cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a30      	ldr	r2, [pc, #192]	@ (800859c <TIM_OC1_SetConfig+0x11c>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d013      	beq.n	8008508 <TIM_OC1_SetConfig+0x88>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4a2f      	ldr	r2, [pc, #188]	@ (80085a0 <TIM_OC1_SetConfig+0x120>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d00f      	beq.n	8008508 <TIM_OC1_SetConfig+0x88>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4a2e      	ldr	r2, [pc, #184]	@ (80085a4 <TIM_OC1_SetConfig+0x124>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d00b      	beq.n	8008508 <TIM_OC1_SetConfig+0x88>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a2d      	ldr	r2, [pc, #180]	@ (80085a8 <TIM_OC1_SetConfig+0x128>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d007      	beq.n	8008508 <TIM_OC1_SetConfig+0x88>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a2c      	ldr	r2, [pc, #176]	@ (80085ac <TIM_OC1_SetConfig+0x12c>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d003      	beq.n	8008508 <TIM_OC1_SetConfig+0x88>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a2b      	ldr	r2, [pc, #172]	@ (80085b0 <TIM_OC1_SetConfig+0x130>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d10c      	bne.n	8008522 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	f023 0308 	bic.w	r3, r3, #8
 800850e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	697a      	ldr	r2, [r7, #20]
 8008516:	4313      	orrs	r3, r2
 8008518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	f023 0304 	bic.w	r3, r3, #4
 8008520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a1d      	ldr	r2, [pc, #116]	@ (800859c <TIM_OC1_SetConfig+0x11c>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d013      	beq.n	8008552 <TIM_OC1_SetConfig+0xd2>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a1c      	ldr	r2, [pc, #112]	@ (80085a0 <TIM_OC1_SetConfig+0x120>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d00f      	beq.n	8008552 <TIM_OC1_SetConfig+0xd2>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a1b      	ldr	r2, [pc, #108]	@ (80085a4 <TIM_OC1_SetConfig+0x124>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d00b      	beq.n	8008552 <TIM_OC1_SetConfig+0xd2>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4a1a      	ldr	r2, [pc, #104]	@ (80085a8 <TIM_OC1_SetConfig+0x128>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d007      	beq.n	8008552 <TIM_OC1_SetConfig+0xd2>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a19      	ldr	r2, [pc, #100]	@ (80085ac <TIM_OC1_SetConfig+0x12c>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d003      	beq.n	8008552 <TIM_OC1_SetConfig+0xd2>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a18      	ldr	r2, [pc, #96]	@ (80085b0 <TIM_OC1_SetConfig+0x130>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d111      	bne.n	8008576 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	695b      	ldr	r3, [r3, #20]
 8008566:	693a      	ldr	r2, [r7, #16]
 8008568:	4313      	orrs	r3, r2
 800856a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	699b      	ldr	r3, [r3, #24]
 8008570:	693a      	ldr	r2, [r7, #16]
 8008572:	4313      	orrs	r3, r2
 8008574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	693a      	ldr	r2, [r7, #16]
 800857a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	685a      	ldr	r2, [r3, #4]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	697a      	ldr	r2, [r7, #20]
 800858e:	621a      	str	r2, [r3, #32]
}
 8008590:	bf00      	nop
 8008592:	371c      	adds	r7, #28
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr
 800859c:	40012c00 	.word	0x40012c00
 80085a0:	40013400 	.word	0x40013400
 80085a4:	40014000 	.word	0x40014000
 80085a8:	40014400 	.word	0x40014400
 80085ac:	40014800 	.word	0x40014800
 80085b0:	40015000 	.word	0x40015000

080085b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b087      	sub	sp, #28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a1b      	ldr	r3, [r3, #32]
 80085c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a1b      	ldr	r3, [r3, #32]
 80085c8:	f023 0210 	bic.w	r2, r3, #16
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	699b      	ldr	r3, [r3, #24]
 80085da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80085e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	021b      	lsls	r3, r3, #8
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	f023 0320 	bic.w	r3, r3, #32
 8008602:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	011b      	lsls	r3, r3, #4
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	4313      	orrs	r3, r2
 800860e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a2c      	ldr	r2, [pc, #176]	@ (80086c4 <TIM_OC2_SetConfig+0x110>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d007      	beq.n	8008628 <TIM_OC2_SetConfig+0x74>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a2b      	ldr	r2, [pc, #172]	@ (80086c8 <TIM_OC2_SetConfig+0x114>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d003      	beq.n	8008628 <TIM_OC2_SetConfig+0x74>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a2a      	ldr	r2, [pc, #168]	@ (80086cc <TIM_OC2_SetConfig+0x118>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d10d      	bne.n	8008644 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800862e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	011b      	lsls	r3, r3, #4
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	4313      	orrs	r3, r2
 800863a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008642:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a1f      	ldr	r2, [pc, #124]	@ (80086c4 <TIM_OC2_SetConfig+0x110>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d013      	beq.n	8008674 <TIM_OC2_SetConfig+0xc0>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a1e      	ldr	r2, [pc, #120]	@ (80086c8 <TIM_OC2_SetConfig+0x114>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d00f      	beq.n	8008674 <TIM_OC2_SetConfig+0xc0>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a1e      	ldr	r2, [pc, #120]	@ (80086d0 <TIM_OC2_SetConfig+0x11c>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d00b      	beq.n	8008674 <TIM_OC2_SetConfig+0xc0>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a1d      	ldr	r2, [pc, #116]	@ (80086d4 <TIM_OC2_SetConfig+0x120>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d007      	beq.n	8008674 <TIM_OC2_SetConfig+0xc0>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4a1c      	ldr	r2, [pc, #112]	@ (80086d8 <TIM_OC2_SetConfig+0x124>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d003      	beq.n	8008674 <TIM_OC2_SetConfig+0xc0>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a17      	ldr	r2, [pc, #92]	@ (80086cc <TIM_OC2_SetConfig+0x118>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d113      	bne.n	800869c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800867a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008682:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	695b      	ldr	r3, [r3, #20]
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	693a      	ldr	r2, [r7, #16]
 800868c:	4313      	orrs	r3, r2
 800868e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	699b      	ldr	r3, [r3, #24]
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	693a      	ldr	r2, [r7, #16]
 8008698:	4313      	orrs	r3, r2
 800869a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	685a      	ldr	r2, [r3, #4]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	697a      	ldr	r2, [r7, #20]
 80086b4:	621a      	str	r2, [r3, #32]
}
 80086b6:	bf00      	nop
 80086b8:	371c      	adds	r7, #28
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	40012c00 	.word	0x40012c00
 80086c8:	40013400 	.word	0x40013400
 80086cc:	40015000 	.word	0x40015000
 80086d0:	40014000 	.word	0x40014000
 80086d4:	40014400 	.word	0x40014400
 80086d8:	40014800 	.word	0x40014800

080086dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086dc:	b480      	push	{r7}
 80086de:	b087      	sub	sp, #28
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a1b      	ldr	r3, [r3, #32]
 80086ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6a1b      	ldr	r3, [r3, #32]
 80086f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	69db      	ldr	r3, [r3, #28]
 8008702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800870a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800870e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f023 0303 	bic.w	r3, r3, #3
 8008716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	4313      	orrs	r3, r2
 8008720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	021b      	lsls	r3, r3, #8
 8008730:	697a      	ldr	r2, [r7, #20]
 8008732:	4313      	orrs	r3, r2
 8008734:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a2b      	ldr	r2, [pc, #172]	@ (80087e8 <TIM_OC3_SetConfig+0x10c>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d007      	beq.n	800874e <TIM_OC3_SetConfig+0x72>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a2a      	ldr	r2, [pc, #168]	@ (80087ec <TIM_OC3_SetConfig+0x110>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d003      	beq.n	800874e <TIM_OC3_SetConfig+0x72>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a29      	ldr	r2, [pc, #164]	@ (80087f0 <TIM_OC3_SetConfig+0x114>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d10d      	bne.n	800876a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008754:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	021b      	lsls	r3, r3, #8
 800875c:	697a      	ldr	r2, [r7, #20]
 800875e:	4313      	orrs	r3, r2
 8008760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a1e      	ldr	r2, [pc, #120]	@ (80087e8 <TIM_OC3_SetConfig+0x10c>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d013      	beq.n	800879a <TIM_OC3_SetConfig+0xbe>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a1d      	ldr	r2, [pc, #116]	@ (80087ec <TIM_OC3_SetConfig+0x110>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d00f      	beq.n	800879a <TIM_OC3_SetConfig+0xbe>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a1d      	ldr	r2, [pc, #116]	@ (80087f4 <TIM_OC3_SetConfig+0x118>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d00b      	beq.n	800879a <TIM_OC3_SetConfig+0xbe>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a1c      	ldr	r2, [pc, #112]	@ (80087f8 <TIM_OC3_SetConfig+0x11c>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d007      	beq.n	800879a <TIM_OC3_SetConfig+0xbe>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a1b      	ldr	r2, [pc, #108]	@ (80087fc <TIM_OC3_SetConfig+0x120>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d003      	beq.n	800879a <TIM_OC3_SetConfig+0xbe>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a16      	ldr	r2, [pc, #88]	@ (80087f0 <TIM_OC3_SetConfig+0x114>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d113      	bne.n	80087c2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80087a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80087a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	011b      	lsls	r3, r3, #4
 80087b0:	693a      	ldr	r2, [r7, #16]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	699b      	ldr	r3, [r3, #24]
 80087ba:	011b      	lsls	r3, r3, #4
 80087bc:	693a      	ldr	r2, [r7, #16]
 80087be:	4313      	orrs	r3, r2
 80087c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	693a      	ldr	r2, [r7, #16]
 80087c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	685a      	ldr	r2, [r3, #4]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	697a      	ldr	r2, [r7, #20]
 80087da:	621a      	str	r2, [r3, #32]
}
 80087dc:	bf00      	nop
 80087de:	371c      	adds	r7, #28
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr
 80087e8:	40012c00 	.word	0x40012c00
 80087ec:	40013400 	.word	0x40013400
 80087f0:	40015000 	.word	0x40015000
 80087f4:	40014000 	.word	0x40014000
 80087f8:	40014400 	.word	0x40014400
 80087fc:	40014800 	.word	0x40014800

08008800 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008800:	b480      	push	{r7}
 8008802:	b087      	sub	sp, #28
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a1b      	ldr	r3, [r3, #32]
 800880e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6a1b      	ldr	r3, [r3, #32]
 8008814:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	69db      	ldr	r3, [r3, #28]
 8008826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800882e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800883a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	021b      	lsls	r3, r3, #8
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	4313      	orrs	r3, r2
 8008846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800884e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	031b      	lsls	r3, r3, #12
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	4313      	orrs	r3, r2
 800885a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a2c      	ldr	r2, [pc, #176]	@ (8008910 <TIM_OC4_SetConfig+0x110>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d007      	beq.n	8008874 <TIM_OC4_SetConfig+0x74>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a2b      	ldr	r2, [pc, #172]	@ (8008914 <TIM_OC4_SetConfig+0x114>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d003      	beq.n	8008874 <TIM_OC4_SetConfig+0x74>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a2a      	ldr	r2, [pc, #168]	@ (8008918 <TIM_OC4_SetConfig+0x118>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d10d      	bne.n	8008890 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800887a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	031b      	lsls	r3, r3, #12
 8008882:	697a      	ldr	r2, [r7, #20]
 8008884:	4313      	orrs	r3, r2
 8008886:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800888e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a1f      	ldr	r2, [pc, #124]	@ (8008910 <TIM_OC4_SetConfig+0x110>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d013      	beq.n	80088c0 <TIM_OC4_SetConfig+0xc0>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a1e      	ldr	r2, [pc, #120]	@ (8008914 <TIM_OC4_SetConfig+0x114>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d00f      	beq.n	80088c0 <TIM_OC4_SetConfig+0xc0>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a1e      	ldr	r2, [pc, #120]	@ (800891c <TIM_OC4_SetConfig+0x11c>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d00b      	beq.n	80088c0 <TIM_OC4_SetConfig+0xc0>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a1d      	ldr	r2, [pc, #116]	@ (8008920 <TIM_OC4_SetConfig+0x120>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d007      	beq.n	80088c0 <TIM_OC4_SetConfig+0xc0>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a1c      	ldr	r2, [pc, #112]	@ (8008924 <TIM_OC4_SetConfig+0x124>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d003      	beq.n	80088c0 <TIM_OC4_SetConfig+0xc0>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a17      	ldr	r2, [pc, #92]	@ (8008918 <TIM_OC4_SetConfig+0x118>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d113      	bne.n	80088e8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80088c6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80088ce:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	695b      	ldr	r3, [r3, #20]
 80088d4:	019b      	lsls	r3, r3, #6
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	4313      	orrs	r3, r2
 80088da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	699b      	ldr	r3, [r3, #24]
 80088e0:	019b      	lsls	r3, r3, #6
 80088e2:	693a      	ldr	r2, [r7, #16]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	693a      	ldr	r2, [r7, #16]
 80088ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	685a      	ldr	r2, [r3, #4]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	697a      	ldr	r2, [r7, #20]
 8008900:	621a      	str	r2, [r3, #32]
}
 8008902:	bf00      	nop
 8008904:	371c      	adds	r7, #28
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	40012c00 	.word	0x40012c00
 8008914:	40013400 	.word	0x40013400
 8008918:	40015000 	.word	0x40015000
 800891c:	40014000 	.word	0x40014000
 8008920:	40014400 	.word	0x40014400
 8008924:	40014800 	.word	0x40014800

08008928 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008928:	b480      	push	{r7}
 800892a:	b087      	sub	sp, #28
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a1b      	ldr	r3, [r3, #32]
 800893c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800894e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800895a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	4313      	orrs	r3, r2
 8008964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800896c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	041b      	lsls	r3, r3, #16
 8008974:	693a      	ldr	r2, [r7, #16]
 8008976:	4313      	orrs	r3, r2
 8008978:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a19      	ldr	r2, [pc, #100]	@ (80089e4 <TIM_OC5_SetConfig+0xbc>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d013      	beq.n	80089aa <TIM_OC5_SetConfig+0x82>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a18      	ldr	r2, [pc, #96]	@ (80089e8 <TIM_OC5_SetConfig+0xc0>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d00f      	beq.n	80089aa <TIM_OC5_SetConfig+0x82>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4a17      	ldr	r2, [pc, #92]	@ (80089ec <TIM_OC5_SetConfig+0xc4>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d00b      	beq.n	80089aa <TIM_OC5_SetConfig+0x82>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4a16      	ldr	r2, [pc, #88]	@ (80089f0 <TIM_OC5_SetConfig+0xc8>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d007      	beq.n	80089aa <TIM_OC5_SetConfig+0x82>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4a15      	ldr	r2, [pc, #84]	@ (80089f4 <TIM_OC5_SetConfig+0xcc>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d003      	beq.n	80089aa <TIM_OC5_SetConfig+0x82>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a14      	ldr	r2, [pc, #80]	@ (80089f8 <TIM_OC5_SetConfig+0xd0>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d109      	bne.n	80089be <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	021b      	lsls	r3, r3, #8
 80089b8:	697a      	ldr	r2, [r7, #20]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	697a      	ldr	r2, [r7, #20]
 80089c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	685a      	ldr	r2, [r3, #4]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	693a      	ldr	r2, [r7, #16]
 80089d6:	621a      	str	r2, [r3, #32]
}
 80089d8:	bf00      	nop
 80089da:	371c      	adds	r7, #28
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr
 80089e4:	40012c00 	.word	0x40012c00
 80089e8:	40013400 	.word	0x40013400
 80089ec:	40014000 	.word	0x40014000
 80089f0:	40014400 	.word	0x40014400
 80089f4:	40014800 	.word	0x40014800
 80089f8:	40015000 	.word	0x40015000

080089fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b087      	sub	sp, #28
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a1b      	ldr	r3, [r3, #32]
 8008a0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6a1b      	ldr	r3, [r3, #32]
 8008a10:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	021b      	lsls	r3, r3, #8
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008a42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	051b      	lsls	r3, r3, #20
 8008a4a:	693a      	ldr	r2, [r7, #16]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4a1a      	ldr	r2, [pc, #104]	@ (8008abc <TIM_OC6_SetConfig+0xc0>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d013      	beq.n	8008a80 <TIM_OC6_SetConfig+0x84>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a19      	ldr	r2, [pc, #100]	@ (8008ac0 <TIM_OC6_SetConfig+0xc4>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d00f      	beq.n	8008a80 <TIM_OC6_SetConfig+0x84>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a18      	ldr	r2, [pc, #96]	@ (8008ac4 <TIM_OC6_SetConfig+0xc8>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d00b      	beq.n	8008a80 <TIM_OC6_SetConfig+0x84>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a17      	ldr	r2, [pc, #92]	@ (8008ac8 <TIM_OC6_SetConfig+0xcc>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d007      	beq.n	8008a80 <TIM_OC6_SetConfig+0x84>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a16      	ldr	r2, [pc, #88]	@ (8008acc <TIM_OC6_SetConfig+0xd0>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d003      	beq.n	8008a80 <TIM_OC6_SetConfig+0x84>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4a15      	ldr	r2, [pc, #84]	@ (8008ad0 <TIM_OC6_SetConfig+0xd4>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d109      	bne.n	8008a94 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008a86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	695b      	ldr	r3, [r3, #20]
 8008a8c:	029b      	lsls	r3, r3, #10
 8008a8e:	697a      	ldr	r2, [r7, #20]
 8008a90:	4313      	orrs	r3, r2
 8008a92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	697a      	ldr	r2, [r7, #20]
 8008a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	685a      	ldr	r2, [r3, #4]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	693a      	ldr	r2, [r7, #16]
 8008aac:	621a      	str	r2, [r3, #32]
}
 8008aae:	bf00      	nop
 8008ab0:	371c      	adds	r7, #28
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	40012c00 	.word	0x40012c00
 8008ac0:	40013400 	.word	0x40013400
 8008ac4:	40014000 	.word	0x40014000
 8008ac8:	40014400 	.word	0x40014400
 8008acc:	40014800 	.word	0x40014800
 8008ad0:	40015000 	.word	0x40015000

08008ad4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b087      	sub	sp, #28
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6a1b      	ldr	r3, [r3, #32]
 8008ae4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6a1b      	ldr	r3, [r3, #32]
 8008aea:	f023 0201 	bic.w	r2, r3, #1
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	011b      	lsls	r3, r3, #4
 8008b04:	693a      	ldr	r2, [r7, #16]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	f023 030a 	bic.w	r3, r3, #10
 8008b10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b12:	697a      	ldr	r2, [r7, #20]
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	693a      	ldr	r2, [r7, #16]
 8008b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	697a      	ldr	r2, [r7, #20]
 8008b24:	621a      	str	r2, [r3, #32]
}
 8008b26:	bf00      	nop
 8008b28:	371c      	adds	r7, #28
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b087      	sub	sp, #28
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	60f8      	str	r0, [r7, #12]
 8008b3a:	60b9      	str	r1, [r7, #8]
 8008b3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6a1b      	ldr	r3, [r3, #32]
 8008b42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6a1b      	ldr	r3, [r3, #32]
 8008b48:	f023 0210 	bic.w	r2, r3, #16
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	699b      	ldr	r3, [r3, #24]
 8008b54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008b5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	031b      	lsls	r3, r3, #12
 8008b62:	693a      	ldr	r2, [r7, #16]
 8008b64:	4313      	orrs	r3, r2
 8008b66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008b6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	011b      	lsls	r3, r3, #4
 8008b74:	697a      	ldr	r2, [r7, #20]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	693a      	ldr	r2, [r7, #16]
 8008b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	697a      	ldr	r2, [r7, #20]
 8008b84:	621a      	str	r2, [r3, #32]
}
 8008b86:	bf00      	nop
 8008b88:	371c      	adds	r7, #28
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr

08008b92 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b92:	b480      	push	{r7}
 8008b94:	b085      	sub	sp, #20
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008ba8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008bae:	683a      	ldr	r2, [r7, #0]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	f043 0307 	orr.w	r3, r3, #7
 8008bb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	609a      	str	r2, [r3, #8]
}
 8008bc0:	bf00      	nop
 8008bc2:	3714      	adds	r7, #20
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b087      	sub	sp, #28
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	607a      	str	r2, [r7, #4]
 8008bd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008be6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	021a      	lsls	r2, r3, #8
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	431a      	orrs	r2, r3
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	697a      	ldr	r2, [r7, #20]
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	697a      	ldr	r2, [r7, #20]
 8008bfe:	609a      	str	r2, [r3, #8]
}
 8008c00:	bf00      	nop
 8008c02:	371c      	adds	r7, #28
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b087      	sub	sp, #28
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	f003 031f 	and.w	r3, r3, #31
 8008c1e:	2201      	movs	r2, #1
 8008c20:	fa02 f303 	lsl.w	r3, r2, r3
 8008c24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6a1a      	ldr	r2, [r3, #32]
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	43db      	mvns	r3, r3
 8008c2e:	401a      	ands	r2, r3
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6a1a      	ldr	r2, [r3, #32]
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	f003 031f 	and.w	r3, r3, #31
 8008c3e:	6879      	ldr	r1, [r7, #4]
 8008c40:	fa01 f303 	lsl.w	r3, r1, r3
 8008c44:	431a      	orrs	r2, r3
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	621a      	str	r2, [r3, #32]
}
 8008c4a:	bf00      	nop
 8008c4c:	371c      	adds	r7, #28
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr
	...

08008c58 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4a26      	ldr	r2, [pc, #152]	@ (8008cfc <TIM_ResetCallback+0xa4>)
 8008c64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a25      	ldr	r2, [pc, #148]	@ (8008d00 <TIM_ResetCallback+0xa8>)
 8008c6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a24      	ldr	r2, [pc, #144]	@ (8008d04 <TIM_ResetCallback+0xac>)
 8008c74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4a23      	ldr	r2, [pc, #140]	@ (8008d08 <TIM_ResetCallback+0xb0>)
 8008c7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a22      	ldr	r2, [pc, #136]	@ (8008d0c <TIM_ResetCallback+0xb4>)
 8008c84:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a21      	ldr	r2, [pc, #132]	@ (8008d10 <TIM_ResetCallback+0xb8>)
 8008c8c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4a20      	ldr	r2, [pc, #128]	@ (8008d14 <TIM_ResetCallback+0xbc>)
 8008c94:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8008d18 <TIM_ResetCallback+0xc0>)
 8008c9c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a1e      	ldr	r2, [pc, #120]	@ (8008d1c <TIM_ResetCallback+0xc4>)
 8008ca4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a1d      	ldr	r2, [pc, #116]	@ (8008d20 <TIM_ResetCallback+0xc8>)
 8008cac:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a1c      	ldr	r2, [pc, #112]	@ (8008d24 <TIM_ResetCallback+0xcc>)
 8008cb4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a1b      	ldr	r2, [pc, #108]	@ (8008d28 <TIM_ResetCallback+0xd0>)
 8008cbc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a1a      	ldr	r2, [pc, #104]	@ (8008d2c <TIM_ResetCallback+0xd4>)
 8008cc4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4a19      	ldr	r2, [pc, #100]	@ (8008d30 <TIM_ResetCallback+0xd8>)
 8008ccc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a18      	ldr	r2, [pc, #96]	@ (8008d34 <TIM_ResetCallback+0xdc>)
 8008cd4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a17      	ldr	r2, [pc, #92]	@ (8008d38 <TIM_ResetCallback+0xe0>)
 8008cdc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a16      	ldr	r2, [pc, #88]	@ (8008d3c <TIM_ResetCallback+0xe4>)
 8008ce4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a15      	ldr	r2, [pc, #84]	@ (8008d40 <TIM_ResetCallback+0xe8>)
 8008cec:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr
 8008cfc:	08001e41 	.word	0x08001e41
 8008d00:	08007fa5 	.word	0x08007fa5
 8008d04:	0800801d 	.word	0x0800801d
 8008d08:	08008031 	.word	0x08008031
 8008d0c:	08007fcd 	.word	0x08007fcd
 8008d10:	08007fe1 	.word	0x08007fe1
 8008d14:	08007fb9 	.word	0x08007fb9
 8008d18:	08007ff5 	.word	0x08007ff5
 8008d1c:	08008009 	.word	0x08008009
 8008d20:	08008045 	.word	0x08008045
 8008d24:	08008f99 	.word	0x08008f99
 8008d28:	08008fad 	.word	0x08008fad
 8008d2c:	08008fc1 	.word	0x08008fc1
 8008d30:	08008fd5 	.word	0x08008fd5
 8008d34:	08008fe9 	.word	0x08008fe9
 8008d38:	08008ffd 	.word	0x08008ffd
 8008d3c:	08009011 	.word	0x08009011
 8008d40:	08009025 	.word	0x08009025

08008d44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d101      	bne.n	8008d5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d58:	2302      	movs	r3, #2
 8008d5a:	e074      	b.n	8008e46 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2202      	movs	r2, #2
 8008d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a34      	ldr	r2, [pc, #208]	@ (8008e54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d009      	beq.n	8008d9a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a33      	ldr	r2, [pc, #204]	@ (8008e58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d004      	beq.n	8008d9a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a31      	ldr	r2, [pc, #196]	@ (8008e5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d108      	bne.n	8008dac <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008da0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	4313      	orrs	r3, r2
 8008daa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008db6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a21      	ldr	r2, [pc, #132]	@ (8008e54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d022      	beq.n	8008e1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ddc:	d01d      	beq.n	8008e1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a1f      	ldr	r2, [pc, #124]	@ (8008e60 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d018      	beq.n	8008e1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a1d      	ldr	r2, [pc, #116]	@ (8008e64 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d013      	beq.n	8008e1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a1c      	ldr	r2, [pc, #112]	@ (8008e68 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d00e      	beq.n	8008e1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a15      	ldr	r2, [pc, #84]	@ (8008e58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d009      	beq.n	8008e1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a18      	ldr	r2, [pc, #96]	@ (8008e6c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d004      	beq.n	8008e1a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a11      	ldr	r2, [pc, #68]	@ (8008e5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d10c      	bne.n	8008e34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	68ba      	ldr	r2, [r7, #8]
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68ba      	ldr	r2, [r7, #8]
 8008e32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3714      	adds	r7, #20
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop
 8008e54:	40012c00 	.word	0x40012c00
 8008e58:	40013400 	.word	0x40013400
 8008e5c:	40015000 	.word	0x40015000
 8008e60:	40000400 	.word	0x40000400
 8008e64:	40000800 	.word	0x40000800
 8008e68:	40000c00 	.word	0x40000c00
 8008e6c:	40014000 	.word	0x40014000

08008e70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b085      	sub	sp, #20
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d101      	bne.n	8008e8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008e88:	2302      	movs	r3, #2
 8008e8a:	e078      	b.n	8008f7e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	691b      	ldr	r3, [r3, #16]
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	695b      	ldr	r3, [r3, #20]
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	699b      	ldr	r3, [r3, #24]
 8008f00:	041b      	lsls	r3, r3, #16
 8008f02:	4313      	orrs	r3, r2
 8008f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	69db      	ldr	r3, [r3, #28]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a1c      	ldr	r2, [pc, #112]	@ (8008f8c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d009      	beq.n	8008f32 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a1b      	ldr	r2, [pc, #108]	@ (8008f90 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d004      	beq.n	8008f32 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a19      	ldr	r2, [pc, #100]	@ (8008f94 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d11c      	bne.n	8008f6c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f3c:	051b      	lsls	r3, r3, #20
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	6a1b      	ldr	r3, [r3, #32]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3714      	adds	r7, #20
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr
 8008f8a:	bf00      	nop
 8008f8c:	40012c00 	.word	0x40012c00
 8008f90:	40013400 	.word	0x40013400
 8008f94:	40015000 	.word	0x40015000

08008f98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008fa0:	bf00      	nop
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008fb4:	bf00      	nop
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008fc8:	bf00      	nop
 8008fca:	370c      	adds	r7, #12
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008fdc:	bf00      	nop
 8008fde:	370c      	adds	r7, #12
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr

08008fe8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008ff0:	bf00      	nop
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009004:	bf00      	nop
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009018:	bf00      	nop
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800902c:	bf00      	nop
 800902e:	370c      	adds	r7, #12
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d101      	bne.n	800904a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	e050      	b.n	80090ec <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009050:	2b00      	cmp	r3, #0
 8009052:	d114      	bne.n	800907e <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 fd45 	bl	8009aec <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009068:	2b00      	cmp	r3, #0
 800906a:	d103      	bne.n	8009074 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a21      	ldr	r2, [pc, #132]	@ (80090f4 <HAL_UART_Init+0xbc>)
 8009070:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2224      	movs	r2, #36	@ 0x24
 8009082:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f022 0201 	bic.w	r2, r2, #1
 8009094:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800909a:	2b00      	cmp	r3, #0
 800909c:	d002      	beq.n	80090a4 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f001 f872 	bl	800a188 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 fd73 	bl	8009b90 <UART_SetConfig>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d101      	bne.n	80090b4 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	e01b      	b.n	80090ec <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	685a      	ldr	r2, [r3, #4]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80090c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	689a      	ldr	r2, [r3, #8]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80090d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f042 0201 	orr.w	r2, r2, #1
 80090e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f001 f8f1 	bl	800a2cc <UART_CheckIdleState>
 80090ea:	4603      	mov	r3, r0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	08003181 	.word	0x08003181

080090f8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b087      	sub	sp, #28
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	460b      	mov	r3, r1
 8009102:	607a      	str	r2, [r7, #4]
 8009104:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009106:	2300      	movs	r3, #0
 8009108:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d109      	bne.n	8009124 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009116:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	e09c      	b.n	800925e <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800912a:	2b20      	cmp	r3, #32
 800912c:	d16c      	bne.n	8009208 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800912e:	7afb      	ldrb	r3, [r7, #11]
 8009130:	2b0c      	cmp	r3, #12
 8009132:	d85e      	bhi.n	80091f2 <HAL_UART_RegisterCallback+0xfa>
 8009134:	a201      	add	r2, pc, #4	@ (adr r2, 800913c <HAL_UART_RegisterCallback+0x44>)
 8009136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913a:	bf00      	nop
 800913c:	08009171 	.word	0x08009171
 8009140:	0800917b 	.word	0x0800917b
 8009144:	08009185 	.word	0x08009185
 8009148:	0800918f 	.word	0x0800918f
 800914c:	08009199 	.word	0x08009199
 8009150:	080091a3 	.word	0x080091a3
 8009154:	080091ad 	.word	0x080091ad
 8009158:	080091b7 	.word	0x080091b7
 800915c:	080091c1 	.word	0x080091c1
 8009160:	080091cb 	.word	0x080091cb
 8009164:	080091d5 	.word	0x080091d5
 8009168:	080091df 	.word	0x080091df
 800916c:	080091e9 	.word	0x080091e9
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009178:	e070      	b.n	800925c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009182:	e06b      	b.n	800925c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800918c:	e066      	b.n	800925c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009196:	e061      	b.n	800925c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80091a0:	e05c      	b.n	800925c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80091aa:	e057      	b.n	800925c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80091b4:	e052      	b.n	800925c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80091be:	e04d      	b.n	800925c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80091c8:	e048      	b.n	800925c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80091d2:	e043      	b.n	800925c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80091dc:	e03e      	b.n	800925c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80091e6:	e039      	b.n	800925c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80091f0:	e034      	b.n	800925c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091f8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	75fb      	strb	r3, [r7, #23]
        break;
 8009206:	e029      	b.n	800925c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800920e:	2b00      	cmp	r3, #0
 8009210:	d11a      	bne.n	8009248 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8009212:	7afb      	ldrb	r3, [r7, #11]
 8009214:	2b0b      	cmp	r3, #11
 8009216:	d002      	beq.n	800921e <HAL_UART_RegisterCallback+0x126>
 8009218:	2b0c      	cmp	r3, #12
 800921a:	d005      	beq.n	8009228 <HAL_UART_RegisterCallback+0x130>
 800921c:	e009      	b.n	8009232 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009226:	e019      	b.n	800925c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009230:	e014      	b.n	800925c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009238:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	75fb      	strb	r3, [r7, #23]
        break;
 8009246:	e009      	b.n	800925c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800924e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8009258:	2301      	movs	r3, #1
 800925a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800925c:	7dfb      	ldrb	r3, [r7, #23]
}
 800925e:	4618      	mov	r0, r3
 8009260:	371c      	adds	r7, #28
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop

0800926c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b08a      	sub	sp, #40	@ 0x28
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	4613      	mov	r3, r2
 8009278:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009280:	2b20      	cmp	r3, #32
 8009282:	d137      	bne.n	80092f4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d002      	beq.n	8009290 <HAL_UART_Receive_DMA+0x24>
 800928a:	88fb      	ldrh	r3, [r7, #6]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d101      	bne.n	8009294 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	e030      	b.n	80092f6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2200      	movs	r2, #0
 8009298:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a18      	ldr	r2, [pc, #96]	@ (8009300 <HAL_UART_Receive_DMA+0x94>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d01f      	beq.n	80092e4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d018      	beq.n	80092e4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	e853 3f00 	ldrex	r3, [r3]
 80092be:	613b      	str	r3, [r7, #16]
   return(result);
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80092c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	461a      	mov	r2, r3
 80092ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d0:	623b      	str	r3, [r7, #32]
 80092d2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d4:	69f9      	ldr	r1, [r7, #28]
 80092d6:	6a3a      	ldr	r2, [r7, #32]
 80092d8:	e841 2300 	strex	r3, r2, [r1]
 80092dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d1e6      	bne.n	80092b2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80092e4:	88fb      	ldrh	r3, [r7, #6]
 80092e6:	461a      	mov	r2, r3
 80092e8:	68b9      	ldr	r1, [r7, #8]
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f001 f906 	bl	800a4fc <UART_Start_Receive_DMA>
 80092f0:	4603      	mov	r3, r0
 80092f2:	e000      	b.n	80092f6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80092f4:	2302      	movs	r3, #2
  }
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3728      	adds	r7, #40	@ 0x28
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	40008000 	.word	0x40008000

08009304 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b0ba      	sub	sp, #232	@ 0xe8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	69db      	ldr	r3, [r3, #28]
 8009312:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800932a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800932e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009332:	4013      	ands	r3, r2
 8009334:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009338:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800933c:	2b00      	cmp	r3, #0
 800933e:	d11b      	bne.n	8009378 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009344:	f003 0320 	and.w	r3, r3, #32
 8009348:	2b00      	cmp	r3, #0
 800934a:	d015      	beq.n	8009378 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800934c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009350:	f003 0320 	and.w	r3, r3, #32
 8009354:	2b00      	cmp	r3, #0
 8009356:	d105      	bne.n	8009364 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009358:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800935c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009360:	2b00      	cmp	r3, #0
 8009362:	d009      	beq.n	8009378 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009368:	2b00      	cmp	r3, #0
 800936a:	f000 82f3 	beq.w	8009954 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	4798      	blx	r3
      }
      return;
 8009376:	e2ed      	b.n	8009954 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009378:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800937c:	2b00      	cmp	r3, #0
 800937e:	f000 8129 	beq.w	80095d4 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009382:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009386:	4b90      	ldr	r3, [pc, #576]	@ (80095c8 <HAL_UART_IRQHandler+0x2c4>)
 8009388:	4013      	ands	r3, r2
 800938a:	2b00      	cmp	r3, #0
 800938c:	d106      	bne.n	800939c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800938e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009392:	4b8e      	ldr	r3, [pc, #568]	@ (80095cc <HAL_UART_IRQHandler+0x2c8>)
 8009394:	4013      	ands	r3, r2
 8009396:	2b00      	cmp	r3, #0
 8009398:	f000 811c 	beq.w	80095d4 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800939c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093a0:	f003 0301 	and.w	r3, r3, #1
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d011      	beq.n	80093cc <HAL_UART_IRQHandler+0xc8>
 80093a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00b      	beq.n	80093cc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2201      	movs	r2, #1
 80093ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093c2:	f043 0201 	orr.w	r2, r3, #1
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093d0:	f003 0302 	and.w	r3, r3, #2
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d011      	beq.n	80093fc <HAL_UART_IRQHandler+0xf8>
 80093d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093dc:	f003 0301 	and.w	r3, r3, #1
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d00b      	beq.n	80093fc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2202      	movs	r2, #2
 80093ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093f2:	f043 0204 	orr.w	r2, r3, #4
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009400:	f003 0304 	and.w	r3, r3, #4
 8009404:	2b00      	cmp	r3, #0
 8009406:	d011      	beq.n	800942c <HAL_UART_IRQHandler+0x128>
 8009408:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800940c:	f003 0301 	and.w	r3, r3, #1
 8009410:	2b00      	cmp	r3, #0
 8009412:	d00b      	beq.n	800942c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2204      	movs	r2, #4
 800941a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009422:	f043 0202 	orr.w	r2, r3, #2
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800942c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009430:	f003 0308 	and.w	r3, r3, #8
 8009434:	2b00      	cmp	r3, #0
 8009436:	d017      	beq.n	8009468 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800943c:	f003 0320 	and.w	r3, r3, #32
 8009440:	2b00      	cmp	r3, #0
 8009442:	d105      	bne.n	8009450 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009444:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009448:	4b5f      	ldr	r3, [pc, #380]	@ (80095c8 <HAL_UART_IRQHandler+0x2c4>)
 800944a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800944c:	2b00      	cmp	r3, #0
 800944e:	d00b      	beq.n	8009468 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2208      	movs	r2, #8
 8009456:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800945e:	f043 0208 	orr.w	r2, r3, #8
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800946c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009470:	2b00      	cmp	r3, #0
 8009472:	d012      	beq.n	800949a <HAL_UART_IRQHandler+0x196>
 8009474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009478:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00c      	beq.n	800949a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009488:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009490:	f043 0220 	orr.w	r2, r3, #32
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	f000 8259 	beq.w	8009958 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80094a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094aa:	f003 0320 	and.w	r3, r3, #32
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d013      	beq.n	80094da <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80094b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094b6:	f003 0320 	and.w	r3, r3, #32
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d105      	bne.n	80094ca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80094be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d007      	beq.n	80094da <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d003      	beq.n	80094da <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094ee:	2b40      	cmp	r3, #64	@ 0x40
 80094f0:	d005      	beq.n	80094fe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80094f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80094f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d058      	beq.n	80095b0 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f001 f8e3 	bl	800a6ca <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800950e:	2b40      	cmp	r3, #64	@ 0x40
 8009510:	d148      	bne.n	80095a4 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	3308      	adds	r3, #8
 8009518:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009520:	e853 3f00 	ldrex	r3, [r3]
 8009524:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009528:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800952c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009530:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	3308      	adds	r3, #8
 800953a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800953e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009542:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009546:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800954a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800954e:	e841 2300 	strex	r3, r2, [r1]
 8009552:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009556:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d1d9      	bne.n	8009512 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009564:	2b00      	cmp	r3, #0
 8009566:	d017      	beq.n	8009598 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800956e:	4a18      	ldr	r2, [pc, #96]	@ (80095d0 <HAL_UART_IRQHandler+0x2cc>)
 8009570:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009578:	4618      	mov	r0, r3
 800957a:	f7fc f8bb 	bl	80056f4 <HAL_DMA_Abort_IT>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d01f      	beq.n	80095c4 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800958a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009592:	4610      	mov	r0, r2
 8009594:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009596:	e015      	b.n	80095c4 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095a2:	e00f      	b.n	80095c4 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095ae:	e009      	b.n	80095c4 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80095c2:	e1c9      	b.n	8009958 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095c4:	bf00      	nop
    return;
 80095c6:	e1c7      	b.n	8009958 <HAL_UART_IRQHandler+0x654>
 80095c8:	10000001 	.word	0x10000001
 80095cc:	04000120 	.word	0x04000120
 80095d0:	0800a995 	.word	0x0800a995

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095d8:	2b01      	cmp	r3, #1
 80095da:	f040 8157 	bne.w	800988c <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80095de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095e2:	f003 0310 	and.w	r3, r3, #16
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	f000 8150 	beq.w	800988c <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80095ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095f0:	f003 0310 	and.w	r3, r3, #16
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	f000 8149 	beq.w	800988c <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	2210      	movs	r2, #16
 8009600:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800960c:	2b40      	cmp	r3, #64	@ 0x40
 800960e:	f040 80bd 	bne.w	800978c <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009620:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009624:	2b00      	cmp	r3, #0
 8009626:	f000 8199 	beq.w	800995c <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009630:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009634:	429a      	cmp	r2, r3
 8009636:	f080 8191 	bcs.w	800995c <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009640:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 0320 	and.w	r3, r3, #32
 8009652:	2b00      	cmp	r3, #0
 8009654:	f040 8087 	bne.w	8009766 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009660:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009664:	e853 3f00 	ldrex	r3, [r3]
 8009668:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800966c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009670:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009674:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	461a      	mov	r2, r3
 800967e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009682:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009686:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800968e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009692:	e841 2300 	strex	r3, r2, [r1]
 8009696:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800969a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1da      	bne.n	8009658 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	3308      	adds	r3, #8
 80096a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80096ac:	e853 3f00 	ldrex	r3, [r3]
 80096b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80096b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80096b4:	f023 0301 	bic.w	r3, r3, #1
 80096b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	3308      	adds	r3, #8
 80096c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80096c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80096ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80096ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80096d2:	e841 2300 	strex	r3, r2, [r1]
 80096d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80096d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1e1      	bne.n	80096a2 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	3308      	adds	r3, #8
 80096e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80096e8:	e853 3f00 	ldrex	r3, [r3]
 80096ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80096ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	3308      	adds	r3, #8
 80096fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009702:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009704:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009706:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009708:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800970a:	e841 2300 	strex	r3, r2, [r1]
 800970e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009710:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1e3      	bne.n	80096de <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2220      	movs	r2, #32
 800971a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800972c:	e853 3f00 	ldrex	r3, [r3]
 8009730:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009732:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009734:	f023 0310 	bic.w	r3, r3, #16
 8009738:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	461a      	mov	r2, r3
 8009742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009746:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009748:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800974c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800974e:	e841 2300 	strex	r3, r2, [r1]
 8009752:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009754:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009756:	2b00      	cmp	r3, #0
 8009758:	d1e4      	bne.n	8009724 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009760:	4618      	mov	r0, r3
 8009762:	f7fb ff6e 	bl	8005642 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2202      	movs	r2, #2
 800976a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800977e:	b292      	uxth	r2, r2
 8009780:	1a8a      	subs	r2, r1, r2
 8009782:	b292      	uxth	r2, r2
 8009784:	4611      	mov	r1, r2
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800978a:	e0e7      	b.n	800995c <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009798:	b29b      	uxth	r3, r3
 800979a:	1ad3      	subs	r3, r2, r3
 800979c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	f000 80d9 	beq.w	8009960 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 80097ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f000 80d4 	beq.w	8009960 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c0:	e853 3f00 	ldrex	r3, [r3]
 80097c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80097c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	461a      	mov	r2, r3
 80097d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80097da:	647b      	str	r3, [r7, #68]	@ 0x44
 80097dc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80097e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80097e2:	e841 2300 	strex	r3, r2, [r1]
 80097e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80097e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d1e4      	bne.n	80097b8 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	3308      	adds	r3, #8
 80097f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f8:	e853 3f00 	ldrex	r3, [r3]
 80097fc:	623b      	str	r3, [r7, #32]
   return(result);
 80097fe:	6a3b      	ldr	r3, [r7, #32]
 8009800:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009804:	f023 0301 	bic.w	r3, r3, #1
 8009808:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	3308      	adds	r3, #8
 8009812:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009816:	633a      	str	r2, [r7, #48]	@ 0x30
 8009818:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800981c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800981e:	e841 2300 	strex	r3, r2, [r1]
 8009822:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009826:	2b00      	cmp	r3, #0
 8009828:	d1e1      	bne.n	80097ee <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2220      	movs	r2, #32
 800982e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	e853 3f00 	ldrex	r3, [r3]
 800984a:	60fb      	str	r3, [r7, #12]
   return(result);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f023 0310 	bic.w	r3, r3, #16
 8009852:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	461a      	mov	r2, r3
 800985c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009860:	61fb      	str	r3, [r7, #28]
 8009862:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009864:	69b9      	ldr	r1, [r7, #24]
 8009866:	69fa      	ldr	r2, [r7, #28]
 8009868:	e841 2300 	strex	r3, r2, [r1]
 800986c:	617b      	str	r3, [r7, #20]
   return(result);
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d1e4      	bne.n	800983e <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2202      	movs	r2, #2
 8009878:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009880:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8009884:	4611      	mov	r1, r2
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800988a:	e069      	b.n	8009960 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800988c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009890:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009894:	2b00      	cmp	r3, #0
 8009896:	d010      	beq.n	80098ba <HAL_UART_IRQHandler+0x5b6>
 8009898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800989c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d00a      	beq.n	80098ba <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80098ac:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098b8:	e055      	b.n	8009966 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80098ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d014      	beq.n	80098f0 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80098c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d105      	bne.n	80098de <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80098d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d008      	beq.n	80098f0 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d03e      	beq.n	8009964 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	4798      	blx	r3
    }
    return;
 80098ee:	e039      	b.n	8009964 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80098f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d009      	beq.n	8009910 <HAL_UART_IRQHandler+0x60c>
 80098fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009904:	2b00      	cmp	r3, #0
 8009906:	d003      	beq.n	8009910 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f001 f85b 	bl	800a9c4 <UART_EndTransmit_IT>
    return;
 800990e:	e02a      	b.n	8009966 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009914:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009918:	2b00      	cmp	r3, #0
 800991a:	d00b      	beq.n	8009934 <HAL_UART_IRQHandler+0x630>
 800991c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009920:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009924:	2b00      	cmp	r3, #0
 8009926:	d005      	beq.n	8009934 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009932:	e018      	b.n	8009966 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009938:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d012      	beq.n	8009966 <HAL_UART_IRQHandler+0x662>
 8009940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009944:	2b00      	cmp	r3, #0
 8009946:	da0e      	bge.n	8009966 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009952:	e008      	b.n	8009966 <HAL_UART_IRQHandler+0x662>
      return;
 8009954:	bf00      	nop
 8009956:	e006      	b.n	8009966 <HAL_UART_IRQHandler+0x662>
    return;
 8009958:	bf00      	nop
 800995a:	e004      	b.n	8009966 <HAL_UART_IRQHandler+0x662>
      return;
 800995c:	bf00      	nop
 800995e:	e002      	b.n	8009966 <HAL_UART_IRQHandler+0x662>
      return;
 8009960:	bf00      	nop
 8009962:	e000      	b.n	8009966 <HAL_UART_IRQHandler+0x662>
    return;
 8009964:	bf00      	nop
  }
}
 8009966:	37e8      	adds	r7, #232	@ 0xe8
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009974:	bf00      	nop
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009988:	bf00      	nop
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800999c:	bf00      	nop
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80099c4:	bf00      	nop
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b083      	sub	sp, #12
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80099d8:	bf00      	nop
 80099da:	370c      	adds	r7, #12
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80099ec:	bf00      	nop
 80099ee:	370c      	adds	r7, #12
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr

080099f8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009a00:	bf00      	nop
 8009a02:	370c      	adds	r7, #12
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr

08009a0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	460b      	mov	r3, r1
 8009a16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a18:	bf00      	nop
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a09      	ldr	r2, [pc, #36]	@ (8009a58 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d009      	beq.n	8009a4c <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	695b      	ldr	r3, [r3, #20]
 8009a3e:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	683a      	ldr	r2, [r7, #0]
 8009a48:	430a      	orrs	r2, r1
 8009a4a:	615a      	str	r2, [r3, #20]
  }
}
 8009a4c:	bf00      	nop
 8009a4e:	370c      	adds	r7, #12
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr
 8009a58:	40008000 	.word	0x40008000

08009a5c <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a18      	ldr	r2, [pc, #96]	@ (8009acc <HAL_UART_EnableReceiverTimeout+0x70>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d027      	beq.n	8009abe <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a74:	2b20      	cmp	r3, #32
 8009a76:	d120      	bne.n	8009aba <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d101      	bne.n	8009a86 <HAL_UART_EnableReceiverTimeout+0x2a>
 8009a82:	2302      	movs	r3, #2
 8009a84:	e01c      	b.n	8009ac0 <HAL_UART_EnableReceiverTimeout+0x64>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2201      	movs	r2, #1
 8009a8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2224      	movs	r2, #36	@ 0x24
 8009a92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	685a      	ldr	r2, [r3, #4]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8009aa4:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2220      	movs	r2, #32
 8009aaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	e002      	b.n	8009ac0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8009aba:	2302      	movs	r3, #2
 8009abc:	e000      	b.n	8009ac0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
  }
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr
 8009acc:	40008000 	.word	0x40008000

08009ad0 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b083      	sub	sp, #12
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	370c      	adds	r7, #12
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr
	...

08009aec <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a1a      	ldr	r2, [pc, #104]	@ (8009b60 <UART_InitCallbacksToDefault+0x74>)
 8009af8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4a19      	ldr	r2, [pc, #100]	@ (8009b64 <UART_InitCallbacksToDefault+0x78>)
 8009b00:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	4a18      	ldr	r2, [pc, #96]	@ (8009b68 <UART_InitCallbacksToDefault+0x7c>)
 8009b08:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a17      	ldr	r2, [pc, #92]	@ (8009b6c <UART_InitCallbacksToDefault+0x80>)
 8009b10:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	4a16      	ldr	r2, [pc, #88]	@ (8009b70 <UART_InitCallbacksToDefault+0x84>)
 8009b18:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	4a15      	ldr	r2, [pc, #84]	@ (8009b74 <UART_InitCallbacksToDefault+0x88>)
 8009b20:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	4a14      	ldr	r2, [pc, #80]	@ (8009b78 <UART_InitCallbacksToDefault+0x8c>)
 8009b28:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	4a13      	ldr	r2, [pc, #76]	@ (8009b7c <UART_InitCallbacksToDefault+0x90>)
 8009b30:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	4a12      	ldr	r2, [pc, #72]	@ (8009b80 <UART_InitCallbacksToDefault+0x94>)
 8009b38:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4a11      	ldr	r2, [pc, #68]	@ (8009b84 <UART_InitCallbacksToDefault+0x98>)
 8009b40:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	4a10      	ldr	r2, [pc, #64]	@ (8009b88 <UART_InitCallbacksToDefault+0x9c>)
 8009b48:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	4a0f      	ldr	r2, [pc, #60]	@ (8009b8c <UART_InitCallbacksToDefault+0xa0>)
 8009b50:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr
 8009b60:	08009981 	.word	0x08009981
 8009b64:	0800996d 	.word	0x0800996d
 8009b68:	080099a9 	.word	0x080099a9
 8009b6c:	08009995 	.word	0x08009995
 8009b70:	080099bd 	.word	0x080099bd
 8009b74:	080099d1 	.word	0x080099d1
 8009b78:	080099e5 	.word	0x080099e5
 8009b7c:	080099f9 	.word	0x080099f9
 8009b80:	0800aa1f 	.word	0x0800aa1f
 8009b84:	0800aa33 	.word	0x0800aa33
 8009b88:	0800aa47 	.word	0x0800aa47
 8009b8c:	08009a0d 	.word	0x08009a0d

08009b90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b94:	b08c      	sub	sp, #48	@ 0x30
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	689a      	ldr	r2, [r3, #8]
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	431a      	orrs	r2, r3
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	695b      	ldr	r3, [r3, #20]
 8009bae:	431a      	orrs	r2, r3
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	69db      	ldr	r3, [r3, #28]
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	4baa      	ldr	r3, [pc, #680]	@ (8009e68 <UART_SetConfig+0x2d8>)
 8009bc0:	4013      	ands	r3, r2
 8009bc2:	697a      	ldr	r2, [r7, #20]
 8009bc4:	6812      	ldr	r2, [r2, #0]
 8009bc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bc8:	430b      	orrs	r3, r1
 8009bca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	68da      	ldr	r2, [r3, #12]
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	430a      	orrs	r2, r1
 8009be0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	699b      	ldr	r3, [r3, #24]
 8009be6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a9f      	ldr	r2, [pc, #636]	@ (8009e6c <UART_SetConfig+0x2dc>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d004      	beq.n	8009bfc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	6a1b      	ldr	r3, [r3, #32]
 8009bf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009c06:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009c0a:	697a      	ldr	r2, [r7, #20]
 8009c0c:	6812      	ldr	r2, [r2, #0]
 8009c0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c10:	430b      	orrs	r3, r1
 8009c12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c1a:	f023 010f 	bic.w	r1, r3, #15
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	430a      	orrs	r2, r1
 8009c28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a90      	ldr	r2, [pc, #576]	@ (8009e70 <UART_SetConfig+0x2e0>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d125      	bne.n	8009c80 <UART_SetConfig+0xf0>
 8009c34:	4b8f      	ldr	r3, [pc, #572]	@ (8009e74 <UART_SetConfig+0x2e4>)
 8009c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c3a:	f003 0303 	and.w	r3, r3, #3
 8009c3e:	2b03      	cmp	r3, #3
 8009c40:	d81a      	bhi.n	8009c78 <UART_SetConfig+0xe8>
 8009c42:	a201      	add	r2, pc, #4	@ (adr r2, 8009c48 <UART_SetConfig+0xb8>)
 8009c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c48:	08009c59 	.word	0x08009c59
 8009c4c:	08009c69 	.word	0x08009c69
 8009c50:	08009c61 	.word	0x08009c61
 8009c54:	08009c71 	.word	0x08009c71
 8009c58:	2301      	movs	r3, #1
 8009c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c5e:	e116      	b.n	8009e8e <UART_SetConfig+0x2fe>
 8009c60:	2302      	movs	r3, #2
 8009c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c66:	e112      	b.n	8009e8e <UART_SetConfig+0x2fe>
 8009c68:	2304      	movs	r3, #4
 8009c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c6e:	e10e      	b.n	8009e8e <UART_SetConfig+0x2fe>
 8009c70:	2308      	movs	r3, #8
 8009c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c76:	e10a      	b.n	8009e8e <UART_SetConfig+0x2fe>
 8009c78:	2310      	movs	r3, #16
 8009c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009c7e:	e106      	b.n	8009e8e <UART_SetConfig+0x2fe>
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a7c      	ldr	r2, [pc, #496]	@ (8009e78 <UART_SetConfig+0x2e8>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d138      	bne.n	8009cfc <UART_SetConfig+0x16c>
 8009c8a:	4b7a      	ldr	r3, [pc, #488]	@ (8009e74 <UART_SetConfig+0x2e4>)
 8009c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c90:	f003 030c 	and.w	r3, r3, #12
 8009c94:	2b0c      	cmp	r3, #12
 8009c96:	d82d      	bhi.n	8009cf4 <UART_SetConfig+0x164>
 8009c98:	a201      	add	r2, pc, #4	@ (adr r2, 8009ca0 <UART_SetConfig+0x110>)
 8009c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c9e:	bf00      	nop
 8009ca0:	08009cd5 	.word	0x08009cd5
 8009ca4:	08009cf5 	.word	0x08009cf5
 8009ca8:	08009cf5 	.word	0x08009cf5
 8009cac:	08009cf5 	.word	0x08009cf5
 8009cb0:	08009ce5 	.word	0x08009ce5
 8009cb4:	08009cf5 	.word	0x08009cf5
 8009cb8:	08009cf5 	.word	0x08009cf5
 8009cbc:	08009cf5 	.word	0x08009cf5
 8009cc0:	08009cdd 	.word	0x08009cdd
 8009cc4:	08009cf5 	.word	0x08009cf5
 8009cc8:	08009cf5 	.word	0x08009cf5
 8009ccc:	08009cf5 	.word	0x08009cf5
 8009cd0:	08009ced 	.word	0x08009ced
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cda:	e0d8      	b.n	8009e8e <UART_SetConfig+0x2fe>
 8009cdc:	2302      	movs	r3, #2
 8009cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ce2:	e0d4      	b.n	8009e8e <UART_SetConfig+0x2fe>
 8009ce4:	2304      	movs	r3, #4
 8009ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cea:	e0d0      	b.n	8009e8e <UART_SetConfig+0x2fe>
 8009cec:	2308      	movs	r3, #8
 8009cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cf2:	e0cc      	b.n	8009e8e <UART_SetConfig+0x2fe>
 8009cf4:	2310      	movs	r3, #16
 8009cf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009cfa:	e0c8      	b.n	8009e8e <UART_SetConfig+0x2fe>
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a5e      	ldr	r2, [pc, #376]	@ (8009e7c <UART_SetConfig+0x2ec>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d125      	bne.n	8009d52 <UART_SetConfig+0x1c2>
 8009d06:	4b5b      	ldr	r3, [pc, #364]	@ (8009e74 <UART_SetConfig+0x2e4>)
 8009d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d0c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009d10:	2b30      	cmp	r3, #48	@ 0x30
 8009d12:	d016      	beq.n	8009d42 <UART_SetConfig+0x1b2>
 8009d14:	2b30      	cmp	r3, #48	@ 0x30
 8009d16:	d818      	bhi.n	8009d4a <UART_SetConfig+0x1ba>
 8009d18:	2b20      	cmp	r3, #32
 8009d1a:	d00a      	beq.n	8009d32 <UART_SetConfig+0x1a2>
 8009d1c:	2b20      	cmp	r3, #32
 8009d1e:	d814      	bhi.n	8009d4a <UART_SetConfig+0x1ba>
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d002      	beq.n	8009d2a <UART_SetConfig+0x19a>
 8009d24:	2b10      	cmp	r3, #16
 8009d26:	d008      	beq.n	8009d3a <UART_SetConfig+0x1aa>
 8009d28:	e00f      	b.n	8009d4a <UART_SetConfig+0x1ba>
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d30:	e0ad      	b.n	8009e8e <UART_SetConfig+0x2fe>
 8009d32:	2302      	movs	r3, #2
 8009d34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d38:	e0a9      	b.n	8009e8e <UART_SetConfig+0x2fe>
 8009d3a:	2304      	movs	r3, #4
 8009d3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d40:	e0a5      	b.n	8009e8e <UART_SetConfig+0x2fe>
 8009d42:	2308      	movs	r3, #8
 8009d44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d48:	e0a1      	b.n	8009e8e <UART_SetConfig+0x2fe>
 8009d4a:	2310      	movs	r3, #16
 8009d4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d50:	e09d      	b.n	8009e8e <UART_SetConfig+0x2fe>
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a4a      	ldr	r2, [pc, #296]	@ (8009e80 <UART_SetConfig+0x2f0>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d125      	bne.n	8009da8 <UART_SetConfig+0x218>
 8009d5c:	4b45      	ldr	r3, [pc, #276]	@ (8009e74 <UART_SetConfig+0x2e4>)
 8009d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d62:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009d66:	2bc0      	cmp	r3, #192	@ 0xc0
 8009d68:	d016      	beq.n	8009d98 <UART_SetConfig+0x208>
 8009d6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8009d6c:	d818      	bhi.n	8009da0 <UART_SetConfig+0x210>
 8009d6e:	2b80      	cmp	r3, #128	@ 0x80
 8009d70:	d00a      	beq.n	8009d88 <UART_SetConfig+0x1f8>
 8009d72:	2b80      	cmp	r3, #128	@ 0x80
 8009d74:	d814      	bhi.n	8009da0 <UART_SetConfig+0x210>
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d002      	beq.n	8009d80 <UART_SetConfig+0x1f0>
 8009d7a:	2b40      	cmp	r3, #64	@ 0x40
 8009d7c:	d008      	beq.n	8009d90 <UART_SetConfig+0x200>
 8009d7e:	e00f      	b.n	8009da0 <UART_SetConfig+0x210>
 8009d80:	2300      	movs	r3, #0
 8009d82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d86:	e082      	b.n	8009e8e <UART_SetConfig+0x2fe>
 8009d88:	2302      	movs	r3, #2
 8009d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d8e:	e07e      	b.n	8009e8e <UART_SetConfig+0x2fe>
 8009d90:	2304      	movs	r3, #4
 8009d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d96:	e07a      	b.n	8009e8e <UART_SetConfig+0x2fe>
 8009d98:	2308      	movs	r3, #8
 8009d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009d9e:	e076      	b.n	8009e8e <UART_SetConfig+0x2fe>
 8009da0:	2310      	movs	r3, #16
 8009da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009da6:	e072      	b.n	8009e8e <UART_SetConfig+0x2fe>
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a35      	ldr	r2, [pc, #212]	@ (8009e84 <UART_SetConfig+0x2f4>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d12a      	bne.n	8009e08 <UART_SetConfig+0x278>
 8009db2:	4b30      	ldr	r3, [pc, #192]	@ (8009e74 <UART_SetConfig+0x2e4>)
 8009db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009db8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009dbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009dc0:	d01a      	beq.n	8009df8 <UART_SetConfig+0x268>
 8009dc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009dc6:	d81b      	bhi.n	8009e00 <UART_SetConfig+0x270>
 8009dc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009dcc:	d00c      	beq.n	8009de8 <UART_SetConfig+0x258>
 8009dce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009dd2:	d815      	bhi.n	8009e00 <UART_SetConfig+0x270>
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d003      	beq.n	8009de0 <UART_SetConfig+0x250>
 8009dd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ddc:	d008      	beq.n	8009df0 <UART_SetConfig+0x260>
 8009dde:	e00f      	b.n	8009e00 <UART_SetConfig+0x270>
 8009de0:	2300      	movs	r3, #0
 8009de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009de6:	e052      	b.n	8009e8e <UART_SetConfig+0x2fe>
 8009de8:	2302      	movs	r3, #2
 8009dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dee:	e04e      	b.n	8009e8e <UART_SetConfig+0x2fe>
 8009df0:	2304      	movs	r3, #4
 8009df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009df6:	e04a      	b.n	8009e8e <UART_SetConfig+0x2fe>
 8009df8:	2308      	movs	r3, #8
 8009dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009dfe:	e046      	b.n	8009e8e <UART_SetConfig+0x2fe>
 8009e00:	2310      	movs	r3, #16
 8009e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e06:	e042      	b.n	8009e8e <UART_SetConfig+0x2fe>
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a17      	ldr	r2, [pc, #92]	@ (8009e6c <UART_SetConfig+0x2dc>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d13a      	bne.n	8009e88 <UART_SetConfig+0x2f8>
 8009e12:	4b18      	ldr	r3, [pc, #96]	@ (8009e74 <UART_SetConfig+0x2e4>)
 8009e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e18:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009e1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009e20:	d01a      	beq.n	8009e58 <UART_SetConfig+0x2c8>
 8009e22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009e26:	d81b      	bhi.n	8009e60 <UART_SetConfig+0x2d0>
 8009e28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e2c:	d00c      	beq.n	8009e48 <UART_SetConfig+0x2b8>
 8009e2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e32:	d815      	bhi.n	8009e60 <UART_SetConfig+0x2d0>
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d003      	beq.n	8009e40 <UART_SetConfig+0x2b0>
 8009e38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e3c:	d008      	beq.n	8009e50 <UART_SetConfig+0x2c0>
 8009e3e:	e00f      	b.n	8009e60 <UART_SetConfig+0x2d0>
 8009e40:	2300      	movs	r3, #0
 8009e42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e46:	e022      	b.n	8009e8e <UART_SetConfig+0x2fe>
 8009e48:	2302      	movs	r3, #2
 8009e4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e4e:	e01e      	b.n	8009e8e <UART_SetConfig+0x2fe>
 8009e50:	2304      	movs	r3, #4
 8009e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e56:	e01a      	b.n	8009e8e <UART_SetConfig+0x2fe>
 8009e58:	2308      	movs	r3, #8
 8009e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e5e:	e016      	b.n	8009e8e <UART_SetConfig+0x2fe>
 8009e60:	2310      	movs	r3, #16
 8009e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e66:	e012      	b.n	8009e8e <UART_SetConfig+0x2fe>
 8009e68:	cfff69f3 	.word	0xcfff69f3
 8009e6c:	40008000 	.word	0x40008000
 8009e70:	40013800 	.word	0x40013800
 8009e74:	40021000 	.word	0x40021000
 8009e78:	40004400 	.word	0x40004400
 8009e7c:	40004800 	.word	0x40004800
 8009e80:	40004c00 	.word	0x40004c00
 8009e84:	40005000 	.word	0x40005000
 8009e88:	2310      	movs	r3, #16
 8009e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4aae      	ldr	r2, [pc, #696]	@ (800a14c <UART_SetConfig+0x5bc>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	f040 8097 	bne.w	8009fc8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009e9a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009e9e:	2b08      	cmp	r3, #8
 8009ea0:	d823      	bhi.n	8009eea <UART_SetConfig+0x35a>
 8009ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ea8 <UART_SetConfig+0x318>)
 8009ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea8:	08009ecd 	.word	0x08009ecd
 8009eac:	08009eeb 	.word	0x08009eeb
 8009eb0:	08009ed5 	.word	0x08009ed5
 8009eb4:	08009eeb 	.word	0x08009eeb
 8009eb8:	08009edb 	.word	0x08009edb
 8009ebc:	08009eeb 	.word	0x08009eeb
 8009ec0:	08009eeb 	.word	0x08009eeb
 8009ec4:	08009eeb 	.word	0x08009eeb
 8009ec8:	08009ee3 	.word	0x08009ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ecc:	f7fc fd02 	bl	80068d4 <HAL_RCC_GetPCLK1Freq>
 8009ed0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ed2:	e010      	b.n	8009ef6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ed4:	4b9e      	ldr	r3, [pc, #632]	@ (800a150 <UART_SetConfig+0x5c0>)
 8009ed6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ed8:	e00d      	b.n	8009ef6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009eda:	f7fc fc8d 	bl	80067f8 <HAL_RCC_GetSysClockFreq>
 8009ede:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ee0:	e009      	b.n	8009ef6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ee2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ee6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ee8:	e005      	b.n	8009ef6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009eea:	2300      	movs	r3, #0
 8009eec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009ef4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	f000 8130 	beq.w	800a15e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f02:	4a94      	ldr	r2, [pc, #592]	@ (800a154 <UART_SetConfig+0x5c4>)
 8009f04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f08:	461a      	mov	r2, r3
 8009f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f10:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	685a      	ldr	r2, [r3, #4]
 8009f16:	4613      	mov	r3, r2
 8009f18:	005b      	lsls	r3, r3, #1
 8009f1a:	4413      	add	r3, r2
 8009f1c:	69ba      	ldr	r2, [r7, #24]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d305      	bcc.n	8009f2e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009f28:	69ba      	ldr	r2, [r7, #24]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d903      	bls.n	8009f36 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009f34:	e113      	b.n	800a15e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f38:	2200      	movs	r2, #0
 8009f3a:	60bb      	str	r3, [r7, #8]
 8009f3c:	60fa      	str	r2, [r7, #12]
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f42:	4a84      	ldr	r2, [pc, #528]	@ (800a154 <UART_SetConfig+0x5c4>)
 8009f44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	603b      	str	r3, [r7, #0]
 8009f4e:	607a      	str	r2, [r7, #4]
 8009f50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009f58:	f7f6 fd9c 	bl	8000a94 <__aeabi_uldivmod>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	460b      	mov	r3, r1
 8009f60:	4610      	mov	r0, r2
 8009f62:	4619      	mov	r1, r3
 8009f64:	f04f 0200 	mov.w	r2, #0
 8009f68:	f04f 0300 	mov.w	r3, #0
 8009f6c:	020b      	lsls	r3, r1, #8
 8009f6e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009f72:	0202      	lsls	r2, r0, #8
 8009f74:	6979      	ldr	r1, [r7, #20]
 8009f76:	6849      	ldr	r1, [r1, #4]
 8009f78:	0849      	lsrs	r1, r1, #1
 8009f7a:	2000      	movs	r0, #0
 8009f7c:	460c      	mov	r4, r1
 8009f7e:	4605      	mov	r5, r0
 8009f80:	eb12 0804 	adds.w	r8, r2, r4
 8009f84:	eb43 0905 	adc.w	r9, r3, r5
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	469a      	mov	sl, r3
 8009f90:	4693      	mov	fp, r2
 8009f92:	4652      	mov	r2, sl
 8009f94:	465b      	mov	r3, fp
 8009f96:	4640      	mov	r0, r8
 8009f98:	4649      	mov	r1, r9
 8009f9a:	f7f6 fd7b 	bl	8000a94 <__aeabi_uldivmod>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009fa6:	6a3b      	ldr	r3, [r7, #32]
 8009fa8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fac:	d308      	bcc.n	8009fc0 <UART_SetConfig+0x430>
 8009fae:	6a3b      	ldr	r3, [r7, #32]
 8009fb0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fb4:	d204      	bcs.n	8009fc0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	6a3a      	ldr	r2, [r7, #32]
 8009fbc:	60da      	str	r2, [r3, #12]
 8009fbe:	e0ce      	b.n	800a15e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009fc6:	e0ca      	b.n	800a15e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	69db      	ldr	r3, [r3, #28]
 8009fcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009fd0:	d166      	bne.n	800a0a0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009fd2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009fd6:	2b08      	cmp	r3, #8
 8009fd8:	d827      	bhi.n	800a02a <UART_SetConfig+0x49a>
 8009fda:	a201      	add	r2, pc, #4	@ (adr r2, 8009fe0 <UART_SetConfig+0x450>)
 8009fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe0:	0800a005 	.word	0x0800a005
 8009fe4:	0800a00d 	.word	0x0800a00d
 8009fe8:	0800a015 	.word	0x0800a015
 8009fec:	0800a02b 	.word	0x0800a02b
 8009ff0:	0800a01b 	.word	0x0800a01b
 8009ff4:	0800a02b 	.word	0x0800a02b
 8009ff8:	0800a02b 	.word	0x0800a02b
 8009ffc:	0800a02b 	.word	0x0800a02b
 800a000:	0800a023 	.word	0x0800a023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a004:	f7fc fc66 	bl	80068d4 <HAL_RCC_GetPCLK1Freq>
 800a008:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a00a:	e014      	b.n	800a036 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a00c:	f7fc fc78 	bl	8006900 <HAL_RCC_GetPCLK2Freq>
 800a010:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a012:	e010      	b.n	800a036 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a014:	4b4e      	ldr	r3, [pc, #312]	@ (800a150 <UART_SetConfig+0x5c0>)
 800a016:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a018:	e00d      	b.n	800a036 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a01a:	f7fc fbed 	bl	80067f8 <HAL_RCC_GetSysClockFreq>
 800a01e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a020:	e009      	b.n	800a036 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a026:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a028:	e005      	b.n	800a036 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a02a:	2300      	movs	r3, #0
 800a02c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a034:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f000 8090 	beq.w	800a15e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a042:	4a44      	ldr	r2, [pc, #272]	@ (800a154 <UART_SetConfig+0x5c4>)
 800a044:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a048:	461a      	mov	r2, r3
 800a04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a04c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a050:	005a      	lsls	r2, r3, #1
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	085b      	lsrs	r3, r3, #1
 800a058:	441a      	add	r2, r3
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a062:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a064:	6a3b      	ldr	r3, [r7, #32]
 800a066:	2b0f      	cmp	r3, #15
 800a068:	d916      	bls.n	800a098 <UART_SetConfig+0x508>
 800a06a:	6a3b      	ldr	r3, [r7, #32]
 800a06c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a070:	d212      	bcs.n	800a098 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a072:	6a3b      	ldr	r3, [r7, #32]
 800a074:	b29b      	uxth	r3, r3
 800a076:	f023 030f 	bic.w	r3, r3, #15
 800a07a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a07c:	6a3b      	ldr	r3, [r7, #32]
 800a07e:	085b      	lsrs	r3, r3, #1
 800a080:	b29b      	uxth	r3, r3
 800a082:	f003 0307 	and.w	r3, r3, #7
 800a086:	b29a      	uxth	r2, r3
 800a088:	8bfb      	ldrh	r3, [r7, #30]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	8bfa      	ldrh	r2, [r7, #30]
 800a094:	60da      	str	r2, [r3, #12]
 800a096:	e062      	b.n	800a15e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a098:	2301      	movs	r3, #1
 800a09a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a09e:	e05e      	b.n	800a15e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a0a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a0a4:	2b08      	cmp	r3, #8
 800a0a6:	d828      	bhi.n	800a0fa <UART_SetConfig+0x56a>
 800a0a8:	a201      	add	r2, pc, #4	@ (adr r2, 800a0b0 <UART_SetConfig+0x520>)
 800a0aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ae:	bf00      	nop
 800a0b0:	0800a0d5 	.word	0x0800a0d5
 800a0b4:	0800a0dd 	.word	0x0800a0dd
 800a0b8:	0800a0e5 	.word	0x0800a0e5
 800a0bc:	0800a0fb 	.word	0x0800a0fb
 800a0c0:	0800a0eb 	.word	0x0800a0eb
 800a0c4:	0800a0fb 	.word	0x0800a0fb
 800a0c8:	0800a0fb 	.word	0x0800a0fb
 800a0cc:	0800a0fb 	.word	0x0800a0fb
 800a0d0:	0800a0f3 	.word	0x0800a0f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0d4:	f7fc fbfe 	bl	80068d4 <HAL_RCC_GetPCLK1Freq>
 800a0d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a0da:	e014      	b.n	800a106 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0dc:	f7fc fc10 	bl	8006900 <HAL_RCC_GetPCLK2Freq>
 800a0e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a0e2:	e010      	b.n	800a106 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0e4:	4b1a      	ldr	r3, [pc, #104]	@ (800a150 <UART_SetConfig+0x5c0>)
 800a0e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a0e8:	e00d      	b.n	800a106 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0ea:	f7fc fb85 	bl	80067f8 <HAL_RCC_GetSysClockFreq>
 800a0ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a0f0:	e009      	b.n	800a106 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a0f8:	e005      	b.n	800a106 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a0fe:	2301      	movs	r3, #1
 800a100:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a104:	bf00      	nop
    }

    if (pclk != 0U)
 800a106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d028      	beq.n	800a15e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a110:	4a10      	ldr	r2, [pc, #64]	@ (800a154 <UART_SetConfig+0x5c4>)
 800a112:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a116:	461a      	mov	r2, r3
 800a118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a11a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	085b      	lsrs	r3, r3, #1
 800a124:	441a      	add	r2, r3
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a12e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a130:	6a3b      	ldr	r3, [r7, #32]
 800a132:	2b0f      	cmp	r3, #15
 800a134:	d910      	bls.n	800a158 <UART_SetConfig+0x5c8>
 800a136:	6a3b      	ldr	r3, [r7, #32]
 800a138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a13c:	d20c      	bcs.n	800a158 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a13e:	6a3b      	ldr	r3, [r7, #32]
 800a140:	b29a      	uxth	r2, r3
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	60da      	str	r2, [r3, #12]
 800a148:	e009      	b.n	800a15e <UART_SetConfig+0x5ce>
 800a14a:	bf00      	nop
 800a14c:	40008000 	.word	0x40008000
 800a150:	00f42400 	.word	0x00f42400
 800a154:	0800ae0c 	.word	0x0800ae0c
      }
      else
      {
        ret = HAL_ERROR;
 800a158:	2301      	movs	r3, #1
 800a15a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	2201      	movs	r2, #1
 800a162:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	2201      	movs	r2, #1
 800a16a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	2200      	movs	r2, #0
 800a172:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	2200      	movs	r2, #0
 800a178:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a17a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3730      	adds	r7, #48	@ 0x30
 800a182:	46bd      	mov	sp, r7
 800a184:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a188 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a194:	f003 0308 	and.w	r3, r3, #8
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d00a      	beq.n	800a1b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	430a      	orrs	r2, r1
 800a1b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1b6:	f003 0301 	and.w	r3, r3, #1
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00a      	beq.n	800a1d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	430a      	orrs	r2, r1
 800a1d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1d8:	f003 0302 	and.w	r3, r3, #2
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d00a      	beq.n	800a1f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	430a      	orrs	r2, r1
 800a1f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1fa:	f003 0304 	and.w	r3, r3, #4
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d00a      	beq.n	800a218 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	430a      	orrs	r2, r1
 800a216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a21c:	f003 0310 	and.w	r3, r3, #16
 800a220:	2b00      	cmp	r3, #0
 800a222:	d00a      	beq.n	800a23a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	430a      	orrs	r2, r1
 800a238:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a23e:	f003 0320 	and.w	r3, r3, #32
 800a242:	2b00      	cmp	r3, #0
 800a244:	d00a      	beq.n	800a25c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	430a      	orrs	r2, r1
 800a25a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a264:	2b00      	cmp	r3, #0
 800a266:	d01a      	beq.n	800a29e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	430a      	orrs	r2, r1
 800a27c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a282:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a286:	d10a      	bne.n	800a29e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	430a      	orrs	r2, r1
 800a29c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d00a      	beq.n	800a2c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	430a      	orrs	r2, r1
 800a2be:	605a      	str	r2, [r3, #4]
  }
}
 800a2c0:	bf00      	nop
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b098      	sub	sp, #96	@ 0x60
 800a2d0:	af02      	add	r7, sp, #8
 800a2d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a2dc:	f7f9 f950 	bl	8003580 <HAL_GetTick>
 800a2e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f003 0308 	and.w	r3, r3, #8
 800a2ec:	2b08      	cmp	r3, #8
 800a2ee:	d12f      	bne.n	800a350 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a2f4:	9300      	str	r3, [sp, #0]
 800a2f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 f88e 	bl	800a420 <UART_WaitOnFlagUntilTimeout>
 800a304:	4603      	mov	r3, r0
 800a306:	2b00      	cmp	r3, #0
 800a308:	d022      	beq.n	800a350 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a312:	e853 3f00 	ldrex	r3, [r3]
 800a316:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a31a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a31e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	461a      	mov	r2, r3
 800a326:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a328:	647b      	str	r3, [r7, #68]	@ 0x44
 800a32a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a32c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a32e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a330:	e841 2300 	strex	r3, r2, [r1]
 800a334:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d1e6      	bne.n	800a30a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2220      	movs	r2, #32
 800a340:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2200      	movs	r2, #0
 800a348:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a34c:	2303      	movs	r3, #3
 800a34e:	e063      	b.n	800a418 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f003 0304 	and.w	r3, r3, #4
 800a35a:	2b04      	cmp	r3, #4
 800a35c:	d149      	bne.n	800a3f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a35e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a362:	9300      	str	r3, [sp, #0]
 800a364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a366:	2200      	movs	r2, #0
 800a368:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 f857 	bl	800a420 <UART_WaitOnFlagUntilTimeout>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d03c      	beq.n	800a3f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a380:	e853 3f00 	ldrex	r3, [r3]
 800a384:	623b      	str	r3, [r7, #32]
   return(result);
 800a386:	6a3b      	ldr	r3, [r7, #32]
 800a388:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a38c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	461a      	mov	r2, r3
 800a394:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a396:	633b      	str	r3, [r7, #48]	@ 0x30
 800a398:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a39a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a39c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a39e:	e841 2300 	strex	r3, r2, [r1]
 800a3a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a3a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d1e6      	bne.n	800a378 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	3308      	adds	r3, #8
 800a3b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	e853 3f00 	ldrex	r3, [r3]
 800a3b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f023 0301 	bic.w	r3, r3, #1
 800a3c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	3308      	adds	r3, #8
 800a3c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3ca:	61fa      	str	r2, [r7, #28]
 800a3cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ce:	69b9      	ldr	r1, [r7, #24]
 800a3d0:	69fa      	ldr	r2, [r7, #28]
 800a3d2:	e841 2300 	strex	r3, r2, [r1]
 800a3d6:	617b      	str	r3, [r7, #20]
   return(result);
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d1e5      	bne.n	800a3aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2220      	movs	r2, #32
 800a3e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3ee:	2303      	movs	r3, #3
 800a3f0:	e012      	b.n	800a418 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2220      	movs	r2, #32
 800a3f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2220      	movs	r2, #32
 800a3fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2200      	movs	r2, #0
 800a412:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a416:	2300      	movs	r3, #0
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3758      	adds	r7, #88	@ 0x58
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	603b      	str	r3, [r7, #0]
 800a42c:	4613      	mov	r3, r2
 800a42e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a430:	e04f      	b.n	800a4d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a438:	d04b      	beq.n	800a4d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a43a:	f7f9 f8a1 	bl	8003580 <HAL_GetTick>
 800a43e:	4602      	mov	r2, r0
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	1ad3      	subs	r3, r2, r3
 800a444:	69ba      	ldr	r2, [r7, #24]
 800a446:	429a      	cmp	r2, r3
 800a448:	d302      	bcc.n	800a450 <UART_WaitOnFlagUntilTimeout+0x30>
 800a44a:	69bb      	ldr	r3, [r7, #24]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d101      	bne.n	800a454 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a450:	2303      	movs	r3, #3
 800a452:	e04e      	b.n	800a4f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f003 0304 	and.w	r3, r3, #4
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d037      	beq.n	800a4d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	2b80      	cmp	r3, #128	@ 0x80
 800a466:	d034      	beq.n	800a4d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	2b40      	cmp	r3, #64	@ 0x40
 800a46c:	d031      	beq.n	800a4d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	69db      	ldr	r3, [r3, #28]
 800a474:	f003 0308 	and.w	r3, r3, #8
 800a478:	2b08      	cmp	r3, #8
 800a47a:	d110      	bne.n	800a49e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2208      	movs	r2, #8
 800a482:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a484:	68f8      	ldr	r0, [r7, #12]
 800a486:	f000 f920 	bl	800a6ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2208      	movs	r2, #8
 800a48e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2200      	movs	r2, #0
 800a496:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	e029      	b.n	800a4f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	69db      	ldr	r3, [r3, #28]
 800a4a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a4a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a4ac:	d111      	bne.n	800a4d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a4b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	f000 f906 	bl	800a6ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2220      	movs	r2, #32
 800a4c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a4ce:	2303      	movs	r3, #3
 800a4d0:	e00f      	b.n	800a4f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	69da      	ldr	r2, [r3, #28]
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	4013      	ands	r3, r2
 800a4dc:	68ba      	ldr	r2, [r7, #8]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	bf0c      	ite	eq
 800a4e2:	2301      	moveq	r3, #1
 800a4e4:	2300      	movne	r3, #0
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	79fb      	ldrb	r3, [r7, #7]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d0a0      	beq.n	800a432 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3710      	adds	r7, #16
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
	...

0800a4fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b096      	sub	sp, #88	@ 0x58
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	4613      	mov	r3, r2
 800a508:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	68ba      	ldr	r2, [r7, #8]
 800a50e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	88fa      	ldrh	r2, [r7, #6]
 800a514:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2222      	movs	r2, #34	@ 0x22
 800a524:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d02d      	beq.n	800a58e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a538:	4a40      	ldr	r2, [pc, #256]	@ (800a63c <UART_Start_Receive_DMA+0x140>)
 800a53a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a542:	4a3f      	ldr	r2, [pc, #252]	@ (800a640 <UART_Start_Receive_DMA+0x144>)
 800a544:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a54c:	4a3d      	ldr	r2, [pc, #244]	@ (800a644 <UART_Start_Receive_DMA+0x148>)
 800a54e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a556:	2200      	movs	r2, #0
 800a558:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	3324      	adds	r3, #36	@ 0x24
 800a566:	4619      	mov	r1, r3
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a56c:	461a      	mov	r2, r3
 800a56e:	88fb      	ldrh	r3, [r7, #6]
 800a570:	f7fa ffec 	bl	800554c <HAL_DMA_Start_IT>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d009      	beq.n	800a58e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2210      	movs	r2, #16
 800a57e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2220      	movs	r2, #32
 800a586:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a58a:	2301      	movs	r3, #1
 800a58c:	e051      	b.n	800a632 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	691b      	ldr	r3, [r3, #16]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d018      	beq.n	800a5c8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a59c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a59e:	e853 3f00 	ldrex	r3, [r3]
 800a5a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a5a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a5aa:	657b      	str	r3, [r7, #84]	@ 0x54
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5b6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a5ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5bc:	e841 2300 	strex	r3, r2, [r1]
 800a5c0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a5c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d1e6      	bne.n	800a596 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	3308      	adds	r3, #8
 800a5ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d2:	e853 3f00 	ldrex	r3, [r3]
 800a5d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5da:	f043 0301 	orr.w	r3, r3, #1
 800a5de:	653b      	str	r3, [r7, #80]	@ 0x50
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	3308      	adds	r3, #8
 800a5e6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a5e8:	637a      	str	r2, [r7, #52]	@ 0x34
 800a5ea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a5ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a5f0:	e841 2300 	strex	r3, r2, [r1]
 800a5f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a5f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d1e5      	bne.n	800a5c8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	3308      	adds	r3, #8
 800a602:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	e853 3f00 	ldrex	r3, [r3]
 800a60a:	613b      	str	r3, [r7, #16]
   return(result);
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a612:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	3308      	adds	r3, #8
 800a61a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a61c:	623a      	str	r2, [r7, #32]
 800a61e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a620:	69f9      	ldr	r1, [r7, #28]
 800a622:	6a3a      	ldr	r2, [r7, #32]
 800a624:	e841 2300 	strex	r3, r2, [r1]
 800a628:	61bb      	str	r3, [r7, #24]
   return(result);
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d1e5      	bne.n	800a5fc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a630:	2300      	movs	r3, #0
}
 800a632:	4618      	mov	r0, r3
 800a634:	3758      	adds	r7, #88	@ 0x58
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	0800a797 	.word	0x0800a797
 800a640:	0800a8cb 	.word	0x0800a8cb
 800a644:	0800a911 	.word	0x0800a911

0800a648 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a648:	b480      	push	{r7}
 800a64a:	b08f      	sub	sp, #60	@ 0x3c
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a656:	6a3b      	ldr	r3, [r7, #32]
 800a658:	e853 3f00 	ldrex	r3, [r3]
 800a65c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a65e:	69fb      	ldr	r3, [r7, #28]
 800a660:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a664:	637b      	str	r3, [r7, #52]	@ 0x34
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	461a      	mov	r2, r3
 800a66c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a66e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a670:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a672:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a674:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a676:	e841 2300 	strex	r3, r2, [r1]
 800a67a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d1e6      	bne.n	800a650 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	3308      	adds	r3, #8
 800a688:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	e853 3f00 	ldrex	r3, [r3]
 800a690:	60bb      	str	r3, [r7, #8]
   return(result);
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a698:	633b      	str	r3, [r7, #48]	@ 0x30
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	3308      	adds	r3, #8
 800a6a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6a2:	61ba      	str	r2, [r7, #24]
 800a6a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a6:	6979      	ldr	r1, [r7, #20]
 800a6a8:	69ba      	ldr	r2, [r7, #24]
 800a6aa:	e841 2300 	strex	r3, r2, [r1]
 800a6ae:	613b      	str	r3, [r7, #16]
   return(result);
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d1e5      	bne.n	800a682 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2220      	movs	r2, #32
 800a6ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a6be:	bf00      	nop
 800a6c0:	373c      	adds	r7, #60	@ 0x3c
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr

0800a6ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6ca:	b480      	push	{r7}
 800a6cc:	b095      	sub	sp, #84	@ 0x54
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6da:	e853 3f00 	ldrex	r3, [r3]
 800a6de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a6e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a6e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6f0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a6f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a6f8:	e841 2300 	strex	r3, r2, [r1]
 800a6fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a6fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a700:	2b00      	cmp	r3, #0
 800a702:	d1e6      	bne.n	800a6d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	3308      	adds	r3, #8
 800a70a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a70c:	6a3b      	ldr	r3, [r7, #32]
 800a70e:	e853 3f00 	ldrex	r3, [r3]
 800a712:	61fb      	str	r3, [r7, #28]
   return(result);
 800a714:	69fb      	ldr	r3, [r7, #28]
 800a716:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a71a:	f023 0301 	bic.w	r3, r3, #1
 800a71e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	3308      	adds	r3, #8
 800a726:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a728:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a72a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a72c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a72e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a730:	e841 2300 	strex	r3, r2, [r1]
 800a734:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d1e3      	bne.n	800a704 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a740:	2b01      	cmp	r3, #1
 800a742:	d118      	bne.n	800a776 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	e853 3f00 	ldrex	r3, [r3]
 800a750:	60bb      	str	r3, [r7, #8]
   return(result);
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	f023 0310 	bic.w	r3, r3, #16
 800a758:	647b      	str	r3, [r7, #68]	@ 0x44
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	461a      	mov	r2, r3
 800a760:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a762:	61bb      	str	r3, [r7, #24]
 800a764:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a766:	6979      	ldr	r1, [r7, #20]
 800a768:	69ba      	ldr	r2, [r7, #24]
 800a76a:	e841 2300 	strex	r3, r2, [r1]
 800a76e:	613b      	str	r3, [r7, #16]
   return(result);
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d1e6      	bne.n	800a744 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2220      	movs	r2, #32
 800a77a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a78a:	bf00      	nop
 800a78c:	3754      	adds	r7, #84	@ 0x54
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr

0800a796 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a796:	b580      	push	{r7, lr}
 800a798:	b09c      	sub	sp, #112	@ 0x70
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7a2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f003 0320 	and.w	r3, r3, #32
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d171      	bne.n	800a896 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a7b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7c2:	e853 3f00 	ldrex	r3, [r3]
 800a7c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a7c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a7ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a7d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a7d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a7da:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a7de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a7e0:	e841 2300 	strex	r3, r2, [r1]
 800a7e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a7e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d1e6      	bne.n	800a7ba <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	3308      	adds	r3, #8
 800a7f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7f6:	e853 3f00 	ldrex	r3, [r3]
 800a7fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a7fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7fe:	f023 0301 	bic.w	r3, r3, #1
 800a802:	667b      	str	r3, [r7, #100]	@ 0x64
 800a804:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	3308      	adds	r3, #8
 800a80a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a80c:	647a      	str	r2, [r7, #68]	@ 0x44
 800a80e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a810:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a812:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a814:	e841 2300 	strex	r3, r2, [r1]
 800a818:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a81a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d1e5      	bne.n	800a7ec <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a820:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	3308      	adds	r3, #8
 800a826:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a82a:	e853 3f00 	ldrex	r3, [r3]
 800a82e:	623b      	str	r3, [r7, #32]
   return(result);
 800a830:	6a3b      	ldr	r3, [r7, #32]
 800a832:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a836:	663b      	str	r3, [r7, #96]	@ 0x60
 800a838:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	3308      	adds	r3, #8
 800a83e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a840:	633a      	str	r2, [r7, #48]	@ 0x30
 800a842:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a844:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a848:	e841 2300 	strex	r3, r2, [r1]
 800a84c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a84e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a850:	2b00      	cmp	r3, #0
 800a852:	d1e5      	bne.n	800a820 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a854:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a856:	2220      	movs	r2, #32
 800a858:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a85c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a85e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a860:	2b01      	cmp	r3, #1
 800a862:	d118      	bne.n	800a896 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a864:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	e853 3f00 	ldrex	r3, [r3]
 800a870:	60fb      	str	r3, [r7, #12]
   return(result);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	f023 0310 	bic.w	r3, r3, #16
 800a878:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a87a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	461a      	mov	r2, r3
 800a880:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a882:	61fb      	str	r3, [r7, #28]
 800a884:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a886:	69b9      	ldr	r1, [r7, #24]
 800a888:	69fa      	ldr	r2, [r7, #28]
 800a88a:	e841 2300 	strex	r3, r2, [r1]
 800a88e:	617b      	str	r3, [r7, #20]
   return(result);
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d1e6      	bne.n	800a864 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a896:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a898:	2200      	movs	r2, #0
 800a89a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a89c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a89e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d109      	bne.n	800a8b8 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800a8a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8a6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a8aa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a8ac:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a8b0:	4611      	mov	r1, r2
 800a8b2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a8b4:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a8b6:	e004      	b.n	800a8c2 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800a8b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a8be:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a8c0:	4798      	blx	r3
}
 800a8c2:	bf00      	nop
 800a8c4:	3770      	adds	r7, #112	@ 0x70
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}

0800a8ca <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b084      	sub	sp, #16
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8d6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d10b      	bne.n	800a8fe <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a8ec:	68fa      	ldr	r2, [r7, #12]
 800a8ee:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a8f2:	0852      	lsrs	r2, r2, #1
 800a8f4:	b292      	uxth	r2, r2
 800a8f6:	4611      	mov	r1, r2
 800a8f8:	68f8      	ldr	r0, [r7, #12]
 800a8fa:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a8fc:	e004      	b.n	800a908 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a904:	68f8      	ldr	r0, [r7, #12]
 800a906:	4798      	blx	r3
}
 800a908:	bf00      	nop
 800a90a:	3710      	adds	r7, #16
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b086      	sub	sp, #24
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a91c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a924:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a92c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	689b      	ldr	r3, [r3, #8]
 800a934:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a938:	2b80      	cmp	r3, #128	@ 0x80
 800a93a:	d109      	bne.n	800a950 <UART_DMAError+0x40>
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	2b21      	cmp	r3, #33	@ 0x21
 800a940:	d106      	bne.n	800a950 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	2200      	movs	r2, #0
 800a946:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a94a:	6978      	ldr	r0, [r7, #20]
 800a94c:	f7ff fe7c 	bl	800a648 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	689b      	ldr	r3, [r3, #8]
 800a956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a95a:	2b40      	cmp	r3, #64	@ 0x40
 800a95c:	d109      	bne.n	800a972 <UART_DMAError+0x62>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2b22      	cmp	r3, #34	@ 0x22
 800a962:	d106      	bne.n	800a972 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	2200      	movs	r2, #0
 800a968:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a96c:	6978      	ldr	r0, [r7, #20]
 800a96e:	f7ff feac 	bl	800a6ca <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a978:	f043 0210 	orr.w	r2, r3, #16
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a988:	6978      	ldr	r0, [r7, #20]
 800a98a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a98c:	bf00      	nop
 800a98e:	3718      	adds	r7, #24
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9bc:	bf00      	nop
 800a9be:	3710      	adds	r7, #16
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b088      	sub	sp, #32
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	e853 3f00 	ldrex	r3, [r3]
 800a9d8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9e0:	61fb      	str	r3, [r7, #28]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	69fb      	ldr	r3, [r7, #28]
 800a9ea:	61bb      	str	r3, [r7, #24]
 800a9ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ee:	6979      	ldr	r1, [r7, #20]
 800a9f0:	69ba      	ldr	r2, [r7, #24]
 800a9f2:	e841 2300 	strex	r3, r2, [r1]
 800a9f6:	613b      	str	r3, [r7, #16]
   return(result);
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1e6      	bne.n	800a9cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2220      	movs	r2, #32
 800aa02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa16:	bf00      	nop
 800aa18:	3720      	adds	r7, #32
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aa1e:	b480      	push	{r7}
 800aa20:	b083      	sub	sp, #12
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aa26:	bf00      	nop
 800aa28:	370c      	adds	r7, #12
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr

0800aa32 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800aa32:	b480      	push	{r7}
 800aa34:	b083      	sub	sp, #12
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aa3a:	bf00      	nop
 800aa3c:	370c      	adds	r7, #12
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr

0800aa46 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800aa46:	b480      	push	{r7}
 800aa48:	b083      	sub	sp, #12
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800aa4e:	bf00      	nop
 800aa50:	370c      	adds	r7, #12
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr

0800aa5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aa5a:	b480      	push	{r7}
 800aa5c:	b085      	sub	sp, #20
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d101      	bne.n	800aa70 <HAL_UARTEx_DisableFifoMode+0x16>
 800aa6c:	2302      	movs	r3, #2
 800aa6e:	e027      	b.n	800aac0 <HAL_UARTEx_DisableFifoMode+0x66>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2201      	movs	r2, #1
 800aa74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2224      	movs	r2, #36	@ 0x24
 800aa7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f022 0201 	bic.w	r2, r2, #1
 800aa96:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800aa9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2220      	movs	r2, #32
 800aab2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2200      	movs	r2, #0
 800aaba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3714      	adds	r7, #20
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d101      	bne.n	800aae4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aae0:	2302      	movs	r3, #2
 800aae2:	e02d      	b.n	800ab40 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2201      	movs	r2, #1
 800aae8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2224      	movs	r2, #36	@ 0x24
 800aaf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f022 0201 	bic.w	r2, r2, #1
 800ab0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	683a      	ldr	r2, [r7, #0]
 800ab1c:	430a      	orrs	r2, r1
 800ab1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 f84f 	bl	800abc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2220      	movs	r2, #32
 800ab32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab3e:	2300      	movs	r3, #0
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3710      	adds	r7, #16
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d101      	bne.n	800ab60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ab5c:	2302      	movs	r3, #2
 800ab5e:	e02d      	b.n	800abbc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2201      	movs	r2, #1
 800ab64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2224      	movs	r2, #36	@ 0x24
 800ab6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f022 0201 	bic.w	r2, r2, #1
 800ab86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	689b      	ldr	r3, [r3, #8]
 800ab8e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	683a      	ldr	r2, [r7, #0]
 800ab98:	430a      	orrs	r2, r1
 800ab9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 f811 	bl	800abc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2220      	movs	r2, #32
 800abae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800abba:	2300      	movs	r3, #0
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3710      	adds	r7, #16
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b085      	sub	sp, #20
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d108      	bne.n	800abe6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2201      	movs	r2, #1
 800abd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2201      	movs	r2, #1
 800abe0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800abe4:	e031      	b.n	800ac4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800abe6:	2308      	movs	r3, #8
 800abe8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800abea:	2308      	movs	r3, #8
 800abec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	0e5b      	lsrs	r3, r3, #25
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	f003 0307 	and.w	r3, r3, #7
 800abfc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	0f5b      	lsrs	r3, r3, #29
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	f003 0307 	and.w	r3, r3, #7
 800ac0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac0e:	7bbb      	ldrb	r3, [r7, #14]
 800ac10:	7b3a      	ldrb	r2, [r7, #12]
 800ac12:	4911      	ldr	r1, [pc, #68]	@ (800ac58 <UARTEx_SetNbDataToProcess+0x94>)
 800ac14:	5c8a      	ldrb	r2, [r1, r2]
 800ac16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ac1a:	7b3a      	ldrb	r2, [r7, #12]
 800ac1c:	490f      	ldr	r1, [pc, #60]	@ (800ac5c <UARTEx_SetNbDataToProcess+0x98>)
 800ac1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac20:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac24:	b29a      	uxth	r2, r3
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac2c:	7bfb      	ldrb	r3, [r7, #15]
 800ac2e:	7b7a      	ldrb	r2, [r7, #13]
 800ac30:	4909      	ldr	r1, [pc, #36]	@ (800ac58 <UARTEx_SetNbDataToProcess+0x94>)
 800ac32:	5c8a      	ldrb	r2, [r1, r2]
 800ac34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ac38:	7b7a      	ldrb	r2, [r7, #13]
 800ac3a:	4908      	ldr	r1, [pc, #32]	@ (800ac5c <UARTEx_SetNbDataToProcess+0x98>)
 800ac3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac3e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac42:	b29a      	uxth	r2, r3
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ac4a:	bf00      	nop
 800ac4c:	3714      	adds	r7, #20
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr
 800ac56:	bf00      	nop
 800ac58:	0800ae24 	.word	0x0800ae24
 800ac5c:	0800ae2c 	.word	0x0800ae2c

0800ac60 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b085      	sub	sp, #20
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	60f8      	str	r0, [r7, #12]
 800ac68:	607b      	str	r3, [r7, #4]
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	817b      	strh	r3, [r7, #10]
 800ac6e:	4613      	mov	r3, r2
 800ac70:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	897a      	ldrh	r2, [r7, #10]
 800ac76:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	893a      	ldrh	r2, [r7, #8]
 800ac7c:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	605a      	str	r2, [r3, #4]
}
 800ac84:	bf00      	nop
 800ac86:	3714      	adds	r7, #20
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <memset>:
 800ac90:	4402      	add	r2, r0
 800ac92:	4603      	mov	r3, r0
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d100      	bne.n	800ac9a <memset+0xa>
 800ac98:	4770      	bx	lr
 800ac9a:	f803 1b01 	strb.w	r1, [r3], #1
 800ac9e:	e7f9      	b.n	800ac94 <memset+0x4>

0800aca0 <__libc_init_array>:
 800aca0:	b570      	push	{r4, r5, r6, lr}
 800aca2:	4d0d      	ldr	r5, [pc, #52]	@ (800acd8 <__libc_init_array+0x38>)
 800aca4:	4c0d      	ldr	r4, [pc, #52]	@ (800acdc <__libc_init_array+0x3c>)
 800aca6:	1b64      	subs	r4, r4, r5
 800aca8:	10a4      	asrs	r4, r4, #2
 800acaa:	2600      	movs	r6, #0
 800acac:	42a6      	cmp	r6, r4
 800acae:	d109      	bne.n	800acc4 <__libc_init_array+0x24>
 800acb0:	4d0b      	ldr	r5, [pc, #44]	@ (800ace0 <__libc_init_array+0x40>)
 800acb2:	4c0c      	ldr	r4, [pc, #48]	@ (800ace4 <__libc_init_array+0x44>)
 800acb4:	f000 f818 	bl	800ace8 <_init>
 800acb8:	1b64      	subs	r4, r4, r5
 800acba:	10a4      	asrs	r4, r4, #2
 800acbc:	2600      	movs	r6, #0
 800acbe:	42a6      	cmp	r6, r4
 800acc0:	d105      	bne.n	800acce <__libc_init_array+0x2e>
 800acc2:	bd70      	pop	{r4, r5, r6, pc}
 800acc4:	f855 3b04 	ldr.w	r3, [r5], #4
 800acc8:	4798      	blx	r3
 800acca:	3601      	adds	r6, #1
 800accc:	e7ee      	b.n	800acac <__libc_init_array+0xc>
 800acce:	f855 3b04 	ldr.w	r3, [r5], #4
 800acd2:	4798      	blx	r3
 800acd4:	3601      	adds	r6, #1
 800acd6:	e7f2      	b.n	800acbe <__libc_init_array+0x1e>
 800acd8:	0800ae3c 	.word	0x0800ae3c
 800acdc:	0800ae3c 	.word	0x0800ae3c
 800ace0:	0800ae3c 	.word	0x0800ae3c
 800ace4:	0800ae40 	.word	0x0800ae40

0800ace8 <_init>:
 800ace8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acea:	bf00      	nop
 800acec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acee:	bc08      	pop	{r3}
 800acf0:	469e      	mov	lr, r3
 800acf2:	4770      	bx	lr

0800acf4 <_fini>:
 800acf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acf6:	bf00      	nop
 800acf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acfa:	bc08      	pop	{r3}
 800acfc:	469e      	mov	lr, r3
 800acfe:	4770      	bx	lr


Onedof_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad64  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800af3c  0800af3c  0000bf3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b070  0800b070  0000d04c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b070  0800b070  0000c070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b078  0800b078  0000d04c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b078  0800b078  0000c078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b07c  0800b07c  0000c07c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000004c  20000000  0800b080  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000146c  20000050  0800b0cc  0000d050  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200014bc  0800b0cc  0000d4bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d04c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002570e  00000000  00000000  0000d07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004272  00000000  00000000  0003278a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001910  00000000  00000000  00036a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001383  00000000  00000000  00038310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b3b4  00000000  00000000  00039693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024ddc  00000000  00000000  00064a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117164  00000000  00000000  00089823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a0987  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006dcc  00000000  00000000  001a09cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001a7798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000050 	.word	0x20000050
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800af24 	.word	0x0800af24

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000054 	.word	0x20000054
 8000214:	0800af24 	.word	0x0800af24

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b96a 	b.w	8000ee0 <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	460c      	mov	r4, r1
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d14e      	bne.n	8000cce <__udivmoddi4+0xaa>
 8000c30:	4694      	mov	ip, r2
 8000c32:	458c      	cmp	ip, r1
 8000c34:	4686      	mov	lr, r0
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	d962      	bls.n	8000d02 <__udivmoddi4+0xde>
 8000c3c:	b14a      	cbz	r2, 8000c52 <__udivmoddi4+0x2e>
 8000c3e:	f1c2 0320 	rsb	r3, r2, #32
 8000c42:	4091      	lsls	r1, r2
 8000c44:	fa20 f303 	lsr.w	r3, r0, r3
 8000c48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c4c:	4319      	orrs	r1, r3
 8000c4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c56:	fa1f f68c 	uxth.w	r6, ip
 8000c5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c62:	fb07 1114 	mls	r1, r7, r4, r1
 8000c66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6a:	fb04 f106 	mul.w	r1, r4, r6
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x64>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7a:	f080 8112 	bcs.w	8000ea2 <__udivmoddi4+0x27e>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 810f 	bls.w	8000ea2 <__udivmoddi4+0x27e>
 8000c84:	3c02      	subs	r4, #2
 8000c86:	4463      	add	r3, ip
 8000c88:	1a59      	subs	r1, r3, r1
 8000c8a:	fa1f f38e 	uxth.w	r3, lr
 8000c8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c92:	fb07 1110 	mls	r1, r7, r0, r1
 8000c96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9a:	fb00 f606 	mul.w	r6, r0, r6
 8000c9e:	429e      	cmp	r6, r3
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x94>
 8000ca2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000caa:	f080 80fc 	bcs.w	8000ea6 <__udivmoddi4+0x282>
 8000cae:	429e      	cmp	r6, r3
 8000cb0:	f240 80f9 	bls.w	8000ea6 <__udivmoddi4+0x282>
 8000cb4:	4463      	add	r3, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	1b9b      	subs	r3, r3, r6
 8000cba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa6>
 8000cc2:	40d3      	lsrs	r3, r2
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xba>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb4>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa6>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x150>
 8000ce6:	42a3      	cmp	r3, r4
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xcc>
 8000cea:	4290      	cmp	r0, r2
 8000cec:	f0c0 80f0 	bcc.w	8000ed0 <__udivmoddi4+0x2ac>
 8000cf0:	1a86      	subs	r6, r0, r2
 8000cf2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	2d00      	cmp	r5, #0
 8000cfa:	d0e6      	beq.n	8000cca <__udivmoddi4+0xa6>
 8000cfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000d00:	e7e3      	b.n	8000cca <__udivmoddi4+0xa6>
 8000d02:	2a00      	cmp	r2, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x204>
 8000d08:	eba1 040c 	sub.w	r4, r1, ip
 8000d0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d10:	fa1f f78c 	uxth.w	r7, ip
 8000d14:	2101      	movs	r1, #1
 8000d16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb07 f006 	mul.w	r0, r7, r6
 8000d2a:	4298      	cmp	r0, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x11c>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x11a>
 8000d38:	4298      	cmp	r0, r3
 8000d3a:	f200 80cd 	bhi.w	8000ed8 <__udivmoddi4+0x2b4>
 8000d3e:	4626      	mov	r6, r4
 8000d40:	1a1c      	subs	r4, r3, r0
 8000d42:	fa1f f38e 	uxth.w	r3, lr
 8000d46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d52:	fb00 f707 	mul.w	r7, r0, r7
 8000d56:	429f      	cmp	r7, r3
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x148>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x146>
 8000d64:	429f      	cmp	r7, r3
 8000d66:	f200 80b0 	bhi.w	8000eca <__udivmoddi4+0x2a6>
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	1bdb      	subs	r3, r3, r7
 8000d6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x9c>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d84:	fa04 f301 	lsl.w	r3, r4, r1
 8000d88:	ea43 030c 	orr.w	r3, r3, ip
 8000d8c:	40f4      	lsrs	r4, r6
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	0c38      	lsrs	r0, r7, #16
 8000d94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d98:	fbb4 fef0 	udiv	lr, r4, r0
 8000d9c:	fa1f fc87 	uxth.w	ip, r7
 8000da0:	fb00 441e 	mls	r4, r0, lr, r4
 8000da4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da8:	fb0e f90c 	mul.w	r9, lr, ip
 8000dac:	45a1      	cmp	r9, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d90a      	bls.n	8000dca <__udivmoddi4+0x1a6>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dba:	f080 8084 	bcs.w	8000ec6 <__udivmoddi4+0x2a2>
 8000dbe:	45a1      	cmp	r9, r4
 8000dc0:	f240 8081 	bls.w	8000ec6 <__udivmoddi4+0x2a2>
 8000dc4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	eba4 0409 	sub.w	r4, r4, r9
 8000dce:	fa1f f983 	uxth.w	r9, r3
 8000dd2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dd6:	fb00 4413 	mls	r4, r0, r3, r4
 8000dda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dde:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x1d2>
 8000de6:	193c      	adds	r4, r7, r4
 8000de8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dec:	d267      	bcs.n	8000ebe <__udivmoddi4+0x29a>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d965      	bls.n	8000ebe <__udivmoddi4+0x29a>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfa:	fba0 9302 	umull	r9, r3, r0, r2
 8000dfe:	eba4 040c 	sub.w	r4, r4, ip
 8000e02:	429c      	cmp	r4, r3
 8000e04:	46ce      	mov	lr, r9
 8000e06:	469c      	mov	ip, r3
 8000e08:	d351      	bcc.n	8000eae <__udivmoddi4+0x28a>
 8000e0a:	d04e      	beq.n	8000eaa <__udivmoddi4+0x286>
 8000e0c:	b155      	cbz	r5, 8000e24 <__udivmoddi4+0x200>
 8000e0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000e12:	eb64 040c 	sbc.w	r4, r4, ip
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	40cb      	lsrs	r3, r1
 8000e1c:	431e      	orrs	r6, r3
 8000e1e:	40cc      	lsrs	r4, r1
 8000e20:	e9c5 6400 	strd	r6, r4, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	e750      	b.n	8000cca <__udivmoddi4+0xa6>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000e30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e34:	fa24 f303 	lsr.w	r3, r4, r3
 8000e38:	4094      	lsls	r4, r2
 8000e3a:	430c      	orrs	r4, r1
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e44:	fa1f f78c 	uxth.w	r7, ip
 8000e48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e50:	0c23      	lsrs	r3, r4, #16
 8000e52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e56:	fb00 f107 	mul.w	r1, r0, r7
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x24c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e66:	d22c      	bcs.n	8000ec2 <__udivmoddi4+0x29e>
 8000e68:	4299      	cmp	r1, r3
 8000e6a:	d92a      	bls.n	8000ec2 <__udivmoddi4+0x29e>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4463      	add	r3, ip
 8000e70:	1a5b      	subs	r3, r3, r1
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e78:	fb08 3311 	mls	r3, r8, r1, r3
 8000e7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e80:	fb01 f307 	mul.w	r3, r1, r7
 8000e84:	42a3      	cmp	r3, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x276>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e90:	d213      	bcs.n	8000eba <__udivmoddi4+0x296>
 8000e92:	42a3      	cmp	r3, r4
 8000e94:	d911      	bls.n	8000eba <__udivmoddi4+0x296>
 8000e96:	3902      	subs	r1, #2
 8000e98:	4464      	add	r4, ip
 8000e9a:	1ae4      	subs	r4, r4, r3
 8000e9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea0:	e739      	b.n	8000d16 <__udivmoddi4+0xf2>
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	e6f0      	b.n	8000c88 <__udivmoddi4+0x64>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e706      	b.n	8000cb8 <__udivmoddi4+0x94>
 8000eaa:	45c8      	cmp	r8, r9
 8000eac:	d2ae      	bcs.n	8000e0c <__udivmoddi4+0x1e8>
 8000eae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eb6:	3801      	subs	r0, #1
 8000eb8:	e7a8      	b.n	8000e0c <__udivmoddi4+0x1e8>
 8000eba:	4631      	mov	r1, r6
 8000ebc:	e7ed      	b.n	8000e9a <__udivmoddi4+0x276>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	e799      	b.n	8000df6 <__udivmoddi4+0x1d2>
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	e7d4      	b.n	8000e70 <__udivmoddi4+0x24c>
 8000ec6:	46d6      	mov	lr, sl
 8000ec8:	e77f      	b.n	8000dca <__udivmoddi4+0x1a6>
 8000eca:	4463      	add	r3, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e74d      	b.n	8000d6c <__udivmoddi4+0x148>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	4623      	mov	r3, r4
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	e70f      	b.n	8000cf8 <__udivmoddi4+0xd4>
 8000ed8:	3e02      	subs	r6, #2
 8000eda:	4463      	add	r3, ip
 8000edc:	e730      	b.n	8000d40 <__udivmoddi4+0x11c>
 8000ede:	bf00      	nop

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <Gripper_Movement_Status>:
        strcpy(Vacuum, "Off");
        eff -> solenoid_command[0] = 0;
    }
}

void Gripper_Movement_Status(EFF* eff){
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
    //Movement Forward
    if (registerFrame[0x03].U16 == 1){ // ใช้ == แทน =
 8000eec:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <Gripper_Movement_Status+0x54>)
 8000eee:	88db      	ldrh	r3, [r3, #6]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d10c      	bne.n	8000f0e <Gripper_Movement_Status+0x2a>
        strcpy(Gripper, "Forward");
 8000ef4:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <Gripper_Movement_Status+0x58>)
 8000ef6:	4a12      	ldr	r2, [pc, #72]	@ (8000f40 <Gripper_Movement_Status+0x5c>)
 8000ef8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000efc:	e883 0003 	stmia.w	r3, {r0, r1}
        eff -> solenoid_command[1] = 1;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2201      	movs	r2, #1
 8000f04:	70da      	strb	r2, [r3, #3]
        eff -> solenoid_command[2] = 0;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	711a      	strb	r2, [r3, #4]
    else if (registerFrame[0x03].U16 == 0){ // ใช้ == แทน =
        strcpy(Gripper, "Backward");
        eff -> solenoid_command[1] = 0;
        eff -> solenoid_command[2] = 1;
    }
}
 8000f0c:	e00e      	b.n	8000f2c <Gripper_Movement_Status+0x48>
    else if (registerFrame[0x03].U16 == 0){ // ใช้ == แทน =
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f38 <Gripper_Movement_Status+0x54>)
 8000f10:	88db      	ldrh	r3, [r3, #6]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d10a      	bne.n	8000f2c <Gripper_Movement_Status+0x48>
        strcpy(Gripper, "Backward");
 8000f16:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <Gripper_Movement_Status+0x58>)
 8000f18:	4a0a      	ldr	r2, [pc, #40]	@ (8000f44 <Gripper_Movement_Status+0x60>)
 8000f1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f1c:	c303      	stmia	r3!, {r0, r1}
 8000f1e:	701a      	strb	r2, [r3, #0]
        eff -> solenoid_command[1] = 0;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	70da      	strb	r2, [r3, #3]
        eff -> solenoid_command[2] = 1;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	711a      	strb	r2, [r3, #4]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	20000c7c 	.word	0x20000c7c
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	0800af40 	.word	0x0800af40
 8000f44:	0800af48 	.word	0x0800af48

08000f48 <Set_Goal_Point>:
    registerFrame[0x26].U16 = 8;  //4th Shelve Position
    registerFrame[0x27].U16 = 8;  //5th Shelve Position
}

// wait for Data type check
uint16_t Set_Goal_Point(){
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
	return registerFrame[0x30].U16;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	@ (8000f5c <Set_Goal_Point+0x14>)
 8000f4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	20000c7c 	.word	0x20000c7c

08000f60 <Run_Point_Mode>:

uint16_t Run_Point_Mode(){
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
	if (registerFrame[0x01].U16 == 8){
 8000f64:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <Run_Point_Mode+0x30>)
 8000f66:	885b      	ldrh	r3, [r3, #2]
 8000f68:	2b08      	cmp	r3, #8
 8000f6a:	d10b      	bne.n	8000f84 <Run_Point_Mode+0x24>
		registerFrame[0x01].U16 = 0;
 8000f6c:	4b08      	ldr	r3, [pc, #32]	@ (8000f90 <Run_Point_Mode+0x30>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 16;
 8000f72:	4b07      	ldr	r3, [pc, #28]	@ (8000f90 <Run_Point_Mode+0x30>)
 8000f74:	2210      	movs	r2, #16
 8000f76:	841a      	strh	r2, [r3, #32]
		state = registerFrame[0x10].U16;
 8000f78:	4b05      	ldr	r3, [pc, #20]	@ (8000f90 <Run_Point_Mode+0x30>)
 8000f7a:	8c1a      	ldrh	r2, [r3, #32]
 8000f7c:	4b05      	ldr	r3, [pc, #20]	@ (8000f94 <Run_Point_Mode+0x34>)
 8000f7e:	801a      	strh	r2, [r3, #0]
		return 1;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e000      	b.n	8000f86 <Run_Point_Mode+0x26>
	}else{return 0;}
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	20000c7c 	.word	0x20000c7c
 8000f94:	2000006c 	.word	0x2000006c

08000f98 <Set_Home>:

void Set_Home(){
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
	if(registerFrame[0x10].U16 == 2){
 8000f9c:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <Set_Home+0x28>)
 8000f9e:	8c1b      	ldrh	r3, [r3, #32]
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d108      	bne.n	8000fb6 <Set_Home+0x1e>
		state = 2;
 8000fa4:	4b07      	ldr	r3, [pc, #28]	@ (8000fc4 <Set_Home+0x2c>)
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	801a      	strh	r2, [r3, #0]
		strcpy(Home, "Homing...");
 8000faa:	4b07      	ldr	r3, [pc, #28]	@ (8000fc8 <Set_Home+0x30>)
 8000fac:	4a07      	ldr	r2, [pc, #28]	@ (8000fcc <Set_Home+0x34>)
 8000fae:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fb0:	c303      	stmia	r3!, {r0, r1}
 8000fb2:	801a      	strh	r2, [r3, #0]
 8000fb4:	e000      	b.n	8000fb8 <Set_Home+0x20>
	}
	else{
		return;
 8000fb6:	bf00      	nop
//	if (Jogginghome == 1){
//		registerFrame[0x01].U16 = 0;
//	}


}
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	20000c7c 	.word	0x20000c7c
 8000fc4:	2000006c 	.word	0x2000006c
 8000fc8:	20000014 	.word	0x20000014
 8000fcc:	0800af54 	.word	0x0800af54

08000fd0 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800100c <modbus_1t5_Timeout+0x3c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800100c <modbus_1t5_Timeout+0x3c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	691b      	ldr	r3, [r3, #16]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000fe8:	4b08      	ldr	r3, [pc, #32]	@ (800100c <modbus_1t5_Timeout+0x3c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	691b      	ldr	r3, [r3, #16]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	4b06      	ldr	r3, [pc, #24]	@ (800100c <modbus_1t5_Timeout+0x3c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f042 0201 	orr.w	r2, r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000548 	.word	0x20000548

08001010 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001018:	4b04      	ldr	r3, [pc, #16]	@ (800102c <modbus_3t5_Timeout+0x1c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2201      	movs	r2, #1
 800101e:	755a      	strb	r2, [r3, #21]

}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	20000548 	.word	0x20000548

08001030 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f008 fe67 	bl	8009d0c <HAL_UART_GetError>
 800103e:	4603      	mov	r3, r0
 8001040:	2b20      	cmp	r3, #32
 8001042:	d101      	bne.n	8001048 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001044:	f7ff ffc4 	bl	8000fd0 <modbus_1t5_Timeout>

	}
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800105a:	4a25      	ldr	r2, [pc, #148]	@ (80010f0 <Modbus_init+0xa0>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001060:	4b23      	ldr	r3, [pc, #140]	@ (80010f0 <Modbus_init+0xa0>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	4a21      	ldr	r2, [pc, #132]	@ (80010f4 <Modbus_init+0xa4>)
 800106e:	210e      	movs	r1, #14
 8001070:	4618      	mov	r0, r3
 8001072:	f007 f90f 	bl	8008294 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	2110      	movs	r1, #16
 800107c:	4618      	mov	r0, r3
 800107e:	f008 fdef 	bl	8009c60 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	4618      	mov	r0, r3
 8001088:	f008 fe06 	bl	8009c98 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	4a19      	ldr	r2, [pc, #100]	@ (80010f8 <Modbus_init+0xa8>)
 8001092:	2104      	movs	r1, #4
 8001094:	4618      	mov	r0, r3
 8001096:	f008 f94d 	bl	8009334 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 800109a:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <Modbus_init+0xa0>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80010a0:	4b13      	ldr	r3, [pc, #76]	@ (80010f0 <Modbus_init+0xa0>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <Modbus_init+0xa0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80010ac:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80010b0:	4413      	add	r3, r2
 80010b2:	3302      	adds	r3, #2
 80010b4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80010b8:	4619      	mov	r1, r3
 80010ba:	f008 f9f5 	bl	80094a8 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80010be:	4b0c      	ldr	r3, [pc, #48]	@ (80010f0 <Modbus_init+0xa0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d10c      	bne.n	80010e8 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80010ce:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <Modbus_init+0xa0>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f006 f8af 	bl	8007238 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80010da:	4b05      	ldr	r3, [pc, #20]	@ (80010f0 <Modbus_init+0xa0>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f006 fb08 	bl	80076f8 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000548 	.word	0x20000548
 80010f4:	08001011 	.word	0x08001011
 80010f8:	08001031 	.word	0x08001031

080010fc <ADC_init>:
 *      Author: naker
 */

#include "adc.h"

void ADC_init(ADC_HandleTypeDef* hadc, ADC* adc){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, adc -> adc_buffer, 50);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2232      	movs	r2, #50	@ 0x32
 800110a:	4619      	mov	r1, r3
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f002 ff5d 	bl	8003fcc <HAL_ADC_Start_DMA>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <Update_actual_eff>:
 *      Author: naker
 */

#include "eff.h"

void Update_actual_eff(EFF* eff, GPIO_TypeDef* GPIO_Pull, uint16_t GPIO_Pin_Pull, GPIO_TypeDef* GPIO_Push, uint16_t GPIO_Pin_Push){
 800111a:	b580      	push	{r7, lr}
 800111c:	b084      	sub	sp, #16
 800111e:	af00      	add	r7, sp, #0
 8001120:	60f8      	str	r0, [r7, #12]
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	4613      	mov	r3, r2
 8001128:	80fb      	strh	r3, [r7, #6]
	eff -> actual_status[0] = HAL_GPIO_ReadPin(GPIO_Pull, GPIO_Pin_Pull);
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	4619      	mov	r1, r3
 800112e:	68b8      	ldr	r0, [r7, #8]
 8001130:	f004 ff36 	bl	8005fa0 <HAL_GPIO_ReadPin>
 8001134:	4603      	mov	r3, r0
 8001136:	461a      	mov	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	701a      	strb	r2, [r3, #0]
	eff -> actual_status[1] = HAL_GPIO_ReadPin(GPIO_Push, GPIO_Pin_Push);
 800113c:	8b3b      	ldrh	r3, [r7, #24]
 800113e:	4619      	mov	r1, r3
 8001140:	6838      	ldr	r0, [r7, #0]
 8001142:	f004 ff2d 	bl	8005fa0 <HAL_GPIO_ReadPin>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	705a      	strb	r2, [r3, #1]
	if(eff -> actual_status[0] && !eff -> actual_status[1]){
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d007      	beq.n	8001166 <Update_actual_eff+0x4c>
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	785b      	ldrb	r3, [r3, #1]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d103      	bne.n	8001166 <Update_actual_eff+0x4c>
		// Pull reed switch on and Push reed switch off
		eff -> update_actual_status[0x04].U16 = 1;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	2201      	movs	r2, #1
 8001162:	81da      	strh	r2, [r3, #14]
 8001164:	e00f      	b.n	8001186 <Update_actual_eff+0x6c>
//		registerFrame[0x04] -> U16 = 1;
	}
	else if(!eff -> actual_status[0] && eff -> actual_status[1]){
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d107      	bne.n	800117e <Update_actual_eff+0x64>
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	785b      	ldrb	r3, [r3, #1]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <Update_actual_eff+0x64>
		// Pull reed switch off and Push reed switch on
		eff -> update_actual_status[0x04].U16 = 2;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2202      	movs	r2, #2
 800117a:	81da      	strh	r2, [r3, #14]
 800117c:	e003      	b.n	8001186 <Update_actual_eff+0x6c>
//		registerFrame[0x04] -> U16 = 2;
	}
	else{
		// Pull reed switch off and Push reed switch off
		eff -> update_actual_status[0x04].U16 = 0;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2200      	movs	r2, #0
 8001182:	81da      	strh	r2, [r3, #14]
//		registerFrame[0x04] = 0;
	}
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <Update_joy>:
 *      Author: naker
 */

#include "joy.h"

void Update_joy(JOY *joy){
 8001190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001194:	b084      	sub	sp, #16
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
	uint8_t s_1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 800119a:	2120      	movs	r1, #32
 800119c:	4835      	ldr	r0, [pc, #212]	@ (8001274 <Update_joy+0xe4>)
 800119e:	f004 feff 	bl	8005fa0 <HAL_GPIO_ReadPin>
 80011a2:	4603      	mov	r3, r0
 80011a4:	73fb      	strb	r3, [r7, #15]
	uint8_t s_2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 80011a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ae:	f004 fef7 	bl	8005fa0 <HAL_GPIO_ReadPin>
 80011b2:	4603      	mov	r3, r0
 80011b4:	73bb      	strb	r3, [r7, #14]
	uint8_t s_3 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4);
 80011b6:	2110      	movs	r1, #16
 80011b8:	482f      	ldr	r0, [pc, #188]	@ (8001278 <Update_joy+0xe8>)
 80011ba:	f004 fef1 	bl	8005fa0 <HAL_GPIO_ReadPin>
 80011be:	4603      	mov	r3, r0
 80011c0:	737b      	strb	r3, [r7, #13]
	uint8_t s_4 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 80011c2:	2120      	movs	r1, #32
 80011c4:	482c      	ldr	r0, [pc, #176]	@ (8001278 <Update_joy+0xe8>)
 80011c6:	f004 feeb 	bl	8005fa0 <HAL_GPIO_ReadPin>
 80011ca:	4603      	mov	r3, r0
 80011cc:	733b      	strb	r3, [r7, #12]
	if(!s_1 || !s_2 || !s_3 || !s_4){
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d008      	beq.n	80011e6 <Update_joy+0x56>
 80011d4:	7bbb      	ldrb	r3, [r7, #14]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d005      	beq.n	80011e6 <Update_joy+0x56>
 80011da:	7b7b      	ldrb	r3, [r7, #13]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d002      	beq.n	80011e6 <Update_joy+0x56>
 80011e0:	7b3b      	ldrb	r3, [r7, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d133      	bne.n	800124e <Update_joy+0xbe>
		static uint8_t is_first = 1;
		static uint64_t timestamp = 0;
		if(is_first){
 80011e6:	4b25      	ldr	r3, [pc, #148]	@ (800127c <Update_joy+0xec>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00c      	beq.n	8001208 <Update_joy+0x78>
			timestamp = HAL_GetTick() + 50;
 80011ee:	f002 fae5 	bl	80037bc <HAL_GetTick>
 80011f2:	4603      	mov	r3, r0
 80011f4:	3332      	adds	r3, #50	@ 0x32
 80011f6:	2200      	movs	r2, #0
 80011f8:	469a      	mov	sl, r3
 80011fa:	4693      	mov	fp, r2
 80011fc:	4b20      	ldr	r3, [pc, #128]	@ (8001280 <Update_joy+0xf0>)
 80011fe:	e9c3 ab00 	strd	sl, fp, [r3]
			is_first = 0;
 8001202:	4b1e      	ldr	r3, [pc, #120]	@ (800127c <Update_joy+0xec>)
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() > timestamp){
 8001208:	f002 fad8 	bl	80037bc <HAL_GetTick>
 800120c:	4603      	mov	r3, r0
 800120e:	2200      	movs	r2, #0
 8001210:	461c      	mov	r4, r3
 8001212:	4615      	mov	r5, r2
 8001214:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <Update_joy+0xf0>)
 8001216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121a:	42a2      	cmp	r2, r4
 800121c:	41ab      	sbcs	r3, r5
 800121e:	d223      	bcs.n	8001268 <Update_joy+0xd8>
			timestamp = HAL_GetTick() + 50;
 8001220:	f002 facc 	bl	80037bc <HAL_GetTick>
 8001224:	4603      	mov	r3, r0
 8001226:	3332      	adds	r3, #50	@ 0x32
 8001228:	2200      	movs	r2, #0
 800122a:	4698      	mov	r8, r3
 800122c:	4691      	mov	r9, r2
 800122e:	4b14      	ldr	r3, [pc, #80]	@ (8001280 <Update_joy+0xf0>)
 8001230:	e9c3 8900 	strd	r8, r9, [r3]
			joy -> s_1 = s_1;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	7bfa      	ldrb	r2, [r7, #15]
 8001238:	701a      	strb	r2, [r3, #0]
			joy -> s_2 = s_2;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	7bba      	ldrb	r2, [r7, #14]
 800123e:	705a      	strb	r2, [r3, #1]
			joy -> s_3 = s_3;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	7b7a      	ldrb	r2, [r7, #13]
 8001244:	709a      	strb	r2, [r3, #2]
			joy -> s_4 = s_4;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	7b3a      	ldrb	r2, [r7, #12]
 800124a:	70da      	strb	r2, [r3, #3]
	if(!s_1 || !s_2 || !s_3 || !s_4){
 800124c:	e00c      	b.n	8001268 <Update_joy+0xd8>
		}
	}else{
		joy -> s_1 = 1;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2201      	movs	r2, #1
 8001252:	701a      	strb	r2, [r3, #0]
		joy -> s_2 = 1;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2201      	movs	r2, #1
 8001258:	705a      	strb	r2, [r3, #1]
		joy -> s_3 = 1;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2201      	movs	r2, #1
 800125e:	709a      	strb	r2, [r3, #2]
		joy -> s_4 = 1;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2201      	movs	r2, #1
 8001264:	70da      	strb	r2, [r3, #3]
	}
}
 8001266:	e000      	b.n	800126a <Update_joy+0xda>
	if(!s_1 || !s_2 || !s_3 || !s_4){
 8001268:	bf00      	nop
}
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001274:	48000400 	.word	0x48000400
 8001278:	48000800 	.word	0x48000800
 800127c:	20000028 	.word	0x20000028
 8001280:	20000550 	.word	0x20000550

08001284 <Kalman_Start>:
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
	  filter->Kalman_Speed = filter->X_k[1];
	  return  filter->Kalman_Speed;
}

void Kalman_Start(KalmanFilter* filter){
 8001284:	b5b0      	push	{r4, r5, r7, lr}
 8001286:	b0b4      	sub	sp, #208	@ 0xd0
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	filter->Q = 100.0f;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a42      	ldr	r2, [pc, #264]	@ (8001398 <Kalman_Start+0x114>)
 8001290:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = 1.0f;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800129a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t a[16] = {1.0f, 0.000999981278535715f, -0.000114956304180341f, 7.18067814869762e-06f,
 800129e:	4b3f      	ldr	r3, [pc, #252]	@ (800139c <Kalman_Start+0x118>)
 80012a0:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80012a4:	461d      	mov	r5, r3
 80012a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	                   0.0f, 0.999950617296464f,   -0.229910715302858f, 0.0143220709019020f,
	                   0.0f, 0.0f   ,   1.0f  , 0.0f,
	                   0.0f,-0.00496113160650046f, 0.000571883719539551f, 0.983689934032327f};

	float32_t b[4] = {	1.90888950589463e-07f,
 80012ba:	4b39      	ldr	r3, [pc, #228]	@ (80013a0 <Kalman_Start+0x11c>)
 80012bc:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 80012c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
						0.000571883719539551f,
						0.0f,
						0.0789912369575374f};

	float32_t c[4] = {0.0f, 1.0f, 0.0f, 0.0f};
 80012c6:	f04f 0300 	mov.w	r3, #0
 80012ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80012cc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80012d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80012d2:	f04f 0300 	mov.w	r3, #0
 80012d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80012d8:	f04f 0300 	mov.w	r3, #0
 80012dc:	67bb      	str	r3, [r7, #120]	@ 0x78

	float32_t g[4] = {0.0f,
 80012de:	f04f 0300 	mov.w	r3, #0
 80012e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80012e4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80012e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80012ea:	f04f 0300 	mov.w	r3, #0
 80012ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	66bb      	str	r3, [r7, #104]	@ 0x68
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 80012f6:	4b2b      	ldr	r3, [pc, #172]	@ (80013a4 <Kalman_Start+0x120>)
 80012f8:	f107 041c 	add.w	r4, r7, #28
 80012fc:	461d      	mov	r5, r3
 80012fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001306:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001308:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800130a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800130e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 800132a:	2300      	movs	r3, #0
 800132c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001330:	e029      	b.n	8001386 <Kalman_Start+0x102>
	{
		filter->A[i] = a[i];
 8001332:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	33d0      	adds	r3, #208	@ 0xd0
 800133a:	443b      	add	r3, r7
 800133c:	3b44      	subs	r3, #68	@ 0x44
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001346:	3314      	adds	r3, #20
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	440b      	add	r3, r1
 800134c:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 800134e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	33d0      	adds	r3, #208	@ 0xd0
 8001356:	443b      	add	r3, r7
 8001358:	3bb4      	subs	r3, #180	@ 0xb4
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001362:	3398      	adds	r3, #152	@ 0x98
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	440b      	add	r3, r1
 8001368:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001370:	3304      	adds	r3, #4
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 800137c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001380:	3301      	adds	r3, #1
 8001382:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001386:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800138a:	2b0f      	cmp	r3, #15
 800138c:	ddd1      	ble.n	8001332 <Kalman_Start+0xae>
	}

	for(i=0;i<4;i++)
 800138e:	2300      	movs	r3, #0
 8001390:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001394:	e044      	b.n	8001420 <Kalman_Start+0x19c>
 8001396:	bf00      	nop
 8001398:	42c80000 	.word	0x42c80000
 800139c:	0800afa0 	.word	0x0800afa0
 80013a0:	0800afe0 	.word	0x0800afe0
 80013a4:	0800aff0 	.word	0x0800aff0
	{
		filter->X_k[i] = x_k[i];
 80013a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	33d0      	adds	r3, #208	@ 0xd0
 80013b0:	443b      	add	r3, r7
 80013b2:	3bc4      	subs	r3, #196	@ 0xc4
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	440b      	add	r3, r1
 80013c0:	601a      	str	r2, [r3, #0]
		filter->B[i] = b[i];
 80013c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	33d0      	adds	r3, #208	@ 0xd0
 80013ca:	443b      	add	r3, r7
 80013cc:	3b54      	subs	r3, #84	@ 0x54
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80013d6:	3324      	adds	r3, #36	@ 0x24
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	440b      	add	r3, r1
 80013dc:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 80013de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	33d0      	adds	r3, #208	@ 0xd0
 80013e6:	443b      	add	r3, r7
 80013e8:	3b64      	subs	r3, #100	@ 0x64
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80013f2:	3328      	adds	r3, #40	@ 0x28
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	440b      	add	r3, r1
 80013f8:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 80013fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	33d0      	adds	r3, #208	@ 0xd0
 8001402:	443b      	add	r3, r7
 8001404:	3b74      	subs	r3, #116	@ 0x74
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	6879      	ldr	r1, [r7, #4]
 800140a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800140e:	332c      	adds	r3, #44	@ 0x2c
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	440b      	add	r3, r1
 8001414:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8001416:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800141a:	3301      	adds	r3, #1
 800141c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001420:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001424:	2b03      	cmp	r3, #3
 8001426:	ddbf      	ble.n	80013a8 <Kalman_Start+0x124>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2201      	movs	r2, #1
 8001432:	2104      	movs	r1, #4
 8001434:	f009 fd32 	bl	800ae9c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3310      	adds	r3, #16
 8001442:	2204      	movs	r2, #4
 8001444:	2104      	movs	r1, #4
 8001446:	f009 fd29 	bl	800ae9c <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3350      	adds	r3, #80	@ 0x50
 8001454:	2204      	movs	r2, #4
 8001456:	2104      	movs	r1, #4
 8001458:	f009 fd20 	bl	800ae9c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3390      	adds	r3, #144	@ 0x90
 8001466:	2201      	movs	r2, #1
 8001468:	2104      	movs	r1, #4
 800146a:	f009 fd17 	bl	800ae9c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	33a0      	adds	r3, #160	@ 0xa0
 8001478:	2204      	movs	r2, #4
 800147a:	2101      	movs	r1, #1
 800147c:	f009 fd0e 	bl	800ae9c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	33b0      	adds	r3, #176	@ 0xb0
 800148a:	2201      	movs	r2, #1
 800148c:	2104      	movs	r1, #4
 800148e:	f009 fd05 	bl	800ae9c <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	33c8      	adds	r3, #200	@ 0xc8
 800149c:	2204      	movs	r2, #4
 800149e:	2104      	movs	r1, #4
 80014a0:	f009 fcfc 	bl	800ae9c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80014b0:	2201      	movs	r2, #1
 80014b2:	2104      	movs	r1, #4
 80014b4:	f009 fcf2 	bl	800ae9c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80014c4:	2204      	movs	r2, #4
 80014c6:	2101      	movs	r1, #1
 80014c8:	f009 fce8 	bl	800ae9c <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80014d8:	2204      	movs	r2, #4
 80014da:	2104      	movs	r1, #4
 80014dc:	f009 fcde 	bl	800ae9c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80014ec:	2204      	movs	r2, #4
 80014ee:	2104      	movs	r1, #4
 80014f0:	f009 fcd4 	bl	800ae9c <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8001500:	2201      	movs	r2, #1
 8001502:	2104      	movs	r1, #4
 8001504:	f009 fcca 	bl	800ae9c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8001514:	2201      	movs	r2, #1
 8001516:	2104      	movs	r1, #4
 8001518:	f009 fcc0 	bl	800ae9c <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001528:	2204      	movs	r2, #4
 800152a:	2101      	movs	r1, #1
 800152c:	f009 fcb6 	bl	800ae9c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 800153c:	2201      	movs	r2, #1
 800153e:	2101      	movs	r1, #1
 8001540:	f009 fcac 	bl	800ae9c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8001550:	2201      	movs	r2, #1
 8001552:	2101      	movs	r1, #1
 8001554:	f009 fca2 	bl	800ae9c <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8001564:	2201      	movs	r2, #1
 8001566:	2104      	movs	r1, #4
 8001568:	f009 fc98 	bl	800ae9c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8001578:	2201      	movs	r2, #1
 800157a:	2104      	movs	r1, #4
 800157c:	f009 fc8e 	bl	800ae9c <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800158c:	2201      	movs	r2, #1
 800158e:	2101      	movs	r1, #1
 8001590:	f009 fc84 	bl	800ae9c <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 80015a0:	2201      	movs	r2, #1
 80015a2:	2101      	movs	r1, #1
 80015a4:	f009 fc7a 	bl	800ae9c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80015b4:	2201      	movs	r2, #1
 80015b6:	2101      	movs	r1, #1
 80015b8:	f009 fc70 	bl	800ae9c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80015c8:	2201      	movs	r2, #1
 80015ca:	2104      	movs	r1, #4
 80015cc:	f009 fc66 	bl	800ae9c <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80015dc:	2201      	movs	r2, #1
 80015de:	2101      	movs	r1, #1
 80015e0:	f009 fc5c 	bl	800ae9c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80015f0:	2204      	movs	r2, #4
 80015f2:	2104      	movs	r1, #4
 80015f4:	f009 fc52 	bl	800ae9c <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	33c4      	adds	r3, #196	@ 0xc4
 8001602:	2201      	movs	r2, #1
 8001604:	2101      	movs	r1, #1
 8001606:	f009 fc49 	bl	800ae9c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8001616:	2201      	movs	r2, #1
 8001618:	2101      	movs	r1, #1
 800161a:	f009 fc3f 	bl	800ae9c <arm_mat_init_f32>
}
 800161e:	bf00      	nop
 8001620:	37d0      	adds	r7, #208	@ 0xd0
 8001622:	46bd      	mov	sp, r7
 8001624:	bdb0      	pop	{r4, r5, r7, pc}
 8001626:	bf00      	nop

08001628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800162c:	f002 f861 	bl	80036f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001630:	f000 f8ae 	bl	8001790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001634:	f000 fbd0 	bl	8001dd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001638:	f000 fb8c 	bl	8001d54 <MX_DMA_Init>
  MX_TIM1_Init();
 800163c:	f000 f96a 	bl	8001914 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001640:	f000 fa18 	bl	8001a74 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001644:	f000 fa64 	bl	8001b10 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001648:	f000 f8ec 	bl	8001824 <MX_ADC1_Init>
  MX_TIM5_Init();
 800164c:	f000 fab6 	bl	8001bbc <MX_TIM5_Init>
  MX_TIM16_Init();
 8001650:	f000 fb02 	bl	8001c58 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8001654:	f000 fb30 	bl	8001cb8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Modbus setting
  hmodbus.huart = &huart2;
 8001658:	4b34      	ldr	r3, [pc, #208]	@ (800172c <main+0x104>)
 800165a:	4a35      	ldr	r2, [pc, #212]	@ (8001730 <main+0x108>)
 800165c:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 800165e:	4b33      	ldr	r3, [pc, #204]	@ (800172c <main+0x104>)
 8001660:	4a34      	ldr	r2, [pc, #208]	@ (8001734 <main+0x10c>)
 8001662:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8001664:	4b31      	ldr	r3, [pc, #196]	@ (800172c <main+0x104>)
 8001666:	2215      	movs	r2, #21
 8001668:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 800166a:	4b30      	ldr	r3, [pc, #192]	@ (800172c <main+0x104>)
 800166c:	22c8      	movs	r2, #200	@ 0xc8
 800166e:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8001670:	4931      	ldr	r1, [pc, #196]	@ (8001738 <main+0x110>)
 8001672:	482e      	ldr	r0, [pc, #184]	@ (800172c <main+0x104>)
 8001674:	f7ff fcec 	bl	8001050 <Modbus_init>
  registerFrame[0x00].U16 = 22881; // Set default heart beat to "Ya"
 8001678:	4b2f      	ldr	r3, [pc, #188]	@ (8001738 <main+0x110>)
 800167a:	f645 1261 	movw	r2, #22881	@ 0x5961
 800167e:	801a      	strh	r2, [r3, #0]
  // Update MODBUS timer
  HAL_TIM_Base_Start_IT(&modbus_tim);
 8001680:	482e      	ldr	r0, [pc, #184]	@ (800173c <main+0x114>)
 8001682:	f005 fdd9 	bl	8007238 <HAL_TIM_Base_Start_IT>

  // Update command timer
  HAL_TIM_Base_Start_IT(&main_loop_tim);
 8001686:	482e      	ldr	r0, [pc, #184]	@ (8001740 <main+0x118>)
 8001688:	f005 fdd6 	bl	8007238 <HAL_TIM_Base_Start_IT>

  // PWM generator
  HAL_TIM_Base_Start(&pwm_tim);
 800168c:	482d      	ldr	r0, [pc, #180]	@ (8001744 <main+0x11c>)
 800168e:	f005 fd63 	bl	8007158 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&pwm_tim, pwm_channel);
 8001692:	2100      	movs	r1, #0
 8001694:	482b      	ldr	r0, [pc, #172]	@ (8001744 <main+0x11c>)
 8001696:	f005 feb5 	bl	8007404 <HAL_TIM_PWM_Start>

  // Encoder reader
  HAL_TIM_Encoder_Start(&encoder_tim, encoder_channel);
 800169a:	213c      	movs	r1, #60	@ 0x3c
 800169c:	482a      	ldr	r0, [pc, #168]	@ (8001748 <main+0x120>)
 800169e:	f006 f96d 	bl	800797c <HAL_TIM_Encoder_Start>
  QEI_init(&encoder, encoder_ppr, encoder_frequency, encoder_cnt_period);
 80016a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80016aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016ae:	4827      	ldr	r0, [pc, #156]	@ (800174c <main+0x124>)
 80016b0:	f001 f903 	bl	80028ba <QEI_init>

  // Current reader
  ADC_init(&current_adc, &current_sensor);
 80016b4:	4926      	ldr	r1, [pc, #152]	@ (8001750 <main+0x128>)
 80016b6:	4827      	ldr	r0, [pc, #156]	@ (8001754 <main+0x12c>)
 80016b8:	f7ff fd20 	bl	80010fc <ADC_init>

  // Position PID
  PID_init(&p_pid, p_kp, p_ki, p_kd, 5.0/(float32_t)encoder_frequency);
 80016bc:	4b26      	ldr	r3, [pc, #152]	@ (8001758 <main+0x130>)
 80016be:	edd3 7a00 	vldr	s15, [r3]
 80016c2:	4b26      	ldr	r3, [pc, #152]	@ (800175c <main+0x134>)
 80016c4:	ed93 7a00 	vldr	s14, [r3]
 80016c8:	4b25      	ldr	r3, [pc, #148]	@ (8001760 <main+0x138>)
 80016ca:	edd3 6a00 	vldr	s13, [r3]
 80016ce:	eddf 1a25 	vldr	s3, [pc, #148]	@ 8001764 <main+0x13c>
 80016d2:	eeb0 1a66 	vmov.f32	s2, s13
 80016d6:	eef0 0a47 	vmov.f32	s1, s14
 80016da:	eeb0 0a67 	vmov.f32	s0, s15
 80016de:	4822      	ldr	r0, [pc, #136]	@ (8001768 <main+0x140>)
 80016e0:	f000 fee6 	bl	80024b0 <PID_init>
  PID_init(&v_pid, v_kp, v_ki, v_kd, 1.0/(float32_t)encoder_frequency);
 80016e4:	4b21      	ldr	r3, [pc, #132]	@ (800176c <main+0x144>)
 80016e6:	edd3 7a00 	vldr	s15, [r3]
 80016ea:	4b21      	ldr	r3, [pc, #132]	@ (8001770 <main+0x148>)
 80016ec:	ed93 7a00 	vldr	s14, [r3]
 80016f0:	4b20      	ldr	r3, [pc, #128]	@ (8001774 <main+0x14c>)
 80016f2:	edd3 6a00 	vldr	s13, [r3]
 80016f6:	eddf 1a20 	vldr	s3, [pc, #128]	@ 8001778 <main+0x150>
 80016fa:	eeb0 1a66 	vmov.f32	s2, s13
 80016fe:	eef0 0a47 	vmov.f32	s1, s14
 8001702:	eeb0 0a67 	vmov.f32	s0, s15
 8001706:	481d      	ldr	r0, [pc, #116]	@ (800177c <main+0x154>)
 8001708:	f000 fed2 	bl	80024b0 <PID_init>

  // Kalman filter
  Kalman_Start(&kalman);
 800170c:	481c      	ldr	r0, [pc, #112]	@ (8001780 <main+0x158>)
 800170e:	f7ff fdb9 	bl	8001284 <Kalman_Start>

  // State initialize
  homing_init(&home);
 8001712:	481c      	ldr	r0, [pc, #112]	@ (8001784 <main+0x15c>)
 8001714:	f001 faa6 	bl	8002c64 <homing_init>
  point_init(&point);
 8001718:	481b      	ldr	r0, [pc, #108]	@ (8001788 <main+0x160>)
 800171a:	f001 fa95 	bl	8002c48 <point_init>

  //Set point
  set_point = 0.0;
 800171e:	4b1b      	ldr	r3, [pc, #108]	@ (800178c <main+0x164>)
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001726:	bf00      	nop
 8001728:	e7fd      	b.n	8001726 <main+0xfe>
 800172a:	bf00      	nop
 800172c:	20000070 	.word	0x20000070
 8001730:	20000a80 	.word	0x20000a80
 8001734:	20000954 	.word	0x20000954
 8001738:	20000c7c 	.word	0x20000c7c
 800173c:	20000888 	.word	0x20000888
 8001740:	200006f0 	.word	0x200006f0
 8001744:	20000624 	.word	0x20000624
 8001748:	200007bc 	.word	0x200007bc
 800174c:	20001080 	.word	0x20001080
 8001750:	20000fac 	.word	0x20000fac
 8001754:	20000558 	.word	0x20000558
 8001758:	2000003c 	.word	0x2000003c
 800175c:	20001120 	.word	0x20001120
 8001760:	20001124 	.word	0x20001124
 8001764:	3ba3d70a 	.word	0x3ba3d70a
 8001768:	20001108 	.word	0x20001108
 800176c:	20000038 	.word	0x20000038
 8001770:	200010f8 	.word	0x200010f8
 8001774:	200010fc 	.word	0x200010fc
 8001778:	3a83126f 	.word	0x3a83126f
 800177c:	200010e0 	.word	0x200010e0
 8001780:	20001128 	.word	0x20001128
 8001784:	20000c60 	.word	0x20000c60
 8001788:	20000c58 	.word	0x20000c58
 800178c:	20000c50 	.word	0x20000c50

08001790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b094      	sub	sp, #80	@ 0x50
 8001794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001796:	f107 0318 	add.w	r3, r7, #24
 800179a:	2238      	movs	r2, #56	@ 0x38
 800179c:	2100      	movs	r1, #0
 800179e:	4618      	mov	r0, r3
 80017a0:	f009 fb94 	bl	800aecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80017b2:	2000      	movs	r0, #0
 80017b4:	f004 fc3c 	bl	8006030 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017b8:	2301      	movs	r3, #1
 80017ba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017c0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c2:	2302      	movs	r3, #2
 80017c4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017c6:	2303      	movs	r3, #3
 80017c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80017ca:	2306      	movs	r3, #6
 80017cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80017ce:	2355      	movs	r3, #85	@ 0x55
 80017d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017d2:	2302      	movs	r3, #2
 80017d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017d6:	2302      	movs	r3, #2
 80017d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017da:	2302      	movs	r3, #2
 80017dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017de:	f107 0318 	add.w	r3, r7, #24
 80017e2:	4618      	mov	r0, r3
 80017e4:	f004 fcd8 	bl	8006198 <HAL_RCC_OscConfig>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80017ee:	f000 fe59 	bl	80024a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f2:	230f      	movs	r3, #15
 80017f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f6:	2303      	movs	r3, #3
 80017f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	2104      	movs	r1, #4
 800180a:	4618      	mov	r0, r3
 800180c:	f004 ffd6 	bl	80067bc <HAL_RCC_ClockConfig>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001816:	f000 fe45 	bl	80024a4 <Error_Handler>
  }
}
 800181a:	bf00      	nop
 800181c:	3750      	adds	r7, #80	@ 0x50
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08c      	sub	sp, #48	@ 0x30
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800182a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	2220      	movs	r2, #32
 800183a:	2100      	movs	r1, #0
 800183c:	4618      	mov	r0, r3
 800183e:	f009 fb45 	bl	800aecc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001842:	4b32      	ldr	r3, [pc, #200]	@ (800190c <MX_ADC1_Init+0xe8>)
 8001844:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001848:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800184a:	4b30      	ldr	r3, [pc, #192]	@ (800190c <MX_ADC1_Init+0xe8>)
 800184c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001850:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001852:	4b2e      	ldr	r3, [pc, #184]	@ (800190c <MX_ADC1_Init+0xe8>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001858:	4b2c      	ldr	r3, [pc, #176]	@ (800190c <MX_ADC1_Init+0xe8>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800185e:	4b2b      	ldr	r3, [pc, #172]	@ (800190c <MX_ADC1_Init+0xe8>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001864:	4b29      	ldr	r3, [pc, #164]	@ (800190c <MX_ADC1_Init+0xe8>)
 8001866:	2200      	movs	r2, #0
 8001868:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800186a:	4b28      	ldr	r3, [pc, #160]	@ (800190c <MX_ADC1_Init+0xe8>)
 800186c:	2204      	movs	r2, #4
 800186e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001870:	4b26      	ldr	r3, [pc, #152]	@ (800190c <MX_ADC1_Init+0xe8>)
 8001872:	2200      	movs	r2, #0
 8001874:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001876:	4b25      	ldr	r3, [pc, #148]	@ (800190c <MX_ADC1_Init+0xe8>)
 8001878:	2201      	movs	r2, #1
 800187a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800187c:	4b23      	ldr	r3, [pc, #140]	@ (800190c <MX_ADC1_Init+0xe8>)
 800187e:	2201      	movs	r2, #1
 8001880:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001882:	4b22      	ldr	r3, [pc, #136]	@ (800190c <MX_ADC1_Init+0xe8>)
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800188a:	4b20      	ldr	r3, [pc, #128]	@ (800190c <MX_ADC1_Init+0xe8>)
 800188c:	2200      	movs	r2, #0
 800188e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001890:	4b1e      	ldr	r3, [pc, #120]	@ (800190c <MX_ADC1_Init+0xe8>)
 8001892:	2200      	movs	r2, #0
 8001894:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001896:	4b1d      	ldr	r3, [pc, #116]	@ (800190c <MX_ADC1_Init+0xe8>)
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800189e:	4b1b      	ldr	r3, [pc, #108]	@ (800190c <MX_ADC1_Init+0xe8>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80018a4:	4b19      	ldr	r3, [pc, #100]	@ (800190c <MX_ADC1_Init+0xe8>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018ac:	4817      	ldr	r0, [pc, #92]	@ (800190c <MX_ADC1_Init+0xe8>)
 80018ae:	f002 f9d1 	bl	8003c54 <HAL_ADC_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80018b8:	f000 fdf4 	bl	80024a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80018bc:	2300      	movs	r3, #0
 80018be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80018c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018c4:	4619      	mov	r1, r3
 80018c6:	4811      	ldr	r0, [pc, #68]	@ (800190c <MX_ADC1_Init+0xe8>)
 80018c8:	f003 fc9e 	bl	8005208 <HAL_ADCEx_MultiModeConfigChannel>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80018d2:	f000 fde7 	bl	80024a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <MX_ADC1_Init+0xec>)
 80018d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018da:	2306      	movs	r3, #6
 80018dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018e2:	237f      	movs	r3, #127	@ 0x7f
 80018e4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018e6:	2304      	movs	r3, #4
 80018e8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	4619      	mov	r1, r3
 80018f2:	4806      	ldr	r0, [pc, #24]	@ (800190c <MX_ADC1_Init+0xe8>)
 80018f4:	f002 fec6 	bl	8004684 <HAL_ADC_ConfigChannel>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80018fe:	f000 fdd1 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001902:	bf00      	nop
 8001904:	3730      	adds	r7, #48	@ 0x30
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000558 	.word	0x20000558
 8001910:	04300002 	.word	0x04300002

08001914 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b09c      	sub	sp, #112	@ 0x70
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800191a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001928:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001934:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
 8001944:	615a      	str	r2, [r3, #20]
 8001946:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	2234      	movs	r2, #52	@ 0x34
 800194c:	2100      	movs	r1, #0
 800194e:	4618      	mov	r0, r3
 8001950:	f009 fabc 	bl	800aecc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001954:	4b45      	ldr	r3, [pc, #276]	@ (8001a6c <MX_TIM1_Init+0x158>)
 8001956:	4a46      	ldr	r2, [pc, #280]	@ (8001a70 <MX_TIM1_Init+0x15c>)
 8001958:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 800195a:	4b44      	ldr	r3, [pc, #272]	@ (8001a6c <MX_TIM1_Init+0x158>)
 800195c:	22a9      	movs	r2, #169	@ 0xa9
 800195e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001960:	4b42      	ldr	r3, [pc, #264]	@ (8001a6c <MX_TIM1_Init+0x158>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001966:	4b41      	ldr	r3, [pc, #260]	@ (8001a6c <MX_TIM1_Init+0x158>)
 8001968:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800196c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a6c <MX_TIM1_Init+0x158>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001974:	4b3d      	ldr	r3, [pc, #244]	@ (8001a6c <MX_TIM1_Init+0x158>)
 8001976:	2200      	movs	r2, #0
 8001978:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197a:	4b3c      	ldr	r3, [pc, #240]	@ (8001a6c <MX_TIM1_Init+0x158>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001980:	483a      	ldr	r0, [pc, #232]	@ (8001a6c <MX_TIM1_Init+0x158>)
 8001982:	f005 fb85 	bl	8007090 <HAL_TIM_Base_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800198c:	f000 fd8a 	bl	80024a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001990:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001994:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001996:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800199a:	4619      	mov	r1, r3
 800199c:	4833      	ldr	r0, [pc, #204]	@ (8001a6c <MX_TIM1_Init+0x158>)
 800199e:	f006 fb09 	bl	8007fb4 <HAL_TIM_ConfigClockSource>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80019a8:	f000 fd7c 	bl	80024a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019ac:	482f      	ldr	r0, [pc, #188]	@ (8001a6c <MX_TIM1_Init+0x158>)
 80019ae:	f005 fcbb 	bl	8007328 <HAL_TIM_PWM_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80019b8:	f000 fd74 	bl	80024a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019bc:	2300      	movs	r3, #0
 80019be:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019c0:	2300      	movs	r3, #0
 80019c2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019cc:	4619      	mov	r1, r3
 80019ce:	4827      	ldr	r0, [pc, #156]	@ (8001a6c <MX_TIM1_Init+0x158>)
 80019d0:	f007 fad6 	bl	8008f80 <HAL_TIMEx_MasterConfigSynchronization>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80019da:	f000 fd63 	bl	80024a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019de:	2360      	movs	r3, #96	@ 0x60
 80019e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019e6:	2300      	movs	r3, #0
 80019e8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019ea:	2300      	movs	r3, #0
 80019ec:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80019ee:	2304      	movs	r3, #4
 80019f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019f2:	2300      	movs	r3, #0
 80019f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019f6:	2300      	movs	r3, #0
 80019f8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019fa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019fe:	2200      	movs	r2, #0
 8001a00:	4619      	mov	r1, r3
 8001a02:	481a      	ldr	r0, [pc, #104]	@ (8001a6c <MX_TIM1_Init+0x158>)
 8001a04:	f006 f9c2 	bl	8007d8c <HAL_TIM_PWM_ConfigChannel>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001a0e:	f000 fd49 	bl	80024a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a2a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a30:	2300      	movs	r3, #0
 8001a32:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001a42:	2300      	movs	r3, #0
 8001a44:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4807      	ldr	r0, [pc, #28]	@ (8001a6c <MX_TIM1_Init+0x158>)
 8001a50:	f007 fb2c 	bl	80090ac <HAL_TIMEx_ConfigBreakDeadTime>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8001a5a:	f000 fd23 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a5e:	4803      	ldr	r0, [pc, #12]	@ (8001a6c <MX_TIM1_Init+0x158>)
 8001a60:	f001 fc74 	bl	800334c <HAL_TIM_MspPostInit>

}
 8001a64:	bf00      	nop
 8001a66:	3770      	adds	r7, #112	@ 0x70
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000624 	.word	0x20000624
 8001a70:	40012c00 	.word	0x40012c00

08001a74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a7a:	f107 0310 	add.w	r3, r7, #16
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a92:	4b1d      	ldr	r3, [pc, #116]	@ (8001b08 <MX_TIM3_Init+0x94>)
 8001a94:	4a1d      	ldr	r2, [pc, #116]	@ (8001b0c <MX_TIM3_Init+0x98>)
 8001a96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001a98:	4b1b      	ldr	r3, [pc, #108]	@ (8001b08 <MX_TIM3_Init+0x94>)
 8001a9a:	22a9      	movs	r2, #169	@ 0xa9
 8001a9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b08 <MX_TIM3_Init+0x94>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001aa4:	4b18      	ldr	r3, [pc, #96]	@ (8001b08 <MX_TIM3_Init+0x94>)
 8001aa6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001aaa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aac:	4b16      	ldr	r3, [pc, #88]	@ (8001b08 <MX_TIM3_Init+0x94>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab2:	4b15      	ldr	r3, [pc, #84]	@ (8001b08 <MX_TIM3_Init+0x94>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ab8:	4813      	ldr	r0, [pc, #76]	@ (8001b08 <MX_TIM3_Init+0x94>)
 8001aba:	f005 fae9 	bl	8007090 <HAL_TIM_Base_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001ac4:	f000 fcee 	bl	80024a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001acc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ace:	f107 0310 	add.w	r3, r7, #16
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	480c      	ldr	r0, [pc, #48]	@ (8001b08 <MX_TIM3_Init+0x94>)
 8001ad6:	f006 fa6d 	bl	8007fb4 <HAL_TIM_ConfigClockSource>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001ae0:	f000 fce0 	bl	80024a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	4619      	mov	r1, r3
 8001af0:	4805      	ldr	r0, [pc, #20]	@ (8001b08 <MX_TIM3_Init+0x94>)
 8001af2:	f007 fa45 	bl	8008f80 <HAL_TIMEx_MasterConfigSynchronization>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001afc:	f000 fcd2 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b00:	bf00      	nop
 8001b02:	3720      	adds	r7, #32
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	200006f0 	.word	0x200006f0
 8001b0c:	40000400 	.word	0x40000400

08001b10 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08c      	sub	sp, #48	@ 0x30
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b16:	f107 030c 	add.w	r3, r7, #12
 8001b1a:	2224      	movs	r2, #36	@ 0x24
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f009 f9d4 	bl	800aecc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b24:	463b      	mov	r3, r7
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b2e:	4b21      	ldr	r3, [pc, #132]	@ (8001bb4 <MX_TIM4_Init+0xa4>)
 8001b30:	4a21      	ldr	r2, [pc, #132]	@ (8001bb8 <MX_TIM4_Init+0xa8>)
 8001b32:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b34:	4b1f      	ldr	r3, [pc, #124]	@ (8001bb4 <MX_TIM4_Init+0xa4>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb4 <MX_TIM4_Init+0xa4>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001b40:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb4 <MX_TIM4_Init+0xa4>)
 8001b42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b46:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b48:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb4 <MX_TIM4_Init+0xa4>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4e:	4b19      	ldr	r3, [pc, #100]	@ (8001bb4 <MX_TIM4_Init+0xa4>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b54:	2303      	movs	r3, #3
 8001b56:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001b78:	f107 030c 	add.w	r3, r7, #12
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	480d      	ldr	r0, [pc, #52]	@ (8001bb4 <MX_TIM4_Init+0xa4>)
 8001b80:	f005 fe48 	bl	8007814 <HAL_TIM_Encoder_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001b8a:	f000 fc8b 	bl	80024a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b96:	463b      	mov	r3, r7
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4806      	ldr	r0, [pc, #24]	@ (8001bb4 <MX_TIM4_Init+0xa4>)
 8001b9c:	f007 f9f0 	bl	8008f80 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001ba6:	f000 fc7d 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001baa:	bf00      	nop
 8001bac:	3730      	adds	r7, #48	@ 0x30
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200007bc 	.word	0x200007bc
 8001bb8:	40000800 	.word	0x40000800

08001bbc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bc2:	f107 0310 	add.w	r3, r7, #16
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001bda:	4b1d      	ldr	r3, [pc, #116]	@ (8001c50 <MX_TIM5_Init+0x94>)
 8001bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8001c54 <MX_TIM5_Init+0x98>)
 8001bde:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8001be0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c50 <MX_TIM5_Init+0x94>)
 8001be2:	22a9      	movs	r2, #169	@ 0xa9
 8001be4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c50 <MX_TIM5_Init+0x94>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001bec:	4b18      	ldr	r3, [pc, #96]	@ (8001c50 <MX_TIM5_Init+0x94>)
 8001bee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001bf2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf4:	4b16      	ldr	r3, [pc, #88]	@ (8001c50 <MX_TIM5_Init+0x94>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfa:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <MX_TIM5_Init+0x94>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001c00:	4813      	ldr	r0, [pc, #76]	@ (8001c50 <MX_TIM5_Init+0x94>)
 8001c02:	f005 fa45 	bl	8007090 <HAL_TIM_Base_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001c0c:	f000 fc4a 	bl	80024a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001c16:	f107 0310 	add.w	r3, r7, #16
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	480c      	ldr	r0, [pc, #48]	@ (8001c50 <MX_TIM5_Init+0x94>)
 8001c1e:	f006 f9c9 	bl	8007fb4 <HAL_TIM_ConfigClockSource>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001c28:	f000 fc3c 	bl	80024a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c34:	1d3b      	adds	r3, r7, #4
 8001c36:	4619      	mov	r1, r3
 8001c38:	4805      	ldr	r0, [pc, #20]	@ (8001c50 <MX_TIM5_Init+0x94>)
 8001c3a:	f007 f9a1 	bl	8008f80 <HAL_TIMEx_MasterConfigSynchronization>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001c44:	f000 fc2e 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001c48:	bf00      	nop
 8001c4a:	3720      	adds	r7, #32
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000888 	.word	0x20000888
 8001c54:	40000c00 	.word	0x40000c00

08001c58 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001c5c:	4b14      	ldr	r3, [pc, #80]	@ (8001cb0 <MX_TIM16_Init+0x58>)
 8001c5e:	4a15      	ldr	r2, [pc, #84]	@ (8001cb4 <MX_TIM16_Init+0x5c>)
 8001c60:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8001c62:	4b13      	ldr	r3, [pc, #76]	@ (8001cb0 <MX_TIM16_Init+0x58>)
 8001c64:	22a9      	movs	r2, #169	@ 0xa9
 8001c66:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c68:	4b11      	ldr	r3, [pc, #68]	@ (8001cb0 <MX_TIM16_Init+0x58>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8001c6e:	4b10      	ldr	r3, [pc, #64]	@ (8001cb0 <MX_TIM16_Init+0x58>)
 8001c70:	f240 4279 	movw	r2, #1145	@ 0x479
 8001c74:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb0 <MX_TIM16_Init+0x58>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb0 <MX_TIM16_Init+0x58>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c82:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb0 <MX_TIM16_Init+0x58>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001c88:	4809      	ldr	r0, [pc, #36]	@ (8001cb0 <MX_TIM16_Init+0x58>)
 8001c8a:	f005 fa01 	bl	8007090 <HAL_TIM_Base_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001c94:	f000 fc06 	bl	80024a4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001c98:	2108      	movs	r1, #8
 8001c9a:	4805      	ldr	r0, [pc, #20]	@ (8001cb0 <MX_TIM16_Init+0x58>)
 8001c9c:	f005 fcc4 	bl	8007628 <HAL_TIM_OnePulse_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8001ca6:	f000 fbfd 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000954 	.word	0x20000954
 8001cb4:	40014400 	.word	0x40014400

08001cb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cbc:	4b23      	ldr	r3, [pc, #140]	@ (8001d4c <MX_USART2_UART_Init+0x94>)
 8001cbe:	4a24      	ldr	r2, [pc, #144]	@ (8001d50 <MX_USART2_UART_Init+0x98>)
 8001cc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001cc2:	4b22      	ldr	r3, [pc, #136]	@ (8001d4c <MX_USART2_UART_Init+0x94>)
 8001cc4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001cc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001cca:	4b20      	ldr	r3, [pc, #128]	@ (8001d4c <MX_USART2_UART_Init+0x94>)
 8001ccc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001cd0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d4c <MX_USART2_UART_Init+0x94>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d4c <MX_USART2_UART_Init+0x94>)
 8001cda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d4c <MX_USART2_UART_Init+0x94>)
 8001ce2:	220c      	movs	r2, #12
 8001ce4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce6:	4b19      	ldr	r3, [pc, #100]	@ (8001d4c <MX_USART2_UART_Init+0x94>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cec:	4b17      	ldr	r3, [pc, #92]	@ (8001d4c <MX_USART2_UART_Init+0x94>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cf2:	4b16      	ldr	r3, [pc, #88]	@ (8001d4c <MX_USART2_UART_Init+0x94>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cf8:	4b14      	ldr	r3, [pc, #80]	@ (8001d4c <MX_USART2_UART_Init+0x94>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cfe:	4b13      	ldr	r3, [pc, #76]	@ (8001d4c <MX_USART2_UART_Init+0x94>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d04:	4811      	ldr	r0, [pc, #68]	@ (8001d4c <MX_USART2_UART_Init+0x94>)
 8001d06:	f007 fab5 	bl	8009274 <HAL_UART_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8001d10:	f000 fbc8 	bl	80024a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d14:	2100      	movs	r1, #0
 8001d16:	480d      	ldr	r0, [pc, #52]	@ (8001d4c <MX_USART2_UART_Init+0x94>)
 8001d18:	f008 fff6 	bl	800ad08 <HAL_UARTEx_SetTxFifoThreshold>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8001d22:	f000 fbbf 	bl	80024a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d26:	2100      	movs	r1, #0
 8001d28:	4808      	ldr	r0, [pc, #32]	@ (8001d4c <MX_USART2_UART_Init+0x94>)
 8001d2a:	f009 f82b 	bl	800ad84 <HAL_UARTEx_SetRxFifoThreshold>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8001d34:	f000 fbb6 	bl	80024a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001d38:	4804      	ldr	r0, [pc, #16]	@ (8001d4c <MX_USART2_UART_Init+0x94>)
 8001d3a:	f008 ffac 	bl	800ac96 <HAL_UARTEx_DisableFifoMode>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8001d44:	f000 fbae 	bl	80024a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000a80 	.word	0x20000a80
 8001d50:	40004400 	.word	0x40004400

08001d54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd4 <MX_DMA_Init+0x80>)
 8001d5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d5e:	4a1d      	ldr	r2, [pc, #116]	@ (8001dd4 <MX_DMA_Init+0x80>)
 8001d60:	f043 0304 	orr.w	r3, r3, #4
 8001d64:	6493      	str	r3, [r2, #72]	@ 0x48
 8001d66:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd4 <MX_DMA_Init+0x80>)
 8001d68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d72:	4b18      	ldr	r3, [pc, #96]	@ (8001dd4 <MX_DMA_Init+0x80>)
 8001d74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d76:	4a17      	ldr	r2, [pc, #92]	@ (8001dd4 <MX_DMA_Init+0x80>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001d7e:	4b15      	ldr	r3, [pc, #84]	@ (8001dd4 <MX_DMA_Init+0x80>)
 8001d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	200b      	movs	r0, #11
 8001d90:	f003 fc1d 	bl	80055ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001d94:	200b      	movs	r0, #11
 8001d96:	f003 fc34 	bl	8005602 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	200c      	movs	r0, #12
 8001da0:	f003 fc15 	bl	80055ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001da4:	200c      	movs	r0, #12
 8001da6:	f003 fc2c 	bl	8005602 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001daa:	2200      	movs	r2, #0
 8001dac:	2100      	movs	r1, #0
 8001dae:	200d      	movs	r0, #13
 8001db0:	f003 fc0d 	bl	80055ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001db4:	200d      	movs	r0, #13
 8001db6:	f003 fc24 	bl	8005602 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	200e      	movs	r0, #14
 8001dc0:	f003 fc05 	bl	80055ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001dc4:	200e      	movs	r0, #14
 8001dc6:	f003 fc1c 	bl	8005602 <HAL_NVIC_EnableIRQ>

}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40021000 	.word	0x40021000

08001dd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	@ 0x28
 8001ddc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dde:	f107 0314 	add.w	r3, r7, #20
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
 8001dec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dee:	4b67      	ldr	r3, [pc, #412]	@ (8001f8c <MX_GPIO_Init+0x1b4>)
 8001df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df2:	4a66      	ldr	r2, [pc, #408]	@ (8001f8c <MX_GPIO_Init+0x1b4>)
 8001df4:	f043 0304 	orr.w	r3, r3, #4
 8001df8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dfa:	4b64      	ldr	r3, [pc, #400]	@ (8001f8c <MX_GPIO_Init+0x1b4>)
 8001dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dfe:	f003 0304 	and.w	r3, r3, #4
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e06:	4b61      	ldr	r3, [pc, #388]	@ (8001f8c <MX_GPIO_Init+0x1b4>)
 8001e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e0a:	4a60      	ldr	r2, [pc, #384]	@ (8001f8c <MX_GPIO_Init+0x1b4>)
 8001e0c:	f043 0320 	orr.w	r3, r3, #32
 8001e10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e12:	4b5e      	ldr	r3, [pc, #376]	@ (8001f8c <MX_GPIO_Init+0x1b4>)
 8001e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e16:	f003 0320 	and.w	r3, r3, #32
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1e:	4b5b      	ldr	r3, [pc, #364]	@ (8001f8c <MX_GPIO_Init+0x1b4>)
 8001e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e22:	4a5a      	ldr	r2, [pc, #360]	@ (8001f8c <MX_GPIO_Init+0x1b4>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e2a:	4b58      	ldr	r3, [pc, #352]	@ (8001f8c <MX_GPIO_Init+0x1b4>)
 8001e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e36:	4b55      	ldr	r3, [pc, #340]	@ (8001f8c <MX_GPIO_Init+0x1b4>)
 8001e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e3a:	4a54      	ldr	r2, [pc, #336]	@ (8001f8c <MX_GPIO_Init+0x1b4>)
 8001e3c:	f043 0302 	orr.w	r3, r3, #2
 8001e40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e42:	4b52      	ldr	r3, [pc, #328]	@ (8001f8c <MX_GPIO_Init+0x1b4>)
 8001e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Direaction_motor_Pin|Emergency_light_Pin, GPIO_PIN_RESET);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001e54:	484e      	ldr	r0, [pc, #312]	@ (8001f90 <MX_GPIO_Init+0x1b8>)
 8001e56:	f004 f8bb 	bl	8005fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Solenoid_valve_push_Pin, GPIO_PIN_RESET);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8001e60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e64:	f004 f8b4 	bl	8005fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin, GPIO_PIN_RESET);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f240 4116 	movw	r1, #1046	@ 0x416
 8001e6e:	4849      	ldr	r0, [pc, #292]	@ (8001f94 <MX_GPIO_Init+0x1bc>)
 8001e70:	f004 f8ae 	bl	8005fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e7a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4841      	ldr	r0, [pc, #260]	@ (8001f90 <MX_GPIO_Init+0x1b8>)
 8001e8c:	f003 ff06 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : Direaction_motor_Pin */
  GPIO_InitStruct.Pin = Direaction_motor_Pin;
 8001e90:	2302      	movs	r3, #2
 8001e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e94:	2301      	movs	r3, #1
 8001e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direaction_motor_GPIO_Port, &GPIO_InitStruct);
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	483a      	ldr	r0, [pc, #232]	@ (8001f90 <MX_GPIO_Init+0x1b8>)
 8001ea8:	f003 fef8 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Solenoid_valve_push_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Solenoid_valve_push_Pin;
 8001eac:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebe:	f107 0314 	add.w	r3, r7, #20
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ec8:	f003 fee8 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : joy_switch_3_Pin joy_switch_4_Pin Set_home_Pin Reed_switch_pull_Pin */
  GPIO_InitStruct.Pin = joy_switch_3_Pin|joy_switch_4_Pin|Set_home_Pin|Reed_switch_pull_Pin;
 8001ecc:	23f0      	movs	r3, #240	@ 0xf0
 8001ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	4619      	mov	r1, r3
 8001ede:	482c      	ldr	r0, [pc, #176]	@ (8001f90 <MX_GPIO_Init+0x1b8>)
 8001ee0:	f003 fedc 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : Pilot_controller_error_Pin Pilot_motor_error_Pin Solenoid_valve_pull_Pin Solenoid_valve_vacuum_Pin */
  GPIO_InitStruct.Pin = Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin;
 8001ee4:	f240 4316 	movw	r3, #1046	@ 0x416
 8001ee8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eea:	2301      	movs	r3, #1
 8001eec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef6:	f107 0314 	add.w	r3, r7, #20
 8001efa:	4619      	mov	r1, r3
 8001efc:	4825      	ldr	r0, [pc, #148]	@ (8001f94 <MX_GPIO_Init+0x1bc>)
 8001efe:	f003 fecd 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : Proximity_Pin joy_switch_1_Pin */
  GPIO_InitStruct.Pin = Proximity_Pin|joy_switch_1_Pin;
 8001f02:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8001f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	4619      	mov	r1, r3
 8001f16:	481f      	ldr	r0, [pc, #124]	@ (8001f94 <MX_GPIO_Init+0x1bc>)
 8001f18:	f003 fec0 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_switch_Pin */
  GPIO_InitStruct.Pin = Emergency_switch_Pin;
 8001f1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f22:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_switch_GPIO_Port, &GPIO_InitStruct);
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	4619      	mov	r1, r3
 8001f32:	4818      	ldr	r0, [pc, #96]	@ (8001f94 <MX_GPIO_Init+0x1bc>)
 8001f34:	f003 feb2 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_light_Pin */
  GPIO_InitStruct.Pin = Emergency_light_Pin;
 8001f38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f46:	2300      	movs	r3, #0
 8001f48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Emergency_light_GPIO_Port, &GPIO_InitStruct);
 8001f4a:	f107 0314 	add.w	r3, r7, #20
 8001f4e:	4619      	mov	r1, r3
 8001f50:	480f      	ldr	r0, [pc, #60]	@ (8001f90 <MX_GPIO_Init+0x1b8>)
 8001f52:	f003 fea3 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : Reed_switch_push_Pin joy_switch_2_Pin */
  GPIO_InitStruct.Pin = Reed_switch_push_Pin|joy_switch_2_Pin;
 8001f56:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f6e:	f003 fe95 	bl	8005c9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f72:	2200      	movs	r2, #0
 8001f74:	2100      	movs	r1, #0
 8001f76:	2028      	movs	r0, #40	@ 0x28
 8001f78:	f003 fb29 	bl	80055ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f7c:	2028      	movs	r0, #40	@ 0x28
 8001f7e:	f003 fb40 	bl	8005602 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f82:	bf00      	nop
 8001f84:	3728      	adds	r7, #40	@ 0x28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	48000800 	.word	0x48000800
 8001f94:	48000400 	.word	0x48000400

08001f98 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Main timer interrupt for run program with accuracy time
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f9c:	b08c      	sub	sp, #48	@ 0x30
 8001f9e:	af02      	add	r7, sp, #8
 8001fa0:	6278      	str	r0, [r7, #36]	@ 0x24
	// Run with 1000 Hz
	if(htim == &htim5){
 8001fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fa4:	4b8e      	ldr	r3, [pc, #568]	@ (80021e0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d14e      	bne.n	8002048 <HAL_TIM_PeriodElapsedCallback+0xb0>
		//Update modbus
		if(registerFrame[0x00].U16 == 18537){
 8001faa:	4b8e      	ldr	r3, [pc, #568]	@ (80021e4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001fac:	881a      	ldrh	r2, [r3, #0]
 8001fae:	f644 0369 	movw	r3, #18537	@ 0x4869
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d107      	bne.n	8001fc6 <HAL_TIM_PeriodElapsedCallback+0x2e>
			registerFrame[0x00].U16 = 22881;
 8001fb6:	4a8b      	ldr	r2, [pc, #556]	@ (80021e4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001fb8:	f645 1361 	movw	r3, #22881	@ 0x5961
 8001fbc:	8013      	strh	r3, [r2, #0]
			heartbeat_status = 1;
 8001fbe:	4a8a      	ldr	r2, [pc, #552]	@ (80021e8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	7013      	strb	r3, [r2, #0]
 8001fc4:	e040      	b.n	8002048 <HAL_TIM_PeriodElapsedCallback+0xb0>
		}
		else if(heartbeat_status == 0){
 8001fc6:	4b88      	ldr	r3, [pc, #544]	@ (80021e8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d104      	bne.n	8001fd8 <HAL_TIM_PeriodElapsedCallback+0x40>
			registerFrame[0x00].U16 = 22881;
 8001fce:	4a85      	ldr	r2, [pc, #532]	@ (80021e4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001fd0:	f645 1361 	movw	r3, #22881	@ 0x5961
 8001fd4:	8013      	strh	r3, [r2, #0]
 8001fd6:	e037      	b.n	8002048 <HAL_TIM_PeriodElapsedCallback+0xb0>
		}
		else if(heartbeat_status == 1){
 8001fd8:	4b83      	ldr	r3, [pc, #524]	@ (80021e8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d133      	bne.n	8002048 <HAL_TIM_PeriodElapsedCallback+0xb0>
		  	//Routine
			registerFrame[0x04].U16 = eff.update_actual_status[0x04].U16;	// Gripper Movement Actual Status(0x10)
 8001fe0:	4b82      	ldr	r3, [pc, #520]	@ (80021ec <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001fe2:	89db      	ldrh	r3, [r3, #14]
 8001fe4:	4a7f      	ldr	r2, [pc, #508]	@ (80021e4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001fe6:	8113      	strh	r3, [r2, #8]
			registerFrame[0x10].U16 = state;							// Z-axis Moving Status(0x10)
 8001fe8:	4b81      	ldr	r3, [pc, #516]	@ (80021f0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	4a7d      	ldr	r2, [pc, #500]	@ (80021e4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001fee:	8413      	strh	r3, [r2, #32]
			registerFrame[0x11].U16 = encoder.mm;						// Z-axis Actual Position(0x11)
 8001ff0:	4b80      	ldr	r3, [pc, #512]	@ (80021f4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001ff2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001ff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ffa:	ee17 3a90 	vmov	r3, s15
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	4a78      	ldr	r2, [pc, #480]	@ (80021e4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002002:	8453      	strh	r3, [r2, #34]	@ 0x22
			registerFrame[0x12].U16 = encoder.mmps;						// Z-axis Actual Speed (0x12)
 8002004:	4b7b      	ldr	r3, [pc, #492]	@ (80021f4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002006:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800200a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800200e:	ee17 3a90 	vmov	r3, s15
 8002012:	b29b      	uxth	r3, r3
 8002014:	4a73      	ldr	r2, [pc, #460]	@ (80021e4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002016:	8493      	strh	r3, [r2, #36]	@ 0x24
			registerFrame[0x13].U16 = encoder.mmpss;					// Z-axis Acceleration(0x13)    //////ความเร่งต้องเปลี่ยน/////
 8002018:	4b76      	ldr	r3, [pc, #472]	@ (80021f4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800201a:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800201e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002022:	ee17 3a90 	vmov	r3, s15
 8002026:	b29b      	uxth	r3, r3
 8002028:	4a6e      	ldr	r2, [pc, #440]	@ (80021e4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800202a:	84d3      	strh	r3, [r2, #38]	@ 0x26
			registerFrame[0x40].U16 = encoder.rpm;						// X-axis Actual Position(0x40)
 800202c:	4b71      	ldr	r3, [pc, #452]	@ (80021f4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800202e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002036:	ee17 3a90 	vmov	r3, s15
 800203a:	b29b      	uxth	r3, r3
 800203c:	4a69      	ldr	r2, [pc, #420]	@ (80021e4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800203e:	f8a2 3080 	strh.w	r3, [r2, #128]	@ 0x80
		  heartbeat_status = 0;
 8002042:	4a69      	ldr	r2, [pc, #420]	@ (80021e8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002044:	2300      	movs	r3, #0
 8002046:	7013      	strb	r3, [r2, #0]
		}
	}
	// Run with 1000 Hz
	if(htim == &htim3){
 8002048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800204a:	4b6b      	ldr	r3, [pc, #428]	@ (80021f8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800204c:	429a      	cmp	r2, r3
 800204e:	f040 8188 	bne.w	8002362 <HAL_TIM_PeriodElapsedCallback+0x3ca>
		// Update main

		// wait for start command same as home switch
		if(ready == 1){
 8002052:	4b6a      	ldr	r3, [pc, #424]	@ (80021fc <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d10a      	bne.n	8002070 <HAL_TIM_PeriodElapsedCallback+0xd8>
			if(HAL_GPIO_ReadPin(home_gpio, home_pin) == 1){
 800205a:	2140      	movs	r1, #64	@ 0x40
 800205c:	4868      	ldr	r0, [pc, #416]	@ (8002200 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800205e:	f003 ff9f 	bl	8005fa0 <HAL_GPIO_ReadPin>
 8002062:	4603      	mov	r3, r0
 8002064:	2b01      	cmp	r3, #1
 8002066:	f040 8179 	bne.w	800235c <HAL_TIM_PeriodElapsedCallback+0x3c4>
				ready = 0;
 800206a:	4a64      	ldr	r2, [pc, #400]	@ (80021fc <HAL_TIM_PeriodElapsedCallback+0x264>)
 800206c:	2300      	movs	r3, #0
 800206e:	7013      	strb	r3, [r2, #0]
			}else{return;}
		}

		// Update encoder
		Update_qei(&encoder, &htim4);
 8002070:	4964      	ldr	r1, [pc, #400]	@ (8002204 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002072:	4860      	ldr	r0, [pc, #384]	@ (80021f4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002074:	f000 fc7a 	bl	800296c <Update_qei>

		// Update current sensor
//		Update_adc(&current_sensor);

		// Update reed switch status
		Update_actual_eff(&eff, reed_pull_gpio, reed_pull_pin, reed_push_gpio, reed_push_pin);
 8002078:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002082:	2280      	movs	r2, #128	@ 0x80
 8002084:	495e      	ldr	r1, [pc, #376]	@ (8002200 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002086:	4859      	ldr	r0, [pc, #356]	@ (80021ec <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002088:	f7ff f847 	bl	800111a <Update_actual_eff>

		// Update gripper command from base system
		Gripper_Movement_Status(&eff);
 800208c:	4857      	ldr	r0, [pc, #348]	@ (80021ec <HAL_TIM_PeriodElapsedCallback+0x254>)
 800208e:	f7fe ff29 	bl	8000ee4 <Gripper_Movement_Status>
//		// Enable gripper with command
//		Update_eff(&eff, solenoid_pull_gpio, solenoid_pull_pin, solenoid_push_gpio, solenoid_push_pin, vacuum_gpio, vacuum_pin);

		// Update point mode (set goal point)
		point.goal = (float32_t)Set_Goal_Point();
 8002092:	f7fe ff59 	bl	8000f48 <Set_Goal_Point>
 8002096:	4603      	mov	r3, r0
 8002098:	ee07 3a90 	vmov	s15, r3
 800209c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020a0:	4b59      	ldr	r3, [pc, #356]	@ (8002208 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80020a2:	edc3 7a00 	vstr	s15, [r3]
		mode = Run_Point_Mode();
 80020a6:	f7fe ff5b 	bl	8000f60 <Run_Point_Mode>
 80020aa:	4603      	mov	r3, r0
 80020ac:	4a57      	ldr	r2, [pc, #348]	@ (800220c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80020ae:	8013      	strh	r3, [r2, #0]

//		kalman_velocity = SteadyStateKalmanFilter(&kalman, test, encoder.mmps);

		//  homing command from Homing button and Base system Check command
		Set_Home(); // Refresh homing command from base system
 80020b0:	f7fe ff72 	bl	8000f98 <Set_Home>
		if(home.homing_command == 0){
 80020b4:	4b56      	ldr	r3, [pc, #344]	@ (8002210 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80020b6:	789b      	ldrb	r3, [r3, #2]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d117      	bne.n	80020ec <HAL_TIM_PeriodElapsedCallback+0x154>
			if(state == 0b0010){
 80020bc:	4b4c      	ldr	r3, [pc, #304]	@ (80021f0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d109      	bne.n	80020d8 <HAL_TIM_PeriodElapsedCallback+0x140>
				// Have command from base system
				home.homing_command = 1;
 80020c4:	4a52      	ldr	r2, [pc, #328]	@ (8002210 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80020c6:	2301      	movs	r3, #1
 80020c8:	7093      	strb	r3, [r2, #2]
				registerFrame[0x01].U16 = 0b0000; // Reset data of base system status
 80020ca:	4a46      	ldr	r2, [pc, #280]	@ (80021e4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80020cc:	2300      	movs	r3, #0
 80020ce:	8053      	strh	r3, [r2, #2]
				registerFrame[0x10].U16 = 0b0010; // Set data of moving status to Home
 80020d0:	4a44      	ldr	r2, [pc, #272]	@ (80021e4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80020d2:	2302      	movs	r3, #2
 80020d4:	8413      	strh	r3, [r2, #32]
 80020d6:	e009      	b.n	80020ec <HAL_TIM_PeriodElapsedCallback+0x154>
			}
			else if(HAL_GPIO_ReadPin(home_gpio, home_pin) == 1){
 80020d8:	2140      	movs	r1, #64	@ 0x40
 80020da:	4849      	ldr	r0, [pc, #292]	@ (8002200 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80020dc:	f003 ff60 	bl	8005fa0 <HAL_GPIO_ReadPin>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d102      	bne.n	80020ec <HAL_TIM_PeriodElapsedCallback+0x154>
				// Have command from home switch
				home.homing_command = 1;
 80020e6:	4a4a      	ldr	r2, [pc, #296]	@ (8002210 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80020e8:	2301      	movs	r3, #1
 80020ea:	7093      	strb	r3, [r2, #2]
//				registerFrame[0x10].U16 = 0b0010; // Set data of moving status to Home
			}
		}

		// Homing state
		homing(&home, GPIOB, GPIO_PIN_12); // Homing function
 80020ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80020f0:	4948      	ldr	r1, [pc, #288]	@ (8002214 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80020f2:	4847      	ldr	r0, [pc, #284]	@ (8002210 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80020f4:	f000 fdd9 	bl	8002caa <homing>
		pwm_signal = home.pwm; // Set PWM from homing function
 80020f8:	4b45      	ldr	r3, [pc, #276]	@ (8002210 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80020fa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80020fe:	4a46      	ldr	r2, [pc, #280]	@ (8002218 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002100:	8013      	strh	r3, [r2, #0]

		if(home.is_home == 1 && encoder.pulse != 0){
 8002102:	4b43      	ldr	r3, [pc, #268]	@ (8002210 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002104:	78db      	ldrb	r3, [r3, #3]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d10a      	bne.n	8002120 <HAL_TIM_PeriodElapsedCallback+0x188>
 800210a:	4b3a      	ldr	r3, [pc, #232]	@ (80021f4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800210c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002110:	4313      	orrs	r3, r2
 8002112:	d005      	beq.n	8002120 <HAL_TIM_PeriodElapsedCallback+0x188>
			// Finish homing state
			Reset_qei(&encoder); // Reset encoder data
 8002114:	4837      	ldr	r0, [pc, #220]	@ (80021f4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002116:	f000 fd3b 	bl	8002b90 <Reset_qei>
			registerFrame[0x10].U16 = 0b0000; // Reset data of moving status
 800211a:	4a32      	ldr	r2, [pc, #200]	@ (80021e4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800211c:	2300      	movs	r3, #0
 800211e:	8413      	strh	r3, [r2, #32]
		}

		// Emergency break state
		emergency(&emer, emer_light_gpio, emer_light_pin); // Activate emergency light
 8002120:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002124:	4936      	ldr	r1, [pc, #216]	@ (8002200 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002126:	483d      	ldr	r0, [pc, #244]	@ (800221c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002128:	f000 ff51 	bl	8002fce <emergency>
		if(emer.emer_state == 1){
 800212c:	4b3b      	ldr	r3, [pc, #236]	@ (800221c <HAL_TIM_PeriodElapsedCallback+0x284>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d111      	bne.n	8002158 <HAL_TIM_PeriodElapsedCallback+0x1c0>
			if(home.is_home == 1 && encoder.pulse == 0){
 8002134:	4b36      	ldr	r3, [pc, #216]	@ (8002210 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002136:	78db      	ldrb	r3, [r3, #3]
 8002138:	2b01      	cmp	r3, #1
 800213a:	f040 8111 	bne.w	8002360 <HAL_TIM_PeriodElapsedCallback+0x3c8>
 800213e:	4b2d      	ldr	r3, [pc, #180]	@ (80021f4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002140:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	f040 810b 	bne.w	8002360 <HAL_TIM_PeriodElapsedCallback+0x3c8>
				emer.emer_state = 0; // Reset emergency state
 800214a:	4b34      	ldr	r3, [pc, #208]	@ (800221c <HAL_TIM_PeriodElapsedCallback+0x284>)
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]
				home.is_home = 0; // Reset is_home state
 8002150:	4b2f      	ldr	r3, [pc, #188]	@ (8002210 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002152:	2200      	movs	r2, #0
 8002154:	70da      	strb	r2, [r3, #3]
 8002156:	e0f3      	b.n	8002340 <HAL_TIM_PeriodElapsedCallback+0x3a8>
			else{
				// No reset from homing state
				return;
			}
		// Finish homing while normal run not in emergency break state
		}else if(emer.emer_state == 0){
 8002158:	4b30      	ldr	r3, [pc, #192]	@ (800221c <HAL_TIM_PeriodElapsedCallback+0x284>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10e      	bne.n	800217e <HAL_TIM_PeriodElapsedCallback+0x1e6>
			if(home.is_home == 1 && encoder.pulse == 0){
 8002160:	4b2b      	ldr	r3, [pc, #172]	@ (8002210 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002162:	78db      	ldrb	r3, [r3, #3]
 8002164:	2b01      	cmp	r3, #1
 8002166:	f040 80eb 	bne.w	8002340 <HAL_TIM_PeriodElapsedCallback+0x3a8>
 800216a:	4b22      	ldr	r3, [pc, #136]	@ (80021f4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800216c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	f040 80e5 	bne.w	8002340 <HAL_TIM_PeriodElapsedCallback+0x3a8>
				home.is_home = 0; // Reset is_home state
 8002176:	4b26      	ldr	r3, [pc, #152]	@ (8002210 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002178:	2200      	movs	r2, #0
 800217a:	70da      	strb	r2, [r3, #3]
 800217c:	e0e0      	b.n	8002340 <HAL_TIM_PeriodElapsedCallback+0x3a8>
//		else if(encoder.mm >= 685 || encoder.mm <= 5){
//			Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
//		}

//		// Tuning and test mode(PID & Trajectory)
		else if(tuning == 1){
 800217e:	4b28      	ldr	r3, [pc, #160]	@ (8002220 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d123      	bne.n	80021ce <HAL_TIM_PeriodElapsedCallback+0x236>
			static uint64_t control_loop_ts = 0;
			if(control_loop_ts == 5){
 8002186:	4b27      	ldr	r3, [pc, #156]	@ (8002224 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218c:	1f51      	subs	r1, r2, #5
 800218e:	430b      	orrs	r3, r1
 8002190:	d107      	bne.n	80021a2 <HAL_TIM_PeriodElapsedCallback+0x20a>
				// Position control loop update
//				Update_position_control(v_output);
				control_loop_ts = 0;
 8002192:	4924      	ldr	r1, [pc, #144]	@ (8002224 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	f04f 0300 	mov.w	r3, #0
 800219c:	e9c1 2300 	strd	r2, r3, [r1]
 80021a0:	e008      	b.n	80021b4 <HAL_TIM_PeriodElapsedCallback+0x21c>
			}
			else{control_loop_ts++;}
 80021a2:	4b20      	ldr	r3, [pc, #128]	@ (8002224 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80021a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a8:	1c54      	adds	r4, r2, #1
 80021aa:	f143 0500 	adc.w	r5, r3, #0
 80021ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002224 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80021b0:	e9c3 4500 	strd	r4, r5, [r3]
			// Velocity control loop update
			Update_velocity_control(test);
 80021b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002228 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80021b6:	edd3 7a00 	vldr	s15, [r3]
 80021ba:	eeb0 0a67 	vmov.f32	s0, s15
 80021be:	f000 f925 	bl	800240c <Update_velocity_control>
			// PWM signal update
			pwm_signal = v_output;
 80021c2:	4b1a      	ldr	r3, [pc, #104]	@ (800222c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	b21a      	sxth	r2, r3
 80021c8:	4b13      	ldr	r3, [pc, #76]	@ (8002218 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80021ca:	801a      	strh	r2, [r3, #0]
 80021cc:	e0b8      	b.n	8002340 <HAL_TIM_PeriodElapsedCallback+0x3a8>
		}
		// Tuning and test mode(Joy control)
		else if(tuning == 2){
 80021ce:	4b14      	ldr	r3, [pc, #80]	@ (8002220 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d12e      	bne.n	8002234 <HAL_TIM_PeriodElapsedCallback+0x29c>
			Update_joy(&joy);
 80021d6:	4816      	ldr	r0, [pc, #88]	@ (8002230 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80021d8:	f7fe ffda 	bl	8001190 <Update_joy>
 80021dc:	e0b0      	b.n	8002340 <HAL_TIM_PeriodElapsedCallback+0x3a8>
 80021de:	bf00      	nop
 80021e0:	20000888 	.word	0x20000888
 80021e4:	20000c7c 	.word	0x20000c7c
 80021e8:	20000e0c 	.word	0x20000e0c
 80021ec:	20000e10 	.word	0x20000e10
 80021f0:	2000006c 	.word	0x2000006c
 80021f4:	20001080 	.word	0x20001080
 80021f8:	200006f0 	.word	0x200006f0
 80021fc:	20000034 	.word	0x20000034
 8002200:	48000800 	.word	0x48000800
 8002204:	200007bc 	.word	0x200007bc
 8002208:	20000c58 	.word	0x20000c58
 800220c:	20000c54 	.word	0x20000c54
 8002210:	20000c60 	.word	0x20000c60
 8002214:	48000400 	.word	0x48000400
 8002218:	20001078 	.word	0x20001078
 800221c:	20000c78 	.word	0x20000c78
 8002220:	20000029 	.word	0x20000029
 8002224:	200014a8 	.word	0x200014a8
 8002228:	2000002c 	.word	0x2000002c
 800222c:	20001104 	.word	0x20001104
 8002230:	20000fa8 	.word	0x20000fa8
		}
		// Tuning and test mode(Sensor or other check)
		else if(tuning == 3){
 8002234:	4b4d      	ldr	r3, [pc, #308]	@ (800236c <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b03      	cmp	r3, #3
 800223a:	d151      	bne.n	80022e0 <HAL_TIM_PeriodElapsedCallback+0x348>
		  sensor[0] = __HAL_TIM_GET_COUNTER(&encoder_tim);
 800223c:	4b4c      	ldr	r3, [pc, #304]	@ (8002370 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002242:	2200      	movs	r2, #0
 8002244:	4698      	mov	r8, r3
 8002246:	4691      	mov	r9, r2
 8002248:	4b4a      	ldr	r3, [pc, #296]	@ (8002374 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 800224a:	e9c3 8900 	strd	r8, r9, [r3]
		  sensor[1] = HAL_GPIO_ReadPin(proximity_gpio, proximity_pin);
 800224e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002252:	4849      	ldr	r0, [pc, #292]	@ (8002378 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8002254:	f003 fea4 	bl	8005fa0 <HAL_GPIO_ReadPin>
 8002258:	4603      	mov	r3, r0
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2200      	movs	r2, #0
 800225e:	61bb      	str	r3, [r7, #24]
 8002260:	61fa      	str	r2, [r7, #28]
 8002262:	4b44      	ldr	r3, [pc, #272]	@ (8002374 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8002264:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002268:	e9c3 1202 	strd	r1, r2, [r3, #8]
		  sensor[2] = HAL_GPIO_ReadPin(reed_pull_gpio, reed_pull_pin);
 800226c:	2180      	movs	r1, #128	@ 0x80
 800226e:	4843      	ldr	r0, [pc, #268]	@ (800237c <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 8002270:	f003 fe96 	bl	8005fa0 <HAL_GPIO_ReadPin>
 8002274:	4603      	mov	r3, r0
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2200      	movs	r2, #0
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	617a      	str	r2, [r7, #20]
 800227e:	4b3d      	ldr	r3, [pc, #244]	@ (8002374 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8002280:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002284:	e9c3 1204 	strd	r1, r2, [r3, #16]
		  sensor[3] = HAL_GPIO_ReadPin(reed_push_gpio, reed_push_pin);
 8002288:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800228c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002290:	f003 fe86 	bl	8005fa0 <HAL_GPIO_ReadPin>
 8002294:	4603      	mov	r3, r0
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2200      	movs	r2, #0
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	60fa      	str	r2, [r7, #12]
 800229e:	4b35      	ldr	r3, [pc, #212]	@ (8002374 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 80022a0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80022a4:	e9c3 1206 	strd	r1, r2, [r3, #24]
		  sensor[4] = HAL_GPIO_ReadPin(emer_gpio, emer_pin);
 80022a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022ac:	4832      	ldr	r0, [pc, #200]	@ (8002378 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 80022ae:	f003 fe77 	bl	8005fa0 <HAL_GPIO_ReadPin>
 80022b2:	4603      	mov	r3, r0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2200      	movs	r2, #0
 80022b8:	603b      	str	r3, [r7, #0]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002374 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 80022be:	e9d7 1200 	ldrd	r1, r2, [r7]
 80022c2:	e9c3 1208 	strd	r1, r2, [r3, #32]
		  sensor[5] = HAL_GPIO_ReadPin(home_gpio, home_pin);
 80022c6:	2140      	movs	r1, #64	@ 0x40
 80022c8:	482c      	ldr	r0, [pc, #176]	@ (800237c <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 80022ca:	f003 fe69 	bl	8005fa0 <HAL_GPIO_ReadPin>
 80022ce:	4603      	mov	r3, r0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2200      	movs	r2, #0
 80022d4:	469a      	mov	sl, r3
 80022d6:	4693      	mov	fp, r2
 80022d8:	4b26      	ldr	r3, [pc, #152]	@ (8002374 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 80022da:	e9c3 ab0a 	strd	sl, fp, [r3, #40]	@ 0x28
 80022de:	e02f      	b.n	8002340 <HAL_TIM_PeriodElapsedCallback+0x3a8>
		}

		// Run point mode
		else if(mode == 1 && tuning == 0 && emer.emer_state == 0 && home.is_home == 0){
 80022e0:	4b27      	ldr	r3, [pc, #156]	@ (8002380 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d12b      	bne.n	8002340 <HAL_TIM_PeriodElapsedCallback+0x3a8>
 80022e8:	4b20      	ldr	r3, [pc, #128]	@ (800236c <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d127      	bne.n	8002340 <HAL_TIM_PeriodElapsedCallback+0x3a8>
 80022f0:	4b24      	ldr	r3, [pc, #144]	@ (8002384 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d123      	bne.n	8002340 <HAL_TIM_PeriodElapsedCallback+0x3a8>
 80022f8:	4b23      	ldr	r3, [pc, #140]	@ (8002388 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 80022fa:	78db      	ldrb	r3, [r3, #3]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d104      	bne.n	800230a <HAL_TIM_PeriodElapsedCallback+0x372>
			// Check for set shelves command
			set_point = point.goal;
 8002300:	4b22      	ldr	r3, [pc, #136]	@ (800238c <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a22      	ldr	r2, [pc, #136]	@ (8002390 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	e01a      	b.n	8002340 <HAL_TIM_PeriodElapsedCallback+0x3a8>
		}

		// Set shelve mode
		else if(mode == 2 && tuning == 0 && emer.emer_state == 0 && home.is_home == 0){
 800230a:	4b1d      	ldr	r3, [pc, #116]	@ (8002380 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d116      	bne.n	8002340 <HAL_TIM_PeriodElapsedCallback+0x3a8>
 8002312:	4b16      	ldr	r3, [pc, #88]	@ (800236c <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d112      	bne.n	8002340 <HAL_TIM_PeriodElapsedCallback+0x3a8>
 800231a:	4b1a      	ldr	r3, [pc, #104]	@ (8002384 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10e      	bne.n	8002340 <HAL_TIM_PeriodElapsedCallback+0x3a8>
 8002322:	4b19      	ldr	r3, [pc, #100]	@ (8002388 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 8002324:	78db      	ldrb	r3, [r3, #3]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00a      	beq.n	8002340 <HAL_TIM_PeriodElapsedCallback+0x3a8>

		}
		// Run jog mode
		else if(mode == 3 && tuning == 0 && emer.emer_state == 0 && home.is_home == 0){
 800232a:	4b15      	ldr	r3, [pc, #84]	@ (8002380 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	2b03      	cmp	r3, #3
 8002330:	d106      	bne.n	8002340 <HAL_TIM_PeriodElapsedCallback+0x3a8>
 8002332:	4b0e      	ldr	r3, [pc, #56]	@ (800236c <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d102      	bne.n	8002340 <HAL_TIM_PeriodElapsedCallback+0x3a8>
 800233a:	4b12      	ldr	r3, [pc, #72]	@ (8002384 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0

		}

		// Main Controller loop ,Check don't have home command
		if(home.homing_command == 0 && tuning == 0){
 8002340:	4b11      	ldr	r3, [pc, #68]	@ (8002388 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 8002342:	789b      	ldrb	r3, [r3, #2]
 8002344:	2b00      	cmp	r3, #0
//			pwm_signal = v_output;
//			if((encoder.mm >= (set_point-0.1) && encoder.mm <= (set_point+0.1)) && (mode == 1 || mode == 2 || mode == 3)){
//				finish_job = 1;
//			}
		}
		Update_pwm(&pwm_tim, pwm_channel, dir_gpio, dir_pin, pwm_signal); // Update main PWM signal
 8002346:	4b13      	ldr	r3, [pc, #76]	@ (8002394 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8002348:	f9b3 3000 	ldrsh.w	r3, [r3]
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	2302      	movs	r3, #2
 8002350:	4a0a      	ldr	r2, [pc, #40]	@ (800237c <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 8002352:	2100      	movs	r1, #0
 8002354:	4810      	ldr	r0, [pc, #64]	@ (8002398 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8002356:	f000 fa19 	bl	800278c <Update_pwm>
 800235a:	e002      	b.n	8002362 <HAL_TIM_PeriodElapsedCallback+0x3ca>
			}else{return;}
 800235c:	bf00      	nop
 800235e:	e000      	b.n	8002362 <HAL_TIM_PeriodElapsedCallback+0x3ca>
				return;
 8002360:	bf00      	nop
	}
}
 8002362:	3728      	adds	r7, #40	@ 0x28
 8002364:	46bd      	mov	sp, r7
 8002366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800236a:	bf00      	nop
 800236c:	20000029 	.word	0x20000029
 8002370:	200007bc 	.word	0x200007bc
 8002374:	20000c20 	.word	0x20000c20
 8002378:	48000400 	.word	0x48000400
 800237c:	48000800 	.word	0x48000800
 8002380:	20000c54 	.word	0x20000c54
 8002384:	20000c78 	.word	0x20000c78
 8002388:	20000c60 	.word	0x20000c60
 800238c:	20000c58 	.word	0x20000c58
 8002390:	20000c50 	.word	0x20000c50
 8002394:	20001078 	.word	0x20001078
 8002398:	20000624 	.word	0x20000624

0800239c <HAL_GPIO_EXTI_Callback>:

// GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af02      	add	r7, sp, #8
 80023a2:	4603      	mov	r3, r0
 80023a4:	80fb      	strh	r3, [r7, #6]
	// Activate and Deactivate tuning mode
	if(GPIO_Pin == GPIO_PIN_13){
 80023a6:	88fb      	ldrh	r3, [r7, #6]
 80023a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023ac:	d10c      	bne.n	80023c8 <HAL_GPIO_EXTI_Callback+0x2c>
		tuning++;
 80023ae:	4b13      	ldr	r3, [pc, #76]	@ (80023fc <HAL_GPIO_EXTI_Callback+0x60>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	3301      	adds	r3, #1
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4b11      	ldr	r3, [pc, #68]	@ (80023fc <HAL_GPIO_EXTI_Callback+0x60>)
 80023b8:	701a      	strb	r2, [r3, #0]
		if(tuning == 4){
 80023ba:	4b10      	ldr	r3, [pc, #64]	@ (80023fc <HAL_GPIO_EXTI_Callback+0x60>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d102      	bne.n	80023c8 <HAL_GPIO_EXTI_Callback+0x2c>
			tuning = 0;
 80023c2:	4b0e      	ldr	r3, [pc, #56]	@ (80023fc <HAL_GPIO_EXTI_Callback+0x60>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if(GPIO_Pin == GPIO_PIN_15){
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023ce:	d110      	bne.n	80023f2 <HAL_GPIO_EXTI_Callback+0x56>
		// Emergency switch interrupted
		// Stop motor
		Update_pwm(&pwm_tim, pwm_channel, dir_gpio, dir_pin, 0);
 80023d0:	2300      	movs	r3, #0
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	2302      	movs	r3, #2
 80023d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002400 <HAL_GPIO_EXTI_Callback+0x64>)
 80023d8:	2100      	movs	r1, #0
 80023da:	480a      	ldr	r0, [pc, #40]	@ (8002404 <HAL_GPIO_EXTI_Callback+0x68>)
 80023dc:	f000 f9d6 	bl	800278c <Update_pwm>
		// Emergency light enable
		HAL_GPIO_WritePin(emer_light_gpio, emer_light_pin, SET);
 80023e0:	2201      	movs	r2, #1
 80023e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023e6:	4806      	ldr	r0, [pc, #24]	@ (8002400 <HAL_GPIO_EXTI_Callback+0x64>)
 80023e8:	f003 fdf2 	bl	8005fd0 <HAL_GPIO_WritePin>
		emer.emer_state = 1;
 80023ec:	4b06      	ldr	r3, [pc, #24]	@ (8002408 <HAL_GPIO_EXTI_Callback+0x6c>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	701a      	strb	r2, [r3, #0]
	}
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000029 	.word	0x20000029
 8002400:	48000800 	.word	0x48000800
 8002404:	20000624 	.word	0x20000624
 8002408:	20000c78 	.word	0x20000c78

0800240c <Update_velocity_control>:
// Torque control update
void Update_torque_control(float32_t s){

}
// Velocity control update
void Update_velocity_control(float32_t s){
 800240c:	b5b0      	push	{r4, r5, r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	ed87 0a01 	vstr	s0, [r7, #4]
	//input is pulse unit
	v_e = s - Get_mmps(&encoder);
 8002416:	481b      	ldr	r0, [pc, #108]	@ (8002484 <Update_velocity_control+0x78>)
 8002418:	f000 fc07 	bl	8002c2a <Get_mmps>
 800241c:	eeb0 7a40 	vmov.f32	s14, s0
 8002420:	edd7 7a01 	vldr	s15, [r7, #4]
 8002424:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002428:	4b17      	ldr	r3, [pc, #92]	@ (8002488 <Update_velocity_control+0x7c>)
 800242a:	edc3 7a00 	vstr	s15, [r3]
	pid_time[0]++;
 800242e:	4b17      	ldr	r3, [pc, #92]	@ (800248c <Update_velocity_control+0x80>)
 8002430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002434:	1c54      	adds	r4, r2, #1
 8002436:	f143 0500 	adc.w	r5, r3, #0
 800243a:	4b14      	ldr	r3, [pc, #80]	@ (800248c <Update_velocity_control+0x80>)
 800243c:	e9c3 4500 	strd	r4, r5, [r3]
	if(v_e <= min_error){
 8002440:	4b11      	ldr	r3, [pc, #68]	@ (8002488 <Update_velocity_control+0x7c>)
 8002442:	ed93 7a00 	vldr	s14, [r3]
 8002446:	4b12      	ldr	r3, [pc, #72]	@ (8002490 <Update_velocity_control+0x84>)
 8002448:	edd3 7a00 	vldr	s15, [r3]
 800244c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002454:	d803      	bhi.n	800245e <Update_velocity_control+0x52>
		min_error = v_e;
 8002456:	4b0c      	ldr	r3, [pc, #48]	@ (8002488 <Update_velocity_control+0x7c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a0d      	ldr	r2, [pc, #52]	@ (8002490 <Update_velocity_control+0x84>)
 800245c:	6013      	str	r3, [r2, #0]
//		pid_time[1] = pid_time[0];
	}

	v_output = Update_pid(&v_pid, v_e, 900.0, 1000.0);
 800245e:	4b0a      	ldr	r3, [pc, #40]	@ (8002488 <Update_velocity_control+0x7c>)
 8002460:	edd3 7a00 	vldr	s15, [r3]
 8002464:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 8002494 <Update_velocity_control+0x88>
 8002468:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 8002498 <Update_velocity_control+0x8c>
 800246c:	eeb0 0a67 	vmov.f32	s0, s15
 8002470:	480a      	ldr	r0, [pc, #40]	@ (800249c <Update_velocity_control+0x90>)
 8002472:	f000 f843 	bl	80024fc <Update_pid>
 8002476:	4603      	mov	r3, r0
 8002478:	4a09      	ldr	r2, [pc, #36]	@ (80024a0 <Update_velocity_control+0x94>)
 800247a:	6013      	str	r3, [r2, #0]
}
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bdb0      	pop	{r4, r5, r7, pc}
 8002484:	20001080 	.word	0x20001080
 8002488:	20001100 	.word	0x20001100
 800248c:	20000c10 	.word	0x20000c10
 8002490:	20000030 	.word	0x20000030
 8002494:	447a0000 	.word	0x447a0000
 8002498:	44610000 	.word	0x44610000
 800249c:	200010e0 	.word	0x200010e0
 80024a0:	20001104 	.word	0x20001104

080024a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024a8:	b672      	cpsid	i
}
 80024aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024ac:	bf00      	nop
 80024ae:	e7fd      	b.n	80024ac <Error_Handler+0x8>

080024b0 <PID_init>:
 *  Created on: Apr 26, 2024
 *      Author: naker
 */
#include "pid.h"

void PID_init(PID* pid, float32_t _kp,  float32_t _ki, float32_t _kd, float32_t _sampt){
 80024b0:	b480      	push	{r7}
 80024b2:	b087      	sub	sp, #28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6178      	str	r0, [r7, #20]
 80024b8:	ed87 0a04 	vstr	s0, [r7, #16]
 80024bc:	edc7 0a03 	vstr	s1, [r7, #12]
 80024c0:	ed87 1a02 	vstr	s2, [r7, #8]
 80024c4:	edc7 1a01 	vstr	s3, [r7, #4]
	pid -> kp = _kp;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	601a      	str	r2, [r3, #0]
	pid -> ki = _ki;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	605a      	str	r2, [r3, #4]
	pid -> kd = _kd;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	609a      	str	r2, [r3, #8]
	pid -> sampt = _sampt;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	60da      	str	r2, [r3, #12]
	pid -> y_n = 0.0;
 80024e0:	6979      	ldr	r1, [r7, #20]
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80024ee:	bf00      	nop
 80024f0:	371c      	adds	r7, #28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <Update_pid>:
int32_t Update_pid(PID *pid, float32_t error, float32_t pid_sat, float32_t plant_sat) {
 80024fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002500:	b08a      	sub	sp, #40	@ 0x28
 8002502:	af00      	add	r7, sp, #0
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	ed87 0a02 	vstr	s0, [r7, #8]
 800250a:	edc7 0a01 	vstr	s1, [r7, #4]
 800250e:	ed87 1a00 	vstr	s2, [r7]
//	static float32_t y_n = 0; // Output[n]
	static float32_t y_n_1 = 0; // Output[n-1]
	float32_t e_n = error; // error[n]
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	61bb      	str	r3, [r7, #24]
	static float32_t e_n_1 = 0; // error[n-1]

	float32_t p_term = e_n * pid -> kp;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	edd3 7a00 	vldr	s15, [r3]
 800251c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002524:	edc7 7a05 	vstr	s15, [r7, #20]
	float32_t d_term = ((e_n - e_n_1) * pid -> kd) / pid -> sampt;
 8002528:	4b96      	ldr	r3, [pc, #600]	@ (8002784 <Update_pid+0x288>)
 800252a:	edd3 7a00 	vldr	s15, [r3]
 800252e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002532:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	edd3 7a02 	vldr	s15, [r3, #8]
 800253c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	ed93 7a03 	vldr	s14, [r3, #12]
 8002546:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800254a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float32_t i_term = ((pid -> ki * pid -> sampt / 2.0)*(e_n + e_n_1)) + y_n_1;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	ed93 7a01 	vldr	s14, [r3, #4]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	edd3 7a03 	vldr	s15, [r3, #12]
 800255a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800255e:	ee17 0a90 	vmov	r0, s15
 8002562:	f7fd ffbd 	bl	80004e0 <__aeabi_f2d>
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800256e:	f7fe f939 	bl	80007e4 <__aeabi_ddiv>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	4690      	mov	r8, r2
 8002578:	4699      	mov	r9, r3
 800257a:	4b82      	ldr	r3, [pc, #520]	@ (8002784 <Update_pid+0x288>)
 800257c:	ed93 7a00 	vldr	s14, [r3]
 8002580:	edd7 7a06 	vldr	s15, [r7, #24]
 8002584:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002588:	ee17 0a90 	vmov	r0, s15
 800258c:	f7fd ffa8 	bl	80004e0 <__aeabi_f2d>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4640      	mov	r0, r8
 8002596:	4649      	mov	r1, r9
 8002598:	f7fd fffa 	bl	8000590 <__aeabi_dmul>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4690      	mov	r8, r2
 80025a2:	4699      	mov	r9, r3
 80025a4:	4b78      	ldr	r3, [pc, #480]	@ (8002788 <Update_pid+0x28c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fd ff99 	bl	80004e0 <__aeabi_f2d>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	4640      	mov	r0, r8
 80025b4:	4649      	mov	r1, r9
 80025b6:	f7fd fe35 	bl	8000224 <__adddf3>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	4610      	mov	r0, r2
 80025c0:	4619      	mov	r1, r3
 80025c2:	f7fe fac7 	bl	8000b54 <__aeabi_d2f>
 80025c6:	4603      	mov	r3, r0
 80025c8:	623b      	str	r3, [r7, #32]

	if(pid -> ki == 0){
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80025d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d8:	d102      	bne.n	80025e0 <Update_pid+0xe4>
		i_term = 0;
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	623b      	str	r3, [r7, #32]
	}
	if(pid -> kd == 0){
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80025e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ee:	d102      	bne.n	80025f6 <Update_pid+0xfa>
		d_term = 0;
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	pid -> y_n = p_term + d_term + i_term; // pid output
 80025f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80025fa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80025fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002602:	edd7 7a08 	vldr	s15, [r7, #32]
 8002606:	ee77 7a27 	vadd.f32	s15, s14, s15
 800260a:	ee17 0a90 	vmov	r0, s15
 800260e:	f7fd ff67 	bl	80004e0 <__aeabi_f2d>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	68f9      	ldr	r1, [r7, #12]
 8002618:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uint8_t is_sat = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	77fb      	strb	r3, [r7, #31]
	// check is pid output is saturating
	if(pid -> y_n > pid_sat){
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7fd ff5a 	bl	80004e0 <__aeabi_f2d>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4640      	mov	r0, r8
 8002632:	4649      	mov	r1, r9
 8002634:	f7fe fa3c 	bl	8000ab0 <__aeabi_dcmpgt>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <Update_pid+0x148>
		is_sat = 1;
 800263e:	2301      	movs	r3, #1
 8002640:	77fb      	strb	r3, [r7, #31]
 8002642:	e016      	b.n	8002672 <Update_pid+0x176>
	}
	else if(pid -> y_n < -(pid_sat)){
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 800264a:	edd7 7a01 	vldr	s15, [r7, #4]
 800264e:	eef1 7a67 	vneg.f32	s15, s15
 8002652:	ee17 3a90 	vmov	r3, s15
 8002656:	4618      	mov	r0, r3
 8002658:	f7fd ff42 	bl	80004e0 <__aeabi_f2d>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4640      	mov	r0, r8
 8002662:	4649      	mov	r1, r9
 8002664:	f7fe fa06 	bl	8000a74 <__aeabi_dcmplt>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <Update_pid+0x176>
		is_sat = 1;
 800266e:	2301      	movs	r3, #1
 8002670:	77fb      	strb	r3, [r7, #31]
	}
	// check is error sign and output sign is equal
	if(e_n * pid -> y_n == fabs(e_n * pid -> y_n)){
 8002672:	69b8      	ldr	r0, [r7, #24]
 8002674:	f7fd ff34 	bl	80004e0 <__aeabi_f2d>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800267e:	f7fd ff87 	bl	8000590 <__aeabi_dmul>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4690      	mov	r8, r2
 8002688:	4699      	mov	r9, r3
 800268a:	69b8      	ldr	r0, [r7, #24]
 800268c:	f7fd ff28 	bl	80004e0 <__aeabi_f2d>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002696:	f7fd ff7b 	bl	8000590 <__aeabi_dmul>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	4614      	mov	r4, r2
 80026a0:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80026a4:	4622      	mov	r2, r4
 80026a6:	462b      	mov	r3, r5
 80026a8:	4640      	mov	r0, r8
 80026aa:	4649      	mov	r1, r9
 80026ac:	f7fe f9d8 	bl	8000a60 <__aeabi_dcmpeq>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d011      	beq.n	80026da <Update_pid+0x1de>
		// if pid output is saturating and error sign and output sign is  i_term = 0;
		if(is_sat == 1){
 80026b6:	7ffb      	ldrb	r3, [r7, #31]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d10e      	bne.n	80026da <Update_pid+0x1de>
			pid -> y_n = p_term + d_term;
 80026bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80026c0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80026c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026c8:	ee17 0a90 	vmov	r0, s15
 80026cc:	f7fd ff08 	bl	80004e0 <__aeabi_f2d>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	68f9      	ldr	r1, [r7, #12]
 80026d6:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}
	}
	// Plant saturation
	if(pid -> y_n > plant_sat){
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80026e0:	6838      	ldr	r0, [r7, #0]
 80026e2:	f7fd fefd 	bl	80004e0 <__aeabi_f2d>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4620      	mov	r0, r4
 80026ec:	4629      	mov	r1, r5
 80026ee:	f7fe f9df 	bl	8000ab0 <__aeabi_dcmpgt>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <Update_pid+0x20e>
		pid -> y_n = plant_sat;
 80026f8:	6838      	ldr	r0, [r7, #0]
 80026fa:	f7fd fef1 	bl	80004e0 <__aeabi_f2d>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	68f9      	ldr	r1, [r7, #12]
 8002704:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002708:	e022      	b.n	8002750 <Update_pid+0x254>
	}
	else if(pid -> y_n < -(plant_sat)){
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002710:	edd7 7a00 	vldr	s15, [r7]
 8002714:	eef1 7a67 	vneg.f32	s15, s15
 8002718:	ee17 3a90 	vmov	r3, s15
 800271c:	4618      	mov	r0, r3
 800271e:	f7fd fedf 	bl	80004e0 <__aeabi_f2d>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	4620      	mov	r0, r4
 8002728:	4629      	mov	r1, r5
 800272a:	f7fe f9a3 	bl	8000a74 <__aeabi_dcmplt>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00d      	beq.n	8002750 <Update_pid+0x254>
		pid -> y_n = (-(plant_sat));
 8002734:	edd7 7a00 	vldr	s15, [r7]
 8002738:	eef1 7a67 	vneg.f32	s15, s15
 800273c:	ee17 3a90 	vmov	r3, s15
 8002740:	4618      	mov	r0, r3
 8002742:	f7fd fecd 	bl	80004e0 <__aeabi_f2d>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	68f9      	ldr	r1, [r7, #12]
 800274c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}
	// Update value
	y_n_1 = pid -> y_n;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002756:	4610      	mov	r0, r2
 8002758:	4619      	mov	r1, r3
 800275a:	f7fe f9fb 	bl	8000b54 <__aeabi_d2f>
 800275e:	4603      	mov	r3, r0
 8002760:	4a09      	ldr	r2, [pc, #36]	@ (8002788 <Update_pid+0x28c>)
 8002762:	6013      	str	r3, [r2, #0]
	e_n_1 = e_n;
 8002764:	4a07      	ldr	r2, [pc, #28]	@ (8002784 <Update_pid+0x288>)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	6013      	str	r3, [r2, #0]
	return pid -> y_n;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002770:	4610      	mov	r0, r2
 8002772:	4619      	mov	r1, r3
 8002774:	f7fe f9a6 	bl	8000ac4 <__aeabi_d2iz>
 8002778:	4603      	mov	r3, r0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3728      	adds	r7, #40	@ 0x28
 800277e:	46bd      	mov	sp, r7
 8002780:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002784:	200014b0 	.word	0x200014b0
 8002788:	200014b4 	.word	0x200014b4

0800278c <Update_pwm>:
 *      Author: naker
 */

#include "pwm.h"

void Update_pwm(TIM_HandleTypeDef* htim, uint16_t htim_channel,GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, int32_t pwm_signal) {
 800278c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002790:	b08b      	sub	sp, #44	@ 0x2c
 8002792:	af00      	add	r7, sp, #0
 8002794:	6278      	str	r0, [r7, #36]	@ 0x24
 8002796:	61fa      	str	r2, [r7, #28]
 8002798:	461a      	mov	r2, r3
 800279a:	460b      	mov	r3, r1
 800279c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800279e:	4613      	mov	r3, r2
 80027a0:	843b      	strh	r3, [r7, #32]
	__HAL_TIM_SET_COMPARE(htim, htim_channel, fabs(pwm_signal));
 80027a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d111      	bne.n	80027cc <Update_pwm+0x40>
 80027a8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80027aa:	f7fd fe87 	bl	80004bc <__aeabi_i2d>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	613a      	str	r2, [r7, #16]
 80027b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027bc:	681c      	ldr	r4, [r3, #0]
 80027be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027c2:	f7fe f9a7 	bl	8000b14 <__aeabi_d2uiz>
 80027c6:	4603      	mov	r3, r0
 80027c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80027ca:	e061      	b.n	8002890 <Update_pwm+0x104>
 80027cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d111      	bne.n	80027f6 <Update_pwm+0x6a>
 80027d2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80027d4:	f7fd fe72 	bl	80004bc <__aeabi_i2d>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	60ba      	str	r2, [r7, #8]
 80027de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e6:	681c      	ldr	r4, [r3, #0]
 80027e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027ec:	f7fe f992 	bl	8000b14 <__aeabi_d2uiz>
 80027f0:	4603      	mov	r3, r0
 80027f2:	63a3      	str	r3, [r4, #56]	@ 0x38
 80027f4:	e04c      	b.n	8002890 <Update_pwm+0x104>
 80027f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d111      	bne.n	8002820 <Update_pwm+0x94>
 80027fc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80027fe:	f7fd fe5d 	bl	80004bc <__aeabi_i2d>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	603a      	str	r2, [r7, #0]
 8002808:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800280c:	607b      	str	r3, [r7, #4]
 800280e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002810:	681c      	ldr	r4, [r3, #0]
 8002812:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002816:	f7fe f97d 	bl	8000b14 <__aeabi_d2uiz>
 800281a:	4603      	mov	r3, r0
 800281c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800281e:	e037      	b.n	8002890 <Update_pwm+0x104>
 8002820:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002822:	2b0c      	cmp	r3, #12
 8002824:	d110      	bne.n	8002848 <Update_pwm+0xbc>
 8002826:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002828:	f7fd fe48 	bl	80004bc <__aeabi_i2d>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4615      	mov	r5, r2
 8002832:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 8002836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002838:	681c      	ldr	r4, [r3, #0]
 800283a:	4628      	mov	r0, r5
 800283c:	4631      	mov	r1, r6
 800283e:	f7fe f969 	bl	8000b14 <__aeabi_d2uiz>
 8002842:	4603      	mov	r3, r0
 8002844:	6423      	str	r3, [r4, #64]	@ 0x40
 8002846:	e023      	b.n	8002890 <Update_pwm+0x104>
 8002848:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800284a:	2b10      	cmp	r3, #16
 800284c:	d110      	bne.n	8002870 <Update_pwm+0xe4>
 800284e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002850:	f7fd fe34 	bl	80004bc <__aeabi_i2d>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4692      	mov	sl, r2
 800285a:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 800285e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002860:	681c      	ldr	r4, [r3, #0]
 8002862:	4650      	mov	r0, sl
 8002864:	4659      	mov	r1, fp
 8002866:	f7fe f955 	bl	8000b14 <__aeabi_d2uiz>
 800286a:	4603      	mov	r3, r0
 800286c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800286e:	e00f      	b.n	8002890 <Update_pwm+0x104>
 8002870:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002872:	f7fd fe23 	bl	80004bc <__aeabi_i2d>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4690      	mov	r8, r2
 800287c:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8002880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002882:	681c      	ldr	r4, [r3, #0]
 8002884:	4640      	mov	r0, r8
 8002886:	4649      	mov	r1, r9
 8002888:	f7fe f944 	bl	8000b14 <__aeabi_d2uiz>
 800288c:	4603      	mov	r3, r0
 800288e:	64e3      	str	r3, [r4, #76]	@ 0x4c
	if (pwm_signal < 0) {
 8002890:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002892:	2b00      	cmp	r3, #0
 8002894:	da06      	bge.n	80028a4 <Update_pwm+0x118>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, RESET);
 8002896:	8c3b      	ldrh	r3, [r7, #32]
 8002898:	2200      	movs	r2, #0
 800289a:	4619      	mov	r1, r3
 800289c:	69f8      	ldr	r0, [r7, #28]
 800289e:	f003 fb97 	bl	8005fd0 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
	}
}
 80028a2:	e005      	b.n	80028b0 <Update_pwm+0x124>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
 80028a4:	8c3b      	ldrh	r3, [r7, #32]
 80028a6:	2201      	movs	r2, #1
 80028a8:	4619      	mov	r1, r3
 80028aa:	69f8      	ldr	r0, [r7, #28]
 80028ac:	f003 fb90 	bl	8005fd0 <HAL_GPIO_WritePin>
}
 80028b0:	bf00      	nop
 80028b2:	372c      	adds	r7, #44	@ 0x2c
 80028b4:	46bd      	mov	sp, r7
 80028b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080028ba <QEI_init>:
 *  Created on: Apr 24, 2024
 *      Author: naker
 */
#include "qei.h"

void QEI_init(QEI* qei, int32_t ppr, int32_t freq, int32_t period){
 80028ba:	b480      	push	{r7}
 80028bc:	b085      	sub	sp, #20
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	603b      	str	r3, [r7, #0]
	qei -> ppr = ppr;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	601a      	str	r2, [r3, #0]
	qei -> freq = freq;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	605a      	str	r2, [r3, #4]
	qei -> period = period;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	609a      	str	r2, [r3, #8]
	qei -> counter_value[NEW] = 0;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 80028ec:	68f9      	ldr	r1, [r7, #12]
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	f04f 0300 	mov.w	r3, #0
 80028f6:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0.0;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0.0;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f04f 0200 	mov.w	r2, #0
 8002908:	621a      	str	r2, [r3, #32]
	qei -> mm = 0.0;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	629a      	str	r2, [r3, #40]	@ 0x28
	qei -> pps = 0.0;
 8002912:	68f9      	ldr	r1, [r7, #12]
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> rpm = 0.0;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> radps = 0.0;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> mmps = 0.0;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	641a      	str	r2, [r3, #64]	@ 0x40
	qei -> radpss = 0.0;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	655a      	str	r2, [r3, #84]	@ 0x54
	qei -> rpms = 0.0;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	659a      	str	r2, [r3, #88]	@ 0x58
	qei -> mmpss = 0.0;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	65da      	str	r2, [r3, #92]	@ 0x5c
	qei -> velocity_value[NEW] = 0;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	645a      	str	r2, [r3, #68]	@ 0x44
	qei -> velocity_value[OLD] = 0;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	649a      	str	r2, [r3, #72]	@ 0x48

}
 8002960:	bf00      	nop
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <Update_qei>:

void Update_qei(QEI* qei, TIM_HandleTypeDef* htim){
 800296c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	6039      	str	r1, [r7, #0]
	// Update counter
	qei -> counter_value[NEW] = __HAL_TIM_GET_COUNTER(htim);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	60da      	str	r2, [r3, #12]
	// Update difference of counter's value = NEW - OLD
	qei -> diff_counter_value = qei -> counter_value[NEW] - qei -> counter_value[OLD];
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	461a      	mov	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	615a      	str	r2, [r3, #20]
	if(qei -> diff_counter_value > qei -> period / 2){
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695a      	ldr	r2, [r3, #20]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	0fd9      	lsrs	r1, r3, #31
 800299c:	440b      	add	r3, r1
 800299e:	105b      	asrs	r3, r3, #1
 80029a0:	429a      	cmp	r2, r3
 80029a2:	dd06      	ble.n	80029b2 <Update_qei+0x46>
		qei -> diff_counter_value -= qei -> period;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	695a      	ldr	r2, [r3, #20]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	1ad2      	subs	r2, r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	615a      	str	r2, [r3, #20]
	}
	// over flow problem
	if(qei -> diff_counter_value < -(qei -> period) / 2){
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	425b      	negs	r3, r3
 80029bc:	0fd9      	lsrs	r1, r3, #31
 80029be:	440b      	add	r3, r1
 80029c0:	105b      	asrs	r3, r3, #1
 80029c2:	429a      	cmp	r2, r3
 80029c4:	da06      	bge.n	80029d4 <Update_qei+0x68>
		qei -> diff_counter_value += qei -> period;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695a      	ldr	r2, [r3, #20]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	441a      	add	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	615a      	str	r2, [r3, #20]
	}
	// Update velocity at difference unit
	qei -> pps = (float)qei -> diff_counter_value * (float)(qei -> freq);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	ee07 3a90 	vmov	s15, r3
 80029dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	ee07 3a90 	vmov	s15, r3
 80029e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f0:	ee17 0a90 	vmov	r0, s15
 80029f4:	f7fd fd74 	bl	80004e0 <__aeabi_f2d>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
//	qei -> radps = qei -> pps * 2.0 * M_PI / (float)(qei -> ppr);
//	qei -> rpm = qei -> pps * 60.0 / (float)(qei -> ppr) ;
	qei -> mmps = qei -> pps * 16.0 / (float)(qei -> ppr);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	4b5f      	ldr	r3, [pc, #380]	@ (8002b8c <Update_qei+0x220>)
 8002a0e:	f7fd fdbf 	bl	8000590 <__aeabi_dmul>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4692      	mov	sl, r2
 8002a18:	469b      	mov	fp, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	ee07 3a90 	vmov	s15, r3
 8002a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a26:	ee17 0a90 	vmov	r0, s15
 8002a2a:	f7fd fd59 	bl	80004e0 <__aeabi_f2d>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4650      	mov	r0, sl
 8002a34:	4659      	mov	r1, fp
 8002a36:	f7fd fed5 	bl	80007e4 <__aeabi_ddiv>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4610      	mov	r0, r2
 8002a40:	4619      	mov	r1, r3
 8002a42:	f7fe f887 	bl	8000b54 <__aeabi_d2f>
 8002a46:	4602      	mov	r2, r0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	641a      	str	r2, [r3, #64]	@ 0x40

	// Update position at difference unit
	qei -> pulse += qei -> diff_counter_value;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	6949      	ldr	r1, [r1, #20]
 8002a56:	17c8      	asrs	r0, r1, #31
 8002a58:	460c      	mov	r4, r1
 8002a5a:	4605      	mov	r5, r0
 8002a5c:	eb12 0804 	adds.w	r8, r2, r4
 8002a60:	eb43 0905 	adc.w	r9, r3, r5
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	e9c3 8906 	strd	r8, r9, [r3, #24]
//	qei -> rad += (float)qei -> diff_counter_value * 2.0 * M_PI / (float)(qei -> ppr);
//	qei -> rev += (float)qei -> diff_counter_value / (float)(qei -> ppr);
	qei -> mm += (float)qei -> diff_counter_value * 16.0 / (float)(qei -> ppr); // for lead 16 mm.
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fd fd36 	bl	80004e0 <__aeabi_f2d>
 8002a74:	4604      	mov	r4, r0
 8002a76:	460d      	mov	r5, r1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	ee07 3a90 	vmov	s15, r3
 8002a80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a84:	ee17 0a90 	vmov	r0, s15
 8002a88:	f7fd fd2a 	bl	80004e0 <__aeabi_f2d>
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	4b3e      	ldr	r3, [pc, #248]	@ (8002b8c <Update_qei+0x220>)
 8002a92:	f7fd fd7d 	bl	8000590 <__aeabi_dmul>
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4690      	mov	r8, r2
 8002a9c:	4699      	mov	r9, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	ee07 3a90 	vmov	s15, r3
 8002aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aaa:	ee17 0a90 	vmov	r0, s15
 8002aae:	f7fd fd17 	bl	80004e0 <__aeabi_f2d>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4640      	mov	r0, r8
 8002ab8:	4649      	mov	r1, r9
 8002aba:	f7fd fe93 	bl	80007e4 <__aeabi_ddiv>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4620      	mov	r0, r4
 8002ac4:	4629      	mov	r1, r5
 8002ac6:	f7fd fbad 	bl	8000224 <__adddf3>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	4610      	mov	r0, r2
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	f7fe f83f 	bl	8000b54 <__aeabi_d2f>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	629a      	str	r2, [r3, #40]	@ 0x28

	// Update acceleration
	qei -> velocity_value[NEW] = qei -> pps;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f7fe f835 	bl	8000b54 <__aeabi_d2f>
 8002aea:	4602      	mov	r2, r0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	645a      	str	r2, [r3, #68]	@ 0x44
	qei -> diff_velocity_value = qei -> velocity_value[NEW] - qei -> velocity_value[OLD];
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002afc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	qei -> ppss = qei -> diff_velocity_value * (float)(qei -> freq);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	ee07 3a90 	vmov	s15, r3
 8002b14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
//	qei -> radpss = qei -> ppss * 2.0 * M_PI / (float)(qei -> ppr);
//	qei -> rpms = qei -> ppss * 60.0 / (float)(qei -> ppr);
	qei -> mmpss = qei -> ppss * 16.0 / (float)(qei -> ppr); // Acceleration in mm/s^2
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fd fcda 	bl	80004e0 <__aeabi_f2d>
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	4b16      	ldr	r3, [pc, #88]	@ (8002b8c <Update_qei+0x220>)
 8002b32:	f7fd fd2d 	bl	8000590 <__aeabi_dmul>
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4614      	mov	r4, r2
 8002b3c:	461d      	mov	r5, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	ee07 3a90 	vmov	s15, r3
 8002b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b4a:	ee17 0a90 	vmov	r0, s15
 8002b4e:	f7fd fcc7 	bl	80004e0 <__aeabi_f2d>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4620      	mov	r0, r4
 8002b58:	4629      	mov	r1, r5
 8002b5a:	f7fd fe43 	bl	80007e4 <__aeabi_ddiv>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	4610      	mov	r0, r2
 8002b64:	4619      	mov	r1, r3
 8002b66:	f7fd fff5 	bl	8000b54 <__aeabi_d2f>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	65da      	str	r2, [r3, #92]	@ 0x5c

	// Update OLD value
	qei -> counter_value[OLD] = qei -> counter_value[NEW];
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68da      	ldr	r2, [r3, #12]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	611a      	str	r2, [r3, #16]
	qei -> velocity_value[OLD] = qei -> velocity_value[NEW];
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	649a      	str	r2, [r3, #72]	@ 0x48

}
 8002b80:	bf00      	nop
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40300000 	.word	0x40300000

08002b90 <Reset_qei>:

void Reset_qei(QEI* qei){
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
	qei -> counter_value[NEW] = 0;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0.0;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0.0;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	621a      	str	r2, [r3, #32]
	qei -> mm = 0.0;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	629a      	str	r2, [r3, #40]	@ 0x28
	qei -> pps = 0.0;
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	f04f 0300 	mov.w	r3, #0
 8002bda:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> rpm = 0.0;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> radps = 0.0;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> mmps = 0.0;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	641a      	str	r2, [r3, #64]	@ 0x40
	qei -> radpss = 0.0;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	655a      	str	r2, [r3, #84]	@ 0x54
	qei -> rpms = 0.0;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	659a      	str	r2, [r3, #88]	@ 0x58
	qei -> mmpss = 0.0;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	65da      	str	r2, [r3, #92]	@ 0x5c
	qei -> velocity_value[NEW] = 0;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f04f 0200 	mov.w	r2, #0
 8002c14:	645a      	str	r2, [r3, #68]	@ 0x44
	qei -> velocity_value[OLD] = 0;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <Get_mmps>:

float32_t Get_mmps(QEI* qei){
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
	return qei -> mmps;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	ee07 3a90 	vmov	s15, r3
}
 8002c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <point_init>:
 *  Created on: May 3, 2024
 *      Author: naker
 */
#include "state.h"

void point_init(POINT* point){
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
	point -> goal = 0;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f04f 0200 	mov.w	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <homing_init>:



void homing_init(HOME* home){
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
	home -> homing_command = 0;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	709a      	strb	r2, [r3, #2]
	home -> homing_state[0] = 0;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
	home -> homing_state[1] = 0;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	705a      	strb	r2, [r3, #1]
	home -> is_home = 0;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	70da      	strb	r2, [r3, #3]
	home -> homing_first = 0;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	711a      	strb	r2, [r3, #4]
	home -> homing_ts = 0;
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	e9c1 2302 	strd	r2, r3, [r1, #8]
	home -> pwm = 0;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	821a      	strh	r2, [r3, #16]
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <homing>:
void homing(HOME* home, GPIO_TypeDef* GPIO_Prox, uint16_t GPIO_Pin_Prox)
{
 8002caa:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6178      	str	r0, [r7, #20]
 8002cb4:	6139      	str	r1, [r7, #16]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	81fb      	strh	r3, [r7, #14]
	// If we have homing command
	if(home -> homing_command == 1){
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	789b      	ldrb	r3, [r3, #2]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	f040 817e 	bne.w	8002fc0 <homing+0x316>
		if(home -> homing_state[0] == 0){
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d121      	bne.n	8002d10 <homing+0x66>
			// Homing state selection
			// Robot is not home but proximity is detecting
			if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && home -> is_home == 0){
 8002ccc:	89fb      	ldrh	r3, [r7, #14]
 8002cce:	4619      	mov	r1, r3
 8002cd0:	6938      	ldr	r0, [r7, #16]
 8002cd2:	f003 f965 	bl	8005fa0 <HAL_GPIO_ReadPin>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d107      	bne.n	8002cec <homing+0x42>
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	78db      	ldrb	r3, [r3, #3]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d103      	bne.n	8002cec <homing+0x42>
				home -> homing_state[1] = 2;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	705a      	strb	r2, [r3, #1]
 8002cea:	e00e      	b.n	8002d0a <homing+0x60>
			}
			// Robot is not home and proximity isn't detecting
			else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && home -> is_home == 0){
 8002cec:	89fb      	ldrh	r3, [r7, #14]
 8002cee:	4619      	mov	r1, r3
 8002cf0:	6938      	ldr	r0, [r7, #16]
 8002cf2:	f003 f955 	bl	8005fa0 <HAL_GPIO_ReadPin>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d106      	bne.n	8002d0a <homing+0x60>
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	78db      	ldrb	r3, [r3, #3]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d102      	bne.n	8002d0a <homing+0x60>
				home -> homing_state[1] = 3;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	2203      	movs	r2, #3
 8002d08:	705a      	strb	r2, [r3, #1]
			}
			// Set homing state
			home -> homing_state[0] = 1;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	701a      	strb	r2, [r3, #0]
		}
		if(home -> homing_state[0] == 1){
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	f040 8156 	bne.w	8002fc6 <homing+0x31c>
			// Homing
			if(home -> homing_state[1] == 2){
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	785b      	ldrb	r3, [r3, #1]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d17b      	bne.n	8002e1a <homing+0x170>
//				home -> state_check += 10;
				if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1 && home -> homing_ts > 14000){
 8002d22:	89fb      	ldrh	r3, [r7, #14]
 8002d24:	4619      	mov	r1, r3
 8002d26:	6938      	ldr	r0, [r7, #16]
 8002d28:	f003 f93a 	bl	8005fa0 <HAL_GPIO_ReadPin>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d11f      	bne.n	8002d72 <homing+0xc8>
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002d38:	f243 61b1 	movw	r1, #14001	@ 0x36b1
 8002d3c:	428a      	cmp	r2, r1
 8002d3e:	f173 0300 	sbcs.w	r3, r3, #0
 8002d42:	d316      	bcc.n	8002d72 <homing+0xc8>
					// Stop when proximity was detected
					home -> pwm = 0;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	2200      	movs	r2, #0
 8002d48:	821a      	strh	r2, [r3, #16]
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0);
					// Reset homing state and other
					home -> homing_ts = 0;
 8002d4a:	6979      	ldr	r1, [r7, #20]
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	e9c1 2302 	strd	r2, r3, [r1, #8]
					home -> homing_state[0] = 0;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	701a      	strb	r2, [r3, #0]
					home -> homing_state[1] = 0;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2200      	movs	r2, #0
 8002d62:	705a      	strb	r2, [r3, #1]
					home -> homing_command = 0;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	2200      	movs	r2, #0
 8002d68:	709a      	strb	r2, [r3, #2]
					home -> is_home = 1;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	70da      	strb	r2, [r3, #3]
					return;
 8002d70:	e129      	b.n	8002fc6 <homing+0x31c>
				}else if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1 && home -> homing_ts >= 0 && home -> homing_ts < 4000){
 8002d72:	89fb      	ldrh	r3, [r7, #14]
 8002d74:	4619      	mov	r1, r3
 8002d76:	6938      	ldr	r0, [r7, #16]
 8002d78:	f003 f912 	bl	8005fa0 <HAL_GPIO_ReadPin>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d10b      	bne.n	8002d9a <homing+0xf0>
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002d88:	f5b2 6f7a 	cmp.w	r2, #4000	@ 0xfa0
 8002d8c:	f173 0300 	sbcs.w	r3, r3, #0
 8002d90:	d203      	bcs.n	8002d9a <homing+0xf0>
					// Move upper
					home -> pwm = 200;
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	22c8      	movs	r2, #200	@ 0xc8
 8002d96:	821a      	strh	r2, [r3, #16]
 8002d98:	e031      	b.n	8002dfe <homing+0x154>
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 200);
				}else if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0 && home -> homing_ts >= 4000 && home -> homing_ts < 14000){ // wait 0.5 secs
 8002d9a:	89fb      	ldrh	r3, [r7, #14]
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	6938      	ldr	r0, [r7, #16]
 8002da0:	f003 f8fe 	bl	8005fa0 <HAL_GPIO_ReadPin>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d114      	bne.n	8002dd4 <homing+0x12a>
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002db0:	f5b2 6f7a 	cmp.w	r2, #4000	@ 0xfa0
 8002db4:	f173 0300 	sbcs.w	r3, r3, #0
 8002db8:	d30c      	bcc.n	8002dd4 <homing+0x12a>
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002dc0:	f243 61b0 	movw	r1, #14000	@ 0x36b0
 8002dc4:	428a      	cmp	r2, r1
 8002dc6:	f173 0300 	sbcs.w	r3, r3, #0
 8002dca:	d203      	bcs.n	8002dd4 <homing+0x12a>
					// Stop
					home -> pwm = 0;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	821a      	strh	r2, [r3, #16]
 8002dd2:	e014      	b.n	8002dfe <homing+0x154>
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0);
				}else if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0 && home -> homing_ts >= 14000){ // wait 1.25 secs
 8002dd4:	89fb      	ldrh	r3, [r7, #14]
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	6938      	ldr	r0, [r7, #16]
 8002dda:	f003 f8e1 	bl	8005fa0 <HAL_GPIO_ReadPin>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10c      	bne.n	8002dfe <homing+0x154>
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002dea:	f243 61b0 	movw	r1, #14000	@ 0x36b0
 8002dee:	428a      	cmp	r2, r1
 8002df0:	f173 0300 	sbcs.w	r3, r3, #0
 8002df4:	d303      	bcc.n	8002dfe <homing+0x154>
					// Move lower
					home -> pwm = -120;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f64f 7288 	movw	r2, #65416	@ 0xff88
 8002dfc:	821a      	strh	r2, [r3, #16]
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, -120);
				}
				home -> homing_ts++;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002e04:	1c51      	adds	r1, r2, #1
 8002e06:	6039      	str	r1, [r7, #0]
 8002e08:	f143 0300 	adc.w	r3, r3, #0
 8002e0c:	607b      	str	r3, [r7, #4]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002e14:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8002e18:	e0d5      	b.n	8002fc6 <homing+0x31c>
			}
			else if(home -> homing_state[1] == 3){
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	785b      	ldrb	r3, [r3, #1]
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	f040 80d1 	bne.w	8002fc6 <homing+0x31c>
				if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && (home -> homing_first == 1)){
 8002e24:	89fb      	ldrh	r3, [r7, #14]
 8002e26:	4619      	mov	r1, r3
 8002e28:	6938      	ldr	r0, [r7, #16]
 8002e2a:	f003 f8b9 	bl	8005fa0 <HAL_GPIO_ReadPin>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d11d      	bne.n	8002e70 <homing+0x1c6>
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	791b      	ldrb	r3, [r3, #4]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d119      	bne.n	8002e70 <homing+0x1c6>
					// Stop when proximity was detected
					home -> pwm = 0;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	821a      	strh	r2, [r3, #16]
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0);
					// Reset homing state and other
					home -> homing_ts = 0;
 8002e42:	6979      	ldr	r1, [r7, #20]
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	e9c1 2302 	strd	r2, r3, [r1, #8]
					home -> homing_first = 0;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2200      	movs	r2, #0
 8002e54:	711a      	strb	r2, [r3, #4]
					home -> homing_state[0] = 0;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	701a      	strb	r2, [r3, #0]
					home -> homing_state[1] = 0;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	705a      	strb	r2, [r3, #1]
					home -> homing_command = 0;
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2200      	movs	r2, #0
 8002e66:	709a      	strb	r2, [r3, #2]
					home -> is_home = 1;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	70da      	strb	r2, [r3, #3]
					return;
 8002e6e:	e0aa      	b.n	8002fc6 <homing+0x31c>
				}else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && (home -> homing_first == 0)){
 8002e70:	89fb      	ldrh	r3, [r7, #14]
 8002e72:	4619      	mov	r1, r3
 8002e74:	6938      	ldr	r0, [r7, #16]
 8002e76:	f003 f893 	bl	8005fa0 <HAL_GPIO_ReadPin>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d12b      	bne.n	8002ed8 <homing+0x22e>
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	791b      	ldrb	r3, [r3, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d127      	bne.n	8002ed8 <homing+0x22e>
					// Stop when proximity was detected
					if(home -> homing_ts == 0){
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	d102      	bne.n	8002e98 <homing+0x1ee>
						home -> pwm = 0;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	2200      	movs	r2, #0
 8002e96:	821a      	strh	r2, [r3, #16]
//						Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0);
					}
					home -> homing_ts++;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002e9e:	f112 0a01 	adds.w	sl, r2, #1
 8002ea2:	f143 0b00 	adc.w	fp, r3, #0
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	e9c3 ab02 	strd	sl, fp, [r3, #8]
					if(home -> homing_ts >= 2000 && home -> homing_ts < 6000){ // wait 0.25 secs
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002eb2:	f5b2 6ffa 	cmp.w	r2, #2000	@ 0x7d0
 8002eb6:	f173 0300 	sbcs.w	r3, r3, #0
 8002eba:	f0c0 8083 	bcc.w	8002fc4 <homing+0x31a>
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002ec4:	f241 7170 	movw	r1, #6000	@ 0x1770
 8002ec8:	428a      	cmp	r2, r1
 8002eca:	f173 0300 	sbcs.w	r3, r3, #0
 8002ece:	d279      	bcs.n	8002fc4 <homing+0x31a>
						 // Move upper
						home -> pwm = 200;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	22c8      	movs	r2, #200	@ 0xc8
 8002ed4:	821a      	strh	r2, [r3, #16]
					if(home -> homing_ts >= 2000 && home -> homing_ts < 6000){ // wait 0.25 secs
 8002ed6:	e075      	b.n	8002fc4 <homing+0x31a>
//						Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 200);
					}
				}else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && (home -> homing_first == 1) && home -> homing_ts >= 6000 && home -> homing_ts < 16000){ // wait 0.5 secs
 8002ed8:	89fb      	ldrh	r3, [r7, #14]
 8002eda:	4619      	mov	r1, r3
 8002edc:	6938      	ldr	r0, [r7, #16]
 8002ede:	f003 f85f 	bl	8005fa0 <HAL_GPIO_ReadPin>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d122      	bne.n	8002f2e <homing+0x284>
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	791b      	ldrb	r3, [r3, #4]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d11e      	bne.n	8002f2e <homing+0x284>
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002ef6:	f241 7170 	movw	r1, #6000	@ 0x1770
 8002efa:	428a      	cmp	r2, r1
 8002efc:	f173 0300 	sbcs.w	r3, r3, #0
 8002f00:	d315      	bcc.n	8002f2e <homing+0x284>
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f08:	f5b2 5f7a 	cmp.w	r2, #16000	@ 0x3e80
 8002f0c:	f173 0300 	sbcs.w	r3, r3, #0
 8002f10:	d20d      	bcs.n	8002f2e <homing+0x284>
					// Stop
					home -> pwm = 0;
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	2200      	movs	r2, #0
 8002f16:	821a      	strh	r2, [r3, #16]
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0);
					home -> homing_ts++;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f1e:	f112 0801 	adds.w	r8, r2, #1
 8002f22:	f143 0900 	adc.w	r9, r3, #0
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8002f2c:	e04b      	b.n	8002fc6 <homing+0x31c>
				}else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && (home -> homing_first == 1) && home -> homing_ts >= 16000){ // wait 1.25 secs
 8002f2e:	89fb      	ldrh	r3, [r7, #14]
 8002f30:	4619      	mov	r1, r3
 8002f32:	6938      	ldr	r0, [r7, #16]
 8002f34:	f003 f834 	bl	8005fa0 <HAL_GPIO_ReadPin>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d110      	bne.n	8002f60 <homing+0x2b6>
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	791b      	ldrb	r3, [r3, #4]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d10c      	bne.n	8002f60 <homing+0x2b6>
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f4c:	f5b2 5f7a 	cmp.w	r2, #16000	@ 0x3e80
 8002f50:	f173 0300 	sbcs.w	r3, r3, #0
 8002f54:	d304      	bcc.n	8002f60 <homing+0x2b6>
					// Move lower
					home -> pwm = -120;
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f64f 7288 	movw	r2, #65416	@ 0xff88
 8002f5c:	821a      	strh	r2, [r3, #16]
 8002f5e:	e032      	b.n	8002fc6 <homing+0x31c>
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, -120);
				}else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && (home -> homing_first == 1)){
 8002f60:	89fb      	ldrh	r3, [r7, #14]
 8002f62:	4619      	mov	r1, r3
 8002f64:	6938      	ldr	r0, [r7, #16]
 8002f66:	f003 f81b 	bl	8005fa0 <HAL_GPIO_ReadPin>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10d      	bne.n	8002f8c <homing+0x2e2>
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	791b      	ldrb	r3, [r3, #4]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d109      	bne.n	8002f8c <homing+0x2e2>
					home -> homing_ts++;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f7e:	1c54      	adds	r4, r2, #1
 8002f80:	f143 0500 	adc.w	r5, r3, #0
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	e9c3 4502 	strd	r4, r5, [r3, #8]
 8002f8a:	e01c      	b.n	8002fc6 <homing+0x31c>
				}else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && (home -> homing_first == 0) && home -> homing_ts == 0){
 8002f8c:	89fb      	ldrh	r3, [r7, #14]
 8002f8e:	4619      	mov	r1, r3
 8002f90:	6938      	ldr	r0, [r7, #16]
 8002f92:	f003 f805 	bl	8005fa0 <HAL_GPIO_ReadPin>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10d      	bne.n	8002fb8 <homing+0x30e>
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	791b      	ldrb	r3, [r3, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d109      	bne.n	8002fb8 <homing+0x30e>
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	d104      	bne.n	8002fb8 <homing+0x30e>
					home -> pwm = -120;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	f64f 7288 	movw	r2, #65416	@ 0xff88
 8002fb4:	821a      	strh	r2, [r3, #16]
 8002fb6:	e006      	b.n	8002fc6 <homing+0x31c>
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, -120); // Move lower
				}else{
					home -> homing_first = 1;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	711a      	strb	r2, [r3, #4]
 8002fbe:	e002      	b.n	8002fc6 <homing+0x31c>
			}
		}
	}
	// Nothing happen
	else{
		return;
 8002fc0:	bf00      	nop
 8002fc2:	e000      	b.n	8002fc6 <homing+0x31c>
					if(home -> homing_ts >= 2000 && home -> homing_ts < 6000){ // wait 0.25 secs
 8002fc4:	bf00      	nop
	}
}
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002fce <emergency>:

void emergency(EMER* emer, GPIO_TypeDef* GPIO_EmerLight, uint16_t GPIO_Pin_EmerLight){
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	80fb      	strh	r3, [r7, #6]
	if(emer -> emer_state == 1){
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d106      	bne.n	8002ff2 <emergency+0x24>
		HAL_GPIO_WritePin(GPIO_EmerLight, GPIO_Pin_EmerLight, SET);
 8002fe4:	88fb      	ldrh	r3, [r7, #6]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	4619      	mov	r1, r3
 8002fea:	68b8      	ldr	r0, [r7, #8]
 8002fec:	f002 fff0 	bl	8005fd0 <HAL_GPIO_WritePin>
	}else{
		HAL_GPIO_WritePin(GPIO_EmerLight, GPIO_Pin_EmerLight, RESET);
	}
	return;
 8002ff0:	e006      	b.n	8003000 <emergency+0x32>
		HAL_GPIO_WritePin(GPIO_EmerLight, GPIO_Pin_EmerLight, RESET);
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	68b8      	ldr	r0, [r7, #8]
 8002ffa:	f002 ffe9 	bl	8005fd0 <HAL_GPIO_WritePin>
	return;
 8002ffe:	bf00      	nop
}
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800300e:	4b0f      	ldr	r3, [pc, #60]	@ (800304c <HAL_MspInit+0x44>)
 8003010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003012:	4a0e      	ldr	r2, [pc, #56]	@ (800304c <HAL_MspInit+0x44>)
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	6613      	str	r3, [r2, #96]	@ 0x60
 800301a:	4b0c      	ldr	r3, [pc, #48]	@ (800304c <HAL_MspInit+0x44>)
 800301c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	607b      	str	r3, [r7, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003026:	4b09      	ldr	r3, [pc, #36]	@ (800304c <HAL_MspInit+0x44>)
 8003028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800302a:	4a08      	ldr	r2, [pc, #32]	@ (800304c <HAL_MspInit+0x44>)
 800302c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003030:	6593      	str	r3, [r2, #88]	@ 0x58
 8003032:	4b06      	ldr	r3, [pc, #24]	@ (800304c <HAL_MspInit+0x44>)
 8003034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800303e:	f003 f89b 	bl	8006178 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003042:	bf00      	nop
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40021000 	.word	0x40021000

08003050 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b09e      	sub	sp, #120	@ 0x78
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003058:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	60da      	str	r2, [r3, #12]
 8003066:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003068:	f107 0310 	add.w	r3, r7, #16
 800306c:	2254      	movs	r2, #84	@ 0x54
 800306e:	2100      	movs	r1, #0
 8003070:	4618      	mov	r0, r3
 8003072:	f007 ff2b 	bl	800aecc <memset>
  if(hadc->Instance==ADC1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800307e:	d167      	bne.n	8003150 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003080:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003084:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003086:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800308a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800308c:	f107 0310 	add.w	r3, r7, #16
 8003090:	4618      	mov	r0, r3
 8003092:	f003 fdaf 	bl	8006bf4 <HAL_RCCEx_PeriphCLKConfig>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800309c:	f7ff fa02 	bl	80024a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80030a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003158 <HAL_ADC_MspInit+0x108>)
 80030a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003158 <HAL_ADC_MspInit+0x108>)
 80030a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80030aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030ac:	4b2a      	ldr	r3, [pc, #168]	@ (8003158 <HAL_ADC_MspInit+0x108>)
 80030ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b8:	4b27      	ldr	r3, [pc, #156]	@ (8003158 <HAL_ADC_MspInit+0x108>)
 80030ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030bc:	4a26      	ldr	r2, [pc, #152]	@ (8003158 <HAL_ADC_MspInit+0x108>)
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030c4:	4b24      	ldr	r3, [pc, #144]	@ (8003158 <HAL_ADC_MspInit+0x108>)
 80030c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Current_sensor_Pin;
 80030d0:	2301      	movs	r3, #1
 80030d2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030d4:	2303      	movs	r3, #3
 80030d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d8:	2300      	movs	r3, #0
 80030da:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Current_sensor_GPIO_Port, &GPIO_InitStruct);
 80030dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80030e0:	4619      	mov	r1, r3
 80030e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030e6:	f002 fdd9 	bl	8005c9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80030ea:	4b1c      	ldr	r3, [pc, #112]	@ (800315c <HAL_ADC_MspInit+0x10c>)
 80030ec:	4a1c      	ldr	r2, [pc, #112]	@ (8003160 <HAL_ADC_MspInit+0x110>)
 80030ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80030f0:	4b1a      	ldr	r3, [pc, #104]	@ (800315c <HAL_ADC_MspInit+0x10c>)
 80030f2:	2205      	movs	r2, #5
 80030f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030f6:	4b19      	ldr	r3, [pc, #100]	@ (800315c <HAL_ADC_MspInit+0x10c>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80030fc:	4b17      	ldr	r3, [pc, #92]	@ (800315c <HAL_ADC_MspInit+0x10c>)
 80030fe:	2200      	movs	r2, #0
 8003100:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003102:	4b16      	ldr	r3, [pc, #88]	@ (800315c <HAL_ADC_MspInit+0x10c>)
 8003104:	2280      	movs	r2, #128	@ 0x80
 8003106:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003108:	4b14      	ldr	r3, [pc, #80]	@ (800315c <HAL_ADC_MspInit+0x10c>)
 800310a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800310e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003110:	4b12      	ldr	r3, [pc, #72]	@ (800315c <HAL_ADC_MspInit+0x10c>)
 8003112:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003116:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003118:	4b10      	ldr	r3, [pc, #64]	@ (800315c <HAL_ADC_MspInit+0x10c>)
 800311a:	2220      	movs	r2, #32
 800311c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800311e:	4b0f      	ldr	r3, [pc, #60]	@ (800315c <HAL_ADC_MspInit+0x10c>)
 8003120:	2200      	movs	r2, #0
 8003122:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003124:	480d      	ldr	r0, [pc, #52]	@ (800315c <HAL_ADC_MspInit+0x10c>)
 8003126:	f002 fa87 	bl	8005638 <HAL_DMA_Init>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8003130:	f7ff f9b8 	bl	80024a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a09      	ldr	r2, [pc, #36]	@ (800315c <HAL_ADC_MspInit+0x10c>)
 8003138:	655a      	str	r2, [r3, #84]	@ 0x54
 800313a:	4a08      	ldr	r2, [pc, #32]	@ (800315c <HAL_ADC_MspInit+0x10c>)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003140:	2200      	movs	r2, #0
 8003142:	2100      	movs	r1, #0
 8003144:	2012      	movs	r0, #18
 8003146:	f002 fa42 	bl	80055ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800314a:	2012      	movs	r0, #18
 800314c:	f002 fa59 	bl	8005602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003150:	bf00      	nop
 8003152:	3778      	adds	r7, #120	@ 0x78
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40021000 	.word	0x40021000
 800315c:	200005c4 	.word	0x200005c4
 8003160:	40020008 	.word	0x40020008

08003164 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a49      	ldr	r2, [pc, #292]	@ (8003298 <HAL_TIM_Base_MspInit+0x134>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d13f      	bne.n	80031f6 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003176:	4b49      	ldr	r3, [pc, #292]	@ (800329c <HAL_TIM_Base_MspInit+0x138>)
 8003178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800317a:	4a48      	ldr	r2, [pc, #288]	@ (800329c <HAL_TIM_Base_MspInit+0x138>)
 800317c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003180:	6613      	str	r3, [r2, #96]	@ 0x60
 8003182:	4b46      	ldr	r3, [pc, #280]	@ (800329c <HAL_TIM_Base_MspInit+0x138>)
 8003184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003186:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel4;
 800318e:	4b44      	ldr	r3, [pc, #272]	@ (80032a0 <HAL_TIM_Base_MspInit+0x13c>)
 8003190:	4a44      	ldr	r2, [pc, #272]	@ (80032a4 <HAL_TIM_Base_MspInit+0x140>)
 8003192:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8003194:	4b42      	ldr	r3, [pc, #264]	@ (80032a0 <HAL_TIM_Base_MspInit+0x13c>)
 8003196:	222a      	movs	r2, #42	@ 0x2a
 8003198:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800319a:	4b41      	ldr	r3, [pc, #260]	@ (80032a0 <HAL_TIM_Base_MspInit+0x13c>)
 800319c:	2210      	movs	r2, #16
 800319e:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80031a0:	4b3f      	ldr	r3, [pc, #252]	@ (80032a0 <HAL_TIM_Base_MspInit+0x13c>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80031a6:	4b3e      	ldr	r3, [pc, #248]	@ (80032a0 <HAL_TIM_Base_MspInit+0x13c>)
 80031a8:	2280      	movs	r2, #128	@ 0x80
 80031aa:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80031ac:	4b3c      	ldr	r3, [pc, #240]	@ (80032a0 <HAL_TIM_Base_MspInit+0x13c>)
 80031ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031b2:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80031b4:	4b3a      	ldr	r3, [pc, #232]	@ (80032a0 <HAL_TIM_Base_MspInit+0x13c>)
 80031b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031ba:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80031bc:	4b38      	ldr	r3, [pc, #224]	@ (80032a0 <HAL_TIM_Base_MspInit+0x13c>)
 80031be:	2200      	movs	r2, #0
 80031c0:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80031c2:	4b37      	ldr	r3, [pc, #220]	@ (80032a0 <HAL_TIM_Base_MspInit+0x13c>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80031c8:	4835      	ldr	r0, [pc, #212]	@ (80032a0 <HAL_TIM_Base_MspInit+0x13c>)
 80031ca:	f002 fa35 	bl	8005638 <HAL_DMA_Init>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 80031d4:	f7ff f966 	bl	80024a4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a31      	ldr	r2, [pc, #196]	@ (80032a0 <HAL_TIM_Base_MspInit+0x13c>)
 80031dc:	625a      	str	r2, [r3, #36]	@ 0x24
 80031de:	4a30      	ldr	r2, [pc, #192]	@ (80032a0 <HAL_TIM_Base_MspInit+0x13c>)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80031e4:	2200      	movs	r2, #0
 80031e6:	2100      	movs	r1, #0
 80031e8:	2019      	movs	r0, #25
 80031ea:	f002 f9f0 	bl	80055ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80031ee:	2019      	movs	r0, #25
 80031f0:	f002 fa07 	bl	8005602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80031f4:	e04c      	b.n	8003290 <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM3)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a2b      	ldr	r2, [pc, #172]	@ (80032a8 <HAL_TIM_Base_MspInit+0x144>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d114      	bne.n	800322a <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003200:	4b26      	ldr	r3, [pc, #152]	@ (800329c <HAL_TIM_Base_MspInit+0x138>)
 8003202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003204:	4a25      	ldr	r2, [pc, #148]	@ (800329c <HAL_TIM_Base_MspInit+0x138>)
 8003206:	f043 0302 	orr.w	r3, r3, #2
 800320a:	6593      	str	r3, [r2, #88]	@ 0x58
 800320c:	4b23      	ldr	r3, [pc, #140]	@ (800329c <HAL_TIM_Base_MspInit+0x138>)
 800320e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003218:	2200      	movs	r2, #0
 800321a:	2100      	movs	r1, #0
 800321c:	201d      	movs	r0, #29
 800321e:	f002 f9d6 	bl	80055ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003222:	201d      	movs	r0, #29
 8003224:	f002 f9ed 	bl	8005602 <HAL_NVIC_EnableIRQ>
}
 8003228:	e032      	b.n	8003290 <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM5)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a1f      	ldr	r2, [pc, #124]	@ (80032ac <HAL_TIM_Base_MspInit+0x148>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d114      	bne.n	800325e <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003234:	4b19      	ldr	r3, [pc, #100]	@ (800329c <HAL_TIM_Base_MspInit+0x138>)
 8003236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003238:	4a18      	ldr	r2, [pc, #96]	@ (800329c <HAL_TIM_Base_MspInit+0x138>)
 800323a:	f043 0308 	orr.w	r3, r3, #8
 800323e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003240:	4b16      	ldr	r3, [pc, #88]	@ (800329c <HAL_TIM_Base_MspInit+0x138>)
 8003242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800324c:	2200      	movs	r2, #0
 800324e:	2100      	movs	r1, #0
 8003250:	2032      	movs	r0, #50	@ 0x32
 8003252:	f002 f9bc 	bl	80055ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003256:	2032      	movs	r0, #50	@ 0x32
 8003258:	f002 f9d3 	bl	8005602 <HAL_NVIC_EnableIRQ>
}
 800325c:	e018      	b.n	8003290 <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM16)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a13      	ldr	r2, [pc, #76]	@ (80032b0 <HAL_TIM_Base_MspInit+0x14c>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d113      	bne.n	8003290 <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003268:	4b0c      	ldr	r3, [pc, #48]	@ (800329c <HAL_TIM_Base_MspInit+0x138>)
 800326a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800326c:	4a0b      	ldr	r2, [pc, #44]	@ (800329c <HAL_TIM_Base_MspInit+0x138>)
 800326e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003272:	6613      	str	r3, [r2, #96]	@ 0x60
 8003274:	4b09      	ldr	r3, [pc, #36]	@ (800329c <HAL_TIM_Base_MspInit+0x138>)
 8003276:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003280:	2200      	movs	r2, #0
 8003282:	2100      	movs	r1, #0
 8003284:	2019      	movs	r0, #25
 8003286:	f002 f9a2 	bl	80055ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800328a:	2019      	movs	r0, #25
 800328c:	f002 f9b9 	bl	8005602 <HAL_NVIC_EnableIRQ>
}
 8003290:	bf00      	nop
 8003292:	3718      	adds	r7, #24
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40012c00 	.word	0x40012c00
 800329c:	40021000 	.word	0x40021000
 80032a0:	20000a20 	.word	0x20000a20
 80032a4:	40020044 	.word	0x40020044
 80032a8:	40000400 	.word	0x40000400
 80032ac:	40000c00 	.word	0x40000c00
 80032b0:	40014400 	.word	0x40014400

080032b4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b08a      	sub	sp, #40	@ 0x28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032bc:	f107 0314 	add.w	r3, r7, #20
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	605a      	str	r2, [r3, #4]
 80032c6:	609a      	str	r2, [r3, #8]
 80032c8:	60da      	str	r2, [r3, #12]
 80032ca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003344 <HAL_TIM_Encoder_MspInit+0x90>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d131      	bne.n	800333a <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003348 <HAL_TIM_Encoder_MspInit+0x94>)
 80032d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032da:	4a1b      	ldr	r2, [pc, #108]	@ (8003348 <HAL_TIM_Encoder_MspInit+0x94>)
 80032dc:	f043 0304 	orr.w	r3, r3, #4
 80032e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80032e2:	4b19      	ldr	r3, [pc, #100]	@ (8003348 <HAL_TIM_Encoder_MspInit+0x94>)
 80032e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ee:	4b16      	ldr	r3, [pc, #88]	@ (8003348 <HAL_TIM_Encoder_MspInit+0x94>)
 80032f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032f2:	4a15      	ldr	r2, [pc, #84]	@ (8003348 <HAL_TIM_Encoder_MspInit+0x94>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032fa:	4b13      	ldr	r3, [pc, #76]	@ (8003348 <HAL_TIM_Encoder_MspInit+0x94>)
 80032fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
 8003306:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800330a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330c:	2302      	movs	r3, #2
 800330e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003310:	2300      	movs	r3, #0
 8003312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003314:	2300      	movs	r3, #0
 8003316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8003318:	230a      	movs	r3, #10
 800331a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800331c:	f107 0314 	add.w	r3, r7, #20
 8003320:	4619      	mov	r1, r3
 8003322:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003326:	f002 fcb9 	bl	8005c9c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800332a:	2200      	movs	r2, #0
 800332c:	2100      	movs	r1, #0
 800332e:	201e      	movs	r0, #30
 8003330:	f002 f94d 	bl	80055ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003334:	201e      	movs	r0, #30
 8003336:	f002 f964 	bl	8005602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800333a:	bf00      	nop
 800333c:	3728      	adds	r7, #40	@ 0x28
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40000800 	.word	0x40000800
 8003348:	40021000 	.word	0x40021000

0800334c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003354:	f107 030c 	add.w	r3, r7, #12
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	605a      	str	r2, [r3, #4]
 800335e:	609a      	str	r2, [r3, #8]
 8003360:	60da      	str	r2, [r3, #12]
 8003362:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a11      	ldr	r2, [pc, #68]	@ (80033b0 <HAL_TIM_MspPostInit+0x64>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d11b      	bne.n	80033a6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800336e:	4b11      	ldr	r3, [pc, #68]	@ (80033b4 <HAL_TIM_MspPostInit+0x68>)
 8003370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003372:	4a10      	ldr	r2, [pc, #64]	@ (80033b4 <HAL_TIM_MspPostInit+0x68>)
 8003374:	f043 0304 	orr.w	r3, r3, #4
 8003378:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800337a:	4b0e      	ldr	r3, [pc, #56]	@ (80033b4 <HAL_TIM_MspPostInit+0x68>)
 800337c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	60bb      	str	r3, [r7, #8]
 8003384:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_signal_Pin;
 8003386:	2301      	movs	r3, #1
 8003388:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800338a:	2302      	movs	r3, #2
 800338c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003392:	2300      	movs	r3, #0
 8003394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003396:	2302      	movs	r3, #2
 8003398:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_signal_GPIO_Port, &GPIO_InitStruct);
 800339a:	f107 030c 	add.w	r3, r7, #12
 800339e:	4619      	mov	r1, r3
 80033a0:	4805      	ldr	r0, [pc, #20]	@ (80033b8 <HAL_TIM_MspPostInit+0x6c>)
 80033a2:	f002 fc7b 	bl	8005c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80033a6:	bf00      	nop
 80033a8:	3720      	adds	r7, #32
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40012c00 	.word	0x40012c00
 80033b4:	40021000 	.word	0x40021000
 80033b8:	48000800 	.word	0x48000800

080033bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b09e      	sub	sp, #120	@ 0x78
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	60da      	str	r2, [r3, #12]
 80033d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033d4:	f107 0310 	add.w	r3, r7, #16
 80033d8:	2254      	movs	r2, #84	@ 0x54
 80033da:	2100      	movs	r1, #0
 80033dc:	4618      	mov	r0, r3
 80033de:	f007 fd75 	bl	800aecc <memset>
  if(huart->Instance==USART2)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a4d      	ldr	r2, [pc, #308]	@ (800351c <HAL_UART_MspInit+0x160>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	f040 8092 	bne.w	8003512 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80033ee:	2302      	movs	r3, #2
 80033f0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80033f2:	2300      	movs	r3, #0
 80033f4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033f6:	f107 0310 	add.w	r3, r7, #16
 80033fa:	4618      	mov	r0, r3
 80033fc:	f003 fbfa 	bl	8006bf4 <HAL_RCCEx_PeriphCLKConfig>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003406:	f7ff f84d 	bl	80024a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800340a:	4b45      	ldr	r3, [pc, #276]	@ (8003520 <HAL_UART_MspInit+0x164>)
 800340c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800340e:	4a44      	ldr	r2, [pc, #272]	@ (8003520 <HAL_UART_MspInit+0x164>)
 8003410:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003414:	6593      	str	r3, [r2, #88]	@ 0x58
 8003416:	4b42      	ldr	r3, [pc, #264]	@ (8003520 <HAL_UART_MspInit+0x164>)
 8003418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003422:	4b3f      	ldr	r3, [pc, #252]	@ (8003520 <HAL_UART_MspInit+0x164>)
 8003424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003426:	4a3e      	ldr	r2, [pc, #248]	@ (8003520 <HAL_UART_MspInit+0x164>)
 8003428:	f043 0301 	orr.w	r3, r3, #1
 800342c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800342e:	4b3c      	ldr	r3, [pc, #240]	@ (8003520 <HAL_UART_MspInit+0x164>)
 8003430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	60bb      	str	r3, [r7, #8]
 8003438:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800343a:	230c      	movs	r3, #12
 800343c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343e:	2302      	movs	r3, #2
 8003440:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003442:	2300      	movs	r3, #0
 8003444:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003446:	2300      	movs	r3, #0
 8003448:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800344a:	2307      	movs	r3, #7
 800344c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003452:	4619      	mov	r1, r3
 8003454:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003458:	f002 fc20 	bl	8005c9c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800345c:	4b31      	ldr	r3, [pc, #196]	@ (8003524 <HAL_UART_MspInit+0x168>)
 800345e:	4a32      	ldr	r2, [pc, #200]	@ (8003528 <HAL_UART_MspInit+0x16c>)
 8003460:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003462:	4b30      	ldr	r3, [pc, #192]	@ (8003524 <HAL_UART_MspInit+0x168>)
 8003464:	221a      	movs	r2, #26
 8003466:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003468:	4b2e      	ldr	r3, [pc, #184]	@ (8003524 <HAL_UART_MspInit+0x168>)
 800346a:	2200      	movs	r2, #0
 800346c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800346e:	4b2d      	ldr	r3, [pc, #180]	@ (8003524 <HAL_UART_MspInit+0x168>)
 8003470:	2200      	movs	r2, #0
 8003472:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003474:	4b2b      	ldr	r3, [pc, #172]	@ (8003524 <HAL_UART_MspInit+0x168>)
 8003476:	2280      	movs	r2, #128	@ 0x80
 8003478:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800347a:	4b2a      	ldr	r3, [pc, #168]	@ (8003524 <HAL_UART_MspInit+0x168>)
 800347c:	2200      	movs	r2, #0
 800347e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003480:	4b28      	ldr	r3, [pc, #160]	@ (8003524 <HAL_UART_MspInit+0x168>)
 8003482:	2200      	movs	r2, #0
 8003484:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003486:	4b27      	ldr	r3, [pc, #156]	@ (8003524 <HAL_UART_MspInit+0x168>)
 8003488:	2200      	movs	r2, #0
 800348a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800348c:	4b25      	ldr	r3, [pc, #148]	@ (8003524 <HAL_UART_MspInit+0x168>)
 800348e:	2200      	movs	r2, #0
 8003490:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003492:	4824      	ldr	r0, [pc, #144]	@ (8003524 <HAL_UART_MspInit+0x168>)
 8003494:	f002 f8d0 	bl	8005638 <HAL_DMA_Init>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800349e:	f7ff f801 	bl	80024a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a1f      	ldr	r2, [pc, #124]	@ (8003524 <HAL_UART_MspInit+0x168>)
 80034a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80034aa:	4a1e      	ldr	r2, [pc, #120]	@ (8003524 <HAL_UART_MspInit+0x168>)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 80034b0:	4b1e      	ldr	r3, [pc, #120]	@ (800352c <HAL_UART_MspInit+0x170>)
 80034b2:	4a1f      	ldr	r2, [pc, #124]	@ (8003530 <HAL_UART_MspInit+0x174>)
 80034b4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80034b6:	4b1d      	ldr	r3, [pc, #116]	@ (800352c <HAL_UART_MspInit+0x170>)
 80034b8:	221b      	movs	r2, #27
 80034ba:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034bc:	4b1b      	ldr	r3, [pc, #108]	@ (800352c <HAL_UART_MspInit+0x170>)
 80034be:	2210      	movs	r2, #16
 80034c0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034c2:	4b1a      	ldr	r3, [pc, #104]	@ (800352c <HAL_UART_MspInit+0x170>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034c8:	4b18      	ldr	r3, [pc, #96]	@ (800352c <HAL_UART_MspInit+0x170>)
 80034ca:	2280      	movs	r2, #128	@ 0x80
 80034cc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034ce:	4b17      	ldr	r3, [pc, #92]	@ (800352c <HAL_UART_MspInit+0x170>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034d4:	4b15      	ldr	r3, [pc, #84]	@ (800352c <HAL_UART_MspInit+0x170>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80034da:	4b14      	ldr	r3, [pc, #80]	@ (800352c <HAL_UART_MspInit+0x170>)
 80034dc:	2200      	movs	r2, #0
 80034de:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80034e0:	4b12      	ldr	r3, [pc, #72]	@ (800352c <HAL_UART_MspInit+0x170>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80034e6:	4811      	ldr	r0, [pc, #68]	@ (800352c <HAL_UART_MspInit+0x170>)
 80034e8:	f002 f8a6 	bl	8005638 <HAL_DMA_Init>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80034f2:	f7fe ffd7 	bl	80024a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a0c      	ldr	r2, [pc, #48]	@ (800352c <HAL_UART_MspInit+0x170>)
 80034fa:	67da      	str	r2, [r3, #124]	@ 0x7c
 80034fc:	4a0b      	ldr	r2, [pc, #44]	@ (800352c <HAL_UART_MspInit+0x170>)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003502:	2200      	movs	r2, #0
 8003504:	2100      	movs	r1, #0
 8003506:	2026      	movs	r0, #38	@ 0x26
 8003508:	f002 f861 	bl	80055ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800350c:	2026      	movs	r0, #38	@ 0x26
 800350e:	f002 f878 	bl	8005602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003512:	bf00      	nop
 8003514:	3778      	adds	r7, #120	@ 0x78
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40004400 	.word	0x40004400
 8003520:	40021000 	.word	0x40021000
 8003524:	20000b4c 	.word	0x20000b4c
 8003528:	4002001c 	.word	0x4002001c
 800352c:	20000bac 	.word	0x20000bac
 8003530:	40020030 	.word	0x40020030

08003534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003538:	bf00      	nop
 800353a:	e7fd      	b.n	8003538 <NMI_Handler+0x4>

0800353c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003540:	bf00      	nop
 8003542:	e7fd      	b.n	8003540 <HardFault_Handler+0x4>

08003544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003548:	bf00      	nop
 800354a:	e7fd      	b.n	8003548 <MemManage_Handler+0x4>

0800354c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003550:	bf00      	nop
 8003552:	e7fd      	b.n	8003550 <BusFault_Handler+0x4>

08003554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003558:	bf00      	nop
 800355a:	e7fd      	b.n	8003558 <UsageFault_Handler+0x4>

0800355c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800356a:	b480      	push	{r7}
 800356c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800357c:	bf00      	nop
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800358a:	f000 f905 	bl	8003798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800358e:	bf00      	nop
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003598:	4802      	ldr	r0, [pc, #8]	@ (80035a4 <DMA1_Channel1_IRQHandler+0x10>)
 800359a:	f002 fa30 	bl	80059fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800359e:	bf00      	nop
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	200005c4 	.word	0x200005c4

080035a8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80035ac:	4802      	ldr	r0, [pc, #8]	@ (80035b8 <DMA1_Channel2_IRQHandler+0x10>)
 80035ae:	f002 fa26 	bl	80059fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80035b2:	bf00      	nop
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20000b4c 	.word	0x20000b4c

080035bc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80035c0:	4802      	ldr	r0, [pc, #8]	@ (80035cc <DMA1_Channel3_IRQHandler+0x10>)
 80035c2:	f002 fa1c 	bl	80059fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80035c6:	bf00      	nop
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20000bac 	.word	0x20000bac

080035d0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80035d4:	4802      	ldr	r0, [pc, #8]	@ (80035e0 <DMA1_Channel4_IRQHandler+0x10>)
 80035d6:	f002 fa12 	bl	80059fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80035da:	bf00      	nop
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	20000a20 	.word	0x20000a20

080035e4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80035e8:	4802      	ldr	r0, [pc, #8]	@ (80035f4 <ADC1_2_IRQHandler+0x10>)
 80035ea:	f000 fdc3 	bl	8004174 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80035ee:	bf00      	nop
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	20000558 	.word	0x20000558

080035f8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80035fc:	4803      	ldr	r0, [pc, #12]	@ (800360c <TIM1_UP_TIM16_IRQHandler+0x14>)
 80035fe:	f004 fa4b 	bl	8007a98 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8003602:	4803      	ldr	r0, [pc, #12]	@ (8003610 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003604:	f004 fa48 	bl	8007a98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003608:	bf00      	nop
 800360a:	bd80      	pop	{r7, pc}
 800360c:	20000624 	.word	0x20000624
 8003610:	20000954 	.word	0x20000954

08003614 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003618:	4802      	ldr	r0, [pc, #8]	@ (8003624 <TIM3_IRQHandler+0x10>)
 800361a:	f004 fa3d 	bl	8007a98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800361e:	bf00      	nop
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	200006f0 	.word	0x200006f0

08003628 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800362c:	4802      	ldr	r0, [pc, #8]	@ (8003638 <TIM4_IRQHandler+0x10>)
 800362e:	f004 fa33 	bl	8007a98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003632:	bf00      	nop
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	200007bc 	.word	0x200007bc

0800363c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003640:	4802      	ldr	r0, [pc, #8]	@ (800364c <USART2_IRQHandler+0x10>)
 8003642:	f005 ff7d 	bl	8009540 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003646:	bf00      	nop
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	20000a80 	.word	0x20000a80

08003650 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003654:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003658:	f002 fcd2 	bl	8006000 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_switch_Pin);
 800365c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003660:	f002 fcce 	bl	8006000 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003664:	bf00      	nop
 8003666:	bd80      	pop	{r7, pc}

08003668 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800366c:	4802      	ldr	r0, [pc, #8]	@ (8003678 <TIM5_IRQHandler+0x10>)
 800366e:	f004 fa13 	bl	8007a98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003672:	bf00      	nop
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	20000888 	.word	0x20000888

0800367c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003680:	4b06      	ldr	r3, [pc, #24]	@ (800369c <SystemInit+0x20>)
 8003682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003686:	4a05      	ldr	r2, [pc, #20]	@ (800369c <SystemInit+0x20>)
 8003688:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800368c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003690:	bf00      	nop
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	e000ed00 	.word	0xe000ed00

080036a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80036a0:	480d      	ldr	r0, [pc, #52]	@ (80036d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80036a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80036a4:	f7ff ffea 	bl	800367c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036a8:	480c      	ldr	r0, [pc, #48]	@ (80036dc <LoopForever+0x6>)
  ldr r1, =_edata
 80036aa:	490d      	ldr	r1, [pc, #52]	@ (80036e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80036ac:	4a0d      	ldr	r2, [pc, #52]	@ (80036e4 <LoopForever+0xe>)
  movs r3, #0
 80036ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80036b0:	e002      	b.n	80036b8 <LoopCopyDataInit>

080036b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036b6:	3304      	adds	r3, #4

080036b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036bc:	d3f9      	bcc.n	80036b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036be:	4a0a      	ldr	r2, [pc, #40]	@ (80036e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80036c0:	4c0a      	ldr	r4, [pc, #40]	@ (80036ec <LoopForever+0x16>)
  movs r3, #0
 80036c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036c4:	e001      	b.n	80036ca <LoopFillZerobss>

080036c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036c8:	3204      	adds	r2, #4

080036ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036cc:	d3fb      	bcc.n	80036c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036ce:	f007 fc05 	bl	800aedc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80036d2:	f7fd ffa9 	bl	8001628 <main>

080036d6 <LoopForever>:

LoopForever:
    b LoopForever
 80036d6:	e7fe      	b.n	80036d6 <LoopForever>
  ldr   r0, =_estack
 80036d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036e0:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 80036e4:	0800b080 	.word	0x0800b080
  ldr r2, =_sbss
 80036e8:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80036ec:	200014bc 	.word	0x200014bc

080036f0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80036f0:	e7fe      	b.n	80036f0 <ADC3_IRQHandler>

080036f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036fc:	2003      	movs	r0, #3
 80036fe:	f001 ff5b 	bl	80055b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003702:	2000      	movs	r0, #0
 8003704:	f000 f80e 	bl	8003724 <HAL_InitTick>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	71fb      	strb	r3, [r7, #7]
 8003712:	e001      	b.n	8003718 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003714:	f7ff fc78 	bl	8003008 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003718:	79fb      	ldrb	r3, [r7, #7]

}
 800371a:	4618      	mov	r0, r3
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003730:	4b16      	ldr	r3, [pc, #88]	@ (800378c <HAL_InitTick+0x68>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d022      	beq.n	800377e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003738:	4b15      	ldr	r3, [pc, #84]	@ (8003790 <HAL_InitTick+0x6c>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	4b13      	ldr	r3, [pc, #76]	@ (800378c <HAL_InitTick+0x68>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003744:	fbb1 f3f3 	udiv	r3, r1, r3
 8003748:	fbb2 f3f3 	udiv	r3, r2, r3
 800374c:	4618      	mov	r0, r3
 800374e:	f001 ff66 	bl	800561e <HAL_SYSTICK_Config>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10f      	bne.n	8003778 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b0f      	cmp	r3, #15
 800375c:	d809      	bhi.n	8003772 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800375e:	2200      	movs	r2, #0
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	f04f 30ff 	mov.w	r0, #4294967295
 8003766:	f001 ff32 	bl	80055ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800376a:	4a0a      	ldr	r2, [pc, #40]	@ (8003794 <HAL_InitTick+0x70>)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	e007      	b.n	8003782 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	73fb      	strb	r3, [r7, #15]
 8003776:	e004      	b.n	8003782 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	73fb      	strb	r3, [r7, #15]
 800377c:	e001      	b.n	8003782 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003782:	7bfb      	ldrb	r3, [r7, #15]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	20000048 	.word	0x20000048
 8003790:	20000040 	.word	0x20000040
 8003794:	20000044 	.word	0x20000044

08003798 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800379c:	4b05      	ldr	r3, [pc, #20]	@ (80037b4 <HAL_IncTick+0x1c>)
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	4b05      	ldr	r3, [pc, #20]	@ (80037b8 <HAL_IncTick+0x20>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4413      	add	r3, r2
 80037a6:	4a03      	ldr	r2, [pc, #12]	@ (80037b4 <HAL_IncTick+0x1c>)
 80037a8:	6013      	str	r3, [r2, #0]
}
 80037aa:	bf00      	nop
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	200014b8 	.word	0x200014b8
 80037b8:	20000048 	.word	0x20000048

080037bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return uwTick;
 80037c0:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <HAL_GetTick+0x14>)
 80037c2:	681b      	ldr	r3, [r3, #0]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	200014b8 	.word	0x200014b8

080037d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	609a      	str	r2, [r3, #8]
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	609a      	str	r2, [r3, #8]
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003830:	4618      	mov	r0, r3
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800383c:	b480      	push	{r7}
 800383e:	b087      	sub	sp, #28
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	3360      	adds	r3, #96	@ 0x60
 800384e:	461a      	mov	r2, r3
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	4b08      	ldr	r3, [pc, #32]	@ (8003880 <LL_ADC_SetOffset+0x44>)
 800385e:	4013      	ands	r3, r2
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	4313      	orrs	r3, r2
 800386c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003874:	bf00      	nop
 8003876:	371c      	adds	r7, #28
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	03fff000 	.word	0x03fff000

08003884 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3360      	adds	r3, #96	@ 0x60
 8003892:	461a      	mov	r2, r3
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	3360      	adds	r3, #96	@ 0x60
 80038c0:	461a      	mov	r2, r3
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	431a      	orrs	r2, r3
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80038da:	bf00      	nop
 80038dc:	371c      	adds	r7, #28
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b087      	sub	sp, #28
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	3360      	adds	r3, #96	@ 0x60
 80038f6:	461a      	mov	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	431a      	orrs	r2, r3
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003910:	bf00      	nop
 8003912:	371c      	adds	r7, #28
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	3360      	adds	r3, #96	@ 0x60
 800392c:	461a      	mov	r2, r3
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	431a      	orrs	r2, r3
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003946:	bf00      	nop
 8003948:	371c      	adds	r7, #28
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
 800395a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	615a      	str	r2, [r3, #20]
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800398c:	2301      	movs	r3, #1
 800398e:	e000      	b.n	8003992 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800399e:	b480      	push	{r7}
 80039a0:	b087      	sub	sp, #28
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	60f8      	str	r0, [r7, #12]
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	3330      	adds	r3, #48	@ 0x30
 80039ae:	461a      	mov	r2, r3
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	0a1b      	lsrs	r3, r3, #8
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	f003 030c 	and.w	r3, r3, #12
 80039ba:	4413      	add	r3, r2
 80039bc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f003 031f 	and.w	r3, r3, #31
 80039c8:	211f      	movs	r1, #31
 80039ca:	fa01 f303 	lsl.w	r3, r1, r3
 80039ce:	43db      	mvns	r3, r3
 80039d0:	401a      	ands	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	0e9b      	lsrs	r3, r3, #26
 80039d6:	f003 011f 	and.w	r1, r3, #31
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	fa01 f303 	lsl.w	r3, r1, r3
 80039e4:	431a      	orrs	r2, r3
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80039ea:	bf00      	nop
 80039ec:	371c      	adds	r7, #28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a02:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	3314      	adds	r3, #20
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	0e5b      	lsrs	r3, r3, #25
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	4413      	add	r3, r2
 8003a3a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	0d1b      	lsrs	r3, r3, #20
 8003a44:	f003 031f 	and.w	r3, r3, #31
 8003a48:	2107      	movs	r1, #7
 8003a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	401a      	ands	r2, r3
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	0d1b      	lsrs	r3, r3, #20
 8003a56:	f003 031f 	and.w	r3, r3, #31
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a60:	431a      	orrs	r2, r3
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a66:	bf00      	nop
 8003a68:	371c      	adds	r7, #28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
	...

08003a74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	401a      	ands	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f003 0318 	and.w	r3, r3, #24
 8003a96:	4908      	ldr	r1, [pc, #32]	@ (8003ab8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003a98:	40d9      	lsrs	r1, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	400b      	ands	r3, r1
 8003a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003aaa:	bf00      	nop
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	0007ffff 	.word	0x0007ffff

08003abc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 031f 	and.w	r3, r3, #31
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003b04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6093      	str	r3, [r2, #8]
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b2c:	d101      	bne.n	8003b32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e000      	b.n	8003b34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003b50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b54:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b7c:	d101      	bne.n	8003b82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ba0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ba4:	f043 0201 	orr.w	r2, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d101      	bne.n	8003bd0 <LL_ADC_IsEnabled+0x18>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e000      	b.n	8003bd2 <LL_ADC_IsEnabled+0x1a>
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003bee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003bf2:	f043 0204 	orr.w	r2, r3, #4
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 0304 	and.w	r3, r3, #4
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d101      	bne.n	8003c1e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e000      	b.n	8003c20 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 0308 	and.w	r3, r3, #8
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d101      	bne.n	8003c44 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
	...

08003c54 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c54:	b590      	push	{r4, r7, lr}
 8003c56:	b089      	sub	sp, #36	@ 0x24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e1a9      	b.n	8003fc2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d109      	bne.n	8003c90 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff f9e7 	bl	8003050 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff ff3f 	bl	8003b18 <LL_ADC_IsDeepPowerDownEnabled>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d004      	beq.n	8003caa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff ff25 	bl	8003af4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff ff5a 	bl	8003b68 <LL_ADC_IsInternalRegulatorEnabled>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d115      	bne.n	8003ce6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff ff3e 	bl	8003b40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cc4:	4b9c      	ldr	r3, [pc, #624]	@ (8003f38 <HAL_ADC_Init+0x2e4>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	099b      	lsrs	r3, r3, #6
 8003cca:	4a9c      	ldr	r2, [pc, #624]	@ (8003f3c <HAL_ADC_Init+0x2e8>)
 8003ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd0:	099b      	lsrs	r3, r3, #6
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003cd8:	e002      	b.n	8003ce0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f9      	bne.n	8003cda <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff ff3c 	bl	8003b68 <LL_ADC_IsInternalRegulatorEnabled>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10d      	bne.n	8003d12 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cfa:	f043 0210 	orr.w	r2, r3, #16
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d06:	f043 0201 	orr.w	r2, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff ff75 	bl	8003c06 <LL_ADC_REG_IsConversionOngoing>
 8003d1c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d22:	f003 0310 	and.w	r3, r3, #16
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f040 8142 	bne.w	8003fb0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f040 813e 	bne.w	8003fb0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d38:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003d3c:	f043 0202 	orr.w	r2, r3, #2
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff ff35 	bl	8003bb8 <LL_ADC_IsEnabled>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d141      	bne.n	8003dd8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d5c:	d004      	beq.n	8003d68 <HAL_ADC_Init+0x114>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a77      	ldr	r2, [pc, #476]	@ (8003f40 <HAL_ADC_Init+0x2ec>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d10f      	bne.n	8003d88 <HAL_ADC_Init+0x134>
 8003d68:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003d6c:	f7ff ff24 	bl	8003bb8 <LL_ADC_IsEnabled>
 8003d70:	4604      	mov	r4, r0
 8003d72:	4873      	ldr	r0, [pc, #460]	@ (8003f40 <HAL_ADC_Init+0x2ec>)
 8003d74:	f7ff ff20 	bl	8003bb8 <LL_ADC_IsEnabled>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	4323      	orrs	r3, r4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	bf0c      	ite	eq
 8003d80:	2301      	moveq	r3, #1
 8003d82:	2300      	movne	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	e012      	b.n	8003dae <HAL_ADC_Init+0x15a>
 8003d88:	486e      	ldr	r0, [pc, #440]	@ (8003f44 <HAL_ADC_Init+0x2f0>)
 8003d8a:	f7ff ff15 	bl	8003bb8 <LL_ADC_IsEnabled>
 8003d8e:	4604      	mov	r4, r0
 8003d90:	486d      	ldr	r0, [pc, #436]	@ (8003f48 <HAL_ADC_Init+0x2f4>)
 8003d92:	f7ff ff11 	bl	8003bb8 <LL_ADC_IsEnabled>
 8003d96:	4603      	mov	r3, r0
 8003d98:	431c      	orrs	r4, r3
 8003d9a:	486c      	ldr	r0, [pc, #432]	@ (8003f4c <HAL_ADC_Init+0x2f8>)
 8003d9c:	f7ff ff0c 	bl	8003bb8 <LL_ADC_IsEnabled>
 8003da0:	4603      	mov	r3, r0
 8003da2:	4323      	orrs	r3, r4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bf0c      	ite	eq
 8003da8:	2301      	moveq	r3, #1
 8003daa:	2300      	movne	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d012      	beq.n	8003dd8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dba:	d004      	beq.n	8003dc6 <HAL_ADC_Init+0x172>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a5f      	ldr	r2, [pc, #380]	@ (8003f40 <HAL_ADC_Init+0x2ec>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d101      	bne.n	8003dca <HAL_ADC_Init+0x176>
 8003dc6:	4a62      	ldr	r2, [pc, #392]	@ (8003f50 <HAL_ADC_Init+0x2fc>)
 8003dc8:	e000      	b.n	8003dcc <HAL_ADC_Init+0x178>
 8003dca:	4a62      	ldr	r2, [pc, #392]	@ (8003f54 <HAL_ADC_Init+0x300>)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4610      	mov	r0, r2
 8003dd4:	f7ff fcfe 	bl	80037d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	7f5b      	ldrb	r3, [r3, #29]
 8003ddc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003de2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003de8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003dee:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003df6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d106      	bne.n	8003e14 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	045b      	lsls	r3, r3, #17
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d009      	beq.n	8003e30 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e20:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e28:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	4b48      	ldr	r3, [pc, #288]	@ (8003f58 <HAL_ADC_Init+0x304>)
 8003e38:	4013      	ands	r3, r2
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6812      	ldr	r2, [r2, #0]
 8003e3e:	69b9      	ldr	r1, [r7, #24]
 8003e40:	430b      	orrs	r3, r1
 8003e42:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff fee4 	bl	8003c2c <LL_ADC_INJ_IsConversionOngoing>
 8003e64:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d17f      	bne.n	8003f6c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d17c      	bne.n	8003f6c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e76:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003e7e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e80:	4313      	orrs	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e8e:	f023 0302 	bic.w	r3, r3, #2
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6812      	ldr	r2, [r2, #0]
 8003e96:	69b9      	ldr	r1, [r7, #24]
 8003e98:	430b      	orrs	r3, r1
 8003e9a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d017      	beq.n	8003ed4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	691a      	ldr	r2, [r3, #16]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003eb2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003ebc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003ec0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6911      	ldr	r1, [r2, #16]
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6812      	ldr	r2, [r2, #0]
 8003ecc:	430b      	orrs	r3, r1
 8003ece:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003ed2:	e013      	b.n	8003efc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	691a      	ldr	r2, [r3, #16]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003ee2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	6812      	ldr	r2, [r2, #0]
 8003ef0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003ef4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ef8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d12a      	bne.n	8003f5c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003f10:	f023 0304 	bic.w	r3, r3, #4
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f1c:	4311      	orrs	r1, r2
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003f22:	4311      	orrs	r1, r2
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f042 0201 	orr.w	r2, r2, #1
 8003f34:	611a      	str	r2, [r3, #16]
 8003f36:	e019      	b.n	8003f6c <HAL_ADC_Init+0x318>
 8003f38:	20000040 	.word	0x20000040
 8003f3c:	053e2d63 	.word	0x053e2d63
 8003f40:	50000100 	.word	0x50000100
 8003f44:	50000400 	.word	0x50000400
 8003f48:	50000500 	.word	0x50000500
 8003f4c:	50000600 	.word	0x50000600
 8003f50:	50000300 	.word	0x50000300
 8003f54:	50000700 	.word	0x50000700
 8003f58:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691a      	ldr	r2, [r3, #16]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0201 	bic.w	r2, r2, #1
 8003f6a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d10c      	bne.n	8003f8e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7a:	f023 010f 	bic.w	r1, r3, #15
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	1e5a      	subs	r2, r3, #1
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f8c:	e007      	b.n	8003f9e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 020f 	bic.w	r2, r2, #15
 8003f9c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa2:	f023 0303 	bic.w	r3, r3, #3
 8003fa6:	f043 0201 	orr.w	r2, r3, #1
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003fae:	e007      	b.n	8003fc0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb4:	f043 0210 	orr.w	r2, r3, #16
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003fc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3724      	adds	r7, #36	@ 0x24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd90      	pop	{r4, r7, pc}
 8003fca:	bf00      	nop

08003fcc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fe0:	d004      	beq.n	8003fec <HAL_ADC_Start_DMA+0x20>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a5a      	ldr	r2, [pc, #360]	@ (8004150 <HAL_ADC_Start_DMA+0x184>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d101      	bne.n	8003ff0 <HAL_ADC_Start_DMA+0x24>
 8003fec:	4b59      	ldr	r3, [pc, #356]	@ (8004154 <HAL_ADC_Start_DMA+0x188>)
 8003fee:	e000      	b.n	8003ff2 <HAL_ADC_Start_DMA+0x26>
 8003ff0:	4b59      	ldr	r3, [pc, #356]	@ (8004158 <HAL_ADC_Start_DMA+0x18c>)
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff fd62 	bl	8003abc <LL_ADC_GetMultimode>
 8003ff8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff fe01 	bl	8003c06 <LL_ADC_REG_IsConversionOngoing>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	f040 809b 	bne.w	8004142 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004012:	2b01      	cmp	r3, #1
 8004014:	d101      	bne.n	800401a <HAL_ADC_Start_DMA+0x4e>
 8004016:	2302      	movs	r3, #2
 8004018:	e096      	b.n	8004148 <HAL_ADC_Start_DMA+0x17c>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a4d      	ldr	r2, [pc, #308]	@ (800415c <HAL_ADC_Start_DMA+0x190>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d008      	beq.n	800403e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d005      	beq.n	800403e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	2b05      	cmp	r3, #5
 8004036:	d002      	beq.n	800403e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	2b09      	cmp	r3, #9
 800403c:	d17a      	bne.n	8004134 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 ff60 	bl	8004f04 <ADC_Enable>
 8004044:	4603      	mov	r3, r0
 8004046:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004048:	7dfb      	ldrb	r3, [r7, #23]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d16d      	bne.n	800412a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004052:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004056:	f023 0301 	bic.w	r3, r3, #1
 800405a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a3a      	ldr	r2, [pc, #232]	@ (8004150 <HAL_ADC_Start_DMA+0x184>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d009      	beq.n	8004080 <HAL_ADC_Start_DMA+0xb4>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a3b      	ldr	r2, [pc, #236]	@ (8004160 <HAL_ADC_Start_DMA+0x194>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d002      	beq.n	800407c <HAL_ADC_Start_DMA+0xb0>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	e003      	b.n	8004084 <HAL_ADC_Start_DMA+0xb8>
 800407c:	4b39      	ldr	r3, [pc, #228]	@ (8004164 <HAL_ADC_Start_DMA+0x198>)
 800407e:	e001      	b.n	8004084 <HAL_ADC_Start_DMA+0xb8>
 8004080:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	6812      	ldr	r2, [r2, #0]
 8004088:	4293      	cmp	r3, r2
 800408a:	d002      	beq.n	8004092 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d105      	bne.n	800409e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004096:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d006      	beq.n	80040b8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ae:	f023 0206 	bic.w	r2, r3, #6
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	661a      	str	r2, [r3, #96]	@ 0x60
 80040b6:	e002      	b.n	80040be <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040c2:	4a29      	ldr	r2, [pc, #164]	@ (8004168 <HAL_ADC_Start_DMA+0x19c>)
 80040c4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ca:	4a28      	ldr	r2, [pc, #160]	@ (800416c <HAL_ADC_Start_DMA+0x1a0>)
 80040cc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d2:	4a27      	ldr	r2, [pc, #156]	@ (8004170 <HAL_ADC_Start_DMA+0x1a4>)
 80040d4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	221c      	movs	r2, #28
 80040dc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 0210 	orr.w	r2, r2, #16
 80040f4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 0201 	orr.w	r2, r2, #1
 8004104:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	3340      	adds	r3, #64	@ 0x40
 8004110:	4619      	mov	r1, r3
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f001 fb37 	bl	8005788 <HAL_DMA_Start_IT>
 800411a:	4603      	mov	r3, r0
 800411c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff fd5b 	bl	8003bde <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004128:	e00d      	b.n	8004146 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004132:	e008      	b.n	8004146 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004140:	e001      	b.n	8004146 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004142:	2302      	movs	r3, #2
 8004144:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004146:	7dfb      	ldrb	r3, [r7, #23]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	50000100 	.word	0x50000100
 8004154:	50000300 	.word	0x50000300
 8004158:	50000700 	.word	0x50000700
 800415c:	50000600 	.word	0x50000600
 8004160:	50000500 	.word	0x50000500
 8004164:	50000400 	.word	0x50000400
 8004168:	08005031 	.word	0x08005031
 800416c:	08005109 	.word	0x08005109
 8004170:	08005125 	.word	0x08005125

08004174 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b08a      	sub	sp, #40	@ 0x28
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800417c:	2300      	movs	r3, #0
 800417e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004198:	d004      	beq.n	80041a4 <HAL_ADC_IRQHandler+0x30>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a8e      	ldr	r2, [pc, #568]	@ (80043d8 <HAL_ADC_IRQHandler+0x264>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d101      	bne.n	80041a8 <HAL_ADC_IRQHandler+0x34>
 80041a4:	4b8d      	ldr	r3, [pc, #564]	@ (80043dc <HAL_ADC_IRQHandler+0x268>)
 80041a6:	e000      	b.n	80041aa <HAL_ADC_IRQHandler+0x36>
 80041a8:	4b8d      	ldr	r3, [pc, #564]	@ (80043e0 <HAL_ADC_IRQHandler+0x26c>)
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff fc86 	bl	8003abc <LL_ADC_GetMultimode>
 80041b0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d017      	beq.n	80041ec <HAL_ADC_IRQHandler+0x78>
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d012      	beq.n	80041ec <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ca:	f003 0310 	and.w	r3, r3, #16
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d105      	bne.n	80041de <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041d6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f001 f808 	bl	80051f4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2202      	movs	r2, #2
 80041ea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	f003 0304 	and.w	r3, r3, #4
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d004      	beq.n	8004200 <HAL_ADC_IRQHandler+0x8c>
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10b      	bne.n	8004218 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 8094 	beq.w	8004334 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 808e 	beq.w	8004334 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800421c:	f003 0310 	and.w	r3, r3, #16
 8004220:	2b00      	cmp	r3, #0
 8004222:	d105      	bne.n	8004230 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004228:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff fb9f 	bl	8003978 <LL_ADC_REG_IsTriggerSourceSWStart>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d072      	beq.n	8004326 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a64      	ldr	r2, [pc, #400]	@ (80043d8 <HAL_ADC_IRQHandler+0x264>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d009      	beq.n	800425e <HAL_ADC_IRQHandler+0xea>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a65      	ldr	r2, [pc, #404]	@ (80043e4 <HAL_ADC_IRQHandler+0x270>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d002      	beq.n	800425a <HAL_ADC_IRQHandler+0xe6>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	e003      	b.n	8004262 <HAL_ADC_IRQHandler+0xee>
 800425a:	4b63      	ldr	r3, [pc, #396]	@ (80043e8 <HAL_ADC_IRQHandler+0x274>)
 800425c:	e001      	b.n	8004262 <HAL_ADC_IRQHandler+0xee>
 800425e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6812      	ldr	r2, [r2, #0]
 8004266:	4293      	cmp	r3, r2
 8004268:	d008      	beq.n	800427c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d005      	beq.n	800427c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2b05      	cmp	r3, #5
 8004274:	d002      	beq.n	800427c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2b09      	cmp	r3, #9
 800427a:	d104      	bne.n	8004286 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	623b      	str	r3, [r7, #32]
 8004284:	e014      	b.n	80042b0 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a53      	ldr	r2, [pc, #332]	@ (80043d8 <HAL_ADC_IRQHandler+0x264>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d009      	beq.n	80042a4 <HAL_ADC_IRQHandler+0x130>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a53      	ldr	r2, [pc, #332]	@ (80043e4 <HAL_ADC_IRQHandler+0x270>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d002      	beq.n	80042a0 <HAL_ADC_IRQHandler+0x12c>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	e003      	b.n	80042a8 <HAL_ADC_IRQHandler+0x134>
 80042a0:	4b51      	ldr	r3, [pc, #324]	@ (80043e8 <HAL_ADC_IRQHandler+0x274>)
 80042a2:	e001      	b.n	80042a8 <HAL_ADC_IRQHandler+0x134>
 80042a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80042a8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d135      	bne.n	8004326 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d12e      	bne.n	8004326 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff fc9a 	bl	8003c06 <LL_ADC_REG_IsConversionOngoing>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d11a      	bne.n	800430e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 020c 	bic.w	r2, r2, #12
 80042e6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d112      	bne.n	8004326 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004304:	f043 0201 	orr.w	r2, r3, #1
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800430c:	e00b      	b.n	8004326 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004312:	f043 0210 	orr.w	r2, r3, #16
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800431e:	f043 0201 	orr.w	r2, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f984 	bl	8004634 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	220c      	movs	r2, #12
 8004332:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f003 0320 	and.w	r3, r3, #32
 800433a:	2b00      	cmp	r3, #0
 800433c:	d004      	beq.n	8004348 <HAL_ADC_IRQHandler+0x1d4>
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	f003 0320 	and.w	r3, r3, #32
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10b      	bne.n	8004360 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800434e:	2b00      	cmp	r3, #0
 8004350:	f000 80b3 	beq.w	80044ba <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 80ad 	beq.w	80044ba <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	2b00      	cmp	r3, #0
 800436a:	d105      	bne.n	8004378 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004370:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff fb3a 	bl	80039f6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004382:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff faf5 	bl	8003978 <LL_ADC_REG_IsTriggerSourceSWStart>
 800438e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a10      	ldr	r2, [pc, #64]	@ (80043d8 <HAL_ADC_IRQHandler+0x264>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d009      	beq.n	80043ae <HAL_ADC_IRQHandler+0x23a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a11      	ldr	r2, [pc, #68]	@ (80043e4 <HAL_ADC_IRQHandler+0x270>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d002      	beq.n	80043aa <HAL_ADC_IRQHandler+0x236>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	e003      	b.n	80043b2 <HAL_ADC_IRQHandler+0x23e>
 80043aa:	4b0f      	ldr	r3, [pc, #60]	@ (80043e8 <HAL_ADC_IRQHandler+0x274>)
 80043ac:	e001      	b.n	80043b2 <HAL_ADC_IRQHandler+0x23e>
 80043ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6812      	ldr	r2, [r2, #0]
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d008      	beq.n	80043cc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d005      	beq.n	80043cc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	2b06      	cmp	r3, #6
 80043c4:	d002      	beq.n	80043cc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2b07      	cmp	r3, #7
 80043ca:	d10f      	bne.n	80043ec <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	623b      	str	r3, [r7, #32]
 80043d4:	e01f      	b.n	8004416 <HAL_ADC_IRQHandler+0x2a2>
 80043d6:	bf00      	nop
 80043d8:	50000100 	.word	0x50000100
 80043dc:	50000300 	.word	0x50000300
 80043e0:	50000700 	.word	0x50000700
 80043e4:	50000500 	.word	0x50000500
 80043e8:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a8b      	ldr	r2, [pc, #556]	@ (8004620 <HAL_ADC_IRQHandler+0x4ac>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d009      	beq.n	800440a <HAL_ADC_IRQHandler+0x296>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a8a      	ldr	r2, [pc, #552]	@ (8004624 <HAL_ADC_IRQHandler+0x4b0>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d002      	beq.n	8004406 <HAL_ADC_IRQHandler+0x292>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	e003      	b.n	800440e <HAL_ADC_IRQHandler+0x29a>
 8004406:	4b88      	ldr	r3, [pc, #544]	@ (8004628 <HAL_ADC_IRQHandler+0x4b4>)
 8004408:	e001      	b.n	800440e <HAL_ADC_IRQHandler+0x29a>
 800440a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800440e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d047      	beq.n	80044ac <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d007      	beq.n	8004436 <HAL_ADC_IRQHandler+0x2c2>
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d03f      	beq.n	80044ac <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004432:	2b00      	cmp	r3, #0
 8004434:	d13a      	bne.n	80044ac <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004440:	2b40      	cmp	r3, #64	@ 0x40
 8004442:	d133      	bne.n	80044ac <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d12e      	bne.n	80044ac <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	f7ff fbea 	bl	8003c2c <LL_ADC_INJ_IsConversionOngoing>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d11a      	bne.n	8004494 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800446c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004472:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800447e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004482:	2b00      	cmp	r3, #0
 8004484:	d112      	bne.n	80044ac <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800448a:	f043 0201 	orr.w	r2, r3, #1
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004492:	e00b      	b.n	80044ac <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004498:	f043 0210 	orr.w	r2, r3, #16
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044a4:	f043 0201 	orr.w	r2, r3, #1
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 fe79 	bl	80051a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2260      	movs	r2, #96	@ 0x60
 80044b8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d011      	beq.n	80044e8 <HAL_ADC_IRQHandler+0x374>
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00c      	beq.n	80044e8 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f8be 	bl	800465c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2280      	movs	r2, #128	@ 0x80
 80044e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d012      	beq.n	8004518 <HAL_ADC_IRQHandler+0x3a4>
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00d      	beq.n	8004518 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004500:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 fe5f 	bl	80051cc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004516:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800451e:	2b00      	cmp	r3, #0
 8004520:	d012      	beq.n	8004548 <HAL_ADC_IRQHandler+0x3d4>
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00d      	beq.n	8004548 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004530:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 fe51 	bl	80051e0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004546:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	f003 0310 	and.w	r3, r3, #16
 800454e:	2b00      	cmp	r3, #0
 8004550:	d043      	beq.n	80045da <HAL_ADC_IRQHandler+0x466>
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b00      	cmp	r3, #0
 800455a:	d03e      	beq.n	80045da <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004560:	2b00      	cmp	r3, #0
 8004562:	d102      	bne.n	800456a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8004564:	2301      	movs	r3, #1
 8004566:	627b      	str	r3, [r7, #36]	@ 0x24
 8004568:	e021      	b.n	80045ae <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d015      	beq.n	800459c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004578:	d004      	beq.n	8004584 <HAL_ADC_IRQHandler+0x410>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a28      	ldr	r2, [pc, #160]	@ (8004620 <HAL_ADC_IRQHandler+0x4ac>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d101      	bne.n	8004588 <HAL_ADC_IRQHandler+0x414>
 8004584:	4b29      	ldr	r3, [pc, #164]	@ (800462c <HAL_ADC_IRQHandler+0x4b8>)
 8004586:	e000      	b.n	800458a <HAL_ADC_IRQHandler+0x416>
 8004588:	4b29      	ldr	r3, [pc, #164]	@ (8004630 <HAL_ADC_IRQHandler+0x4bc>)
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff faa4 	bl	8003ad8 <LL_ADC_GetMultiDMATransfer>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00b      	beq.n	80045ae <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8004596:	2301      	movs	r3, #1
 8004598:	627b      	str	r3, [r7, #36]	@ 0x24
 800459a:	e008      	b.n	80045ae <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80045aa:	2301      	movs	r3, #1
 80045ac:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80045ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d10e      	bne.n	80045d2 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045b8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045c4:	f043 0202 	orr.w	r2, r3, #2
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f84f 	bl	8004670 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2210      	movs	r2, #16
 80045d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d018      	beq.n	8004616 <HAL_ADC_IRQHandler+0x4a2>
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d013      	beq.n	8004616 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045f2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045fe:	f043 0208 	orr.w	r2, r3, #8
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800460e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 fdd1 	bl	80051b8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004616:	bf00      	nop
 8004618:	3728      	adds	r7, #40	@ 0x28
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	50000100 	.word	0x50000100
 8004624:	50000500 	.word	0x50000500
 8004628:	50000400 	.word	0x50000400
 800462c:	50000300 	.word	0x50000300
 8004630:	50000700 	.word	0x50000700

08004634 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b0b6      	sub	sp, #216	@ 0xd8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004694:	2300      	movs	r3, #0
 8004696:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d102      	bne.n	80046a8 <HAL_ADC_ConfigChannel+0x24>
 80046a2:	2302      	movs	r3, #2
 80046a4:	f000 bc13 	b.w	8004ece <HAL_ADC_ConfigChannel+0x84a>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7ff faa6 	bl	8003c06 <LL_ADC_REG_IsConversionOngoing>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f040 83f3 	bne.w	8004ea8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6818      	ldr	r0, [r3, #0]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	6859      	ldr	r1, [r3, #4]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	f7ff f965 	bl	800399e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4618      	mov	r0, r3
 80046da:	f7ff fa94 	bl	8003c06 <LL_ADC_REG_IsConversionOngoing>
 80046de:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7ff faa0 	bl	8003c2c <LL_ADC_INJ_IsConversionOngoing>
 80046ec:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80046f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f040 81d9 	bne.w	8004aac <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80046fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f040 81d4 	bne.w	8004aac <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800470c:	d10f      	bne.n	800472e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6818      	ldr	r0, [r3, #0]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2200      	movs	r2, #0
 8004718:	4619      	mov	r1, r3
 800471a:	f7ff f97f 	bl	8003a1c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff f913 	bl	8003952 <LL_ADC_SetSamplingTimeCommonConfig>
 800472c:	e00e      	b.n	800474c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6818      	ldr	r0, [r3, #0]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	6819      	ldr	r1, [r3, #0]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	461a      	mov	r2, r3
 800473c:	f7ff f96e 	bl	8003a1c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2100      	movs	r1, #0
 8004746:	4618      	mov	r0, r3
 8004748:	f7ff f903 	bl	8003952 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	695a      	ldr	r2, [r3, #20]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	08db      	lsrs	r3, r3, #3
 8004758:	f003 0303 	and.w	r3, r3, #3
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	2b04      	cmp	r3, #4
 800476c:	d022      	beq.n	80047b4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	6919      	ldr	r1, [r3, #16]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800477e:	f7ff f85d 	bl	800383c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6818      	ldr	r0, [r3, #0]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	6919      	ldr	r1, [r3, #16]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	461a      	mov	r2, r3
 8004790:	f7ff f8a9 	bl	80038e6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6818      	ldr	r0, [r3, #0]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d102      	bne.n	80047aa <HAL_ADC_ConfigChannel+0x126>
 80047a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047a8:	e000      	b.n	80047ac <HAL_ADC_ConfigChannel+0x128>
 80047aa:	2300      	movs	r3, #0
 80047ac:	461a      	mov	r2, r3
 80047ae:	f7ff f8b5 	bl	800391c <LL_ADC_SetOffsetSaturation>
 80047b2:	e17b      	b.n	8004aac <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2100      	movs	r1, #0
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff f862 	bl	8003884 <LL_ADC_GetOffsetChannel>
 80047c0:	4603      	mov	r3, r0
 80047c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10a      	bne.n	80047e0 <HAL_ADC_ConfigChannel+0x15c>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2100      	movs	r1, #0
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7ff f857 	bl	8003884 <LL_ADC_GetOffsetChannel>
 80047d6:	4603      	mov	r3, r0
 80047d8:	0e9b      	lsrs	r3, r3, #26
 80047da:	f003 021f 	and.w	r2, r3, #31
 80047de:	e01e      	b.n	800481e <HAL_ADC_ConfigChannel+0x19a>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2100      	movs	r1, #0
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff f84c 	bl	8003884 <LL_ADC_GetOffsetChannel>
 80047ec:	4603      	mov	r3, r0
 80047ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80047f6:	fa93 f3a3 	rbit	r3, r3
 80047fa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80047fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004802:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004806:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800480e:	2320      	movs	r3, #32
 8004810:	e004      	b.n	800481c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004812:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004816:	fab3 f383 	clz	r3, r3
 800481a:	b2db      	uxtb	r3, r3
 800481c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004826:	2b00      	cmp	r3, #0
 8004828:	d105      	bne.n	8004836 <HAL_ADC_ConfigChannel+0x1b2>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	0e9b      	lsrs	r3, r3, #26
 8004830:	f003 031f 	and.w	r3, r3, #31
 8004834:	e018      	b.n	8004868 <HAL_ADC_ConfigChannel+0x1e4>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004842:	fa93 f3a3 	rbit	r3, r3
 8004846:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800484a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800484e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004852:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800485a:	2320      	movs	r3, #32
 800485c:	e004      	b.n	8004868 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800485e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004862:	fab3 f383 	clz	r3, r3
 8004866:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004868:	429a      	cmp	r2, r3
 800486a:	d106      	bne.n	800487a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2200      	movs	r2, #0
 8004872:	2100      	movs	r1, #0
 8004874:	4618      	mov	r0, r3
 8004876:	f7ff f81b 	bl	80038b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2101      	movs	r1, #1
 8004880:	4618      	mov	r0, r3
 8004882:	f7fe ffff 	bl	8003884 <LL_ADC_GetOffsetChannel>
 8004886:	4603      	mov	r3, r0
 8004888:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10a      	bne.n	80048a6 <HAL_ADC_ConfigChannel+0x222>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2101      	movs	r1, #1
 8004896:	4618      	mov	r0, r3
 8004898:	f7fe fff4 	bl	8003884 <LL_ADC_GetOffsetChannel>
 800489c:	4603      	mov	r3, r0
 800489e:	0e9b      	lsrs	r3, r3, #26
 80048a0:	f003 021f 	and.w	r2, r3, #31
 80048a4:	e01e      	b.n	80048e4 <HAL_ADC_ConfigChannel+0x260>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2101      	movs	r1, #1
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7fe ffe9 	bl	8003884 <LL_ADC_GetOffsetChannel>
 80048b2:	4603      	mov	r3, r0
 80048b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80048bc:	fa93 f3a3 	rbit	r3, r3
 80048c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80048c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80048c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80048cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80048d4:	2320      	movs	r3, #32
 80048d6:	e004      	b.n	80048e2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80048d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80048dc:	fab3 f383 	clz	r3, r3
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d105      	bne.n	80048fc <HAL_ADC_ConfigChannel+0x278>
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	0e9b      	lsrs	r3, r3, #26
 80048f6:	f003 031f 	and.w	r3, r3, #31
 80048fa:	e018      	b.n	800492e <HAL_ADC_ConfigChannel+0x2aa>
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004904:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004908:	fa93 f3a3 	rbit	r3, r3
 800490c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004910:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004914:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004918:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004920:	2320      	movs	r3, #32
 8004922:	e004      	b.n	800492e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004924:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004928:	fab3 f383 	clz	r3, r3
 800492c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800492e:	429a      	cmp	r2, r3
 8004930:	d106      	bne.n	8004940 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2200      	movs	r2, #0
 8004938:	2101      	movs	r1, #1
 800493a:	4618      	mov	r0, r3
 800493c:	f7fe ffb8 	bl	80038b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2102      	movs	r1, #2
 8004946:	4618      	mov	r0, r3
 8004948:	f7fe ff9c 	bl	8003884 <LL_ADC_GetOffsetChannel>
 800494c:	4603      	mov	r3, r0
 800494e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10a      	bne.n	800496c <HAL_ADC_ConfigChannel+0x2e8>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2102      	movs	r1, #2
 800495c:	4618      	mov	r0, r3
 800495e:	f7fe ff91 	bl	8003884 <LL_ADC_GetOffsetChannel>
 8004962:	4603      	mov	r3, r0
 8004964:	0e9b      	lsrs	r3, r3, #26
 8004966:	f003 021f 	and.w	r2, r3, #31
 800496a:	e01e      	b.n	80049aa <HAL_ADC_ConfigChannel+0x326>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2102      	movs	r1, #2
 8004972:	4618      	mov	r0, r3
 8004974:	f7fe ff86 	bl	8003884 <LL_ADC_GetOffsetChannel>
 8004978:	4603      	mov	r3, r0
 800497a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004982:	fa93 f3a3 	rbit	r3, r3
 8004986:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800498a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800498e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004992:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800499a:	2320      	movs	r3, #32
 800499c:	e004      	b.n	80049a8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800499e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80049a2:	fab3 f383 	clz	r3, r3
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d105      	bne.n	80049c2 <HAL_ADC_ConfigChannel+0x33e>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	0e9b      	lsrs	r3, r3, #26
 80049bc:	f003 031f 	and.w	r3, r3, #31
 80049c0:	e016      	b.n	80049f0 <HAL_ADC_ConfigChannel+0x36c>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80049ce:	fa93 f3a3 	rbit	r3, r3
 80049d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80049d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80049da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80049e2:	2320      	movs	r3, #32
 80049e4:	e004      	b.n	80049f0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80049e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80049ea:	fab3 f383 	clz	r3, r3
 80049ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d106      	bne.n	8004a02 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2200      	movs	r2, #0
 80049fa:	2102      	movs	r1, #2
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7fe ff57 	bl	80038b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2103      	movs	r1, #3
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fe ff3b 	bl	8003884 <LL_ADC_GetOffsetChannel>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10a      	bne.n	8004a2e <HAL_ADC_ConfigChannel+0x3aa>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2103      	movs	r1, #3
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fe ff30 	bl	8003884 <LL_ADC_GetOffsetChannel>
 8004a24:	4603      	mov	r3, r0
 8004a26:	0e9b      	lsrs	r3, r3, #26
 8004a28:	f003 021f 	and.w	r2, r3, #31
 8004a2c:	e017      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x3da>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2103      	movs	r1, #3
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fe ff25 	bl	8003884 <LL_ADC_GetOffsetChannel>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a40:	fa93 f3a3 	rbit	r3, r3
 8004a44:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004a46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a48:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004a4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004a50:	2320      	movs	r3, #32
 8004a52:	e003      	b.n	8004a5c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004a54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a56:	fab3 f383 	clz	r3, r3
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d105      	bne.n	8004a76 <HAL_ADC_ConfigChannel+0x3f2>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	0e9b      	lsrs	r3, r3, #26
 8004a70:	f003 031f 	and.w	r3, r3, #31
 8004a74:	e011      	b.n	8004a9a <HAL_ADC_ConfigChannel+0x416>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a7e:	fa93 f3a3 	rbit	r3, r3
 8004a82:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004a84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a86:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004a88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004a8e:	2320      	movs	r3, #32
 8004a90:	e003      	b.n	8004a9a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004a92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a94:	fab3 f383 	clz	r3, r3
 8004a98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d106      	bne.n	8004aac <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	2103      	movs	r1, #3
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fe ff02 	bl	80038b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff f881 	bl	8003bb8 <LL_ADC_IsEnabled>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f040 813d 	bne.w	8004d38 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6818      	ldr	r0, [r3, #0]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	6819      	ldr	r1, [r3, #0]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	461a      	mov	r2, r3
 8004acc:	f7fe ffd2 	bl	8003a74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	4aa2      	ldr	r2, [pc, #648]	@ (8004d60 <HAL_ADC_ConfigChannel+0x6dc>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	f040 812e 	bne.w	8004d38 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10b      	bne.n	8004b04 <HAL_ADC_ConfigChannel+0x480>
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	0e9b      	lsrs	r3, r3, #26
 8004af2:	3301      	adds	r3, #1
 8004af4:	f003 031f 	and.w	r3, r3, #31
 8004af8:	2b09      	cmp	r3, #9
 8004afa:	bf94      	ite	ls
 8004afc:	2301      	movls	r3, #1
 8004afe:	2300      	movhi	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	e019      	b.n	8004b38 <HAL_ADC_ConfigChannel+0x4b4>
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b0c:	fa93 f3a3 	rbit	r3, r3
 8004b10:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004b12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b14:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004b16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004b1c:	2320      	movs	r3, #32
 8004b1e:	e003      	b.n	8004b28 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004b20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b22:	fab3 f383 	clz	r3, r3
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	3301      	adds	r3, #1
 8004b2a:	f003 031f 	and.w	r3, r3, #31
 8004b2e:	2b09      	cmp	r3, #9
 8004b30:	bf94      	ite	ls
 8004b32:	2301      	movls	r3, #1
 8004b34:	2300      	movhi	r3, #0
 8004b36:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d079      	beq.n	8004c30 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d107      	bne.n	8004b58 <HAL_ADC_ConfigChannel+0x4d4>
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	0e9b      	lsrs	r3, r3, #26
 8004b4e:	3301      	adds	r3, #1
 8004b50:	069b      	lsls	r3, r3, #26
 8004b52:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004b56:	e015      	b.n	8004b84 <HAL_ADC_ConfigChannel+0x500>
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b60:	fa93 f3a3 	rbit	r3, r3
 8004b64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004b66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b68:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004b70:	2320      	movs	r3, #32
 8004b72:	e003      	b.n	8004b7c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004b74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b76:	fab3 f383 	clz	r3, r3
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	069b      	lsls	r3, r3, #26
 8004b80:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d109      	bne.n	8004ba4 <HAL_ADC_ConfigChannel+0x520>
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	0e9b      	lsrs	r3, r3, #26
 8004b96:	3301      	adds	r3, #1
 8004b98:	f003 031f 	and.w	r3, r3, #31
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba2:	e017      	b.n	8004bd4 <HAL_ADC_ConfigChannel+0x550>
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004baa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bac:	fa93 f3a3 	rbit	r3, r3
 8004bb0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004bb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004bbc:	2320      	movs	r3, #32
 8004bbe:	e003      	b.n	8004bc8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004bc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bc2:	fab3 f383 	clz	r3, r3
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	3301      	adds	r3, #1
 8004bca:	f003 031f 	and.w	r3, r3, #31
 8004bce:	2101      	movs	r1, #1
 8004bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd4:	ea42 0103 	orr.w	r1, r2, r3
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10a      	bne.n	8004bfa <HAL_ADC_ConfigChannel+0x576>
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	0e9b      	lsrs	r3, r3, #26
 8004bea:	3301      	adds	r3, #1
 8004bec:	f003 021f 	and.w	r2, r3, #31
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	4413      	add	r3, r2
 8004bf6:	051b      	lsls	r3, r3, #20
 8004bf8:	e018      	b.n	8004c2c <HAL_ADC_ConfigChannel+0x5a8>
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c02:	fa93 f3a3 	rbit	r3, r3
 8004c06:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004c12:	2320      	movs	r3, #32
 8004c14:	e003      	b.n	8004c1e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c18:	fab3 f383 	clz	r3, r3
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	3301      	adds	r3, #1
 8004c20:	f003 021f 	and.w	r2, r3, #31
 8004c24:	4613      	mov	r3, r2
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	4413      	add	r3, r2
 8004c2a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c2c:	430b      	orrs	r3, r1
 8004c2e:	e07e      	b.n	8004d2e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d107      	bne.n	8004c4c <HAL_ADC_ConfigChannel+0x5c8>
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	0e9b      	lsrs	r3, r3, #26
 8004c42:	3301      	adds	r3, #1
 8004c44:	069b      	lsls	r3, r3, #26
 8004c46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c4a:	e015      	b.n	8004c78 <HAL_ADC_ConfigChannel+0x5f4>
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c54:	fa93 f3a3 	rbit	r3, r3
 8004c58:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004c64:	2320      	movs	r3, #32
 8004c66:	e003      	b.n	8004c70 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c6a:	fab3 f383 	clz	r3, r3
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	3301      	adds	r3, #1
 8004c72:	069b      	lsls	r3, r3, #26
 8004c74:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d109      	bne.n	8004c98 <HAL_ADC_ConfigChannel+0x614>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	0e9b      	lsrs	r3, r3, #26
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	f003 031f 	and.w	r3, r3, #31
 8004c90:	2101      	movs	r1, #1
 8004c92:	fa01 f303 	lsl.w	r3, r1, r3
 8004c96:	e017      	b.n	8004cc8 <HAL_ADC_ConfigChannel+0x644>
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	fa93 f3a3 	rbit	r3, r3
 8004ca4:	61fb      	str	r3, [r7, #28]
  return result;
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004cb0:	2320      	movs	r3, #32
 8004cb2:	e003      	b.n	8004cbc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb6:	fab3 f383 	clz	r3, r3
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	f003 031f 	and.w	r3, r3, #31
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc8:	ea42 0103 	orr.w	r1, r2, r3
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10d      	bne.n	8004cf4 <HAL_ADC_ConfigChannel+0x670>
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	0e9b      	lsrs	r3, r3, #26
 8004cde:	3301      	adds	r3, #1
 8004ce0:	f003 021f 	and.w	r2, r3, #31
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	4413      	add	r3, r2
 8004cea:	3b1e      	subs	r3, #30
 8004cec:	051b      	lsls	r3, r3, #20
 8004cee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004cf2:	e01b      	b.n	8004d2c <HAL_ADC_ConfigChannel+0x6a8>
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	fa93 f3a3 	rbit	r3, r3
 8004d00:	613b      	str	r3, [r7, #16]
  return result;
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004d0c:	2320      	movs	r3, #32
 8004d0e:	e003      	b.n	8004d18 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	fab3 f383 	clz	r3, r3
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	3301      	adds	r3, #1
 8004d1a:	f003 021f 	and.w	r2, r3, #31
 8004d1e:	4613      	mov	r3, r2
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	4413      	add	r3, r2
 8004d24:	3b1e      	subs	r3, #30
 8004d26:	051b      	lsls	r3, r3, #20
 8004d28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d2c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d32:	4619      	mov	r1, r3
 8004d34:	f7fe fe72 	bl	8003a1c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	4b09      	ldr	r3, [pc, #36]	@ (8004d64 <HAL_ADC_ConfigChannel+0x6e0>)
 8004d3e:	4013      	ands	r3, r2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 80be 	beq.w	8004ec2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d4e:	d004      	beq.n	8004d5a <HAL_ADC_ConfigChannel+0x6d6>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a04      	ldr	r2, [pc, #16]	@ (8004d68 <HAL_ADC_ConfigChannel+0x6e4>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d10a      	bne.n	8004d70 <HAL_ADC_ConfigChannel+0x6ec>
 8004d5a:	4b04      	ldr	r3, [pc, #16]	@ (8004d6c <HAL_ADC_ConfigChannel+0x6e8>)
 8004d5c:	e009      	b.n	8004d72 <HAL_ADC_ConfigChannel+0x6ee>
 8004d5e:	bf00      	nop
 8004d60:	407f0000 	.word	0x407f0000
 8004d64:	80080000 	.word	0x80080000
 8004d68:	50000100 	.word	0x50000100
 8004d6c:	50000300 	.word	0x50000300
 8004d70:	4b59      	ldr	r3, [pc, #356]	@ (8004ed8 <HAL_ADC_ConfigChannel+0x854>)
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fe fd54 	bl	8003820 <LL_ADC_GetCommonPathInternalCh>
 8004d78:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a56      	ldr	r2, [pc, #344]	@ (8004edc <HAL_ADC_ConfigChannel+0x858>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d004      	beq.n	8004d90 <HAL_ADC_ConfigChannel+0x70c>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a55      	ldr	r2, [pc, #340]	@ (8004ee0 <HAL_ADC_ConfigChannel+0x85c>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d13a      	bne.n	8004e06 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004d90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d134      	bne.n	8004e06 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004da4:	d005      	beq.n	8004db2 <HAL_ADC_ConfigChannel+0x72e>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a4e      	ldr	r2, [pc, #312]	@ (8004ee4 <HAL_ADC_ConfigChannel+0x860>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	f040 8085 	bne.w	8004ebc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dba:	d004      	beq.n	8004dc6 <HAL_ADC_ConfigChannel+0x742>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a49      	ldr	r2, [pc, #292]	@ (8004ee8 <HAL_ADC_ConfigChannel+0x864>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d101      	bne.n	8004dca <HAL_ADC_ConfigChannel+0x746>
 8004dc6:	4a49      	ldr	r2, [pc, #292]	@ (8004eec <HAL_ADC_ConfigChannel+0x868>)
 8004dc8:	e000      	b.n	8004dcc <HAL_ADC_ConfigChannel+0x748>
 8004dca:	4a43      	ldr	r2, [pc, #268]	@ (8004ed8 <HAL_ADC_ConfigChannel+0x854>)
 8004dcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004dd0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	f7fe fd0f 	bl	80037fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ddc:	4b44      	ldr	r3, [pc, #272]	@ (8004ef0 <HAL_ADC_ConfigChannel+0x86c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	099b      	lsrs	r3, r3, #6
 8004de2:	4a44      	ldr	r2, [pc, #272]	@ (8004ef4 <HAL_ADC_ConfigChannel+0x870>)
 8004de4:	fba2 2303 	umull	r2, r3, r2, r3
 8004de8:	099b      	lsrs	r3, r3, #6
 8004dea:	1c5a      	adds	r2, r3, #1
 8004dec:	4613      	mov	r3, r2
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	4413      	add	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004df6:	e002      	b.n	8004dfe <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1f9      	bne.n	8004df8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e04:	e05a      	b.n	8004ebc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a3b      	ldr	r2, [pc, #236]	@ (8004ef8 <HAL_ADC_ConfigChannel+0x874>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d125      	bne.n	8004e5c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d11f      	bne.n	8004e5c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a31      	ldr	r2, [pc, #196]	@ (8004ee8 <HAL_ADC_ConfigChannel+0x864>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d104      	bne.n	8004e30 <HAL_ADC_ConfigChannel+0x7ac>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a34      	ldr	r2, [pc, #208]	@ (8004efc <HAL_ADC_ConfigChannel+0x878>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d047      	beq.n	8004ec0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e38:	d004      	beq.n	8004e44 <HAL_ADC_ConfigChannel+0x7c0>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a2a      	ldr	r2, [pc, #168]	@ (8004ee8 <HAL_ADC_ConfigChannel+0x864>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d101      	bne.n	8004e48 <HAL_ADC_ConfigChannel+0x7c4>
 8004e44:	4a29      	ldr	r2, [pc, #164]	@ (8004eec <HAL_ADC_ConfigChannel+0x868>)
 8004e46:	e000      	b.n	8004e4a <HAL_ADC_ConfigChannel+0x7c6>
 8004e48:	4a23      	ldr	r2, [pc, #140]	@ (8004ed8 <HAL_ADC_ConfigChannel+0x854>)
 8004e4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e52:	4619      	mov	r1, r3
 8004e54:	4610      	mov	r0, r2
 8004e56:	f7fe fcd0 	bl	80037fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e5a:	e031      	b.n	8004ec0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a27      	ldr	r2, [pc, #156]	@ (8004f00 <HAL_ADC_ConfigChannel+0x87c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d12d      	bne.n	8004ec2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d127      	bne.n	8004ec2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a1c      	ldr	r2, [pc, #112]	@ (8004ee8 <HAL_ADC_ConfigChannel+0x864>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d022      	beq.n	8004ec2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e84:	d004      	beq.n	8004e90 <HAL_ADC_ConfigChannel+0x80c>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a17      	ldr	r2, [pc, #92]	@ (8004ee8 <HAL_ADC_ConfigChannel+0x864>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d101      	bne.n	8004e94 <HAL_ADC_ConfigChannel+0x810>
 8004e90:	4a16      	ldr	r2, [pc, #88]	@ (8004eec <HAL_ADC_ConfigChannel+0x868>)
 8004e92:	e000      	b.n	8004e96 <HAL_ADC_ConfigChannel+0x812>
 8004e94:	4a10      	ldr	r2, [pc, #64]	@ (8004ed8 <HAL_ADC_ConfigChannel+0x854>)
 8004e96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e9a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	f7fe fcaa 	bl	80037fa <LL_ADC_SetCommonPathInternalCh>
 8004ea6:	e00c      	b.n	8004ec2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eac:	f043 0220 	orr.w	r2, r3, #32
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004eba:	e002      	b.n	8004ec2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ebc:	bf00      	nop
 8004ebe:	e000      	b.n	8004ec2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ec0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004eca:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	37d8      	adds	r7, #216	@ 0xd8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	50000700 	.word	0x50000700
 8004edc:	c3210000 	.word	0xc3210000
 8004ee0:	90c00010 	.word	0x90c00010
 8004ee4:	50000600 	.word	0x50000600
 8004ee8:	50000100 	.word	0x50000100
 8004eec:	50000300 	.word	0x50000300
 8004ef0:	20000040 	.word	0x20000040
 8004ef4:	053e2d63 	.word	0x053e2d63
 8004ef8:	c7520000 	.word	0xc7520000
 8004efc:	50000500 	.word	0x50000500
 8004f00:	cb840000 	.word	0xcb840000

08004f04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7fe fe4f 	bl	8003bb8 <LL_ADC_IsEnabled>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d176      	bne.n	800500e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689a      	ldr	r2, [r3, #8]
 8004f26:	4b3c      	ldr	r3, [pc, #240]	@ (8005018 <ADC_Enable+0x114>)
 8004f28:	4013      	ands	r3, r2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00d      	beq.n	8004f4a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f32:	f043 0210 	orr.w	r2, r3, #16
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f3e:	f043 0201 	orr.w	r2, r3, #1
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e062      	b.n	8005010 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7fe fe1e 	bl	8003b90 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f5c:	d004      	beq.n	8004f68 <ADC_Enable+0x64>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a2e      	ldr	r2, [pc, #184]	@ (800501c <ADC_Enable+0x118>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d101      	bne.n	8004f6c <ADC_Enable+0x68>
 8004f68:	4b2d      	ldr	r3, [pc, #180]	@ (8005020 <ADC_Enable+0x11c>)
 8004f6a:	e000      	b.n	8004f6e <ADC_Enable+0x6a>
 8004f6c:	4b2d      	ldr	r3, [pc, #180]	@ (8005024 <ADC_Enable+0x120>)
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fe fc56 	bl	8003820 <LL_ADC_GetCommonPathInternalCh>
 8004f74:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004f76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d013      	beq.n	8004fa6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f7e:	4b2a      	ldr	r3, [pc, #168]	@ (8005028 <ADC_Enable+0x124>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	099b      	lsrs	r3, r3, #6
 8004f84:	4a29      	ldr	r2, [pc, #164]	@ (800502c <ADC_Enable+0x128>)
 8004f86:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8a:	099b      	lsrs	r3, r3, #6
 8004f8c:	1c5a      	adds	r2, r3, #1
 8004f8e:	4613      	mov	r3, r2
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	4413      	add	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004f98:	e002      	b.n	8004fa0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1f9      	bne.n	8004f9a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004fa6:	f7fe fc09 	bl	80037bc <HAL_GetTick>
 8004faa:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004fac:	e028      	b.n	8005000 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fe fe00 	bl	8003bb8 <LL_ADC_IsEnabled>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d104      	bne.n	8004fc8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7fe fde4 	bl	8003b90 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004fc8:	f7fe fbf8 	bl	80037bc <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d914      	bls.n	8005000 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d00d      	beq.n	8005000 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fe8:	f043 0210 	orr.w	r2, r3, #16
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ff4:	f043 0201 	orr.w	r2, r3, #1
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e007      	b.n	8005010 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b01      	cmp	r3, #1
 800500c:	d1cf      	bne.n	8004fae <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	8000003f 	.word	0x8000003f
 800501c:	50000100 	.word	0x50000100
 8005020:	50000300 	.word	0x50000300
 8005024:	50000700 	.word	0x50000700
 8005028:	20000040 	.word	0x20000040
 800502c:	053e2d63 	.word	0x053e2d63

08005030 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005042:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005046:	2b00      	cmp	r3, #0
 8005048:	d14b      	bne.n	80050e2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800504e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	2b00      	cmp	r3, #0
 8005062:	d021      	beq.n	80050a8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4618      	mov	r0, r3
 800506a:	f7fe fc85 	bl	8003978 <LL_ADC_REG_IsTriggerSourceSWStart>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d032      	beq.n	80050da <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d12b      	bne.n	80050da <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005086:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005092:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d11f      	bne.n	80050da <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800509e:	f043 0201 	orr.w	r2, r3, #1
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80050a6:	e018      	b.n	80050da <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d111      	bne.n	80050da <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d105      	bne.n	80050da <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050d2:	f043 0201 	orr.w	r2, r3, #1
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f7ff faaa 	bl	8004634 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80050e0:	e00e      	b.n	8005100 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050e6:	f003 0310 	and.w	r3, r3, #16
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f7ff fabe 	bl	8004670 <HAL_ADC_ErrorCallback>
}
 80050f4:	e004      	b.n	8005100 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	4798      	blx	r3
}
 8005100:	bf00      	nop
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005114:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f7ff fa96 	bl	8004648 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800511c:	bf00      	nop
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005130:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005136:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005142:	f043 0204 	orr.w	r2, r3, #4
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f7ff fa90 	bl	8004670 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005150:	bf00      	nop
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <LL_ADC_IsEnabled>:
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <LL_ADC_IsEnabled+0x18>
 800516c:	2301      	movs	r3, #1
 800516e:	e000      	b.n	8005172 <LL_ADC_IsEnabled+0x1a>
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <LL_ADC_REG_IsConversionOngoing>:
{
 800517e:	b480      	push	{r7}
 8005180:	b083      	sub	sp, #12
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f003 0304 	and.w	r3, r3, #4
 800518e:	2b04      	cmp	r3, #4
 8005190:	d101      	bne.n	8005196 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005192:	2301      	movs	r3, #1
 8005194:	e000      	b.n	8005198 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005208:	b590      	push	{r4, r7, lr}
 800520a:	b0a1      	sub	sp, #132	@ 0x84
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005212:	2300      	movs	r3, #0
 8005214:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800521e:	2b01      	cmp	r3, #1
 8005220:	d101      	bne.n	8005226 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005222:	2302      	movs	r3, #2
 8005224:	e0e7      	b.n	80053f6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800522e:	2300      	movs	r3, #0
 8005230:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005232:	2300      	movs	r3, #0
 8005234:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800523e:	d102      	bne.n	8005246 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005240:	4b6f      	ldr	r3, [pc, #444]	@ (8005400 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005242:	60bb      	str	r3, [r7, #8]
 8005244:	e009      	b.n	800525a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a6e      	ldr	r2, [pc, #440]	@ (8005404 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d102      	bne.n	8005256 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005250:	4b6d      	ldr	r3, [pc, #436]	@ (8005408 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005252:	60bb      	str	r3, [r7, #8]
 8005254:	e001      	b.n	800525a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005256:	2300      	movs	r3, #0
 8005258:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10b      	bne.n	8005278 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005264:	f043 0220 	orr.w	r2, r3, #32
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e0be      	b.n	80053f6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	4618      	mov	r0, r3
 800527c:	f7ff ff7f 	bl	800517e <LL_ADC_REG_IsConversionOngoing>
 8005280:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4618      	mov	r0, r3
 8005288:	f7ff ff79 	bl	800517e <LL_ADC_REG_IsConversionOngoing>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	f040 80a0 	bne.w	80053d4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005294:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005296:	2b00      	cmp	r3, #0
 8005298:	f040 809c 	bne.w	80053d4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052a4:	d004      	beq.n	80052b0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a55      	ldr	r2, [pc, #340]	@ (8005400 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d101      	bne.n	80052b4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80052b0:	4b56      	ldr	r3, [pc, #344]	@ (800540c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80052b2:	e000      	b.n	80052b6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80052b4:	4b56      	ldr	r3, [pc, #344]	@ (8005410 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80052b6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d04b      	beq.n	8005358 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80052c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	6859      	ldr	r1, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80052d2:	035b      	lsls	r3, r3, #13
 80052d4:	430b      	orrs	r3, r1
 80052d6:	431a      	orrs	r2, r3
 80052d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052da:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052e4:	d004      	beq.n	80052f0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a45      	ldr	r2, [pc, #276]	@ (8005400 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d10f      	bne.n	8005310 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80052f0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80052f4:	f7ff ff30 	bl	8005158 <LL_ADC_IsEnabled>
 80052f8:	4604      	mov	r4, r0
 80052fa:	4841      	ldr	r0, [pc, #260]	@ (8005400 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80052fc:	f7ff ff2c 	bl	8005158 <LL_ADC_IsEnabled>
 8005300:	4603      	mov	r3, r0
 8005302:	4323      	orrs	r3, r4
 8005304:	2b00      	cmp	r3, #0
 8005306:	bf0c      	ite	eq
 8005308:	2301      	moveq	r3, #1
 800530a:	2300      	movne	r3, #0
 800530c:	b2db      	uxtb	r3, r3
 800530e:	e012      	b.n	8005336 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005310:	483c      	ldr	r0, [pc, #240]	@ (8005404 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005312:	f7ff ff21 	bl	8005158 <LL_ADC_IsEnabled>
 8005316:	4604      	mov	r4, r0
 8005318:	483b      	ldr	r0, [pc, #236]	@ (8005408 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800531a:	f7ff ff1d 	bl	8005158 <LL_ADC_IsEnabled>
 800531e:	4603      	mov	r3, r0
 8005320:	431c      	orrs	r4, r3
 8005322:	483c      	ldr	r0, [pc, #240]	@ (8005414 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005324:	f7ff ff18 	bl	8005158 <LL_ADC_IsEnabled>
 8005328:	4603      	mov	r3, r0
 800532a:	4323      	orrs	r3, r4
 800532c:	2b00      	cmp	r3, #0
 800532e:	bf0c      	ite	eq
 8005330:	2301      	moveq	r3, #1
 8005332:	2300      	movne	r3, #0
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d056      	beq.n	80053e8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800533a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005342:	f023 030f 	bic.w	r3, r3, #15
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	6811      	ldr	r1, [r2, #0]
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	6892      	ldr	r2, [r2, #8]
 800534e:	430a      	orrs	r2, r1
 8005350:	431a      	orrs	r2, r3
 8005352:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005354:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005356:	e047      	b.n	80053e8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005358:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005360:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005362:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800536c:	d004      	beq.n	8005378 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a23      	ldr	r2, [pc, #140]	@ (8005400 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d10f      	bne.n	8005398 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005378:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800537c:	f7ff feec 	bl	8005158 <LL_ADC_IsEnabled>
 8005380:	4604      	mov	r4, r0
 8005382:	481f      	ldr	r0, [pc, #124]	@ (8005400 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005384:	f7ff fee8 	bl	8005158 <LL_ADC_IsEnabled>
 8005388:	4603      	mov	r3, r0
 800538a:	4323      	orrs	r3, r4
 800538c:	2b00      	cmp	r3, #0
 800538e:	bf0c      	ite	eq
 8005390:	2301      	moveq	r3, #1
 8005392:	2300      	movne	r3, #0
 8005394:	b2db      	uxtb	r3, r3
 8005396:	e012      	b.n	80053be <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005398:	481a      	ldr	r0, [pc, #104]	@ (8005404 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800539a:	f7ff fedd 	bl	8005158 <LL_ADC_IsEnabled>
 800539e:	4604      	mov	r4, r0
 80053a0:	4819      	ldr	r0, [pc, #100]	@ (8005408 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80053a2:	f7ff fed9 	bl	8005158 <LL_ADC_IsEnabled>
 80053a6:	4603      	mov	r3, r0
 80053a8:	431c      	orrs	r4, r3
 80053aa:	481a      	ldr	r0, [pc, #104]	@ (8005414 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80053ac:	f7ff fed4 	bl	8005158 <LL_ADC_IsEnabled>
 80053b0:	4603      	mov	r3, r0
 80053b2:	4323      	orrs	r3, r4
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	bf0c      	ite	eq
 80053b8:	2301      	moveq	r3, #1
 80053ba:	2300      	movne	r3, #0
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d012      	beq.n	80053e8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80053c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80053ca:	f023 030f 	bic.w	r3, r3, #15
 80053ce:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80053d0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80053d2:	e009      	b.n	80053e8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053d8:	f043 0220 	orr.w	r2, r3, #32
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80053e6:	e000      	b.n	80053ea <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80053e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80053f2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3784      	adds	r7, #132	@ 0x84
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd90      	pop	{r4, r7, pc}
 80053fe:	bf00      	nop
 8005400:	50000100 	.word	0x50000100
 8005404:	50000400 	.word	0x50000400
 8005408:	50000500 	.word	0x50000500
 800540c:	50000300 	.word	0x50000300
 8005410:	50000700 	.word	0x50000700
 8005414:	50000600 	.word	0x50000600

08005418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f003 0307 	and.w	r3, r3, #7
 8005426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005428:	4b0c      	ldr	r3, [pc, #48]	@ (800545c <__NVIC_SetPriorityGrouping+0x44>)
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005434:	4013      	ands	r3, r2
 8005436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005440:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005444:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800544a:	4a04      	ldr	r2, [pc, #16]	@ (800545c <__NVIC_SetPriorityGrouping+0x44>)
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	60d3      	str	r3, [r2, #12]
}
 8005450:	bf00      	nop
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	e000ed00 	.word	0xe000ed00

08005460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005460:	b480      	push	{r7}
 8005462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005464:	4b04      	ldr	r3, [pc, #16]	@ (8005478 <__NVIC_GetPriorityGrouping+0x18>)
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	0a1b      	lsrs	r3, r3, #8
 800546a:	f003 0307 	and.w	r3, r3, #7
}
 800546e:	4618      	mov	r0, r3
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	e000ed00 	.word	0xe000ed00

0800547c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	4603      	mov	r3, r0
 8005484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800548a:	2b00      	cmp	r3, #0
 800548c:	db0b      	blt.n	80054a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800548e:	79fb      	ldrb	r3, [r7, #7]
 8005490:	f003 021f 	and.w	r2, r3, #31
 8005494:	4907      	ldr	r1, [pc, #28]	@ (80054b4 <__NVIC_EnableIRQ+0x38>)
 8005496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800549a:	095b      	lsrs	r3, r3, #5
 800549c:	2001      	movs	r0, #1
 800549e:	fa00 f202 	lsl.w	r2, r0, r2
 80054a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80054a6:	bf00      	nop
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	e000e100 	.word	0xe000e100

080054b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	4603      	mov	r3, r0
 80054c0:	6039      	str	r1, [r7, #0]
 80054c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	db0a      	blt.n	80054e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	b2da      	uxtb	r2, r3
 80054d0:	490c      	ldr	r1, [pc, #48]	@ (8005504 <__NVIC_SetPriority+0x4c>)
 80054d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054d6:	0112      	lsls	r2, r2, #4
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	440b      	add	r3, r1
 80054dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054e0:	e00a      	b.n	80054f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	4908      	ldr	r1, [pc, #32]	@ (8005508 <__NVIC_SetPriority+0x50>)
 80054e8:	79fb      	ldrb	r3, [r7, #7]
 80054ea:	f003 030f 	and.w	r3, r3, #15
 80054ee:	3b04      	subs	r3, #4
 80054f0:	0112      	lsls	r2, r2, #4
 80054f2:	b2d2      	uxtb	r2, r2
 80054f4:	440b      	add	r3, r1
 80054f6:	761a      	strb	r2, [r3, #24]
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	e000e100 	.word	0xe000e100
 8005508:	e000ed00 	.word	0xe000ed00

0800550c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800550c:	b480      	push	{r7}
 800550e:	b089      	sub	sp, #36	@ 0x24
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f003 0307 	and.w	r3, r3, #7
 800551e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	f1c3 0307 	rsb	r3, r3, #7
 8005526:	2b04      	cmp	r3, #4
 8005528:	bf28      	it	cs
 800552a:	2304      	movcs	r3, #4
 800552c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	3304      	adds	r3, #4
 8005532:	2b06      	cmp	r3, #6
 8005534:	d902      	bls.n	800553c <NVIC_EncodePriority+0x30>
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	3b03      	subs	r3, #3
 800553a:	e000      	b.n	800553e <NVIC_EncodePriority+0x32>
 800553c:	2300      	movs	r3, #0
 800553e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005540:	f04f 32ff 	mov.w	r2, #4294967295
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	fa02 f303 	lsl.w	r3, r2, r3
 800554a:	43da      	mvns	r2, r3
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	401a      	ands	r2, r3
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005554:	f04f 31ff 	mov.w	r1, #4294967295
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	fa01 f303 	lsl.w	r3, r1, r3
 800555e:	43d9      	mvns	r1, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005564:	4313      	orrs	r3, r2
         );
}
 8005566:	4618      	mov	r0, r3
 8005568:	3724      	adds	r7, #36	@ 0x24
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
	...

08005574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	3b01      	subs	r3, #1
 8005580:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005584:	d301      	bcc.n	800558a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005586:	2301      	movs	r3, #1
 8005588:	e00f      	b.n	80055aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800558a:	4a0a      	ldr	r2, [pc, #40]	@ (80055b4 <SysTick_Config+0x40>)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3b01      	subs	r3, #1
 8005590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005592:	210f      	movs	r1, #15
 8005594:	f04f 30ff 	mov.w	r0, #4294967295
 8005598:	f7ff ff8e 	bl	80054b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800559c:	4b05      	ldr	r3, [pc, #20]	@ (80055b4 <SysTick_Config+0x40>)
 800559e:	2200      	movs	r2, #0
 80055a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055a2:	4b04      	ldr	r3, [pc, #16]	@ (80055b4 <SysTick_Config+0x40>)
 80055a4:	2207      	movs	r2, #7
 80055a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	e000e010 	.word	0xe000e010

080055b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f7ff ff29 	bl	8005418 <__NVIC_SetPriorityGrouping>
}
 80055c6:	bf00      	nop
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b086      	sub	sp, #24
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	4603      	mov	r3, r0
 80055d6:	60b9      	str	r1, [r7, #8]
 80055d8:	607a      	str	r2, [r7, #4]
 80055da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80055dc:	f7ff ff40 	bl	8005460 <__NVIC_GetPriorityGrouping>
 80055e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	68b9      	ldr	r1, [r7, #8]
 80055e6:	6978      	ldr	r0, [r7, #20]
 80055e8:	f7ff ff90 	bl	800550c <NVIC_EncodePriority>
 80055ec:	4602      	mov	r2, r0
 80055ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055f2:	4611      	mov	r1, r2
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7ff ff5f 	bl	80054b8 <__NVIC_SetPriority>
}
 80055fa:	bf00      	nop
 80055fc:	3718      	adds	r7, #24
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b082      	sub	sp, #8
 8005606:	af00      	add	r7, sp, #0
 8005608:	4603      	mov	r3, r0
 800560a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800560c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005610:	4618      	mov	r0, r3
 8005612:	f7ff ff33 	bl	800547c <__NVIC_EnableIRQ>
}
 8005616:	bf00      	nop
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b082      	sub	sp, #8
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7ff ffa4 	bl	8005574 <SysTick_Config>
 800562c:	4603      	mov	r3, r0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
	...

08005638 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e08d      	b.n	8005766 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	461a      	mov	r2, r3
 8005650:	4b47      	ldr	r3, [pc, #284]	@ (8005770 <HAL_DMA_Init+0x138>)
 8005652:	429a      	cmp	r2, r3
 8005654:	d80f      	bhi.n	8005676 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	4b45      	ldr	r3, [pc, #276]	@ (8005774 <HAL_DMA_Init+0x13c>)
 800565e:	4413      	add	r3, r2
 8005660:	4a45      	ldr	r2, [pc, #276]	@ (8005778 <HAL_DMA_Init+0x140>)
 8005662:	fba2 2303 	umull	r2, r3, r2, r3
 8005666:	091b      	lsrs	r3, r3, #4
 8005668:	009a      	lsls	r2, r3, #2
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a42      	ldr	r2, [pc, #264]	@ (800577c <HAL_DMA_Init+0x144>)
 8005672:	641a      	str	r2, [r3, #64]	@ 0x40
 8005674:	e00e      	b.n	8005694 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	461a      	mov	r2, r3
 800567c:	4b40      	ldr	r3, [pc, #256]	@ (8005780 <HAL_DMA_Init+0x148>)
 800567e:	4413      	add	r3, r2
 8005680:	4a3d      	ldr	r2, [pc, #244]	@ (8005778 <HAL_DMA_Init+0x140>)
 8005682:	fba2 2303 	umull	r2, r3, r2, r3
 8005686:	091b      	lsrs	r3, r3, #4
 8005688:	009a      	lsls	r2, r3, #2
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a3c      	ldr	r2, [pc, #240]	@ (8005784 <HAL_DMA_Init+0x14c>)
 8005692:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80056aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80056b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	4313      	orrs	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 fa76 	bl	8005bd8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056f4:	d102      	bne.n	80056fc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005704:	b2d2      	uxtb	r2, r2
 8005706:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005710:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d010      	beq.n	800573c <HAL_DMA_Init+0x104>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	2b04      	cmp	r3, #4
 8005720:	d80c      	bhi.n	800573c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 fa96 	bl	8005c54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005738:	605a      	str	r2, [r3, #4]
 800573a:	e008      	b.n	800574e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	40020407 	.word	0x40020407
 8005774:	bffdfff8 	.word	0xbffdfff8
 8005778:	cccccccd 	.word	0xcccccccd
 800577c:	40020000 	.word	0x40020000
 8005780:	bffdfbf8 	.word	0xbffdfbf8
 8005784:	40020400 	.word	0x40020400

08005788 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
 8005794:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005796:	2300      	movs	r3, #0
 8005798:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d101      	bne.n	80057a8 <HAL_DMA_Start_IT+0x20>
 80057a4:	2302      	movs	r3, #2
 80057a6:	e066      	b.n	8005876 <HAL_DMA_Start_IT+0xee>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d155      	bne.n	8005868 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 0201 	bic.w	r2, r2, #1
 80057d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	68b9      	ldr	r1, [r7, #8]
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f000 f9bb 	bl	8005b5c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d008      	beq.n	8005800 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f042 020e 	orr.w	r2, r2, #14
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	e00f      	b.n	8005820 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0204 	bic.w	r2, r2, #4
 800580e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 020a 	orr.w	r2, r2, #10
 800581e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d007      	beq.n	800583e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005838:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800583c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005842:	2b00      	cmp	r3, #0
 8005844:	d007      	beq.n	8005856 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005850:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005854:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f042 0201 	orr.w	r2, r2, #1
 8005864:	601a      	str	r2, [r3, #0]
 8005866:	e005      	b.n	8005874 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005870:	2302      	movs	r3, #2
 8005872:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005874:	7dfb      	ldrb	r3, [r7, #23]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3718      	adds	r7, #24
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800587e:	b480      	push	{r7}
 8005880:	b085      	sub	sp, #20
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b02      	cmp	r3, #2
 8005894:	d005      	beq.n	80058a2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2204      	movs	r2, #4
 800589a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	73fb      	strb	r3, [r7, #15]
 80058a0:	e037      	b.n	8005912 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 020e 	bic.w	r2, r2, #14
 80058b0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058c0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 0201 	bic.w	r2, r2, #1
 80058d0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058d6:	f003 021f 	and.w	r2, r3, #31
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058de:	2101      	movs	r1, #1
 80058e0:	fa01 f202 	lsl.w	r2, r1, r2
 80058e4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80058ee:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00c      	beq.n	8005912 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005902:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005906:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005910:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005922:	7bfb      	ldrb	r3, [r7, #15]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005938:	2300      	movs	r3, #0
 800593a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d00d      	beq.n	8005964 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2204      	movs	r2, #4
 800594c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	73fb      	strb	r3, [r7, #15]
 8005962:	e047      	b.n	80059f4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 020e 	bic.w	r2, r2, #14
 8005972:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0201 	bic.w	r2, r2, #1
 8005982:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800598e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005992:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005998:	f003 021f 	and.w	r2, r3, #31
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a0:	2101      	movs	r1, #1
 80059a2:	fa01 f202 	lsl.w	r2, r1, r2
 80059a6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80059b0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00c      	beq.n	80059d4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80059c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80059d2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	4798      	blx	r3
    }
  }
  return status;
 80059f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b084      	sub	sp, #16
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a1a:	f003 031f 	and.w	r3, r3, #31
 8005a1e:	2204      	movs	r2, #4
 8005a20:	409a      	lsls	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	4013      	ands	r3, r2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d026      	beq.n	8005a78 <HAL_DMA_IRQHandler+0x7a>
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d021      	beq.n	8005a78 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0320 	and.w	r3, r3, #32
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d107      	bne.n	8005a52 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 0204 	bic.w	r2, r2, #4
 8005a50:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a56:	f003 021f 	and.w	r2, r3, #31
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5e:	2104      	movs	r1, #4
 8005a60:	fa01 f202 	lsl.w	r2, r1, r2
 8005a64:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d071      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005a76:	e06c      	b.n	8005b52 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a7c:	f003 031f 	and.w	r3, r3, #31
 8005a80:	2202      	movs	r2, #2
 8005a82:	409a      	lsls	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4013      	ands	r3, r2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d02e      	beq.n	8005aea <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d029      	beq.n	8005aea <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0320 	and.w	r3, r3, #32
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10b      	bne.n	8005abc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 020a 	bic.w	r2, r2, #10
 8005ab2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ac0:	f003 021f 	and.w	r2, r3, #31
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac8:	2102      	movs	r1, #2
 8005aca:	fa01 f202 	lsl.w	r2, r1, r2
 8005ace:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d038      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005ae8:	e033      	b.n	8005b52 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aee:	f003 031f 	and.w	r3, r3, #31
 8005af2:	2208      	movs	r2, #8
 8005af4:	409a      	lsls	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	4013      	ands	r3, r2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d02a      	beq.n	8005b54 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	f003 0308 	and.w	r3, r3, #8
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d025      	beq.n	8005b54 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f022 020e 	bic.w	r2, r2, #14
 8005b16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b1c:	f003 021f 	and.w	r2, r3, #31
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b24:	2101      	movs	r1, #1
 8005b26:	fa01 f202 	lsl.w	r2, r1, r2
 8005b2a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d004      	beq.n	8005b54 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005b52:	bf00      	nop
 8005b54:	bf00      	nop
}
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005b72:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d004      	beq.n	8005b86 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005b84:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b8a:	f003 021f 	and.w	r2, r3, #31
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b92:	2101      	movs	r1, #1
 8005b94:	fa01 f202 	lsl.w	r2, r1, r2
 8005b98:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	2b10      	cmp	r3, #16
 8005ba8:	d108      	bne.n	8005bbc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005bba:	e007      	b.n	8005bcc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68ba      	ldr	r2, [r7, #8]
 8005bc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	60da      	str	r2, [r3, #12]
}
 8005bcc:	bf00      	nop
 8005bce:	3714      	adds	r7, #20
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	461a      	mov	r2, r3
 8005be6:	4b16      	ldr	r3, [pc, #88]	@ (8005c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d802      	bhi.n	8005bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005bec:	4b15      	ldr	r3, [pc, #84]	@ (8005c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005bee:	617b      	str	r3, [r7, #20]
 8005bf0:	e001      	b.n	8005bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005bf2:	4b15      	ldr	r3, [pc, #84]	@ (8005c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005bf4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	3b08      	subs	r3, #8
 8005c02:	4a12      	ldr	r2, [pc, #72]	@ (8005c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005c04:	fba2 2303 	umull	r2, r3, r2, r3
 8005c08:	091b      	lsrs	r3, r3, #4
 8005c0a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c10:	089b      	lsrs	r3, r3, #2
 8005c12:	009a      	lsls	r2, r3, #2
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	4413      	add	r3, r2
 8005c18:	461a      	mov	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a0b      	ldr	r2, [pc, #44]	@ (8005c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005c22:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f003 031f 	and.w	r3, r3, #31
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	409a      	lsls	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005c32:	bf00      	nop
 8005c34:	371c      	adds	r7, #28
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	40020407 	.word	0x40020407
 8005c44:	40020800 	.word	0x40020800
 8005c48:	40020820 	.word	0x40020820
 8005c4c:	cccccccd 	.word	0xcccccccd
 8005c50:	40020880 	.word	0x40020880

08005c54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4b0b      	ldr	r3, [pc, #44]	@ (8005c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005c68:	4413      	add	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a08      	ldr	r2, [pc, #32]	@ (8005c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005c76:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	f003 031f 	and.w	r3, r3, #31
 8005c80:	2201      	movs	r2, #1
 8005c82:	409a      	lsls	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005c88:	bf00      	nop
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	1000823f 	.word	0x1000823f
 8005c98:	40020940 	.word	0x40020940

08005c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005caa:	e15a      	b.n	8005f62 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb8:	4013      	ands	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f000 814c 	beq.w	8005f5c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f003 0303 	and.w	r3, r3, #3
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d005      	beq.n	8005cdc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d130      	bne.n	8005d3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	2203      	movs	r2, #3
 8005ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cec:	43db      	mvns	r3, r3
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	68da      	ldr	r2, [r3, #12]
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d12:	2201      	movs	r2, #1
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1a:	43db      	mvns	r3, r3
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	091b      	lsrs	r3, r3, #4
 8005d28:	f003 0201 	and.w	r2, r3, #1
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f003 0303 	and.w	r3, r3, #3
 8005d46:	2b03      	cmp	r3, #3
 8005d48:	d017      	beq.n	8005d7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	2203      	movs	r2, #3
 8005d56:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5a:	43db      	mvns	r3, r3
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	689a      	ldr	r2, [r3, #8]
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f003 0303 	and.w	r3, r3, #3
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d123      	bne.n	8005dce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	08da      	lsrs	r2, r3, #3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	3208      	adds	r2, #8
 8005d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	220f      	movs	r2, #15
 8005d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005da2:	43db      	mvns	r3, r3
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	4013      	ands	r3, r2
 8005da8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	691a      	ldr	r2, [r3, #16]
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f003 0307 	and.w	r3, r3, #7
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	08da      	lsrs	r2, r3, #3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	3208      	adds	r2, #8
 8005dc8:	6939      	ldr	r1, [r7, #16]
 8005dca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	005b      	lsls	r3, r3, #1
 8005dd8:	2203      	movs	r2, #3
 8005dda:	fa02 f303 	lsl.w	r3, r2, r3
 8005dde:	43db      	mvns	r3, r3
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	4013      	ands	r3, r2
 8005de4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f003 0203 	and.w	r2, r3, #3
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	005b      	lsls	r3, r3, #1
 8005df2:	fa02 f303 	lsl.w	r3, r2, r3
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 80a6 	beq.w	8005f5c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e10:	4b5b      	ldr	r3, [pc, #364]	@ (8005f80 <HAL_GPIO_Init+0x2e4>)
 8005e12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e14:	4a5a      	ldr	r2, [pc, #360]	@ (8005f80 <HAL_GPIO_Init+0x2e4>)
 8005e16:	f043 0301 	orr.w	r3, r3, #1
 8005e1a:	6613      	str	r3, [r2, #96]	@ 0x60
 8005e1c:	4b58      	ldr	r3, [pc, #352]	@ (8005f80 <HAL_GPIO_Init+0x2e4>)
 8005e1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	60bb      	str	r3, [r7, #8]
 8005e26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e28:	4a56      	ldr	r2, [pc, #344]	@ (8005f84 <HAL_GPIO_Init+0x2e8>)
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	089b      	lsrs	r3, r3, #2
 8005e2e:	3302      	adds	r3, #2
 8005e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f003 0303 	and.w	r3, r3, #3
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	220f      	movs	r2, #15
 8005e40:	fa02 f303 	lsl.w	r3, r2, r3
 8005e44:	43db      	mvns	r3, r3
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	4013      	ands	r3, r2
 8005e4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005e52:	d01f      	beq.n	8005e94 <HAL_GPIO_Init+0x1f8>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a4c      	ldr	r2, [pc, #304]	@ (8005f88 <HAL_GPIO_Init+0x2ec>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d019      	beq.n	8005e90 <HAL_GPIO_Init+0x1f4>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a4b      	ldr	r2, [pc, #300]	@ (8005f8c <HAL_GPIO_Init+0x2f0>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d013      	beq.n	8005e8c <HAL_GPIO_Init+0x1f0>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a4a      	ldr	r2, [pc, #296]	@ (8005f90 <HAL_GPIO_Init+0x2f4>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d00d      	beq.n	8005e88 <HAL_GPIO_Init+0x1ec>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a49      	ldr	r2, [pc, #292]	@ (8005f94 <HAL_GPIO_Init+0x2f8>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d007      	beq.n	8005e84 <HAL_GPIO_Init+0x1e8>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a48      	ldr	r2, [pc, #288]	@ (8005f98 <HAL_GPIO_Init+0x2fc>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d101      	bne.n	8005e80 <HAL_GPIO_Init+0x1e4>
 8005e7c:	2305      	movs	r3, #5
 8005e7e:	e00a      	b.n	8005e96 <HAL_GPIO_Init+0x1fa>
 8005e80:	2306      	movs	r3, #6
 8005e82:	e008      	b.n	8005e96 <HAL_GPIO_Init+0x1fa>
 8005e84:	2304      	movs	r3, #4
 8005e86:	e006      	b.n	8005e96 <HAL_GPIO_Init+0x1fa>
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e004      	b.n	8005e96 <HAL_GPIO_Init+0x1fa>
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	e002      	b.n	8005e96 <HAL_GPIO_Init+0x1fa>
 8005e90:	2301      	movs	r3, #1
 8005e92:	e000      	b.n	8005e96 <HAL_GPIO_Init+0x1fa>
 8005e94:	2300      	movs	r3, #0
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	f002 0203 	and.w	r2, r2, #3
 8005e9c:	0092      	lsls	r2, r2, #2
 8005e9e:	4093      	lsls	r3, r2
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ea6:	4937      	ldr	r1, [pc, #220]	@ (8005f84 <HAL_GPIO_Init+0x2e8>)
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	089b      	lsrs	r3, r3, #2
 8005eac:	3302      	adds	r3, #2
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005eb4:	4b39      	ldr	r3, [pc, #228]	@ (8005f9c <HAL_GPIO_Init+0x300>)
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	43db      	mvns	r3, r3
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d003      	beq.n	8005ed8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005ed8:	4a30      	ldr	r2, [pc, #192]	@ (8005f9c <HAL_GPIO_Init+0x300>)
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005ede:	4b2f      	ldr	r3, [pc, #188]	@ (8005f9c <HAL_GPIO_Init+0x300>)
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	43db      	mvns	r3, r3
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	4013      	ands	r3, r2
 8005eec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f02:	4a26      	ldr	r2, [pc, #152]	@ (8005f9c <HAL_GPIO_Init+0x300>)
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005f08:	4b24      	ldr	r3, [pc, #144]	@ (8005f9c <HAL_GPIO_Init+0x300>)
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	43db      	mvns	r3, r3
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	4013      	ands	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d003      	beq.n	8005f2c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005f2c:	4a1b      	ldr	r2, [pc, #108]	@ (8005f9c <HAL_GPIO_Init+0x300>)
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005f32:	4b1a      	ldr	r3, [pc, #104]	@ (8005f9c <HAL_GPIO_Init+0x300>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	43db      	mvns	r3, r3
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	4013      	ands	r3, r2
 8005f40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005f56:	4a11      	ldr	r2, [pc, #68]	@ (8005f9c <HAL_GPIO_Init+0x300>)
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	fa22 f303 	lsr.w	r3, r2, r3
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f47f ae9d 	bne.w	8005cac <HAL_GPIO_Init+0x10>
  }
}
 8005f72:	bf00      	nop
 8005f74:	bf00      	nop
 8005f76:	371c      	adds	r7, #28
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	40021000 	.word	0x40021000
 8005f84:	40010000 	.word	0x40010000
 8005f88:	48000400 	.word	0x48000400
 8005f8c:	48000800 	.word	0x48000800
 8005f90:	48000c00 	.word	0x48000c00
 8005f94:	48001000 	.word	0x48001000
 8005f98:	48001400 	.word	0x48001400
 8005f9c:	40010400 	.word	0x40010400

08005fa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	691a      	ldr	r2, [r3, #16]
 8005fb0:	887b      	ldrh	r3, [r7, #2]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d002      	beq.n	8005fbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	73fb      	strb	r3, [r7, #15]
 8005fbc:	e001      	b.n	8005fc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3714      	adds	r7, #20
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	460b      	mov	r3, r1
 8005fda:	807b      	strh	r3, [r7, #2]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005fe0:	787b      	ldrb	r3, [r7, #1]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005fe6:	887a      	ldrh	r2, [r7, #2]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005fec:	e002      	b.n	8005ff4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005fee:	887a      	ldrh	r2, [r7, #2]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
 8006006:	4603      	mov	r3, r0
 8006008:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800600a:	4b08      	ldr	r3, [pc, #32]	@ (800602c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800600c:	695a      	ldr	r2, [r3, #20]
 800600e:	88fb      	ldrh	r3, [r7, #6]
 8006010:	4013      	ands	r3, r2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d006      	beq.n	8006024 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006016:	4a05      	ldr	r2, [pc, #20]	@ (800602c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006018:	88fb      	ldrh	r3, [r7, #6]
 800601a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800601c:	88fb      	ldrh	r3, [r7, #6]
 800601e:	4618      	mov	r0, r3
 8006020:	f7fc f9bc 	bl	800239c <HAL_GPIO_EXTI_Callback>
  }
}
 8006024:	bf00      	nop
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	40010400 	.word	0x40010400

08006030 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d141      	bne.n	80060c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800603e:	4b4b      	ldr	r3, [pc, #300]	@ (800616c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800604a:	d131      	bne.n	80060b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800604c:	4b47      	ldr	r3, [pc, #284]	@ (800616c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800604e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006052:	4a46      	ldr	r2, [pc, #280]	@ (800616c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006054:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006058:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800605c:	4b43      	ldr	r3, [pc, #268]	@ (800616c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006064:	4a41      	ldr	r2, [pc, #260]	@ (800616c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006066:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800606a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800606c:	4b40      	ldr	r3, [pc, #256]	@ (8006170 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2232      	movs	r2, #50	@ 0x32
 8006072:	fb02 f303 	mul.w	r3, r2, r3
 8006076:	4a3f      	ldr	r2, [pc, #252]	@ (8006174 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006078:	fba2 2303 	umull	r2, r3, r2, r3
 800607c:	0c9b      	lsrs	r3, r3, #18
 800607e:	3301      	adds	r3, #1
 8006080:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006082:	e002      	b.n	800608a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	3b01      	subs	r3, #1
 8006088:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800608a:	4b38      	ldr	r3, [pc, #224]	@ (800616c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006092:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006096:	d102      	bne.n	800609e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1f2      	bne.n	8006084 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800609e:	4b33      	ldr	r3, [pc, #204]	@ (800616c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060aa:	d158      	bne.n	800615e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e057      	b.n	8006160 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80060b0:	4b2e      	ldr	r3, [pc, #184]	@ (800616c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060b6:	4a2d      	ldr	r2, [pc, #180]	@ (800616c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80060c0:	e04d      	b.n	800615e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060c8:	d141      	bne.n	800614e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80060ca:	4b28      	ldr	r3, [pc, #160]	@ (800616c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80060d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060d6:	d131      	bne.n	800613c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80060d8:	4b24      	ldr	r3, [pc, #144]	@ (800616c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060de:	4a23      	ldr	r2, [pc, #140]	@ (800616c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80060e8:	4b20      	ldr	r3, [pc, #128]	@ (800616c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80060f0:	4a1e      	ldr	r2, [pc, #120]	@ (800616c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80060f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80060f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006170 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2232      	movs	r2, #50	@ 0x32
 80060fe:	fb02 f303 	mul.w	r3, r2, r3
 8006102:	4a1c      	ldr	r2, [pc, #112]	@ (8006174 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006104:	fba2 2303 	umull	r2, r3, r2, r3
 8006108:	0c9b      	lsrs	r3, r3, #18
 800610a:	3301      	adds	r3, #1
 800610c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800610e:	e002      	b.n	8006116 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	3b01      	subs	r3, #1
 8006114:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006116:	4b15      	ldr	r3, [pc, #84]	@ (800616c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800611e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006122:	d102      	bne.n	800612a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1f2      	bne.n	8006110 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800612a:	4b10      	ldr	r3, [pc, #64]	@ (800616c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006132:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006136:	d112      	bne.n	800615e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e011      	b.n	8006160 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800613c:	4b0b      	ldr	r3, [pc, #44]	@ (800616c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800613e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006142:	4a0a      	ldr	r2, [pc, #40]	@ (800616c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006144:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006148:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800614c:	e007      	b.n	800615e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800614e:	4b07      	ldr	r3, [pc, #28]	@ (800616c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006156:	4a05      	ldr	r2, [pc, #20]	@ (800616c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006158:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800615c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	40007000 	.word	0x40007000
 8006170:	20000040 	.word	0x20000040
 8006174:	431bde83 	.word	0x431bde83

08006178 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006178:	b480      	push	{r7}
 800617a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800617c:	4b05      	ldr	r3, [pc, #20]	@ (8006194 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	4a04      	ldr	r2, [pc, #16]	@ (8006194 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006182:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006186:	6093      	str	r3, [r2, #8]
}
 8006188:	bf00      	nop
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	40007000 	.word	0x40007000

08006198 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b088      	sub	sp, #32
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e2fe      	b.n	80067a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d075      	beq.n	80062a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061b6:	4b97      	ldr	r3, [pc, #604]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f003 030c 	and.w	r3, r3, #12
 80061be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061c0:	4b94      	ldr	r3, [pc, #592]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f003 0303 	and.w	r3, r3, #3
 80061c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	2b0c      	cmp	r3, #12
 80061ce:	d102      	bne.n	80061d6 <HAL_RCC_OscConfig+0x3e>
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	2b03      	cmp	r3, #3
 80061d4:	d002      	beq.n	80061dc <HAL_RCC_OscConfig+0x44>
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	2b08      	cmp	r3, #8
 80061da:	d10b      	bne.n	80061f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061dc:	4b8d      	ldr	r3, [pc, #564]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d05b      	beq.n	80062a0 <HAL_RCC_OscConfig+0x108>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d157      	bne.n	80062a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e2d9      	b.n	80067a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061fc:	d106      	bne.n	800620c <HAL_RCC_OscConfig+0x74>
 80061fe:	4b85      	ldr	r3, [pc, #532]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a84      	ldr	r2, [pc, #528]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 8006204:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006208:	6013      	str	r3, [r2, #0]
 800620a:	e01d      	b.n	8006248 <HAL_RCC_OscConfig+0xb0>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006214:	d10c      	bne.n	8006230 <HAL_RCC_OscConfig+0x98>
 8006216:	4b7f      	ldr	r3, [pc, #508]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a7e      	ldr	r2, [pc, #504]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 800621c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006220:	6013      	str	r3, [r2, #0]
 8006222:	4b7c      	ldr	r3, [pc, #496]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a7b      	ldr	r2, [pc, #492]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 8006228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800622c:	6013      	str	r3, [r2, #0]
 800622e:	e00b      	b.n	8006248 <HAL_RCC_OscConfig+0xb0>
 8006230:	4b78      	ldr	r3, [pc, #480]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a77      	ldr	r2, [pc, #476]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 8006236:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800623a:	6013      	str	r3, [r2, #0]
 800623c:	4b75      	ldr	r3, [pc, #468]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a74      	ldr	r2, [pc, #464]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 8006242:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006246:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d013      	beq.n	8006278 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006250:	f7fd fab4 	bl	80037bc <HAL_GetTick>
 8006254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006256:	e008      	b.n	800626a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006258:	f7fd fab0 	bl	80037bc <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	2b64      	cmp	r3, #100	@ 0x64
 8006264:	d901      	bls.n	800626a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e29e      	b.n	80067a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800626a:	4b6a      	ldr	r3, [pc, #424]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d0f0      	beq.n	8006258 <HAL_RCC_OscConfig+0xc0>
 8006276:	e014      	b.n	80062a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006278:	f7fd faa0 	bl	80037bc <HAL_GetTick>
 800627c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800627e:	e008      	b.n	8006292 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006280:	f7fd fa9c 	bl	80037bc <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	2b64      	cmp	r3, #100	@ 0x64
 800628c:	d901      	bls.n	8006292 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e28a      	b.n	80067a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006292:	4b60      	ldr	r3, [pc, #384]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1f0      	bne.n	8006280 <HAL_RCC_OscConfig+0xe8>
 800629e:	e000      	b.n	80062a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d075      	beq.n	800639a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062ae:	4b59      	ldr	r3, [pc, #356]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f003 030c 	and.w	r3, r3, #12
 80062b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062b8:	4b56      	ldr	r3, [pc, #344]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	f003 0303 	and.w	r3, r3, #3
 80062c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	2b0c      	cmp	r3, #12
 80062c6:	d102      	bne.n	80062ce <HAL_RCC_OscConfig+0x136>
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d002      	beq.n	80062d4 <HAL_RCC_OscConfig+0x13c>
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	2b04      	cmp	r3, #4
 80062d2:	d11f      	bne.n	8006314 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062d4:	4b4f      	ldr	r3, [pc, #316]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d005      	beq.n	80062ec <HAL_RCC_OscConfig+0x154>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d101      	bne.n	80062ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e25d      	b.n	80067a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062ec:	4b49      	ldr	r3, [pc, #292]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	061b      	lsls	r3, r3, #24
 80062fa:	4946      	ldr	r1, [pc, #280]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006300:	4b45      	ldr	r3, [pc, #276]	@ (8006418 <HAL_RCC_OscConfig+0x280>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4618      	mov	r0, r3
 8006306:	f7fd fa0d 	bl	8003724 <HAL_InitTick>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d043      	beq.n	8006398 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e249      	b.n	80067a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d023      	beq.n	8006364 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800631c:	4b3d      	ldr	r3, [pc, #244]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a3c      	ldr	r2, [pc, #240]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 8006322:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006328:	f7fd fa48 	bl	80037bc <HAL_GetTick>
 800632c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800632e:	e008      	b.n	8006342 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006330:	f7fd fa44 	bl	80037bc <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	2b02      	cmp	r3, #2
 800633c:	d901      	bls.n	8006342 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e232      	b.n	80067a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006342:	4b34      	ldr	r3, [pc, #208]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800634a:	2b00      	cmp	r3, #0
 800634c:	d0f0      	beq.n	8006330 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800634e:	4b31      	ldr	r3, [pc, #196]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	061b      	lsls	r3, r3, #24
 800635c:	492d      	ldr	r1, [pc, #180]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 800635e:	4313      	orrs	r3, r2
 8006360:	604b      	str	r3, [r1, #4]
 8006362:	e01a      	b.n	800639a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006364:	4b2b      	ldr	r3, [pc, #172]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a2a      	ldr	r2, [pc, #168]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 800636a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800636e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006370:	f7fd fa24 	bl	80037bc <HAL_GetTick>
 8006374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006376:	e008      	b.n	800638a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006378:	f7fd fa20 	bl	80037bc <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	2b02      	cmp	r3, #2
 8006384:	d901      	bls.n	800638a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e20e      	b.n	80067a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800638a:	4b22      	ldr	r3, [pc, #136]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1f0      	bne.n	8006378 <HAL_RCC_OscConfig+0x1e0>
 8006396:	e000      	b.n	800639a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006398:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0308 	and.w	r3, r3, #8
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d041      	beq.n	800642a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d01c      	beq.n	80063e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063ae:	4b19      	ldr	r3, [pc, #100]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 80063b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063b4:	4a17      	ldr	r2, [pc, #92]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 80063b6:	f043 0301 	orr.w	r3, r3, #1
 80063ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063be:	f7fd f9fd 	bl	80037bc <HAL_GetTick>
 80063c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80063c4:	e008      	b.n	80063d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063c6:	f7fd f9f9 	bl	80037bc <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d901      	bls.n	80063d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e1e7      	b.n	80067a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80063d8:	4b0e      	ldr	r3, [pc, #56]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 80063da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d0ef      	beq.n	80063c6 <HAL_RCC_OscConfig+0x22e>
 80063e6:	e020      	b.n	800642a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063e8:	4b0a      	ldr	r3, [pc, #40]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 80063ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063ee:	4a09      	ldr	r2, [pc, #36]	@ (8006414 <HAL_RCC_OscConfig+0x27c>)
 80063f0:	f023 0301 	bic.w	r3, r3, #1
 80063f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f8:	f7fd f9e0 	bl	80037bc <HAL_GetTick>
 80063fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80063fe:	e00d      	b.n	800641c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006400:	f7fd f9dc 	bl	80037bc <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b02      	cmp	r3, #2
 800640c:	d906      	bls.n	800641c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e1ca      	b.n	80067a8 <HAL_RCC_OscConfig+0x610>
 8006412:	bf00      	nop
 8006414:	40021000 	.word	0x40021000
 8006418:	20000044 	.word	0x20000044
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800641c:	4b8c      	ldr	r3, [pc, #560]	@ (8006650 <HAL_RCC_OscConfig+0x4b8>)
 800641e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1ea      	bne.n	8006400 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0304 	and.w	r3, r3, #4
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 80a6 	beq.w	8006584 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006438:	2300      	movs	r3, #0
 800643a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800643c:	4b84      	ldr	r3, [pc, #528]	@ (8006650 <HAL_RCC_OscConfig+0x4b8>)
 800643e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <HAL_RCC_OscConfig+0x2b4>
 8006448:	2301      	movs	r3, #1
 800644a:	e000      	b.n	800644e <HAL_RCC_OscConfig+0x2b6>
 800644c:	2300      	movs	r3, #0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00d      	beq.n	800646e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006452:	4b7f      	ldr	r3, [pc, #508]	@ (8006650 <HAL_RCC_OscConfig+0x4b8>)
 8006454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006456:	4a7e      	ldr	r2, [pc, #504]	@ (8006650 <HAL_RCC_OscConfig+0x4b8>)
 8006458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800645c:	6593      	str	r3, [r2, #88]	@ 0x58
 800645e:	4b7c      	ldr	r3, [pc, #496]	@ (8006650 <HAL_RCC_OscConfig+0x4b8>)
 8006460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006466:	60fb      	str	r3, [r7, #12]
 8006468:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800646a:	2301      	movs	r3, #1
 800646c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800646e:	4b79      	ldr	r3, [pc, #484]	@ (8006654 <HAL_RCC_OscConfig+0x4bc>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006476:	2b00      	cmp	r3, #0
 8006478:	d118      	bne.n	80064ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800647a:	4b76      	ldr	r3, [pc, #472]	@ (8006654 <HAL_RCC_OscConfig+0x4bc>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a75      	ldr	r2, [pc, #468]	@ (8006654 <HAL_RCC_OscConfig+0x4bc>)
 8006480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006486:	f7fd f999 	bl	80037bc <HAL_GetTick>
 800648a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800648c:	e008      	b.n	80064a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800648e:	f7fd f995 	bl	80037bc <HAL_GetTick>
 8006492:	4602      	mov	r2, r0
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	2b02      	cmp	r3, #2
 800649a:	d901      	bls.n	80064a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e183      	b.n	80067a8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064a0:	4b6c      	ldr	r3, [pc, #432]	@ (8006654 <HAL_RCC_OscConfig+0x4bc>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d0f0      	beq.n	800648e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d108      	bne.n	80064c6 <HAL_RCC_OscConfig+0x32e>
 80064b4:	4b66      	ldr	r3, [pc, #408]	@ (8006650 <HAL_RCC_OscConfig+0x4b8>)
 80064b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ba:	4a65      	ldr	r2, [pc, #404]	@ (8006650 <HAL_RCC_OscConfig+0x4b8>)
 80064bc:	f043 0301 	orr.w	r3, r3, #1
 80064c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80064c4:	e024      	b.n	8006510 <HAL_RCC_OscConfig+0x378>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	2b05      	cmp	r3, #5
 80064cc:	d110      	bne.n	80064f0 <HAL_RCC_OscConfig+0x358>
 80064ce:	4b60      	ldr	r3, [pc, #384]	@ (8006650 <HAL_RCC_OscConfig+0x4b8>)
 80064d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064d4:	4a5e      	ldr	r2, [pc, #376]	@ (8006650 <HAL_RCC_OscConfig+0x4b8>)
 80064d6:	f043 0304 	orr.w	r3, r3, #4
 80064da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80064de:	4b5c      	ldr	r3, [pc, #368]	@ (8006650 <HAL_RCC_OscConfig+0x4b8>)
 80064e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064e4:	4a5a      	ldr	r2, [pc, #360]	@ (8006650 <HAL_RCC_OscConfig+0x4b8>)
 80064e6:	f043 0301 	orr.w	r3, r3, #1
 80064ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80064ee:	e00f      	b.n	8006510 <HAL_RCC_OscConfig+0x378>
 80064f0:	4b57      	ldr	r3, [pc, #348]	@ (8006650 <HAL_RCC_OscConfig+0x4b8>)
 80064f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064f6:	4a56      	ldr	r2, [pc, #344]	@ (8006650 <HAL_RCC_OscConfig+0x4b8>)
 80064f8:	f023 0301 	bic.w	r3, r3, #1
 80064fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006500:	4b53      	ldr	r3, [pc, #332]	@ (8006650 <HAL_RCC_OscConfig+0x4b8>)
 8006502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006506:	4a52      	ldr	r2, [pc, #328]	@ (8006650 <HAL_RCC_OscConfig+0x4b8>)
 8006508:	f023 0304 	bic.w	r3, r3, #4
 800650c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d016      	beq.n	8006546 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006518:	f7fd f950 	bl	80037bc <HAL_GetTick>
 800651c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800651e:	e00a      	b.n	8006536 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006520:	f7fd f94c 	bl	80037bc <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800652e:	4293      	cmp	r3, r2
 8006530:	d901      	bls.n	8006536 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e138      	b.n	80067a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006536:	4b46      	ldr	r3, [pc, #280]	@ (8006650 <HAL_RCC_OscConfig+0x4b8>)
 8006538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800653c:	f003 0302 	and.w	r3, r3, #2
 8006540:	2b00      	cmp	r3, #0
 8006542:	d0ed      	beq.n	8006520 <HAL_RCC_OscConfig+0x388>
 8006544:	e015      	b.n	8006572 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006546:	f7fd f939 	bl	80037bc <HAL_GetTick>
 800654a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800654c:	e00a      	b.n	8006564 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800654e:	f7fd f935 	bl	80037bc <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	f241 3288 	movw	r2, #5000	@ 0x1388
 800655c:	4293      	cmp	r3, r2
 800655e:	d901      	bls.n	8006564 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e121      	b.n	80067a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006564:	4b3a      	ldr	r3, [pc, #232]	@ (8006650 <HAL_RCC_OscConfig+0x4b8>)
 8006566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1ed      	bne.n	800654e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006572:	7ffb      	ldrb	r3, [r7, #31]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d105      	bne.n	8006584 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006578:	4b35      	ldr	r3, [pc, #212]	@ (8006650 <HAL_RCC_OscConfig+0x4b8>)
 800657a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800657c:	4a34      	ldr	r2, [pc, #208]	@ (8006650 <HAL_RCC_OscConfig+0x4b8>)
 800657e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006582:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0320 	and.w	r3, r3, #32
 800658c:	2b00      	cmp	r3, #0
 800658e:	d03c      	beq.n	800660a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d01c      	beq.n	80065d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006598:	4b2d      	ldr	r3, [pc, #180]	@ (8006650 <HAL_RCC_OscConfig+0x4b8>)
 800659a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800659e:	4a2c      	ldr	r2, [pc, #176]	@ (8006650 <HAL_RCC_OscConfig+0x4b8>)
 80065a0:	f043 0301 	orr.w	r3, r3, #1
 80065a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065a8:	f7fd f908 	bl	80037bc <HAL_GetTick>
 80065ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80065ae:	e008      	b.n	80065c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065b0:	f7fd f904 	bl	80037bc <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e0f2      	b.n	80067a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80065c2:	4b23      	ldr	r3, [pc, #140]	@ (8006650 <HAL_RCC_OscConfig+0x4b8>)
 80065c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065c8:	f003 0302 	and.w	r3, r3, #2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d0ef      	beq.n	80065b0 <HAL_RCC_OscConfig+0x418>
 80065d0:	e01b      	b.n	800660a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80065d2:	4b1f      	ldr	r3, [pc, #124]	@ (8006650 <HAL_RCC_OscConfig+0x4b8>)
 80065d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006650 <HAL_RCC_OscConfig+0x4b8>)
 80065da:	f023 0301 	bic.w	r3, r3, #1
 80065de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065e2:	f7fd f8eb 	bl	80037bc <HAL_GetTick>
 80065e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80065e8:	e008      	b.n	80065fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065ea:	f7fd f8e7 	bl	80037bc <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d901      	bls.n	80065fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e0d5      	b.n	80067a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80065fc:	4b14      	ldr	r3, [pc, #80]	@ (8006650 <HAL_RCC_OscConfig+0x4b8>)
 80065fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1ef      	bne.n	80065ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	2b00      	cmp	r3, #0
 8006610:	f000 80c9 	beq.w	80067a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006614:	4b0e      	ldr	r3, [pc, #56]	@ (8006650 <HAL_RCC_OscConfig+0x4b8>)
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f003 030c 	and.w	r3, r3, #12
 800661c:	2b0c      	cmp	r3, #12
 800661e:	f000 8083 	beq.w	8006728 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	69db      	ldr	r3, [r3, #28]
 8006626:	2b02      	cmp	r3, #2
 8006628:	d15e      	bne.n	80066e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800662a:	4b09      	ldr	r3, [pc, #36]	@ (8006650 <HAL_RCC_OscConfig+0x4b8>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a08      	ldr	r2, [pc, #32]	@ (8006650 <HAL_RCC_OscConfig+0x4b8>)
 8006630:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006636:	f7fd f8c1 	bl	80037bc <HAL_GetTick>
 800663a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800663c:	e00c      	b.n	8006658 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800663e:	f7fd f8bd 	bl	80037bc <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	2b02      	cmp	r3, #2
 800664a:	d905      	bls.n	8006658 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e0ab      	b.n	80067a8 <HAL_RCC_OscConfig+0x610>
 8006650:	40021000 	.word	0x40021000
 8006654:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006658:	4b55      	ldr	r3, [pc, #340]	@ (80067b0 <HAL_RCC_OscConfig+0x618>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1ec      	bne.n	800663e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006664:	4b52      	ldr	r3, [pc, #328]	@ (80067b0 <HAL_RCC_OscConfig+0x618>)
 8006666:	68da      	ldr	r2, [r3, #12]
 8006668:	4b52      	ldr	r3, [pc, #328]	@ (80067b4 <HAL_RCC_OscConfig+0x61c>)
 800666a:	4013      	ands	r3, r2
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	6a11      	ldr	r1, [r2, #32]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006674:	3a01      	subs	r2, #1
 8006676:	0112      	lsls	r2, r2, #4
 8006678:	4311      	orrs	r1, r2
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800667e:	0212      	lsls	r2, r2, #8
 8006680:	4311      	orrs	r1, r2
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006686:	0852      	lsrs	r2, r2, #1
 8006688:	3a01      	subs	r2, #1
 800668a:	0552      	lsls	r2, r2, #21
 800668c:	4311      	orrs	r1, r2
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006692:	0852      	lsrs	r2, r2, #1
 8006694:	3a01      	subs	r2, #1
 8006696:	0652      	lsls	r2, r2, #25
 8006698:	4311      	orrs	r1, r2
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800669e:	06d2      	lsls	r2, r2, #27
 80066a0:	430a      	orrs	r2, r1
 80066a2:	4943      	ldr	r1, [pc, #268]	@ (80067b0 <HAL_RCC_OscConfig+0x618>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066a8:	4b41      	ldr	r3, [pc, #260]	@ (80067b0 <HAL_RCC_OscConfig+0x618>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a40      	ldr	r2, [pc, #256]	@ (80067b0 <HAL_RCC_OscConfig+0x618>)
 80066ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80066b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80066b4:	4b3e      	ldr	r3, [pc, #248]	@ (80067b0 <HAL_RCC_OscConfig+0x618>)
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	4a3d      	ldr	r2, [pc, #244]	@ (80067b0 <HAL_RCC_OscConfig+0x618>)
 80066ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80066be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c0:	f7fd f87c 	bl	80037bc <HAL_GetTick>
 80066c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066c6:	e008      	b.n	80066da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066c8:	f7fd f878 	bl	80037bc <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d901      	bls.n	80066da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e066      	b.n	80067a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066da:	4b35      	ldr	r3, [pc, #212]	@ (80067b0 <HAL_RCC_OscConfig+0x618>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d0f0      	beq.n	80066c8 <HAL_RCC_OscConfig+0x530>
 80066e6:	e05e      	b.n	80067a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066e8:	4b31      	ldr	r3, [pc, #196]	@ (80067b0 <HAL_RCC_OscConfig+0x618>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a30      	ldr	r2, [pc, #192]	@ (80067b0 <HAL_RCC_OscConfig+0x618>)
 80066ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f4:	f7fd f862 	bl	80037bc <HAL_GetTick>
 80066f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066fa:	e008      	b.n	800670e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066fc:	f7fd f85e 	bl	80037bc <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	2b02      	cmp	r3, #2
 8006708:	d901      	bls.n	800670e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e04c      	b.n	80067a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800670e:	4b28      	ldr	r3, [pc, #160]	@ (80067b0 <HAL_RCC_OscConfig+0x618>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1f0      	bne.n	80066fc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800671a:	4b25      	ldr	r3, [pc, #148]	@ (80067b0 <HAL_RCC_OscConfig+0x618>)
 800671c:	68da      	ldr	r2, [r3, #12]
 800671e:	4924      	ldr	r1, [pc, #144]	@ (80067b0 <HAL_RCC_OscConfig+0x618>)
 8006720:	4b25      	ldr	r3, [pc, #148]	@ (80067b8 <HAL_RCC_OscConfig+0x620>)
 8006722:	4013      	ands	r3, r2
 8006724:	60cb      	str	r3, [r1, #12]
 8006726:	e03e      	b.n	80067a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	69db      	ldr	r3, [r3, #28]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d101      	bne.n	8006734 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e039      	b.n	80067a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006734:	4b1e      	ldr	r3, [pc, #120]	@ (80067b0 <HAL_RCC_OscConfig+0x618>)
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f003 0203 	and.w	r2, r3, #3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a1b      	ldr	r3, [r3, #32]
 8006744:	429a      	cmp	r2, r3
 8006746:	d12c      	bne.n	80067a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006752:	3b01      	subs	r3, #1
 8006754:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006756:	429a      	cmp	r2, r3
 8006758:	d123      	bne.n	80067a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006764:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006766:	429a      	cmp	r2, r3
 8006768:	d11b      	bne.n	80067a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006774:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006776:	429a      	cmp	r2, r3
 8006778:	d113      	bne.n	80067a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006784:	085b      	lsrs	r3, r3, #1
 8006786:	3b01      	subs	r3, #1
 8006788:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800678a:	429a      	cmp	r2, r3
 800678c:	d109      	bne.n	80067a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006798:	085b      	lsrs	r3, r3, #1
 800679a:	3b01      	subs	r3, #1
 800679c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800679e:	429a      	cmp	r2, r3
 80067a0:	d001      	beq.n	80067a6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e000      	b.n	80067a8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3720      	adds	r7, #32
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	40021000 	.word	0x40021000
 80067b4:	019f800c 	.word	0x019f800c
 80067b8:	feeefffc 	.word	0xfeeefffc

080067bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b086      	sub	sp, #24
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80067c6:	2300      	movs	r3, #0
 80067c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e11e      	b.n	8006a12 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067d4:	4b91      	ldr	r3, [pc, #580]	@ (8006a1c <HAL_RCC_ClockConfig+0x260>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 030f 	and.w	r3, r3, #15
 80067dc:	683a      	ldr	r2, [r7, #0]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d910      	bls.n	8006804 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067e2:	4b8e      	ldr	r3, [pc, #568]	@ (8006a1c <HAL_RCC_ClockConfig+0x260>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f023 020f 	bic.w	r2, r3, #15
 80067ea:	498c      	ldr	r1, [pc, #560]	@ (8006a1c <HAL_RCC_ClockConfig+0x260>)
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067f2:	4b8a      	ldr	r3, [pc, #552]	@ (8006a1c <HAL_RCC_ClockConfig+0x260>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 030f 	and.w	r3, r3, #15
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d001      	beq.n	8006804 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e106      	b.n	8006a12 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	2b00      	cmp	r3, #0
 800680e:	d073      	beq.n	80068f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	2b03      	cmp	r3, #3
 8006816:	d129      	bne.n	800686c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006818:	4b81      	ldr	r3, [pc, #516]	@ (8006a20 <HAL_RCC_ClockConfig+0x264>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e0f4      	b.n	8006a12 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006828:	f000 f99e 	bl	8006b68 <RCC_GetSysClockFreqFromPLLSource>
 800682c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	4a7c      	ldr	r2, [pc, #496]	@ (8006a24 <HAL_RCC_ClockConfig+0x268>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d93f      	bls.n	80068b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006836:	4b7a      	ldr	r3, [pc, #488]	@ (8006a20 <HAL_RCC_ClockConfig+0x264>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d009      	beq.n	8006856 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800684a:	2b00      	cmp	r3, #0
 800684c:	d033      	beq.n	80068b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006852:	2b00      	cmp	r3, #0
 8006854:	d12f      	bne.n	80068b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006856:	4b72      	ldr	r3, [pc, #456]	@ (8006a20 <HAL_RCC_ClockConfig+0x264>)
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800685e:	4a70      	ldr	r2, [pc, #448]	@ (8006a20 <HAL_RCC_ClockConfig+0x264>)
 8006860:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006864:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006866:	2380      	movs	r3, #128	@ 0x80
 8006868:	617b      	str	r3, [r7, #20]
 800686a:	e024      	b.n	80068b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	2b02      	cmp	r3, #2
 8006872:	d107      	bne.n	8006884 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006874:	4b6a      	ldr	r3, [pc, #424]	@ (8006a20 <HAL_RCC_ClockConfig+0x264>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d109      	bne.n	8006894 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e0c6      	b.n	8006a12 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006884:	4b66      	ldr	r3, [pc, #408]	@ (8006a20 <HAL_RCC_ClockConfig+0x264>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e0be      	b.n	8006a12 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006894:	f000 f8ce 	bl	8006a34 <HAL_RCC_GetSysClockFreq>
 8006898:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	4a61      	ldr	r2, [pc, #388]	@ (8006a24 <HAL_RCC_ClockConfig+0x268>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d909      	bls.n	80068b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80068a2:	4b5f      	ldr	r3, [pc, #380]	@ (8006a20 <HAL_RCC_ClockConfig+0x264>)
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068aa:	4a5d      	ldr	r2, [pc, #372]	@ (8006a20 <HAL_RCC_ClockConfig+0x264>)
 80068ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80068b2:	2380      	movs	r3, #128	@ 0x80
 80068b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80068b6:	4b5a      	ldr	r3, [pc, #360]	@ (8006a20 <HAL_RCC_ClockConfig+0x264>)
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f023 0203 	bic.w	r2, r3, #3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	4957      	ldr	r1, [pc, #348]	@ (8006a20 <HAL_RCC_ClockConfig+0x264>)
 80068c4:	4313      	orrs	r3, r2
 80068c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068c8:	f7fc ff78 	bl	80037bc <HAL_GetTick>
 80068cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068ce:	e00a      	b.n	80068e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068d0:	f7fc ff74 	bl	80037bc <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068de:	4293      	cmp	r3, r2
 80068e0:	d901      	bls.n	80068e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e095      	b.n	8006a12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068e6:	4b4e      	ldr	r3, [pc, #312]	@ (8006a20 <HAL_RCC_ClockConfig+0x264>)
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f003 020c 	and.w	r2, r3, #12
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d1eb      	bne.n	80068d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0302 	and.w	r3, r3, #2
 8006900:	2b00      	cmp	r3, #0
 8006902:	d023      	beq.n	800694c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0304 	and.w	r3, r3, #4
 800690c:	2b00      	cmp	r3, #0
 800690e:	d005      	beq.n	800691c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006910:	4b43      	ldr	r3, [pc, #268]	@ (8006a20 <HAL_RCC_ClockConfig+0x264>)
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	4a42      	ldr	r2, [pc, #264]	@ (8006a20 <HAL_RCC_ClockConfig+0x264>)
 8006916:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800691a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0308 	and.w	r3, r3, #8
 8006924:	2b00      	cmp	r3, #0
 8006926:	d007      	beq.n	8006938 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006928:	4b3d      	ldr	r3, [pc, #244]	@ (8006a20 <HAL_RCC_ClockConfig+0x264>)
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006930:	4a3b      	ldr	r2, [pc, #236]	@ (8006a20 <HAL_RCC_ClockConfig+0x264>)
 8006932:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006936:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006938:	4b39      	ldr	r3, [pc, #228]	@ (8006a20 <HAL_RCC_ClockConfig+0x264>)
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	4936      	ldr	r1, [pc, #216]	@ (8006a20 <HAL_RCC_ClockConfig+0x264>)
 8006946:	4313      	orrs	r3, r2
 8006948:	608b      	str	r3, [r1, #8]
 800694a:	e008      	b.n	800695e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	2b80      	cmp	r3, #128	@ 0x80
 8006950:	d105      	bne.n	800695e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006952:	4b33      	ldr	r3, [pc, #204]	@ (8006a20 <HAL_RCC_ClockConfig+0x264>)
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	4a32      	ldr	r2, [pc, #200]	@ (8006a20 <HAL_RCC_ClockConfig+0x264>)
 8006958:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800695c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800695e:	4b2f      	ldr	r3, [pc, #188]	@ (8006a1c <HAL_RCC_ClockConfig+0x260>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 030f 	and.w	r3, r3, #15
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	429a      	cmp	r2, r3
 800696a:	d21d      	bcs.n	80069a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800696c:	4b2b      	ldr	r3, [pc, #172]	@ (8006a1c <HAL_RCC_ClockConfig+0x260>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f023 020f 	bic.w	r2, r3, #15
 8006974:	4929      	ldr	r1, [pc, #164]	@ (8006a1c <HAL_RCC_ClockConfig+0x260>)
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	4313      	orrs	r3, r2
 800697a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800697c:	f7fc ff1e 	bl	80037bc <HAL_GetTick>
 8006980:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006982:	e00a      	b.n	800699a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006984:	f7fc ff1a 	bl	80037bc <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006992:	4293      	cmp	r3, r2
 8006994:	d901      	bls.n	800699a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e03b      	b.n	8006a12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800699a:	4b20      	ldr	r3, [pc, #128]	@ (8006a1c <HAL_RCC_ClockConfig+0x260>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 030f 	and.w	r3, r3, #15
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d1ed      	bne.n	8006984 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0304 	and.w	r3, r3, #4
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d008      	beq.n	80069c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069b4:	4b1a      	ldr	r3, [pc, #104]	@ (8006a20 <HAL_RCC_ClockConfig+0x264>)
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	4917      	ldr	r1, [pc, #92]	@ (8006a20 <HAL_RCC_ClockConfig+0x264>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0308 	and.w	r3, r3, #8
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d009      	beq.n	80069e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069d2:	4b13      	ldr	r3, [pc, #76]	@ (8006a20 <HAL_RCC_ClockConfig+0x264>)
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	00db      	lsls	r3, r3, #3
 80069e0:	490f      	ldr	r1, [pc, #60]	@ (8006a20 <HAL_RCC_ClockConfig+0x264>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80069e6:	f000 f825 	bl	8006a34 <HAL_RCC_GetSysClockFreq>
 80069ea:	4602      	mov	r2, r0
 80069ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006a20 <HAL_RCC_ClockConfig+0x264>)
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	091b      	lsrs	r3, r3, #4
 80069f2:	f003 030f 	and.w	r3, r3, #15
 80069f6:	490c      	ldr	r1, [pc, #48]	@ (8006a28 <HAL_RCC_ClockConfig+0x26c>)
 80069f8:	5ccb      	ldrb	r3, [r1, r3]
 80069fa:	f003 031f 	and.w	r3, r3, #31
 80069fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006a02:	4a0a      	ldr	r2, [pc, #40]	@ (8006a2c <HAL_RCC_ClockConfig+0x270>)
 8006a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006a06:	4b0a      	ldr	r3, [pc, #40]	@ (8006a30 <HAL_RCC_ClockConfig+0x274>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fc fe8a 	bl	8003724 <HAL_InitTick>
 8006a10:	4603      	mov	r3, r0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3718      	adds	r7, #24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	40022000 	.word	0x40022000
 8006a20:	40021000 	.word	0x40021000
 8006a24:	04c4b400 	.word	0x04c4b400
 8006a28:	0800b030 	.word	0x0800b030
 8006a2c:	20000040 	.word	0x20000040
 8006a30:	20000044 	.word	0x20000044

08006a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b087      	sub	sp, #28
 8006a38:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006a3a:	4b2c      	ldr	r3, [pc, #176]	@ (8006aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f003 030c 	and.w	r3, r3, #12
 8006a42:	2b04      	cmp	r3, #4
 8006a44:	d102      	bne.n	8006a4c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006a46:	4b2a      	ldr	r3, [pc, #168]	@ (8006af0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006a48:	613b      	str	r3, [r7, #16]
 8006a4a:	e047      	b.n	8006adc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006a4c:	4b27      	ldr	r3, [pc, #156]	@ (8006aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f003 030c 	and.w	r3, r3, #12
 8006a54:	2b08      	cmp	r3, #8
 8006a56:	d102      	bne.n	8006a5e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006a58:	4b26      	ldr	r3, [pc, #152]	@ (8006af4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006a5a:	613b      	str	r3, [r7, #16]
 8006a5c:	e03e      	b.n	8006adc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006a5e:	4b23      	ldr	r3, [pc, #140]	@ (8006aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f003 030c 	and.w	r3, r3, #12
 8006a66:	2b0c      	cmp	r3, #12
 8006a68:	d136      	bne.n	8006ad8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006a6a:	4b20      	ldr	r3, [pc, #128]	@ (8006aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	f003 0303 	and.w	r3, r3, #3
 8006a72:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006a74:	4b1d      	ldr	r3, [pc, #116]	@ (8006aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	091b      	lsrs	r3, r3, #4
 8006a7a:	f003 030f 	and.w	r3, r3, #15
 8006a7e:	3301      	adds	r3, #1
 8006a80:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2b03      	cmp	r3, #3
 8006a86:	d10c      	bne.n	8006aa2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006a88:	4a1a      	ldr	r2, [pc, #104]	@ (8006af4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a90:	4a16      	ldr	r2, [pc, #88]	@ (8006aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a92:	68d2      	ldr	r2, [r2, #12]
 8006a94:	0a12      	lsrs	r2, r2, #8
 8006a96:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006a9a:	fb02 f303 	mul.w	r3, r2, r3
 8006a9e:	617b      	str	r3, [r7, #20]
      break;
 8006aa0:	e00c      	b.n	8006abc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006aa2:	4a13      	ldr	r2, [pc, #76]	@ (8006af0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aaa:	4a10      	ldr	r2, [pc, #64]	@ (8006aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006aac:	68d2      	ldr	r2, [r2, #12]
 8006aae:	0a12      	lsrs	r2, r2, #8
 8006ab0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ab4:	fb02 f303 	mul.w	r3, r2, r3
 8006ab8:	617b      	str	r3, [r7, #20]
      break;
 8006aba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006abc:	4b0b      	ldr	r3, [pc, #44]	@ (8006aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	0e5b      	lsrs	r3, r3, #25
 8006ac2:	f003 0303 	and.w	r3, r3, #3
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	005b      	lsls	r3, r3, #1
 8006aca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad4:	613b      	str	r3, [r7, #16]
 8006ad6:	e001      	b.n	8006adc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006adc:	693b      	ldr	r3, [r7, #16]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	371c      	adds	r7, #28
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	40021000 	.word	0x40021000
 8006af0:	00f42400 	.word	0x00f42400
 8006af4:	016e3600 	.word	0x016e3600

08006af8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006af8:	b480      	push	{r7}
 8006afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006afc:	4b03      	ldr	r3, [pc, #12]	@ (8006b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8006afe:	681b      	ldr	r3, [r3, #0]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	20000040 	.word	0x20000040

08006b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006b14:	f7ff fff0 	bl	8006af8 <HAL_RCC_GetHCLKFreq>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	4b06      	ldr	r3, [pc, #24]	@ (8006b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	0a1b      	lsrs	r3, r3, #8
 8006b20:	f003 0307 	and.w	r3, r3, #7
 8006b24:	4904      	ldr	r1, [pc, #16]	@ (8006b38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b26:	5ccb      	ldrb	r3, [r1, r3]
 8006b28:	f003 031f 	and.w	r3, r3, #31
 8006b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	40021000 	.word	0x40021000
 8006b38:	0800b040 	.word	0x0800b040

08006b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006b40:	f7ff ffda 	bl	8006af8 <HAL_RCC_GetHCLKFreq>
 8006b44:	4602      	mov	r2, r0
 8006b46:	4b06      	ldr	r3, [pc, #24]	@ (8006b60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	0adb      	lsrs	r3, r3, #11
 8006b4c:	f003 0307 	and.w	r3, r3, #7
 8006b50:	4904      	ldr	r1, [pc, #16]	@ (8006b64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006b52:	5ccb      	ldrb	r3, [r1, r3]
 8006b54:	f003 031f 	and.w	r3, r3, #31
 8006b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	40021000 	.word	0x40021000
 8006b64:	0800b040 	.word	0x0800b040

08006b68 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8006be8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	f003 0303 	and.w	r3, r3, #3
 8006b76:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006b78:	4b1b      	ldr	r3, [pc, #108]	@ (8006be8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	091b      	lsrs	r3, r3, #4
 8006b7e:	f003 030f 	and.w	r3, r3, #15
 8006b82:	3301      	adds	r3, #1
 8006b84:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	2b03      	cmp	r3, #3
 8006b8a:	d10c      	bne.n	8006ba6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b8c:	4a17      	ldr	r2, [pc, #92]	@ (8006bec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b94:	4a14      	ldr	r2, [pc, #80]	@ (8006be8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006b96:	68d2      	ldr	r2, [r2, #12]
 8006b98:	0a12      	lsrs	r2, r2, #8
 8006b9a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006b9e:	fb02 f303 	mul.w	r3, r2, r3
 8006ba2:	617b      	str	r3, [r7, #20]
    break;
 8006ba4:	e00c      	b.n	8006bc0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ba6:	4a12      	ldr	r2, [pc, #72]	@ (8006bf0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bae:	4a0e      	ldr	r2, [pc, #56]	@ (8006be8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006bb0:	68d2      	ldr	r2, [r2, #12]
 8006bb2:	0a12      	lsrs	r2, r2, #8
 8006bb4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006bb8:	fb02 f303 	mul.w	r3, r2, r3
 8006bbc:	617b      	str	r3, [r7, #20]
    break;
 8006bbe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006bc0:	4b09      	ldr	r3, [pc, #36]	@ (8006be8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	0e5b      	lsrs	r3, r3, #25
 8006bc6:	f003 0303 	and.w	r3, r3, #3
 8006bca:	3301      	adds	r3, #1
 8006bcc:	005b      	lsls	r3, r3, #1
 8006bce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006bda:	687b      	ldr	r3, [r7, #4]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	371c      	adds	r7, #28
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	40021000 	.word	0x40021000
 8006bec:	016e3600 	.word	0x016e3600
 8006bf0:	00f42400 	.word	0x00f42400

08006bf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c00:	2300      	movs	r3, #0
 8006c02:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f000 8098 	beq.w	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c12:	2300      	movs	r3, #0
 8006c14:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c16:	4b43      	ldr	r3, [pc, #268]	@ (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10d      	bne.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c22:	4b40      	ldr	r3, [pc, #256]	@ (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c26:	4a3f      	ldr	r2, [pc, #252]	@ (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c2e:	4b3d      	ldr	r3, [pc, #244]	@ (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c36:	60bb      	str	r3, [r7, #8]
 8006c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c3e:	4b3a      	ldr	r3, [pc, #232]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a39      	ldr	r2, [pc, #228]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006c44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c4a:	f7fc fdb7 	bl	80037bc <HAL_GetTick>
 8006c4e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c50:	e009      	b.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c52:	f7fc fdb3 	bl	80037bc <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d902      	bls.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	74fb      	strb	r3, [r7, #19]
        break;
 8006c64:	e005      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c66:	4b30      	ldr	r3, [pc, #192]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d0ef      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006c72:	7cfb      	ldrb	r3, [r7, #19]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d159      	bne.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006c78:	4b2a      	ldr	r3, [pc, #168]	@ (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c82:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d01e      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d019      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006c94:	4b23      	ldr	r3, [pc, #140]	@ (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ca0:	4b20      	ldr	r3, [pc, #128]	@ (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cb6:	4a1b      	ldr	r2, [pc, #108]	@ (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006cc0:	4a18      	ldr	r2, [pc, #96]	@ (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d016      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cd2:	f7fc fd73 	bl	80037bc <HAL_GetTick>
 8006cd6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cd8:	e00b      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cda:	f7fc fd6f 	bl	80037bc <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d902      	bls.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	74fb      	strb	r3, [r7, #19]
            break;
 8006cf0:	e006      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cf8:	f003 0302 	and.w	r3, r3, #2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d0ec      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006d00:	7cfb      	ldrb	r3, [r7, #19]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10b      	bne.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d06:	4b07      	ldr	r3, [pc, #28]	@ (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d14:	4903      	ldr	r1, [pc, #12]	@ (8006d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006d1c:	e008      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d1e:	7cfb      	ldrb	r3, [r7, #19]
 8006d20:	74bb      	strb	r3, [r7, #18]
 8006d22:	e005      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006d24:	40021000 	.word	0x40021000
 8006d28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d2c:	7cfb      	ldrb	r3, [r7, #19]
 8006d2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d30:	7c7b      	ldrb	r3, [r7, #17]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d105      	bne.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d36:	4ba7      	ldr	r3, [pc, #668]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d3a:	4aa6      	ldr	r2, [pc, #664]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d40:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00a      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d4e:	4ba1      	ldr	r3, [pc, #644]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d54:	f023 0203 	bic.w	r2, r3, #3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	499d      	ldr	r1, [pc, #628]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0302 	and.w	r3, r3, #2
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00a      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d70:	4b98      	ldr	r3, [pc, #608]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d76:	f023 020c 	bic.w	r2, r3, #12
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	4995      	ldr	r1, [pc, #596]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d80:	4313      	orrs	r3, r2
 8006d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0304 	and.w	r3, r3, #4
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00a      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006d92:	4b90      	ldr	r3, [pc, #576]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d98:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	498c      	ldr	r1, [pc, #560]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0308 	and.w	r3, r3, #8
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00a      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006db4:	4b87      	ldr	r3, [pc, #540]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	4984      	ldr	r1, [pc, #528]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0310 	and.w	r3, r3, #16
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00a      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006dd6:	4b7f      	ldr	r3, [pc, #508]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ddc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	695b      	ldr	r3, [r3, #20]
 8006de4:	497b      	ldr	r1, [pc, #492]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006de6:	4313      	orrs	r3, r2
 8006de8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0320 	and.w	r3, r3, #32
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00a      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006df8:	4b76      	ldr	r3, [pc, #472]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dfe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	4973      	ldr	r1, [pc, #460]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00a      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e1a:	4b6e      	ldr	r3, [pc, #440]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e20:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	69db      	ldr	r3, [r3, #28]
 8006e28:	496a      	ldr	r1, [pc, #424]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00a      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006e3c:	4b65      	ldr	r3, [pc, #404]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e42:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	4962      	ldr	r1, [pc, #392]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00a      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006e5e:	4b5d      	ldr	r3, [pc, #372]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e64:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6c:	4959      	ldr	r1, [pc, #356]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00a      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e80:	4b54      	ldr	r3, [pc, #336]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e86:	f023 0203 	bic.w	r2, r3, #3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e8e:	4951      	ldr	r1, [pc, #324]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e90:	4313      	orrs	r3, r2
 8006e92:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00a      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ea2:	4b4c      	ldr	r3, [pc, #304]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ea8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb0:	4948      	ldr	r1, [pc, #288]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d015      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ec4:	4b43      	ldr	r3, [pc, #268]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ed2:	4940      	ldr	r1, [pc, #256]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ede:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ee2:	d105      	bne.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ee4:	4b3b      	ldr	r3, [pc, #236]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	4a3a      	ldr	r2, [pc, #232]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006eee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d015      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006efc:	4b35      	ldr	r3, [pc, #212]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f02:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f0a:	4932      	ldr	r1, [pc, #200]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f1a:	d105      	bne.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	4a2c      	ldr	r2, [pc, #176]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f26:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d015      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006f34:	4b27      	ldr	r3, [pc, #156]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f3a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f42:	4924      	ldr	r1, [pc, #144]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f44:	4313      	orrs	r3, r2
 8006f46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f52:	d105      	bne.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f54:	4b1f      	ldr	r3, [pc, #124]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	4a1e      	ldr	r2, [pc, #120]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f5e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d015      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f6c:	4b19      	ldr	r3, [pc, #100]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f72:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f7a:	4916      	ldr	r1, [pc, #88]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f8a:	d105      	bne.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f8c:	4b11      	ldr	r3, [pc, #68]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	4a10      	ldr	r2, [pc, #64]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f96:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d019      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006faa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fb2:	4908      	ldr	r1, [pc, #32]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fc2:	d109      	bne.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fc4:	4b03      	ldr	r3, [pc, #12]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	4a02      	ldr	r2, [pc, #8]	@ (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fce:	60d3      	str	r3, [r2, #12]
 8006fd0:	e002      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006fd2:	bf00      	nop
 8006fd4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d015      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006fe4:	4b29      	ldr	r3, [pc, #164]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ff2:	4926      	ldr	r1, [pc, #152]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ffe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007002:	d105      	bne.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007004:	4b21      	ldr	r3, [pc, #132]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	4a20      	ldr	r2, [pc, #128]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800700a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800700e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d015      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800701c:	4b1b      	ldr	r3, [pc, #108]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800701e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007022:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800702a:	4918      	ldr	r1, [pc, #96]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800702c:	4313      	orrs	r3, r2
 800702e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800703a:	d105      	bne.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800703c:	4b13      	ldr	r3, [pc, #76]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	4a12      	ldr	r2, [pc, #72]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007042:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007046:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d015      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007054:	4b0d      	ldr	r3, [pc, #52]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007056:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800705a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007062:	490a      	ldr	r1, [pc, #40]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007064:	4313      	orrs	r3, r2
 8007066:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800706e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007072:	d105      	bne.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007074:	4b05      	ldr	r3, [pc, #20]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	4a04      	ldr	r2, [pc, #16]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800707a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800707e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007080:	7cbb      	ldrb	r3, [r7, #18]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3718      	adds	r7, #24
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	40021000 	.word	0x40021000

08007090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d101      	bne.n	80070a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e054      	b.n	800714c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d111      	bne.n	80070d2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f001 feec 	bl	8008e94 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d102      	bne.n	80070ca <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a23      	ldr	r2, [pc, #140]	@ (8007154 <HAL_TIM_Base_Init+0xc4>)
 80070c8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2202      	movs	r2, #2
 80070d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	3304      	adds	r3, #4
 80070e2:	4619      	mov	r1, r3
 80070e4:	4610      	mov	r0, r2
 80070e6:	f001 fa35 	bl	8008554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	08003165 	.word	0x08003165

08007158 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007166:	b2db      	uxtb	r3, r3
 8007168:	2b01      	cmp	r3, #1
 800716a:	d001      	beq.n	8007170 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e04c      	b.n	800720a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2202      	movs	r2, #2
 8007174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a26      	ldr	r2, [pc, #152]	@ (8007218 <HAL_TIM_Base_Start+0xc0>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d022      	beq.n	80071c8 <HAL_TIM_Base_Start+0x70>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800718a:	d01d      	beq.n	80071c8 <HAL_TIM_Base_Start+0x70>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a22      	ldr	r2, [pc, #136]	@ (800721c <HAL_TIM_Base_Start+0xc4>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d018      	beq.n	80071c8 <HAL_TIM_Base_Start+0x70>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a21      	ldr	r2, [pc, #132]	@ (8007220 <HAL_TIM_Base_Start+0xc8>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d013      	beq.n	80071c8 <HAL_TIM_Base_Start+0x70>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a1f      	ldr	r2, [pc, #124]	@ (8007224 <HAL_TIM_Base_Start+0xcc>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d00e      	beq.n	80071c8 <HAL_TIM_Base_Start+0x70>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a1e      	ldr	r2, [pc, #120]	@ (8007228 <HAL_TIM_Base_Start+0xd0>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d009      	beq.n	80071c8 <HAL_TIM_Base_Start+0x70>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a1c      	ldr	r2, [pc, #112]	@ (800722c <HAL_TIM_Base_Start+0xd4>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d004      	beq.n	80071c8 <HAL_TIM_Base_Start+0x70>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a1b      	ldr	r2, [pc, #108]	@ (8007230 <HAL_TIM_Base_Start+0xd8>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d115      	bne.n	80071f4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689a      	ldr	r2, [r3, #8]
 80071ce:	4b19      	ldr	r3, [pc, #100]	@ (8007234 <HAL_TIM_Base_Start+0xdc>)
 80071d0:	4013      	ands	r3, r2
 80071d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2b06      	cmp	r3, #6
 80071d8:	d015      	beq.n	8007206 <HAL_TIM_Base_Start+0xae>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071e0:	d011      	beq.n	8007206 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f042 0201 	orr.w	r2, r2, #1
 80071f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071f2:	e008      	b.n	8007206 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f042 0201 	orr.w	r2, r2, #1
 8007202:	601a      	str	r2, [r3, #0]
 8007204:	e000      	b.n	8007208 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007206:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	40012c00 	.word	0x40012c00
 800721c:	40000400 	.word	0x40000400
 8007220:	40000800 	.word	0x40000800
 8007224:	40000c00 	.word	0x40000c00
 8007228:	40013400 	.word	0x40013400
 800722c:	40014000 	.word	0x40014000
 8007230:	40015000 	.word	0x40015000
 8007234:	00010007 	.word	0x00010007

08007238 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b01      	cmp	r3, #1
 800724a:	d001      	beq.n	8007250 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e054      	b.n	80072fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2202      	movs	r2, #2
 8007254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68da      	ldr	r2, [r3, #12]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f042 0201 	orr.w	r2, r2, #1
 8007266:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a26      	ldr	r2, [pc, #152]	@ (8007308 <HAL_TIM_Base_Start_IT+0xd0>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d022      	beq.n	80072b8 <HAL_TIM_Base_Start_IT+0x80>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800727a:	d01d      	beq.n	80072b8 <HAL_TIM_Base_Start_IT+0x80>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a22      	ldr	r2, [pc, #136]	@ (800730c <HAL_TIM_Base_Start_IT+0xd4>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d018      	beq.n	80072b8 <HAL_TIM_Base_Start_IT+0x80>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a21      	ldr	r2, [pc, #132]	@ (8007310 <HAL_TIM_Base_Start_IT+0xd8>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d013      	beq.n	80072b8 <HAL_TIM_Base_Start_IT+0x80>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a1f      	ldr	r2, [pc, #124]	@ (8007314 <HAL_TIM_Base_Start_IT+0xdc>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d00e      	beq.n	80072b8 <HAL_TIM_Base_Start_IT+0x80>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a1e      	ldr	r2, [pc, #120]	@ (8007318 <HAL_TIM_Base_Start_IT+0xe0>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d009      	beq.n	80072b8 <HAL_TIM_Base_Start_IT+0x80>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a1c      	ldr	r2, [pc, #112]	@ (800731c <HAL_TIM_Base_Start_IT+0xe4>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d004      	beq.n	80072b8 <HAL_TIM_Base_Start_IT+0x80>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a1b      	ldr	r2, [pc, #108]	@ (8007320 <HAL_TIM_Base_Start_IT+0xe8>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d115      	bne.n	80072e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	689a      	ldr	r2, [r3, #8]
 80072be:	4b19      	ldr	r3, [pc, #100]	@ (8007324 <HAL_TIM_Base_Start_IT+0xec>)
 80072c0:	4013      	ands	r3, r2
 80072c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2b06      	cmp	r3, #6
 80072c8:	d015      	beq.n	80072f6 <HAL_TIM_Base_Start_IT+0xbe>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072d0:	d011      	beq.n	80072f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f042 0201 	orr.w	r2, r2, #1
 80072e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072e2:	e008      	b.n	80072f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f042 0201 	orr.w	r2, r2, #1
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	e000      	b.n	80072f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3714      	adds	r7, #20
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	40012c00 	.word	0x40012c00
 800730c:	40000400 	.word	0x40000400
 8007310:	40000800 	.word	0x40000800
 8007314:	40000c00 	.word	0x40000c00
 8007318:	40013400 	.word	0x40013400
 800731c:	40014000 	.word	0x40014000
 8007320:	40015000 	.word	0x40015000
 8007324:	00010007 	.word	0x00010007

08007328 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e054      	b.n	80073e4 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b00      	cmp	r3, #0
 8007344:	d111      	bne.n	800736a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f001 fda0 	bl	8008e94 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007358:	2b00      	cmp	r3, #0
 800735a:	d102      	bne.n	8007362 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a23      	ldr	r2, [pc, #140]	@ (80073ec <HAL_TIM_PWM_Init+0xc4>)
 8007360:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2202      	movs	r2, #2
 800736e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	3304      	adds	r3, #4
 800737a:	4619      	mov	r1, r3
 800737c:	4610      	mov	r0, r2
 800737e:	f001 f8e9 	bl	8008554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2201      	movs	r2, #1
 80073de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	080073f1 	.word	0x080073f1

080073f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d109      	bne.n	8007428 <HAL_TIM_PWM_Start+0x24>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b01      	cmp	r3, #1
 800741e:	bf14      	ite	ne
 8007420:	2301      	movne	r3, #1
 8007422:	2300      	moveq	r3, #0
 8007424:	b2db      	uxtb	r3, r3
 8007426:	e03c      	b.n	80074a2 <HAL_TIM_PWM_Start+0x9e>
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	2b04      	cmp	r3, #4
 800742c:	d109      	bne.n	8007442 <HAL_TIM_PWM_Start+0x3e>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b01      	cmp	r3, #1
 8007438:	bf14      	ite	ne
 800743a:	2301      	movne	r3, #1
 800743c:	2300      	moveq	r3, #0
 800743e:	b2db      	uxtb	r3, r3
 8007440:	e02f      	b.n	80074a2 <HAL_TIM_PWM_Start+0x9e>
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	2b08      	cmp	r3, #8
 8007446:	d109      	bne.n	800745c <HAL_TIM_PWM_Start+0x58>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b01      	cmp	r3, #1
 8007452:	bf14      	ite	ne
 8007454:	2301      	movne	r3, #1
 8007456:	2300      	moveq	r3, #0
 8007458:	b2db      	uxtb	r3, r3
 800745a:	e022      	b.n	80074a2 <HAL_TIM_PWM_Start+0x9e>
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	2b0c      	cmp	r3, #12
 8007460:	d109      	bne.n	8007476 <HAL_TIM_PWM_Start+0x72>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b01      	cmp	r3, #1
 800746c:	bf14      	ite	ne
 800746e:	2301      	movne	r3, #1
 8007470:	2300      	moveq	r3, #0
 8007472:	b2db      	uxtb	r3, r3
 8007474:	e015      	b.n	80074a2 <HAL_TIM_PWM_Start+0x9e>
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	2b10      	cmp	r3, #16
 800747a:	d109      	bne.n	8007490 <HAL_TIM_PWM_Start+0x8c>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007482:	b2db      	uxtb	r3, r3
 8007484:	2b01      	cmp	r3, #1
 8007486:	bf14      	ite	ne
 8007488:	2301      	movne	r3, #1
 800748a:	2300      	moveq	r3, #0
 800748c:	b2db      	uxtb	r3, r3
 800748e:	e008      	b.n	80074a2 <HAL_TIM_PWM_Start+0x9e>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007496:	b2db      	uxtb	r3, r3
 8007498:	2b01      	cmp	r3, #1
 800749a:	bf14      	ite	ne
 800749c:	2301      	movne	r3, #1
 800749e:	2300      	moveq	r3, #0
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d001      	beq.n	80074aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e0a6      	b.n	80075f8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d104      	bne.n	80074ba <HAL_TIM_PWM_Start+0xb6>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2202      	movs	r2, #2
 80074b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074b8:	e023      	b.n	8007502 <HAL_TIM_PWM_Start+0xfe>
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	2b04      	cmp	r3, #4
 80074be:	d104      	bne.n	80074ca <HAL_TIM_PWM_Start+0xc6>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2202      	movs	r2, #2
 80074c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074c8:	e01b      	b.n	8007502 <HAL_TIM_PWM_Start+0xfe>
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2b08      	cmp	r3, #8
 80074ce:	d104      	bne.n	80074da <HAL_TIM_PWM_Start+0xd6>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2202      	movs	r2, #2
 80074d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074d8:	e013      	b.n	8007502 <HAL_TIM_PWM_Start+0xfe>
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	2b0c      	cmp	r3, #12
 80074de:	d104      	bne.n	80074ea <HAL_TIM_PWM_Start+0xe6>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2202      	movs	r2, #2
 80074e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80074e8:	e00b      	b.n	8007502 <HAL_TIM_PWM_Start+0xfe>
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	2b10      	cmp	r3, #16
 80074ee:	d104      	bne.n	80074fa <HAL_TIM_PWM_Start+0xf6>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2202      	movs	r2, #2
 80074f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074f8:	e003      	b.n	8007502 <HAL_TIM_PWM_Start+0xfe>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2202      	movs	r2, #2
 80074fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2201      	movs	r2, #1
 8007508:	6839      	ldr	r1, [r7, #0]
 800750a:	4618      	mov	r0, r3
 800750c:	f001 fc9c 	bl	8008e48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a3a      	ldr	r2, [pc, #232]	@ (8007600 <HAL_TIM_PWM_Start+0x1fc>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d018      	beq.n	800754c <HAL_TIM_PWM_Start+0x148>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a39      	ldr	r2, [pc, #228]	@ (8007604 <HAL_TIM_PWM_Start+0x200>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d013      	beq.n	800754c <HAL_TIM_PWM_Start+0x148>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a37      	ldr	r2, [pc, #220]	@ (8007608 <HAL_TIM_PWM_Start+0x204>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d00e      	beq.n	800754c <HAL_TIM_PWM_Start+0x148>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a36      	ldr	r2, [pc, #216]	@ (800760c <HAL_TIM_PWM_Start+0x208>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d009      	beq.n	800754c <HAL_TIM_PWM_Start+0x148>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a34      	ldr	r2, [pc, #208]	@ (8007610 <HAL_TIM_PWM_Start+0x20c>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d004      	beq.n	800754c <HAL_TIM_PWM_Start+0x148>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a33      	ldr	r2, [pc, #204]	@ (8007614 <HAL_TIM_PWM_Start+0x210>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d101      	bne.n	8007550 <HAL_TIM_PWM_Start+0x14c>
 800754c:	2301      	movs	r3, #1
 800754e:	e000      	b.n	8007552 <HAL_TIM_PWM_Start+0x14e>
 8007550:	2300      	movs	r3, #0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d007      	beq.n	8007566 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007564:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a25      	ldr	r2, [pc, #148]	@ (8007600 <HAL_TIM_PWM_Start+0x1fc>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d022      	beq.n	80075b6 <HAL_TIM_PWM_Start+0x1b2>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007578:	d01d      	beq.n	80075b6 <HAL_TIM_PWM_Start+0x1b2>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a26      	ldr	r2, [pc, #152]	@ (8007618 <HAL_TIM_PWM_Start+0x214>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d018      	beq.n	80075b6 <HAL_TIM_PWM_Start+0x1b2>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a24      	ldr	r2, [pc, #144]	@ (800761c <HAL_TIM_PWM_Start+0x218>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d013      	beq.n	80075b6 <HAL_TIM_PWM_Start+0x1b2>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a23      	ldr	r2, [pc, #140]	@ (8007620 <HAL_TIM_PWM_Start+0x21c>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d00e      	beq.n	80075b6 <HAL_TIM_PWM_Start+0x1b2>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a19      	ldr	r2, [pc, #100]	@ (8007604 <HAL_TIM_PWM_Start+0x200>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d009      	beq.n	80075b6 <HAL_TIM_PWM_Start+0x1b2>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a18      	ldr	r2, [pc, #96]	@ (8007608 <HAL_TIM_PWM_Start+0x204>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d004      	beq.n	80075b6 <HAL_TIM_PWM_Start+0x1b2>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a18      	ldr	r2, [pc, #96]	@ (8007614 <HAL_TIM_PWM_Start+0x210>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d115      	bne.n	80075e2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	689a      	ldr	r2, [r3, #8]
 80075bc:	4b19      	ldr	r3, [pc, #100]	@ (8007624 <HAL_TIM_PWM_Start+0x220>)
 80075be:	4013      	ands	r3, r2
 80075c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2b06      	cmp	r3, #6
 80075c6:	d015      	beq.n	80075f4 <HAL_TIM_PWM_Start+0x1f0>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075ce:	d011      	beq.n	80075f4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f042 0201 	orr.w	r2, r2, #1
 80075de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075e0:	e008      	b.n	80075f4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f042 0201 	orr.w	r2, r2, #1
 80075f0:	601a      	str	r2, [r3, #0]
 80075f2:	e000      	b.n	80075f6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	40012c00 	.word	0x40012c00
 8007604:	40013400 	.word	0x40013400
 8007608:	40014000 	.word	0x40014000
 800760c:	40014400 	.word	0x40014400
 8007610:	40014800 	.word	0x40014800
 8007614:	40015000 	.word	0x40015000
 8007618:	40000400 	.word	0x40000400
 800761c:	40000800 	.word	0x40000800
 8007620:	40000c00 	.word	0x40000c00
 8007624:	00010007 	.word	0x00010007

08007628 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d101      	bne.n	800763c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e04c      	b.n	80076d6 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007642:	b2db      	uxtb	r3, r3
 8007644:	2b00      	cmp	r3, #0
 8007646:	d111      	bne.n	800766c <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f001 fc1f 	bl	8008e94 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800765a:	2b00      	cmp	r3, #0
 800765c:	d102      	bne.n	8007664 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a1f      	ldr	r2, [pc, #124]	@ (80076e0 <HAL_TIM_OnePulse_Init+0xb8>)
 8007662:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2202      	movs	r2, #2
 8007670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	3304      	adds	r3, #4
 800767c:	4619      	mov	r1, r3
 800767e:	4610      	mov	r0, r2
 8007680:	f000 ff68 	bl	8008554 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f022 0208 	bic.w	r2, r2, #8
 8007692:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	6819      	ldr	r1, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	683a      	ldr	r2, [r7, #0]
 80076a0:	430a      	orrs	r2, r1
 80076a2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	080076e5 	.word	0x080076e5

080076e4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80076ec:	bf00      	nop
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007708:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007710:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007718:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007720:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007722:	7bfb      	ldrb	r3, [r7, #15]
 8007724:	2b01      	cmp	r3, #1
 8007726:	d108      	bne.n	800773a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007728:	7bbb      	ldrb	r3, [r7, #14]
 800772a:	2b01      	cmp	r3, #1
 800772c:	d105      	bne.n	800773a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800772e:	7b7b      	ldrb	r3, [r7, #13]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d102      	bne.n	800773a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007734:	7b3b      	ldrb	r3, [r7, #12]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d001      	beq.n	800773e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e059      	b.n	80077f2 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2202      	movs	r2, #2
 8007742:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2202      	movs	r2, #2
 800774a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2202      	movs	r2, #2
 8007752:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2202      	movs	r2, #2
 800775a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68da      	ldr	r2, [r3, #12]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f042 0202 	orr.w	r2, r2, #2
 800776c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68da      	ldr	r2, [r3, #12]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f042 0204 	orr.w	r2, r2, #4
 800777c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2201      	movs	r2, #1
 8007784:	2100      	movs	r1, #0
 8007786:	4618      	mov	r0, r3
 8007788:	f001 fb5e 	bl	8008e48 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2201      	movs	r2, #1
 8007792:	2104      	movs	r1, #4
 8007794:	4618      	mov	r0, r3
 8007796:	f001 fb57 	bl	8008e48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a17      	ldr	r2, [pc, #92]	@ (80077fc <HAL_TIM_OnePulse_Start_IT+0x104>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d018      	beq.n	80077d6 <HAL_TIM_OnePulse_Start_IT+0xde>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a15      	ldr	r2, [pc, #84]	@ (8007800 <HAL_TIM_OnePulse_Start_IT+0x108>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d013      	beq.n	80077d6 <HAL_TIM_OnePulse_Start_IT+0xde>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a14      	ldr	r2, [pc, #80]	@ (8007804 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d00e      	beq.n	80077d6 <HAL_TIM_OnePulse_Start_IT+0xde>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a12      	ldr	r2, [pc, #72]	@ (8007808 <HAL_TIM_OnePulse_Start_IT+0x110>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d009      	beq.n	80077d6 <HAL_TIM_OnePulse_Start_IT+0xde>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a11      	ldr	r2, [pc, #68]	@ (800780c <HAL_TIM_OnePulse_Start_IT+0x114>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d004      	beq.n	80077d6 <HAL_TIM_OnePulse_Start_IT+0xde>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a0f      	ldr	r2, [pc, #60]	@ (8007810 <HAL_TIM_OnePulse_Start_IT+0x118>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d101      	bne.n	80077da <HAL_TIM_OnePulse_Start_IT+0xe2>
 80077d6:	2301      	movs	r3, #1
 80077d8:	e000      	b.n	80077dc <HAL_TIM_OnePulse_Start_IT+0xe4>
 80077da:	2300      	movs	r3, #0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d007      	beq.n	80077f0 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80077ee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	40012c00 	.word	0x40012c00
 8007800:	40013400 	.word	0x40013400
 8007804:	40014000 	.word	0x40014000
 8007808:	40014400 	.word	0x40014400
 800780c:	40014800 	.word	0x40014800
 8007810:	40015000 	.word	0x40015000

08007814 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d101      	bne.n	8007828 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	e0a2      	b.n	800796e <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800782e:	b2db      	uxtb	r3, r3
 8007830:	2b00      	cmp	r3, #0
 8007832:	d111      	bne.n	8007858 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f001 fb29 	bl	8008e94 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007846:	2b00      	cmp	r3, #0
 8007848:	d102      	bne.n	8007850 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a4a      	ldr	r2, [pc, #296]	@ (8007978 <HAL_TIM_Encoder_Init+0x164>)
 800784e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2202      	movs	r2, #2
 800785c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	6812      	ldr	r2, [r2, #0]
 800786a:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800786e:	f023 0307 	bic.w	r3, r3, #7
 8007872:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	3304      	adds	r3, #4
 800787c:	4619      	mov	r1, r3
 800787e:	4610      	mov	r0, r2
 8007880:	f000 fe68 	bl	8008554 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6a1b      	ldr	r3, [r3, #32]
 800789a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	697a      	ldr	r2, [r7, #20]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078ac:	f023 0303 	bic.w	r3, r3, #3
 80078b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	689a      	ldr	r2, [r3, #8]
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	699b      	ldr	r3, [r3, #24]
 80078ba:	021b      	lsls	r3, r3, #8
 80078bc:	4313      	orrs	r3, r2
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80078ca:	f023 030c 	bic.w	r3, r3, #12
 80078ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80078d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	68da      	ldr	r2, [r3, #12]
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	69db      	ldr	r3, [r3, #28]
 80078e4:	021b      	lsls	r3, r3, #8
 80078e6:	4313      	orrs	r3, r2
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	011a      	lsls	r2, r3, #4
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	6a1b      	ldr	r3, [r3, #32]
 80078f8:	031b      	lsls	r3, r3, #12
 80078fa:	4313      	orrs	r3, r2
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	4313      	orrs	r3, r2
 8007900:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007908:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007910:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	011b      	lsls	r3, r3, #4
 800791c:	4313      	orrs	r3, r2
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	4313      	orrs	r3, r2
 8007922:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	697a      	ldr	r2, [r7, #20]
 800792a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3718      	adds	r7, #24
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	080032b5 	.word	0x080032b5

0800797c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800798c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007994:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800799c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079a4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d110      	bne.n	80079ce <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80079ac:	7bfb      	ldrb	r3, [r7, #15]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d102      	bne.n	80079b8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80079b2:	7b7b      	ldrb	r3, [r7, #13]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d001      	beq.n	80079bc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e069      	b.n	8007a90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2202      	movs	r2, #2
 80079c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2202      	movs	r2, #2
 80079c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079cc:	e031      	b.n	8007a32 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	2b04      	cmp	r3, #4
 80079d2:	d110      	bne.n	80079f6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d102      	bne.n	80079e0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80079da:	7b3b      	ldrb	r3, [r7, #12]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d001      	beq.n	80079e4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	e055      	b.n	8007a90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2202      	movs	r2, #2
 80079e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2202      	movs	r2, #2
 80079f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079f4:	e01d      	b.n	8007a32 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80079f6:	7bfb      	ldrb	r3, [r7, #15]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d108      	bne.n	8007a0e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80079fc:	7bbb      	ldrb	r3, [r7, #14]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d105      	bne.n	8007a0e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a02:	7b7b      	ldrb	r3, [r7, #13]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d102      	bne.n	8007a0e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a08:	7b3b      	ldrb	r3, [r7, #12]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d001      	beq.n	8007a12 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e03e      	b.n	8007a90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2202      	movs	r2, #2
 8007a16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2202      	movs	r2, #2
 8007a26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2202      	movs	r2, #2
 8007a2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d003      	beq.n	8007a40 <HAL_TIM_Encoder_Start+0xc4>
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	2b04      	cmp	r3, #4
 8007a3c:	d008      	beq.n	8007a50 <HAL_TIM_Encoder_Start+0xd4>
 8007a3e:	e00f      	b.n	8007a60 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2201      	movs	r2, #1
 8007a46:	2100      	movs	r1, #0
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f001 f9fd 	bl	8008e48 <TIM_CCxChannelCmd>
      break;
 8007a4e:	e016      	b.n	8007a7e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2201      	movs	r2, #1
 8007a56:	2104      	movs	r1, #4
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f001 f9f5 	bl	8008e48 <TIM_CCxChannelCmd>
      break;
 8007a5e:	e00e      	b.n	8007a7e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2201      	movs	r2, #1
 8007a66:	2100      	movs	r1, #0
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f001 f9ed 	bl	8008e48 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2201      	movs	r2, #1
 8007a74:	2104      	movs	r1, #4
 8007a76:	4618      	mov	r0, r3
 8007a78:	f001 f9e6 	bl	8008e48 <TIM_CCxChannelCmd>
      break;
 8007a7c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f042 0201 	orr.w	r2, r2, #1
 8007a8c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3710      	adds	r7, #16
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d026      	beq.n	8007b08 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f003 0302 	and.w	r3, r3, #2
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d021      	beq.n	8007b08 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f06f 0202 	mvn.w	r2, #2
 8007acc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	f003 0303 	and.w	r3, r3, #3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d005      	beq.n	8007aee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	4798      	blx	r3
 8007aec:	e009      	b.n	8007b02 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	f003 0304 	and.w	r3, r3, #4
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d026      	beq.n	8007b60 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f003 0304 	and.w	r3, r3, #4
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d021      	beq.n	8007b60 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f06f 0204 	mvn.w	r2, #4
 8007b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2202      	movs	r2, #2
 8007b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	699b      	ldr	r3, [r3, #24]
 8007b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d005      	beq.n	8007b46 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	4798      	blx	r3
 8007b44:	e009      	b.n	8007b5a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	f003 0308 	and.w	r3, r3, #8
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d026      	beq.n	8007bb8 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f003 0308 	and.w	r3, r3, #8
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d021      	beq.n	8007bb8 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f06f 0208 	mvn.w	r2, #8
 8007b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2204      	movs	r2, #4
 8007b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	69db      	ldr	r3, [r3, #28]
 8007b8a:	f003 0303 	and.w	r3, r3, #3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d005      	beq.n	8007b9e <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	4798      	blx	r3
 8007b9c:	e009      	b.n	8007bb2 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	f003 0310 	and.w	r3, r3, #16
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d026      	beq.n	8007c10 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f003 0310 	and.w	r3, r3, #16
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d021      	beq.n	8007c10 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f06f 0210 	mvn.w	r2, #16
 8007bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2208      	movs	r2, #8
 8007bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	69db      	ldr	r3, [r3, #28]
 8007be2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d005      	beq.n	8007bf6 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	4798      	blx	r3
 8007bf4:	e009      	b.n	8007c0a <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00e      	beq.n	8007c38 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f003 0301 	and.w	r3, r3, #1
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d009      	beq.n	8007c38 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f06f 0201 	mvn.w	r2, #1
 8007c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d104      	bne.n	8007c4c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00e      	beq.n	8007c6a <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d009      	beq.n	8007c6a <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00e      	beq.n	8007c92 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d009      	beq.n	8007c92 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00e      	beq.n	8007cba <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d009      	beq.n	8007cba <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	f003 0320 	and.w	r3, r3, #32
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00e      	beq.n	8007ce2 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f003 0320 	and.w	r3, r3, #32
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d009      	beq.n	8007ce2 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f06f 0220 	mvn.w	r2, #32
 8007cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00e      	beq.n	8007d0a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d009      	beq.n	8007d0a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00e      	beq.n	8007d32 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d009      	beq.n	8007d32 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00e      	beq.n	8007d5a <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d009      	beq.n	8007d5a <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00e      	beq.n	8007d82 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d009      	beq.n	8007d82 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d82:	bf00      	nop
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
	...

08007d8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d101      	bne.n	8007daa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007da6:	2302      	movs	r3, #2
 8007da8:	e0ff      	b.n	8007faa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2b14      	cmp	r3, #20
 8007db6:	f200 80f0 	bhi.w	8007f9a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007dba:	a201      	add	r2, pc, #4	@ (adr r2, 8007dc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc0:	08007e15 	.word	0x08007e15
 8007dc4:	08007f9b 	.word	0x08007f9b
 8007dc8:	08007f9b 	.word	0x08007f9b
 8007dcc:	08007f9b 	.word	0x08007f9b
 8007dd0:	08007e55 	.word	0x08007e55
 8007dd4:	08007f9b 	.word	0x08007f9b
 8007dd8:	08007f9b 	.word	0x08007f9b
 8007ddc:	08007f9b 	.word	0x08007f9b
 8007de0:	08007e97 	.word	0x08007e97
 8007de4:	08007f9b 	.word	0x08007f9b
 8007de8:	08007f9b 	.word	0x08007f9b
 8007dec:	08007f9b 	.word	0x08007f9b
 8007df0:	08007ed7 	.word	0x08007ed7
 8007df4:	08007f9b 	.word	0x08007f9b
 8007df8:	08007f9b 	.word	0x08007f9b
 8007dfc:	08007f9b 	.word	0x08007f9b
 8007e00:	08007f19 	.word	0x08007f19
 8007e04:	08007f9b 	.word	0x08007f9b
 8007e08:	08007f9b 	.word	0x08007f9b
 8007e0c:	08007f9b 	.word	0x08007f9b
 8007e10:	08007f59 	.word	0x08007f59
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68b9      	ldr	r1, [r7, #8]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 fc4e 	bl	80086bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	699a      	ldr	r2, [r3, #24]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f042 0208 	orr.w	r2, r2, #8
 8007e2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	699a      	ldr	r2, [r3, #24]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f022 0204 	bic.w	r2, r2, #4
 8007e3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	6999      	ldr	r1, [r3, #24]
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	691a      	ldr	r2, [r3, #16]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	619a      	str	r2, [r3, #24]
      break;
 8007e52:	e0a5      	b.n	8007fa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68b9      	ldr	r1, [r7, #8]
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f000 fcc8 	bl	80087f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	699a      	ldr	r2, [r3, #24]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	699a      	ldr	r2, [r3, #24]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	6999      	ldr	r1, [r3, #24]
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	021a      	lsls	r2, r3, #8
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	430a      	orrs	r2, r1
 8007e92:	619a      	str	r2, [r3, #24]
      break;
 8007e94:	e084      	b.n	8007fa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68b9      	ldr	r1, [r7, #8]
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f000 fd3b 	bl	8008918 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	69da      	ldr	r2, [r3, #28]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f042 0208 	orr.w	r2, r2, #8
 8007eb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	69da      	ldr	r2, [r3, #28]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f022 0204 	bic.w	r2, r2, #4
 8007ec0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	69d9      	ldr	r1, [r3, #28]
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	691a      	ldr	r2, [r3, #16]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	61da      	str	r2, [r3, #28]
      break;
 8007ed4:	e064      	b.n	8007fa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	68b9      	ldr	r1, [r7, #8]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f000 fdad 	bl	8008a3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	69da      	ldr	r2, [r3, #28]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ef0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	69da      	ldr	r2, [r3, #28]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	69d9      	ldr	r1, [r3, #28]
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	021a      	lsls	r2, r3, #8
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	430a      	orrs	r2, r1
 8007f14:	61da      	str	r2, [r3, #28]
      break;
 8007f16:	e043      	b.n	8007fa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68b9      	ldr	r1, [r7, #8]
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 fe20 	bl	8008b64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f042 0208 	orr.w	r2, r2, #8
 8007f32:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f022 0204 	bic.w	r2, r2, #4
 8007f42:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	691a      	ldr	r2, [r3, #16]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	430a      	orrs	r2, r1
 8007f54:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007f56:	e023      	b.n	8007fa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68b9      	ldr	r1, [r7, #8]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 fe6a 	bl	8008c38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f72:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f82:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	021a      	lsls	r2, r3, #8
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	430a      	orrs	r2, r1
 8007f96:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007f98:	e002      	b.n	8007fa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	75fb      	strb	r3, [r7, #23]
      break;
 8007f9e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3718      	adds	r7, #24
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop

08007fb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d101      	bne.n	8007fd0 <HAL_TIM_ConfigClockSource+0x1c>
 8007fcc:	2302      	movs	r3, #2
 8007fce:	e0f6      	b.n	80081be <HAL_TIM_ConfigClockSource+0x20a>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2202      	movs	r2, #2
 8007fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007fee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007ff2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ffa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68ba      	ldr	r2, [r7, #8]
 8008002:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a6f      	ldr	r2, [pc, #444]	@ (80081c8 <HAL_TIM_ConfigClockSource+0x214>)
 800800a:	4293      	cmp	r3, r2
 800800c:	f000 80c1 	beq.w	8008192 <HAL_TIM_ConfigClockSource+0x1de>
 8008010:	4a6d      	ldr	r2, [pc, #436]	@ (80081c8 <HAL_TIM_ConfigClockSource+0x214>)
 8008012:	4293      	cmp	r3, r2
 8008014:	f200 80c6 	bhi.w	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008018:	4a6c      	ldr	r2, [pc, #432]	@ (80081cc <HAL_TIM_ConfigClockSource+0x218>)
 800801a:	4293      	cmp	r3, r2
 800801c:	f000 80b9 	beq.w	8008192 <HAL_TIM_ConfigClockSource+0x1de>
 8008020:	4a6a      	ldr	r2, [pc, #424]	@ (80081cc <HAL_TIM_ConfigClockSource+0x218>)
 8008022:	4293      	cmp	r3, r2
 8008024:	f200 80be 	bhi.w	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008028:	4a69      	ldr	r2, [pc, #420]	@ (80081d0 <HAL_TIM_ConfigClockSource+0x21c>)
 800802a:	4293      	cmp	r3, r2
 800802c:	f000 80b1 	beq.w	8008192 <HAL_TIM_ConfigClockSource+0x1de>
 8008030:	4a67      	ldr	r2, [pc, #412]	@ (80081d0 <HAL_TIM_ConfigClockSource+0x21c>)
 8008032:	4293      	cmp	r3, r2
 8008034:	f200 80b6 	bhi.w	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008038:	4a66      	ldr	r2, [pc, #408]	@ (80081d4 <HAL_TIM_ConfigClockSource+0x220>)
 800803a:	4293      	cmp	r3, r2
 800803c:	f000 80a9 	beq.w	8008192 <HAL_TIM_ConfigClockSource+0x1de>
 8008040:	4a64      	ldr	r2, [pc, #400]	@ (80081d4 <HAL_TIM_ConfigClockSource+0x220>)
 8008042:	4293      	cmp	r3, r2
 8008044:	f200 80ae 	bhi.w	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008048:	4a63      	ldr	r2, [pc, #396]	@ (80081d8 <HAL_TIM_ConfigClockSource+0x224>)
 800804a:	4293      	cmp	r3, r2
 800804c:	f000 80a1 	beq.w	8008192 <HAL_TIM_ConfigClockSource+0x1de>
 8008050:	4a61      	ldr	r2, [pc, #388]	@ (80081d8 <HAL_TIM_ConfigClockSource+0x224>)
 8008052:	4293      	cmp	r3, r2
 8008054:	f200 80a6 	bhi.w	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008058:	4a60      	ldr	r2, [pc, #384]	@ (80081dc <HAL_TIM_ConfigClockSource+0x228>)
 800805a:	4293      	cmp	r3, r2
 800805c:	f000 8099 	beq.w	8008192 <HAL_TIM_ConfigClockSource+0x1de>
 8008060:	4a5e      	ldr	r2, [pc, #376]	@ (80081dc <HAL_TIM_ConfigClockSource+0x228>)
 8008062:	4293      	cmp	r3, r2
 8008064:	f200 809e 	bhi.w	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008068:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800806c:	f000 8091 	beq.w	8008192 <HAL_TIM_ConfigClockSource+0x1de>
 8008070:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008074:	f200 8096 	bhi.w	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008078:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800807c:	f000 8089 	beq.w	8008192 <HAL_TIM_ConfigClockSource+0x1de>
 8008080:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008084:	f200 808e 	bhi.w	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008088:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800808c:	d03e      	beq.n	800810c <HAL_TIM_ConfigClockSource+0x158>
 800808e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008092:	f200 8087 	bhi.w	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800809a:	f000 8086 	beq.w	80081aa <HAL_TIM_ConfigClockSource+0x1f6>
 800809e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080a2:	d87f      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80080a4:	2b70      	cmp	r3, #112	@ 0x70
 80080a6:	d01a      	beq.n	80080de <HAL_TIM_ConfigClockSource+0x12a>
 80080a8:	2b70      	cmp	r3, #112	@ 0x70
 80080aa:	d87b      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80080ac:	2b60      	cmp	r3, #96	@ 0x60
 80080ae:	d050      	beq.n	8008152 <HAL_TIM_ConfigClockSource+0x19e>
 80080b0:	2b60      	cmp	r3, #96	@ 0x60
 80080b2:	d877      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80080b4:	2b50      	cmp	r3, #80	@ 0x50
 80080b6:	d03c      	beq.n	8008132 <HAL_TIM_ConfigClockSource+0x17e>
 80080b8:	2b50      	cmp	r3, #80	@ 0x50
 80080ba:	d873      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80080bc:	2b40      	cmp	r3, #64	@ 0x40
 80080be:	d058      	beq.n	8008172 <HAL_TIM_ConfigClockSource+0x1be>
 80080c0:	2b40      	cmp	r3, #64	@ 0x40
 80080c2:	d86f      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80080c4:	2b30      	cmp	r3, #48	@ 0x30
 80080c6:	d064      	beq.n	8008192 <HAL_TIM_ConfigClockSource+0x1de>
 80080c8:	2b30      	cmp	r3, #48	@ 0x30
 80080ca:	d86b      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80080cc:	2b20      	cmp	r3, #32
 80080ce:	d060      	beq.n	8008192 <HAL_TIM_ConfigClockSource+0x1de>
 80080d0:	2b20      	cmp	r3, #32
 80080d2:	d867      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d05c      	beq.n	8008192 <HAL_TIM_ConfigClockSource+0x1de>
 80080d8:	2b10      	cmp	r3, #16
 80080da:	d05a      	beq.n	8008192 <HAL_TIM_ConfigClockSource+0x1de>
 80080dc:	e062      	b.n	80081a4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80080ee:	f000 fe8b 	bl	8008e08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008100:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	609a      	str	r2, [r3, #8]
      break;
 800810a:	e04f      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800811c:	f000 fe74 	bl	8008e08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689a      	ldr	r2, [r3, #8]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800812e:	609a      	str	r2, [r3, #8]
      break;
 8008130:	e03c      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800813e:	461a      	mov	r2, r3
 8008140:	f000 fde6 	bl	8008d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2150      	movs	r1, #80	@ 0x50
 800814a:	4618      	mov	r0, r3
 800814c:	f000 fe3f 	bl	8008dce <TIM_ITRx_SetConfig>
      break;
 8008150:	e02c      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800815e:	461a      	mov	r2, r3
 8008160:	f000 fe05 	bl	8008d6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2160      	movs	r1, #96	@ 0x60
 800816a:	4618      	mov	r0, r3
 800816c:	f000 fe2f 	bl	8008dce <TIM_ITRx_SetConfig>
      break;
 8008170:	e01c      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800817e:	461a      	mov	r2, r3
 8008180:	f000 fdc6 	bl	8008d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2140      	movs	r1, #64	@ 0x40
 800818a:	4618      	mov	r0, r3
 800818c:	f000 fe1f 	bl	8008dce <TIM_ITRx_SetConfig>
      break;
 8008190:	e00c      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4619      	mov	r1, r3
 800819c:	4610      	mov	r0, r2
 800819e:	f000 fe16 	bl	8008dce <TIM_ITRx_SetConfig>
      break;
 80081a2:	e003      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	73fb      	strb	r3, [r7, #15]
      break;
 80081a8:	e000      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80081aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80081bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	00100070 	.word	0x00100070
 80081cc:	00100060 	.word	0x00100060
 80081d0:	00100050 	.word	0x00100050
 80081d4:	00100040 	.word	0x00100040
 80081d8:	00100030 	.word	0x00100030
 80081dc:	00100020 	.word	0x00100020

080081e0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008210:	bf00      	nop
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008224:	bf00      	nop
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800824c:	bf00      	nop
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008260:	bf00      	nop
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008274:	bf00      	nop
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008288:	bf00      	nop
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008294:	b480      	push	{r7}
 8008296:	b087      	sub	sp, #28
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	460b      	mov	r3, r1
 800829e:	607a      	str	r2, [r7, #4]
 80082a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d101      	bne.n	80082b0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e14a      	b.n	8008546 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	f040 80dd 	bne.w	8008478 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 80082be:	7afb      	ldrb	r3, [r7, #11]
 80082c0:	2b1f      	cmp	r3, #31
 80082c2:	f200 80d6 	bhi.w	8008472 <HAL_TIM_RegisterCallback+0x1de>
 80082c6:	a201      	add	r2, pc, #4	@ (adr r2, 80082cc <HAL_TIM_RegisterCallback+0x38>)
 80082c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082cc:	0800834d 	.word	0x0800834d
 80082d0:	08008355 	.word	0x08008355
 80082d4:	0800835d 	.word	0x0800835d
 80082d8:	08008365 	.word	0x08008365
 80082dc:	0800836d 	.word	0x0800836d
 80082e0:	08008375 	.word	0x08008375
 80082e4:	0800837d 	.word	0x0800837d
 80082e8:	08008385 	.word	0x08008385
 80082ec:	0800838d 	.word	0x0800838d
 80082f0:	08008395 	.word	0x08008395
 80082f4:	0800839d 	.word	0x0800839d
 80082f8:	080083a5 	.word	0x080083a5
 80082fc:	080083ad 	.word	0x080083ad
 8008300:	080083b5 	.word	0x080083b5
 8008304:	080083bf 	.word	0x080083bf
 8008308:	080083c9 	.word	0x080083c9
 800830c:	080083d3 	.word	0x080083d3
 8008310:	080083dd 	.word	0x080083dd
 8008314:	080083e7 	.word	0x080083e7
 8008318:	080083f1 	.word	0x080083f1
 800831c:	080083fb 	.word	0x080083fb
 8008320:	08008405 	.word	0x08008405
 8008324:	0800840f 	.word	0x0800840f
 8008328:	08008419 	.word	0x08008419
 800832c:	08008423 	.word	0x08008423
 8008330:	0800842d 	.word	0x0800842d
 8008334:	08008437 	.word	0x08008437
 8008338:	08008441 	.word	0x08008441
 800833c:	0800844b 	.word	0x0800844b
 8008340:	08008455 	.word	0x08008455
 8008344:	0800845f 	.word	0x0800845f
 8008348:	08008469 	.word	0x08008469
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008352:	e0f7      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800835a:	e0f3      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008362:	e0ef      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800836a:	e0eb      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008372:	e0e7      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800837a:	e0e3      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008382:	e0df      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800838a:	e0db      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008392:	e0d7      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800839a:	e0d3      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80083a2:	e0cf      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80083aa:	e0cb      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80083b2:	e0c7      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80083bc:	e0c2      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80083c6:	e0bd      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80083d0:	e0b8      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 80083da:	e0b3      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 80083e4:	e0ae      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80083ee:	e0a9      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80083f8:	e0a4      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008402:	e09f      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800840c:	e09a      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008416:	e095      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008420:	e090      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800842a:	e08b      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008434:	e086      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800843e:	e081      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008448:	e07c      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008452:	e077      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800845c:	e072      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008466:	e06d      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008470:	e068      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	75fb      	strb	r3, [r7, #23]
        break;
 8008476:	e065      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800847e:	b2db      	uxtb	r3, r3
 8008480:	2b00      	cmp	r3, #0
 8008482:	d15d      	bne.n	8008540 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008484:	7afb      	ldrb	r3, [r7, #11]
 8008486:	2b0d      	cmp	r3, #13
 8008488:	d857      	bhi.n	800853a <HAL_TIM_RegisterCallback+0x2a6>
 800848a:	a201      	add	r2, pc, #4	@ (adr r2, 8008490 <HAL_TIM_RegisterCallback+0x1fc>)
 800848c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008490:	080084c9 	.word	0x080084c9
 8008494:	080084d1 	.word	0x080084d1
 8008498:	080084d9 	.word	0x080084d9
 800849c:	080084e1 	.word	0x080084e1
 80084a0:	080084e9 	.word	0x080084e9
 80084a4:	080084f1 	.word	0x080084f1
 80084a8:	080084f9 	.word	0x080084f9
 80084ac:	08008501 	.word	0x08008501
 80084b0:	08008509 	.word	0x08008509
 80084b4:	08008511 	.word	0x08008511
 80084b8:	08008519 	.word	0x08008519
 80084bc:	08008521 	.word	0x08008521
 80084c0:	08008529 	.word	0x08008529
 80084c4:	08008531 	.word	0x08008531
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80084ce:	e039      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80084d6:	e035      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80084de:	e031      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80084e6:	e02d      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80084ee:	e029      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80084f6:	e025      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80084fe:	e021      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008506:	e01d      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800850e:	e019      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008516:	e015      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800851e:	e011      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008526:	e00d      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800852e:	e009      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008538:	e004      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	75fb      	strb	r3, [r7, #23]
        break;
 800853e:	e001      	b.n	8008544 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008544:	7dfb      	ldrb	r3, [r7, #23]
}
 8008546:	4618      	mov	r0, r3
 8008548:	371c      	adds	r7, #28
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop

08008554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a4c      	ldr	r2, [pc, #304]	@ (8008698 <TIM_Base_SetConfig+0x144>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d017      	beq.n	800859c <TIM_Base_SetConfig+0x48>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008572:	d013      	beq.n	800859c <TIM_Base_SetConfig+0x48>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4a49      	ldr	r2, [pc, #292]	@ (800869c <TIM_Base_SetConfig+0x148>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d00f      	beq.n	800859c <TIM_Base_SetConfig+0x48>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a48      	ldr	r2, [pc, #288]	@ (80086a0 <TIM_Base_SetConfig+0x14c>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d00b      	beq.n	800859c <TIM_Base_SetConfig+0x48>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a47      	ldr	r2, [pc, #284]	@ (80086a4 <TIM_Base_SetConfig+0x150>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d007      	beq.n	800859c <TIM_Base_SetConfig+0x48>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a46      	ldr	r2, [pc, #280]	@ (80086a8 <TIM_Base_SetConfig+0x154>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d003      	beq.n	800859c <TIM_Base_SetConfig+0x48>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a45      	ldr	r2, [pc, #276]	@ (80086ac <TIM_Base_SetConfig+0x158>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d108      	bne.n	80085ae <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a39      	ldr	r2, [pc, #228]	@ (8008698 <TIM_Base_SetConfig+0x144>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d023      	beq.n	80085fe <TIM_Base_SetConfig+0xaa>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085bc:	d01f      	beq.n	80085fe <TIM_Base_SetConfig+0xaa>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a36      	ldr	r2, [pc, #216]	@ (800869c <TIM_Base_SetConfig+0x148>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d01b      	beq.n	80085fe <TIM_Base_SetConfig+0xaa>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a35      	ldr	r2, [pc, #212]	@ (80086a0 <TIM_Base_SetConfig+0x14c>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d017      	beq.n	80085fe <TIM_Base_SetConfig+0xaa>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a34      	ldr	r2, [pc, #208]	@ (80086a4 <TIM_Base_SetConfig+0x150>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d013      	beq.n	80085fe <TIM_Base_SetConfig+0xaa>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a33      	ldr	r2, [pc, #204]	@ (80086a8 <TIM_Base_SetConfig+0x154>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d00f      	beq.n	80085fe <TIM_Base_SetConfig+0xaa>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4a33      	ldr	r2, [pc, #204]	@ (80086b0 <TIM_Base_SetConfig+0x15c>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d00b      	beq.n	80085fe <TIM_Base_SetConfig+0xaa>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4a32      	ldr	r2, [pc, #200]	@ (80086b4 <TIM_Base_SetConfig+0x160>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d007      	beq.n	80085fe <TIM_Base_SetConfig+0xaa>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a31      	ldr	r2, [pc, #196]	@ (80086b8 <TIM_Base_SetConfig+0x164>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d003      	beq.n	80085fe <TIM_Base_SetConfig+0xaa>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a2c      	ldr	r2, [pc, #176]	@ (80086ac <TIM_Base_SetConfig+0x158>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d108      	bne.n	8008610 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	4313      	orrs	r3, r2
 800860e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	695b      	ldr	r3, [r3, #20]
 800861a:	4313      	orrs	r3, r2
 800861c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	689a      	ldr	r2, [r3, #8]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4a18      	ldr	r2, [pc, #96]	@ (8008698 <TIM_Base_SetConfig+0x144>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d013      	beq.n	8008664 <TIM_Base_SetConfig+0x110>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4a1a      	ldr	r2, [pc, #104]	@ (80086a8 <TIM_Base_SetConfig+0x154>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d00f      	beq.n	8008664 <TIM_Base_SetConfig+0x110>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a1a      	ldr	r2, [pc, #104]	@ (80086b0 <TIM_Base_SetConfig+0x15c>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d00b      	beq.n	8008664 <TIM_Base_SetConfig+0x110>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a19      	ldr	r2, [pc, #100]	@ (80086b4 <TIM_Base_SetConfig+0x160>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d007      	beq.n	8008664 <TIM_Base_SetConfig+0x110>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a18      	ldr	r2, [pc, #96]	@ (80086b8 <TIM_Base_SetConfig+0x164>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d003      	beq.n	8008664 <TIM_Base_SetConfig+0x110>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a13      	ldr	r2, [pc, #76]	@ (80086ac <TIM_Base_SetConfig+0x158>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d103      	bne.n	800866c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	691a      	ldr	r2, [r3, #16]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	f003 0301 	and.w	r3, r3, #1
 800867a:	2b01      	cmp	r3, #1
 800867c:	d105      	bne.n	800868a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	691b      	ldr	r3, [r3, #16]
 8008682:	f023 0201 	bic.w	r2, r3, #1
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	611a      	str	r2, [r3, #16]
  }
}
 800868a:	bf00      	nop
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	40012c00 	.word	0x40012c00
 800869c:	40000400 	.word	0x40000400
 80086a0:	40000800 	.word	0x40000800
 80086a4:	40000c00 	.word	0x40000c00
 80086a8:	40013400 	.word	0x40013400
 80086ac:	40015000 	.word	0x40015000
 80086b0:	40014000 	.word	0x40014000
 80086b4:	40014400 	.word	0x40014400
 80086b8:	40014800 	.word	0x40014800

080086bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086bc:	b480      	push	{r7}
 80086be:	b087      	sub	sp, #28
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a1b      	ldr	r3, [r3, #32]
 80086ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a1b      	ldr	r3, [r3, #32]
 80086d0:	f023 0201 	bic.w	r2, r3, #1
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	699b      	ldr	r3, [r3, #24]
 80086e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f023 0303 	bic.w	r3, r3, #3
 80086f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	4313      	orrs	r3, r2
 8008700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	f023 0302 	bic.w	r3, r3, #2
 8008708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	697a      	ldr	r2, [r7, #20]
 8008710:	4313      	orrs	r3, r2
 8008712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a30      	ldr	r2, [pc, #192]	@ (80087d8 <TIM_OC1_SetConfig+0x11c>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d013      	beq.n	8008744 <TIM_OC1_SetConfig+0x88>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a2f      	ldr	r2, [pc, #188]	@ (80087dc <TIM_OC1_SetConfig+0x120>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d00f      	beq.n	8008744 <TIM_OC1_SetConfig+0x88>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a2e      	ldr	r2, [pc, #184]	@ (80087e0 <TIM_OC1_SetConfig+0x124>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d00b      	beq.n	8008744 <TIM_OC1_SetConfig+0x88>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a2d      	ldr	r2, [pc, #180]	@ (80087e4 <TIM_OC1_SetConfig+0x128>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d007      	beq.n	8008744 <TIM_OC1_SetConfig+0x88>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a2c      	ldr	r2, [pc, #176]	@ (80087e8 <TIM_OC1_SetConfig+0x12c>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d003      	beq.n	8008744 <TIM_OC1_SetConfig+0x88>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4a2b      	ldr	r2, [pc, #172]	@ (80087ec <TIM_OC1_SetConfig+0x130>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d10c      	bne.n	800875e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	f023 0308 	bic.w	r3, r3, #8
 800874a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	697a      	ldr	r2, [r7, #20]
 8008752:	4313      	orrs	r3, r2
 8008754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	f023 0304 	bic.w	r3, r3, #4
 800875c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a1d      	ldr	r2, [pc, #116]	@ (80087d8 <TIM_OC1_SetConfig+0x11c>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d013      	beq.n	800878e <TIM_OC1_SetConfig+0xd2>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a1c      	ldr	r2, [pc, #112]	@ (80087dc <TIM_OC1_SetConfig+0x120>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d00f      	beq.n	800878e <TIM_OC1_SetConfig+0xd2>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a1b      	ldr	r2, [pc, #108]	@ (80087e0 <TIM_OC1_SetConfig+0x124>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d00b      	beq.n	800878e <TIM_OC1_SetConfig+0xd2>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a1a      	ldr	r2, [pc, #104]	@ (80087e4 <TIM_OC1_SetConfig+0x128>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d007      	beq.n	800878e <TIM_OC1_SetConfig+0xd2>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a19      	ldr	r2, [pc, #100]	@ (80087e8 <TIM_OC1_SetConfig+0x12c>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d003      	beq.n	800878e <TIM_OC1_SetConfig+0xd2>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a18      	ldr	r2, [pc, #96]	@ (80087ec <TIM_OC1_SetConfig+0x130>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d111      	bne.n	80087b2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800879c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	693a      	ldr	r2, [r7, #16]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	693a      	ldr	r2, [r7, #16]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	693a      	ldr	r2, [r7, #16]
 80087b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	685a      	ldr	r2, [r3, #4]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	621a      	str	r2, [r3, #32]
}
 80087cc:	bf00      	nop
 80087ce:	371c      	adds	r7, #28
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr
 80087d8:	40012c00 	.word	0x40012c00
 80087dc:	40013400 	.word	0x40013400
 80087e0:	40014000 	.word	0x40014000
 80087e4:	40014400 	.word	0x40014400
 80087e8:	40014800 	.word	0x40014800
 80087ec:	40015000 	.word	0x40015000

080087f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b087      	sub	sp, #28
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a1b      	ldr	r3, [r3, #32]
 80087fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6a1b      	ldr	r3, [r3, #32]
 8008804:	f023 0210 	bic.w	r2, r3, #16
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	699b      	ldr	r3, [r3, #24]
 8008816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800881e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800882a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	021b      	lsls	r3, r3, #8
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	4313      	orrs	r3, r2
 8008836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	f023 0320 	bic.w	r3, r3, #32
 800883e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	011b      	lsls	r3, r3, #4
 8008846:	697a      	ldr	r2, [r7, #20]
 8008848:	4313      	orrs	r3, r2
 800884a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a2c      	ldr	r2, [pc, #176]	@ (8008900 <TIM_OC2_SetConfig+0x110>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d007      	beq.n	8008864 <TIM_OC2_SetConfig+0x74>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a2b      	ldr	r2, [pc, #172]	@ (8008904 <TIM_OC2_SetConfig+0x114>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d003      	beq.n	8008864 <TIM_OC2_SetConfig+0x74>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a2a      	ldr	r2, [pc, #168]	@ (8008908 <TIM_OC2_SetConfig+0x118>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d10d      	bne.n	8008880 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800886a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	011b      	lsls	r3, r3, #4
 8008872:	697a      	ldr	r2, [r7, #20]
 8008874:	4313      	orrs	r3, r2
 8008876:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800887e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a1f      	ldr	r2, [pc, #124]	@ (8008900 <TIM_OC2_SetConfig+0x110>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d013      	beq.n	80088b0 <TIM_OC2_SetConfig+0xc0>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4a1e      	ldr	r2, [pc, #120]	@ (8008904 <TIM_OC2_SetConfig+0x114>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d00f      	beq.n	80088b0 <TIM_OC2_SetConfig+0xc0>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a1e      	ldr	r2, [pc, #120]	@ (800890c <TIM_OC2_SetConfig+0x11c>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d00b      	beq.n	80088b0 <TIM_OC2_SetConfig+0xc0>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a1d      	ldr	r2, [pc, #116]	@ (8008910 <TIM_OC2_SetConfig+0x120>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d007      	beq.n	80088b0 <TIM_OC2_SetConfig+0xc0>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a1c      	ldr	r2, [pc, #112]	@ (8008914 <TIM_OC2_SetConfig+0x124>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d003      	beq.n	80088b0 <TIM_OC2_SetConfig+0xc0>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a17      	ldr	r2, [pc, #92]	@ (8008908 <TIM_OC2_SetConfig+0x118>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d113      	bne.n	80088d8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80088b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80088be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	695b      	ldr	r3, [r3, #20]
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	693a      	ldr	r2, [r7, #16]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	693a      	ldr	r2, [r7, #16]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	693a      	ldr	r2, [r7, #16]
 80088dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	685a      	ldr	r2, [r3, #4]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	621a      	str	r2, [r3, #32]
}
 80088f2:	bf00      	nop
 80088f4:	371c      	adds	r7, #28
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop
 8008900:	40012c00 	.word	0x40012c00
 8008904:	40013400 	.word	0x40013400
 8008908:	40015000 	.word	0x40015000
 800890c:	40014000 	.word	0x40014000
 8008910:	40014400 	.word	0x40014400
 8008914:	40014800 	.word	0x40014800

08008918 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008918:	b480      	push	{r7}
 800891a:	b087      	sub	sp, #28
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a1b      	ldr	r3, [r3, #32]
 800892c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	69db      	ldr	r3, [r3, #28]
 800893e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008946:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800894a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f023 0303 	bic.w	r3, r3, #3
 8008952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	4313      	orrs	r3, r2
 800895c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	021b      	lsls	r3, r3, #8
 800896c:	697a      	ldr	r2, [r7, #20]
 800896e:	4313      	orrs	r3, r2
 8008970:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a2b      	ldr	r2, [pc, #172]	@ (8008a24 <TIM_OC3_SetConfig+0x10c>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d007      	beq.n	800898a <TIM_OC3_SetConfig+0x72>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a2a      	ldr	r2, [pc, #168]	@ (8008a28 <TIM_OC3_SetConfig+0x110>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d003      	beq.n	800898a <TIM_OC3_SetConfig+0x72>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a29      	ldr	r2, [pc, #164]	@ (8008a2c <TIM_OC3_SetConfig+0x114>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d10d      	bne.n	80089a6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008990:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	021b      	lsls	r3, r3, #8
 8008998:	697a      	ldr	r2, [r7, #20]
 800899a:	4313      	orrs	r3, r2
 800899c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80089a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a1e      	ldr	r2, [pc, #120]	@ (8008a24 <TIM_OC3_SetConfig+0x10c>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d013      	beq.n	80089d6 <TIM_OC3_SetConfig+0xbe>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a1d      	ldr	r2, [pc, #116]	@ (8008a28 <TIM_OC3_SetConfig+0x110>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d00f      	beq.n	80089d6 <TIM_OC3_SetConfig+0xbe>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4a1d      	ldr	r2, [pc, #116]	@ (8008a30 <TIM_OC3_SetConfig+0x118>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d00b      	beq.n	80089d6 <TIM_OC3_SetConfig+0xbe>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a1c      	ldr	r2, [pc, #112]	@ (8008a34 <TIM_OC3_SetConfig+0x11c>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d007      	beq.n	80089d6 <TIM_OC3_SetConfig+0xbe>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a1b      	ldr	r2, [pc, #108]	@ (8008a38 <TIM_OC3_SetConfig+0x120>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d003      	beq.n	80089d6 <TIM_OC3_SetConfig+0xbe>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a16      	ldr	r2, [pc, #88]	@ (8008a2c <TIM_OC3_SetConfig+0x114>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d113      	bne.n	80089fe <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80089dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80089e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	695b      	ldr	r3, [r3, #20]
 80089ea:	011b      	lsls	r3, r3, #4
 80089ec:	693a      	ldr	r2, [r7, #16]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	699b      	ldr	r3, [r3, #24]
 80089f6:	011b      	lsls	r3, r3, #4
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	693a      	ldr	r2, [r7, #16]
 8008a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	685a      	ldr	r2, [r3, #4]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	697a      	ldr	r2, [r7, #20]
 8008a16:	621a      	str	r2, [r3, #32]
}
 8008a18:	bf00      	nop
 8008a1a:	371c      	adds	r7, #28
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr
 8008a24:	40012c00 	.word	0x40012c00
 8008a28:	40013400 	.word	0x40013400
 8008a2c:	40015000 	.word	0x40015000
 8008a30:	40014000 	.word	0x40014000
 8008a34:	40014400 	.word	0x40014400
 8008a38:	40014800 	.word	0x40014800

08008a3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b087      	sub	sp, #28
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a1b      	ldr	r3, [r3, #32]
 8008a4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a1b      	ldr	r3, [r3, #32]
 8008a50:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	69db      	ldr	r3, [r3, #28]
 8008a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	021b      	lsls	r3, r3, #8
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008a8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	031b      	lsls	r3, r3, #12
 8008a92:	697a      	ldr	r2, [r7, #20]
 8008a94:	4313      	orrs	r3, r2
 8008a96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	4a2c      	ldr	r2, [pc, #176]	@ (8008b4c <TIM_OC4_SetConfig+0x110>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d007      	beq.n	8008ab0 <TIM_OC4_SetConfig+0x74>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a2b      	ldr	r2, [pc, #172]	@ (8008b50 <TIM_OC4_SetConfig+0x114>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d003      	beq.n	8008ab0 <TIM_OC4_SetConfig+0x74>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4a2a      	ldr	r2, [pc, #168]	@ (8008b54 <TIM_OC4_SetConfig+0x118>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d10d      	bne.n	8008acc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008ab6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	031b      	lsls	r3, r3, #12
 8008abe:	697a      	ldr	r2, [r7, #20]
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008aca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a1f      	ldr	r2, [pc, #124]	@ (8008b4c <TIM_OC4_SetConfig+0x110>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d013      	beq.n	8008afc <TIM_OC4_SetConfig+0xc0>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a1e      	ldr	r2, [pc, #120]	@ (8008b50 <TIM_OC4_SetConfig+0x114>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d00f      	beq.n	8008afc <TIM_OC4_SetConfig+0xc0>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a1e      	ldr	r2, [pc, #120]	@ (8008b58 <TIM_OC4_SetConfig+0x11c>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d00b      	beq.n	8008afc <TIM_OC4_SetConfig+0xc0>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a1d      	ldr	r2, [pc, #116]	@ (8008b5c <TIM_OC4_SetConfig+0x120>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d007      	beq.n	8008afc <TIM_OC4_SetConfig+0xc0>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a1c      	ldr	r2, [pc, #112]	@ (8008b60 <TIM_OC4_SetConfig+0x124>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d003      	beq.n	8008afc <TIM_OC4_SetConfig+0xc0>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a17      	ldr	r2, [pc, #92]	@ (8008b54 <TIM_OC4_SetConfig+0x118>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d113      	bne.n	8008b24 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b02:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008b0a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	695b      	ldr	r3, [r3, #20]
 8008b10:	019b      	lsls	r3, r3, #6
 8008b12:	693a      	ldr	r2, [r7, #16]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	019b      	lsls	r3, r3, #6
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	693a      	ldr	r2, [r7, #16]
 8008b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	685a      	ldr	r2, [r3, #4]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	697a      	ldr	r2, [r7, #20]
 8008b3c:	621a      	str	r2, [r3, #32]
}
 8008b3e:	bf00      	nop
 8008b40:	371c      	adds	r7, #28
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	40012c00 	.word	0x40012c00
 8008b50:	40013400 	.word	0x40013400
 8008b54:	40015000 	.word	0x40015000
 8008b58:	40014000 	.word	0x40014000
 8008b5c:	40014400 	.word	0x40014400
 8008b60:	40014800 	.word	0x40014800

08008b64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b087      	sub	sp, #28
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a1b      	ldr	r3, [r3, #32]
 8008b72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a1b      	ldr	r3, [r3, #32]
 8008b78:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008ba8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	041b      	lsls	r3, r3, #16
 8008bb0:	693a      	ldr	r2, [r7, #16]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a19      	ldr	r2, [pc, #100]	@ (8008c20 <TIM_OC5_SetConfig+0xbc>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d013      	beq.n	8008be6 <TIM_OC5_SetConfig+0x82>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a18      	ldr	r2, [pc, #96]	@ (8008c24 <TIM_OC5_SetConfig+0xc0>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d00f      	beq.n	8008be6 <TIM_OC5_SetConfig+0x82>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4a17      	ldr	r2, [pc, #92]	@ (8008c28 <TIM_OC5_SetConfig+0xc4>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d00b      	beq.n	8008be6 <TIM_OC5_SetConfig+0x82>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	4a16      	ldr	r2, [pc, #88]	@ (8008c2c <TIM_OC5_SetConfig+0xc8>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d007      	beq.n	8008be6 <TIM_OC5_SetConfig+0x82>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4a15      	ldr	r2, [pc, #84]	@ (8008c30 <TIM_OC5_SetConfig+0xcc>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d003      	beq.n	8008be6 <TIM_OC5_SetConfig+0x82>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a14      	ldr	r2, [pc, #80]	@ (8008c34 <TIM_OC5_SetConfig+0xd0>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d109      	bne.n	8008bfa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	695b      	ldr	r3, [r3, #20]
 8008bf2:	021b      	lsls	r3, r3, #8
 8008bf4:	697a      	ldr	r2, [r7, #20]
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	697a      	ldr	r2, [r7, #20]
 8008bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	685a      	ldr	r2, [r3, #4]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	621a      	str	r2, [r3, #32]
}
 8008c14:	bf00      	nop
 8008c16:	371c      	adds	r7, #28
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr
 8008c20:	40012c00 	.word	0x40012c00
 8008c24:	40013400 	.word	0x40013400
 8008c28:	40014000 	.word	0x40014000
 8008c2c:	40014400 	.word	0x40014400
 8008c30:	40014800 	.word	0x40014800
 8008c34:	40015000 	.word	0x40015000

08008c38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b087      	sub	sp, #28
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a1b      	ldr	r3, [r3, #32]
 8008c46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a1b      	ldr	r3, [r3, #32]
 8008c4c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	021b      	lsls	r3, r3, #8
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	4313      	orrs	r3, r2
 8008c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008c7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	051b      	lsls	r3, r3, #20
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4a1a      	ldr	r2, [pc, #104]	@ (8008cf8 <TIM_OC6_SetConfig+0xc0>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d013      	beq.n	8008cbc <TIM_OC6_SetConfig+0x84>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a19      	ldr	r2, [pc, #100]	@ (8008cfc <TIM_OC6_SetConfig+0xc4>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d00f      	beq.n	8008cbc <TIM_OC6_SetConfig+0x84>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4a18      	ldr	r2, [pc, #96]	@ (8008d00 <TIM_OC6_SetConfig+0xc8>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d00b      	beq.n	8008cbc <TIM_OC6_SetConfig+0x84>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a17      	ldr	r2, [pc, #92]	@ (8008d04 <TIM_OC6_SetConfig+0xcc>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d007      	beq.n	8008cbc <TIM_OC6_SetConfig+0x84>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a16      	ldr	r2, [pc, #88]	@ (8008d08 <TIM_OC6_SetConfig+0xd0>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d003      	beq.n	8008cbc <TIM_OC6_SetConfig+0x84>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4a15      	ldr	r2, [pc, #84]	@ (8008d0c <TIM_OC6_SetConfig+0xd4>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d109      	bne.n	8008cd0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	695b      	ldr	r3, [r3, #20]
 8008cc8:	029b      	lsls	r3, r3, #10
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	697a      	ldr	r2, [r7, #20]
 8008cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	68fa      	ldr	r2, [r7, #12]
 8008cda:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	685a      	ldr	r2, [r3, #4]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	621a      	str	r2, [r3, #32]
}
 8008cea:	bf00      	nop
 8008cec:	371c      	adds	r7, #28
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	40012c00 	.word	0x40012c00
 8008cfc:	40013400 	.word	0x40013400
 8008d00:	40014000 	.word	0x40014000
 8008d04:	40014400 	.word	0x40014400
 8008d08:	40014800 	.word	0x40014800
 8008d0c:	40015000 	.word	0x40015000

08008d10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b087      	sub	sp, #28
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6a1b      	ldr	r3, [r3, #32]
 8008d20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6a1b      	ldr	r3, [r3, #32]
 8008d26:	f023 0201 	bic.w	r2, r3, #1
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	699b      	ldr	r3, [r3, #24]
 8008d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	011b      	lsls	r3, r3, #4
 8008d40:	693a      	ldr	r2, [r7, #16]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	f023 030a 	bic.w	r3, r3, #10
 8008d4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d4e:	697a      	ldr	r2, [r7, #20]
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	697a      	ldr	r2, [r7, #20]
 8008d60:	621a      	str	r2, [r3, #32]
}
 8008d62:	bf00      	nop
 8008d64:	371c      	adds	r7, #28
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr

08008d6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d6e:	b480      	push	{r7}
 8008d70:	b087      	sub	sp, #28
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	60f8      	str	r0, [r7, #12]
 8008d76:	60b9      	str	r1, [r7, #8]
 8008d78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6a1b      	ldr	r3, [r3, #32]
 8008d7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6a1b      	ldr	r3, [r3, #32]
 8008d84:	f023 0210 	bic.w	r2, r3, #16
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	699b      	ldr	r3, [r3, #24]
 8008d90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008d98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	031b      	lsls	r3, r3, #12
 8008d9e:	693a      	ldr	r2, [r7, #16]
 8008da0:	4313      	orrs	r3, r2
 8008da2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008daa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	011b      	lsls	r3, r3, #4
 8008db0:	697a      	ldr	r2, [r7, #20]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	693a      	ldr	r2, [r7, #16]
 8008dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	697a      	ldr	r2, [r7, #20]
 8008dc0:	621a      	str	r2, [r3, #32]
}
 8008dc2:	bf00      	nop
 8008dc4:	371c      	adds	r7, #28
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr

08008dce <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	b085      	sub	sp, #20
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
 8008dd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008de4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008de8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008dea:	683a      	ldr	r2, [r7, #0]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	f043 0307 	orr.w	r3, r3, #7
 8008df4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	609a      	str	r2, [r3, #8]
}
 8008dfc:	bf00      	nop
 8008dfe:	3714      	adds	r7, #20
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b087      	sub	sp, #28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
 8008e14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008e22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	021a      	lsls	r2, r3, #8
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	431a      	orrs	r2, r3
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	697a      	ldr	r2, [r7, #20]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	697a      	ldr	r2, [r7, #20]
 8008e3a:	609a      	str	r2, [r3, #8]
}
 8008e3c:	bf00      	nop
 8008e3e:	371c      	adds	r7, #28
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b087      	sub	sp, #28
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	f003 031f 	and.w	r3, r3, #31
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	6a1a      	ldr	r2, [r3, #32]
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	43db      	mvns	r3, r3
 8008e6a:	401a      	ands	r2, r3
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	6a1a      	ldr	r2, [r3, #32]
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	f003 031f 	and.w	r3, r3, #31
 8008e7a:	6879      	ldr	r1, [r7, #4]
 8008e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e80:	431a      	orrs	r2, r3
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	621a      	str	r2, [r3, #32]
}
 8008e86:	bf00      	nop
 8008e88:	371c      	adds	r7, #28
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
	...

08008e94 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a26      	ldr	r2, [pc, #152]	@ (8008f38 <TIM_ResetCallback+0xa4>)
 8008ea0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4a25      	ldr	r2, [pc, #148]	@ (8008f3c <TIM_ResetCallback+0xa8>)
 8008ea8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4a24      	ldr	r2, [pc, #144]	@ (8008f40 <TIM_ResetCallback+0xac>)
 8008eb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4a23      	ldr	r2, [pc, #140]	@ (8008f44 <TIM_ResetCallback+0xb0>)
 8008eb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4a22      	ldr	r2, [pc, #136]	@ (8008f48 <TIM_ResetCallback+0xb4>)
 8008ec0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a21      	ldr	r2, [pc, #132]	@ (8008f4c <TIM_ResetCallback+0xb8>)
 8008ec8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a20      	ldr	r2, [pc, #128]	@ (8008f50 <TIM_ResetCallback+0xbc>)
 8008ed0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8008f54 <TIM_ResetCallback+0xc0>)
 8008ed8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a1e      	ldr	r2, [pc, #120]	@ (8008f58 <TIM_ResetCallback+0xc4>)
 8008ee0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4a1d      	ldr	r2, [pc, #116]	@ (8008f5c <TIM_ResetCallback+0xc8>)
 8008ee8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a1c      	ldr	r2, [pc, #112]	@ (8008f60 <TIM_ResetCallback+0xcc>)
 8008ef0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8008f64 <TIM_ResetCallback+0xd0>)
 8008ef8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4a1a      	ldr	r2, [pc, #104]	@ (8008f68 <TIM_ResetCallback+0xd4>)
 8008f00:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a19      	ldr	r2, [pc, #100]	@ (8008f6c <TIM_ResetCallback+0xd8>)
 8008f08:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a18      	ldr	r2, [pc, #96]	@ (8008f70 <TIM_ResetCallback+0xdc>)
 8008f10:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4a17      	ldr	r2, [pc, #92]	@ (8008f74 <TIM_ResetCallback+0xe0>)
 8008f18:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4a16      	ldr	r2, [pc, #88]	@ (8008f78 <TIM_ResetCallback+0xe4>)
 8008f20:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a15      	ldr	r2, [pc, #84]	@ (8008f7c <TIM_ResetCallback+0xe8>)
 8008f28:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8008f2c:	bf00      	nop
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr
 8008f38:	08001f99 	.word	0x08001f99
 8008f3c:	080081e1 	.word	0x080081e1
 8008f40:	08008259 	.word	0x08008259
 8008f44:	0800826d 	.word	0x0800826d
 8008f48:	08008209 	.word	0x08008209
 8008f4c:	0800821d 	.word	0x0800821d
 8008f50:	080081f5 	.word	0x080081f5
 8008f54:	08008231 	.word	0x08008231
 8008f58:	08008245 	.word	0x08008245
 8008f5c:	08008281 	.word	0x08008281
 8008f60:	080091d5 	.word	0x080091d5
 8008f64:	080091e9 	.word	0x080091e9
 8008f68:	080091fd 	.word	0x080091fd
 8008f6c:	08009211 	.word	0x08009211
 8008f70:	08009225 	.word	0x08009225
 8008f74:	08009239 	.word	0x08009239
 8008f78:	0800924d 	.word	0x0800924d
 8008f7c:	08009261 	.word	0x08009261

08008f80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d101      	bne.n	8008f98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f94:	2302      	movs	r3, #2
 8008f96:	e074      	b.n	8009082 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2202      	movs	r2, #2
 8008fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a34      	ldr	r2, [pc, #208]	@ (8009090 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d009      	beq.n	8008fd6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a33      	ldr	r2, [pc, #204]	@ (8009094 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d004      	beq.n	8008fd6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a31      	ldr	r2, [pc, #196]	@ (8009098 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d108      	bne.n	8008fe8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008fdc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ff2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a21      	ldr	r2, [pc, #132]	@ (8009090 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d022      	beq.n	8009056 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009018:	d01d      	beq.n	8009056 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a1f      	ldr	r2, [pc, #124]	@ (800909c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d018      	beq.n	8009056 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a1d      	ldr	r2, [pc, #116]	@ (80090a0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d013      	beq.n	8009056 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a1c      	ldr	r2, [pc, #112]	@ (80090a4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d00e      	beq.n	8009056 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a15      	ldr	r2, [pc, #84]	@ (8009094 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d009      	beq.n	8009056 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a18      	ldr	r2, [pc, #96]	@ (80090a8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d004      	beq.n	8009056 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a11      	ldr	r2, [pc, #68]	@ (8009098 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d10c      	bne.n	8009070 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800905c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	68ba      	ldr	r2, [r7, #8]
 8009064:	4313      	orrs	r3, r2
 8009066:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	68ba      	ldr	r2, [r7, #8]
 800906e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	3714      	adds	r7, #20
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr
 800908e:	bf00      	nop
 8009090:	40012c00 	.word	0x40012c00
 8009094:	40013400 	.word	0x40013400
 8009098:	40015000 	.word	0x40015000
 800909c:	40000400 	.word	0x40000400
 80090a0:	40000800 	.word	0x40000800
 80090a4:	40000c00 	.word	0x40000c00
 80090a8:	40014000 	.word	0x40014000

080090ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80090b6:	2300      	movs	r3, #0
 80090b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d101      	bne.n	80090c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80090c4:	2302      	movs	r3, #2
 80090c6:	e078      	b.n	80091ba <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2201      	movs	r2, #1
 80090cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	4313      	orrs	r3, r2
 80090dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	4313      	orrs	r3, r2
 80090ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	4313      	orrs	r3, r2
 80090f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4313      	orrs	r3, r2
 8009106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	4313      	orrs	r3, r2
 8009114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	695b      	ldr	r3, [r3, #20]
 8009120:	4313      	orrs	r3, r2
 8009122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800912e:	4313      	orrs	r3, r2
 8009130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	699b      	ldr	r3, [r3, #24]
 800913c:	041b      	lsls	r3, r3, #16
 800913e:	4313      	orrs	r3, r2
 8009140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	69db      	ldr	r3, [r3, #28]
 800914c:	4313      	orrs	r3, r2
 800914e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a1c      	ldr	r2, [pc, #112]	@ (80091c8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d009      	beq.n	800916e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a1b      	ldr	r2, [pc, #108]	@ (80091cc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d004      	beq.n	800916e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a19      	ldr	r2, [pc, #100]	@ (80091d0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d11c      	bne.n	80091a8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009178:	051b      	lsls	r3, r3, #20
 800917a:	4313      	orrs	r3, r2
 800917c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	6a1b      	ldr	r3, [r3, #32]
 8009188:	4313      	orrs	r3, r2
 800918a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009196:	4313      	orrs	r3, r2
 8009198:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091a4:	4313      	orrs	r3, r2
 80091a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	68fa      	ldr	r2, [r7, #12]
 80091ae:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80091b8:	2300      	movs	r3, #0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3714      	adds	r7, #20
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr
 80091c6:	bf00      	nop
 80091c8:	40012c00 	.word	0x40012c00
 80091cc:	40013400 	.word	0x40013400
 80091d0:	40015000 	.word	0x40015000

080091d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091dc:	bf00      	nop
 80091de:	370c      	adds	r7, #12
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009204:	bf00      	nop
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009218:	bf00      	nop
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800922c:	bf00      	nop
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009240:	bf00      	nop
 8009242:	370c      	adds	r7, #12
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009254:	bf00      	nop
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009268:	bf00      	nop
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d101      	bne.n	8009286 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	e050      	b.n	8009328 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800928c:	2b00      	cmp	r3, #0
 800928e:	d114      	bne.n	80092ba <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 fd45 	bl	8009d28 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d103      	bne.n	80092b0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a21      	ldr	r2, [pc, #132]	@ (8009330 <HAL_UART_Init+0xbc>)
 80092ac:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2224      	movs	r2, #36	@ 0x24
 80092be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f022 0201 	bic.w	r2, r2, #1
 80092d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d002      	beq.n	80092e0 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f001 f872 	bl	800a3c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 fd73 	bl	8009dcc <UART_SetConfig>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d101      	bne.n	80092f0 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 80092ec:	2301      	movs	r3, #1
 80092ee:	e01b      	b.n	8009328 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	685a      	ldr	r2, [r3, #4]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80092fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	689a      	ldr	r2, [r3, #8]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800930e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f042 0201 	orr.w	r2, r2, #1
 800931e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f001 f8f1 	bl	800a508 <UART_CheckIdleState>
 8009326:	4603      	mov	r3, r0
}
 8009328:	4618      	mov	r0, r3
 800932a:	3708      	adds	r7, #8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}
 8009330:	080033bd 	.word	0x080033bd

08009334 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009334:	b480      	push	{r7}
 8009336:	b087      	sub	sp, #28
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	460b      	mov	r3, r1
 800933e:	607a      	str	r2, [r7, #4]
 8009340:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009342:	2300      	movs	r3, #0
 8009344:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d109      	bne.n	8009360 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009352:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	e09c      	b.n	800949a <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009366:	2b20      	cmp	r3, #32
 8009368:	d16c      	bne.n	8009444 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800936a:	7afb      	ldrb	r3, [r7, #11]
 800936c:	2b0c      	cmp	r3, #12
 800936e:	d85e      	bhi.n	800942e <HAL_UART_RegisterCallback+0xfa>
 8009370:	a201      	add	r2, pc, #4	@ (adr r2, 8009378 <HAL_UART_RegisterCallback+0x44>)
 8009372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009376:	bf00      	nop
 8009378:	080093ad 	.word	0x080093ad
 800937c:	080093b7 	.word	0x080093b7
 8009380:	080093c1 	.word	0x080093c1
 8009384:	080093cb 	.word	0x080093cb
 8009388:	080093d5 	.word	0x080093d5
 800938c:	080093df 	.word	0x080093df
 8009390:	080093e9 	.word	0x080093e9
 8009394:	080093f3 	.word	0x080093f3
 8009398:	080093fd 	.word	0x080093fd
 800939c:	08009407 	.word	0x08009407
 80093a0:	08009411 	.word	0x08009411
 80093a4:	0800941b 	.word	0x0800941b
 80093a8:	08009425 	.word	0x08009425
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80093b4:	e070      	b.n	8009498 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80093be:	e06b      	b.n	8009498 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80093c8:	e066      	b.n	8009498 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80093d2:	e061      	b.n	8009498 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80093dc:	e05c      	b.n	8009498 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80093e6:	e057      	b.n	8009498 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80093f0:	e052      	b.n	8009498 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80093fa:	e04d      	b.n	8009498 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009404:	e048      	b.n	8009498 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800940e:	e043      	b.n	8009498 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009418:	e03e      	b.n	8009498 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009422:	e039      	b.n	8009498 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800942c:	e034      	b.n	8009498 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009434:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	75fb      	strb	r3, [r7, #23]
        break;
 8009442:	e029      	b.n	8009498 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800944a:	2b00      	cmp	r3, #0
 800944c:	d11a      	bne.n	8009484 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800944e:	7afb      	ldrb	r3, [r7, #11]
 8009450:	2b0b      	cmp	r3, #11
 8009452:	d002      	beq.n	800945a <HAL_UART_RegisterCallback+0x126>
 8009454:	2b0c      	cmp	r3, #12
 8009456:	d005      	beq.n	8009464 <HAL_UART_RegisterCallback+0x130>
 8009458:	e009      	b.n	800946e <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009462:	e019      	b.n	8009498 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800946c:	e014      	b.n	8009498 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009474:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	75fb      	strb	r3, [r7, #23]
        break;
 8009482:	e009      	b.n	8009498 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800948a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8009494:	2301      	movs	r3, #1
 8009496:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009498:	7dfb      	ldrb	r3, [r7, #23]
}
 800949a:	4618      	mov	r0, r3
 800949c:	371c      	adds	r7, #28
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr
 80094a6:	bf00      	nop

080094a8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b08a      	sub	sp, #40	@ 0x28
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	4613      	mov	r3, r2
 80094b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094bc:	2b20      	cmp	r3, #32
 80094be:	d137      	bne.n	8009530 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d002      	beq.n	80094cc <HAL_UART_Receive_DMA+0x24>
 80094c6:	88fb      	ldrh	r3, [r7, #6]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d101      	bne.n	80094d0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80094cc:	2301      	movs	r3, #1
 80094ce:	e030      	b.n	8009532 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2200      	movs	r2, #0
 80094d4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a18      	ldr	r2, [pc, #96]	@ (800953c <HAL_UART_Receive_DMA+0x94>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d01f      	beq.n	8009520 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d018      	beq.n	8009520 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	e853 3f00 	ldrex	r3, [r3]
 80094fa:	613b      	str	r3, [r7, #16]
   return(result);
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009502:	627b      	str	r3, [r7, #36]	@ 0x24
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	461a      	mov	r2, r3
 800950a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800950c:	623b      	str	r3, [r7, #32]
 800950e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009510:	69f9      	ldr	r1, [r7, #28]
 8009512:	6a3a      	ldr	r2, [r7, #32]
 8009514:	e841 2300 	strex	r3, r2, [r1]
 8009518:	61bb      	str	r3, [r7, #24]
   return(result);
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d1e6      	bne.n	80094ee <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009520:	88fb      	ldrh	r3, [r7, #6]
 8009522:	461a      	mov	r2, r3
 8009524:	68b9      	ldr	r1, [r7, #8]
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f001 f906 	bl	800a738 <UART_Start_Receive_DMA>
 800952c:	4603      	mov	r3, r0
 800952e:	e000      	b.n	8009532 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009530:	2302      	movs	r3, #2
  }
}
 8009532:	4618      	mov	r0, r3
 8009534:	3728      	adds	r7, #40	@ 0x28
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	40008000 	.word	0x40008000

08009540 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b0ba      	sub	sp, #232	@ 0xe8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	69db      	ldr	r3, [r3, #28]
 800954e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009566:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800956a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800956e:	4013      	ands	r3, r2
 8009570:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009574:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009578:	2b00      	cmp	r3, #0
 800957a:	d11b      	bne.n	80095b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800957c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009580:	f003 0320 	and.w	r3, r3, #32
 8009584:	2b00      	cmp	r3, #0
 8009586:	d015      	beq.n	80095b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800958c:	f003 0320 	and.w	r3, r3, #32
 8009590:	2b00      	cmp	r3, #0
 8009592:	d105      	bne.n	80095a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800959c:	2b00      	cmp	r3, #0
 800959e:	d009      	beq.n	80095b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	f000 82f3 	beq.w	8009b90 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	4798      	blx	r3
      }
      return;
 80095b2:	e2ed      	b.n	8009b90 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80095b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	f000 8129 	beq.w	8009810 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80095be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80095c2:	4b90      	ldr	r3, [pc, #576]	@ (8009804 <HAL_UART_IRQHandler+0x2c4>)
 80095c4:	4013      	ands	r3, r2
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d106      	bne.n	80095d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80095ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80095ce:	4b8e      	ldr	r3, [pc, #568]	@ (8009808 <HAL_UART_IRQHandler+0x2c8>)
 80095d0:	4013      	ands	r3, r2
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	f000 811c 	beq.w	8009810 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80095d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095dc:	f003 0301 	and.w	r3, r3, #1
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d011      	beq.n	8009608 <HAL_UART_IRQHandler+0xc8>
 80095e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d00b      	beq.n	8009608 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2201      	movs	r2, #1
 80095f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095fe:	f043 0201 	orr.w	r2, r3, #1
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800960c:	f003 0302 	and.w	r3, r3, #2
 8009610:	2b00      	cmp	r3, #0
 8009612:	d011      	beq.n	8009638 <HAL_UART_IRQHandler+0xf8>
 8009614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009618:	f003 0301 	and.w	r3, r3, #1
 800961c:	2b00      	cmp	r3, #0
 800961e:	d00b      	beq.n	8009638 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2202      	movs	r2, #2
 8009626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800962e:	f043 0204 	orr.w	r2, r3, #4
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800963c:	f003 0304 	and.w	r3, r3, #4
 8009640:	2b00      	cmp	r3, #0
 8009642:	d011      	beq.n	8009668 <HAL_UART_IRQHandler+0x128>
 8009644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009648:	f003 0301 	and.w	r3, r3, #1
 800964c:	2b00      	cmp	r3, #0
 800964e:	d00b      	beq.n	8009668 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2204      	movs	r2, #4
 8009656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800965e:	f043 0202 	orr.w	r2, r3, #2
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800966c:	f003 0308 	and.w	r3, r3, #8
 8009670:	2b00      	cmp	r3, #0
 8009672:	d017      	beq.n	80096a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009678:	f003 0320 	and.w	r3, r3, #32
 800967c:	2b00      	cmp	r3, #0
 800967e:	d105      	bne.n	800968c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009680:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009684:	4b5f      	ldr	r3, [pc, #380]	@ (8009804 <HAL_UART_IRQHandler+0x2c4>)
 8009686:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00b      	beq.n	80096a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2208      	movs	r2, #8
 8009692:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800969a:	f043 0208 	orr.w	r2, r3, #8
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80096a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d012      	beq.n	80096d6 <HAL_UART_IRQHandler+0x196>
 80096b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00c      	beq.n	80096d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80096c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096cc:	f043 0220 	orr.w	r2, r3, #32
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f000 8259 	beq.w	8009b94 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80096e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096e6:	f003 0320 	and.w	r3, r3, #32
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d013      	beq.n	8009716 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80096ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096f2:	f003 0320 	and.w	r3, r3, #32
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d105      	bne.n	8009706 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80096fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009702:	2b00      	cmp	r3, #0
 8009704:	d007      	beq.n	8009716 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800970a:	2b00      	cmp	r3, #0
 800970c:	d003      	beq.n	8009716 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800971c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800972a:	2b40      	cmp	r3, #64	@ 0x40
 800972c:	d005      	beq.n	800973a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800972e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009732:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009736:	2b00      	cmp	r3, #0
 8009738:	d058      	beq.n	80097ec <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f001 f8e3 	bl	800a906 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800974a:	2b40      	cmp	r3, #64	@ 0x40
 800974c:	d148      	bne.n	80097e0 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	3308      	adds	r3, #8
 8009754:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009758:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800975c:	e853 3f00 	ldrex	r3, [r3]
 8009760:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009764:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009768:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800976c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	3308      	adds	r3, #8
 8009776:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800977a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800977e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009782:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009786:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800978a:	e841 2300 	strex	r3, r2, [r1]
 800978e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009792:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d1d9      	bne.n	800974e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d017      	beq.n	80097d4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097aa:	4a18      	ldr	r2, [pc, #96]	@ (800980c <HAL_UART_IRQHandler+0x2cc>)
 80097ac:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097b4:	4618      	mov	r0, r3
 80097b6:	f7fc f8bb 	bl	8005930 <HAL_DMA_Abort_IT>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d01f      	beq.n	8009800 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80097ce:	4610      	mov	r0, r2
 80097d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097d2:	e015      	b.n	8009800 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097de:	e00f      	b.n	8009800 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097ea:	e009      	b.n	8009800 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80097fe:	e1c9      	b.n	8009b94 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009800:	bf00      	nop
    return;
 8009802:	e1c7      	b.n	8009b94 <HAL_UART_IRQHandler+0x654>
 8009804:	10000001 	.word	0x10000001
 8009808:	04000120 	.word	0x04000120
 800980c:	0800abd1 	.word	0x0800abd1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009814:	2b01      	cmp	r3, #1
 8009816:	f040 8157 	bne.w	8009ac8 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800981a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800981e:	f003 0310 	and.w	r3, r3, #16
 8009822:	2b00      	cmp	r3, #0
 8009824:	f000 8150 	beq.w	8009ac8 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800982c:	f003 0310 	and.w	r3, r3, #16
 8009830:	2b00      	cmp	r3, #0
 8009832:	f000 8149 	beq.w	8009ac8 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2210      	movs	r2, #16
 800983c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009848:	2b40      	cmp	r3, #64	@ 0x40
 800984a:	f040 80bd 	bne.w	80099c8 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800985c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009860:	2b00      	cmp	r3, #0
 8009862:	f000 8199 	beq.w	8009b98 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800986c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009870:	429a      	cmp	r2, r3
 8009872:	f080 8191 	bcs.w	8009b98 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800987c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f003 0320 	and.w	r3, r3, #32
 800988e:	2b00      	cmp	r3, #0
 8009890:	f040 8087 	bne.w	80099a2 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80098a0:	e853 3f00 	ldrex	r3, [r3]
 80098a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80098a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80098ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	461a      	mov	r2, r3
 80098ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80098be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80098c2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80098ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80098ce:	e841 2300 	strex	r3, r2, [r1]
 80098d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80098d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d1da      	bne.n	8009894 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	3308      	adds	r3, #8
 80098e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80098e8:	e853 3f00 	ldrex	r3, [r3]
 80098ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80098ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80098f0:	f023 0301 	bic.w	r3, r3, #1
 80098f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	3308      	adds	r3, #8
 80098fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009902:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009906:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009908:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800990a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800990e:	e841 2300 	strex	r3, r2, [r1]
 8009912:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009914:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1e1      	bne.n	80098de <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	3308      	adds	r3, #8
 8009920:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009922:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009924:	e853 3f00 	ldrex	r3, [r3]
 8009928:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800992a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800992c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009930:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	3308      	adds	r3, #8
 800993a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800993e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009940:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009942:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009944:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009946:	e841 2300 	strex	r3, r2, [r1]
 800994a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800994c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1e3      	bne.n	800991a <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2220      	movs	r2, #32
 8009956:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009966:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009968:	e853 3f00 	ldrex	r3, [r3]
 800996c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800996e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009970:	f023 0310 	bic.w	r3, r3, #16
 8009974:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	461a      	mov	r2, r3
 800997e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009982:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009984:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009986:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009988:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800998a:	e841 2300 	strex	r3, r2, [r1]
 800998e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009990:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009992:	2b00      	cmp	r3, #0
 8009994:	d1e4      	bne.n	8009960 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800999c:	4618      	mov	r0, r3
 800999e:	f7fb ff6e 	bl	800587e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2202      	movs	r2, #2
 80099a6:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 80099ba:	b292      	uxth	r2, r2
 80099bc:	1a8a      	subs	r2, r1, r2
 80099be:	b292      	uxth	r2, r2
 80099c0:	4611      	mov	r1, r2
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80099c6:	e0e7      	b.n	8009b98 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	1ad3      	subs	r3, r2, r3
 80099d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	f000 80d9 	beq.w	8009b9c <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 80099ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	f000 80d4 	beq.w	8009b9c <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099fc:	e853 3f00 	ldrex	r3, [r3]
 8009a00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	461a      	mov	r2, r3
 8009a12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009a16:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a18:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a1e:	e841 2300 	strex	r3, r2, [r1]
 8009a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1e4      	bne.n	80099f4 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	3308      	adds	r3, #8
 8009a30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a34:	e853 3f00 	ldrex	r3, [r3]
 8009a38:	623b      	str	r3, [r7, #32]
   return(result);
 8009a3a:	6a3b      	ldr	r3, [r7, #32]
 8009a3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a40:	f023 0301 	bic.w	r3, r3, #1
 8009a44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	3308      	adds	r3, #8
 8009a4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009a52:	633a      	str	r2, [r7, #48]	@ 0x30
 8009a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a5a:	e841 2300 	strex	r3, r2, [r1]
 8009a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d1e1      	bne.n	8009a2a <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2220      	movs	r2, #32
 8009a6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	e853 3f00 	ldrex	r3, [r3]
 8009a86:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f023 0310 	bic.w	r3, r3, #16
 8009a8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	461a      	mov	r2, r3
 8009a98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009a9c:	61fb      	str	r3, [r7, #28]
 8009a9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa0:	69b9      	ldr	r1, [r7, #24]
 8009aa2:	69fa      	ldr	r2, [r7, #28]
 8009aa4:	e841 2300 	strex	r3, r2, [r1]
 8009aa8:	617b      	str	r3, [r7, #20]
   return(result);
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d1e4      	bne.n	8009a7a <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2202      	movs	r2, #2
 8009ab4:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009abc:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8009ac0:	4611      	mov	r1, r2
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009ac6:	e069      	b.n	8009b9c <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009acc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d010      	beq.n	8009af6 <HAL_UART_IRQHandler+0x5b6>
 8009ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ad8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00a      	beq.n	8009af6 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009ae8:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009af4:	e055      	b.n	8009ba2 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d014      	beq.n	8009b2c <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d105      	bne.n	8009b1a <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d008      	beq.n	8009b2c <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d03e      	beq.n	8009ba0 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	4798      	blx	r3
    }
    return;
 8009b2a:	e039      	b.n	8009ba0 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d009      	beq.n	8009b4c <HAL_UART_IRQHandler+0x60c>
 8009b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d003      	beq.n	8009b4c <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f001 f85b 	bl	800ac00 <UART_EndTransmit_IT>
    return;
 8009b4a:	e02a      	b.n	8009ba2 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00b      	beq.n	8009b70 <HAL_UART_IRQHandler+0x630>
 8009b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b5c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d005      	beq.n	8009b70 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b6e:	e018      	b.n	8009ba2 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d012      	beq.n	8009ba2 <HAL_UART_IRQHandler+0x662>
 8009b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	da0e      	bge.n	8009ba2 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b8e:	e008      	b.n	8009ba2 <HAL_UART_IRQHandler+0x662>
      return;
 8009b90:	bf00      	nop
 8009b92:	e006      	b.n	8009ba2 <HAL_UART_IRQHandler+0x662>
    return;
 8009b94:	bf00      	nop
 8009b96:	e004      	b.n	8009ba2 <HAL_UART_IRQHandler+0x662>
      return;
 8009b98:	bf00      	nop
 8009b9a:	e002      	b.n	8009ba2 <HAL_UART_IRQHandler+0x662>
      return;
 8009b9c:	bf00      	nop
 8009b9e:	e000      	b.n	8009ba2 <HAL_UART_IRQHandler+0x662>
    return;
 8009ba0:	bf00      	nop
  }
}
 8009ba2:	37e8      	adds	r7, #232	@ 0xe8
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009bb0:	bf00      	nop
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009bc4:	bf00      	nop
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b083      	sub	sp, #12
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009bd8:	bf00      	nop
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009bec:	bf00      	nop
 8009bee:	370c      	adds	r7, #12
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009c00:	bf00      	nop
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009c14:	bf00      	nop
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009c28:	bf00      	nop
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009c3c:	bf00      	nop
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	460b      	mov	r3, r1
 8009c52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009c54:	bf00      	nop
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4a09      	ldr	r2, [pc, #36]	@ (8009c94 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d009      	beq.n	8009c88 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	695b      	ldr	r3, [r3, #20]
 8009c7a:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	683a      	ldr	r2, [r7, #0]
 8009c84:	430a      	orrs	r2, r1
 8009c86:	615a      	str	r2, [r3, #20]
  }
}
 8009c88:	bf00      	nop
 8009c8a:	370c      	adds	r7, #12
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr
 8009c94:	40008000 	.word	0x40008000

08009c98 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b083      	sub	sp, #12
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a18      	ldr	r2, [pc, #96]	@ (8009d08 <HAL_UART_EnableReceiverTimeout+0x70>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d027      	beq.n	8009cfa <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cb0:	2b20      	cmp	r3, #32
 8009cb2:	d120      	bne.n	8009cf6 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d101      	bne.n	8009cc2 <HAL_UART_EnableReceiverTimeout+0x2a>
 8009cbe:	2302      	movs	r3, #2
 8009cc0:	e01c      	b.n	8009cfc <HAL_UART_EnableReceiverTimeout+0x64>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2224      	movs	r2, #36	@ 0x24
 8009cce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	685a      	ldr	r2, [r3, #4]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8009ce0:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2220      	movs	r2, #32
 8009ce6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	e002      	b.n	8009cfc <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8009cf6:	2302      	movs	r3, #2
 8009cf8:	e000      	b.n	8009cfc <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
  }
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	370c      	adds	r7, #12
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr
 8009d08:	40008000 	.word	0x40008000

08009d0c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	370c      	adds	r7, #12
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr
	...

08009d28 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	4a1a      	ldr	r2, [pc, #104]	@ (8009d9c <UART_InitCallbacksToDefault+0x74>)
 8009d34:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a19      	ldr	r2, [pc, #100]	@ (8009da0 <UART_InitCallbacksToDefault+0x78>)
 8009d3c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a18      	ldr	r2, [pc, #96]	@ (8009da4 <UART_InitCallbacksToDefault+0x7c>)
 8009d44:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a17      	ldr	r2, [pc, #92]	@ (8009da8 <UART_InitCallbacksToDefault+0x80>)
 8009d4c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a16      	ldr	r2, [pc, #88]	@ (8009dac <UART_InitCallbacksToDefault+0x84>)
 8009d54:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a15      	ldr	r2, [pc, #84]	@ (8009db0 <UART_InitCallbacksToDefault+0x88>)
 8009d5c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a14      	ldr	r2, [pc, #80]	@ (8009db4 <UART_InitCallbacksToDefault+0x8c>)
 8009d64:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a13      	ldr	r2, [pc, #76]	@ (8009db8 <UART_InitCallbacksToDefault+0x90>)
 8009d6c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4a12      	ldr	r2, [pc, #72]	@ (8009dbc <UART_InitCallbacksToDefault+0x94>)
 8009d74:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	4a11      	ldr	r2, [pc, #68]	@ (8009dc0 <UART_InitCallbacksToDefault+0x98>)
 8009d7c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	4a10      	ldr	r2, [pc, #64]	@ (8009dc4 <UART_InitCallbacksToDefault+0x9c>)
 8009d84:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4a0f      	ldr	r2, [pc, #60]	@ (8009dc8 <UART_InitCallbacksToDefault+0xa0>)
 8009d8c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8009d90:	bf00      	nop
 8009d92:	370c      	adds	r7, #12
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr
 8009d9c:	08009bbd 	.word	0x08009bbd
 8009da0:	08009ba9 	.word	0x08009ba9
 8009da4:	08009be5 	.word	0x08009be5
 8009da8:	08009bd1 	.word	0x08009bd1
 8009dac:	08009bf9 	.word	0x08009bf9
 8009db0:	08009c0d 	.word	0x08009c0d
 8009db4:	08009c21 	.word	0x08009c21
 8009db8:	08009c35 	.word	0x08009c35
 8009dbc:	0800ac5b 	.word	0x0800ac5b
 8009dc0:	0800ac6f 	.word	0x0800ac6f
 8009dc4:	0800ac83 	.word	0x0800ac83
 8009dc8:	08009c49 	.word	0x08009c49

08009dcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009dd0:	b08c      	sub	sp, #48	@ 0x30
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	689a      	ldr	r2, [r3, #8]
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	691b      	ldr	r3, [r3, #16]
 8009de4:	431a      	orrs	r2, r3
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	695b      	ldr	r3, [r3, #20]
 8009dea:	431a      	orrs	r2, r3
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	69db      	ldr	r3, [r3, #28]
 8009df0:	4313      	orrs	r3, r2
 8009df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	4baa      	ldr	r3, [pc, #680]	@ (800a0a4 <UART_SetConfig+0x2d8>)
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	697a      	ldr	r2, [r7, #20]
 8009e00:	6812      	ldr	r2, [r2, #0]
 8009e02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e04:	430b      	orrs	r3, r1
 8009e06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	68da      	ldr	r2, [r3, #12]
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	430a      	orrs	r2, r1
 8009e1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	699b      	ldr	r3, [r3, #24]
 8009e22:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a9f      	ldr	r2, [pc, #636]	@ (800a0a8 <UART_SetConfig+0x2dc>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d004      	beq.n	8009e38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	6a1b      	ldr	r3, [r3, #32]
 8009e32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e34:	4313      	orrs	r3, r2
 8009e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009e42:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009e46:	697a      	ldr	r2, [r7, #20]
 8009e48:	6812      	ldr	r2, [r2, #0]
 8009e4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e4c:	430b      	orrs	r3, r1
 8009e4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e56:	f023 010f 	bic.w	r1, r3, #15
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	430a      	orrs	r2, r1
 8009e64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a90      	ldr	r2, [pc, #576]	@ (800a0ac <UART_SetConfig+0x2e0>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d125      	bne.n	8009ebc <UART_SetConfig+0xf0>
 8009e70:	4b8f      	ldr	r3, [pc, #572]	@ (800a0b0 <UART_SetConfig+0x2e4>)
 8009e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e76:	f003 0303 	and.w	r3, r3, #3
 8009e7a:	2b03      	cmp	r3, #3
 8009e7c:	d81a      	bhi.n	8009eb4 <UART_SetConfig+0xe8>
 8009e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e84 <UART_SetConfig+0xb8>)
 8009e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e84:	08009e95 	.word	0x08009e95
 8009e88:	08009ea5 	.word	0x08009ea5
 8009e8c:	08009e9d 	.word	0x08009e9d
 8009e90:	08009ead 	.word	0x08009ead
 8009e94:	2301      	movs	r3, #1
 8009e96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009e9a:	e116      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009e9c:	2302      	movs	r3, #2
 8009e9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ea2:	e112      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009ea4:	2304      	movs	r3, #4
 8009ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eaa:	e10e      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009eac:	2308      	movs	r3, #8
 8009eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eb2:	e10a      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009eb4:	2310      	movs	r3, #16
 8009eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009eba:	e106      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a7c      	ldr	r2, [pc, #496]	@ (800a0b4 <UART_SetConfig+0x2e8>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d138      	bne.n	8009f38 <UART_SetConfig+0x16c>
 8009ec6:	4b7a      	ldr	r3, [pc, #488]	@ (800a0b0 <UART_SetConfig+0x2e4>)
 8009ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ecc:	f003 030c 	and.w	r3, r3, #12
 8009ed0:	2b0c      	cmp	r3, #12
 8009ed2:	d82d      	bhi.n	8009f30 <UART_SetConfig+0x164>
 8009ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8009edc <UART_SetConfig+0x110>)
 8009ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eda:	bf00      	nop
 8009edc:	08009f11 	.word	0x08009f11
 8009ee0:	08009f31 	.word	0x08009f31
 8009ee4:	08009f31 	.word	0x08009f31
 8009ee8:	08009f31 	.word	0x08009f31
 8009eec:	08009f21 	.word	0x08009f21
 8009ef0:	08009f31 	.word	0x08009f31
 8009ef4:	08009f31 	.word	0x08009f31
 8009ef8:	08009f31 	.word	0x08009f31
 8009efc:	08009f19 	.word	0x08009f19
 8009f00:	08009f31 	.word	0x08009f31
 8009f04:	08009f31 	.word	0x08009f31
 8009f08:	08009f31 	.word	0x08009f31
 8009f0c:	08009f29 	.word	0x08009f29
 8009f10:	2300      	movs	r3, #0
 8009f12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f16:	e0d8      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009f18:	2302      	movs	r3, #2
 8009f1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f1e:	e0d4      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009f20:	2304      	movs	r3, #4
 8009f22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f26:	e0d0      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009f28:	2308      	movs	r3, #8
 8009f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f2e:	e0cc      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009f30:	2310      	movs	r3, #16
 8009f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f36:	e0c8      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a5e      	ldr	r2, [pc, #376]	@ (800a0b8 <UART_SetConfig+0x2ec>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d125      	bne.n	8009f8e <UART_SetConfig+0x1c2>
 8009f42:	4b5b      	ldr	r3, [pc, #364]	@ (800a0b0 <UART_SetConfig+0x2e4>)
 8009f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f48:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009f4c:	2b30      	cmp	r3, #48	@ 0x30
 8009f4e:	d016      	beq.n	8009f7e <UART_SetConfig+0x1b2>
 8009f50:	2b30      	cmp	r3, #48	@ 0x30
 8009f52:	d818      	bhi.n	8009f86 <UART_SetConfig+0x1ba>
 8009f54:	2b20      	cmp	r3, #32
 8009f56:	d00a      	beq.n	8009f6e <UART_SetConfig+0x1a2>
 8009f58:	2b20      	cmp	r3, #32
 8009f5a:	d814      	bhi.n	8009f86 <UART_SetConfig+0x1ba>
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d002      	beq.n	8009f66 <UART_SetConfig+0x19a>
 8009f60:	2b10      	cmp	r3, #16
 8009f62:	d008      	beq.n	8009f76 <UART_SetConfig+0x1aa>
 8009f64:	e00f      	b.n	8009f86 <UART_SetConfig+0x1ba>
 8009f66:	2300      	movs	r3, #0
 8009f68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f6c:	e0ad      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009f6e:	2302      	movs	r3, #2
 8009f70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f74:	e0a9      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009f76:	2304      	movs	r3, #4
 8009f78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f7c:	e0a5      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009f7e:	2308      	movs	r3, #8
 8009f80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f84:	e0a1      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009f86:	2310      	movs	r3, #16
 8009f88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f8c:	e09d      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a4a      	ldr	r2, [pc, #296]	@ (800a0bc <UART_SetConfig+0x2f0>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d125      	bne.n	8009fe4 <UART_SetConfig+0x218>
 8009f98:	4b45      	ldr	r3, [pc, #276]	@ (800a0b0 <UART_SetConfig+0x2e4>)
 8009f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f9e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009fa2:	2bc0      	cmp	r3, #192	@ 0xc0
 8009fa4:	d016      	beq.n	8009fd4 <UART_SetConfig+0x208>
 8009fa6:	2bc0      	cmp	r3, #192	@ 0xc0
 8009fa8:	d818      	bhi.n	8009fdc <UART_SetConfig+0x210>
 8009faa:	2b80      	cmp	r3, #128	@ 0x80
 8009fac:	d00a      	beq.n	8009fc4 <UART_SetConfig+0x1f8>
 8009fae:	2b80      	cmp	r3, #128	@ 0x80
 8009fb0:	d814      	bhi.n	8009fdc <UART_SetConfig+0x210>
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d002      	beq.n	8009fbc <UART_SetConfig+0x1f0>
 8009fb6:	2b40      	cmp	r3, #64	@ 0x40
 8009fb8:	d008      	beq.n	8009fcc <UART_SetConfig+0x200>
 8009fba:	e00f      	b.n	8009fdc <UART_SetConfig+0x210>
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fc2:	e082      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009fc4:	2302      	movs	r3, #2
 8009fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fca:	e07e      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009fcc:	2304      	movs	r3, #4
 8009fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fd2:	e07a      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009fd4:	2308      	movs	r3, #8
 8009fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fda:	e076      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009fdc:	2310      	movs	r3, #16
 8009fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fe2:	e072      	b.n	800a0ca <UART_SetConfig+0x2fe>
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4a35      	ldr	r2, [pc, #212]	@ (800a0c0 <UART_SetConfig+0x2f4>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d12a      	bne.n	800a044 <UART_SetConfig+0x278>
 8009fee:	4b30      	ldr	r3, [pc, #192]	@ (800a0b0 <UART_SetConfig+0x2e4>)
 8009ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ff4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009ff8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ffc:	d01a      	beq.n	800a034 <UART_SetConfig+0x268>
 8009ffe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a002:	d81b      	bhi.n	800a03c <UART_SetConfig+0x270>
 800a004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a008:	d00c      	beq.n	800a024 <UART_SetConfig+0x258>
 800a00a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a00e:	d815      	bhi.n	800a03c <UART_SetConfig+0x270>
 800a010:	2b00      	cmp	r3, #0
 800a012:	d003      	beq.n	800a01c <UART_SetConfig+0x250>
 800a014:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a018:	d008      	beq.n	800a02c <UART_SetConfig+0x260>
 800a01a:	e00f      	b.n	800a03c <UART_SetConfig+0x270>
 800a01c:	2300      	movs	r3, #0
 800a01e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a022:	e052      	b.n	800a0ca <UART_SetConfig+0x2fe>
 800a024:	2302      	movs	r3, #2
 800a026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a02a:	e04e      	b.n	800a0ca <UART_SetConfig+0x2fe>
 800a02c:	2304      	movs	r3, #4
 800a02e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a032:	e04a      	b.n	800a0ca <UART_SetConfig+0x2fe>
 800a034:	2308      	movs	r3, #8
 800a036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a03a:	e046      	b.n	800a0ca <UART_SetConfig+0x2fe>
 800a03c:	2310      	movs	r3, #16
 800a03e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a042:	e042      	b.n	800a0ca <UART_SetConfig+0x2fe>
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a17      	ldr	r2, [pc, #92]	@ (800a0a8 <UART_SetConfig+0x2dc>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d13a      	bne.n	800a0c4 <UART_SetConfig+0x2f8>
 800a04e:	4b18      	ldr	r3, [pc, #96]	@ (800a0b0 <UART_SetConfig+0x2e4>)
 800a050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a054:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a058:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a05c:	d01a      	beq.n	800a094 <UART_SetConfig+0x2c8>
 800a05e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a062:	d81b      	bhi.n	800a09c <UART_SetConfig+0x2d0>
 800a064:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a068:	d00c      	beq.n	800a084 <UART_SetConfig+0x2b8>
 800a06a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a06e:	d815      	bhi.n	800a09c <UART_SetConfig+0x2d0>
 800a070:	2b00      	cmp	r3, #0
 800a072:	d003      	beq.n	800a07c <UART_SetConfig+0x2b0>
 800a074:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a078:	d008      	beq.n	800a08c <UART_SetConfig+0x2c0>
 800a07a:	e00f      	b.n	800a09c <UART_SetConfig+0x2d0>
 800a07c:	2300      	movs	r3, #0
 800a07e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a082:	e022      	b.n	800a0ca <UART_SetConfig+0x2fe>
 800a084:	2302      	movs	r3, #2
 800a086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a08a:	e01e      	b.n	800a0ca <UART_SetConfig+0x2fe>
 800a08c:	2304      	movs	r3, #4
 800a08e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a092:	e01a      	b.n	800a0ca <UART_SetConfig+0x2fe>
 800a094:	2308      	movs	r3, #8
 800a096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a09a:	e016      	b.n	800a0ca <UART_SetConfig+0x2fe>
 800a09c:	2310      	movs	r3, #16
 800a09e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0a2:	e012      	b.n	800a0ca <UART_SetConfig+0x2fe>
 800a0a4:	cfff69f3 	.word	0xcfff69f3
 800a0a8:	40008000 	.word	0x40008000
 800a0ac:	40013800 	.word	0x40013800
 800a0b0:	40021000 	.word	0x40021000
 800a0b4:	40004400 	.word	0x40004400
 800a0b8:	40004800 	.word	0x40004800
 800a0bc:	40004c00 	.word	0x40004c00
 800a0c0:	40005000 	.word	0x40005000
 800a0c4:	2310      	movs	r3, #16
 800a0c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4aae      	ldr	r2, [pc, #696]	@ (800a388 <UART_SetConfig+0x5bc>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	f040 8097 	bne.w	800a204 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a0d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a0da:	2b08      	cmp	r3, #8
 800a0dc:	d823      	bhi.n	800a126 <UART_SetConfig+0x35a>
 800a0de:	a201      	add	r2, pc, #4	@ (adr r2, 800a0e4 <UART_SetConfig+0x318>)
 800a0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e4:	0800a109 	.word	0x0800a109
 800a0e8:	0800a127 	.word	0x0800a127
 800a0ec:	0800a111 	.word	0x0800a111
 800a0f0:	0800a127 	.word	0x0800a127
 800a0f4:	0800a117 	.word	0x0800a117
 800a0f8:	0800a127 	.word	0x0800a127
 800a0fc:	0800a127 	.word	0x0800a127
 800a100:	0800a127 	.word	0x0800a127
 800a104:	0800a11f 	.word	0x0800a11f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a108:	f7fc fd02 	bl	8006b10 <HAL_RCC_GetPCLK1Freq>
 800a10c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a10e:	e010      	b.n	800a132 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a110:	4b9e      	ldr	r3, [pc, #632]	@ (800a38c <UART_SetConfig+0x5c0>)
 800a112:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a114:	e00d      	b.n	800a132 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a116:	f7fc fc8d 	bl	8006a34 <HAL_RCC_GetSysClockFreq>
 800a11a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a11c:	e009      	b.n	800a132 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a11e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a122:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a124:	e005      	b.n	800a132 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a126:	2300      	movs	r3, #0
 800a128:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a130:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a134:	2b00      	cmp	r3, #0
 800a136:	f000 8130 	beq.w	800a39a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a13e:	4a94      	ldr	r2, [pc, #592]	@ (800a390 <UART_SetConfig+0x5c4>)
 800a140:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a144:	461a      	mov	r2, r3
 800a146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a148:	fbb3 f3f2 	udiv	r3, r3, r2
 800a14c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	685a      	ldr	r2, [r3, #4]
 800a152:	4613      	mov	r3, r2
 800a154:	005b      	lsls	r3, r3, #1
 800a156:	4413      	add	r3, r2
 800a158:	69ba      	ldr	r2, [r7, #24]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d305      	bcc.n	800a16a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a164:	69ba      	ldr	r2, [r7, #24]
 800a166:	429a      	cmp	r2, r3
 800a168:	d903      	bls.n	800a172 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a170:	e113      	b.n	800a39a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a174:	2200      	movs	r2, #0
 800a176:	60bb      	str	r3, [r7, #8]
 800a178:	60fa      	str	r2, [r7, #12]
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a17e:	4a84      	ldr	r2, [pc, #528]	@ (800a390 <UART_SetConfig+0x5c4>)
 800a180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a184:	b29b      	uxth	r3, r3
 800a186:	2200      	movs	r2, #0
 800a188:	603b      	str	r3, [r7, #0]
 800a18a:	607a      	str	r2, [r7, #4]
 800a18c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a190:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a194:	f7f6 fd2e 	bl	8000bf4 <__aeabi_uldivmod>
 800a198:	4602      	mov	r2, r0
 800a19a:	460b      	mov	r3, r1
 800a19c:	4610      	mov	r0, r2
 800a19e:	4619      	mov	r1, r3
 800a1a0:	f04f 0200 	mov.w	r2, #0
 800a1a4:	f04f 0300 	mov.w	r3, #0
 800a1a8:	020b      	lsls	r3, r1, #8
 800a1aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a1ae:	0202      	lsls	r2, r0, #8
 800a1b0:	6979      	ldr	r1, [r7, #20]
 800a1b2:	6849      	ldr	r1, [r1, #4]
 800a1b4:	0849      	lsrs	r1, r1, #1
 800a1b6:	2000      	movs	r0, #0
 800a1b8:	460c      	mov	r4, r1
 800a1ba:	4605      	mov	r5, r0
 800a1bc:	eb12 0804 	adds.w	r8, r2, r4
 800a1c0:	eb43 0905 	adc.w	r9, r3, r5
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	469a      	mov	sl, r3
 800a1cc:	4693      	mov	fp, r2
 800a1ce:	4652      	mov	r2, sl
 800a1d0:	465b      	mov	r3, fp
 800a1d2:	4640      	mov	r0, r8
 800a1d4:	4649      	mov	r1, r9
 800a1d6:	f7f6 fd0d 	bl	8000bf4 <__aeabi_uldivmod>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	460b      	mov	r3, r1
 800a1de:	4613      	mov	r3, r2
 800a1e0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a1e2:	6a3b      	ldr	r3, [r7, #32]
 800a1e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a1e8:	d308      	bcc.n	800a1fc <UART_SetConfig+0x430>
 800a1ea:	6a3b      	ldr	r3, [r7, #32]
 800a1ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1f0:	d204      	bcs.n	800a1fc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	6a3a      	ldr	r2, [r7, #32]
 800a1f8:	60da      	str	r2, [r3, #12]
 800a1fa:	e0ce      	b.n	800a39a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a202:	e0ca      	b.n	800a39a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	69db      	ldr	r3, [r3, #28]
 800a208:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a20c:	d166      	bne.n	800a2dc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a20e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a212:	2b08      	cmp	r3, #8
 800a214:	d827      	bhi.n	800a266 <UART_SetConfig+0x49a>
 800a216:	a201      	add	r2, pc, #4	@ (adr r2, 800a21c <UART_SetConfig+0x450>)
 800a218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a21c:	0800a241 	.word	0x0800a241
 800a220:	0800a249 	.word	0x0800a249
 800a224:	0800a251 	.word	0x0800a251
 800a228:	0800a267 	.word	0x0800a267
 800a22c:	0800a257 	.word	0x0800a257
 800a230:	0800a267 	.word	0x0800a267
 800a234:	0800a267 	.word	0x0800a267
 800a238:	0800a267 	.word	0x0800a267
 800a23c:	0800a25f 	.word	0x0800a25f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a240:	f7fc fc66 	bl	8006b10 <HAL_RCC_GetPCLK1Freq>
 800a244:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a246:	e014      	b.n	800a272 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a248:	f7fc fc78 	bl	8006b3c <HAL_RCC_GetPCLK2Freq>
 800a24c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a24e:	e010      	b.n	800a272 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a250:	4b4e      	ldr	r3, [pc, #312]	@ (800a38c <UART_SetConfig+0x5c0>)
 800a252:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a254:	e00d      	b.n	800a272 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a256:	f7fc fbed 	bl	8006a34 <HAL_RCC_GetSysClockFreq>
 800a25a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a25c:	e009      	b.n	800a272 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a25e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a262:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a264:	e005      	b.n	800a272 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a266:	2300      	movs	r3, #0
 800a268:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a270:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a274:	2b00      	cmp	r3, #0
 800a276:	f000 8090 	beq.w	800a39a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a27e:	4a44      	ldr	r2, [pc, #272]	@ (800a390 <UART_SetConfig+0x5c4>)
 800a280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a284:	461a      	mov	r2, r3
 800a286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a288:	fbb3 f3f2 	udiv	r3, r3, r2
 800a28c:	005a      	lsls	r2, r3, #1
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	085b      	lsrs	r3, r3, #1
 800a294:	441a      	add	r2, r3
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a29e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2a0:	6a3b      	ldr	r3, [r7, #32]
 800a2a2:	2b0f      	cmp	r3, #15
 800a2a4:	d916      	bls.n	800a2d4 <UART_SetConfig+0x508>
 800a2a6:	6a3b      	ldr	r3, [r7, #32]
 800a2a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2ac:	d212      	bcs.n	800a2d4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a2ae:	6a3b      	ldr	r3, [r7, #32]
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	f023 030f 	bic.w	r3, r3, #15
 800a2b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2b8:	6a3b      	ldr	r3, [r7, #32]
 800a2ba:	085b      	lsrs	r3, r3, #1
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	f003 0307 	and.w	r3, r3, #7
 800a2c2:	b29a      	uxth	r2, r3
 800a2c4:	8bfb      	ldrh	r3, [r7, #30]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	8bfa      	ldrh	r2, [r7, #30]
 800a2d0:	60da      	str	r2, [r3, #12]
 800a2d2:	e062      	b.n	800a39a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a2da:	e05e      	b.n	800a39a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a2dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a2e0:	2b08      	cmp	r3, #8
 800a2e2:	d828      	bhi.n	800a336 <UART_SetConfig+0x56a>
 800a2e4:	a201      	add	r2, pc, #4	@ (adr r2, 800a2ec <UART_SetConfig+0x520>)
 800a2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ea:	bf00      	nop
 800a2ec:	0800a311 	.word	0x0800a311
 800a2f0:	0800a319 	.word	0x0800a319
 800a2f4:	0800a321 	.word	0x0800a321
 800a2f8:	0800a337 	.word	0x0800a337
 800a2fc:	0800a327 	.word	0x0800a327
 800a300:	0800a337 	.word	0x0800a337
 800a304:	0800a337 	.word	0x0800a337
 800a308:	0800a337 	.word	0x0800a337
 800a30c:	0800a32f 	.word	0x0800a32f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a310:	f7fc fbfe 	bl	8006b10 <HAL_RCC_GetPCLK1Freq>
 800a314:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a316:	e014      	b.n	800a342 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a318:	f7fc fc10 	bl	8006b3c <HAL_RCC_GetPCLK2Freq>
 800a31c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a31e:	e010      	b.n	800a342 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a320:	4b1a      	ldr	r3, [pc, #104]	@ (800a38c <UART_SetConfig+0x5c0>)
 800a322:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a324:	e00d      	b.n	800a342 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a326:	f7fc fb85 	bl	8006a34 <HAL_RCC_GetSysClockFreq>
 800a32a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a32c:	e009      	b.n	800a342 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a32e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a332:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a334:	e005      	b.n	800a342 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a336:	2300      	movs	r3, #0
 800a338:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a340:	bf00      	nop
    }

    if (pclk != 0U)
 800a342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a344:	2b00      	cmp	r3, #0
 800a346:	d028      	beq.n	800a39a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a34c:	4a10      	ldr	r2, [pc, #64]	@ (800a390 <UART_SetConfig+0x5c4>)
 800a34e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a352:	461a      	mov	r2, r3
 800a354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a356:	fbb3 f2f2 	udiv	r2, r3, r2
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	085b      	lsrs	r3, r3, #1
 800a360:	441a      	add	r2, r3
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	fbb2 f3f3 	udiv	r3, r2, r3
 800a36a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a36c:	6a3b      	ldr	r3, [r7, #32]
 800a36e:	2b0f      	cmp	r3, #15
 800a370:	d910      	bls.n	800a394 <UART_SetConfig+0x5c8>
 800a372:	6a3b      	ldr	r3, [r7, #32]
 800a374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a378:	d20c      	bcs.n	800a394 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a37a:	6a3b      	ldr	r3, [r7, #32]
 800a37c:	b29a      	uxth	r2, r3
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	60da      	str	r2, [r3, #12]
 800a384:	e009      	b.n	800a39a <UART_SetConfig+0x5ce>
 800a386:	bf00      	nop
 800a388:	40008000 	.word	0x40008000
 800a38c:	00f42400 	.word	0x00f42400
 800a390:	0800b048 	.word	0x0800b048
      }
      else
      {
        ret = HAL_ERROR;
 800a394:	2301      	movs	r3, #1
 800a396:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	2201      	movs	r2, #1
 800a39e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a3b6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3730      	adds	r7, #48	@ 0x30
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a3c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3d0:	f003 0308 	and.w	r3, r3, #8
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d00a      	beq.n	800a3ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	430a      	orrs	r2, r1
 800a3ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3f2:	f003 0301 	and.w	r3, r3, #1
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d00a      	beq.n	800a410 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	430a      	orrs	r2, r1
 800a40e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a414:	f003 0302 	and.w	r3, r3, #2
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d00a      	beq.n	800a432 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	430a      	orrs	r2, r1
 800a430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a436:	f003 0304 	and.w	r3, r3, #4
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d00a      	beq.n	800a454 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	430a      	orrs	r2, r1
 800a452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a458:	f003 0310 	and.w	r3, r3, #16
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d00a      	beq.n	800a476 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	430a      	orrs	r2, r1
 800a474:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a47a:	f003 0320 	and.w	r3, r3, #32
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d00a      	beq.n	800a498 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	430a      	orrs	r2, r1
 800a496:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a49c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d01a      	beq.n	800a4da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	430a      	orrs	r2, r1
 800a4b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4c2:	d10a      	bne.n	800a4da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	430a      	orrs	r2, r1
 800a4d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d00a      	beq.n	800a4fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	430a      	orrs	r2, r1
 800a4fa:	605a      	str	r2, [r3, #4]
  }
}
 800a4fc:	bf00      	nop
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b098      	sub	sp, #96	@ 0x60
 800a50c:	af02      	add	r7, sp, #8
 800a50e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a518:	f7f9 f950 	bl	80037bc <HAL_GetTick>
 800a51c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f003 0308 	and.w	r3, r3, #8
 800a528:	2b08      	cmp	r3, #8
 800a52a:	d12f      	bne.n	800a58c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a52c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a530:	9300      	str	r3, [sp, #0]
 800a532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a534:	2200      	movs	r2, #0
 800a536:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 f88e 	bl	800a65c <UART_WaitOnFlagUntilTimeout>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	d022      	beq.n	800a58c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a54c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a54e:	e853 3f00 	ldrex	r3, [r3]
 800a552:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a556:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a55a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	461a      	mov	r2, r3
 800a562:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a564:	647b      	str	r3, [r7, #68]	@ 0x44
 800a566:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a568:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a56a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a56c:	e841 2300 	strex	r3, r2, [r1]
 800a570:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a574:	2b00      	cmp	r3, #0
 800a576:	d1e6      	bne.n	800a546 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2220      	movs	r2, #32
 800a57c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a588:	2303      	movs	r3, #3
 800a58a:	e063      	b.n	800a654 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f003 0304 	and.w	r3, r3, #4
 800a596:	2b04      	cmp	r3, #4
 800a598:	d149      	bne.n	800a62e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a59a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a59e:	9300      	str	r3, [sp, #0]
 800a5a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 f857 	bl	800a65c <UART_WaitOnFlagUntilTimeout>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d03c      	beq.n	800a62e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5bc:	e853 3f00 	ldrex	r3, [r3]
 800a5c0:	623b      	str	r3, [r7, #32]
   return(result);
 800a5c2:	6a3b      	ldr	r3, [r7, #32]
 800a5c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a5c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5d2:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5da:	e841 2300 	strex	r3, r2, [r1]
 800a5de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d1e6      	bne.n	800a5b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	3308      	adds	r3, #8
 800a5ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	e853 3f00 	ldrex	r3, [r3]
 800a5f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f023 0301 	bic.w	r3, r3, #1
 800a5fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	3308      	adds	r3, #8
 800a604:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a606:	61fa      	str	r2, [r7, #28]
 800a608:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a60a:	69b9      	ldr	r1, [r7, #24]
 800a60c:	69fa      	ldr	r2, [r7, #28]
 800a60e:	e841 2300 	strex	r3, r2, [r1]
 800a612:	617b      	str	r3, [r7, #20]
   return(result);
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d1e5      	bne.n	800a5e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2220      	movs	r2, #32
 800a61e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2200      	movs	r2, #0
 800a626:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a62a:	2303      	movs	r3, #3
 800a62c:	e012      	b.n	800a654 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2220      	movs	r2, #32
 800a632:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2220      	movs	r2, #32
 800a63a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a652:	2300      	movs	r3, #0
}
 800a654:	4618      	mov	r0, r3
 800a656:	3758      	adds	r7, #88	@ 0x58
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	60b9      	str	r1, [r7, #8]
 800a666:	603b      	str	r3, [r7, #0]
 800a668:	4613      	mov	r3, r2
 800a66a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a66c:	e04f      	b.n	800a70e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a66e:	69bb      	ldr	r3, [r7, #24]
 800a670:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a674:	d04b      	beq.n	800a70e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a676:	f7f9 f8a1 	bl	80037bc <HAL_GetTick>
 800a67a:	4602      	mov	r2, r0
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	1ad3      	subs	r3, r2, r3
 800a680:	69ba      	ldr	r2, [r7, #24]
 800a682:	429a      	cmp	r2, r3
 800a684:	d302      	bcc.n	800a68c <UART_WaitOnFlagUntilTimeout+0x30>
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d101      	bne.n	800a690 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a68c:	2303      	movs	r3, #3
 800a68e:	e04e      	b.n	800a72e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f003 0304 	and.w	r3, r3, #4
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d037      	beq.n	800a70e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	2b80      	cmp	r3, #128	@ 0x80
 800a6a2:	d034      	beq.n	800a70e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	2b40      	cmp	r3, #64	@ 0x40
 800a6a8:	d031      	beq.n	800a70e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	69db      	ldr	r3, [r3, #28]
 800a6b0:	f003 0308 	and.w	r3, r3, #8
 800a6b4:	2b08      	cmp	r3, #8
 800a6b6:	d110      	bne.n	800a6da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	2208      	movs	r2, #8
 800a6be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6c0:	68f8      	ldr	r0, [r7, #12]
 800a6c2:	f000 f920 	bl	800a906 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2208      	movs	r2, #8
 800a6ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e029      	b.n	800a72e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	69db      	ldr	r3, [r3, #28]
 800a6e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a6e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6e8:	d111      	bne.n	800a70e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a6f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a6f4:	68f8      	ldr	r0, [r7, #12]
 800a6f6:	f000 f906 	bl	800a906 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2220      	movs	r2, #32
 800a6fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2200      	movs	r2, #0
 800a706:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a70a:	2303      	movs	r3, #3
 800a70c:	e00f      	b.n	800a72e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	69da      	ldr	r2, [r3, #28]
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	4013      	ands	r3, r2
 800a718:	68ba      	ldr	r2, [r7, #8]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	bf0c      	ite	eq
 800a71e:	2301      	moveq	r3, #1
 800a720:	2300      	movne	r3, #0
 800a722:	b2db      	uxtb	r3, r3
 800a724:	461a      	mov	r2, r3
 800a726:	79fb      	ldrb	r3, [r7, #7]
 800a728:	429a      	cmp	r2, r3
 800a72a:	d0a0      	beq.n	800a66e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3710      	adds	r7, #16
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
	...

0800a738 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b096      	sub	sp, #88	@ 0x58
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	4613      	mov	r3, r2
 800a744:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	68ba      	ldr	r2, [r7, #8]
 800a74a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	88fa      	ldrh	r2, [r7, #6]
 800a750:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2200      	movs	r2, #0
 800a758:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2222      	movs	r2, #34	@ 0x22
 800a760:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d02d      	beq.n	800a7ca <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a774:	4a40      	ldr	r2, [pc, #256]	@ (800a878 <UART_Start_Receive_DMA+0x140>)
 800a776:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a77e:	4a3f      	ldr	r2, [pc, #252]	@ (800a87c <UART_Start_Receive_DMA+0x144>)
 800a780:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a788:	4a3d      	ldr	r2, [pc, #244]	@ (800a880 <UART_Start_Receive_DMA+0x148>)
 800a78a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a792:	2200      	movs	r2, #0
 800a794:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	3324      	adds	r3, #36	@ 0x24
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	88fb      	ldrh	r3, [r7, #6]
 800a7ac:	f7fa ffec 	bl	8005788 <HAL_DMA_Start_IT>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d009      	beq.n	800a7ca <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2210      	movs	r2, #16
 800a7ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2220      	movs	r2, #32
 800a7c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	e051      	b.n	800a86e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	691b      	ldr	r3, [r3, #16]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d018      	beq.n	800a804 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7da:	e853 3f00 	ldrex	r3, [r3]
 800a7de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a7e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a7e6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a7f2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a7f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7f8:	e841 2300 	strex	r3, r2, [r1]
 800a7fc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a7fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a800:	2b00      	cmp	r3, #0
 800a802:	d1e6      	bne.n	800a7d2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	3308      	adds	r3, #8
 800a80a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a80c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a80e:	e853 3f00 	ldrex	r3, [r3]
 800a812:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a816:	f043 0301 	orr.w	r3, r3, #1
 800a81a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	3308      	adds	r3, #8
 800a822:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a824:	637a      	str	r2, [r7, #52]	@ 0x34
 800a826:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a828:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a82a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a82c:	e841 2300 	strex	r3, r2, [r1]
 800a830:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a834:	2b00      	cmp	r3, #0
 800a836:	d1e5      	bne.n	800a804 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	3308      	adds	r3, #8
 800a83e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	e853 3f00 	ldrex	r3, [r3]
 800a846:	613b      	str	r3, [r7, #16]
   return(result);
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a84e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	3308      	adds	r3, #8
 800a856:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a858:	623a      	str	r2, [r7, #32]
 800a85a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a85c:	69f9      	ldr	r1, [r7, #28]
 800a85e:	6a3a      	ldr	r2, [r7, #32]
 800a860:	e841 2300 	strex	r3, r2, [r1]
 800a864:	61bb      	str	r3, [r7, #24]
   return(result);
 800a866:	69bb      	ldr	r3, [r7, #24]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d1e5      	bne.n	800a838 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a86c:	2300      	movs	r3, #0
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3758      	adds	r7, #88	@ 0x58
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	0800a9d3 	.word	0x0800a9d3
 800a87c:	0800ab07 	.word	0x0800ab07
 800a880:	0800ab4d 	.word	0x0800ab4d

0800a884 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a884:	b480      	push	{r7}
 800a886:	b08f      	sub	sp, #60	@ 0x3c
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a892:	6a3b      	ldr	r3, [r7, #32]
 800a894:	e853 3f00 	ldrex	r3, [r3]
 800a898:	61fb      	str	r3, [r7, #28]
   return(result);
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a8a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8ac:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a8b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8b2:	e841 2300 	strex	r3, r2, [r1]
 800a8b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d1e6      	bne.n	800a88c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	3308      	adds	r3, #8
 800a8c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	e853 3f00 	ldrex	r3, [r3]
 800a8cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a8d4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	3308      	adds	r3, #8
 800a8dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8de:	61ba      	str	r2, [r7, #24]
 800a8e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e2:	6979      	ldr	r1, [r7, #20]
 800a8e4:	69ba      	ldr	r2, [r7, #24]
 800a8e6:	e841 2300 	strex	r3, r2, [r1]
 800a8ea:	613b      	str	r3, [r7, #16]
   return(result);
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d1e5      	bne.n	800a8be <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2220      	movs	r2, #32
 800a8f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a8fa:	bf00      	nop
 800a8fc:	373c      	adds	r7, #60	@ 0x3c
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr

0800a906 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a906:	b480      	push	{r7}
 800a908:	b095      	sub	sp, #84	@ 0x54
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a916:	e853 3f00 	ldrex	r3, [r3]
 800a91a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a91c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a91e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a922:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	461a      	mov	r2, r3
 800a92a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a92c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a92e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a930:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a932:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a934:	e841 2300 	strex	r3, r2, [r1]
 800a938:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a93a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d1e6      	bne.n	800a90e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	3308      	adds	r3, #8
 800a946:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a948:	6a3b      	ldr	r3, [r7, #32]
 800a94a:	e853 3f00 	ldrex	r3, [r3]
 800a94e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a950:	69fb      	ldr	r3, [r7, #28]
 800a952:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a956:	f023 0301 	bic.w	r3, r3, #1
 800a95a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	3308      	adds	r3, #8
 800a962:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a964:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a966:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a968:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a96a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a96c:	e841 2300 	strex	r3, r2, [r1]
 800a970:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a974:	2b00      	cmp	r3, #0
 800a976:	d1e3      	bne.n	800a940 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d118      	bne.n	800a9b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	e853 3f00 	ldrex	r3, [r3]
 800a98c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	f023 0310 	bic.w	r3, r3, #16
 800a994:	647b      	str	r3, [r7, #68]	@ 0x44
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	461a      	mov	r2, r3
 800a99c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a99e:	61bb      	str	r3, [r7, #24]
 800a9a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a2:	6979      	ldr	r1, [r7, #20]
 800a9a4:	69ba      	ldr	r2, [r7, #24]
 800a9a6:	e841 2300 	strex	r3, r2, [r1]
 800a9aa:	613b      	str	r3, [r7, #16]
   return(result);
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d1e6      	bne.n	800a980 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2220      	movs	r2, #32
 800a9b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a9c6:	bf00      	nop
 800a9c8:	3754      	adds	r7, #84	@ 0x54
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr

0800a9d2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a9d2:	b580      	push	{r7, lr}
 800a9d4:	b09c      	sub	sp, #112	@ 0x70
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9de:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f003 0320 	and.w	r3, r3, #32
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d171      	bne.n	800aad2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a9ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9fe:	e853 3f00 	ldrex	r3, [r3]
 800aa02:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aa04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa06:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	461a      	mov	r2, r3
 800aa12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aa14:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aa16:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa18:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aa1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aa1c:	e841 2300 	strex	r3, r2, [r1]
 800aa20:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aa22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d1e6      	bne.n	800a9f6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	3308      	adds	r3, #8
 800aa2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa32:	e853 3f00 	ldrex	r3, [r3]
 800aa36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aa38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa3a:	f023 0301 	bic.w	r3, r3, #1
 800aa3e:	667b      	str	r3, [r7, #100]	@ 0x64
 800aa40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	3308      	adds	r3, #8
 800aa46:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aa48:	647a      	str	r2, [r7, #68]	@ 0x44
 800aa4a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aa4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa50:	e841 2300 	strex	r3, r2, [r1]
 800aa54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aa56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d1e5      	bne.n	800aa28 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	3308      	adds	r3, #8
 800aa62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa66:	e853 3f00 	ldrex	r3, [r3]
 800aa6a:	623b      	str	r3, [r7, #32]
   return(result);
 800aa6c:	6a3b      	ldr	r3, [r7, #32]
 800aa6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa72:	663b      	str	r3, [r7, #96]	@ 0x60
 800aa74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	3308      	adds	r3, #8
 800aa7a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aa7c:	633a      	str	r2, [r7, #48]	@ 0x30
 800aa7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa84:	e841 2300 	strex	r3, r2, [r1]
 800aa88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d1e5      	bne.n	800aa5c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aa90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa92:	2220      	movs	r2, #32
 800aa94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d118      	bne.n	800aad2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	e853 3f00 	ldrex	r3, [r3]
 800aaac:	60fb      	str	r3, [r7, #12]
   return(result);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f023 0310 	bic.w	r3, r3, #16
 800aab4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aab6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	461a      	mov	r2, r3
 800aabc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aabe:	61fb      	str	r3, [r7, #28]
 800aac0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac2:	69b9      	ldr	r1, [r7, #24]
 800aac4:	69fa      	ldr	r2, [r7, #28]
 800aac6:	e841 2300 	strex	r3, r2, [r1]
 800aaca:	617b      	str	r3, [r7, #20]
   return(result);
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d1e6      	bne.n	800aaa0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aad2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aad4:	2200      	movs	r2, #0
 800aad6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aad8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aada:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d109      	bne.n	800aaf4 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800aae0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aae2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800aae6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aae8:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800aaec:	4611      	mov	r1, r2
 800aaee:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800aaf0:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aaf2:	e004      	b.n	800aafe <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800aaf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaf6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800aafa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800aafc:	4798      	blx	r3
}
 800aafe:	bf00      	nop
 800ab00:	3770      	adds	r7, #112	@ 0x70
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}

0800ab06 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab06:	b580      	push	{r7, lr}
 800ab08:	b084      	sub	sp, #16
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab12:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2201      	movs	r2, #1
 800ab18:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	d10b      	bne.n	800ab3a <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800ab2e:	0852      	lsrs	r2, r2, #1
 800ab30:	b292      	uxth	r2, r2
 800ab32:	4611      	mov	r1, r2
 800ab34:	68f8      	ldr	r0, [r7, #12]
 800ab36:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab38:	e004      	b.n	800ab44 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ab40:	68f8      	ldr	r0, [r7, #12]
 800ab42:	4798      	blx	r3
}
 800ab44:	bf00      	nop
 800ab46:	3710      	adds	r7, #16
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b086      	sub	sp, #24
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab58:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab60:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ab68:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	689b      	ldr	r3, [r3, #8]
 800ab70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab74:	2b80      	cmp	r3, #128	@ 0x80
 800ab76:	d109      	bne.n	800ab8c <UART_DMAError+0x40>
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	2b21      	cmp	r3, #33	@ 0x21
 800ab7c:	d106      	bne.n	800ab8c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	2200      	movs	r2, #0
 800ab82:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ab86:	6978      	ldr	r0, [r7, #20]
 800ab88:	f7ff fe7c 	bl	800a884 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	689b      	ldr	r3, [r3, #8]
 800ab92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab96:	2b40      	cmp	r3, #64	@ 0x40
 800ab98:	d109      	bne.n	800abae <UART_DMAError+0x62>
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2b22      	cmp	r3, #34	@ 0x22
 800ab9e:	d106      	bne.n	800abae <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	2200      	movs	r2, #0
 800aba4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800aba8:	6978      	ldr	r0, [r7, #20]
 800abaa:	f7ff feac 	bl	800a906 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abb4:	f043 0210 	orr.w	r2, r3, #16
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800abc4:	6978      	ldr	r0, [r7, #20]
 800abc6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abc8:	bf00      	nop
 800abca:	3718      	adds	r7, #24
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abdc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2200      	movs	r2, #0
 800abe2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2200      	movs	r2, #0
 800abea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abf8:	bf00      	nop
 800abfa:	3710      	adds	r7, #16
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b088      	sub	sp, #32
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	e853 3f00 	ldrex	r3, [r3]
 800ac14:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac1c:	61fb      	str	r3, [r7, #28]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	461a      	mov	r2, r3
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	61bb      	str	r3, [r7, #24]
 800ac28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac2a:	6979      	ldr	r1, [r7, #20]
 800ac2c:	69ba      	ldr	r2, [r7, #24]
 800ac2e:	e841 2300 	strex	r3, r2, [r1]
 800ac32:	613b      	str	r3, [r7, #16]
   return(result);
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d1e6      	bne.n	800ac08 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2220      	movs	r2, #32
 800ac3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2200      	movs	r2, #0
 800ac46:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac52:	bf00      	nop
 800ac54:	3720      	adds	r7, #32
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ac5a:	b480      	push	{r7}
 800ac5c:	b083      	sub	sp, #12
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ac62:	bf00      	nop
 800ac64:	370c      	adds	r7, #12
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr

0800ac6e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ac6e:	b480      	push	{r7}
 800ac70:	b083      	sub	sp, #12
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ac76:	bf00      	nop
 800ac78:	370c      	adds	r7, #12
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr

0800ac82 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ac82:	b480      	push	{r7}
 800ac84:	b083      	sub	sp, #12
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ac8a:	bf00      	nop
 800ac8c:	370c      	adds	r7, #12
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr

0800ac96 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ac96:	b480      	push	{r7}
 800ac98:	b085      	sub	sp, #20
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d101      	bne.n	800acac <HAL_UARTEx_DisableFifoMode+0x16>
 800aca8:	2302      	movs	r3, #2
 800acaa:	e027      	b.n	800acfc <HAL_UARTEx_DisableFifoMode+0x66>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2201      	movs	r2, #1
 800acb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2224      	movs	r2, #36	@ 0x24
 800acb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f022 0201 	bic.w	r2, r2, #1
 800acd2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800acda:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	68fa      	ldr	r2, [r7, #12]
 800ace8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2220      	movs	r2, #32
 800acee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2200      	movs	r2, #0
 800acf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800acfa:	2300      	movs	r3, #0
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3714      	adds	r7, #20
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d101      	bne.n	800ad20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ad1c:	2302      	movs	r3, #2
 800ad1e:	e02d      	b.n	800ad7c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2201      	movs	r2, #1
 800ad24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2224      	movs	r2, #36	@ 0x24
 800ad2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	681a      	ldr	r2, [r3, #0]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f022 0201 	bic.w	r2, r2, #1
 800ad46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	689b      	ldr	r3, [r3, #8]
 800ad4e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	683a      	ldr	r2, [r7, #0]
 800ad58:	430a      	orrs	r2, r1
 800ad5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 f84f 	bl	800ae00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	68fa      	ldr	r2, [r7, #12]
 800ad68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2220      	movs	r2, #32
 800ad6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2200      	movs	r2, #0
 800ad76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad7a:	2300      	movs	r3, #0
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3710      	adds	r7, #16
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d101      	bne.n	800ad9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ad98:	2302      	movs	r3, #2
 800ad9a:	e02d      	b.n	800adf8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2201      	movs	r2, #1
 800ada0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2224      	movs	r2, #36	@ 0x24
 800ada8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f022 0201 	bic.w	r2, r2, #1
 800adc2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	683a      	ldr	r2, [r7, #0]
 800add4:	430a      	orrs	r2, r1
 800add6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f000 f811 	bl	800ae00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	68fa      	ldr	r2, [r7, #12]
 800ade4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2220      	movs	r2, #32
 800adea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2200      	movs	r2, #0
 800adf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800adf6:	2300      	movs	r3, #0
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3710      	adds	r7, #16
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b085      	sub	sp, #20
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d108      	bne.n	800ae22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2201      	movs	r2, #1
 800ae14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ae20:	e031      	b.n	800ae86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ae22:	2308      	movs	r3, #8
 800ae24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ae26:	2308      	movs	r3, #8
 800ae28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	689b      	ldr	r3, [r3, #8]
 800ae30:	0e5b      	lsrs	r3, r3, #25
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	f003 0307 	and.w	r3, r3, #7
 800ae38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	689b      	ldr	r3, [r3, #8]
 800ae40:	0f5b      	lsrs	r3, r3, #29
 800ae42:	b2db      	uxtb	r3, r3
 800ae44:	f003 0307 	and.w	r3, r3, #7
 800ae48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae4a:	7bbb      	ldrb	r3, [r7, #14]
 800ae4c:	7b3a      	ldrb	r2, [r7, #12]
 800ae4e:	4911      	ldr	r1, [pc, #68]	@ (800ae94 <UARTEx_SetNbDataToProcess+0x94>)
 800ae50:	5c8a      	ldrb	r2, [r1, r2]
 800ae52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ae56:	7b3a      	ldrb	r2, [r7, #12]
 800ae58:	490f      	ldr	r1, [pc, #60]	@ (800ae98 <UARTEx_SetNbDataToProcess+0x98>)
 800ae5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae5c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae60:	b29a      	uxth	r2, r3
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae68:	7bfb      	ldrb	r3, [r7, #15]
 800ae6a:	7b7a      	ldrb	r2, [r7, #13]
 800ae6c:	4909      	ldr	r1, [pc, #36]	@ (800ae94 <UARTEx_SetNbDataToProcess+0x94>)
 800ae6e:	5c8a      	ldrb	r2, [r1, r2]
 800ae70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ae74:	7b7a      	ldrb	r2, [r7, #13]
 800ae76:	4908      	ldr	r1, [pc, #32]	@ (800ae98 <UARTEx_SetNbDataToProcess+0x98>)
 800ae78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae7a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae7e:	b29a      	uxth	r2, r3
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ae86:	bf00      	nop
 800ae88:	3714      	adds	r7, #20
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr
 800ae92:	bf00      	nop
 800ae94:	0800b060 	.word	0x0800b060
 800ae98:	0800b068 	.word	0x0800b068

0800ae9c <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b085      	sub	sp, #20
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	607b      	str	r3, [r7, #4]
 800aea6:	460b      	mov	r3, r1
 800aea8:	817b      	strh	r3, [r7, #10]
 800aeaa:	4613      	mov	r3, r2
 800aeac:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	897a      	ldrh	r2, [r7, #10]
 800aeb2:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	893a      	ldrh	r2, [r7, #8]
 800aeb8:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	605a      	str	r2, [r3, #4]
}
 800aec0:	bf00      	nop
 800aec2:	3714      	adds	r7, #20
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr

0800aecc <memset>:
 800aecc:	4402      	add	r2, r0
 800aece:	4603      	mov	r3, r0
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d100      	bne.n	800aed6 <memset+0xa>
 800aed4:	4770      	bx	lr
 800aed6:	f803 1b01 	strb.w	r1, [r3], #1
 800aeda:	e7f9      	b.n	800aed0 <memset+0x4>

0800aedc <__libc_init_array>:
 800aedc:	b570      	push	{r4, r5, r6, lr}
 800aede:	4d0d      	ldr	r5, [pc, #52]	@ (800af14 <__libc_init_array+0x38>)
 800aee0:	4c0d      	ldr	r4, [pc, #52]	@ (800af18 <__libc_init_array+0x3c>)
 800aee2:	1b64      	subs	r4, r4, r5
 800aee4:	10a4      	asrs	r4, r4, #2
 800aee6:	2600      	movs	r6, #0
 800aee8:	42a6      	cmp	r6, r4
 800aeea:	d109      	bne.n	800af00 <__libc_init_array+0x24>
 800aeec:	4d0b      	ldr	r5, [pc, #44]	@ (800af1c <__libc_init_array+0x40>)
 800aeee:	4c0c      	ldr	r4, [pc, #48]	@ (800af20 <__libc_init_array+0x44>)
 800aef0:	f000 f818 	bl	800af24 <_init>
 800aef4:	1b64      	subs	r4, r4, r5
 800aef6:	10a4      	asrs	r4, r4, #2
 800aef8:	2600      	movs	r6, #0
 800aefa:	42a6      	cmp	r6, r4
 800aefc:	d105      	bne.n	800af0a <__libc_init_array+0x2e>
 800aefe:	bd70      	pop	{r4, r5, r6, pc}
 800af00:	f855 3b04 	ldr.w	r3, [r5], #4
 800af04:	4798      	blx	r3
 800af06:	3601      	adds	r6, #1
 800af08:	e7ee      	b.n	800aee8 <__libc_init_array+0xc>
 800af0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800af0e:	4798      	blx	r3
 800af10:	3601      	adds	r6, #1
 800af12:	e7f2      	b.n	800aefa <__libc_init_array+0x1e>
 800af14:	0800b078 	.word	0x0800b078
 800af18:	0800b078 	.word	0x0800b078
 800af1c:	0800b078 	.word	0x0800b078
 800af20:	0800b07c 	.word	0x0800b07c

0800af24 <_init>:
 800af24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af26:	bf00      	nop
 800af28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af2a:	bc08      	pop	{r3}
 800af2c:	469e      	mov	lr, r3
 800af2e:	4770      	bx	lr

0800af30 <_fini>:
 800af30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af32:	bf00      	nop
 800af34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af36:	bc08      	pop	{r3}
 800af38:	469e      	mov	lr, r3
 800af3a:	4770      	bx	lr


Onedof_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086dc  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080088b4  080088b4  000098b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088f4  080088f4  0000a018  2**0
                  CONTENTS
  4 .ARM          00000008  080088f4  080088f4  000098f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088fc  080088fc  0000a018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088fc  080088fc  000098fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008900  08008900  00009900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08008904  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  20000018  0800891c  0000a018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  0800891c  0000a40c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019fbb  00000000  00000000  0000a048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032ad  00000000  00000000  00024003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  000272b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010c1  00000000  00000000  00028840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f06  00000000  00000000  00029901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b470  00000000  00000000  00052807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114057  00000000  00000000  0006dc77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00181cce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e98  00000000  00000000  00181d14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00187bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800889c 	.word	0x0800889c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	0800889c 	.word	0x0800889c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b96a 	b.w	8000ee0 <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	460c      	mov	r4, r1
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d14e      	bne.n	8000cce <__udivmoddi4+0xaa>
 8000c30:	4694      	mov	ip, r2
 8000c32:	458c      	cmp	ip, r1
 8000c34:	4686      	mov	lr, r0
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	d962      	bls.n	8000d02 <__udivmoddi4+0xde>
 8000c3c:	b14a      	cbz	r2, 8000c52 <__udivmoddi4+0x2e>
 8000c3e:	f1c2 0320 	rsb	r3, r2, #32
 8000c42:	4091      	lsls	r1, r2
 8000c44:	fa20 f303 	lsr.w	r3, r0, r3
 8000c48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c4c:	4319      	orrs	r1, r3
 8000c4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c56:	fa1f f68c 	uxth.w	r6, ip
 8000c5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c62:	fb07 1114 	mls	r1, r7, r4, r1
 8000c66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6a:	fb04 f106 	mul.w	r1, r4, r6
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x64>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7a:	f080 8112 	bcs.w	8000ea2 <__udivmoddi4+0x27e>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 810f 	bls.w	8000ea2 <__udivmoddi4+0x27e>
 8000c84:	3c02      	subs	r4, #2
 8000c86:	4463      	add	r3, ip
 8000c88:	1a59      	subs	r1, r3, r1
 8000c8a:	fa1f f38e 	uxth.w	r3, lr
 8000c8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c92:	fb07 1110 	mls	r1, r7, r0, r1
 8000c96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9a:	fb00 f606 	mul.w	r6, r0, r6
 8000c9e:	429e      	cmp	r6, r3
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x94>
 8000ca2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000caa:	f080 80fc 	bcs.w	8000ea6 <__udivmoddi4+0x282>
 8000cae:	429e      	cmp	r6, r3
 8000cb0:	f240 80f9 	bls.w	8000ea6 <__udivmoddi4+0x282>
 8000cb4:	4463      	add	r3, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	1b9b      	subs	r3, r3, r6
 8000cba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa6>
 8000cc2:	40d3      	lsrs	r3, r2
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xba>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb4>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa6>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x150>
 8000ce6:	42a3      	cmp	r3, r4
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xcc>
 8000cea:	4290      	cmp	r0, r2
 8000cec:	f0c0 80f0 	bcc.w	8000ed0 <__udivmoddi4+0x2ac>
 8000cf0:	1a86      	subs	r6, r0, r2
 8000cf2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	2d00      	cmp	r5, #0
 8000cfa:	d0e6      	beq.n	8000cca <__udivmoddi4+0xa6>
 8000cfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000d00:	e7e3      	b.n	8000cca <__udivmoddi4+0xa6>
 8000d02:	2a00      	cmp	r2, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x204>
 8000d08:	eba1 040c 	sub.w	r4, r1, ip
 8000d0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d10:	fa1f f78c 	uxth.w	r7, ip
 8000d14:	2101      	movs	r1, #1
 8000d16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb07 f006 	mul.w	r0, r7, r6
 8000d2a:	4298      	cmp	r0, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x11c>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x11a>
 8000d38:	4298      	cmp	r0, r3
 8000d3a:	f200 80cd 	bhi.w	8000ed8 <__udivmoddi4+0x2b4>
 8000d3e:	4626      	mov	r6, r4
 8000d40:	1a1c      	subs	r4, r3, r0
 8000d42:	fa1f f38e 	uxth.w	r3, lr
 8000d46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d52:	fb00 f707 	mul.w	r7, r0, r7
 8000d56:	429f      	cmp	r7, r3
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x148>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x146>
 8000d64:	429f      	cmp	r7, r3
 8000d66:	f200 80b0 	bhi.w	8000eca <__udivmoddi4+0x2a6>
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	1bdb      	subs	r3, r3, r7
 8000d6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x9c>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d84:	fa04 f301 	lsl.w	r3, r4, r1
 8000d88:	ea43 030c 	orr.w	r3, r3, ip
 8000d8c:	40f4      	lsrs	r4, r6
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	0c38      	lsrs	r0, r7, #16
 8000d94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d98:	fbb4 fef0 	udiv	lr, r4, r0
 8000d9c:	fa1f fc87 	uxth.w	ip, r7
 8000da0:	fb00 441e 	mls	r4, r0, lr, r4
 8000da4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da8:	fb0e f90c 	mul.w	r9, lr, ip
 8000dac:	45a1      	cmp	r9, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d90a      	bls.n	8000dca <__udivmoddi4+0x1a6>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dba:	f080 8084 	bcs.w	8000ec6 <__udivmoddi4+0x2a2>
 8000dbe:	45a1      	cmp	r9, r4
 8000dc0:	f240 8081 	bls.w	8000ec6 <__udivmoddi4+0x2a2>
 8000dc4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	eba4 0409 	sub.w	r4, r4, r9
 8000dce:	fa1f f983 	uxth.w	r9, r3
 8000dd2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dd6:	fb00 4413 	mls	r4, r0, r3, r4
 8000dda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dde:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x1d2>
 8000de6:	193c      	adds	r4, r7, r4
 8000de8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dec:	d267      	bcs.n	8000ebe <__udivmoddi4+0x29a>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d965      	bls.n	8000ebe <__udivmoddi4+0x29a>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfa:	fba0 9302 	umull	r9, r3, r0, r2
 8000dfe:	eba4 040c 	sub.w	r4, r4, ip
 8000e02:	429c      	cmp	r4, r3
 8000e04:	46ce      	mov	lr, r9
 8000e06:	469c      	mov	ip, r3
 8000e08:	d351      	bcc.n	8000eae <__udivmoddi4+0x28a>
 8000e0a:	d04e      	beq.n	8000eaa <__udivmoddi4+0x286>
 8000e0c:	b155      	cbz	r5, 8000e24 <__udivmoddi4+0x200>
 8000e0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000e12:	eb64 040c 	sbc.w	r4, r4, ip
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	40cb      	lsrs	r3, r1
 8000e1c:	431e      	orrs	r6, r3
 8000e1e:	40cc      	lsrs	r4, r1
 8000e20:	e9c5 6400 	strd	r6, r4, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	e750      	b.n	8000cca <__udivmoddi4+0xa6>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000e30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e34:	fa24 f303 	lsr.w	r3, r4, r3
 8000e38:	4094      	lsls	r4, r2
 8000e3a:	430c      	orrs	r4, r1
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e44:	fa1f f78c 	uxth.w	r7, ip
 8000e48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e50:	0c23      	lsrs	r3, r4, #16
 8000e52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e56:	fb00 f107 	mul.w	r1, r0, r7
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x24c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e66:	d22c      	bcs.n	8000ec2 <__udivmoddi4+0x29e>
 8000e68:	4299      	cmp	r1, r3
 8000e6a:	d92a      	bls.n	8000ec2 <__udivmoddi4+0x29e>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4463      	add	r3, ip
 8000e70:	1a5b      	subs	r3, r3, r1
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e78:	fb08 3311 	mls	r3, r8, r1, r3
 8000e7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e80:	fb01 f307 	mul.w	r3, r1, r7
 8000e84:	42a3      	cmp	r3, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x276>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e90:	d213      	bcs.n	8000eba <__udivmoddi4+0x296>
 8000e92:	42a3      	cmp	r3, r4
 8000e94:	d911      	bls.n	8000eba <__udivmoddi4+0x296>
 8000e96:	3902      	subs	r1, #2
 8000e98:	4464      	add	r4, ip
 8000e9a:	1ae4      	subs	r4, r4, r3
 8000e9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea0:	e739      	b.n	8000d16 <__udivmoddi4+0xf2>
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	e6f0      	b.n	8000c88 <__udivmoddi4+0x64>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e706      	b.n	8000cb8 <__udivmoddi4+0x94>
 8000eaa:	45c8      	cmp	r8, r9
 8000eac:	d2ae      	bcs.n	8000e0c <__udivmoddi4+0x1e8>
 8000eae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eb6:	3801      	subs	r0, #1
 8000eb8:	e7a8      	b.n	8000e0c <__udivmoddi4+0x1e8>
 8000eba:	4631      	mov	r1, r6
 8000ebc:	e7ed      	b.n	8000e9a <__udivmoddi4+0x276>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	e799      	b.n	8000df6 <__udivmoddi4+0x1d2>
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	e7d4      	b.n	8000e70 <__udivmoddi4+0x24c>
 8000ec6:	46d6      	mov	lr, sl
 8000ec8:	e77f      	b.n	8000dca <__udivmoddi4+0x1a6>
 8000eca:	4463      	add	r3, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e74d      	b.n	8000d6c <__udivmoddi4+0x148>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	4623      	mov	r3, r4
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	e70f      	b.n	8000cf8 <__udivmoddi4+0xd4>
 8000ed8:	3e02      	subs	r6, #2
 8000eda:	4463      	add	r3, ip
 8000edc:	e730      	b.n	8000d40 <__udivmoddi4+0x11c>
 8000ede:	bf00      	nop

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <ADC_init>:
 *      Author: naker
 */

#include "adc.h"

void ADC_init(ADC_HandleTypeDef* hadc, ADC* adc){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, adc -> adc_buffer, 50);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	2232      	movs	r2, #50	@ 0x32
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f002 f8fb 	bl	80030f0 <HAL_ADC_Start_DMA>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <Update_adc>:

uint32_t Update_adc(ADC* adc){
 8000f02:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	uint64_t sum_adc = 0;
 8000f0c:	f04f 0200 	mov.w	r2, #0
 8000f10:	f04f 0300 	mov.w	r3, #0
 8000f14:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (uint8_t i = 0; i < 50; i++){
 8000f18:	2300      	movs	r3, #0
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	e011      	b.n	8000f42 <Update_adc+0x40>
		sum_adc += adc -> adc_buffer[i];
 8000f1e:	7bfa      	ldrb	r2, [r7, #15]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f26:	2200      	movs	r2, #0
 8000f28:	461c      	mov	r4, r3
 8000f2a:	4615      	mov	r5, r2
 8000f2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f30:	eb12 0804 	adds.w	r8, r2, r4
 8000f34:	eb43 0905 	adc.w	r9, r3, r5
 8000f38:	e9c7 8904 	strd	r8, r9, [r7, #16]
	for (uint8_t i = 0; i < 50; i++){
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	73fb      	strb	r3, [r7, #15]
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	2b31      	cmp	r3, #49	@ 0x31
 8000f46:	d9ea      	bls.n	8000f1e <Update_adc+0x1c>
	}
	return adc -> adc_avg = sum_adc / 50;
 8000f48:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f4c:	f04f 0232 	mov.w	r2, #50	@ 0x32
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	f7ff fe4e 	bl	8000bf4 <__aeabi_uldivmod>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08000f74 <Update_joy>:
 *      Author: naker
 */

#include "joy.h"

void Update_joy(JOY *joy){
 8000f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f78:	b084      	sub	sp, #16
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
	uint8_t s_1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8000f7e:	2120      	movs	r1, #32
 8000f80:	4835      	ldr	r0, [pc, #212]	@ (8001058 <Update_joy+0xe4>)
 8000f82:	f003 ffdf 	bl	8004f44 <HAL_GPIO_ReadPin>
 8000f86:	4603      	mov	r3, r0
 8000f88:	73fb      	strb	r3, [r7, #15]
	uint8_t s_2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8000f8a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f92:	f003 ffd7 	bl	8004f44 <HAL_GPIO_ReadPin>
 8000f96:	4603      	mov	r3, r0
 8000f98:	73bb      	strb	r3, [r7, #14]
	uint8_t s_3 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4);
 8000f9a:	2110      	movs	r1, #16
 8000f9c:	482f      	ldr	r0, [pc, #188]	@ (800105c <Update_joy+0xe8>)
 8000f9e:	f003 ffd1 	bl	8004f44 <HAL_GPIO_ReadPin>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	737b      	strb	r3, [r7, #13]
	uint8_t s_4 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8000fa6:	2120      	movs	r1, #32
 8000fa8:	482c      	ldr	r0, [pc, #176]	@ (800105c <Update_joy+0xe8>)
 8000faa:	f003 ffcb 	bl	8004f44 <HAL_GPIO_ReadPin>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	733b      	strb	r3, [r7, #12]
	if(!s_1 || !s_2 || !s_3 || !s_4){
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d008      	beq.n	8000fca <Update_joy+0x56>
 8000fb8:	7bbb      	ldrb	r3, [r7, #14]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d005      	beq.n	8000fca <Update_joy+0x56>
 8000fbe:	7b7b      	ldrb	r3, [r7, #13]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d002      	beq.n	8000fca <Update_joy+0x56>
 8000fc4:	7b3b      	ldrb	r3, [r7, #12]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d133      	bne.n	8001032 <Update_joy+0xbe>
		static uint8_t is_first = 1;
		static uint64_t timestamp = 0;
		if(is_first){
 8000fca:	4b25      	ldr	r3, [pc, #148]	@ (8001060 <Update_joy+0xec>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00c      	beq.n	8000fec <Update_joy+0x78>
			timestamp = HAL_GetTick() + 50;
 8000fd2:	f001 fc85 	bl	80028e0 <HAL_GetTick>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	3332      	adds	r3, #50	@ 0x32
 8000fda:	2200      	movs	r2, #0
 8000fdc:	469a      	mov	sl, r3
 8000fde:	4693      	mov	fp, r2
 8000fe0:	4b20      	ldr	r3, [pc, #128]	@ (8001064 <Update_joy+0xf0>)
 8000fe2:	e9c3 ab00 	strd	sl, fp, [r3]
			is_first = 0;
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	@ (8001060 <Update_joy+0xec>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() > timestamp){
 8000fec:	f001 fc78 	bl	80028e0 <HAL_GetTick>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	461c      	mov	r4, r3
 8000ff6:	4615      	mov	r5, r2
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8001064 <Update_joy+0xf0>)
 8000ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffe:	42a2      	cmp	r2, r4
 8001000:	41ab      	sbcs	r3, r5
 8001002:	d223      	bcs.n	800104c <Update_joy+0xd8>
			timestamp = HAL_GetTick() + 50;
 8001004:	f001 fc6c 	bl	80028e0 <HAL_GetTick>
 8001008:	4603      	mov	r3, r0
 800100a:	3332      	adds	r3, #50	@ 0x32
 800100c:	2200      	movs	r2, #0
 800100e:	4698      	mov	r8, r3
 8001010:	4691      	mov	r9, r2
 8001012:	4b14      	ldr	r3, [pc, #80]	@ (8001064 <Update_joy+0xf0>)
 8001014:	e9c3 8900 	strd	r8, r9, [r3]
			joy -> s_1 = s_1;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	7bfa      	ldrb	r2, [r7, #15]
 800101c:	701a      	strb	r2, [r3, #0]
			joy -> s_2 = s_2;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	7bba      	ldrb	r2, [r7, #14]
 8001022:	705a      	strb	r2, [r3, #1]
			joy -> s_3 = s_3;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	7b7a      	ldrb	r2, [r7, #13]
 8001028:	709a      	strb	r2, [r3, #2]
			joy -> s_4 = s_4;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	7b3a      	ldrb	r2, [r7, #12]
 800102e:	70da      	strb	r2, [r3, #3]
	if(!s_1 || !s_2 || !s_3 || !s_4){
 8001030:	e00c      	b.n	800104c <Update_joy+0xd8>
		}
	}else{
		joy -> s_1 = 1;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]
		joy -> s_2 = 1;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2201      	movs	r2, #1
 800103c:	705a      	strb	r2, [r3, #1]
		joy -> s_3 = 1;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2201      	movs	r2, #1
 8001042:	709a      	strb	r2, [r3, #2]
		joy -> s_4 = 1;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2201      	movs	r2, #1
 8001048:	70da      	strb	r2, [r3, #3]
	}
}
 800104a:	e000      	b.n	800104e <Update_joy+0xda>
	if(!s_1 || !s_2 || !s_3 || !s_4){
 800104c:	bf00      	nop
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001058:	48000400 	.word	0x48000400
 800105c:	48000800 	.word	0x48000800
 8001060:	20000000 	.word	0x20000000
 8001064:	20000038 	.word	0x20000038

08001068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106c:	f001 fbd3 	bl	8002816 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001070:	f000 f8cc 	bl	800120c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001074:	f000 fb54 	bl	8001720 <MX_GPIO_Init>
  MX_DMA_Init();
 8001078:	f000 fb28 	bl	80016cc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800107c:	f000 f988 	bl	8001390 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8001080:	f000 f9d0 	bl	8001424 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001084:	f000 fa7e 	bl	8001584 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001088:	f000 faca 	bl	8001620 <MX_TIM4_Init>
  MX_ADC1_Init();
 800108c:	f000 f908 	bl	80012a0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //Update command timer
  HAL_TIM_Base_Start_IT(&htim3);
 8001090:	484b      	ldr	r0, [pc, #300]	@ (80011c0 <main+0x158>)
 8001092:	f005 f897 	bl	80061c4 <HAL_TIM_Base_Start_IT>

  //PWM generator
  HAL_TIM_Base_Start(&htim1);
 8001096:	484b      	ldr	r0, [pc, #300]	@ (80011c4 <main+0x15c>)
 8001098:	f005 f824 	bl	80060e4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800109c:	2100      	movs	r1, #0
 800109e:	4849      	ldr	r0, [pc, #292]	@ (80011c4 <main+0x15c>)
 80010a0:	f005 f96a 	bl	8006378 <HAL_TIM_PWM_Start>

  //Encoder reader
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80010a4:	213c      	movs	r1, #60	@ 0x3c
 80010a6:	4848      	ldr	r0, [pc, #288]	@ (80011c8 <main+0x160>)
 80010a8:	f005 fb1e 	bl	80066e8 <HAL_TIM_Encoder_Start>
  QEI_init(&encoder, 8192, 8000, 65536);
 80010ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010b0:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80010b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010b8:	4844      	ldr	r0, [pc, #272]	@ (80011cc <main+0x164>)
 80010ba:	f000 ff7c 	bl	8001fb6 <QEI_init>

  //Current reader
  ADC_init(&hadc1, &current_sensor);
 80010be:	4944      	ldr	r1, [pc, #272]	@ (80011d0 <main+0x168>)
 80010c0:	4844      	ldr	r0, [pc, #272]	@ (80011d4 <main+0x16c>)
 80010c2:	f7ff ff0f 	bl	8000ee4 <ADC_init>

  //Position PID
  PID_init(&p_pid, p_kp, p_ki, p_kd, 0.001);
 80010c6:	4b44      	ldr	r3, [pc, #272]	@ (80011d8 <main+0x170>)
 80010c8:	edd3 7a00 	vldr	s15, [r3]
 80010cc:	4b43      	ldr	r3, [pc, #268]	@ (80011dc <main+0x174>)
 80010ce:	ed93 7a00 	vldr	s14, [r3]
 80010d2:	4b43      	ldr	r3, [pc, #268]	@ (80011e0 <main+0x178>)
 80010d4:	edd3 6a00 	vldr	s13, [r3]
 80010d8:	eddf 1a42 	vldr	s3, [pc, #264]	@ 80011e4 <main+0x17c>
 80010dc:	eeb0 1a66 	vmov.f32	s2, s13
 80010e0:	eef0 0a47 	vmov.f32	s1, s14
 80010e4:	eeb0 0a67 	vmov.f32	s0, s15
 80010e8:	483f      	ldr	r0, [pc, #252]	@ (80011e8 <main+0x180>)
 80010ea:	f000 fd5f 	bl	8001bac <PID_init>
  PID_init(&v_pid, v_kp, v_ki, v_kd, 0.000125);
 80010ee:	4b3f      	ldr	r3, [pc, #252]	@ (80011ec <main+0x184>)
 80010f0:	edd3 7a00 	vldr	s15, [r3]
 80010f4:	4b3e      	ldr	r3, [pc, #248]	@ (80011f0 <main+0x188>)
 80010f6:	ed93 7a00 	vldr	s14, [r3]
 80010fa:	4b3e      	ldr	r3, [pc, #248]	@ (80011f4 <main+0x18c>)
 80010fc:	edd3 6a00 	vldr	s13, [r3]
 8001100:	eddf 1a3d 	vldr	s3, [pc, #244]	@ 80011f8 <main+0x190>
 8001104:	eeb0 1a66 	vmov.f32	s2, s13
 8001108:	eef0 0a47 	vmov.f32	s1, s14
 800110c:	eeb0 0a67 	vmov.f32	s0, s15
 8001110:	483a      	ldr	r0, [pc, #232]	@ (80011fc <main+0x194>)
 8001112:	f000 fd4b 	bl	8001bac <PID_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while(mode == 1){
 8001116:	e04d      	b.n	80011b4 <main+0x14c>
		  Update_joy(&joy);
 8001118:	4839      	ldr	r0, [pc, #228]	@ (8001200 <main+0x198>)
 800111a:	f7ff ff2b 	bl	8000f74 <Update_joy>
		  if (!joy.s_1 && joy.s_2 && joy.s_3 && joy.s_4){
 800111e:	4b38      	ldr	r3, [pc, #224]	@ (8001200 <main+0x198>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d111      	bne.n	800114a <main+0xe2>
 8001126:	4b36      	ldr	r3, [pc, #216]	@ (8001200 <main+0x198>)
 8001128:	785b      	ldrb	r3, [r3, #1]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d00d      	beq.n	800114a <main+0xe2>
 800112e:	4b34      	ldr	r3, [pc, #208]	@ (8001200 <main+0x198>)
 8001130:	789b      	ldrb	r3, [r3, #2]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d009      	beq.n	800114a <main+0xe2>
 8001136:	4b32      	ldr	r3, [pc, #200]	@ (8001200 <main+0x198>)
 8001138:	78db      	ldrb	r3, [r3, #3]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d005      	beq.n	800114a <main+0xe2>
			  // switch 1 has pushed
			  jog += 10; // Move up 10 mm.
 800113e:	4b31      	ldr	r3, [pc, #196]	@ (8001204 <main+0x19c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	330a      	adds	r3, #10
 8001144:	4a2f      	ldr	r2, [pc, #188]	@ (8001204 <main+0x19c>)
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	e034      	b.n	80011b4 <main+0x14c>
		  }else if (joy.s_1 && !joy.s_2 && joy.s_3 && joy.s_4){
 800114a:	4b2d      	ldr	r3, [pc, #180]	@ (8001200 <main+0x198>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d011      	beq.n	8001176 <main+0x10e>
 8001152:	4b2b      	ldr	r3, [pc, #172]	@ (8001200 <main+0x198>)
 8001154:	785b      	ldrb	r3, [r3, #1]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10d      	bne.n	8001176 <main+0x10e>
 800115a:	4b29      	ldr	r3, [pc, #164]	@ (8001200 <main+0x198>)
 800115c:	789b      	ldrb	r3, [r3, #2]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d009      	beq.n	8001176 <main+0x10e>
 8001162:	4b27      	ldr	r3, [pc, #156]	@ (8001200 <main+0x198>)
 8001164:	78db      	ldrb	r3, [r3, #3]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d005      	beq.n	8001176 <main+0x10e>
			  // switch 2 has pushed
			  jog -= 10; // Move down 10 mm.
 800116a:	4b26      	ldr	r3, [pc, #152]	@ (8001204 <main+0x19c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	3b0a      	subs	r3, #10
 8001170:	4a24      	ldr	r2, [pc, #144]	@ (8001204 <main+0x19c>)
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	e01e      	b.n	80011b4 <main+0x14c>
		  }else if (joy.s_1 && joy.s_2 && !joy.s_3 && joy.s_4){
 8001176:	4b22      	ldr	r3, [pc, #136]	@ (8001200 <main+0x198>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d01a      	beq.n	80011b4 <main+0x14c>
 800117e:	4b20      	ldr	r3, [pc, #128]	@ (8001200 <main+0x198>)
 8001180:	785b      	ldrb	r3, [r3, #1]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d016      	beq.n	80011b4 <main+0x14c>
 8001186:	4b1e      	ldr	r3, [pc, #120]	@ (8001200 <main+0x198>)
 8001188:	789b      	ldrb	r3, [r3, #2]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d112      	bne.n	80011b4 <main+0x14c>
 800118e:	4b1c      	ldr	r3, [pc, #112]	@ (8001200 <main+0x198>)
 8001190:	78db      	ldrb	r3, [r3, #3]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <main+0x136>
			  // switch 3 has pushed
			  mode = 0; // Change mode to Automatic
 8001196:	4b1c      	ldr	r3, [pc, #112]	@ (8001208 <main+0x1a0>)
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
 800119c:	e00a      	b.n	80011b4 <main+0x14c>
		  }else if (joy.s_1 && joy.s_2 && joy.s_3 && !joy.s_4){
 800119e:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <main+0x198>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d006      	beq.n	80011b4 <main+0x14c>
 80011a6:	4b16      	ldr	r3, [pc, #88]	@ (8001200 <main+0x198>)
 80011a8:	785b      	ldrb	r3, [r3, #1]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d002      	beq.n	80011b4 <main+0x14c>
 80011ae:	4b14      	ldr	r3, [pc, #80]	@ (8001200 <main+0x198>)
 80011b0:	789b      	ldrb	r3, [r3, #2]
 80011b2:	2b00      	cmp	r3, #0
	  while(mode == 1){
 80011b4:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <main+0x1a0>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d0ad      	beq.n	8001118 <main+0xb0>
 80011bc:	e7fa      	b.n	80011b4 <main+0x14c>
 80011be:	bf00      	nop
 80011c0:	200001ec 	.word	0x200001ec
 80011c4:	200001a0 	.word	0x200001a0
 80011c8:	20000238 	.word	0x20000238
 80011cc:	20000368 	.word	0x20000368
 80011d0:	20000298 	.word	0x20000298
 80011d4:	20000040 	.word	0x20000040
 80011d8:	20000008 	.word	0x20000008
 80011dc:	200003f0 	.word	0x200003f0
 80011e0:	200003f4 	.word	0x200003f4
 80011e4:	3a83126f 	.word	0x3a83126f
 80011e8:	200003d8 	.word	0x200003d8
 80011ec:	20000004 	.word	0x20000004
 80011f0:	200003c8 	.word	0x200003c8
 80011f4:	200003cc 	.word	0x200003cc
 80011f8:	3903126f 	.word	0x3903126f
 80011fc:	200003b0 	.word	0x200003b0
 8001200:	2000028c 	.word	0x2000028c
 8001204:	20000290 	.word	0x20000290
 8001208:	20000295 	.word	0x20000295

0800120c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b094      	sub	sp, #80	@ 0x50
 8001210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001212:	f107 0318 	add.w	r3, r7, #24
 8001216:	2238      	movs	r2, #56	@ 0x38
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f007 fb12 	bl	8008844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800122e:	2000      	movs	r0, #0
 8001230:	f003 fed0 	bl	8004fd4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001234:	2301      	movs	r3, #1
 8001236:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001238:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800123c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123e:	2302      	movs	r3, #2
 8001240:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001242:	2303      	movs	r3, #3
 8001244:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001246:	2306      	movs	r3, #6
 8001248:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800124a:	2355      	movs	r3, #85	@ 0x55
 800124c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800124e:	2302      	movs	r3, #2
 8001250:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001252:	2302      	movs	r3, #2
 8001254:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001256:	2302      	movs	r3, #2
 8001258:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125a:	f107 0318 	add.w	r3, r7, #24
 800125e:	4618      	mov	r0, r3
 8001260:	f003 ff6c 	bl	800513c <HAL_RCC_OscConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800126a:	f000 fc99 	bl	8001ba0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126e:	230f      	movs	r3, #15
 8001270:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001272:	2303      	movs	r3, #3
 8001274:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	2104      	movs	r1, #4
 8001286:	4618      	mov	r0, r3
 8001288:	f004 fa6a 	bl	8005760 <HAL_RCC_ClockConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001292:	f000 fc85 	bl	8001ba0 <Error_Handler>
  }
}
 8001296:	bf00      	nop
 8001298:	3750      	adds	r7, #80	@ 0x50
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08c      	sub	sp, #48	@ 0x30
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	2220      	movs	r2, #32
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f007 fac3 	bl	8008844 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012be:	4b32      	ldr	r3, [pc, #200]	@ (8001388 <MX_ADC1_Init+0xe8>)
 80012c0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80012c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012c6:	4b30      	ldr	r3, [pc, #192]	@ (8001388 <MX_ADC1_Init+0xe8>)
 80012c8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80012cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001388 <MX_ADC1_Init+0xe8>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001388 <MX_ADC1_Init+0xe8>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80012da:	4b2b      	ldr	r3, [pc, #172]	@ (8001388 <MX_ADC1_Init+0xe8>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012e0:	4b29      	ldr	r3, [pc, #164]	@ (8001388 <MX_ADC1_Init+0xe8>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012e6:	4b28      	ldr	r3, [pc, #160]	@ (8001388 <MX_ADC1_Init+0xe8>)
 80012e8:	2204      	movs	r2, #4
 80012ea:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012ec:	4b26      	ldr	r3, [pc, #152]	@ (8001388 <MX_ADC1_Init+0xe8>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012f2:	4b25      	ldr	r3, [pc, #148]	@ (8001388 <MX_ADC1_Init+0xe8>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80012f8:	4b23      	ldr	r3, [pc, #140]	@ (8001388 <MX_ADC1_Init+0xe8>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012fe:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <MX_ADC1_Init+0xe8>)
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001306:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <MX_ADC1_Init+0xe8>)
 8001308:	2200      	movs	r2, #0
 800130a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800130c:	4b1e      	ldr	r3, [pc, #120]	@ (8001388 <MX_ADC1_Init+0xe8>)
 800130e:	2200      	movs	r2, #0
 8001310:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001312:	4b1d      	ldr	r3, [pc, #116]	@ (8001388 <MX_ADC1_Init+0xe8>)
 8001314:	2201      	movs	r2, #1
 8001316:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800131a:	4b1b      	ldr	r3, [pc, #108]	@ (8001388 <MX_ADC1_Init+0xe8>)
 800131c:	2200      	movs	r2, #0
 800131e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001320:	4b19      	ldr	r3, [pc, #100]	@ (8001388 <MX_ADC1_Init+0xe8>)
 8001322:	2200      	movs	r2, #0
 8001324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001328:	4817      	ldr	r0, [pc, #92]	@ (8001388 <MX_ADC1_Init+0xe8>)
 800132a:	f001 fd25 	bl	8002d78 <HAL_ADC_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001334:	f000 fc34 	bl	8001ba0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800133c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001340:	4619      	mov	r1, r3
 8001342:	4811      	ldr	r0, [pc, #68]	@ (8001388 <MX_ADC1_Init+0xe8>)
 8001344:	f002 fff2 	bl	800432c <HAL_ADCEx_MultiModeConfigChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800134e:	f000 fc27 	bl	8001ba0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001352:	4b0e      	ldr	r3, [pc, #56]	@ (800138c <MX_ADC1_Init+0xec>)
 8001354:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001356:	2306      	movs	r3, #6
 8001358:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800135e:	237f      	movs	r3, #127	@ 0x7f
 8001360:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001362:	2304      	movs	r3, #4
 8001364:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	4619      	mov	r1, r3
 800136e:	4806      	ldr	r0, [pc, #24]	@ (8001388 <MX_ADC1_Init+0xe8>)
 8001370:	f002 fa1a 	bl	80037a8 <HAL_ADC_ConfigChannel>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800137a:	f000 fc11 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	3730      	adds	r7, #48	@ 0x30
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000040 	.word	0x20000040
 800138c:	04300002 	.word	0x04300002

08001390 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001394:	4b21      	ldr	r3, [pc, #132]	@ (800141c <MX_LPUART1_UART_Init+0x8c>)
 8001396:	4a22      	ldr	r2, [pc, #136]	@ (8001420 <MX_LPUART1_UART_Init+0x90>)
 8001398:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800139a:	4b20      	ldr	r3, [pc, #128]	@ (800141c <MX_LPUART1_UART_Init+0x8c>)
 800139c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013a0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013a2:	4b1e      	ldr	r3, [pc, #120]	@ (800141c <MX_LPUART1_UART_Init+0x8c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80013a8:	4b1c      	ldr	r3, [pc, #112]	@ (800141c <MX_LPUART1_UART_Init+0x8c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80013ae:	4b1b      	ldr	r3, [pc, #108]	@ (800141c <MX_LPUART1_UART_Init+0x8c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80013b4:	4b19      	ldr	r3, [pc, #100]	@ (800141c <MX_LPUART1_UART_Init+0x8c>)
 80013b6:	220c      	movs	r2, #12
 80013b8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ba:	4b18      	ldr	r3, [pc, #96]	@ (800141c <MX_LPUART1_UART_Init+0x8c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013c0:	4b16      	ldr	r3, [pc, #88]	@ (800141c <MX_LPUART1_UART_Init+0x8c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013c6:	4b15      	ldr	r3, [pc, #84]	@ (800141c <MX_LPUART1_UART_Init+0x8c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013cc:	4b13      	ldr	r3, [pc, #76]	@ (800141c <MX_LPUART1_UART_Init+0x8c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80013d2:	4812      	ldr	r0, [pc, #72]	@ (800141c <MX_LPUART1_UART_Init+0x8c>)
 80013d4:	f006 fbc8 	bl	8007b68 <HAL_UART_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80013de:	f000 fbdf 	bl	8001ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013e2:	2100      	movs	r1, #0
 80013e4:	480d      	ldr	r0, [pc, #52]	@ (800141c <MX_LPUART1_UART_Init+0x8c>)
 80013e6:	f007 f963 	bl	80086b0 <HAL_UARTEx_SetTxFifoThreshold>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80013f0:	f000 fbd6 	bl	8001ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013f4:	2100      	movs	r1, #0
 80013f6:	4809      	ldr	r0, [pc, #36]	@ (800141c <MX_LPUART1_UART_Init+0x8c>)
 80013f8:	f007 f998 	bl	800872c <HAL_UARTEx_SetRxFifoThreshold>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001402:	f000 fbcd 	bl	8001ba0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001406:	4805      	ldr	r0, [pc, #20]	@ (800141c <MX_LPUART1_UART_Init+0x8c>)
 8001408:	f007 f919 	bl	800863e <HAL_UARTEx_DisableFifoMode>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001412:	f000 fbc5 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	2000010c 	.word	0x2000010c
 8001420:	40008000 	.word	0x40008000

08001424 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b09c      	sub	sp, #112	@ 0x70
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001438:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001444:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
 8001454:	615a      	str	r2, [r3, #20]
 8001456:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	2234      	movs	r2, #52	@ 0x34
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f007 f9f0 	bl	8008844 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001464:	4b45      	ldr	r3, [pc, #276]	@ (800157c <MX_TIM1_Init+0x158>)
 8001466:	4a46      	ldr	r2, [pc, #280]	@ (8001580 <MX_TIM1_Init+0x15c>)
 8001468:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 800146a:	4b44      	ldr	r3, [pc, #272]	@ (800157c <MX_TIM1_Init+0x158>)
 800146c:	22a9      	movs	r2, #169	@ 0xa9
 800146e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001470:	4b42      	ldr	r3, [pc, #264]	@ (800157c <MX_TIM1_Init+0x158>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001476:	4b41      	ldr	r3, [pc, #260]	@ (800157c <MX_TIM1_Init+0x158>)
 8001478:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800147c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147e:	4b3f      	ldr	r3, [pc, #252]	@ (800157c <MX_TIM1_Init+0x158>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001484:	4b3d      	ldr	r3, [pc, #244]	@ (800157c <MX_TIM1_Init+0x158>)
 8001486:	2200      	movs	r2, #0
 8001488:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148a:	4b3c      	ldr	r3, [pc, #240]	@ (800157c <MX_TIM1_Init+0x158>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001490:	483a      	ldr	r0, [pc, #232]	@ (800157c <MX_TIM1_Init+0x158>)
 8001492:	f004 fdcf 	bl	8006034 <HAL_TIM_Base_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800149c:	f000 fb80 	bl	8001ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014a4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014a6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80014aa:	4619      	mov	r1, r3
 80014ac:	4833      	ldr	r0, [pc, #204]	@ (800157c <MX_TIM1_Init+0x158>)
 80014ae:	f005 fc0d 	bl	8006ccc <HAL_TIM_ConfigClockSource>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80014b8:	f000 fb72 	bl	8001ba0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014bc:	482f      	ldr	r0, [pc, #188]	@ (800157c <MX_TIM1_Init+0x158>)
 80014be:	f004 fef9 	bl	80062b4 <HAL_TIM_PWM_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80014c8:	f000 fb6a 	bl	8001ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014cc:	2300      	movs	r3, #0
 80014ce:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014d0:	2300      	movs	r3, #0
 80014d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014dc:	4619      	mov	r1, r3
 80014de:	4827      	ldr	r0, [pc, #156]	@ (800157c <MX_TIM1_Init+0x158>)
 80014e0:	f006 f9d2 	bl	8007888 <HAL_TIMEx_MasterConfigSynchronization>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80014ea:	f000 fb59 	bl	8001ba0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ee:	2360      	movs	r3, #96	@ 0x60
 80014f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f6:	2300      	movs	r3, #0
 80014f8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014fa:	2300      	movs	r3, #0
 80014fc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80014fe:	2304      	movs	r3, #4
 8001500:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001502:	2300      	movs	r3, #0
 8001504:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800150a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800150e:	2200      	movs	r2, #0
 8001510:	4619      	mov	r1, r3
 8001512:	481a      	ldr	r0, [pc, #104]	@ (800157c <MX_TIM1_Init+0x158>)
 8001514:	f005 fac6 	bl	8006aa4 <HAL_TIM_PWM_ConfigChannel>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800151e:	f000 fb3f 	bl	8001ba0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001536:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800153a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001540:	2300      	movs	r3, #0
 8001542:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001548:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800154c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001552:	2300      	movs	r3, #0
 8001554:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	4619      	mov	r1, r3
 800155e:	4807      	ldr	r0, [pc, #28]	@ (800157c <MX_TIM1_Init+0x158>)
 8001560:	f006 fa28 	bl	80079b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800156a:	f000 fb19 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800156e:	4803      	ldr	r0, [pc, #12]	@ (800157c <MX_TIM1_Init+0x158>)
 8001570:	f001 f876 	bl	8002660 <HAL_TIM_MspPostInit>

}
 8001574:	bf00      	nop
 8001576:	3770      	adds	r7, #112	@ 0x70
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	200001a0 	.word	0x200001a0
 8001580:	40012c00 	.word	0x40012c00

08001584 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158a:	f107 0310 	add.w	r3, r7, #16
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001618 <MX_TIM3_Init+0x94>)
 80015a4:	4a1d      	ldr	r2, [pc, #116]	@ (800161c <MX_TIM3_Init+0x98>)
 80015a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 80015a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <MX_TIM3_Init+0x94>)
 80015aa:	22a9      	movs	r2, #169	@ 0xa9
 80015ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001618 <MX_TIM3_Init+0x94>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80015b4:	4b18      	ldr	r3, [pc, #96]	@ (8001618 <MX_TIM3_Init+0x94>)
 80015b6:	2263      	movs	r2, #99	@ 0x63
 80015b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ba:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <MX_TIM3_Init+0x94>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c0:	4b15      	ldr	r3, [pc, #84]	@ (8001618 <MX_TIM3_Init+0x94>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015c6:	4814      	ldr	r0, [pc, #80]	@ (8001618 <MX_TIM3_Init+0x94>)
 80015c8:	f004 fd34 	bl	8006034 <HAL_TIM_Base_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80015d2:	f000 fae5 	bl	8001ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015dc:	f107 0310 	add.w	r3, r7, #16
 80015e0:	4619      	mov	r1, r3
 80015e2:	480d      	ldr	r0, [pc, #52]	@ (8001618 <MX_TIM3_Init+0x94>)
 80015e4:	f005 fb72 	bl	8006ccc <HAL_TIM_ConfigClockSource>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80015ee:	f000 fad7 	bl	8001ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	4619      	mov	r1, r3
 80015fe:	4806      	ldr	r0, [pc, #24]	@ (8001618 <MX_TIM3_Init+0x94>)
 8001600:	f006 f942 	bl	8007888 <HAL_TIMEx_MasterConfigSynchronization>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800160a:	f000 fac9 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	3720      	adds	r7, #32
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200001ec 	.word	0x200001ec
 800161c:	40000400 	.word	0x40000400

08001620 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08c      	sub	sp, #48	@ 0x30
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001626:	f107 030c 	add.w	r3, r7, #12
 800162a:	2224      	movs	r2, #36	@ 0x24
 800162c:	2100      	movs	r1, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f007 f908 	bl	8008844 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001634:	463b      	mov	r3, r7
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800163e:	4b21      	ldr	r3, [pc, #132]	@ (80016c4 <MX_TIM4_Init+0xa4>)
 8001640:	4a21      	ldr	r2, [pc, #132]	@ (80016c8 <MX_TIM4_Init+0xa8>)
 8001642:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001644:	4b1f      	ldr	r3, [pc, #124]	@ (80016c4 <MX_TIM4_Init+0xa4>)
 8001646:	2200      	movs	r2, #0
 8001648:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164a:	4b1e      	ldr	r3, [pc, #120]	@ (80016c4 <MX_TIM4_Init+0xa4>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001650:	4b1c      	ldr	r3, [pc, #112]	@ (80016c4 <MX_TIM4_Init+0xa4>)
 8001652:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001656:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001658:	4b1a      	ldr	r3, [pc, #104]	@ (80016c4 <MX_TIM4_Init+0xa4>)
 800165a:	2200      	movs	r2, #0
 800165c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800165e:	4b19      	ldr	r3, [pc, #100]	@ (80016c4 <MX_TIM4_Init+0xa4>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001664:	2303      	movs	r3, #3
 8001666:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001668:	2300      	movs	r3, #0
 800166a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800166c:	2301      	movs	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800167c:	2301      	movs	r3, #1
 800167e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001680:	2300      	movs	r3, #0
 8001682:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001688:	f107 030c 	add.w	r3, r7, #12
 800168c:	4619      	mov	r1, r3
 800168e:	480d      	ldr	r0, [pc, #52]	@ (80016c4 <MX_TIM4_Init+0xa4>)
 8001690:	f004 ff84 	bl	800659c <HAL_TIM_Encoder_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800169a:	f000 fa81 	bl	8001ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169e:	2300      	movs	r3, #0
 80016a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016a6:	463b      	mov	r3, r7
 80016a8:	4619      	mov	r1, r3
 80016aa:	4806      	ldr	r0, [pc, #24]	@ (80016c4 <MX_TIM4_Init+0xa4>)
 80016ac:	f006 f8ec 	bl	8007888 <HAL_TIMEx_MasterConfigSynchronization>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80016b6:	f000 fa73 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	3730      	adds	r7, #48	@ 0x30
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000238 	.word	0x20000238
 80016c8:	40000800 	.word	0x40000800

080016cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80016d2:	4b12      	ldr	r3, [pc, #72]	@ (800171c <MX_DMA_Init+0x50>)
 80016d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016d6:	4a11      	ldr	r2, [pc, #68]	@ (800171c <MX_DMA_Init+0x50>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	6493      	str	r3, [r2, #72]	@ 0x48
 80016de:	4b0f      	ldr	r3, [pc, #60]	@ (800171c <MX_DMA_Init+0x50>)
 80016e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016ea:	4b0c      	ldr	r3, [pc, #48]	@ (800171c <MX_DMA_Init+0x50>)
 80016ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016ee:	4a0b      	ldr	r2, [pc, #44]	@ (800171c <MX_DMA_Init+0x50>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80016f6:	4b09      	ldr	r3, [pc, #36]	@ (800171c <MX_DMA_Init+0x50>)
 80016f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	200b      	movs	r0, #11
 8001708:	f002 fff3 	bl	80046f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800170c:	200b      	movs	r0, #11
 800170e:	f003 f80a 	bl	8004726 <HAL_NVIC_EnableIRQ>

}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000

08001720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08a      	sub	sp, #40	@ 0x28
 8001724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
 8001734:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001736:	4b66      	ldr	r3, [pc, #408]	@ (80018d0 <MX_GPIO_Init+0x1b0>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173a:	4a65      	ldr	r2, [pc, #404]	@ (80018d0 <MX_GPIO_Init+0x1b0>)
 800173c:	f043 0304 	orr.w	r3, r3, #4
 8001740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001742:	4b63      	ldr	r3, [pc, #396]	@ (80018d0 <MX_GPIO_Init+0x1b0>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001746:	f003 0304 	and.w	r3, r3, #4
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800174e:	4b60      	ldr	r3, [pc, #384]	@ (80018d0 <MX_GPIO_Init+0x1b0>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001752:	4a5f      	ldr	r2, [pc, #380]	@ (80018d0 <MX_GPIO_Init+0x1b0>)
 8001754:	f043 0320 	orr.w	r3, r3, #32
 8001758:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800175a:	4b5d      	ldr	r3, [pc, #372]	@ (80018d0 <MX_GPIO_Init+0x1b0>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175e:	f003 0320 	and.w	r3, r3, #32
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	4b5a      	ldr	r3, [pc, #360]	@ (80018d0 <MX_GPIO_Init+0x1b0>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176a:	4a59      	ldr	r2, [pc, #356]	@ (80018d0 <MX_GPIO_Init+0x1b0>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001772:	4b57      	ldr	r3, [pc, #348]	@ (80018d0 <MX_GPIO_Init+0x1b0>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177e:	4b54      	ldr	r3, [pc, #336]	@ (80018d0 <MX_GPIO_Init+0x1b0>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001782:	4a53      	ldr	r2, [pc, #332]	@ (80018d0 <MX_GPIO_Init+0x1b0>)
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800178a:	4b51      	ldr	r3, [pc, #324]	@ (80018d0 <MX_GPIO_Init+0x1b0>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Direaction_motor_Pin|Emergency_light_Pin, GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800179c:	484d      	ldr	r0, [pc, #308]	@ (80018d4 <MX_GPIO_Init+0x1b4>)
 800179e:	f003 fbe9 	bl	8004f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Solenoid_valve_push_Pin, GPIO_PIN_RESET);
 80017a2:	2200      	movs	r2, #0
 80017a4:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80017a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017ac:	f003 fbe2 	bl	8004f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin, GPIO_PIN_RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	f240 4116 	movw	r1, #1046	@ 0x416
 80017b6:	4848      	ldr	r0, [pc, #288]	@ (80018d8 <MX_GPIO_Init+0x1b8>)
 80017b8:	f003 fbdc 	bl	8004f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	4619      	mov	r1, r3
 80017d2:	4840      	ldr	r0, [pc, #256]	@ (80018d4 <MX_GPIO_Init+0x1b4>)
 80017d4:	f003 fa34 	bl	8004c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : Direaction_motor_Pin */
  GPIO_InitStruct.Pin = Direaction_motor_Pin;
 80017d8:	2302      	movs	r3, #2
 80017da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017dc:	2301      	movs	r3, #1
 80017de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e4:	2303      	movs	r3, #3
 80017e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direaction_motor_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	4839      	ldr	r0, [pc, #228]	@ (80018d4 <MX_GPIO_Init+0x1b4>)
 80017f0:	f003 fa26 	bl	8004c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Solenoid_valve_push_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Solenoid_valve_push_Pin;
 80017f4:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80017f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fa:	2301      	movs	r3, #1
 80017fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	4619      	mov	r1, r3
 800180c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001810:	f003 fa16 	bl	8004c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : joy_switch_3_Pin joy_switch_4_Pin Set_home_Pin Reed_switch_pull_Pin */
  GPIO_InitStruct.Pin = joy_switch_3_Pin|joy_switch_4_Pin|Set_home_Pin|Reed_switch_pull_Pin;
 8001814:	23f0      	movs	r3, #240	@ 0xf0
 8001816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001818:	2300      	movs	r3, #0
 800181a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	4619      	mov	r1, r3
 8001826:	482b      	ldr	r0, [pc, #172]	@ (80018d4 <MX_GPIO_Init+0x1b4>)
 8001828:	f003 fa0a 	bl	8004c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pilot_controller_error_Pin Pilot_motor_error_Pin Solenoid_valve_pull_Pin Solenoid_valve_vacuum_Pin */
  GPIO_InitStruct.Pin = Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin;
 800182c:	f240 4316 	movw	r3, #1046	@ 0x416
 8001830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001832:	2301      	movs	r3, #1
 8001834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	4619      	mov	r1, r3
 8001844:	4824      	ldr	r0, [pc, #144]	@ (80018d8 <MX_GPIO_Init+0x1b8>)
 8001846:	f003 f9fb 	bl	8004c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : Proximity_Pin Emergency_switch_Pin */
  GPIO_InitStruct.Pin = Proximity_Pin|Emergency_switch_Pin;
 800184a:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800184e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001850:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	4619      	mov	r1, r3
 8001860:	481d      	ldr	r0, [pc, #116]	@ (80018d8 <MX_GPIO_Init+0x1b8>)
 8001862:	f003 f9ed 	bl	8004c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_light_Pin */
  GPIO_InitStruct.Pin = Emergency_light_Pin;
 8001866:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800186a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186c:	2301      	movs	r3, #1
 800186e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Emergency_light_GPIO_Port, &GPIO_InitStruct);
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4619      	mov	r1, r3
 800187e:	4815      	ldr	r0, [pc, #84]	@ (80018d4 <MX_GPIO_Init+0x1b4>)
 8001880:	f003 f9de 	bl	8004c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : Reed_switch_push_Pin joy_switch_2_Pin */
  GPIO_InitStruct.Pin = Reed_switch_push_Pin|joy_switch_2_Pin;
 8001884:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188a:	2300      	movs	r3, #0
 800188c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800189c:	f003 f9d0 	bl	8004c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : joy_switch_1_Pin */
  GPIO_InitStruct.Pin = joy_switch_1_Pin;
 80018a0:	2320      	movs	r3, #32
 80018a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(joy_switch_1_GPIO_Port, &GPIO_InitStruct);
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	4619      	mov	r1, r3
 80018b2:	4809      	ldr	r0, [pc, #36]	@ (80018d8 <MX_GPIO_Init+0x1b8>)
 80018b4:	f003 f9c4 	bl	8004c40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2100      	movs	r1, #0
 80018bc:	2028      	movs	r0, #40	@ 0x28
 80018be:	f002 ff18 	bl	80046f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018c2:	2028      	movs	r0, #40	@ 0x28
 80018c4:	f002 ff2f 	bl	8004726 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018c8:	bf00      	nop
 80018ca:	3728      	adds	r7, #40	@ 0x28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40021000 	.word	0x40021000
 80018d4:	48000800 	.word	0x48000800
 80018d8:	48000400 	.word	0x48000400

080018dc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Main timer interrupt for run program with accuracy time
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80018dc:	b5b0      	push	{r4, r5, r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af02      	add	r7, sp, #8
 80018e2:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a52      	ldr	r2, [pc, #328]	@ (8001a30 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	f040 809d 	bne.w	8001a28 <HAL_TIM_PeriodElapsedCallback+0x14c>
		Update_qei(&encoder, &htim4);
 80018ee:	4951      	ldr	r1, [pc, #324]	@ (8001a34 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80018f0:	4851      	ldr	r0, [pc, #324]	@ (8001a38 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80018f2:	f000 fba5 	bl	8002040 <Update_qei>
		Update_adc(&current_sensor);
 80018f6:	4851      	ldr	r0, [pc, #324]	@ (8001a3c <HAL_TIM_PeriodElapsedCallback+0x160>)
 80018f8:	f7ff fb03 	bl	8000f02 <Update_adc>
		if(encoder.mm > 500 || encoder.mm < 0){
 80018fc:	4b4e      	ldr	r3, [pc, #312]	@ (8001a38 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80018fe:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001902:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001a40 <HAL_TIM_PeriodElapsedCallback+0x164>
 8001906:	eef4 7ac7 	vcmpe.f32	s15, s14
 800190a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190e:	dc07      	bgt.n	8001920 <HAL_TIM_PeriodElapsedCallback+0x44>
 8001910:	4b49      	ldr	r3, [pc, #292]	@ (8001a38 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001912:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001916:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800191a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191e:	d508      	bpl.n	8001932 <HAL_TIM_PeriodElapsedCallback+0x56>
			Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001920:	2300      	movs	r3, #0
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	2302      	movs	r3, #2
 8001926:	4a47      	ldr	r2, [pc, #284]	@ (8001a44 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001928:	2100      	movs	r1, #0
 800192a:	4847      	ldr	r0, [pc, #284]	@ (8001a48 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800192c:	f000 faac 	bl	8001e88 <Update_pwm>
 8001930:	e07a      	b.n	8001a28 <HAL_TIM_PeriodElapsedCallback+0x14c>
		}
		else if(mode == 0 || mode == 1){
 8001932:	4b46      	ldr	r3, [pc, #280]	@ (8001a4c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_TIM_PeriodElapsedCallback+0x66>
 800193a:	4b44      	ldr	r3, [pc, #272]	@ (8001a4c <HAL_TIM_PeriodElapsedCallback+0x170>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d13b      	bne.n	80019ba <HAL_TIM_PeriodElapsedCallback+0xde>
			Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, v_output);
 8001942:	4b43      	ldr	r3, [pc, #268]	@ (8001a50 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	2302      	movs	r3, #2
 800194a:	4a3e      	ldr	r2, [pc, #248]	@ (8001a44 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800194c:	2100      	movs	r1, #0
 800194e:	483e      	ldr	r0, [pc, #248]	@ (8001a48 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001950:	f000 fa9a 	bl	8001e88 <Update_pwm>
			if(mode == 0){ setpoint = 0;} // If mode == 0 : set point from base system
 8001954:	4b3d      	ldr	r3, [pc, #244]	@ (8001a4c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d104      	bne.n	8001966 <HAL_TIM_PeriodElapsedCallback+0x8a>
 800195c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a54 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	e007      	b.n	8001976 <HAL_TIM_PeriodElapsedCallback+0x9a>
			else if(mode == 1){setpoint = 1;} // If mode == 1 : set point from joy
 8001966:	4b39      	ldr	r3, [pc, #228]	@ (8001a4c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d103      	bne.n	8001976 <HAL_TIM_PeriodElapsedCallback+0x9a>
 800196e:	4b39      	ldr	r3, [pc, #228]	@ (8001a54 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001970:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001974:	601a      	str	r2, [r3, #0]
			Update_velocity_control(test);
 8001976:	4b38      	ldr	r3, [pc, #224]	@ (8001a58 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	ee07 3a90 	vmov	s15, r3
 800197e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001982:	eeb0 0a67 	vmov.f32	s0, s15
 8001986:	f000 f8db 	bl	8001b40 <Update_velocity_control>
			static uint64_t timestamp = 0;
			if (timestamp == 8){
 800198a:	4b34      	ldr	r3, [pc, #208]	@ (8001a5c <HAL_TIM_PeriodElapsedCallback+0x180>)
 800198c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001990:	f1a2 0108 	sub.w	r1, r2, #8
 8001994:	430b      	orrs	r3, r1
 8001996:	d106      	bne.n	80019a6 <HAL_TIM_PeriodElapsedCallback+0xca>
//				Update_position_control(test);
				timestamp = 0;
 8001998:	4930      	ldr	r1, [pc, #192]	@ (8001a5c <HAL_TIM_PeriodElapsedCallback+0x180>)
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	e9c1 2300 	strd	r2, r3, [r1]
			}
			timestamp++;
 80019a6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a5c <HAL_TIM_PeriodElapsedCallback+0x180>)
 80019a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ac:	1c54      	adds	r4, r2, #1
 80019ae:	f143 0500 	adc.w	r5, r3, #0
 80019b2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a5c <HAL_TIM_PeriodElapsedCallback+0x180>)
 80019b4:	e9c3 4500 	strd	r4, r5, [r3]
		else if(mode == 0 || mode == 1){
 80019b8:	e036      	b.n	8001a28 <HAL_TIM_PeriodElapsedCallback+0x14c>
		}
		else{
			// Stop motor if emergency
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)){
 80019ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019be:	4828      	ldr	r0, [pc, #160]	@ (8001a60 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80019c0:	f003 fac0 	bl	8004f44 <HAL_GPIO_ReadPin>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d008      	beq.n	80019dc <HAL_TIM_PeriodElapsedCallback+0x100>
				Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 80019ca:	2300      	movs	r3, #0
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	2302      	movs	r3, #2
 80019d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001a44 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80019d2:	2100      	movs	r1, #0
 80019d4:	481c      	ldr	r0, [pc, #112]	@ (8001a48 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80019d6:	f000 fa57 	bl	8001e88 <Update_pwm>
					Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, -400);
				}
			}
		}
	}
}
 80019da:	e025      	b.n	8001a28 <HAL_TIM_PeriodElapsedCallback+0x14c>
			else if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)){
 80019dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019e0:	481f      	ldr	r0, [pc, #124]	@ (8001a60 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80019e2:	f003 faaf 	bl	8004f44 <HAL_GPIO_ReadPin>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d11d      	bne.n	8001a28 <HAL_TIM_PeriodElapsedCallback+0x14c>
				Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 80019ec:	2300      	movs	r3, #0
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	2302      	movs	r3, #2
 80019f2:	4a14      	ldr	r2, [pc, #80]	@ (8001a44 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80019f4:	2100      	movs	r1, #0
 80019f6:	4814      	ldr	r0, [pc, #80]	@ (8001a48 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80019f8:	f000 fa46 	bl	8001e88 <Update_pwm>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET);
 80019fc:	2200      	movs	r2, #0
 80019fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a02:	4810      	ldr	r0, [pc, #64]	@ (8001a44 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001a04:	f003 fab6 	bl	8004f74 <HAL_GPIO_WritePin>
				if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6)){
 8001a08:	2140      	movs	r1, #64	@ 0x40
 8001a0a:	480e      	ldr	r0, [pc, #56]	@ (8001a44 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001a0c:	f003 fa9a 	bl	8004f44 <HAL_GPIO_ReadPin>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d008      	beq.n	8001a28 <HAL_TIM_PeriodElapsedCallback+0x14c>
					Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, -400);
 8001a16:	4b13      	ldr	r3, [pc, #76]	@ (8001a64 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	4a09      	ldr	r2, [pc, #36]	@ (8001a44 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4809      	ldr	r0, [pc, #36]	@ (8001a48 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001a22:	f000 fa31 	bl	8001e88 <Update_pwm>
}
 8001a26:	e7ff      	b.n	8001a28 <HAL_TIM_PeriodElapsedCallback+0x14c>
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a30:	200001ec 	.word	0x200001ec
 8001a34:	20000238 	.word	0x20000238
 8001a38:	20000368 	.word	0x20000368
 8001a3c:	20000298 	.word	0x20000298
 8001a40:	43fa0000 	.word	0x43fa0000
 8001a44:	48000800 	.word	0x48000800
 8001a48:	200001a0 	.word	0x200001a0
 8001a4c:	20000295 	.word	0x20000295
 8001a50:	200003d4 	.word	0x200003d4
 8001a54:	20000288 	.word	0x20000288
 8001a58:	20000284 	.word	0x20000284
 8001a5c:	200003f8 	.word	0x200003f8
 8001a60:	48000400 	.word	0x48000400
 8001a64:	fffffe70 	.word	0xfffffe70

08001a68 <HAL_GPIO_EXTI_Callback>:
// GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_15){
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a78:	d10d      	bne.n	8001a96 <HAL_GPIO_EXTI_Callback+0x2e>
		// Emergency switch interrupted
		// Stop motor
		Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	2302      	movs	r3, #2
 8001a80:	4a2a      	ldr	r2, [pc, #168]	@ (8001b2c <HAL_GPIO_EXTI_Callback+0xc4>)
 8001a82:	2100      	movs	r1, #0
 8001a84:	482a      	ldr	r0, [pc, #168]	@ (8001b30 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001a86:	f000 f9ff 	bl	8001e88 <Update_pwm>
		// Emergency light enable
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, SET);
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a90:	4826      	ldr	r0, [pc, #152]	@ (8001b2c <HAL_GPIO_EXTI_Callback+0xc4>)
 8001a92:	f003 fa6f 	bl	8004f74 <HAL_GPIO_WritePin>
//		mode = 2;
	}
	if(GPIO_Pin == GPIO_PIN_12){
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a9c:	d141      	bne.n	8001b22 <HAL_GPIO_EXTI_Callback+0xba>
		// Proximity interrupted
		Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	4a21      	ldr	r2, [pc, #132]	@ (8001b2c <HAL_GPIO_EXTI_Callback+0xc4>)
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4821      	ldr	r0, [pc, #132]	@ (8001b30 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001aaa:	f000 f9ed 	bl	8001e88 <Update_pwm>
		is_home = 1;
 8001aae:	4b21      	ldr	r3, [pc, #132]	@ (8001b34 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	701a      	strb	r2, [r3, #0]
		uint8_t stop = 1;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	73fb      	strb	r3, [r7, #15]
		while(stop){
 8001ab8:	e030      	b.n	8001b1c <HAL_GPIO_EXTI_Callback+0xb4>
			Update_joy(&joy);
 8001aba:	481f      	ldr	r0, [pc, #124]	@ (8001b38 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001abc:	f7ff fa5a 	bl	8000f74 <Update_joy>
			if(!joy.s_1 && joy.s_2 && joy.s_3 && joy.s_4){
 8001ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b38 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d114      	bne.n	8001af2 <HAL_GPIO_EXTI_Callback+0x8a>
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b38 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001aca:	785b      	ldrb	r3, [r3, #1]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d010      	beq.n	8001af2 <HAL_GPIO_EXTI_Callback+0x8a>
 8001ad0:	4b19      	ldr	r3, [pc, #100]	@ (8001b38 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001ad2:	789b      	ldrb	r3, [r3, #2]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00c      	beq.n	8001af2 <HAL_GPIO_EXTI_Callback+0x8a>
 8001ad8:	4b17      	ldr	r3, [pc, #92]	@ (8001b38 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001ada:	78db      	ldrb	r3, [r3, #3]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d008      	beq.n	8001af2 <HAL_GPIO_EXTI_Callback+0x8a>
				// mode 0 selected by push switch 1
				mode = 0;
 8001ae0:	4b16      	ldr	r3, [pc, #88]	@ (8001b3c <HAL_GPIO_EXTI_Callback+0xd4>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
				is_home = 0;
 8001ae6:	4b13      	ldr	r3, [pc, #76]	@ (8001b34 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
				stop = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	73fb      	strb	r3, [r7, #15]
 8001af0:	e014      	b.n	8001b1c <HAL_GPIO_EXTI_Callback+0xb4>
			}
			else if(joy.s_1 && !joy.s_2 && joy.s_3 && joy.s_4){
 8001af2:	4b11      	ldr	r3, [pc, #68]	@ (8001b38 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d010      	beq.n	8001b1c <HAL_GPIO_EXTI_Callback+0xb4>
 8001afa:	4b0f      	ldr	r3, [pc, #60]	@ (8001b38 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001afc:	785b      	ldrb	r3, [r3, #1]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10c      	bne.n	8001b1c <HAL_GPIO_EXTI_Callback+0xb4>
 8001b02:	4b0d      	ldr	r3, [pc, #52]	@ (8001b38 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001b04:	789b      	ldrb	r3, [r3, #2]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d008      	beq.n	8001b1c <HAL_GPIO_EXTI_Callback+0xb4>
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b38 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001b0c:	78db      	ldrb	r3, [r3, #3]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d004      	beq.n	8001b1c <HAL_GPIO_EXTI_Callback+0xb4>
				// mode 1 selected by push switch 2
//				mode = 1;
				is_home = 0;
 8001b12:	4b08      	ldr	r3, [pc, #32]	@ (8001b34 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
				stop = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	73fb      	strb	r3, [r7, #15]
		while(stop){
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1cb      	bne.n	8001aba <HAL_GPIO_EXTI_Callback+0x52>
			}
		}
	}
}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	48000800 	.word	0x48000800
 8001b30:	200001a0 	.word	0x200001a0
 8001b34:	20000294 	.word	0x20000294
 8001b38:	2000028c 	.word	0x2000028c
 8001b3c:	20000295 	.word	0x20000295

08001b40 <Update_velocity_control>:
// Torque control update
void Update_torque_control(float32_t s){

}
// Velocity control update
void Update_velocity_control(float32_t s){
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	ed87 0a01 	vstr	s0, [r7, #4]
	//input is pulse unit
	v_e = s - Get_mmps(&encoder);
 8001b4a:	480f      	ldr	r0, [pc, #60]	@ (8001b88 <Update_velocity_control+0x48>)
 8001b4c:	f000 fbec 	bl	8002328 <Get_mmps>
 8001b50:	eeb0 7a40 	vmov.f32	s14, s0
 8001b54:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b8c <Update_velocity_control+0x4c>)
 8001b5e:	edc3 7a00 	vstr	s15, [r3]
	v_output = Update_pid(&v_pid, v_e, 900.0, 1000.0);
 8001b62:	4b0a      	ldr	r3, [pc, #40]	@ (8001b8c <Update_velocity_control+0x4c>)
 8001b64:	edd3 7a00 	vldr	s15, [r3]
 8001b68:	ed9f 1a09 	vldr	s2, [pc, #36]	@ 8001b90 <Update_velocity_control+0x50>
 8001b6c:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8001b94 <Update_velocity_control+0x54>
 8001b70:	eeb0 0a67 	vmov.f32	s0, s15
 8001b74:	4808      	ldr	r0, [pc, #32]	@ (8001b98 <Update_velocity_control+0x58>)
 8001b76:	f000 f83f 	bl	8001bf8 <Update_pid>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	4a07      	ldr	r2, [pc, #28]	@ (8001b9c <Update_velocity_control+0x5c>)
 8001b7e:	6013      	str	r3, [r2, #0]
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000368 	.word	0x20000368
 8001b8c:	200003d0 	.word	0x200003d0
 8001b90:	447a0000 	.word	0x447a0000
 8001b94:	44610000 	.word	0x44610000
 8001b98:	200003b0 	.word	0x200003b0
 8001b9c:	200003d4 	.word	0x200003d4

08001ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba4:	b672      	cpsid	i
}
 8001ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <Error_Handler+0x8>

08001bac <PID_init>:
 *  Created on: Apr 26, 2024
 *      Author: naker
 */
#include "pid.h"

void PID_init(PID* pid, float32_t _kp,  float32_t _ki, float32_t _kd, float32_t _sampt){
 8001bac:	b480      	push	{r7}
 8001bae:	b087      	sub	sp, #28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6178      	str	r0, [r7, #20]
 8001bb4:	ed87 0a04 	vstr	s0, [r7, #16]
 8001bb8:	edc7 0a03 	vstr	s1, [r7, #12]
 8001bbc:	ed87 1a02 	vstr	s2, [r7, #8]
 8001bc0:	edc7 1a01 	vstr	s3, [r7, #4]
	pid -> kp = _kp;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	601a      	str	r2, [r3, #0]
	pid -> ki = _ki;
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	605a      	str	r2, [r3, #4]
	pid -> kd = _kd;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	609a      	str	r2, [r3, #8]
	pid -> sampt = _sampt;
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	60da      	str	r2, [r3, #12]
	pid -> y_n = 0.0;
 8001bdc:	6979      	ldr	r1, [r7, #20]
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	f04f 0300 	mov.w	r3, #0
 8001be6:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001bea:	bf00      	nop
 8001bec:	371c      	adds	r7, #28
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <Update_pid>:
int32_t Update_pid(PID *pid, float32_t error, float32_t pid_sat, float32_t plant_sat) {
 8001bf8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bfc:	b08a      	sub	sp, #40	@ 0x28
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c06:	edc7 0a01 	vstr	s1, [r7, #4]
 8001c0a:	ed87 1a00 	vstr	s2, [r7]
//	static float32_t y_n = 0; // Output[n]
	static float32_t y_n_1 = 0; // Output[n-1]
	float32_t e_n = error; // error[n]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	61bb      	str	r3, [r7, #24]
	static float32_t e_n_1 = 0; // error[n-1]

	float32_t p_term = e_n * pid -> kp;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	edd3 7a00 	vldr	s15, [r3]
 8001c18:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c20:	edc7 7a05 	vstr	s15, [r7, #20]
	float32_t d_term = ((e_n - e_n_1) * pid -> kd) / pid -> sampt;
 8001c24:	4b96      	ldr	r3, [pc, #600]	@ (8001e80 <Update_pid+0x288>)
 8001c26:	edd3 7a00 	vldr	s15, [r3]
 8001c2a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c38:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c46:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float32_t i_term = ((pid -> ki * pid -> sampt / 2.0)*(e_n + e_n_1)) + y_n_1;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c5a:	ee17 0a90 	vmov	r0, s15
 8001c5e:	f7fe fc3f 	bl	80004e0 <__aeabi_f2d>
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c6a:	f7fe fdbb 	bl	80007e4 <__aeabi_ddiv>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4690      	mov	r8, r2
 8001c74:	4699      	mov	r9, r3
 8001c76:	4b82      	ldr	r3, [pc, #520]	@ (8001e80 <Update_pid+0x288>)
 8001c78:	ed93 7a00 	vldr	s14, [r3]
 8001c7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c84:	ee17 0a90 	vmov	r0, s15
 8001c88:	f7fe fc2a 	bl	80004e0 <__aeabi_f2d>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4640      	mov	r0, r8
 8001c92:	4649      	mov	r1, r9
 8001c94:	f7fe fc7c 	bl	8000590 <__aeabi_dmul>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4690      	mov	r8, r2
 8001c9e:	4699      	mov	r9, r3
 8001ca0:	4b78      	ldr	r3, [pc, #480]	@ (8001e84 <Update_pid+0x28c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe fc1b 	bl	80004e0 <__aeabi_f2d>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4640      	mov	r0, r8
 8001cb0:	4649      	mov	r1, r9
 8001cb2:	f7fe fab7 	bl	8000224 <__adddf3>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4610      	mov	r0, r2
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f7fe ff49 	bl	8000b54 <__aeabi_d2f>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	623b      	str	r3, [r7, #32]

	if(pid -> ki == 0){
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ccc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd4:	d102      	bne.n	8001cdc <Update_pid+0xe4>
		i_term = 0;
 8001cd6:	f04f 0300 	mov.w	r3, #0
 8001cda:	623b      	str	r3, [r7, #32]
	}
	if(pid -> kd == 0){
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ce2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cea:	d102      	bne.n	8001cf2 <Update_pid+0xfa>
		d_term = 0;
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	pid -> y_n = p_term + d_term + i_term; // pid output
 8001cf2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cf6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001cfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cfe:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d06:	ee17 0a90 	vmov	r0, s15
 8001d0a:	f7fe fbe9 	bl	80004e0 <__aeabi_f2d>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	68f9      	ldr	r1, [r7, #12]
 8001d14:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uint8_t is_sat = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	77fb      	strb	r3, [r7, #31]
	// check is pid output is saturating
	if(pid -> y_n > pid_sat){
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7fe fbdc 	bl	80004e0 <__aeabi_f2d>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4640      	mov	r0, r8
 8001d2e:	4649      	mov	r1, r9
 8001d30:	f7fe febe 	bl	8000ab0 <__aeabi_dcmpgt>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d002      	beq.n	8001d40 <Update_pid+0x148>
		is_sat = 1;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	77fb      	strb	r3, [r7, #31]
 8001d3e:	e016      	b.n	8001d6e <Update_pid+0x176>
	}
	else if(pid -> y_n < -(pid_sat)){
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8001d46:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d4a:	eef1 7a67 	vneg.f32	s15, s15
 8001d4e:	ee17 3a90 	vmov	r3, s15
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fbc4 	bl	80004e0 <__aeabi_f2d>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4640      	mov	r0, r8
 8001d5e:	4649      	mov	r1, r9
 8001d60:	f7fe fe88 	bl	8000a74 <__aeabi_dcmplt>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <Update_pid+0x176>
		is_sat = 1;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	77fb      	strb	r3, [r7, #31]
	}
	// check is error sign and output sign is equal
	if(e_n * pid -> y_n == fabs(e_n * pid -> y_n)){
 8001d6e:	69b8      	ldr	r0, [r7, #24]
 8001d70:	f7fe fbb6 	bl	80004e0 <__aeabi_f2d>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d7a:	f7fe fc09 	bl	8000590 <__aeabi_dmul>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4690      	mov	r8, r2
 8001d84:	4699      	mov	r9, r3
 8001d86:	69b8      	ldr	r0, [r7, #24]
 8001d88:	f7fe fbaa 	bl	80004e0 <__aeabi_f2d>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d92:	f7fe fbfd 	bl	8000590 <__aeabi_dmul>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4614      	mov	r4, r2
 8001d9c:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001da0:	4622      	mov	r2, r4
 8001da2:	462b      	mov	r3, r5
 8001da4:	4640      	mov	r0, r8
 8001da6:	4649      	mov	r1, r9
 8001da8:	f7fe fe5a 	bl	8000a60 <__aeabi_dcmpeq>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d011      	beq.n	8001dd6 <Update_pid+0x1de>
		// if pid output is saturating and error sign and output sign is  i_term = 0;
		if(is_sat == 1){
 8001db2:	7ffb      	ldrb	r3, [r7, #31]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d10e      	bne.n	8001dd6 <Update_pid+0x1de>
			pid -> y_n = p_term + d_term;
 8001db8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001dbc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001dc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc4:	ee17 0a90 	vmov	r0, s15
 8001dc8:	f7fe fb8a 	bl	80004e0 <__aeabi_f2d>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	68f9      	ldr	r1, [r7, #12]
 8001dd2:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}
	}
	// Plant saturation
	if(pid -> y_n > plant_sat){
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001ddc:	6838      	ldr	r0, [r7, #0]
 8001dde:	f7fe fb7f 	bl	80004e0 <__aeabi_f2d>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4620      	mov	r0, r4
 8001de8:	4629      	mov	r1, r5
 8001dea:	f7fe fe61 	bl	8000ab0 <__aeabi_dcmpgt>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d008      	beq.n	8001e06 <Update_pid+0x20e>
		pid -> y_n = plant_sat;
 8001df4:	6838      	ldr	r0, [r7, #0]
 8001df6:	f7fe fb73 	bl	80004e0 <__aeabi_f2d>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	68f9      	ldr	r1, [r7, #12]
 8001e00:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001e04:	e022      	b.n	8001e4c <Update_pid+0x254>
	}
	else if(pid -> y_n < -(plant_sat)){
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001e0c:	edd7 7a00 	vldr	s15, [r7]
 8001e10:	eef1 7a67 	vneg.f32	s15, s15
 8001e14:	ee17 3a90 	vmov	r3, s15
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fb61 	bl	80004e0 <__aeabi_f2d>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4620      	mov	r0, r4
 8001e24:	4629      	mov	r1, r5
 8001e26:	f7fe fe25 	bl	8000a74 <__aeabi_dcmplt>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00d      	beq.n	8001e4c <Update_pid+0x254>
		pid -> y_n = (-(plant_sat));
 8001e30:	edd7 7a00 	vldr	s15, [r7]
 8001e34:	eef1 7a67 	vneg.f32	s15, s15
 8001e38:	ee17 3a90 	vmov	r3, s15
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fb4f 	bl	80004e0 <__aeabi_f2d>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	68f9      	ldr	r1, [r7, #12]
 8001e48:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}
	// Update value
	y_n_1 = pid -> y_n;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
 8001e56:	f7fe fe7d 	bl	8000b54 <__aeabi_d2f>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	4a09      	ldr	r2, [pc, #36]	@ (8001e84 <Update_pid+0x28c>)
 8001e5e:	6013      	str	r3, [r2, #0]
	e_n_1 = e_n;
 8001e60:	4a07      	ldr	r2, [pc, #28]	@ (8001e80 <Update_pid+0x288>)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	6013      	str	r3, [r2, #0]
	return pid -> y_n;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f7fe fe28 	bl	8000ac4 <__aeabi_d2iz>
 8001e74:	4603      	mov	r3, r0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3728      	adds	r7, #40	@ 0x28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e80:	20000400 	.word	0x20000400
 8001e84:	20000404 	.word	0x20000404

08001e88 <Update_pwm>:
 *      Author: naker
 */

#include "pwm.h"

void Update_pwm(TIM_HandleTypeDef* htim, uint16_t htim_channel,GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, int32_t pwm_signal) {
 8001e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e8c:	b08b      	sub	sp, #44	@ 0x2c
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6278      	str	r0, [r7, #36]	@ 0x24
 8001e92:	61fa      	str	r2, [r7, #28]
 8001e94:	461a      	mov	r2, r3
 8001e96:	460b      	mov	r3, r1
 8001e98:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	843b      	strh	r3, [r7, #32]
	__HAL_TIM_SET_COMPARE(htim, htim_channel, fabs(pwm_signal));
 8001e9e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d111      	bne.n	8001ec8 <Update_pwm+0x40>
 8001ea4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001ea6:	f7fe fb09 	bl	80004bc <__aeabi_i2d>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	613a      	str	r2, [r7, #16]
 8001eb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb8:	681c      	ldr	r4, [r3, #0]
 8001eba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ebe:	f7fe fe29 	bl	8000b14 <__aeabi_d2uiz>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	6363      	str	r3, [r4, #52]	@ 0x34
 8001ec6:	e061      	b.n	8001f8c <Update_pwm+0x104>
 8001ec8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d111      	bne.n	8001ef2 <Update_pwm+0x6a>
 8001ece:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001ed0:	f7fe faf4 	bl	80004bc <__aeabi_i2d>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	60ba      	str	r2, [r7, #8]
 8001eda:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee2:	681c      	ldr	r4, [r3, #0]
 8001ee4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ee8:	f7fe fe14 	bl	8000b14 <__aeabi_d2uiz>
 8001eec:	4603      	mov	r3, r0
 8001eee:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001ef0:	e04c      	b.n	8001f8c <Update_pwm+0x104>
 8001ef2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d111      	bne.n	8001f1c <Update_pwm+0x94>
 8001ef8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001efa:	f7fe fadf 	bl	80004bc <__aeabi_i2d>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	603a      	str	r2, [r7, #0]
 8001f04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0c:	681c      	ldr	r4, [r3, #0]
 8001f0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f12:	f7fe fdff 	bl	8000b14 <__aeabi_d2uiz>
 8001f16:	4603      	mov	r3, r0
 8001f18:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8001f1a:	e037      	b.n	8001f8c <Update_pwm+0x104>
 8001f1c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001f1e:	2b0c      	cmp	r3, #12
 8001f20:	d110      	bne.n	8001f44 <Update_pwm+0xbc>
 8001f22:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001f24:	f7fe faca 	bl	80004bc <__aeabi_i2d>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4615      	mov	r5, r2
 8001f2e:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 8001f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f34:	681c      	ldr	r4, [r3, #0]
 8001f36:	4628      	mov	r0, r5
 8001f38:	4631      	mov	r1, r6
 8001f3a:	f7fe fdeb 	bl	8000b14 <__aeabi_d2uiz>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	6423      	str	r3, [r4, #64]	@ 0x40
 8001f42:	e023      	b.n	8001f8c <Update_pwm+0x104>
 8001f44:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001f46:	2b10      	cmp	r3, #16
 8001f48:	d110      	bne.n	8001f6c <Update_pwm+0xe4>
 8001f4a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001f4c:	f7fe fab6 	bl	80004bc <__aeabi_i2d>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4692      	mov	sl, r2
 8001f56:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5c:	681c      	ldr	r4, [r3, #0]
 8001f5e:	4650      	mov	r0, sl
 8001f60:	4659      	mov	r1, fp
 8001f62:	f7fe fdd7 	bl	8000b14 <__aeabi_d2uiz>
 8001f66:	4603      	mov	r3, r0
 8001f68:	64a3      	str	r3, [r4, #72]	@ 0x48
 8001f6a:	e00f      	b.n	8001f8c <Update_pwm+0x104>
 8001f6c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001f6e:	f7fe faa5 	bl	80004bc <__aeabi_i2d>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4690      	mov	r8, r2
 8001f78:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7e:	681c      	ldr	r4, [r3, #0]
 8001f80:	4640      	mov	r0, r8
 8001f82:	4649      	mov	r1, r9
 8001f84:	f7fe fdc6 	bl	8000b14 <__aeabi_d2uiz>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	64e3      	str	r3, [r4, #76]	@ 0x4c
	if (pwm_signal < 0) {
 8001f8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	da06      	bge.n	8001fa0 <Update_pwm+0x118>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, RESET);
 8001f92:	8c3b      	ldrh	r3, [r7, #32]
 8001f94:	2200      	movs	r2, #0
 8001f96:	4619      	mov	r1, r3
 8001f98:	69f8      	ldr	r0, [r7, #28]
 8001f9a:	f002 ffeb 	bl	8004f74 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
	}
}
 8001f9e:	e005      	b.n	8001fac <Update_pwm+0x124>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
 8001fa0:	8c3b      	ldrh	r3, [r7, #32]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	69f8      	ldr	r0, [r7, #28]
 8001fa8:	f002 ffe4 	bl	8004f74 <HAL_GPIO_WritePin>
}
 8001fac:	bf00      	nop
 8001fae:	372c      	adds	r7, #44	@ 0x2c
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001fb6 <QEI_init>:
 *  Created on: Apr 24, 2024
 *      Author: naker
 */
#include "qei.h"

void QEI_init(QEI* qei, int32_t ppr, int32_t freq, int32_t period){
 8001fb6:	b480      	push	{r7}
 8001fb8:	b085      	sub	sp, #20
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	603b      	str	r3, [r7, #0]
	qei -> ppr = ppr;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	601a      	str	r2, [r3, #0]
	qei -> freq = freq;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	605a      	str	r2, [r3, #4]
	qei -> period = period;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	609a      	str	r2, [r3, #8]
	qei -> counter_value[NEW] = 0;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 8001fe8:	68f9      	ldr	r1, [r7, #12]
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0.0;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0.0;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	621a      	str	r2, [r3, #32]
	qei -> mm = 0.0;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	629a      	str	r2, [r3, #40]	@ 0x28
	qei -> pps = 0.0;
 800200e:	68f9      	ldr	r1, [r7, #12]
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	f04f 0300 	mov.w	r3, #0
 8002018:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> rpm = 0.0;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> radps = 0.0;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> mmps = 0.0;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002034:	bf00      	nop
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <Update_qei>:

void Update_qei(QEI* qei, TIM_HandleTypeDef* htim){
 8002040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	6039      	str	r1, [r7, #0]
	// Update counter
	qei -> counter_value[NEW] = __HAL_TIM_GET_COUNTER(htim);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	60da      	str	r2, [r3, #12]
	// Update difference of counter's value = NEW - OLD
	qei -> diff_counter_value = qei -> counter_value[NEW] - qei -> counter_value[OLD];
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	461a      	mov	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	615a      	str	r2, [r3, #20]
	if(qei -> diff_counter_value > qei -> period / 2){
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695a      	ldr	r2, [r3, #20]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	0fd9      	lsrs	r1, r3, #31
 8002070:	440b      	add	r3, r1
 8002072:	105b      	asrs	r3, r3, #1
 8002074:	429a      	cmp	r2, r3
 8002076:	dd06      	ble.n	8002086 <Update_qei+0x46>
		qei -> diff_counter_value -= qei -> period;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	695a      	ldr	r2, [r3, #20]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	1ad2      	subs	r2, r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	615a      	str	r2, [r3, #20]
	}
	// over flow problem
	if(qei -> diff_counter_value < -(qei -> period) / 2){
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695a      	ldr	r2, [r3, #20]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	425b      	negs	r3, r3
 8002090:	0fd9      	lsrs	r1, r3, #31
 8002092:	440b      	add	r3, r1
 8002094:	105b      	asrs	r3, r3, #1
 8002096:	429a      	cmp	r2, r3
 8002098:	da06      	bge.n	80020a8 <Update_qei+0x68>
		qei -> diff_counter_value += qei -> period;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	441a      	add	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	615a      	str	r2, [r3, #20]
	}
	// Update velocity at difference unit
	qei -> pps = (float)qei -> diff_counter_value * (float)qei -> freq;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	ee07 3a90 	vmov	s15, r3
 80020b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	ee07 3a90 	vmov	s15, r3
 80020bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c4:	ee17 0a90 	vmov	r0, s15
 80020c8:	f7fe fa0a 	bl	80004e0 <__aeabi_f2d>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> radps = qei -> pps * 2.0 * M_PI / (float)(qei -> ppr);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	f7fe f8a0 	bl	8000224 <__adddf3>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4610      	mov	r0, r2
 80020ea:	4619      	mov	r1, r3
 80020ec:	a38a      	add	r3, pc, #552	@ (adr r3, 8002318 <Update_qei+0x2d8>)
 80020ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f2:	f7fe fa4d 	bl	8000590 <__aeabi_dmul>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	4692      	mov	sl, r2
 80020fc:	469b      	mov	fp, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	ee07 3a90 	vmov	s15, r3
 8002106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800210a:	ee17 0a90 	vmov	r0, s15
 800210e:	f7fe f9e7 	bl	80004e0 <__aeabi_f2d>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4650      	mov	r0, sl
 8002118:	4659      	mov	r1, fp
 800211a:	f7fe fb63 	bl	80007e4 <__aeabi_ddiv>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	4610      	mov	r0, r2
 8002124:	4619      	mov	r1, r3
 8002126:	f7fe fd15 	bl	8000b54 <__aeabi_d2f>
 800212a:	4602      	mov	r2, r0
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> rpm = qei -> pps * 60.0 / (float)(qei -> ppr) ;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	4b79      	ldr	r3, [pc, #484]	@ (8002320 <Update_qei+0x2e0>)
 800213c:	f7fe fa28 	bl	8000590 <__aeabi_dmul>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4692      	mov	sl, r2
 8002146:	469b      	mov	fp, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	ee07 3a90 	vmov	s15, r3
 8002150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002154:	ee17 0a90 	vmov	r0, s15
 8002158:	f7fe f9c2 	bl	80004e0 <__aeabi_f2d>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4650      	mov	r0, sl
 8002162:	4659      	mov	r1, fp
 8002164:	f7fe fb3e 	bl	80007e4 <__aeabi_ddiv>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4610      	mov	r0, r2
 800216e:	4619      	mov	r1, r3
 8002170:	f7fe fcf0 	bl	8000b54 <__aeabi_d2f>
 8002174:	4602      	mov	r2, r0
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> mmps = qei -> pps * 16.0 / (float)(qei -> ppr);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	4b67      	ldr	r3, [pc, #412]	@ (8002324 <Update_qei+0x2e4>)
 8002186:	f7fe fa03 	bl	8000590 <__aeabi_dmul>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	4692      	mov	sl, r2
 8002190:	469b      	mov	fp, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	ee07 3a90 	vmov	s15, r3
 800219a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800219e:	ee17 0a90 	vmov	r0, s15
 80021a2:	f7fe f99d 	bl	80004e0 <__aeabi_f2d>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	4650      	mov	r0, sl
 80021ac:	4659      	mov	r1, fp
 80021ae:	f7fe fb19 	bl	80007e4 <__aeabi_ddiv>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4610      	mov	r0, r2
 80021b8:	4619      	mov	r1, r3
 80021ba:	f7fe fccb 	bl	8000b54 <__aeabi_d2f>
 80021be:	4602      	mov	r2, r0
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	641a      	str	r2, [r3, #64]	@ 0x40
	// Update position at difference unit
	qei -> pulse += qei -> diff_counter_value;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	6949      	ldr	r1, [r1, #20]
 80021ce:	17c8      	asrs	r0, r1, #31
 80021d0:	460c      	mov	r4, r1
 80021d2:	4605      	mov	r5, r0
 80021d4:	eb12 0804 	adds.w	r8, r2, r4
 80021d8:	eb43 0905 	adc.w	r9, r3, r5
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	e9c3 8906 	strd	r8, r9, [r3, #24]
	qei -> rad += (float)qei -> diff_counter_value * 2.0 * M_PI / (float)(qei -> ppr);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe f97a 	bl	80004e0 <__aeabi_f2d>
 80021ec:	4604      	mov	r4, r0
 80021ee:	460d      	mov	r5, r1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	ee07 3a90 	vmov	s15, r3
 80021f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021fc:	ee17 0a90 	vmov	r0, s15
 8002200:	f7fe f96e 	bl	80004e0 <__aeabi_f2d>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	f7fe f80c 	bl	8000224 <__adddf3>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
 8002214:	a340      	add	r3, pc, #256	@ (adr r3, 8002318 <Update_qei+0x2d8>)
 8002216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221a:	f7fe f9b9 	bl	8000590 <__aeabi_dmul>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4690      	mov	r8, r2
 8002224:	4699      	mov	r9, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	ee07 3a90 	vmov	s15, r3
 800222e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002232:	ee17 0a90 	vmov	r0, s15
 8002236:	f7fe f953 	bl	80004e0 <__aeabi_f2d>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	4640      	mov	r0, r8
 8002240:	4649      	mov	r1, r9
 8002242:	f7fe facf 	bl	80007e4 <__aeabi_ddiv>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4620      	mov	r0, r4
 800224c:	4629      	mov	r1, r5
 800224e:	f7fd ffe9 	bl	8000224 <__adddf3>
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	4610      	mov	r0, r2
 8002258:	4619      	mov	r1, r3
 800225a:	f7fe fc7b 	bl	8000b54 <__aeabi_d2f>
 800225e:	4602      	mov	r2, r0
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev += (float)qei -> diff_counter_value / (float)(qei -> ppr);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	ed93 7a08 	vldr	s14, [r3, #32]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	ee07 3a90 	vmov	s15, r3
 8002272:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	ee07 3a90 	vmov	s15, r3
 800227e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002282:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002286:	ee77 7a27 	vadd.f32	s15, s14, s15
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	edc3 7a08 	vstr	s15, [r3, #32]
	qei -> mm += (float)qei -> diff_counter_value * 16.0 / (float)(qei -> ppr); // for lead 16 mm.
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe f923 	bl	80004e0 <__aeabi_f2d>
 800229a:	4604      	mov	r4, r0
 800229c:	460d      	mov	r5, r1
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	ee07 3a90 	vmov	s15, r3
 80022a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022aa:	ee17 0a90 	vmov	r0, s15
 80022ae:	f7fe f917 	bl	80004e0 <__aeabi_f2d>
 80022b2:	f04f 0200 	mov.w	r2, #0
 80022b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002324 <Update_qei+0x2e4>)
 80022b8:	f7fe f96a 	bl	8000590 <__aeabi_dmul>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4690      	mov	r8, r2
 80022c2:	4699      	mov	r9, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	ee07 3a90 	vmov	s15, r3
 80022cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022d0:	ee17 0a90 	vmov	r0, s15
 80022d4:	f7fe f904 	bl	80004e0 <__aeabi_f2d>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4640      	mov	r0, r8
 80022de:	4649      	mov	r1, r9
 80022e0:	f7fe fa80 	bl	80007e4 <__aeabi_ddiv>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4620      	mov	r0, r4
 80022ea:	4629      	mov	r1, r5
 80022ec:	f7fd ff9a 	bl	8000224 <__adddf3>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4610      	mov	r0, r2
 80022f6:	4619      	mov	r1, r3
 80022f8:	f7fe fc2c 	bl	8000b54 <__aeabi_d2f>
 80022fc:	4602      	mov	r2, r0
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	629a      	str	r2, [r3, #40]	@ 0x28
	// Update acceleration at difference

	// Update OLD value
	qei -> counter_value[OLD] = qei -> counter_value[NEW];
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	611a      	str	r2, [r3, #16]

}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002314:	f3af 8000 	nop.w
 8002318:	54442d18 	.word	0x54442d18
 800231c:	400921fb 	.word	0x400921fb
 8002320:	404e0000 	.word	0x404e0000
 8002324:	40300000 	.word	0x40300000

08002328 <Get_mmps>:
	qei -> pps = 0;
	qei -> rpm = 0;
	qei -> radps =0;
}

float32_t Get_mmps(QEI* qei){
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
	return qei -> mmps;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	ee07 3a90 	vmov	s15, r3
}
 8002338:	eeb0 0a67 	vmov.f32	s0, s15
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800234e:	4b0f      	ldr	r3, [pc, #60]	@ (800238c <HAL_MspInit+0x44>)
 8002350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002352:	4a0e      	ldr	r2, [pc, #56]	@ (800238c <HAL_MspInit+0x44>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6613      	str	r3, [r2, #96]	@ 0x60
 800235a:	4b0c      	ldr	r3, [pc, #48]	@ (800238c <HAL_MspInit+0x44>)
 800235c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	607b      	str	r3, [r7, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002366:	4b09      	ldr	r3, [pc, #36]	@ (800238c <HAL_MspInit+0x44>)
 8002368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236a:	4a08      	ldr	r2, [pc, #32]	@ (800238c <HAL_MspInit+0x44>)
 800236c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002370:	6593      	str	r3, [r2, #88]	@ 0x58
 8002372:	4b06      	ldr	r3, [pc, #24]	@ (800238c <HAL_MspInit+0x44>)
 8002374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800237e:	f002 fecd 	bl	800511c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40021000 	.word	0x40021000

08002390 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b09e      	sub	sp, #120	@ 0x78
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002398:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023a8:	f107 0310 	add.w	r3, r7, #16
 80023ac:	2254      	movs	r2, #84	@ 0x54
 80023ae:	2100      	movs	r1, #0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f006 fa47 	bl	8008844 <memset>
  if(hadc->Instance==ADC1)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023be:	d167      	bne.n	8002490 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80023c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023c4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80023c6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80023ca:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023cc:	f107 0310 	add.w	r3, r7, #16
 80023d0:	4618      	mov	r0, r3
 80023d2:	f003 fbe1 	bl	8005b98 <HAL_RCCEx_PeriphCLKConfig>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80023dc:	f7ff fbe0 	bl	8001ba0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80023e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002498 <HAL_ADC_MspInit+0x108>)
 80023e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023e4:	4a2c      	ldr	r2, [pc, #176]	@ (8002498 <HAL_ADC_MspInit+0x108>)
 80023e6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80023ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002498 <HAL_ADC_MspInit+0x108>)
 80023ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f8:	4b27      	ldr	r3, [pc, #156]	@ (8002498 <HAL_ADC_MspInit+0x108>)
 80023fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023fc:	4a26      	ldr	r2, [pc, #152]	@ (8002498 <HAL_ADC_MspInit+0x108>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002404:	4b24      	ldr	r3, [pc, #144]	@ (8002498 <HAL_ADC_MspInit+0x108>)
 8002406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Current_sensor_Pin;
 8002410:	2301      	movs	r3, #1
 8002412:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002414:	2303      	movs	r3, #3
 8002416:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Current_sensor_GPIO_Port, &GPIO_InitStruct);
 800241c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002420:	4619      	mov	r1, r3
 8002422:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002426:	f002 fc0b 	bl	8004c40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800242a:	4b1c      	ldr	r3, [pc, #112]	@ (800249c <HAL_ADC_MspInit+0x10c>)
 800242c:	4a1c      	ldr	r2, [pc, #112]	@ (80024a0 <HAL_ADC_MspInit+0x110>)
 800242e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002430:	4b1a      	ldr	r3, [pc, #104]	@ (800249c <HAL_ADC_MspInit+0x10c>)
 8002432:	2205      	movs	r2, #5
 8002434:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002436:	4b19      	ldr	r3, [pc, #100]	@ (800249c <HAL_ADC_MspInit+0x10c>)
 8002438:	2200      	movs	r2, #0
 800243a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800243c:	4b17      	ldr	r3, [pc, #92]	@ (800249c <HAL_ADC_MspInit+0x10c>)
 800243e:	2200      	movs	r2, #0
 8002440:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002442:	4b16      	ldr	r3, [pc, #88]	@ (800249c <HAL_ADC_MspInit+0x10c>)
 8002444:	2280      	movs	r2, #128	@ 0x80
 8002446:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002448:	4b14      	ldr	r3, [pc, #80]	@ (800249c <HAL_ADC_MspInit+0x10c>)
 800244a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800244e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002450:	4b12      	ldr	r3, [pc, #72]	@ (800249c <HAL_ADC_MspInit+0x10c>)
 8002452:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002456:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002458:	4b10      	ldr	r3, [pc, #64]	@ (800249c <HAL_ADC_MspInit+0x10c>)
 800245a:	2220      	movs	r2, #32
 800245c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800245e:	4b0f      	ldr	r3, [pc, #60]	@ (800249c <HAL_ADC_MspInit+0x10c>)
 8002460:	2200      	movs	r2, #0
 8002462:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002464:	480d      	ldr	r0, [pc, #52]	@ (800249c <HAL_ADC_MspInit+0x10c>)
 8002466:	f002 f979 	bl	800475c <HAL_DMA_Init>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8002470:	f7ff fb96 	bl	8001ba0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a09      	ldr	r2, [pc, #36]	@ (800249c <HAL_ADC_MspInit+0x10c>)
 8002478:	655a      	str	r2, [r3, #84]	@ 0x54
 800247a:	4a08      	ldr	r2, [pc, #32]	@ (800249c <HAL_ADC_MspInit+0x10c>)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002480:	2200      	movs	r2, #0
 8002482:	2100      	movs	r1, #0
 8002484:	2012      	movs	r0, #18
 8002486:	f002 f934 	bl	80046f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800248a:	2012      	movs	r0, #18
 800248c:	f002 f94b 	bl	8004726 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002490:	bf00      	nop
 8002492:	3778      	adds	r7, #120	@ 0x78
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000
 800249c:	200000ac 	.word	0x200000ac
 80024a0:	40020008 	.word	0x40020008

080024a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b09e      	sub	sp, #120	@ 0x78
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024bc:	f107 0310 	add.w	r3, r7, #16
 80024c0:	2254      	movs	r2, #84	@ 0x54
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f006 f9bd 	bl	8008844 <memset>
  if(huart->Instance==LPUART1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a1f      	ldr	r2, [pc, #124]	@ (800254c <HAL_UART_MspInit+0xa8>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d136      	bne.n	8002542 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80024d4:	2320      	movs	r3, #32
 80024d6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80024d8:	2300      	movs	r3, #0
 80024da:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024dc:	f107 0310 	add.w	r3, r7, #16
 80024e0:	4618      	mov	r0, r3
 80024e2:	f003 fb59 	bl	8005b98 <HAL_RCCEx_PeriphCLKConfig>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80024ec:	f7ff fb58 	bl	8001ba0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80024f0:	4b17      	ldr	r3, [pc, #92]	@ (8002550 <HAL_UART_MspInit+0xac>)
 80024f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f4:	4a16      	ldr	r2, [pc, #88]	@ (8002550 <HAL_UART_MspInit+0xac>)
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80024fc:	4b14      	ldr	r3, [pc, #80]	@ (8002550 <HAL_UART_MspInit+0xac>)
 80024fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002508:	4b11      	ldr	r3, [pc, #68]	@ (8002550 <HAL_UART_MspInit+0xac>)
 800250a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800250c:	4a10      	ldr	r2, [pc, #64]	@ (8002550 <HAL_UART_MspInit+0xac>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002514:	4b0e      	ldr	r3, [pc, #56]	@ (8002550 <HAL_UART_MspInit+0xac>)
 8002516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002520:	230c      	movs	r3, #12
 8002522:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002524:	2302      	movs	r3, #2
 8002526:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002528:	2300      	movs	r3, #0
 800252a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252c:	2300      	movs	r3, #0
 800252e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002530:	230c      	movs	r3, #12
 8002532:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002534:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002538:	4619      	mov	r1, r3
 800253a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800253e:	f002 fb7f 	bl	8004c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002542:	bf00      	nop
 8002544:	3778      	adds	r7, #120	@ 0x78
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40008000 	.word	0x40008000
 8002550:	40021000 	.word	0x40021000

08002554 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a16      	ldr	r2, [pc, #88]	@ (80025bc <HAL_TIM_Base_MspInit+0x68>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d10c      	bne.n	8002580 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002566:	4b16      	ldr	r3, [pc, #88]	@ (80025c0 <HAL_TIM_Base_MspInit+0x6c>)
 8002568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800256a:	4a15      	ldr	r2, [pc, #84]	@ (80025c0 <HAL_TIM_Base_MspInit+0x6c>)
 800256c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002570:	6613      	str	r3, [r2, #96]	@ 0x60
 8002572:	4b13      	ldr	r3, [pc, #76]	@ (80025c0 <HAL_TIM_Base_MspInit+0x6c>)
 8002574:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002576:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800257e:	e018      	b.n	80025b2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a0f      	ldr	r2, [pc, #60]	@ (80025c4 <HAL_TIM_Base_MspInit+0x70>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d113      	bne.n	80025b2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800258a:	4b0d      	ldr	r3, [pc, #52]	@ (80025c0 <HAL_TIM_Base_MspInit+0x6c>)
 800258c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258e:	4a0c      	ldr	r2, [pc, #48]	@ (80025c0 <HAL_TIM_Base_MspInit+0x6c>)
 8002590:	f043 0302 	orr.w	r3, r3, #2
 8002594:	6593      	str	r3, [r2, #88]	@ 0x58
 8002596:	4b0a      	ldr	r3, [pc, #40]	@ (80025c0 <HAL_TIM_Base_MspInit+0x6c>)
 8002598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80025a2:	2200      	movs	r2, #0
 80025a4:	2100      	movs	r1, #0
 80025a6:	201d      	movs	r0, #29
 80025a8:	f002 f8a3 	bl	80046f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025ac:	201d      	movs	r0, #29
 80025ae:	f002 f8ba 	bl	8004726 <HAL_NVIC_EnableIRQ>
}
 80025b2:	bf00      	nop
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40012c00 	.word	0x40012c00
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40000400 	.word	0x40000400

080025c8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08a      	sub	sp, #40	@ 0x28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	60da      	str	r2, [r3, #12]
 80025de:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002658 <HAL_TIM_Encoder_MspInit+0x90>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d131      	bne.n	800264e <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80025ea:	4b1c      	ldr	r3, [pc, #112]	@ (800265c <HAL_TIM_Encoder_MspInit+0x94>)
 80025ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ee:	4a1b      	ldr	r2, [pc, #108]	@ (800265c <HAL_TIM_Encoder_MspInit+0x94>)
 80025f0:	f043 0304 	orr.w	r3, r3, #4
 80025f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80025f6:	4b19      	ldr	r3, [pc, #100]	@ (800265c <HAL_TIM_Encoder_MspInit+0x94>)
 80025f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025fa:	f003 0304 	and.w	r3, r3, #4
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002602:	4b16      	ldr	r3, [pc, #88]	@ (800265c <HAL_TIM_Encoder_MspInit+0x94>)
 8002604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002606:	4a15      	ldr	r2, [pc, #84]	@ (800265c <HAL_TIM_Encoder_MspInit+0x94>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800260e:	4b13      	ldr	r3, [pc, #76]	@ (800265c <HAL_TIM_Encoder_MspInit+0x94>)
 8002610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
 800261a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800261e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002620:	2302      	movs	r3, #2
 8002622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002628:	2300      	movs	r3, #0
 800262a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800262c:	230a      	movs	r3, #10
 800262e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002630:	f107 0314 	add.w	r3, r7, #20
 8002634:	4619      	mov	r1, r3
 8002636:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800263a:	f002 fb01 	bl	8004c40 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800263e:	2200      	movs	r2, #0
 8002640:	2100      	movs	r1, #0
 8002642:	201e      	movs	r0, #30
 8002644:	f002 f855 	bl	80046f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002648:	201e      	movs	r0, #30
 800264a:	f002 f86c 	bl	8004726 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800264e:	bf00      	nop
 8002650:	3728      	adds	r7, #40	@ 0x28
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40000800 	.word	0x40000800
 800265c:	40021000 	.word	0x40021000

08002660 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 030c 	add.w	r3, r7, #12
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a11      	ldr	r2, [pc, #68]	@ (80026c4 <HAL_TIM_MspPostInit+0x64>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d11b      	bne.n	80026ba <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002682:	4b11      	ldr	r3, [pc, #68]	@ (80026c8 <HAL_TIM_MspPostInit+0x68>)
 8002684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002686:	4a10      	ldr	r2, [pc, #64]	@ (80026c8 <HAL_TIM_MspPostInit+0x68>)
 8002688:	f043 0304 	orr.w	r3, r3, #4
 800268c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800268e:	4b0e      	ldr	r3, [pc, #56]	@ (80026c8 <HAL_TIM_MspPostInit+0x68>)
 8002690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	60bb      	str	r3, [r7, #8]
 8002698:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_signal_Pin;
 800269a:	2301      	movs	r3, #1
 800269c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269e:	2302      	movs	r3, #2
 80026a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80026aa:	2302      	movs	r3, #2
 80026ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_signal_GPIO_Port, &GPIO_InitStruct);
 80026ae:	f107 030c 	add.w	r3, r7, #12
 80026b2:	4619      	mov	r1, r3
 80026b4:	4805      	ldr	r0, [pc, #20]	@ (80026cc <HAL_TIM_MspPostInit+0x6c>)
 80026b6:	f002 fac3 	bl	8004c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80026ba:	bf00      	nop
 80026bc:	3720      	adds	r7, #32
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40012c00 	.word	0x40012c00
 80026c8:	40021000 	.word	0x40021000
 80026cc:	48000800 	.word	0x48000800

080026d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026d4:	bf00      	nop
 80026d6:	e7fd      	b.n	80026d4 <NMI_Handler+0x4>

080026d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026dc:	bf00      	nop
 80026de:	e7fd      	b.n	80026dc <HardFault_Handler+0x4>

080026e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026e4:	bf00      	nop
 80026e6:	e7fd      	b.n	80026e4 <MemManage_Handler+0x4>

080026e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ec:	bf00      	nop
 80026ee:	e7fd      	b.n	80026ec <BusFault_Handler+0x4>

080026f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026f4:	bf00      	nop
 80026f6:	e7fd      	b.n	80026f4 <UsageFault_Handler+0x4>

080026f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002706:	b480      	push	{r7}
 8002708:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800270a:	bf00      	nop
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002726:	f000 f8c9 	bl	80028bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002734:	4802      	ldr	r0, [pc, #8]	@ (8002740 <DMA1_Channel1_IRQHandler+0x10>)
 8002736:	f002 f934 	bl	80049a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	200000ac 	.word	0x200000ac

08002744 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002748:	4802      	ldr	r0, [pc, #8]	@ (8002754 <ADC1_2_IRQHandler+0x10>)
 800274a:	f000 fda5 	bl	8003298 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000040 	.word	0x20000040

08002758 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800275c:	4802      	ldr	r0, [pc, #8]	@ (8002768 <TIM3_IRQHandler+0x10>)
 800275e:	f004 f851 	bl	8006804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	200001ec 	.word	0x200001ec

0800276c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002770:	4802      	ldr	r0, [pc, #8]	@ (800277c <TIM4_IRQHandler+0x10>)
 8002772:	f004 f847 	bl	8006804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000238 	.word	0x20000238

08002780 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Proximity_Pin);
 8002784:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002788:	f002 fc0c 	bl	8004fa4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800278c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002790:	f002 fc08 	bl	8004fa4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_switch_Pin);
 8002794:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002798:	f002 fc04 	bl	8004fa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}

080027a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80027a4:	4b06      	ldr	r3, [pc, #24]	@ (80027c0 <SystemInit+0x20>)
 80027a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027aa:	4a05      	ldr	r2, [pc, #20]	@ (80027c0 <SystemInit+0x20>)
 80027ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027c4:	480d      	ldr	r0, [pc, #52]	@ (80027fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027c8:	f7ff ffea 	bl	80027a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027cc:	480c      	ldr	r0, [pc, #48]	@ (8002800 <LoopForever+0x6>)
  ldr r1, =_edata
 80027ce:	490d      	ldr	r1, [pc, #52]	@ (8002804 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002808 <LoopForever+0xe>)
  movs r3, #0
 80027d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80027d4:	e002      	b.n	80027dc <LoopCopyDataInit>

080027d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027da:	3304      	adds	r3, #4

080027dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027e0:	d3f9      	bcc.n	80027d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027e2:	4a0a      	ldr	r2, [pc, #40]	@ (800280c <LoopForever+0x12>)
  ldr r4, =_ebss
 80027e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002810 <LoopForever+0x16>)
  movs r3, #0
 80027e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027e8:	e001      	b.n	80027ee <LoopFillZerobss>

080027ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027ec:	3204      	adds	r2, #4

080027ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027f0:	d3fb      	bcc.n	80027ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027f2:	f006 f82f 	bl	8008854 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027f6:	f7fe fc37 	bl	8001068 <main>

080027fa <LoopForever>:

LoopForever:
    b LoopForever
 80027fa:	e7fe      	b.n	80027fa <LoopForever>
  ldr   r0, =_estack
 80027fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002804:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002808:	08008904 	.word	0x08008904
  ldr r2, =_sbss
 800280c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002810:	2000040c 	.word	0x2000040c

08002814 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002814:	e7fe      	b.n	8002814 <ADC3_IRQHandler>

08002816 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b082      	sub	sp, #8
 800281a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800281c:	2300      	movs	r3, #0
 800281e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002820:	2003      	movs	r0, #3
 8002822:	f001 ff5b 	bl	80046dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002826:	2000      	movs	r0, #0
 8002828:	f000 f80e 	bl	8002848 <HAL_InitTick>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d002      	beq.n	8002838 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	71fb      	strb	r3, [r7, #7]
 8002836:	e001      	b.n	800283c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002838:	f7ff fd86 	bl	8002348 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800283c:	79fb      	ldrb	r3, [r7, #7]

}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002850:	2300      	movs	r3, #0
 8002852:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002854:	4b16      	ldr	r3, [pc, #88]	@ (80028b0 <HAL_InitTick+0x68>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d022      	beq.n	80028a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800285c:	4b15      	ldr	r3, [pc, #84]	@ (80028b4 <HAL_InitTick+0x6c>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b13      	ldr	r3, [pc, #76]	@ (80028b0 <HAL_InitTick+0x68>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002868:	fbb1 f3f3 	udiv	r3, r1, r3
 800286c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002870:	4618      	mov	r0, r3
 8002872:	f001 ff66 	bl	8004742 <HAL_SYSTICK_Config>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10f      	bne.n	800289c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b0f      	cmp	r3, #15
 8002880:	d809      	bhi.n	8002896 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002882:	2200      	movs	r2, #0
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	f04f 30ff 	mov.w	r0, #4294967295
 800288a:	f001 ff32 	bl	80046f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800288e:	4a0a      	ldr	r2, [pc, #40]	@ (80028b8 <HAL_InitTick+0x70>)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	e007      	b.n	80028a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	73fb      	strb	r3, [r7, #15]
 800289a:	e004      	b.n	80028a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	73fb      	strb	r3, [r7, #15]
 80028a0:	e001      	b.n	80028a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20000014 	.word	0x20000014
 80028b4:	2000000c 	.word	0x2000000c
 80028b8:	20000010 	.word	0x20000010

080028bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028c0:	4b05      	ldr	r3, [pc, #20]	@ (80028d8 <HAL_IncTick+0x1c>)
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4b05      	ldr	r3, [pc, #20]	@ (80028dc <HAL_IncTick+0x20>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4413      	add	r3, r2
 80028ca:	4a03      	ldr	r2, [pc, #12]	@ (80028d8 <HAL_IncTick+0x1c>)
 80028cc:	6013      	str	r3, [r2, #0]
}
 80028ce:	bf00      	nop
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	20000408 	.word	0x20000408
 80028dc:	20000014 	.word	0x20000014

080028e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return uwTick;
 80028e4:	4b03      	ldr	r3, [pc, #12]	@ (80028f4 <HAL_GetTick+0x14>)
 80028e6:	681b      	ldr	r3, [r3, #0]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	20000408 	.word	0x20000408

080028f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	609a      	str	r2, [r3, #8]
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	609a      	str	r2, [r3, #8]
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002954:	4618      	mov	r0, r3
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002960:	b480      	push	{r7}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	3360      	adds	r3, #96	@ 0x60
 8002972:	461a      	mov	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b08      	ldr	r3, [pc, #32]	@ (80029a4 <LL_ADC_SetOffset+0x44>)
 8002982:	4013      	ands	r3, r2
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	4313      	orrs	r3, r2
 8002990:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002998:	bf00      	nop
 800299a:	371c      	adds	r7, #28
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	03fff000 	.word	0x03fff000

080029a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3360      	adds	r3, #96	@ 0x60
 80029b6:	461a      	mov	r2, r3
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b087      	sub	sp, #28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3360      	adds	r3, #96	@ 0x60
 80029e4:	461a      	mov	r2, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	431a      	orrs	r2, r3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80029fe:	bf00      	nop
 8002a00:	371c      	adds	r7, #28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b087      	sub	sp, #28
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	3360      	adds	r3, #96	@ 0x60
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002a34:	bf00      	nop
 8002a36:	371c      	adds	r7, #28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	3360      	adds	r3, #96	@ 0x60
 8002a50:	461a      	mov	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	431a      	orrs	r2, r3
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002a6a:	bf00      	nop
 8002a6c:	371c      	adds	r7, #28
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
 8002a7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	615a      	str	r2, [r3, #20]
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e000      	b.n	8002ab6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b087      	sub	sp, #28
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	60f8      	str	r0, [r7, #12]
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	3330      	adds	r3, #48	@ 0x30
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	0a1b      	lsrs	r3, r3, #8
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	f003 030c 	and.w	r3, r3, #12
 8002ade:	4413      	add	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f003 031f 	and.w	r3, r3, #31
 8002aec:	211f      	movs	r1, #31
 8002aee:	fa01 f303 	lsl.w	r3, r1, r3
 8002af2:	43db      	mvns	r3, r3
 8002af4:	401a      	ands	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	0e9b      	lsrs	r3, r3, #26
 8002afa:	f003 011f 	and.w	r1, r3, #31
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f003 031f 	and.w	r3, r3, #31
 8002b04:	fa01 f303 	lsl.w	r3, r1, r3
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b0e:	bf00      	nop
 8002b10:	371c      	adds	r7, #28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b26:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b087      	sub	sp, #28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	3314      	adds	r3, #20
 8002b50:	461a      	mov	r2, r3
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	0e5b      	lsrs	r3, r3, #25
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	4413      	add	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	0d1b      	lsrs	r3, r3, #20
 8002b68:	f003 031f 	and.w	r3, r3, #31
 8002b6c:	2107      	movs	r1, #7
 8002b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	401a      	ands	r2, r3
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	0d1b      	lsrs	r3, r3, #20
 8002b7a:	f003 031f 	and.w	r3, r3, #31
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	fa01 f303 	lsl.w	r3, r1, r3
 8002b84:	431a      	orrs	r2, r3
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b8a:	bf00      	nop
 8002b8c:	371c      	adds	r7, #28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	401a      	ands	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f003 0318 	and.w	r3, r3, #24
 8002bba:	4908      	ldr	r1, [pc, #32]	@ (8002bdc <LL_ADC_SetChannelSingleDiff+0x44>)
 8002bbc:	40d9      	lsrs	r1, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	400b      	ands	r3, r1
 8002bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002bce:	bf00      	nop
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	0007ffff 	.word	0x0007ffff

08002be0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 031f 	and.w	r3, r3, #31
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002c28:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6093      	str	r3, [r2, #8]
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c50:	d101      	bne.n	8002c56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002c74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c78:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ca0:	d101      	bne.n	8002ca6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cc4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cc8:	f043 0201 	orr.w	r2, r3, #1
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <LL_ADC_IsEnabled+0x18>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <LL_ADC_IsEnabled+0x1a>
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d12:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d16:	f043 0204 	orr.w	r2, r3, #4
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d101      	bne.n	8002d42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 0308 	and.w	r3, r3, #8
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d101      	bne.n	8002d68 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d64:	2301      	movs	r3, #1
 8002d66:	e000      	b.n	8002d6a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
	...

08002d78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b089      	sub	sp, #36	@ 0x24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d80:	2300      	movs	r3, #0
 8002d82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e1a9      	b.n	80030e6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d109      	bne.n	8002db4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7ff faf5 	bl	8002390 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff ff3f 	bl	8002c3c <LL_ADC_IsDeepPowerDownEnabled>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d004      	beq.n	8002dce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff ff25 	bl	8002c18 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff ff5a 	bl	8002c8c <LL_ADC_IsInternalRegulatorEnabled>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d115      	bne.n	8002e0a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff ff3e 	bl	8002c64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002de8:	4b9c      	ldr	r3, [pc, #624]	@ (800305c <HAL_ADC_Init+0x2e4>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	099b      	lsrs	r3, r3, #6
 8002dee:	4a9c      	ldr	r2, [pc, #624]	@ (8003060 <HAL_ADC_Init+0x2e8>)
 8002df0:	fba2 2303 	umull	r2, r3, r2, r3
 8002df4:	099b      	lsrs	r3, r3, #6
 8002df6:	3301      	adds	r3, #1
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002dfc:	e002      	b.n	8002e04 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	3b01      	subs	r3, #1
 8002e02:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f9      	bne.n	8002dfe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff ff3c 	bl	8002c8c <LL_ADC_IsInternalRegulatorEnabled>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10d      	bne.n	8002e36 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e1e:	f043 0210 	orr.w	r2, r3, #16
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e2a:	f043 0201 	orr.w	r2, r3, #1
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff ff75 	bl	8002d2a <LL_ADC_REG_IsConversionOngoing>
 8002e40:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e46:	f003 0310 	and.w	r3, r3, #16
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f040 8142 	bne.w	80030d4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f040 813e 	bne.w	80030d4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002e60:	f043 0202 	orr.w	r2, r3, #2
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff ff35 	bl	8002cdc <LL_ADC_IsEnabled>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d141      	bne.n	8002efc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e80:	d004      	beq.n	8002e8c <HAL_ADC_Init+0x114>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a77      	ldr	r2, [pc, #476]	@ (8003064 <HAL_ADC_Init+0x2ec>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d10f      	bne.n	8002eac <HAL_ADC_Init+0x134>
 8002e8c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002e90:	f7ff ff24 	bl	8002cdc <LL_ADC_IsEnabled>
 8002e94:	4604      	mov	r4, r0
 8002e96:	4873      	ldr	r0, [pc, #460]	@ (8003064 <HAL_ADC_Init+0x2ec>)
 8002e98:	f7ff ff20 	bl	8002cdc <LL_ADC_IsEnabled>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	4323      	orrs	r3, r4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	bf0c      	ite	eq
 8002ea4:	2301      	moveq	r3, #1
 8002ea6:	2300      	movne	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	e012      	b.n	8002ed2 <HAL_ADC_Init+0x15a>
 8002eac:	486e      	ldr	r0, [pc, #440]	@ (8003068 <HAL_ADC_Init+0x2f0>)
 8002eae:	f7ff ff15 	bl	8002cdc <LL_ADC_IsEnabled>
 8002eb2:	4604      	mov	r4, r0
 8002eb4:	486d      	ldr	r0, [pc, #436]	@ (800306c <HAL_ADC_Init+0x2f4>)
 8002eb6:	f7ff ff11 	bl	8002cdc <LL_ADC_IsEnabled>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	431c      	orrs	r4, r3
 8002ebe:	486c      	ldr	r0, [pc, #432]	@ (8003070 <HAL_ADC_Init+0x2f8>)
 8002ec0:	f7ff ff0c 	bl	8002cdc <LL_ADC_IsEnabled>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	4323      	orrs	r3, r4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bf0c      	ite	eq
 8002ecc:	2301      	moveq	r3, #1
 8002ece:	2300      	movne	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d012      	beq.n	8002efc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ede:	d004      	beq.n	8002eea <HAL_ADC_Init+0x172>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a5f      	ldr	r2, [pc, #380]	@ (8003064 <HAL_ADC_Init+0x2ec>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d101      	bne.n	8002eee <HAL_ADC_Init+0x176>
 8002eea:	4a62      	ldr	r2, [pc, #392]	@ (8003074 <HAL_ADC_Init+0x2fc>)
 8002eec:	e000      	b.n	8002ef0 <HAL_ADC_Init+0x178>
 8002eee:	4a62      	ldr	r2, [pc, #392]	@ (8003078 <HAL_ADC_Init+0x300>)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	f7ff fcfe 	bl	80028f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	7f5b      	ldrb	r3, [r3, #29]
 8002f00:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f06:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002f0c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002f12:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f1a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d106      	bne.n	8002f38 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	045b      	lsls	r3, r3, #17
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d009      	beq.n	8002f54 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f44:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	4b48      	ldr	r3, [pc, #288]	@ (800307c <HAL_ADC_Init+0x304>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6812      	ldr	r2, [r2, #0]
 8002f62:	69b9      	ldr	r1, [r7, #24]
 8002f64:	430b      	orrs	r3, r1
 8002f66:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff fee4 	bl	8002d50 <LL_ADC_INJ_IsConversionOngoing>
 8002f88:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d17f      	bne.n	8003090 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d17c      	bne.n	8003090 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f9a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002fa2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002fb2:	f023 0302 	bic.w	r3, r3, #2
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6812      	ldr	r2, [r2, #0]
 8002fba:	69b9      	ldr	r1, [r7, #24]
 8002fbc:	430b      	orrs	r3, r1
 8002fbe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d017      	beq.n	8002ff8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002fd6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002fe0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002fe4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6911      	ldr	r1, [r2, #16]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	430b      	orrs	r3, r1
 8002ff2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002ff6:	e013      	b.n	8003020 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003006:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6812      	ldr	r2, [r2, #0]
 8003014:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003018:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800301c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003026:	2b01      	cmp	r3, #1
 8003028:	d12a      	bne.n	8003080 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003034:	f023 0304 	bic.w	r3, r3, #4
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003040:	4311      	orrs	r1, r2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003046:	4311      	orrs	r1, r2
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800304c:	430a      	orrs	r2, r1
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f042 0201 	orr.w	r2, r2, #1
 8003058:	611a      	str	r2, [r3, #16]
 800305a:	e019      	b.n	8003090 <HAL_ADC_Init+0x318>
 800305c:	2000000c 	.word	0x2000000c
 8003060:	053e2d63 	.word	0x053e2d63
 8003064:	50000100 	.word	0x50000100
 8003068:	50000400 	.word	0x50000400
 800306c:	50000500 	.word	0x50000500
 8003070:	50000600 	.word	0x50000600
 8003074:	50000300 	.word	0x50000300
 8003078:	50000700 	.word	0x50000700
 800307c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0201 	bic.w	r2, r2, #1
 800308e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d10c      	bne.n	80030b2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309e:	f023 010f 	bic.w	r1, r3, #15
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	1e5a      	subs	r2, r3, #1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80030b0:	e007      	b.n	80030c2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 020f 	bic.w	r2, r2, #15
 80030c0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c6:	f023 0303 	bic.w	r3, r3, #3
 80030ca:	f043 0201 	orr.w	r2, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80030d2:	e007      	b.n	80030e4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d8:	f043 0210 	orr.w	r2, r3, #16
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3724      	adds	r7, #36	@ 0x24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd90      	pop	{r4, r7, pc}
 80030ee:	bf00      	nop

080030f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003104:	d004      	beq.n	8003110 <HAL_ADC_Start_DMA+0x20>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a5a      	ldr	r2, [pc, #360]	@ (8003274 <HAL_ADC_Start_DMA+0x184>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d101      	bne.n	8003114 <HAL_ADC_Start_DMA+0x24>
 8003110:	4b59      	ldr	r3, [pc, #356]	@ (8003278 <HAL_ADC_Start_DMA+0x188>)
 8003112:	e000      	b.n	8003116 <HAL_ADC_Start_DMA+0x26>
 8003114:	4b59      	ldr	r3, [pc, #356]	@ (800327c <HAL_ADC_Start_DMA+0x18c>)
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fd62 	bl	8002be0 <LL_ADC_GetMultimode>
 800311c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff fe01 	bl	8002d2a <LL_ADC_REG_IsConversionOngoing>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	f040 809b 	bne.w	8003266 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <HAL_ADC_Start_DMA+0x4e>
 800313a:	2302      	movs	r3, #2
 800313c:	e096      	b.n	800326c <HAL_ADC_Start_DMA+0x17c>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a4d      	ldr	r2, [pc, #308]	@ (8003280 <HAL_ADC_Start_DMA+0x190>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d008      	beq.n	8003162 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d005      	beq.n	8003162 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	2b05      	cmp	r3, #5
 800315a:	d002      	beq.n	8003162 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	2b09      	cmp	r3, #9
 8003160:	d17a      	bne.n	8003258 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 ff60 	bl	8004028 <ADC_Enable>
 8003168:	4603      	mov	r3, r0
 800316a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800316c:	7dfb      	ldrb	r3, [r7, #23]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d16d      	bne.n	800324e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003176:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800317a:	f023 0301 	bic.w	r3, r3, #1
 800317e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a3a      	ldr	r2, [pc, #232]	@ (8003274 <HAL_ADC_Start_DMA+0x184>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d009      	beq.n	80031a4 <HAL_ADC_Start_DMA+0xb4>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a3b      	ldr	r2, [pc, #236]	@ (8003284 <HAL_ADC_Start_DMA+0x194>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d002      	beq.n	80031a0 <HAL_ADC_Start_DMA+0xb0>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	e003      	b.n	80031a8 <HAL_ADC_Start_DMA+0xb8>
 80031a0:	4b39      	ldr	r3, [pc, #228]	@ (8003288 <HAL_ADC_Start_DMA+0x198>)
 80031a2:	e001      	b.n	80031a8 <HAL_ADC_Start_DMA+0xb8>
 80031a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d002      	beq.n	80031b6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d105      	bne.n	80031c2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ba:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d006      	beq.n	80031dc <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031d2:	f023 0206 	bic.w	r2, r3, #6
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	661a      	str	r2, [r3, #96]	@ 0x60
 80031da:	e002      	b.n	80031e2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e6:	4a29      	ldr	r2, [pc, #164]	@ (800328c <HAL_ADC_Start_DMA+0x19c>)
 80031e8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ee:	4a28      	ldr	r2, [pc, #160]	@ (8003290 <HAL_ADC_Start_DMA+0x1a0>)
 80031f0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f6:	4a27      	ldr	r2, [pc, #156]	@ (8003294 <HAL_ADC_Start_DMA+0x1a4>)
 80031f8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	221c      	movs	r2, #28
 8003200:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f042 0210 	orr.w	r2, r2, #16
 8003218:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f042 0201 	orr.w	r2, r2, #1
 8003228:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	3340      	adds	r3, #64	@ 0x40
 8003234:	4619      	mov	r1, r3
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f001 fb37 	bl	80048ac <HAL_DMA_Start_IT>
 800323e:	4603      	mov	r3, r0
 8003240:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff fd5b 	bl	8002d02 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800324c:	e00d      	b.n	800326a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003256:	e008      	b.n	800326a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003264:	e001      	b.n	800326a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003266:	2302      	movs	r3, #2
 8003268:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800326a:	7dfb      	ldrb	r3, [r7, #23]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	50000100 	.word	0x50000100
 8003278:	50000300 	.word	0x50000300
 800327c:	50000700 	.word	0x50000700
 8003280:	50000600 	.word	0x50000600
 8003284:	50000500 	.word	0x50000500
 8003288:	50000400 	.word	0x50000400
 800328c:	08004155 	.word	0x08004155
 8003290:	0800422d 	.word	0x0800422d
 8003294:	08004249 	.word	0x08004249

08003298 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b08a      	sub	sp, #40	@ 0x28
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80032a0:	2300      	movs	r3, #0
 80032a2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032bc:	d004      	beq.n	80032c8 <HAL_ADC_IRQHandler+0x30>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a8e      	ldr	r2, [pc, #568]	@ (80034fc <HAL_ADC_IRQHandler+0x264>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d101      	bne.n	80032cc <HAL_ADC_IRQHandler+0x34>
 80032c8:	4b8d      	ldr	r3, [pc, #564]	@ (8003500 <HAL_ADC_IRQHandler+0x268>)
 80032ca:	e000      	b.n	80032ce <HAL_ADC_IRQHandler+0x36>
 80032cc:	4b8d      	ldr	r3, [pc, #564]	@ (8003504 <HAL_ADC_IRQHandler+0x26c>)
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff fc86 	bl	8002be0 <LL_ADC_GetMultimode>
 80032d4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d017      	beq.n	8003310 <HAL_ADC_IRQHandler+0x78>
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d012      	beq.n	8003310 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d105      	bne.n	8003302 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032fa:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f001 f808 	bl	8004318 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2202      	movs	r2, #2
 800330e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	2b00      	cmp	r3, #0
 8003318:	d004      	beq.n	8003324 <HAL_ADC_IRQHandler+0x8c>
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10b      	bne.n	800333c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 8094 	beq.w	8003458 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 808e 	beq.w	8003458 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	2b00      	cmp	r3, #0
 8003346:	d105      	bne.n	8003354 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800334c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff fb9f 	bl	8002a9c <LL_ADC_REG_IsTriggerSourceSWStart>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d072      	beq.n	800344a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a64      	ldr	r2, [pc, #400]	@ (80034fc <HAL_ADC_IRQHandler+0x264>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d009      	beq.n	8003382 <HAL_ADC_IRQHandler+0xea>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a65      	ldr	r2, [pc, #404]	@ (8003508 <HAL_ADC_IRQHandler+0x270>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d002      	beq.n	800337e <HAL_ADC_IRQHandler+0xe6>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	e003      	b.n	8003386 <HAL_ADC_IRQHandler+0xee>
 800337e:	4b63      	ldr	r3, [pc, #396]	@ (800350c <HAL_ADC_IRQHandler+0x274>)
 8003380:	e001      	b.n	8003386 <HAL_ADC_IRQHandler+0xee>
 8003382:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6812      	ldr	r2, [r2, #0]
 800338a:	4293      	cmp	r3, r2
 800338c:	d008      	beq.n	80033a0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2b05      	cmp	r3, #5
 8003398:	d002      	beq.n	80033a0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b09      	cmp	r3, #9
 800339e:	d104      	bne.n	80033aa <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	623b      	str	r3, [r7, #32]
 80033a8:	e014      	b.n	80033d4 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a53      	ldr	r2, [pc, #332]	@ (80034fc <HAL_ADC_IRQHandler+0x264>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d009      	beq.n	80033c8 <HAL_ADC_IRQHandler+0x130>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a53      	ldr	r2, [pc, #332]	@ (8003508 <HAL_ADC_IRQHandler+0x270>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d002      	beq.n	80033c4 <HAL_ADC_IRQHandler+0x12c>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	e003      	b.n	80033cc <HAL_ADC_IRQHandler+0x134>
 80033c4:	4b51      	ldr	r3, [pc, #324]	@ (800350c <HAL_ADC_IRQHandler+0x274>)
 80033c6:	e001      	b.n	80033cc <HAL_ADC_IRQHandler+0x134>
 80033c8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80033cc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d135      	bne.n	800344a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0308 	and.w	r3, r3, #8
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d12e      	bne.n	800344a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff fc9a 	bl	8002d2a <LL_ADC_REG_IsConversionOngoing>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d11a      	bne.n	8003432 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 020c 	bic.w	r2, r2, #12
 800340a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003410:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d112      	bne.n	800344a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003428:	f043 0201 	orr.w	r2, r3, #1
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003430:	e00b      	b.n	800344a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003436:	f043 0210 	orr.w	r2, r3, #16
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003442:	f043 0201 	orr.w	r2, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f984 	bl	8003758 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	220c      	movs	r2, #12
 8003456:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f003 0320 	and.w	r3, r3, #32
 800345e:	2b00      	cmp	r3, #0
 8003460:	d004      	beq.n	800346c <HAL_ADC_IRQHandler+0x1d4>
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	f003 0320 	and.w	r3, r3, #32
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10b      	bne.n	8003484 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 80b3 	beq.w	80035de <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 80ad 	beq.w	80035de <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003488:	f003 0310 	and.w	r3, r3, #16
 800348c:	2b00      	cmp	r3, #0
 800348e:	d105      	bne.n	800349c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003494:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff fb3a 	bl	8002b1a <LL_ADC_INJ_IsTriggerSourceSWStart>
 80034a6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff faf5 	bl	8002a9c <LL_ADC_REG_IsTriggerSourceSWStart>
 80034b2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a10      	ldr	r2, [pc, #64]	@ (80034fc <HAL_ADC_IRQHandler+0x264>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d009      	beq.n	80034d2 <HAL_ADC_IRQHandler+0x23a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a11      	ldr	r2, [pc, #68]	@ (8003508 <HAL_ADC_IRQHandler+0x270>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d002      	beq.n	80034ce <HAL_ADC_IRQHandler+0x236>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	e003      	b.n	80034d6 <HAL_ADC_IRQHandler+0x23e>
 80034ce:	4b0f      	ldr	r3, [pc, #60]	@ (800350c <HAL_ADC_IRQHandler+0x274>)
 80034d0:	e001      	b.n	80034d6 <HAL_ADC_IRQHandler+0x23e>
 80034d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6812      	ldr	r2, [r2, #0]
 80034da:	4293      	cmp	r3, r2
 80034dc:	d008      	beq.n	80034f0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d005      	beq.n	80034f0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	2b06      	cmp	r3, #6
 80034e8:	d002      	beq.n	80034f0 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2b07      	cmp	r3, #7
 80034ee:	d10f      	bne.n	8003510 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	623b      	str	r3, [r7, #32]
 80034f8:	e01f      	b.n	800353a <HAL_ADC_IRQHandler+0x2a2>
 80034fa:	bf00      	nop
 80034fc:	50000100 	.word	0x50000100
 8003500:	50000300 	.word	0x50000300
 8003504:	50000700 	.word	0x50000700
 8003508:	50000500 	.word	0x50000500
 800350c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a8b      	ldr	r2, [pc, #556]	@ (8003744 <HAL_ADC_IRQHandler+0x4ac>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d009      	beq.n	800352e <HAL_ADC_IRQHandler+0x296>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a8a      	ldr	r2, [pc, #552]	@ (8003748 <HAL_ADC_IRQHandler+0x4b0>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d002      	beq.n	800352a <HAL_ADC_IRQHandler+0x292>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	e003      	b.n	8003532 <HAL_ADC_IRQHandler+0x29a>
 800352a:	4b88      	ldr	r3, [pc, #544]	@ (800374c <HAL_ADC_IRQHandler+0x4b4>)
 800352c:	e001      	b.n	8003532 <HAL_ADC_IRQHandler+0x29a>
 800352e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003532:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d047      	beq.n	80035d0 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d007      	beq.n	800355a <HAL_ADC_IRQHandler+0x2c2>
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d03f      	beq.n	80035d0 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003556:	2b00      	cmp	r3, #0
 8003558:	d13a      	bne.n	80035d0 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003564:	2b40      	cmp	r3, #64	@ 0x40
 8003566:	d133      	bne.n	80035d0 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d12e      	bne.n	80035d0 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff fbea 	bl	8002d50 <LL_ADC_INJ_IsConversionOngoing>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d11a      	bne.n	80035b8 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003590:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003596:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d112      	bne.n	80035d0 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ae:	f043 0201 	orr.w	r2, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80035b6:	e00b      	b.n	80035d0 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035bc:	f043 0210 	orr.w	r2, r3, #16
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035c8:	f043 0201 	orr.w	r2, r3, #1
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 fe79 	bl	80042c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2260      	movs	r2, #96	@ 0x60
 80035dc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d011      	beq.n	800360c <HAL_ADC_IRQHandler+0x374>
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00c      	beq.n	800360c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f8be 	bl	8003780 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2280      	movs	r2, #128	@ 0x80
 800360a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003612:	2b00      	cmp	r3, #0
 8003614:	d012      	beq.n	800363c <HAL_ADC_IRQHandler+0x3a4>
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00d      	beq.n	800363c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003624:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 fe5f 	bl	80042f0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800363a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003642:	2b00      	cmp	r3, #0
 8003644:	d012      	beq.n	800366c <HAL_ADC_IRQHandler+0x3d4>
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00d      	beq.n	800366c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003654:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 fe51 	bl	8004304 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800366a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f003 0310 	and.w	r3, r3, #16
 8003672:	2b00      	cmp	r3, #0
 8003674:	d043      	beq.n	80036fe <HAL_ADC_IRQHandler+0x466>
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	f003 0310 	and.w	r3, r3, #16
 800367c:	2b00      	cmp	r3, #0
 800367e:	d03e      	beq.n	80036fe <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003684:	2b00      	cmp	r3, #0
 8003686:	d102      	bne.n	800368e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003688:	2301      	movs	r3, #1
 800368a:	627b      	str	r3, [r7, #36]	@ 0x24
 800368c:	e021      	b.n	80036d2 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d015      	beq.n	80036c0 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800369c:	d004      	beq.n	80036a8 <HAL_ADC_IRQHandler+0x410>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a28      	ldr	r2, [pc, #160]	@ (8003744 <HAL_ADC_IRQHandler+0x4ac>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d101      	bne.n	80036ac <HAL_ADC_IRQHandler+0x414>
 80036a8:	4b29      	ldr	r3, [pc, #164]	@ (8003750 <HAL_ADC_IRQHandler+0x4b8>)
 80036aa:	e000      	b.n	80036ae <HAL_ADC_IRQHandler+0x416>
 80036ac:	4b29      	ldr	r3, [pc, #164]	@ (8003754 <HAL_ADC_IRQHandler+0x4bc>)
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff faa4 	bl	8002bfc <LL_ADC_GetMultiDMATransfer>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00b      	beq.n	80036d2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80036ba:	2301      	movs	r3, #1
 80036bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80036be:	e008      	b.n	80036d2 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80036ce:	2301      	movs	r3, #1
 80036d0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80036d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d10e      	bne.n	80036f6 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036dc:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e8:	f043 0202 	orr.w	r2, r3, #2
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f84f 	bl	8003794 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2210      	movs	r2, #16
 80036fc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003704:	2b00      	cmp	r3, #0
 8003706:	d018      	beq.n	800373a <HAL_ADC_IRQHandler+0x4a2>
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800370e:	2b00      	cmp	r3, #0
 8003710:	d013      	beq.n	800373a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003716:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003722:	f043 0208 	orr.w	r2, r3, #8
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003732:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 fdd1 	bl	80042dc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800373a:	bf00      	nop
 800373c:	3728      	adds	r7, #40	@ 0x28
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	50000100 	.word	0x50000100
 8003748:	50000500 	.word	0x50000500
 800374c:	50000400 	.word	0x50000400
 8003750:	50000300 	.word	0x50000300
 8003754:	50000700 	.word	0x50000700

08003758 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b0b6      	sub	sp, #216	@ 0xd8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d102      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x24>
 80037c6:	2302      	movs	r3, #2
 80037c8:	f000 bc13 	b.w	8003ff2 <HAL_ADC_ConfigChannel+0x84a>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff faa6 	bl	8002d2a <LL_ADC_REG_IsConversionOngoing>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f040 83f3 	bne.w	8003fcc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6818      	ldr	r0, [r3, #0]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	6859      	ldr	r1, [r3, #4]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	f7ff f965 	bl	8002ac2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff fa94 	bl	8002d2a <LL_ADC_REG_IsConversionOngoing>
 8003802:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff faa0 	bl	8002d50 <LL_ADC_INJ_IsConversionOngoing>
 8003810:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003814:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003818:	2b00      	cmp	r3, #0
 800381a:	f040 81d9 	bne.w	8003bd0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800381e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003822:	2b00      	cmp	r3, #0
 8003824:	f040 81d4 	bne.w	8003bd0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003830:	d10f      	bne.n	8003852 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6818      	ldr	r0, [r3, #0]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2200      	movs	r2, #0
 800383c:	4619      	mov	r1, r3
 800383e:	f7ff f97f 	bl	8002b40 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff f913 	bl	8002a76 <LL_ADC_SetSamplingTimeCommonConfig>
 8003850:	e00e      	b.n	8003870 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	6819      	ldr	r1, [r3, #0]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	461a      	mov	r2, r3
 8003860:	f7ff f96e 	bl	8002b40 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2100      	movs	r1, #0
 800386a:	4618      	mov	r0, r3
 800386c:	f7ff f903 	bl	8002a76 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	695a      	ldr	r2, [r3, #20]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	08db      	lsrs	r3, r3, #3
 800387c:	f003 0303 	and.w	r3, r3, #3
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	2b04      	cmp	r3, #4
 8003890:	d022      	beq.n	80038d8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6818      	ldr	r0, [r3, #0]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	6919      	ldr	r1, [r3, #16]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80038a2:	f7ff f85d 	bl	8002960 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6818      	ldr	r0, [r3, #0]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	6919      	ldr	r1, [r3, #16]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	461a      	mov	r2, r3
 80038b4:	f7ff f8a9 	bl	8002a0a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6818      	ldr	r0, [r3, #0]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d102      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x126>
 80038c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038cc:	e000      	b.n	80038d0 <HAL_ADC_ConfigChannel+0x128>
 80038ce:	2300      	movs	r3, #0
 80038d0:	461a      	mov	r2, r3
 80038d2:	f7ff f8b5 	bl	8002a40 <LL_ADC_SetOffsetSaturation>
 80038d6:	e17b      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2100      	movs	r1, #0
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff f862 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 80038e4:	4603      	mov	r3, r0
 80038e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10a      	bne.n	8003904 <HAL_ADC_ConfigChannel+0x15c>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2100      	movs	r1, #0
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff f857 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 80038fa:	4603      	mov	r3, r0
 80038fc:	0e9b      	lsrs	r3, r3, #26
 80038fe:	f003 021f 	and.w	r2, r3, #31
 8003902:	e01e      	b.n	8003942 <HAL_ADC_ConfigChannel+0x19a>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2100      	movs	r1, #0
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff f84c 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 8003910:	4603      	mov	r3, r0
 8003912:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003916:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800391a:	fa93 f3a3 	rbit	r3, r3
 800391e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003922:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003926:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800392a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003932:	2320      	movs	r3, #32
 8003934:	e004      	b.n	8003940 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003936:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800393a:	fab3 f383 	clz	r3, r3
 800393e:	b2db      	uxtb	r3, r3
 8003940:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800394a:	2b00      	cmp	r3, #0
 800394c:	d105      	bne.n	800395a <HAL_ADC_ConfigChannel+0x1b2>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	0e9b      	lsrs	r3, r3, #26
 8003954:	f003 031f 	and.w	r3, r3, #31
 8003958:	e018      	b.n	800398c <HAL_ADC_ConfigChannel+0x1e4>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003962:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003966:	fa93 f3a3 	rbit	r3, r3
 800396a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800396e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003972:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003976:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800397e:	2320      	movs	r3, #32
 8003980:	e004      	b.n	800398c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003982:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003986:	fab3 f383 	clz	r3, r3
 800398a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800398c:	429a      	cmp	r2, r3
 800398e:	d106      	bne.n	800399e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2200      	movs	r2, #0
 8003996:	2100      	movs	r1, #0
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff f81b 	bl	80029d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2101      	movs	r1, #1
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fe ffff 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 80039aa:	4603      	mov	r3, r0
 80039ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10a      	bne.n	80039ca <HAL_ADC_ConfigChannel+0x222>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2101      	movs	r1, #1
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fe fff4 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 80039c0:	4603      	mov	r3, r0
 80039c2:	0e9b      	lsrs	r3, r3, #26
 80039c4:	f003 021f 	and.w	r2, r3, #31
 80039c8:	e01e      	b.n	8003a08 <HAL_ADC_ConfigChannel+0x260>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2101      	movs	r1, #1
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fe ffe9 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80039e0:	fa93 f3a3 	rbit	r3, r3
 80039e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80039e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80039ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80039f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80039f8:	2320      	movs	r3, #32
 80039fa:	e004      	b.n	8003a06 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80039fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a00:	fab3 f383 	clz	r3, r3
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d105      	bne.n	8003a20 <HAL_ADC_ConfigChannel+0x278>
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	0e9b      	lsrs	r3, r3, #26
 8003a1a:	f003 031f 	and.w	r3, r3, #31
 8003a1e:	e018      	b.n	8003a52 <HAL_ADC_ConfigChannel+0x2aa>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a2c:	fa93 f3a3 	rbit	r3, r3
 8003a30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003a34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003a3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003a44:	2320      	movs	r3, #32
 8003a46:	e004      	b.n	8003a52 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003a48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a4c:	fab3 f383 	clz	r3, r3
 8003a50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d106      	bne.n	8003a64 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fe ffb8 	bl	80029d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2102      	movs	r1, #2
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe ff9c 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 8003a70:	4603      	mov	r3, r0
 8003a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10a      	bne.n	8003a90 <HAL_ADC_ConfigChannel+0x2e8>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2102      	movs	r1, #2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fe ff91 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 8003a86:	4603      	mov	r3, r0
 8003a88:	0e9b      	lsrs	r3, r3, #26
 8003a8a:	f003 021f 	and.w	r2, r3, #31
 8003a8e:	e01e      	b.n	8003ace <HAL_ADC_ConfigChannel+0x326>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2102      	movs	r1, #2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fe ff86 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003aa6:	fa93 f3a3 	rbit	r3, r3
 8003aaa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003aae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ab2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003ab6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003abe:	2320      	movs	r3, #32
 8003ac0:	e004      	b.n	8003acc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003ac2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ac6:	fab3 f383 	clz	r3, r3
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d105      	bne.n	8003ae6 <HAL_ADC_ConfigChannel+0x33e>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	0e9b      	lsrs	r3, r3, #26
 8003ae0:	f003 031f 	and.w	r3, r3, #31
 8003ae4:	e016      	b.n	8003b14 <HAL_ADC_ConfigChannel+0x36c>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003af2:	fa93 f3a3 	rbit	r3, r3
 8003af6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003af8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003afa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003afe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003b06:	2320      	movs	r3, #32
 8003b08:	e004      	b.n	8003b14 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003b0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b0e:	fab3 f383 	clz	r3, r3
 8003b12:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d106      	bne.n	8003b26 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	2102      	movs	r1, #2
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fe ff57 	bl	80029d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2103      	movs	r1, #3
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fe ff3b 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 8003b32:	4603      	mov	r3, r0
 8003b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10a      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x3aa>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2103      	movs	r1, #3
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fe ff30 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	0e9b      	lsrs	r3, r3, #26
 8003b4c:	f003 021f 	and.w	r2, r3, #31
 8003b50:	e017      	b.n	8003b82 <HAL_ADC_ConfigChannel+0x3da>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2103      	movs	r1, #3
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fe ff25 	bl	80029a8 <LL_ADC_GetOffsetChannel>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b64:	fa93 f3a3 	rbit	r3, r3
 8003b68:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003b6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b6c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003b6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003b74:	2320      	movs	r3, #32
 8003b76:	e003      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003b78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b7a:	fab3 f383 	clz	r3, r3
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d105      	bne.n	8003b9a <HAL_ADC_ConfigChannel+0x3f2>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	0e9b      	lsrs	r3, r3, #26
 8003b94:	f003 031f 	and.w	r3, r3, #31
 8003b98:	e011      	b.n	8003bbe <HAL_ADC_ConfigChannel+0x416>
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ba2:	fa93 f3a3 	rbit	r3, r3
 8003ba6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003ba8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003baa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003bac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003bb2:	2320      	movs	r3, #32
 8003bb4:	e003      	b.n	8003bbe <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003bb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bb8:	fab3 f383 	clz	r3, r3
 8003bbc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d106      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	2103      	movs	r1, #3
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fe ff02 	bl	80029d4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff f881 	bl	8002cdc <LL_ADC_IsEnabled>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f040 813d 	bne.w	8003e5c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6819      	ldr	r1, [r3, #0]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f7fe ffd2 	bl	8002b98 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	4aa2      	ldr	r2, [pc, #648]	@ (8003e84 <HAL_ADC_ConfigChannel+0x6dc>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	f040 812e 	bne.w	8003e5c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10b      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x480>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	0e9b      	lsrs	r3, r3, #26
 8003c16:	3301      	adds	r3, #1
 8003c18:	f003 031f 	and.w	r3, r3, #31
 8003c1c:	2b09      	cmp	r3, #9
 8003c1e:	bf94      	ite	ls
 8003c20:	2301      	movls	r3, #1
 8003c22:	2300      	movhi	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	e019      	b.n	8003c5c <HAL_ADC_ConfigChannel+0x4b4>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c30:	fa93 f3a3 	rbit	r3, r3
 8003c34:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003c36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c38:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003c3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003c40:	2320      	movs	r3, #32
 8003c42:	e003      	b.n	8003c4c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003c44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c46:	fab3 f383 	clz	r3, r3
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	f003 031f 	and.w	r3, r3, #31
 8003c52:	2b09      	cmp	r3, #9
 8003c54:	bf94      	ite	ls
 8003c56:	2301      	movls	r3, #1
 8003c58:	2300      	movhi	r3, #0
 8003c5a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d079      	beq.n	8003d54 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d107      	bne.n	8003c7c <HAL_ADC_ConfigChannel+0x4d4>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	0e9b      	lsrs	r3, r3, #26
 8003c72:	3301      	adds	r3, #1
 8003c74:	069b      	lsls	r3, r3, #26
 8003c76:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c7a:	e015      	b.n	8003ca8 <HAL_ADC_ConfigChannel+0x500>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c84:	fa93 f3a3 	rbit	r3, r3
 8003c88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003c8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c8c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003c94:	2320      	movs	r3, #32
 8003c96:	e003      	b.n	8003ca0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003c98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c9a:	fab3 f383 	clz	r3, r3
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	069b      	lsls	r3, r3, #26
 8003ca4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d109      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x520>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	0e9b      	lsrs	r3, r3, #26
 8003cba:	3301      	adds	r3, #1
 8003cbc:	f003 031f 	and.w	r3, r3, #31
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc6:	e017      	b.n	8003cf8 <HAL_ADC_ConfigChannel+0x550>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cd0:	fa93 f3a3 	rbit	r3, r3
 8003cd4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003cd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003cda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003ce0:	2320      	movs	r3, #32
 8003ce2:	e003      	b.n	8003cec <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003ce4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ce6:	fab3 f383 	clz	r3, r3
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	3301      	adds	r3, #1
 8003cee:	f003 031f 	and.w	r3, r3, #31
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf8:	ea42 0103 	orr.w	r1, r2, r3
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10a      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x576>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	0e9b      	lsrs	r3, r3, #26
 8003d0e:	3301      	adds	r3, #1
 8003d10:	f003 021f 	and.w	r2, r3, #31
 8003d14:	4613      	mov	r3, r2
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	4413      	add	r3, r2
 8003d1a:	051b      	lsls	r3, r3, #20
 8003d1c:	e018      	b.n	8003d50 <HAL_ADC_ConfigChannel+0x5a8>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d26:	fa93 f3a3 	rbit	r3, r3
 8003d2a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003d30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003d36:	2320      	movs	r3, #32
 8003d38:	e003      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d3c:	fab3 f383 	clz	r3, r3
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	3301      	adds	r3, #1
 8003d44:	f003 021f 	and.w	r2, r3, #31
 8003d48:	4613      	mov	r3, r2
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	4413      	add	r3, r2
 8003d4e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d50:	430b      	orrs	r3, r1
 8003d52:	e07e      	b.n	8003e52 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d107      	bne.n	8003d70 <HAL_ADC_ConfigChannel+0x5c8>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	0e9b      	lsrs	r3, r3, #26
 8003d66:	3301      	adds	r3, #1
 8003d68:	069b      	lsls	r3, r3, #26
 8003d6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d6e:	e015      	b.n	8003d9c <HAL_ADC_ConfigChannel+0x5f4>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d78:	fa93 f3a3 	rbit	r3, r3
 8003d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d80:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003d88:	2320      	movs	r3, #32
 8003d8a:	e003      	b.n	8003d94 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8e:	fab3 f383 	clz	r3, r3
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	3301      	adds	r3, #1
 8003d96:	069b      	lsls	r3, r3, #26
 8003d98:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d109      	bne.n	8003dbc <HAL_ADC_ConfigChannel+0x614>
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	0e9b      	lsrs	r3, r3, #26
 8003dae:	3301      	adds	r3, #1
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	2101      	movs	r1, #1
 8003db6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dba:	e017      	b.n	8003dec <HAL_ADC_ConfigChannel+0x644>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	fa93 f3a3 	rbit	r3, r3
 8003dc8:	61fb      	str	r3, [r7, #28]
  return result;
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003dd4:	2320      	movs	r3, #32
 8003dd6:	e003      	b.n	8003de0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dda:	fab3 f383 	clz	r3, r3
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	3301      	adds	r3, #1
 8003de2:	f003 031f 	and.w	r3, r3, #31
 8003de6:	2101      	movs	r1, #1
 8003de8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dec:	ea42 0103 	orr.w	r1, r2, r3
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10d      	bne.n	8003e18 <HAL_ADC_ConfigChannel+0x670>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	0e9b      	lsrs	r3, r3, #26
 8003e02:	3301      	adds	r3, #1
 8003e04:	f003 021f 	and.w	r2, r3, #31
 8003e08:	4613      	mov	r3, r2
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	4413      	add	r3, r2
 8003e0e:	3b1e      	subs	r3, #30
 8003e10:	051b      	lsls	r3, r3, #20
 8003e12:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e16:	e01b      	b.n	8003e50 <HAL_ADC_ConfigChannel+0x6a8>
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	fa93 f3a3 	rbit	r3, r3
 8003e24:	613b      	str	r3, [r7, #16]
  return result;
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003e30:	2320      	movs	r3, #32
 8003e32:	e003      	b.n	8003e3c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	fab3 f383 	clz	r3, r3
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	f003 021f 	and.w	r2, r3, #31
 8003e42:	4613      	mov	r3, r2
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	4413      	add	r3, r2
 8003e48:	3b1e      	subs	r3, #30
 8003e4a:	051b      	lsls	r3, r3, #20
 8003e4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e50:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e56:	4619      	mov	r1, r3
 8003e58:	f7fe fe72 	bl	8002b40 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	4b09      	ldr	r3, [pc, #36]	@ (8003e88 <HAL_ADC_ConfigChannel+0x6e0>)
 8003e62:	4013      	ands	r3, r2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 80be 	beq.w	8003fe6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e72:	d004      	beq.n	8003e7e <HAL_ADC_ConfigChannel+0x6d6>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a04      	ldr	r2, [pc, #16]	@ (8003e8c <HAL_ADC_ConfigChannel+0x6e4>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d10a      	bne.n	8003e94 <HAL_ADC_ConfigChannel+0x6ec>
 8003e7e:	4b04      	ldr	r3, [pc, #16]	@ (8003e90 <HAL_ADC_ConfigChannel+0x6e8>)
 8003e80:	e009      	b.n	8003e96 <HAL_ADC_ConfigChannel+0x6ee>
 8003e82:	bf00      	nop
 8003e84:	407f0000 	.word	0x407f0000
 8003e88:	80080000 	.word	0x80080000
 8003e8c:	50000100 	.word	0x50000100
 8003e90:	50000300 	.word	0x50000300
 8003e94:	4b59      	ldr	r3, [pc, #356]	@ (8003ffc <HAL_ADC_ConfigChannel+0x854>)
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fe fd54 	bl	8002944 <LL_ADC_GetCommonPathInternalCh>
 8003e9c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a56      	ldr	r2, [pc, #344]	@ (8004000 <HAL_ADC_ConfigChannel+0x858>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d004      	beq.n	8003eb4 <HAL_ADC_ConfigChannel+0x70c>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a55      	ldr	r2, [pc, #340]	@ (8004004 <HAL_ADC_ConfigChannel+0x85c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d13a      	bne.n	8003f2a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003eb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003eb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d134      	bne.n	8003f2a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ec8:	d005      	beq.n	8003ed6 <HAL_ADC_ConfigChannel+0x72e>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a4e      	ldr	r2, [pc, #312]	@ (8004008 <HAL_ADC_ConfigChannel+0x860>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	f040 8085 	bne.w	8003fe0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ede:	d004      	beq.n	8003eea <HAL_ADC_ConfigChannel+0x742>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a49      	ldr	r2, [pc, #292]	@ (800400c <HAL_ADC_ConfigChannel+0x864>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d101      	bne.n	8003eee <HAL_ADC_ConfigChannel+0x746>
 8003eea:	4a49      	ldr	r2, [pc, #292]	@ (8004010 <HAL_ADC_ConfigChannel+0x868>)
 8003eec:	e000      	b.n	8003ef0 <HAL_ADC_ConfigChannel+0x748>
 8003eee:	4a43      	ldr	r2, [pc, #268]	@ (8003ffc <HAL_ADC_ConfigChannel+0x854>)
 8003ef0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ef4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4610      	mov	r0, r2
 8003efc:	f7fe fd0f 	bl	800291e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f00:	4b44      	ldr	r3, [pc, #272]	@ (8004014 <HAL_ADC_ConfigChannel+0x86c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	099b      	lsrs	r3, r3, #6
 8003f06:	4a44      	ldr	r2, [pc, #272]	@ (8004018 <HAL_ADC_ConfigChannel+0x870>)
 8003f08:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0c:	099b      	lsrs	r3, r3, #6
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	4613      	mov	r3, r2
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f1a:	e002      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1f9      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f28:	e05a      	b.n	8003fe0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a3b      	ldr	r2, [pc, #236]	@ (800401c <HAL_ADC_ConfigChannel+0x874>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d125      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d11f      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a31      	ldr	r2, [pc, #196]	@ (800400c <HAL_ADC_ConfigChannel+0x864>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d104      	bne.n	8003f54 <HAL_ADC_ConfigChannel+0x7ac>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a34      	ldr	r2, [pc, #208]	@ (8004020 <HAL_ADC_ConfigChannel+0x878>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d047      	beq.n	8003fe4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f5c:	d004      	beq.n	8003f68 <HAL_ADC_ConfigChannel+0x7c0>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a2a      	ldr	r2, [pc, #168]	@ (800400c <HAL_ADC_ConfigChannel+0x864>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d101      	bne.n	8003f6c <HAL_ADC_ConfigChannel+0x7c4>
 8003f68:	4a29      	ldr	r2, [pc, #164]	@ (8004010 <HAL_ADC_ConfigChannel+0x868>)
 8003f6a:	e000      	b.n	8003f6e <HAL_ADC_ConfigChannel+0x7c6>
 8003f6c:	4a23      	ldr	r2, [pc, #140]	@ (8003ffc <HAL_ADC_ConfigChannel+0x854>)
 8003f6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f76:	4619      	mov	r1, r3
 8003f78:	4610      	mov	r0, r2
 8003f7a:	f7fe fcd0 	bl	800291e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f7e:	e031      	b.n	8003fe4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a27      	ldr	r2, [pc, #156]	@ (8004024 <HAL_ADC_ConfigChannel+0x87c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d12d      	bne.n	8003fe6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d127      	bne.n	8003fe6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800400c <HAL_ADC_ConfigChannel+0x864>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d022      	beq.n	8003fe6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fa8:	d004      	beq.n	8003fb4 <HAL_ADC_ConfigChannel+0x80c>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a17      	ldr	r2, [pc, #92]	@ (800400c <HAL_ADC_ConfigChannel+0x864>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d101      	bne.n	8003fb8 <HAL_ADC_ConfigChannel+0x810>
 8003fb4:	4a16      	ldr	r2, [pc, #88]	@ (8004010 <HAL_ADC_ConfigChannel+0x868>)
 8003fb6:	e000      	b.n	8003fba <HAL_ADC_ConfigChannel+0x812>
 8003fb8:	4a10      	ldr	r2, [pc, #64]	@ (8003ffc <HAL_ADC_ConfigChannel+0x854>)
 8003fba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fbe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	4610      	mov	r0, r2
 8003fc6:	f7fe fcaa 	bl	800291e <LL_ADC_SetCommonPathInternalCh>
 8003fca:	e00c      	b.n	8003fe6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd0:	f043 0220 	orr.w	r2, r3, #32
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003fde:	e002      	b.n	8003fe6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fe0:	bf00      	nop
 8003fe2:	e000      	b.n	8003fe6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fe4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003fee:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	37d8      	adds	r7, #216	@ 0xd8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	50000700 	.word	0x50000700
 8004000:	c3210000 	.word	0xc3210000
 8004004:	90c00010 	.word	0x90c00010
 8004008:	50000600 	.word	0x50000600
 800400c:	50000100 	.word	0x50000100
 8004010:	50000300 	.word	0x50000300
 8004014:	2000000c 	.word	0x2000000c
 8004018:	053e2d63 	.word	0x053e2d63
 800401c:	c7520000 	.word	0xc7520000
 8004020:	50000500 	.word	0x50000500
 8004024:	cb840000 	.word	0xcb840000

08004028 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004030:	2300      	movs	r3, #0
 8004032:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4618      	mov	r0, r3
 800403a:	f7fe fe4f 	bl	8002cdc <LL_ADC_IsEnabled>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d176      	bne.n	8004132 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	4b3c      	ldr	r3, [pc, #240]	@ (800413c <ADC_Enable+0x114>)
 800404c:	4013      	ands	r3, r2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00d      	beq.n	800406e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004056:	f043 0210 	orr.w	r2, r3, #16
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004062:	f043 0201 	orr.w	r2, r3, #1
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e062      	b.n	8004134 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f7fe fe1e 	bl	8002cb4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004080:	d004      	beq.n	800408c <ADC_Enable+0x64>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a2e      	ldr	r2, [pc, #184]	@ (8004140 <ADC_Enable+0x118>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d101      	bne.n	8004090 <ADC_Enable+0x68>
 800408c:	4b2d      	ldr	r3, [pc, #180]	@ (8004144 <ADC_Enable+0x11c>)
 800408e:	e000      	b.n	8004092 <ADC_Enable+0x6a>
 8004090:	4b2d      	ldr	r3, [pc, #180]	@ (8004148 <ADC_Enable+0x120>)
 8004092:	4618      	mov	r0, r3
 8004094:	f7fe fc56 	bl	8002944 <LL_ADC_GetCommonPathInternalCh>
 8004098:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800409a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d013      	beq.n	80040ca <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040a2:	4b2a      	ldr	r3, [pc, #168]	@ (800414c <ADC_Enable+0x124>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	099b      	lsrs	r3, r3, #6
 80040a8:	4a29      	ldr	r2, [pc, #164]	@ (8004150 <ADC_Enable+0x128>)
 80040aa:	fba2 2303 	umull	r2, r3, r2, r3
 80040ae:	099b      	lsrs	r3, r3, #6
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	4613      	mov	r3, r2
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	4413      	add	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80040bc:	e002      	b.n	80040c4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	3b01      	subs	r3, #1
 80040c2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1f9      	bne.n	80040be <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80040ca:	f7fe fc09 	bl	80028e0 <HAL_GetTick>
 80040ce:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040d0:	e028      	b.n	8004124 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fe fe00 	bl	8002cdc <LL_ADC_IsEnabled>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d104      	bne.n	80040ec <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fe fde4 	bl	8002cb4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80040ec:	f7fe fbf8 	bl	80028e0 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d914      	bls.n	8004124 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b01      	cmp	r3, #1
 8004106:	d00d      	beq.n	8004124 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800410c:	f043 0210 	orr.w	r2, r3, #16
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004118:	f043 0201 	orr.w	r2, r3, #1
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e007      	b.n	8004134 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b01      	cmp	r3, #1
 8004130:	d1cf      	bne.n	80040d2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	8000003f 	.word	0x8000003f
 8004140:	50000100 	.word	0x50000100
 8004144:	50000300 	.word	0x50000300
 8004148:	50000700 	.word	0x50000700
 800414c:	2000000c 	.word	0x2000000c
 8004150:	053e2d63 	.word	0x053e2d63

08004154 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004160:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004166:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800416a:	2b00      	cmp	r3, #0
 800416c:	d14b      	bne.n	8004206 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004172:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b00      	cmp	r3, #0
 8004186:	d021      	beq.n	80041cc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4618      	mov	r0, r3
 800418e:	f7fe fc85 	bl	8002a9c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d032      	beq.n	80041fe <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d12b      	bne.n	80041fe <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041aa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d11f      	bne.n	80041fe <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041c2:	f043 0201 	orr.w	r2, r3, #1
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80041ca:	e018      	b.n	80041fe <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d111      	bne.n	80041fe <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041de:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d105      	bne.n	80041fe <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f6:	f043 0201 	orr.w	r2, r3, #1
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f7ff faaa 	bl	8003758 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004204:	e00e      	b.n	8004224 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800420a:	f003 0310 	and.w	r3, r3, #16
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f7ff fabe 	bl	8003794 <HAL_ADC_ErrorCallback>
}
 8004218:	e004      	b.n	8004224 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800421e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	4798      	blx	r3
}
 8004224:	bf00      	nop
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004238:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f7ff fa96 	bl	800376c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004240:	bf00      	nop
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004254:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800425a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004266:	f043 0204 	orr.w	r2, r3, #4
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f7ff fa90 	bl	8003794 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004274:	bf00      	nop
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <LL_ADC_IsEnabled>:
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <LL_ADC_IsEnabled+0x18>
 8004290:	2301      	movs	r3, #1
 8004292:	e000      	b.n	8004296 <LL_ADC_IsEnabled+0x1a>
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 0304 	and.w	r3, r3, #4
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d101      	bne.n	80042ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80042b6:	2301      	movs	r3, #1
 80042b8:	e000      	b.n	80042bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800432c:	b590      	push	{r4, r7, lr}
 800432e:	b0a1      	sub	sp, #132	@ 0x84
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004336:	2300      	movs	r3, #0
 8004338:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004342:	2b01      	cmp	r3, #1
 8004344:	d101      	bne.n	800434a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004346:	2302      	movs	r3, #2
 8004348:	e0e7      	b.n	800451a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004352:	2300      	movs	r3, #0
 8004354:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004356:	2300      	movs	r3, #0
 8004358:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004362:	d102      	bne.n	800436a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004364:	4b6f      	ldr	r3, [pc, #444]	@ (8004524 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004366:	60bb      	str	r3, [r7, #8]
 8004368:	e009      	b.n	800437e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a6e      	ldr	r2, [pc, #440]	@ (8004528 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d102      	bne.n	800437a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004374:	4b6d      	ldr	r3, [pc, #436]	@ (800452c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004376:	60bb      	str	r3, [r7, #8]
 8004378:	e001      	b.n	800437e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800437a:	2300      	movs	r3, #0
 800437c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10b      	bne.n	800439c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004388:	f043 0220 	orr.w	r2, r3, #32
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e0be      	b.n	800451a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7ff ff7f 	bl	80042a2 <LL_ADC_REG_IsConversionOngoing>
 80043a4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7ff ff79 	bl	80042a2 <LL_ADC_REG_IsConversionOngoing>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f040 80a0 	bne.w	80044f8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80043b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f040 809c 	bne.w	80044f8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043c8:	d004      	beq.n	80043d4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a55      	ldr	r2, [pc, #340]	@ (8004524 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d101      	bne.n	80043d8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80043d4:	4b56      	ldr	r3, [pc, #344]	@ (8004530 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80043d6:	e000      	b.n	80043da <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80043d8:	4b56      	ldr	r3, [pc, #344]	@ (8004534 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80043da:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d04b      	beq.n	800447c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80043e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	6859      	ldr	r1, [r3, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80043f6:	035b      	lsls	r3, r3, #13
 80043f8:	430b      	orrs	r3, r1
 80043fa:	431a      	orrs	r2, r3
 80043fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043fe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004408:	d004      	beq.n	8004414 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a45      	ldr	r2, [pc, #276]	@ (8004524 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d10f      	bne.n	8004434 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004414:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004418:	f7ff ff30 	bl	800427c <LL_ADC_IsEnabled>
 800441c:	4604      	mov	r4, r0
 800441e:	4841      	ldr	r0, [pc, #260]	@ (8004524 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004420:	f7ff ff2c 	bl	800427c <LL_ADC_IsEnabled>
 8004424:	4603      	mov	r3, r0
 8004426:	4323      	orrs	r3, r4
 8004428:	2b00      	cmp	r3, #0
 800442a:	bf0c      	ite	eq
 800442c:	2301      	moveq	r3, #1
 800442e:	2300      	movne	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	e012      	b.n	800445a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004434:	483c      	ldr	r0, [pc, #240]	@ (8004528 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004436:	f7ff ff21 	bl	800427c <LL_ADC_IsEnabled>
 800443a:	4604      	mov	r4, r0
 800443c:	483b      	ldr	r0, [pc, #236]	@ (800452c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800443e:	f7ff ff1d 	bl	800427c <LL_ADC_IsEnabled>
 8004442:	4603      	mov	r3, r0
 8004444:	431c      	orrs	r4, r3
 8004446:	483c      	ldr	r0, [pc, #240]	@ (8004538 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004448:	f7ff ff18 	bl	800427c <LL_ADC_IsEnabled>
 800444c:	4603      	mov	r3, r0
 800444e:	4323      	orrs	r3, r4
 8004450:	2b00      	cmp	r3, #0
 8004452:	bf0c      	ite	eq
 8004454:	2301      	moveq	r3, #1
 8004456:	2300      	movne	r3, #0
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d056      	beq.n	800450c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800445e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004466:	f023 030f 	bic.w	r3, r3, #15
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	6811      	ldr	r1, [r2, #0]
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	6892      	ldr	r2, [r2, #8]
 8004472:	430a      	orrs	r2, r1
 8004474:	431a      	orrs	r2, r3
 8004476:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004478:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800447a:	e047      	b.n	800450c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800447c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004484:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004486:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004490:	d004      	beq.n	800449c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a23      	ldr	r2, [pc, #140]	@ (8004524 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d10f      	bne.n	80044bc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800449c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80044a0:	f7ff feec 	bl	800427c <LL_ADC_IsEnabled>
 80044a4:	4604      	mov	r4, r0
 80044a6:	481f      	ldr	r0, [pc, #124]	@ (8004524 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80044a8:	f7ff fee8 	bl	800427c <LL_ADC_IsEnabled>
 80044ac:	4603      	mov	r3, r0
 80044ae:	4323      	orrs	r3, r4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	bf0c      	ite	eq
 80044b4:	2301      	moveq	r3, #1
 80044b6:	2300      	movne	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	e012      	b.n	80044e2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80044bc:	481a      	ldr	r0, [pc, #104]	@ (8004528 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80044be:	f7ff fedd 	bl	800427c <LL_ADC_IsEnabled>
 80044c2:	4604      	mov	r4, r0
 80044c4:	4819      	ldr	r0, [pc, #100]	@ (800452c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80044c6:	f7ff fed9 	bl	800427c <LL_ADC_IsEnabled>
 80044ca:	4603      	mov	r3, r0
 80044cc:	431c      	orrs	r4, r3
 80044ce:	481a      	ldr	r0, [pc, #104]	@ (8004538 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80044d0:	f7ff fed4 	bl	800427c <LL_ADC_IsEnabled>
 80044d4:	4603      	mov	r3, r0
 80044d6:	4323      	orrs	r3, r4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	bf0c      	ite	eq
 80044dc:	2301      	moveq	r3, #1
 80044de:	2300      	movne	r3, #0
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d012      	beq.n	800450c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80044e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80044ee:	f023 030f 	bic.w	r3, r3, #15
 80044f2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80044f4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80044f6:	e009      	b.n	800450c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044fc:	f043 0220 	orr.w	r2, r3, #32
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800450a:	e000      	b.n	800450e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800450c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004516:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800451a:	4618      	mov	r0, r3
 800451c:	3784      	adds	r7, #132	@ 0x84
 800451e:	46bd      	mov	sp, r7
 8004520:	bd90      	pop	{r4, r7, pc}
 8004522:	bf00      	nop
 8004524:	50000100 	.word	0x50000100
 8004528:	50000400 	.word	0x50000400
 800452c:	50000500 	.word	0x50000500
 8004530:	50000300 	.word	0x50000300
 8004534:	50000700 	.word	0x50000700
 8004538:	50000600 	.word	0x50000600

0800453c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f003 0307 	and.w	r3, r3, #7
 800454a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800454c:	4b0c      	ldr	r3, [pc, #48]	@ (8004580 <__NVIC_SetPriorityGrouping+0x44>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004558:	4013      	ands	r3, r2
 800455a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004564:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800456c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800456e:	4a04      	ldr	r2, [pc, #16]	@ (8004580 <__NVIC_SetPriorityGrouping+0x44>)
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	60d3      	str	r3, [r2, #12]
}
 8004574:	bf00      	nop
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	e000ed00 	.word	0xe000ed00

08004584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004588:	4b04      	ldr	r3, [pc, #16]	@ (800459c <__NVIC_GetPriorityGrouping+0x18>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	0a1b      	lsrs	r3, r3, #8
 800458e:	f003 0307 	and.w	r3, r3, #7
}
 8004592:	4618      	mov	r0, r3
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	e000ed00 	.word	0xe000ed00

080045a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4603      	mov	r3, r0
 80045a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	db0b      	blt.n	80045ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045b2:	79fb      	ldrb	r3, [r7, #7]
 80045b4:	f003 021f 	and.w	r2, r3, #31
 80045b8:	4907      	ldr	r1, [pc, #28]	@ (80045d8 <__NVIC_EnableIRQ+0x38>)
 80045ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	2001      	movs	r0, #1
 80045c2:	fa00 f202 	lsl.w	r2, r0, r2
 80045c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80045ca:	bf00      	nop
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	e000e100 	.word	0xe000e100

080045dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	6039      	str	r1, [r7, #0]
 80045e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	db0a      	blt.n	8004606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	490c      	ldr	r1, [pc, #48]	@ (8004628 <__NVIC_SetPriority+0x4c>)
 80045f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fa:	0112      	lsls	r2, r2, #4
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	440b      	add	r3, r1
 8004600:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004604:	e00a      	b.n	800461c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	b2da      	uxtb	r2, r3
 800460a:	4908      	ldr	r1, [pc, #32]	@ (800462c <__NVIC_SetPriority+0x50>)
 800460c:	79fb      	ldrb	r3, [r7, #7]
 800460e:	f003 030f 	and.w	r3, r3, #15
 8004612:	3b04      	subs	r3, #4
 8004614:	0112      	lsls	r2, r2, #4
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	440b      	add	r3, r1
 800461a:	761a      	strb	r2, [r3, #24]
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	e000e100 	.word	0xe000e100
 800462c:	e000ed00 	.word	0xe000ed00

08004630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004630:	b480      	push	{r7}
 8004632:	b089      	sub	sp, #36	@ 0x24
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	f1c3 0307 	rsb	r3, r3, #7
 800464a:	2b04      	cmp	r3, #4
 800464c:	bf28      	it	cs
 800464e:	2304      	movcs	r3, #4
 8004650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	3304      	adds	r3, #4
 8004656:	2b06      	cmp	r3, #6
 8004658:	d902      	bls.n	8004660 <NVIC_EncodePriority+0x30>
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	3b03      	subs	r3, #3
 800465e:	e000      	b.n	8004662 <NVIC_EncodePriority+0x32>
 8004660:	2300      	movs	r3, #0
 8004662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004664:	f04f 32ff 	mov.w	r2, #4294967295
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	43da      	mvns	r2, r3
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	401a      	ands	r2, r3
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004678:	f04f 31ff 	mov.w	r1, #4294967295
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	fa01 f303 	lsl.w	r3, r1, r3
 8004682:	43d9      	mvns	r1, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004688:	4313      	orrs	r3, r2
         );
}
 800468a:	4618      	mov	r0, r3
 800468c:	3724      	adds	r7, #36	@ 0x24
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
	...

08004698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	3b01      	subs	r3, #1
 80046a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046a8:	d301      	bcc.n	80046ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046aa:	2301      	movs	r3, #1
 80046ac:	e00f      	b.n	80046ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046ae:	4a0a      	ldr	r2, [pc, #40]	@ (80046d8 <SysTick_Config+0x40>)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	3b01      	subs	r3, #1
 80046b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046b6:	210f      	movs	r1, #15
 80046b8:	f04f 30ff 	mov.w	r0, #4294967295
 80046bc:	f7ff ff8e 	bl	80045dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046c0:	4b05      	ldr	r3, [pc, #20]	@ (80046d8 <SysTick_Config+0x40>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046c6:	4b04      	ldr	r3, [pc, #16]	@ (80046d8 <SysTick_Config+0x40>)
 80046c8:	2207      	movs	r2, #7
 80046ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	e000e010 	.word	0xe000e010

080046dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7ff ff29 	bl	800453c <__NVIC_SetPriorityGrouping>
}
 80046ea:	bf00      	nop
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b086      	sub	sp, #24
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	4603      	mov	r3, r0
 80046fa:	60b9      	str	r1, [r7, #8]
 80046fc:	607a      	str	r2, [r7, #4]
 80046fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004700:	f7ff ff40 	bl	8004584 <__NVIC_GetPriorityGrouping>
 8004704:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	68b9      	ldr	r1, [r7, #8]
 800470a:	6978      	ldr	r0, [r7, #20]
 800470c:	f7ff ff90 	bl	8004630 <NVIC_EncodePriority>
 8004710:	4602      	mov	r2, r0
 8004712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004716:	4611      	mov	r1, r2
 8004718:	4618      	mov	r0, r3
 800471a:	f7ff ff5f 	bl	80045dc <__NVIC_SetPriority>
}
 800471e:	bf00      	nop
 8004720:	3718      	adds	r7, #24
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b082      	sub	sp, #8
 800472a:	af00      	add	r7, sp, #0
 800472c:	4603      	mov	r3, r0
 800472e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff ff33 	bl	80045a0 <__NVIC_EnableIRQ>
}
 800473a:	bf00      	nop
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b082      	sub	sp, #8
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7ff ffa4 	bl	8004698 <SysTick_Config>
 8004750:	4603      	mov	r3, r0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e08d      	b.n	800488a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	461a      	mov	r2, r3
 8004774:	4b47      	ldr	r3, [pc, #284]	@ (8004894 <HAL_DMA_Init+0x138>)
 8004776:	429a      	cmp	r2, r3
 8004778:	d80f      	bhi.n	800479a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	461a      	mov	r2, r3
 8004780:	4b45      	ldr	r3, [pc, #276]	@ (8004898 <HAL_DMA_Init+0x13c>)
 8004782:	4413      	add	r3, r2
 8004784:	4a45      	ldr	r2, [pc, #276]	@ (800489c <HAL_DMA_Init+0x140>)
 8004786:	fba2 2303 	umull	r2, r3, r2, r3
 800478a:	091b      	lsrs	r3, r3, #4
 800478c:	009a      	lsls	r2, r3, #2
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a42      	ldr	r2, [pc, #264]	@ (80048a0 <HAL_DMA_Init+0x144>)
 8004796:	641a      	str	r2, [r3, #64]	@ 0x40
 8004798:	e00e      	b.n	80047b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	461a      	mov	r2, r3
 80047a0:	4b40      	ldr	r3, [pc, #256]	@ (80048a4 <HAL_DMA_Init+0x148>)
 80047a2:	4413      	add	r3, r2
 80047a4:	4a3d      	ldr	r2, [pc, #244]	@ (800489c <HAL_DMA_Init+0x140>)
 80047a6:	fba2 2303 	umull	r2, r3, r2, r3
 80047aa:	091b      	lsrs	r3, r3, #4
 80047ac:	009a      	lsls	r2, r3, #2
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a3c      	ldr	r2, [pc, #240]	@ (80048a8 <HAL_DMA_Init+0x14c>)
 80047b6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80047ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80047dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	4313      	orrs	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f9b6 	bl	8004b7c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004818:	d102      	bne.n	8004820 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004834:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d010      	beq.n	8004860 <HAL_DMA_Init+0x104>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b04      	cmp	r3, #4
 8004844:	d80c      	bhi.n	8004860 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f9d6 	bl	8004bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800485c:	605a      	str	r2, [r3, #4]
 800485e:	e008      	b.n	8004872 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	40020407 	.word	0x40020407
 8004898:	bffdfff8 	.word	0xbffdfff8
 800489c:	cccccccd 	.word	0xcccccccd
 80048a0:	40020000 	.word	0x40020000
 80048a4:	bffdfbf8 	.word	0xbffdfbf8
 80048a8:	40020400 	.word	0x40020400

080048ac <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
 80048b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048ba:	2300      	movs	r3, #0
 80048bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d101      	bne.n	80048cc <HAL_DMA_Start_IT+0x20>
 80048c8:	2302      	movs	r3, #2
 80048ca:	e066      	b.n	800499a <HAL_DMA_Start_IT+0xee>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d155      	bne.n	800498c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 0201 	bic.w	r2, r2, #1
 80048fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	68b9      	ldr	r1, [r7, #8]
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 f8fb 	bl	8004b00 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490e:	2b00      	cmp	r3, #0
 8004910:	d008      	beq.n	8004924 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f042 020e 	orr.w	r2, r2, #14
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	e00f      	b.n	8004944 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 0204 	bic.w	r2, r2, #4
 8004932:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 020a 	orr.w	r2, r2, #10
 8004942:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d007      	beq.n	8004962 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800495c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004960:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004966:	2b00      	cmp	r3, #0
 8004968:	d007      	beq.n	800497a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004974:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004978:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f042 0201 	orr.w	r2, r2, #1
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	e005      	b.n	8004998 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004994:	2302      	movs	r3, #2
 8004996:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004998:	7dfb      	ldrb	r3, [r7, #23]
}
 800499a:	4618      	mov	r0, r3
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b084      	sub	sp, #16
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049be:	f003 031f 	and.w	r3, r3, #31
 80049c2:	2204      	movs	r2, #4
 80049c4:	409a      	lsls	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4013      	ands	r3, r2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d026      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x7a>
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d021      	beq.n	8004a1c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d107      	bne.n	80049f6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0204 	bic.w	r2, r2, #4
 80049f4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049fa:	f003 021f 	and.w	r2, r3, #31
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a02:	2104      	movs	r1, #4
 8004a04:	fa01 f202 	lsl.w	r2, r1, r2
 8004a08:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d071      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004a1a:	e06c      	b.n	8004af6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a20:	f003 031f 	and.w	r3, r3, #31
 8004a24:	2202      	movs	r2, #2
 8004a26:	409a      	lsls	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d02e      	beq.n	8004a8e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d029      	beq.n	8004a8e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0320 	and.w	r3, r3, #32
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10b      	bne.n	8004a60 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 020a 	bic.w	r2, r2, #10
 8004a56:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a64:	f003 021f 	and.w	r2, r3, #31
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6c:	2102      	movs	r1, #2
 8004a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a72:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d038      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004a8c:	e033      	b.n	8004af6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a92:	f003 031f 	and.w	r3, r3, #31
 8004a96:	2208      	movs	r2, #8
 8004a98:	409a      	lsls	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d02a      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f003 0308 	and.w	r3, r3, #8
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d025      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 020e 	bic.w	r2, r2, #14
 8004aba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ac0:	f003 021f 	and.w	r2, r3, #31
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac8:	2101      	movs	r1, #1
 8004aca:	fa01 f202 	lsl.w	r2, r1, r2
 8004ace:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d004      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004af6:	bf00      	nop
 8004af8:	bf00      	nop
}
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
 8004b0c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b16:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d004      	beq.n	8004b2a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004b28:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b2e:	f003 021f 	and.w	r2, r3, #31
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b36:	2101      	movs	r1, #1
 8004b38:	fa01 f202 	lsl.w	r2, r1, r2
 8004b3c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	2b10      	cmp	r3, #16
 8004b4c:	d108      	bne.n	8004b60 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004b5e:	e007      	b.n	8004b70 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	60da      	str	r2, [r3, #12]
}
 8004b70:	bf00      	nop
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b087      	sub	sp, #28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	4b16      	ldr	r3, [pc, #88]	@ (8004be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d802      	bhi.n	8004b96 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004b90:	4b15      	ldr	r3, [pc, #84]	@ (8004be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004b92:	617b      	str	r3, [r7, #20]
 8004b94:	e001      	b.n	8004b9a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004b96:	4b15      	ldr	r3, [pc, #84]	@ (8004bec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004b98:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	3b08      	subs	r3, #8
 8004ba6:	4a12      	ldr	r2, [pc, #72]	@ (8004bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bac:	091b      	lsrs	r3, r3, #4
 8004bae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb4:	089b      	lsrs	r3, r3, #2
 8004bb6:	009a      	lsls	r2, r3, #2
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	4413      	add	r3, r2
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a0b      	ldr	r2, [pc, #44]	@ (8004bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004bc6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f003 031f 	and.w	r3, r3, #31
 8004bce:	2201      	movs	r2, #1
 8004bd0:	409a      	lsls	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004bd6:	bf00      	nop
 8004bd8:	371c      	adds	r7, #28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	40020407 	.word	0x40020407
 8004be8:	40020800 	.word	0x40020800
 8004bec:	40020820 	.word	0x40020820
 8004bf0:	cccccccd 	.word	0xcccccccd
 8004bf4:	40020880 	.word	0x40020880

08004bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	461a      	mov	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a08      	ldr	r2, [pc, #32]	@ (8004c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004c1a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	f003 031f 	and.w	r3, r3, #31
 8004c24:	2201      	movs	r2, #1
 8004c26:	409a      	lsls	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004c2c:	bf00      	nop
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	1000823f 	.word	0x1000823f
 8004c3c:	40020940 	.word	0x40020940

08004c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c4e:	e15a      	b.n	8004f06 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	2101      	movs	r1, #1
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	fa01 f303 	lsl.w	r3, r1, r3
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 814c 	beq.w	8004f00 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f003 0303 	and.w	r3, r3, #3
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d005      	beq.n	8004c80 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d130      	bne.n	8004ce2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	2203      	movs	r2, #3
 8004c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c90:	43db      	mvns	r3, r3
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4013      	ands	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbe:	43db      	mvns	r3, r3
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	091b      	lsrs	r3, r3, #4
 8004ccc:	f003 0201 	and.w	r2, r3, #1
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	2b03      	cmp	r3, #3
 8004cec:	d017      	beq.n	8004d1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	2203      	movs	r2, #3
 8004cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfe:	43db      	mvns	r3, r3
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	4013      	ands	r3, r2
 8004d04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	689a      	ldr	r2, [r3, #8]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d123      	bne.n	8004d72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	08da      	lsrs	r2, r3, #3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	3208      	adds	r2, #8
 8004d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	220f      	movs	r2, #15
 8004d42:	fa02 f303 	lsl.w	r3, r2, r3
 8004d46:	43db      	mvns	r3, r3
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	691a      	ldr	r2, [r3, #16]
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f003 0307 	and.w	r3, r3, #7
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	08da      	lsrs	r2, r3, #3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3208      	adds	r2, #8
 8004d6c:	6939      	ldr	r1, [r7, #16]
 8004d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	2203      	movs	r2, #3
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	43db      	mvns	r3, r3
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	4013      	ands	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f003 0203 	and.w	r2, r3, #3
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 80a6 	beq.w	8004f00 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004db4:	4b5b      	ldr	r3, [pc, #364]	@ (8004f24 <HAL_GPIO_Init+0x2e4>)
 8004db6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004db8:	4a5a      	ldr	r2, [pc, #360]	@ (8004f24 <HAL_GPIO_Init+0x2e4>)
 8004dba:	f043 0301 	orr.w	r3, r3, #1
 8004dbe:	6613      	str	r3, [r2, #96]	@ 0x60
 8004dc0:	4b58      	ldr	r3, [pc, #352]	@ (8004f24 <HAL_GPIO_Init+0x2e4>)
 8004dc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	60bb      	str	r3, [r7, #8]
 8004dca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dcc:	4a56      	ldr	r2, [pc, #344]	@ (8004f28 <HAL_GPIO_Init+0x2e8>)
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	089b      	lsrs	r3, r3, #2
 8004dd2:	3302      	adds	r3, #2
 8004dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f003 0303 	and.w	r3, r3, #3
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	220f      	movs	r2, #15
 8004de4:	fa02 f303 	lsl.w	r3, r2, r3
 8004de8:	43db      	mvns	r3, r3
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4013      	ands	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004df6:	d01f      	beq.n	8004e38 <HAL_GPIO_Init+0x1f8>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a4c      	ldr	r2, [pc, #304]	@ (8004f2c <HAL_GPIO_Init+0x2ec>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d019      	beq.n	8004e34 <HAL_GPIO_Init+0x1f4>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a4b      	ldr	r2, [pc, #300]	@ (8004f30 <HAL_GPIO_Init+0x2f0>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d013      	beq.n	8004e30 <HAL_GPIO_Init+0x1f0>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a4a      	ldr	r2, [pc, #296]	@ (8004f34 <HAL_GPIO_Init+0x2f4>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d00d      	beq.n	8004e2c <HAL_GPIO_Init+0x1ec>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a49      	ldr	r2, [pc, #292]	@ (8004f38 <HAL_GPIO_Init+0x2f8>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d007      	beq.n	8004e28 <HAL_GPIO_Init+0x1e8>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a48      	ldr	r2, [pc, #288]	@ (8004f3c <HAL_GPIO_Init+0x2fc>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d101      	bne.n	8004e24 <HAL_GPIO_Init+0x1e4>
 8004e20:	2305      	movs	r3, #5
 8004e22:	e00a      	b.n	8004e3a <HAL_GPIO_Init+0x1fa>
 8004e24:	2306      	movs	r3, #6
 8004e26:	e008      	b.n	8004e3a <HAL_GPIO_Init+0x1fa>
 8004e28:	2304      	movs	r3, #4
 8004e2a:	e006      	b.n	8004e3a <HAL_GPIO_Init+0x1fa>
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e004      	b.n	8004e3a <HAL_GPIO_Init+0x1fa>
 8004e30:	2302      	movs	r3, #2
 8004e32:	e002      	b.n	8004e3a <HAL_GPIO_Init+0x1fa>
 8004e34:	2301      	movs	r3, #1
 8004e36:	e000      	b.n	8004e3a <HAL_GPIO_Init+0x1fa>
 8004e38:	2300      	movs	r3, #0
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	f002 0203 	and.w	r2, r2, #3
 8004e40:	0092      	lsls	r2, r2, #2
 8004e42:	4093      	lsls	r3, r2
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e4a:	4937      	ldr	r1, [pc, #220]	@ (8004f28 <HAL_GPIO_Init+0x2e8>)
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	089b      	lsrs	r3, r3, #2
 8004e50:	3302      	adds	r3, #2
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e58:	4b39      	ldr	r3, [pc, #228]	@ (8004f40 <HAL_GPIO_Init+0x300>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	43db      	mvns	r3, r3
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	4013      	ands	r3, r2
 8004e66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d003      	beq.n	8004e7c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e7c:	4a30      	ldr	r2, [pc, #192]	@ (8004f40 <HAL_GPIO_Init+0x300>)
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e82:	4b2f      	ldr	r3, [pc, #188]	@ (8004f40 <HAL_GPIO_Init+0x300>)
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	43db      	mvns	r3, r3
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ea6:	4a26      	ldr	r2, [pc, #152]	@ (8004f40 <HAL_GPIO_Init+0x300>)
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004eac:	4b24      	ldr	r3, [pc, #144]	@ (8004f40 <HAL_GPIO_Init+0x300>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	43db      	mvns	r3, r3
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d003      	beq.n	8004ed0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8004f40 <HAL_GPIO_Init+0x300>)
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8004f40 <HAL_GPIO_Init+0x300>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	43db      	mvns	r3, r3
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004efa:	4a11      	ldr	r2, [pc, #68]	@ (8004f40 <HAL_GPIO_Init+0x300>)
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	3301      	adds	r3, #1
 8004f04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f47f ae9d 	bne.w	8004c50 <HAL_GPIO_Init+0x10>
  }
}
 8004f16:	bf00      	nop
 8004f18:	bf00      	nop
 8004f1a:	371c      	adds	r7, #28
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	40021000 	.word	0x40021000
 8004f28:	40010000 	.word	0x40010000
 8004f2c:	48000400 	.word	0x48000400
 8004f30:	48000800 	.word	0x48000800
 8004f34:	48000c00 	.word	0x48000c00
 8004f38:	48001000 	.word	0x48001000
 8004f3c:	48001400 	.word	0x48001400
 8004f40:	40010400 	.word	0x40010400

08004f44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691a      	ldr	r2, [r3, #16]
 8004f54:	887b      	ldrh	r3, [r7, #2]
 8004f56:	4013      	ands	r3, r2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	73fb      	strb	r3, [r7, #15]
 8004f60:	e001      	b.n	8004f66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f62:	2300      	movs	r3, #0
 8004f64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	807b      	strh	r3, [r7, #2]
 8004f80:	4613      	mov	r3, r2
 8004f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f84:	787b      	ldrb	r3, [r7, #1]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f8a:	887a      	ldrh	r2, [r7, #2]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f90:	e002      	b.n	8004f98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f92:	887a      	ldrh	r2, [r7, #2]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	4603      	mov	r3, r0
 8004fac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004fae:	4b08      	ldr	r3, [pc, #32]	@ (8004fd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fb0:	695a      	ldr	r2, [r3, #20]
 8004fb2:	88fb      	ldrh	r3, [r7, #6]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d006      	beq.n	8004fc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004fba:	4a05      	ldr	r2, [pc, #20]	@ (8004fd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fbc:	88fb      	ldrh	r3, [r7, #6]
 8004fbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004fc0:	88fb      	ldrh	r3, [r7, #6]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7fc fd50 	bl	8001a68 <HAL_GPIO_EXTI_Callback>
  }
}
 8004fc8:	bf00      	nop
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40010400 	.word	0x40010400

08004fd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d141      	bne.n	8005066 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004fe2:	4b4b      	ldr	r3, [pc, #300]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004fea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fee:	d131      	bne.n	8005054 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ff0:	4b47      	ldr	r3, [pc, #284]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ff6:	4a46      	ldr	r2, [pc, #280]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ffc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005000:	4b43      	ldr	r3, [pc, #268]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005008:	4a41      	ldr	r2, [pc, #260]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800500a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800500e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005010:	4b40      	ldr	r3, [pc, #256]	@ (8005114 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2232      	movs	r2, #50	@ 0x32
 8005016:	fb02 f303 	mul.w	r3, r2, r3
 800501a:	4a3f      	ldr	r2, [pc, #252]	@ (8005118 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800501c:	fba2 2303 	umull	r2, r3, r2, r3
 8005020:	0c9b      	lsrs	r3, r3, #18
 8005022:	3301      	adds	r3, #1
 8005024:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005026:	e002      	b.n	800502e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	3b01      	subs	r3, #1
 800502c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800502e:	4b38      	ldr	r3, [pc, #224]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800503a:	d102      	bne.n	8005042 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f2      	bne.n	8005028 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005042:	4b33      	ldr	r3, [pc, #204]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800504a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800504e:	d158      	bne.n	8005102 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e057      	b.n	8005104 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005054:	4b2e      	ldr	r3, [pc, #184]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005056:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800505a:	4a2d      	ldr	r2, [pc, #180]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800505c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005060:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005064:	e04d      	b.n	8005102 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800506c:	d141      	bne.n	80050f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800506e:	4b28      	ldr	r3, [pc, #160]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800507a:	d131      	bne.n	80050e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800507c:	4b24      	ldr	r3, [pc, #144]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800507e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005082:	4a23      	ldr	r2, [pc, #140]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005088:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800508c:	4b20      	ldr	r3, [pc, #128]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005094:	4a1e      	ldr	r2, [pc, #120]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005096:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800509a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800509c:	4b1d      	ldr	r3, [pc, #116]	@ (8005114 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2232      	movs	r2, #50	@ 0x32
 80050a2:	fb02 f303 	mul.w	r3, r2, r3
 80050a6:	4a1c      	ldr	r2, [pc, #112]	@ (8005118 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050a8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ac:	0c9b      	lsrs	r3, r3, #18
 80050ae:	3301      	adds	r3, #1
 80050b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050b2:	e002      	b.n	80050ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050ba:	4b15      	ldr	r3, [pc, #84]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050c6:	d102      	bne.n	80050ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1f2      	bne.n	80050b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050ce:	4b10      	ldr	r3, [pc, #64]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050da:	d112      	bne.n	8005102 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e011      	b.n	8005104 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80050f0:	e007      	b.n	8005102 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80050f2:	4b07      	ldr	r3, [pc, #28]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80050fa:	4a05      	ldr	r2, [pc, #20]	@ (8005110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005100:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	40007000 	.word	0x40007000
 8005114:	2000000c 	.word	0x2000000c
 8005118:	431bde83 	.word	0x431bde83

0800511c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800511c:	b480      	push	{r7}
 800511e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005120:	4b05      	ldr	r3, [pc, #20]	@ (8005138 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	4a04      	ldr	r2, [pc, #16]	@ (8005138 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005126:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800512a:	6093      	str	r3, [r2, #8]
}
 800512c:	bf00      	nop
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40007000 	.word	0x40007000

0800513c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e2fe      	b.n	800574c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	d075      	beq.n	8005246 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800515a:	4b97      	ldr	r3, [pc, #604]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 030c 	and.w	r3, r3, #12
 8005162:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005164:	4b94      	ldr	r3, [pc, #592]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f003 0303 	and.w	r3, r3, #3
 800516c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	2b0c      	cmp	r3, #12
 8005172:	d102      	bne.n	800517a <HAL_RCC_OscConfig+0x3e>
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	2b03      	cmp	r3, #3
 8005178:	d002      	beq.n	8005180 <HAL_RCC_OscConfig+0x44>
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	2b08      	cmp	r3, #8
 800517e:	d10b      	bne.n	8005198 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005180:	4b8d      	ldr	r3, [pc, #564]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d05b      	beq.n	8005244 <HAL_RCC_OscConfig+0x108>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d157      	bne.n	8005244 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e2d9      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051a0:	d106      	bne.n	80051b0 <HAL_RCC_OscConfig+0x74>
 80051a2:	4b85      	ldr	r3, [pc, #532]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a84      	ldr	r2, [pc, #528]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80051a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	e01d      	b.n	80051ec <HAL_RCC_OscConfig+0xb0>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80051b8:	d10c      	bne.n	80051d4 <HAL_RCC_OscConfig+0x98>
 80051ba:	4b7f      	ldr	r3, [pc, #508]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a7e      	ldr	r2, [pc, #504]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80051c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	4b7c      	ldr	r3, [pc, #496]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a7b      	ldr	r2, [pc, #492]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80051cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	e00b      	b.n	80051ec <HAL_RCC_OscConfig+0xb0>
 80051d4:	4b78      	ldr	r3, [pc, #480]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a77      	ldr	r2, [pc, #476]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80051da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	4b75      	ldr	r3, [pc, #468]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a74      	ldr	r2, [pc, #464]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80051e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d013      	beq.n	800521c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f4:	f7fd fb74 	bl	80028e0 <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051fc:	f7fd fb70 	bl	80028e0 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b64      	cmp	r3, #100	@ 0x64
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e29e      	b.n	800574c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800520e:	4b6a      	ldr	r3, [pc, #424]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0f0      	beq.n	80051fc <HAL_RCC_OscConfig+0xc0>
 800521a:	e014      	b.n	8005246 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800521c:	f7fd fb60 	bl	80028e0 <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005222:	e008      	b.n	8005236 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005224:	f7fd fb5c 	bl	80028e0 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b64      	cmp	r3, #100	@ 0x64
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e28a      	b.n	800574c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005236:	4b60      	ldr	r3, [pc, #384]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1f0      	bne.n	8005224 <HAL_RCC_OscConfig+0xe8>
 8005242:	e000      	b.n	8005246 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d075      	beq.n	800533e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005252:	4b59      	ldr	r3, [pc, #356]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f003 030c 	and.w	r3, r3, #12
 800525a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800525c:	4b56      	ldr	r3, [pc, #344]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f003 0303 	and.w	r3, r3, #3
 8005264:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	2b0c      	cmp	r3, #12
 800526a:	d102      	bne.n	8005272 <HAL_RCC_OscConfig+0x136>
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	2b02      	cmp	r3, #2
 8005270:	d002      	beq.n	8005278 <HAL_RCC_OscConfig+0x13c>
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	2b04      	cmp	r3, #4
 8005276:	d11f      	bne.n	80052b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005278:	4b4f      	ldr	r3, [pc, #316]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005280:	2b00      	cmp	r3, #0
 8005282:	d005      	beq.n	8005290 <HAL_RCC_OscConfig+0x154>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e25d      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005290:	4b49      	ldr	r3, [pc, #292]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	061b      	lsls	r3, r3, #24
 800529e:	4946      	ldr	r1, [pc, #280]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80052a4:	4b45      	ldr	r3, [pc, #276]	@ (80053bc <HAL_RCC_OscConfig+0x280>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7fd facd 	bl	8002848 <HAL_InitTick>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d043      	beq.n	800533c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e249      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d023      	beq.n	8005308 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052c0:	4b3d      	ldr	r3, [pc, #244]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a3c      	ldr	r2, [pc, #240]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80052c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052cc:	f7fd fb08 	bl	80028e0 <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052d4:	f7fd fb04 	bl	80028e0 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e232      	b.n	800574c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052e6:	4b34      	ldr	r3, [pc, #208]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0f0      	beq.n	80052d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052f2:	4b31      	ldr	r3, [pc, #196]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	061b      	lsls	r3, r3, #24
 8005300:	492d      	ldr	r1, [pc, #180]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 8005302:	4313      	orrs	r3, r2
 8005304:	604b      	str	r3, [r1, #4]
 8005306:	e01a      	b.n	800533e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005308:	4b2b      	ldr	r3, [pc, #172]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a2a      	ldr	r2, [pc, #168]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 800530e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005314:	f7fd fae4 	bl	80028e0 <HAL_GetTick>
 8005318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800531a:	e008      	b.n	800532e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800531c:	f7fd fae0 	bl	80028e0 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e20e      	b.n	800574c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800532e:	4b22      	ldr	r3, [pc, #136]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1f0      	bne.n	800531c <HAL_RCC_OscConfig+0x1e0>
 800533a:	e000      	b.n	800533e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800533c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0308 	and.w	r3, r3, #8
 8005346:	2b00      	cmp	r3, #0
 8005348:	d041      	beq.n	80053ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d01c      	beq.n	800538c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005352:	4b19      	ldr	r3, [pc, #100]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 8005354:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005358:	4a17      	ldr	r2, [pc, #92]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 800535a:	f043 0301 	orr.w	r3, r3, #1
 800535e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005362:	f7fd fabd 	bl	80028e0 <HAL_GetTick>
 8005366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005368:	e008      	b.n	800537c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800536a:	f7fd fab9 	bl	80028e0 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d901      	bls.n	800537c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e1e7      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800537c:	4b0e      	ldr	r3, [pc, #56]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 800537e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d0ef      	beq.n	800536a <HAL_RCC_OscConfig+0x22e>
 800538a:	e020      	b.n	80053ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800538c:	4b0a      	ldr	r3, [pc, #40]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 800538e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005392:	4a09      	ldr	r2, [pc, #36]	@ (80053b8 <HAL_RCC_OscConfig+0x27c>)
 8005394:	f023 0301 	bic.w	r3, r3, #1
 8005398:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800539c:	f7fd faa0 	bl	80028e0 <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053a2:	e00d      	b.n	80053c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053a4:	f7fd fa9c 	bl	80028e0 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d906      	bls.n	80053c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e1ca      	b.n	800574c <HAL_RCC_OscConfig+0x610>
 80053b6:	bf00      	nop
 80053b8:	40021000 	.word	0x40021000
 80053bc:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053c0:	4b8c      	ldr	r3, [pc, #560]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80053c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1ea      	bne.n	80053a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0304 	and.w	r3, r3, #4
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 80a6 	beq.w	8005528 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053dc:	2300      	movs	r3, #0
 80053de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053e0:	4b84      	ldr	r3, [pc, #528]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80053e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <HAL_RCC_OscConfig+0x2b4>
 80053ec:	2301      	movs	r3, #1
 80053ee:	e000      	b.n	80053f2 <HAL_RCC_OscConfig+0x2b6>
 80053f0:	2300      	movs	r3, #0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00d      	beq.n	8005412 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053f6:	4b7f      	ldr	r3, [pc, #508]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80053f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053fa:	4a7e      	ldr	r2, [pc, #504]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80053fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005400:	6593      	str	r3, [r2, #88]	@ 0x58
 8005402:	4b7c      	ldr	r3, [pc, #496]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 8005404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800540e:	2301      	movs	r3, #1
 8005410:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005412:	4b79      	ldr	r3, [pc, #484]	@ (80055f8 <HAL_RCC_OscConfig+0x4bc>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800541a:	2b00      	cmp	r3, #0
 800541c:	d118      	bne.n	8005450 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800541e:	4b76      	ldr	r3, [pc, #472]	@ (80055f8 <HAL_RCC_OscConfig+0x4bc>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a75      	ldr	r2, [pc, #468]	@ (80055f8 <HAL_RCC_OscConfig+0x4bc>)
 8005424:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800542a:	f7fd fa59 	bl	80028e0 <HAL_GetTick>
 800542e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005430:	e008      	b.n	8005444 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005432:	f7fd fa55 	bl	80028e0 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d901      	bls.n	8005444 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e183      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005444:	4b6c      	ldr	r3, [pc, #432]	@ (80055f8 <HAL_RCC_OscConfig+0x4bc>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800544c:	2b00      	cmp	r3, #0
 800544e:	d0f0      	beq.n	8005432 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d108      	bne.n	800546a <HAL_RCC_OscConfig+0x32e>
 8005458:	4b66      	ldr	r3, [pc, #408]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 800545a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800545e:	4a65      	ldr	r2, [pc, #404]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 8005460:	f043 0301 	orr.w	r3, r3, #1
 8005464:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005468:	e024      	b.n	80054b4 <HAL_RCC_OscConfig+0x378>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	2b05      	cmp	r3, #5
 8005470:	d110      	bne.n	8005494 <HAL_RCC_OscConfig+0x358>
 8005472:	4b60      	ldr	r3, [pc, #384]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 8005474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005478:	4a5e      	ldr	r2, [pc, #376]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 800547a:	f043 0304 	orr.w	r3, r3, #4
 800547e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005482:	4b5c      	ldr	r3, [pc, #368]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 8005484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005488:	4a5a      	ldr	r2, [pc, #360]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 800548a:	f043 0301 	orr.w	r3, r3, #1
 800548e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005492:	e00f      	b.n	80054b4 <HAL_RCC_OscConfig+0x378>
 8005494:	4b57      	ldr	r3, [pc, #348]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 8005496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800549a:	4a56      	ldr	r2, [pc, #344]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 800549c:	f023 0301 	bic.w	r3, r3, #1
 80054a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054a4:	4b53      	ldr	r3, [pc, #332]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80054a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054aa:	4a52      	ldr	r2, [pc, #328]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80054ac:	f023 0304 	bic.w	r3, r3, #4
 80054b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d016      	beq.n	80054ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054bc:	f7fd fa10 	bl	80028e0 <HAL_GetTick>
 80054c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054c2:	e00a      	b.n	80054da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054c4:	f7fd fa0c 	bl	80028e0 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e138      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054da:	4b46      	ldr	r3, [pc, #280]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80054dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0ed      	beq.n	80054c4 <HAL_RCC_OscConfig+0x388>
 80054e8:	e015      	b.n	8005516 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ea:	f7fd f9f9 	bl	80028e0 <HAL_GetTick>
 80054ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054f0:	e00a      	b.n	8005508 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054f2:	f7fd f9f5 	bl	80028e0 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005500:	4293      	cmp	r3, r2
 8005502:	d901      	bls.n	8005508 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e121      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005508:	4b3a      	ldr	r3, [pc, #232]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 800550a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1ed      	bne.n	80054f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005516:	7ffb      	ldrb	r3, [r7, #31]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d105      	bne.n	8005528 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800551c:	4b35      	ldr	r3, [pc, #212]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 800551e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005520:	4a34      	ldr	r2, [pc, #208]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 8005522:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005526:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0320 	and.w	r3, r3, #32
 8005530:	2b00      	cmp	r3, #0
 8005532:	d03c      	beq.n	80055ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d01c      	beq.n	8005576 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800553c:	4b2d      	ldr	r3, [pc, #180]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 800553e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005542:	4a2c      	ldr	r2, [pc, #176]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 8005544:	f043 0301 	orr.w	r3, r3, #1
 8005548:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800554c:	f7fd f9c8 	bl	80028e0 <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005554:	f7fd f9c4 	bl	80028e0 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e0f2      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005566:	4b23      	ldr	r3, [pc, #140]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 8005568:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0ef      	beq.n	8005554 <HAL_RCC_OscConfig+0x418>
 8005574:	e01b      	b.n	80055ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005576:	4b1f      	ldr	r3, [pc, #124]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 8005578:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800557c:	4a1d      	ldr	r2, [pc, #116]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 800557e:	f023 0301 	bic.w	r3, r3, #1
 8005582:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005586:	f7fd f9ab 	bl	80028e0 <HAL_GetTick>
 800558a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800558c:	e008      	b.n	80055a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800558e:	f7fd f9a7 	bl	80028e0 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e0d5      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055a0:	4b14      	ldr	r3, [pc, #80]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80055a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1ef      	bne.n	800558e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 80c9 	beq.w	800574a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055b8:	4b0e      	ldr	r3, [pc, #56]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f003 030c 	and.w	r3, r3, #12
 80055c0:	2b0c      	cmp	r3, #12
 80055c2:	f000 8083 	beq.w	80056cc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d15e      	bne.n	800568c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ce:	4b09      	ldr	r3, [pc, #36]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a08      	ldr	r2, [pc, #32]	@ (80055f4 <HAL_RCC_OscConfig+0x4b8>)
 80055d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055da:	f7fd f981 	bl	80028e0 <HAL_GetTick>
 80055de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055e0:	e00c      	b.n	80055fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055e2:	f7fd f97d 	bl	80028e0 <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d905      	bls.n	80055fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e0ab      	b.n	800574c <HAL_RCC_OscConfig+0x610>
 80055f4:	40021000 	.word	0x40021000
 80055f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055fc:	4b55      	ldr	r3, [pc, #340]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1ec      	bne.n	80055e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005608:	4b52      	ldr	r3, [pc, #328]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	4b52      	ldr	r3, [pc, #328]	@ (8005758 <HAL_RCC_OscConfig+0x61c>)
 800560e:	4013      	ands	r3, r2
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6a11      	ldr	r1, [r2, #32]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005618:	3a01      	subs	r2, #1
 800561a:	0112      	lsls	r2, r2, #4
 800561c:	4311      	orrs	r1, r2
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005622:	0212      	lsls	r2, r2, #8
 8005624:	4311      	orrs	r1, r2
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800562a:	0852      	lsrs	r2, r2, #1
 800562c:	3a01      	subs	r2, #1
 800562e:	0552      	lsls	r2, r2, #21
 8005630:	4311      	orrs	r1, r2
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005636:	0852      	lsrs	r2, r2, #1
 8005638:	3a01      	subs	r2, #1
 800563a:	0652      	lsls	r2, r2, #25
 800563c:	4311      	orrs	r1, r2
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005642:	06d2      	lsls	r2, r2, #27
 8005644:	430a      	orrs	r2, r1
 8005646:	4943      	ldr	r1, [pc, #268]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 8005648:	4313      	orrs	r3, r2
 800564a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800564c:	4b41      	ldr	r3, [pc, #260]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a40      	ldr	r2, [pc, #256]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 8005652:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005656:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005658:	4b3e      	ldr	r3, [pc, #248]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	4a3d      	ldr	r2, [pc, #244]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 800565e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005662:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005664:	f7fd f93c 	bl	80028e0 <HAL_GetTick>
 8005668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800566a:	e008      	b.n	800567e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800566c:	f7fd f938 	bl	80028e0 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e066      	b.n	800574c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800567e:	4b35      	ldr	r3, [pc, #212]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0f0      	beq.n	800566c <HAL_RCC_OscConfig+0x530>
 800568a:	e05e      	b.n	800574a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800568c:	4b31      	ldr	r3, [pc, #196]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a30      	ldr	r2, [pc, #192]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 8005692:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005698:	f7fd f922 	bl	80028e0 <HAL_GetTick>
 800569c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800569e:	e008      	b.n	80056b2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056a0:	f7fd f91e 	bl	80028e0 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e04c      	b.n	800574c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056b2:	4b28      	ldr	r3, [pc, #160]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1f0      	bne.n	80056a0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80056be:	4b25      	ldr	r3, [pc, #148]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 80056c0:	68da      	ldr	r2, [r3, #12]
 80056c2:	4924      	ldr	r1, [pc, #144]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 80056c4:	4b25      	ldr	r3, [pc, #148]	@ (800575c <HAL_RCC_OscConfig+0x620>)
 80056c6:	4013      	ands	r3, r2
 80056c8:	60cb      	str	r3, [r1, #12]
 80056ca:	e03e      	b.n	800574a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e039      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80056d8:	4b1e      	ldr	r3, [pc, #120]	@ (8005754 <HAL_RCC_OscConfig+0x618>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f003 0203 	and.w	r2, r3, #3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d12c      	bne.n	8005746 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f6:	3b01      	subs	r3, #1
 80056f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d123      	bne.n	8005746 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005708:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800570a:	429a      	cmp	r2, r3
 800570c:	d11b      	bne.n	8005746 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005718:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800571a:	429a      	cmp	r2, r3
 800571c:	d113      	bne.n	8005746 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005728:	085b      	lsrs	r3, r3, #1
 800572a:	3b01      	subs	r3, #1
 800572c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800572e:	429a      	cmp	r2, r3
 8005730:	d109      	bne.n	8005746 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800573c:	085b      	lsrs	r3, r3, #1
 800573e:	3b01      	subs	r3, #1
 8005740:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005742:	429a      	cmp	r2, r3
 8005744:	d001      	beq.n	800574a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e000      	b.n	800574c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3720      	adds	r7, #32
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40021000 	.word	0x40021000
 8005758:	019f800c 	.word	0x019f800c
 800575c:	feeefffc 	.word	0xfeeefffc

08005760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800576a:	2300      	movs	r3, #0
 800576c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d101      	bne.n	8005778 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e11e      	b.n	80059b6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005778:	4b91      	ldr	r3, [pc, #580]	@ (80059c0 <HAL_RCC_ClockConfig+0x260>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 030f 	and.w	r3, r3, #15
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	429a      	cmp	r2, r3
 8005784:	d910      	bls.n	80057a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005786:	4b8e      	ldr	r3, [pc, #568]	@ (80059c0 <HAL_RCC_ClockConfig+0x260>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f023 020f 	bic.w	r2, r3, #15
 800578e:	498c      	ldr	r1, [pc, #560]	@ (80059c0 <HAL_RCC_ClockConfig+0x260>)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	4313      	orrs	r3, r2
 8005794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005796:	4b8a      	ldr	r3, [pc, #552]	@ (80059c0 <HAL_RCC_ClockConfig+0x260>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 030f 	and.w	r3, r3, #15
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d001      	beq.n	80057a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e106      	b.n	80059b6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d073      	beq.n	800589c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d129      	bne.n	8005810 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057bc:	4b81      	ldr	r3, [pc, #516]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e0f4      	b.n	80059b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80057cc:	f000 f99e 	bl	8005b0c <RCC_GetSysClockFreqFromPLLSource>
 80057d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	4a7c      	ldr	r2, [pc, #496]	@ (80059c8 <HAL_RCC_ClockConfig+0x268>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d93f      	bls.n	800585a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057da:	4b7a      	ldr	r3, [pc, #488]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d009      	beq.n	80057fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d033      	beq.n	800585a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d12f      	bne.n	800585a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057fa:	4b72      	ldr	r3, [pc, #456]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005802:	4a70      	ldr	r2, [pc, #448]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 8005804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005808:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800580a:	2380      	movs	r3, #128	@ 0x80
 800580c:	617b      	str	r3, [r7, #20]
 800580e:	e024      	b.n	800585a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	2b02      	cmp	r3, #2
 8005816:	d107      	bne.n	8005828 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005818:	4b6a      	ldr	r3, [pc, #424]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d109      	bne.n	8005838 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e0c6      	b.n	80059b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005828:	4b66      	ldr	r3, [pc, #408]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e0be      	b.n	80059b6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005838:	f000 f8ce 	bl	80059d8 <HAL_RCC_GetSysClockFreq>
 800583c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	4a61      	ldr	r2, [pc, #388]	@ (80059c8 <HAL_RCC_ClockConfig+0x268>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d909      	bls.n	800585a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005846:	4b5f      	ldr	r3, [pc, #380]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800584e:	4a5d      	ldr	r2, [pc, #372]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 8005850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005854:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005856:	2380      	movs	r3, #128	@ 0x80
 8005858:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800585a:	4b5a      	ldr	r3, [pc, #360]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f023 0203 	bic.w	r2, r3, #3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	4957      	ldr	r1, [pc, #348]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 8005868:	4313      	orrs	r3, r2
 800586a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800586c:	f7fd f838 	bl	80028e0 <HAL_GetTick>
 8005870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005872:	e00a      	b.n	800588a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005874:	f7fd f834 	bl	80028e0 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005882:	4293      	cmp	r3, r2
 8005884:	d901      	bls.n	800588a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e095      	b.n	80059b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800588a:	4b4e      	ldr	r3, [pc, #312]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f003 020c 	and.w	r2, r3, #12
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	429a      	cmp	r2, r3
 800589a:	d1eb      	bne.n	8005874 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d023      	beq.n	80058f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d005      	beq.n	80058c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058b4:	4b43      	ldr	r3, [pc, #268]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	4a42      	ldr	r2, [pc, #264]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80058ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80058be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d007      	beq.n	80058dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80058cc:	4b3d      	ldr	r3, [pc, #244]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80058d4:	4a3b      	ldr	r2, [pc, #236]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80058d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80058da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058dc:	4b39      	ldr	r3, [pc, #228]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	4936      	ldr	r1, [pc, #216]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	608b      	str	r3, [r1, #8]
 80058ee:	e008      	b.n	8005902 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	2b80      	cmp	r3, #128	@ 0x80
 80058f4:	d105      	bne.n	8005902 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80058f6:	4b33      	ldr	r3, [pc, #204]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	4a32      	ldr	r2, [pc, #200]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 80058fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005900:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005902:	4b2f      	ldr	r3, [pc, #188]	@ (80059c0 <HAL_RCC_ClockConfig+0x260>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	429a      	cmp	r2, r3
 800590e:	d21d      	bcs.n	800594c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005910:	4b2b      	ldr	r3, [pc, #172]	@ (80059c0 <HAL_RCC_ClockConfig+0x260>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f023 020f 	bic.w	r2, r3, #15
 8005918:	4929      	ldr	r1, [pc, #164]	@ (80059c0 <HAL_RCC_ClockConfig+0x260>)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	4313      	orrs	r3, r2
 800591e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005920:	f7fc ffde 	bl	80028e0 <HAL_GetTick>
 8005924:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005926:	e00a      	b.n	800593e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005928:	f7fc ffda 	bl	80028e0 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005936:	4293      	cmp	r3, r2
 8005938:	d901      	bls.n	800593e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e03b      	b.n	80059b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800593e:	4b20      	ldr	r3, [pc, #128]	@ (80059c0 <HAL_RCC_ClockConfig+0x260>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 030f 	and.w	r3, r3, #15
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	429a      	cmp	r2, r3
 800594a:	d1ed      	bne.n	8005928 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b00      	cmp	r3, #0
 8005956:	d008      	beq.n	800596a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005958:	4b1a      	ldr	r3, [pc, #104]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	4917      	ldr	r1, [pc, #92]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 8005966:	4313      	orrs	r3, r2
 8005968:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0308 	and.w	r3, r3, #8
 8005972:	2b00      	cmp	r3, #0
 8005974:	d009      	beq.n	800598a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005976:	4b13      	ldr	r3, [pc, #76]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	490f      	ldr	r1, [pc, #60]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 8005986:	4313      	orrs	r3, r2
 8005988:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800598a:	f000 f825 	bl	80059d8 <HAL_RCC_GetSysClockFreq>
 800598e:	4602      	mov	r2, r0
 8005990:	4b0c      	ldr	r3, [pc, #48]	@ (80059c4 <HAL_RCC_ClockConfig+0x264>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	091b      	lsrs	r3, r3, #4
 8005996:	f003 030f 	and.w	r3, r3, #15
 800599a:	490c      	ldr	r1, [pc, #48]	@ (80059cc <HAL_RCC_ClockConfig+0x26c>)
 800599c:	5ccb      	ldrb	r3, [r1, r3]
 800599e:	f003 031f 	and.w	r3, r3, #31
 80059a2:	fa22 f303 	lsr.w	r3, r2, r3
 80059a6:	4a0a      	ldr	r2, [pc, #40]	@ (80059d0 <HAL_RCC_ClockConfig+0x270>)
 80059a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80059aa:	4b0a      	ldr	r3, [pc, #40]	@ (80059d4 <HAL_RCC_ClockConfig+0x274>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fc ff4a 	bl	8002848 <HAL_InitTick>
 80059b4:	4603      	mov	r3, r0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	40022000 	.word	0x40022000
 80059c4:	40021000 	.word	0x40021000
 80059c8:	04c4b400 	.word	0x04c4b400
 80059cc:	080088b4 	.word	0x080088b4
 80059d0:	2000000c 	.word	0x2000000c
 80059d4:	20000010 	.word	0x20000010

080059d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80059de:	4b2c      	ldr	r3, [pc, #176]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 030c 	and.w	r3, r3, #12
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d102      	bne.n	80059f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059ea:	4b2a      	ldr	r3, [pc, #168]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0xbc>)
 80059ec:	613b      	str	r3, [r7, #16]
 80059ee:	e047      	b.n	8005a80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80059f0:	4b27      	ldr	r3, [pc, #156]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f003 030c 	and.w	r3, r3, #12
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	d102      	bne.n	8005a02 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059fc:	4b26      	ldr	r3, [pc, #152]	@ (8005a98 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059fe:	613b      	str	r3, [r7, #16]
 8005a00:	e03e      	b.n	8005a80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005a02:	4b23      	ldr	r3, [pc, #140]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 030c 	and.w	r3, r3, #12
 8005a0a:	2b0c      	cmp	r3, #12
 8005a0c:	d136      	bne.n	8005a7c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a0e:	4b20      	ldr	r3, [pc, #128]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a18:	4b1d      	ldr	r3, [pc, #116]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	091b      	lsrs	r3, r3, #4
 8005a1e:	f003 030f 	and.w	r3, r3, #15
 8005a22:	3301      	adds	r3, #1
 8005a24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2b03      	cmp	r3, #3
 8005a2a:	d10c      	bne.n	8005a46 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a2c:	4a1a      	ldr	r2, [pc, #104]	@ (8005a98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a34:	4a16      	ldr	r2, [pc, #88]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a36:	68d2      	ldr	r2, [r2, #12]
 8005a38:	0a12      	lsrs	r2, r2, #8
 8005a3a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a3e:	fb02 f303 	mul.w	r3, r2, r3
 8005a42:	617b      	str	r3, [r7, #20]
      break;
 8005a44:	e00c      	b.n	8005a60 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a46:	4a13      	ldr	r2, [pc, #76]	@ (8005a94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4e:	4a10      	ldr	r2, [pc, #64]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a50:	68d2      	ldr	r2, [r2, #12]
 8005a52:	0a12      	lsrs	r2, r2, #8
 8005a54:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a58:	fb02 f303 	mul.w	r3, r2, r3
 8005a5c:	617b      	str	r3, [r7, #20]
      break;
 8005a5e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a60:	4b0b      	ldr	r3, [pc, #44]	@ (8005a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	0e5b      	lsrs	r3, r3, #25
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a78:	613b      	str	r3, [r7, #16]
 8005a7a:	e001      	b.n	8005a80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005a80:	693b      	ldr	r3, [r7, #16]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	371c      	adds	r7, #28
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	40021000 	.word	0x40021000
 8005a94:	00f42400 	.word	0x00f42400
 8005a98:	016e3600 	.word	0x016e3600

08005a9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005aa0:	4b03      	ldr	r3, [pc, #12]	@ (8005ab0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	2000000c 	.word	0x2000000c

08005ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ab8:	f7ff fff0 	bl	8005a9c <HAL_RCC_GetHCLKFreq>
 8005abc:	4602      	mov	r2, r0
 8005abe:	4b06      	ldr	r3, [pc, #24]	@ (8005ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	0a1b      	lsrs	r3, r3, #8
 8005ac4:	f003 0307 	and.w	r3, r3, #7
 8005ac8:	4904      	ldr	r1, [pc, #16]	@ (8005adc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005aca:	5ccb      	ldrb	r3, [r1, r3]
 8005acc:	f003 031f 	and.w	r3, r3, #31
 8005ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	40021000 	.word	0x40021000
 8005adc:	080088c4 	.word	0x080088c4

08005ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ae4:	f7ff ffda 	bl	8005a9c <HAL_RCC_GetHCLKFreq>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	4b06      	ldr	r3, [pc, #24]	@ (8005b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	0adb      	lsrs	r3, r3, #11
 8005af0:	f003 0307 	and.w	r3, r3, #7
 8005af4:	4904      	ldr	r1, [pc, #16]	@ (8005b08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005af6:	5ccb      	ldrb	r3, [r1, r3]
 8005af8:	f003 031f 	and.w	r3, r3, #31
 8005afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	40021000 	.word	0x40021000
 8005b08:	080088c4 	.word	0x080088c4

08005b0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b087      	sub	sp, #28
 8005b10:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b12:	4b1e      	ldr	r3, [pc, #120]	@ (8005b8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8005b8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	091b      	lsrs	r3, r3, #4
 8005b22:	f003 030f 	and.w	r3, r3, #15
 8005b26:	3301      	adds	r3, #1
 8005b28:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	2b03      	cmp	r3, #3
 8005b2e:	d10c      	bne.n	8005b4a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b30:	4a17      	ldr	r2, [pc, #92]	@ (8005b90 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b38:	4a14      	ldr	r2, [pc, #80]	@ (8005b8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b3a:	68d2      	ldr	r2, [r2, #12]
 8005b3c:	0a12      	lsrs	r2, r2, #8
 8005b3e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b42:	fb02 f303 	mul.w	r3, r2, r3
 8005b46:	617b      	str	r3, [r7, #20]
    break;
 8005b48:	e00c      	b.n	8005b64 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b4a:	4a12      	ldr	r2, [pc, #72]	@ (8005b94 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b52:	4a0e      	ldr	r2, [pc, #56]	@ (8005b8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b54:	68d2      	ldr	r2, [r2, #12]
 8005b56:	0a12      	lsrs	r2, r2, #8
 8005b58:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b5c:	fb02 f303 	mul.w	r3, r2, r3
 8005b60:	617b      	str	r3, [r7, #20]
    break;
 8005b62:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b64:	4b09      	ldr	r3, [pc, #36]	@ (8005b8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	0e5b      	lsrs	r3, r3, #25
 8005b6a:	f003 0303 	and.w	r3, r3, #3
 8005b6e:	3301      	adds	r3, #1
 8005b70:	005b      	lsls	r3, r3, #1
 8005b72:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b7c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005b7e:	687b      	ldr	r3, [r7, #4]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	371c      	adds	r7, #28
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	40021000 	.word	0x40021000
 8005b90:	016e3600 	.word	0x016e3600
 8005b94:	00f42400 	.word	0x00f42400

08005b98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 8098 	beq.w	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bba:	4b43      	ldr	r3, [pc, #268]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10d      	bne.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bc6:	4b40      	ldr	r3, [pc, #256]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bca:	4a3f      	ldr	r2, [pc, #252]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bd2:	4b3d      	ldr	r3, [pc, #244]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bda:	60bb      	str	r3, [r7, #8]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bde:	2301      	movs	r3, #1
 8005be0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005be2:	4b3a      	ldr	r3, [pc, #232]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a39      	ldr	r2, [pc, #228]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005bee:	f7fc fe77 	bl	80028e0 <HAL_GetTick>
 8005bf2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bf4:	e009      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bf6:	f7fc fe73 	bl	80028e0 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d902      	bls.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	74fb      	strb	r3, [r7, #19]
        break;
 8005c08:	e005      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c0a:	4b30      	ldr	r3, [pc, #192]	@ (8005ccc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d0ef      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005c16:	7cfb      	ldrb	r3, [r7, #19]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d159      	bne.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c1c:	4b2a      	ldr	r3, [pc, #168]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c26:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d01e      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d019      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c38:	4b23      	ldr	r3, [pc, #140]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c44:	4b20      	ldr	r3, [pc, #128]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c4a:	4a1f      	ldr	r2, [pc, #124]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c54:	4b1c      	ldr	r3, [pc, #112]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c5a:	4a1b      	ldr	r2, [pc, #108]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c64:	4a18      	ldr	r2, [pc, #96]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d016      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c76:	f7fc fe33 	bl	80028e0 <HAL_GetTick>
 8005c7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c7c:	e00b      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c7e:	f7fc fe2f 	bl	80028e0 <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d902      	bls.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	74fb      	strb	r3, [r7, #19]
            break;
 8005c94:	e006      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c96:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0ec      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005ca4:	7cfb      	ldrb	r3, [r7, #19]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10b      	bne.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005caa:	4b07      	ldr	r3, [pc, #28]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cb8:	4903      	ldr	r1, [pc, #12]	@ (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005cc0:	e008      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cc2:	7cfb      	ldrb	r3, [r7, #19]
 8005cc4:	74bb      	strb	r3, [r7, #18]
 8005cc6:	e005      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005cc8:	40021000 	.word	0x40021000
 8005ccc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd0:	7cfb      	ldrb	r3, [r7, #19]
 8005cd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cd4:	7c7b      	ldrb	r3, [r7, #17]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d105      	bne.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cda:	4ba7      	ldr	r3, [pc, #668]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cde:	4aa6      	ldr	r2, [pc, #664]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ce0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ce4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00a      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005cf2:	4ba1      	ldr	r3, [pc, #644]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cf8:	f023 0203 	bic.w	r2, r3, #3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	499d      	ldr	r1, [pc, #628]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00a      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d14:	4b98      	ldr	r3, [pc, #608]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d1a:	f023 020c 	bic.w	r2, r3, #12
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	4995      	ldr	r1, [pc, #596]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0304 	and.w	r3, r3, #4
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00a      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d36:	4b90      	ldr	r3, [pc, #576]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d3c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	498c      	ldr	r1, [pc, #560]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0308 	and.w	r3, r3, #8
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00a      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d58:	4b87      	ldr	r3, [pc, #540]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	4984      	ldr	r1, [pc, #528]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0310 	and.w	r3, r3, #16
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00a      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d7a:	4b7f      	ldr	r3, [pc, #508]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	497b      	ldr	r1, [pc, #492]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0320 	and.w	r3, r3, #32
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00a      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d9c:	4b76      	ldr	r3, [pc, #472]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005da2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	4973      	ldr	r1, [pc, #460]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005dbe:	4b6e      	ldr	r3, [pc, #440]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	69db      	ldr	r3, [r3, #28]
 8005dcc:	496a      	ldr	r1, [pc, #424]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00a      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005de0:	4b65      	ldr	r3, [pc, #404]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005de6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	4962      	ldr	r1, [pc, #392]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00a      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e02:	4b5d      	ldr	r3, [pc, #372]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e10:	4959      	ldr	r1, [pc, #356]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00a      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e24:	4b54      	ldr	r3, [pc, #336]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e2a:	f023 0203 	bic.w	r2, r3, #3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e32:	4951      	ldr	r1, [pc, #324]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e46:	4b4c      	ldr	r3, [pc, #304]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e4c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e54:	4948      	ldr	r1, [pc, #288]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d015      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e68:	4b43      	ldr	r3, [pc, #268]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e76:	4940      	ldr	r1, [pc, #256]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e86:	d105      	bne.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e88:	4b3b      	ldr	r3, [pc, #236]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	4a3a      	ldr	r2, [pc, #232]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e92:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d015      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ea0:	4b35      	ldr	r3, [pc, #212]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ea6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eae:	4932      	ldr	r1, [pc, #200]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ebe:	d105      	bne.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	4a2c      	ldr	r2, [pc, #176]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005eca:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d015      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ed8:	4b27      	ldr	r3, [pc, #156]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ede:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee6:	4924      	ldr	r1, [pc, #144]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ef6:	d105      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ef8:	4b1f      	ldr	r3, [pc, #124]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	4a1e      	ldr	r2, [pc, #120]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005efe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f02:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d015      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f10:	4b19      	ldr	r3, [pc, #100]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f16:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f1e:	4916      	ldr	r1, [pc, #88]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f2e:	d105      	bne.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f30:	4b11      	ldr	r3, [pc, #68]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	4a10      	ldr	r2, [pc, #64]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f3a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d019      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f48:	4b0b      	ldr	r3, [pc, #44]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f56:	4908      	ldr	r1, [pc, #32]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f66:	d109      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f68:	4b03      	ldr	r3, [pc, #12]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	4a02      	ldr	r2, [pc, #8]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f72:	60d3      	str	r3, [r2, #12]
 8005f74:	e002      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005f76:	bf00      	nop
 8005f78:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d015      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005f88:	4b29      	ldr	r3, [pc, #164]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f8e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f96:	4926      	ldr	r1, [pc, #152]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fa2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fa6:	d105      	bne.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005fa8:	4b21      	ldr	r3, [pc, #132]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	4a20      	ldr	r2, [pc, #128]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fb2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d015      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fc6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fce:	4918      	ldr	r1, [pc, #96]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fde:	d105      	bne.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005fe0:	4b13      	ldr	r3, [pc, #76]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	4a12      	ldr	r2, [pc, #72]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fe6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fea:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d015      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ffa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ffe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006006:	490a      	ldr	r1, [pc, #40]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006008:	4313      	orrs	r3, r2
 800600a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006012:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006016:	d105      	bne.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006018:	4b05      	ldr	r3, [pc, #20]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	4a04      	ldr	r2, [pc, #16]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800601e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006022:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006024:	7cbb      	ldrb	r3, [r7, #18]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3718      	adds	r7, #24
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	40021000 	.word	0x40021000

08006034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e049      	b.n	80060da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d106      	bne.n	8006060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7fc fa7a 	bl	8002554 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	3304      	adds	r3, #4
 8006070:	4619      	mov	r1, r3
 8006072:	4610      	mov	r0, r2
 8006074:	f000 ff68 	bl	8006f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
	...

080060e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d001      	beq.n	80060fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e04c      	b.n	8006196 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2202      	movs	r2, #2
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a26      	ldr	r2, [pc, #152]	@ (80061a4 <HAL_TIM_Base_Start+0xc0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d022      	beq.n	8006154 <HAL_TIM_Base_Start+0x70>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006116:	d01d      	beq.n	8006154 <HAL_TIM_Base_Start+0x70>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a22      	ldr	r2, [pc, #136]	@ (80061a8 <HAL_TIM_Base_Start+0xc4>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d018      	beq.n	8006154 <HAL_TIM_Base_Start+0x70>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a21      	ldr	r2, [pc, #132]	@ (80061ac <HAL_TIM_Base_Start+0xc8>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d013      	beq.n	8006154 <HAL_TIM_Base_Start+0x70>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a1f      	ldr	r2, [pc, #124]	@ (80061b0 <HAL_TIM_Base_Start+0xcc>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d00e      	beq.n	8006154 <HAL_TIM_Base_Start+0x70>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a1e      	ldr	r2, [pc, #120]	@ (80061b4 <HAL_TIM_Base_Start+0xd0>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d009      	beq.n	8006154 <HAL_TIM_Base_Start+0x70>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a1c      	ldr	r2, [pc, #112]	@ (80061b8 <HAL_TIM_Base_Start+0xd4>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d004      	beq.n	8006154 <HAL_TIM_Base_Start+0x70>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a1b      	ldr	r2, [pc, #108]	@ (80061bc <HAL_TIM_Base_Start+0xd8>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d115      	bne.n	8006180 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	689a      	ldr	r2, [r3, #8]
 800615a:	4b19      	ldr	r3, [pc, #100]	@ (80061c0 <HAL_TIM_Base_Start+0xdc>)
 800615c:	4013      	ands	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b06      	cmp	r3, #6
 8006164:	d015      	beq.n	8006192 <HAL_TIM_Base_Start+0xae>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800616c:	d011      	beq.n	8006192 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f042 0201 	orr.w	r2, r2, #1
 800617c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800617e:	e008      	b.n	8006192 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f042 0201 	orr.w	r2, r2, #1
 800618e:	601a      	str	r2, [r3, #0]
 8006190:	e000      	b.n	8006194 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006192:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	40012c00 	.word	0x40012c00
 80061a8:	40000400 	.word	0x40000400
 80061ac:	40000800 	.word	0x40000800
 80061b0:	40000c00 	.word	0x40000c00
 80061b4:	40013400 	.word	0x40013400
 80061b8:	40014000 	.word	0x40014000
 80061bc:	40015000 	.word	0x40015000
 80061c0:	00010007 	.word	0x00010007

080061c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d001      	beq.n	80061dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e054      	b.n	8006286 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2202      	movs	r2, #2
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68da      	ldr	r2, [r3, #12]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f042 0201 	orr.w	r2, r2, #1
 80061f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a26      	ldr	r2, [pc, #152]	@ (8006294 <HAL_TIM_Base_Start_IT+0xd0>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d022      	beq.n	8006244 <HAL_TIM_Base_Start_IT+0x80>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006206:	d01d      	beq.n	8006244 <HAL_TIM_Base_Start_IT+0x80>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a22      	ldr	r2, [pc, #136]	@ (8006298 <HAL_TIM_Base_Start_IT+0xd4>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d018      	beq.n	8006244 <HAL_TIM_Base_Start_IT+0x80>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a21      	ldr	r2, [pc, #132]	@ (800629c <HAL_TIM_Base_Start_IT+0xd8>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d013      	beq.n	8006244 <HAL_TIM_Base_Start_IT+0x80>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a1f      	ldr	r2, [pc, #124]	@ (80062a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d00e      	beq.n	8006244 <HAL_TIM_Base_Start_IT+0x80>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a1e      	ldr	r2, [pc, #120]	@ (80062a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d009      	beq.n	8006244 <HAL_TIM_Base_Start_IT+0x80>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a1c      	ldr	r2, [pc, #112]	@ (80062a8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d004      	beq.n	8006244 <HAL_TIM_Base_Start_IT+0x80>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a1b      	ldr	r2, [pc, #108]	@ (80062ac <HAL_TIM_Base_Start_IT+0xe8>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d115      	bne.n	8006270 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689a      	ldr	r2, [r3, #8]
 800624a:	4b19      	ldr	r3, [pc, #100]	@ (80062b0 <HAL_TIM_Base_Start_IT+0xec>)
 800624c:	4013      	ands	r3, r2
 800624e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2b06      	cmp	r3, #6
 8006254:	d015      	beq.n	8006282 <HAL_TIM_Base_Start_IT+0xbe>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800625c:	d011      	beq.n	8006282 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f042 0201 	orr.w	r2, r2, #1
 800626c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800626e:	e008      	b.n	8006282 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0201 	orr.w	r2, r2, #1
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	e000      	b.n	8006284 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006282:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	40012c00 	.word	0x40012c00
 8006298:	40000400 	.word	0x40000400
 800629c:	40000800 	.word	0x40000800
 80062a0:	40000c00 	.word	0x40000c00
 80062a4:	40013400 	.word	0x40013400
 80062a8:	40014000 	.word	0x40014000
 80062ac:	40015000 	.word	0x40015000
 80062b0:	00010007 	.word	0x00010007

080062b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d101      	bne.n	80062c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e049      	b.n	800635a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d106      	bne.n	80062e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f841 	bl	8006362 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2202      	movs	r2, #2
 80062e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	3304      	adds	r3, #4
 80062f0:	4619      	mov	r1, r3
 80062f2:	4610      	mov	r0, r2
 80062f4:	f000 fe28 	bl	8006f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006362:	b480      	push	{r7}
 8006364:	b083      	sub	sp, #12
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800636a:	bf00      	nop
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
	...

08006378 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d109      	bne.n	800639c <HAL_TIM_PWM_Start+0x24>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b01      	cmp	r3, #1
 8006392:	bf14      	ite	ne
 8006394:	2301      	movne	r3, #1
 8006396:	2300      	moveq	r3, #0
 8006398:	b2db      	uxtb	r3, r3
 800639a:	e03c      	b.n	8006416 <HAL_TIM_PWM_Start+0x9e>
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d109      	bne.n	80063b6 <HAL_TIM_PWM_Start+0x3e>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	bf14      	ite	ne
 80063ae:	2301      	movne	r3, #1
 80063b0:	2300      	moveq	r3, #0
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	e02f      	b.n	8006416 <HAL_TIM_PWM_Start+0x9e>
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	2b08      	cmp	r3, #8
 80063ba:	d109      	bne.n	80063d0 <HAL_TIM_PWM_Start+0x58>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	bf14      	ite	ne
 80063c8:	2301      	movne	r3, #1
 80063ca:	2300      	moveq	r3, #0
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	e022      	b.n	8006416 <HAL_TIM_PWM_Start+0x9e>
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	2b0c      	cmp	r3, #12
 80063d4:	d109      	bne.n	80063ea <HAL_TIM_PWM_Start+0x72>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b01      	cmp	r3, #1
 80063e0:	bf14      	ite	ne
 80063e2:	2301      	movne	r3, #1
 80063e4:	2300      	moveq	r3, #0
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	e015      	b.n	8006416 <HAL_TIM_PWM_Start+0x9e>
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2b10      	cmp	r3, #16
 80063ee:	d109      	bne.n	8006404 <HAL_TIM_PWM_Start+0x8c>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	bf14      	ite	ne
 80063fc:	2301      	movne	r3, #1
 80063fe:	2300      	moveq	r3, #0
 8006400:	b2db      	uxtb	r3, r3
 8006402:	e008      	b.n	8006416 <HAL_TIM_PWM_Start+0x9e>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b01      	cmp	r3, #1
 800640e:	bf14      	ite	ne
 8006410:	2301      	movne	r3, #1
 8006412:	2300      	moveq	r3, #0
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d001      	beq.n	800641e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e0a6      	b.n	800656c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d104      	bne.n	800642e <HAL_TIM_PWM_Start+0xb6>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800642c:	e023      	b.n	8006476 <HAL_TIM_PWM_Start+0xfe>
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b04      	cmp	r3, #4
 8006432:	d104      	bne.n	800643e <HAL_TIM_PWM_Start+0xc6>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800643c:	e01b      	b.n	8006476 <HAL_TIM_PWM_Start+0xfe>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b08      	cmp	r3, #8
 8006442:	d104      	bne.n	800644e <HAL_TIM_PWM_Start+0xd6>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800644c:	e013      	b.n	8006476 <HAL_TIM_PWM_Start+0xfe>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	2b0c      	cmp	r3, #12
 8006452:	d104      	bne.n	800645e <HAL_TIM_PWM_Start+0xe6>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2202      	movs	r2, #2
 8006458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800645c:	e00b      	b.n	8006476 <HAL_TIM_PWM_Start+0xfe>
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2b10      	cmp	r3, #16
 8006462:	d104      	bne.n	800646e <HAL_TIM_PWM_Start+0xf6>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800646c:	e003      	b.n	8006476 <HAL_TIM_PWM_Start+0xfe>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2202      	movs	r2, #2
 8006472:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2201      	movs	r2, #1
 800647c:	6839      	ldr	r1, [r7, #0]
 800647e:	4618      	mov	r0, r3
 8006480:	f001 f9dc 	bl	800783c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a3a      	ldr	r2, [pc, #232]	@ (8006574 <HAL_TIM_PWM_Start+0x1fc>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d018      	beq.n	80064c0 <HAL_TIM_PWM_Start+0x148>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a39      	ldr	r2, [pc, #228]	@ (8006578 <HAL_TIM_PWM_Start+0x200>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d013      	beq.n	80064c0 <HAL_TIM_PWM_Start+0x148>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a37      	ldr	r2, [pc, #220]	@ (800657c <HAL_TIM_PWM_Start+0x204>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d00e      	beq.n	80064c0 <HAL_TIM_PWM_Start+0x148>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a36      	ldr	r2, [pc, #216]	@ (8006580 <HAL_TIM_PWM_Start+0x208>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d009      	beq.n	80064c0 <HAL_TIM_PWM_Start+0x148>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a34      	ldr	r2, [pc, #208]	@ (8006584 <HAL_TIM_PWM_Start+0x20c>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d004      	beq.n	80064c0 <HAL_TIM_PWM_Start+0x148>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a33      	ldr	r2, [pc, #204]	@ (8006588 <HAL_TIM_PWM_Start+0x210>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d101      	bne.n	80064c4 <HAL_TIM_PWM_Start+0x14c>
 80064c0:	2301      	movs	r3, #1
 80064c2:	e000      	b.n	80064c6 <HAL_TIM_PWM_Start+0x14e>
 80064c4:	2300      	movs	r3, #0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d007      	beq.n	80064da <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80064d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a25      	ldr	r2, [pc, #148]	@ (8006574 <HAL_TIM_PWM_Start+0x1fc>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d022      	beq.n	800652a <HAL_TIM_PWM_Start+0x1b2>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064ec:	d01d      	beq.n	800652a <HAL_TIM_PWM_Start+0x1b2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a26      	ldr	r2, [pc, #152]	@ (800658c <HAL_TIM_PWM_Start+0x214>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d018      	beq.n	800652a <HAL_TIM_PWM_Start+0x1b2>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a24      	ldr	r2, [pc, #144]	@ (8006590 <HAL_TIM_PWM_Start+0x218>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d013      	beq.n	800652a <HAL_TIM_PWM_Start+0x1b2>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a23      	ldr	r2, [pc, #140]	@ (8006594 <HAL_TIM_PWM_Start+0x21c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d00e      	beq.n	800652a <HAL_TIM_PWM_Start+0x1b2>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a19      	ldr	r2, [pc, #100]	@ (8006578 <HAL_TIM_PWM_Start+0x200>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d009      	beq.n	800652a <HAL_TIM_PWM_Start+0x1b2>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a18      	ldr	r2, [pc, #96]	@ (800657c <HAL_TIM_PWM_Start+0x204>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d004      	beq.n	800652a <HAL_TIM_PWM_Start+0x1b2>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a18      	ldr	r2, [pc, #96]	@ (8006588 <HAL_TIM_PWM_Start+0x210>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d115      	bne.n	8006556 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689a      	ldr	r2, [r3, #8]
 8006530:	4b19      	ldr	r3, [pc, #100]	@ (8006598 <HAL_TIM_PWM_Start+0x220>)
 8006532:	4013      	ands	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2b06      	cmp	r3, #6
 800653a:	d015      	beq.n	8006568 <HAL_TIM_PWM_Start+0x1f0>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006542:	d011      	beq.n	8006568 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f042 0201 	orr.w	r2, r2, #1
 8006552:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006554:	e008      	b.n	8006568 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f042 0201 	orr.w	r2, r2, #1
 8006564:	601a      	str	r2, [r3, #0]
 8006566:	e000      	b.n	800656a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006568:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	40012c00 	.word	0x40012c00
 8006578:	40013400 	.word	0x40013400
 800657c:	40014000 	.word	0x40014000
 8006580:	40014400 	.word	0x40014400
 8006584:	40014800 	.word	0x40014800
 8006588:	40015000 	.word	0x40015000
 800658c:	40000400 	.word	0x40000400
 8006590:	40000800 	.word	0x40000800
 8006594:	40000c00 	.word	0x40000c00
 8006598:	00010007 	.word	0x00010007

0800659c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e097      	b.n	80066e0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d106      	bne.n	80065ca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7fb ffff 	bl	80025c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2202      	movs	r2, #2
 80065ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	6812      	ldr	r2, [r2, #0]
 80065dc:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80065e0:	f023 0307 	bic.w	r3, r3, #7
 80065e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	3304      	adds	r3, #4
 80065ee:	4619      	mov	r1, r3
 80065f0:	4610      	mov	r0, r2
 80065f2:	f000 fca9 	bl	8006f48 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	4313      	orrs	r3, r2
 8006616:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800661e:	f023 0303 	bic.w	r3, r3, #3
 8006622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	021b      	lsls	r3, r3, #8
 800662e:	4313      	orrs	r3, r2
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	4313      	orrs	r3, r2
 8006634:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800663c:	f023 030c 	bic.w	r3, r3, #12
 8006640:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006648:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800664c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	68da      	ldr	r2, [r3, #12]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	021b      	lsls	r3, r3, #8
 8006658:	4313      	orrs	r3, r2
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	4313      	orrs	r3, r2
 800665e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	011a      	lsls	r2, r3, #4
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	031b      	lsls	r3, r3, #12
 800666c:	4313      	orrs	r3, r2
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	4313      	orrs	r3, r2
 8006672:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800667a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006682:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	695b      	ldr	r3, [r3, #20]
 800668c:	011b      	lsls	r3, r3, #4
 800668e:	4313      	orrs	r3, r2
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	4313      	orrs	r3, r2
 8006694:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80066f8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006700:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006708:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006710:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d110      	bne.n	800673a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006718:	7bfb      	ldrb	r3, [r7, #15]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d102      	bne.n	8006724 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800671e:	7b7b      	ldrb	r3, [r7, #13]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d001      	beq.n	8006728 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e069      	b.n	80067fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006738:	e031      	b.n	800679e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b04      	cmp	r3, #4
 800673e:	d110      	bne.n	8006762 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006740:	7bbb      	ldrb	r3, [r7, #14]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d102      	bne.n	800674c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006746:	7b3b      	ldrb	r3, [r7, #12]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d001      	beq.n	8006750 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e055      	b.n	80067fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006760:	e01d      	b.n	800679e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006762:	7bfb      	ldrb	r3, [r7, #15]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d108      	bne.n	800677a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006768:	7bbb      	ldrb	r3, [r7, #14]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d105      	bne.n	800677a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800676e:	7b7b      	ldrb	r3, [r7, #13]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d102      	bne.n	800677a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006774:	7b3b      	ldrb	r3, [r7, #12]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d001      	beq.n	800677e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e03e      	b.n	80067fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2202      	movs	r2, #2
 8006782:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2202      	movs	r2, #2
 800678a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2202      	movs	r2, #2
 8006792:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2202      	movs	r2, #2
 800679a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d003      	beq.n	80067ac <HAL_TIM_Encoder_Start+0xc4>
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	2b04      	cmp	r3, #4
 80067a8:	d008      	beq.n	80067bc <HAL_TIM_Encoder_Start+0xd4>
 80067aa:	e00f      	b.n	80067cc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2201      	movs	r2, #1
 80067b2:	2100      	movs	r1, #0
 80067b4:	4618      	mov	r0, r3
 80067b6:	f001 f841 	bl	800783c <TIM_CCxChannelCmd>
      break;
 80067ba:	e016      	b.n	80067ea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2201      	movs	r2, #1
 80067c2:	2104      	movs	r1, #4
 80067c4:	4618      	mov	r0, r3
 80067c6:	f001 f839 	bl	800783c <TIM_CCxChannelCmd>
      break;
 80067ca:	e00e      	b.n	80067ea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2201      	movs	r2, #1
 80067d2:	2100      	movs	r1, #0
 80067d4:	4618      	mov	r0, r3
 80067d6:	f001 f831 	bl	800783c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2201      	movs	r2, #1
 80067e0:	2104      	movs	r1, #4
 80067e2:	4618      	mov	r0, r3
 80067e4:	f001 f82a 	bl	800783c <TIM_CCxChannelCmd>
      break;
 80067e8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f042 0201 	orr.w	r2, r2, #1
 80067f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f003 0302 	and.w	r3, r3, #2
 8006822:	2b00      	cmp	r3, #0
 8006824:	d020      	beq.n	8006868 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f003 0302 	and.w	r3, r3, #2
 800682c:	2b00      	cmp	r3, #0
 800682e:	d01b      	beq.n	8006868 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f06f 0202 	mvn.w	r2, #2
 8006838:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	f003 0303 	and.w	r3, r3, #3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fb5c 	bl	8006f0c <HAL_TIM_IC_CaptureCallback>
 8006854:	e005      	b.n	8006862 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 fb4e 	bl	8006ef8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fb5f 	bl	8006f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	f003 0304 	and.w	r3, r3, #4
 800686e:	2b00      	cmp	r3, #0
 8006870:	d020      	beq.n	80068b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b00      	cmp	r3, #0
 800687a:	d01b      	beq.n	80068b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f06f 0204 	mvn.w	r2, #4
 8006884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2202      	movs	r2, #2
 800688a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fb36 	bl	8006f0c <HAL_TIM_IC_CaptureCallback>
 80068a0:	e005      	b.n	80068ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fb28 	bl	8006ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 fb39 	bl	8006f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	f003 0308 	and.w	r3, r3, #8
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d020      	beq.n	8006900 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f003 0308 	and.w	r3, r3, #8
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d01b      	beq.n	8006900 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f06f 0208 	mvn.w	r2, #8
 80068d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2204      	movs	r2, #4
 80068d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	f003 0303 	and.w	r3, r3, #3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fb10 	bl	8006f0c <HAL_TIM_IC_CaptureCallback>
 80068ec:	e005      	b.n	80068fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fb02 	bl	8006ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fb13 	bl	8006f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f003 0310 	and.w	r3, r3, #16
 8006906:	2b00      	cmp	r3, #0
 8006908:	d020      	beq.n	800694c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f003 0310 	and.w	r3, r3, #16
 8006910:	2b00      	cmp	r3, #0
 8006912:	d01b      	beq.n	800694c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f06f 0210 	mvn.w	r2, #16
 800691c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2208      	movs	r2, #8
 8006922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	69db      	ldr	r3, [r3, #28]
 800692a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800692e:	2b00      	cmp	r3, #0
 8006930:	d003      	beq.n	800693a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 faea 	bl	8006f0c <HAL_TIM_IC_CaptureCallback>
 8006938:	e005      	b.n	8006946 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fadc 	bl	8006ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 faed 	bl	8006f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00c      	beq.n	8006970 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	2b00      	cmp	r3, #0
 800695e:	d007      	beq.n	8006970 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f06f 0201 	mvn.w	r2, #1
 8006968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7fa ffb6 	bl	80018dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006976:	2b00      	cmp	r3, #0
 8006978:	d104      	bne.n	8006984 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00c      	beq.n	800699e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800698a:	2b00      	cmp	r3, #0
 800698c:	d007      	beq.n	800699e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f001 f8a9 	bl	8007af0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00c      	beq.n	80069c2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d007      	beq.n	80069c2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80069ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f001 f8a1 	bl	8007b04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00c      	beq.n	80069e6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d007      	beq.n	80069e6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80069de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 faa7 	bl	8006f34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	f003 0320 	and.w	r3, r3, #32
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00c      	beq.n	8006a0a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f003 0320 	and.w	r3, r3, #32
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d007      	beq.n	8006a0a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f06f 0220 	mvn.w	r2, #32
 8006a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f001 f869 	bl	8007adc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00c      	beq.n	8006a2e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d007      	beq.n	8006a2e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f001 f875 	bl	8007b18 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00c      	beq.n	8006a52 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d007      	beq.n	8006a52 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f001 f86d 	bl	8007b2c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00c      	beq.n	8006a76 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d007      	beq.n	8006a76 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f001 f865 	bl	8007b40 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00c      	beq.n	8006a9a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d007      	beq.n	8006a9a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f001 f85d 	bl	8007b54 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a9a:	bf00      	nop
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
	...

08006aa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d101      	bne.n	8006ac2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006abe:	2302      	movs	r3, #2
 8006ac0:	e0ff      	b.n	8006cc2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b14      	cmp	r3, #20
 8006ace:	f200 80f0 	bhi.w	8006cb2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ad8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad8:	08006b2d 	.word	0x08006b2d
 8006adc:	08006cb3 	.word	0x08006cb3
 8006ae0:	08006cb3 	.word	0x08006cb3
 8006ae4:	08006cb3 	.word	0x08006cb3
 8006ae8:	08006b6d 	.word	0x08006b6d
 8006aec:	08006cb3 	.word	0x08006cb3
 8006af0:	08006cb3 	.word	0x08006cb3
 8006af4:	08006cb3 	.word	0x08006cb3
 8006af8:	08006baf 	.word	0x08006baf
 8006afc:	08006cb3 	.word	0x08006cb3
 8006b00:	08006cb3 	.word	0x08006cb3
 8006b04:	08006cb3 	.word	0x08006cb3
 8006b08:	08006bef 	.word	0x08006bef
 8006b0c:	08006cb3 	.word	0x08006cb3
 8006b10:	08006cb3 	.word	0x08006cb3
 8006b14:	08006cb3 	.word	0x08006cb3
 8006b18:	08006c31 	.word	0x08006c31
 8006b1c:	08006cb3 	.word	0x08006cb3
 8006b20:	08006cb3 	.word	0x08006cb3
 8006b24:	08006cb3 	.word	0x08006cb3
 8006b28:	08006c71 	.word	0x08006c71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68b9      	ldr	r1, [r7, #8]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 fabc 	bl	80070b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699a      	ldr	r2, [r3, #24]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f042 0208 	orr.w	r2, r2, #8
 8006b46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	699a      	ldr	r2, [r3, #24]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f022 0204 	bic.w	r2, r2, #4
 8006b56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	6999      	ldr	r1, [r3, #24]
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	691a      	ldr	r2, [r3, #16]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	430a      	orrs	r2, r1
 8006b68:	619a      	str	r2, [r3, #24]
      break;
 8006b6a:	e0a5      	b.n	8006cb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68b9      	ldr	r1, [r7, #8]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 fb36 	bl	80071e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	699a      	ldr	r2, [r3, #24]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	699a      	ldr	r2, [r3, #24]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6999      	ldr	r1, [r3, #24]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	021a      	lsls	r2, r3, #8
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	619a      	str	r2, [r3, #24]
      break;
 8006bac:	e084      	b.n	8006cb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68b9      	ldr	r1, [r7, #8]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f000 fba9 	bl	800730c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	69da      	ldr	r2, [r3, #28]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f042 0208 	orr.w	r2, r2, #8
 8006bc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	69da      	ldr	r2, [r3, #28]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 0204 	bic.w	r2, r2, #4
 8006bd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	69d9      	ldr	r1, [r3, #28]
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	691a      	ldr	r2, [r3, #16]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	430a      	orrs	r2, r1
 8006bea:	61da      	str	r2, [r3, #28]
      break;
 8006bec:	e064      	b.n	8006cb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68b9      	ldr	r1, [r7, #8]
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 fc1b 	bl	8007430 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	69da      	ldr	r2, [r3, #28]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	69da      	ldr	r2, [r3, #28]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69d9      	ldr	r1, [r3, #28]
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	021a      	lsls	r2, r3, #8
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	61da      	str	r2, [r3, #28]
      break;
 8006c2e:	e043      	b.n	8006cb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68b9      	ldr	r1, [r7, #8]
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 fc8e 	bl	8007558 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f042 0208 	orr.w	r2, r2, #8
 8006c4a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f022 0204 	bic.w	r2, r2, #4
 8006c5a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	691a      	ldr	r2, [r3, #16]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006c6e:	e023      	b.n	8006cb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68b9      	ldr	r1, [r7, #8]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 fcd8 	bl	800762c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c8a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c9a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	021a      	lsls	r2, r3, #8
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	430a      	orrs	r2, r1
 8006cae:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006cb0:	e002      	b.n	8006cb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	75fb      	strb	r3, [r7, #23]
      break;
 8006cb6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3718      	adds	r7, #24
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop

08006ccc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d101      	bne.n	8006ce8 <HAL_TIM_ConfigClockSource+0x1c>
 8006ce4:	2302      	movs	r3, #2
 8006ce6:	e0f6      	b.n	8006ed6 <HAL_TIM_ConfigClockSource+0x20a>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006d06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006d0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a6f      	ldr	r2, [pc, #444]	@ (8006ee0 <HAL_TIM_ConfigClockSource+0x214>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	f000 80c1 	beq.w	8006eaa <HAL_TIM_ConfigClockSource+0x1de>
 8006d28:	4a6d      	ldr	r2, [pc, #436]	@ (8006ee0 <HAL_TIM_ConfigClockSource+0x214>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	f200 80c6 	bhi.w	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006d30:	4a6c      	ldr	r2, [pc, #432]	@ (8006ee4 <HAL_TIM_ConfigClockSource+0x218>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	f000 80b9 	beq.w	8006eaa <HAL_TIM_ConfigClockSource+0x1de>
 8006d38:	4a6a      	ldr	r2, [pc, #424]	@ (8006ee4 <HAL_TIM_ConfigClockSource+0x218>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	f200 80be 	bhi.w	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006d40:	4a69      	ldr	r2, [pc, #420]	@ (8006ee8 <HAL_TIM_ConfigClockSource+0x21c>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	f000 80b1 	beq.w	8006eaa <HAL_TIM_ConfigClockSource+0x1de>
 8006d48:	4a67      	ldr	r2, [pc, #412]	@ (8006ee8 <HAL_TIM_ConfigClockSource+0x21c>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	f200 80b6 	bhi.w	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006d50:	4a66      	ldr	r2, [pc, #408]	@ (8006eec <HAL_TIM_ConfigClockSource+0x220>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	f000 80a9 	beq.w	8006eaa <HAL_TIM_ConfigClockSource+0x1de>
 8006d58:	4a64      	ldr	r2, [pc, #400]	@ (8006eec <HAL_TIM_ConfigClockSource+0x220>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	f200 80ae 	bhi.w	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006d60:	4a63      	ldr	r2, [pc, #396]	@ (8006ef0 <HAL_TIM_ConfigClockSource+0x224>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	f000 80a1 	beq.w	8006eaa <HAL_TIM_ConfigClockSource+0x1de>
 8006d68:	4a61      	ldr	r2, [pc, #388]	@ (8006ef0 <HAL_TIM_ConfigClockSource+0x224>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	f200 80a6 	bhi.w	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006d70:	4a60      	ldr	r2, [pc, #384]	@ (8006ef4 <HAL_TIM_ConfigClockSource+0x228>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	f000 8099 	beq.w	8006eaa <HAL_TIM_ConfigClockSource+0x1de>
 8006d78:	4a5e      	ldr	r2, [pc, #376]	@ (8006ef4 <HAL_TIM_ConfigClockSource+0x228>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	f200 809e 	bhi.w	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006d80:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006d84:	f000 8091 	beq.w	8006eaa <HAL_TIM_ConfigClockSource+0x1de>
 8006d88:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006d8c:	f200 8096 	bhi.w	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006d90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d94:	f000 8089 	beq.w	8006eaa <HAL_TIM_ConfigClockSource+0x1de>
 8006d98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d9c:	f200 808e 	bhi.w	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006da0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006da4:	d03e      	beq.n	8006e24 <HAL_TIM_ConfigClockSource+0x158>
 8006da6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006daa:	f200 8087 	bhi.w	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006dae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006db2:	f000 8086 	beq.w	8006ec2 <HAL_TIM_ConfigClockSource+0x1f6>
 8006db6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dba:	d87f      	bhi.n	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006dbc:	2b70      	cmp	r3, #112	@ 0x70
 8006dbe:	d01a      	beq.n	8006df6 <HAL_TIM_ConfigClockSource+0x12a>
 8006dc0:	2b70      	cmp	r3, #112	@ 0x70
 8006dc2:	d87b      	bhi.n	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006dc4:	2b60      	cmp	r3, #96	@ 0x60
 8006dc6:	d050      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0x19e>
 8006dc8:	2b60      	cmp	r3, #96	@ 0x60
 8006dca:	d877      	bhi.n	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006dcc:	2b50      	cmp	r3, #80	@ 0x50
 8006dce:	d03c      	beq.n	8006e4a <HAL_TIM_ConfigClockSource+0x17e>
 8006dd0:	2b50      	cmp	r3, #80	@ 0x50
 8006dd2:	d873      	bhi.n	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006dd4:	2b40      	cmp	r3, #64	@ 0x40
 8006dd6:	d058      	beq.n	8006e8a <HAL_TIM_ConfigClockSource+0x1be>
 8006dd8:	2b40      	cmp	r3, #64	@ 0x40
 8006dda:	d86f      	bhi.n	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006ddc:	2b30      	cmp	r3, #48	@ 0x30
 8006dde:	d064      	beq.n	8006eaa <HAL_TIM_ConfigClockSource+0x1de>
 8006de0:	2b30      	cmp	r3, #48	@ 0x30
 8006de2:	d86b      	bhi.n	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006de4:	2b20      	cmp	r3, #32
 8006de6:	d060      	beq.n	8006eaa <HAL_TIM_ConfigClockSource+0x1de>
 8006de8:	2b20      	cmp	r3, #32
 8006dea:	d867      	bhi.n	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d05c      	beq.n	8006eaa <HAL_TIM_ConfigClockSource+0x1de>
 8006df0:	2b10      	cmp	r3, #16
 8006df2:	d05a      	beq.n	8006eaa <HAL_TIM_ConfigClockSource+0x1de>
 8006df4:	e062      	b.n	8006ebc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e06:	f000 fcf9 	bl	80077fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006e18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	609a      	str	r2, [r3, #8]
      break;
 8006e22:	e04f      	b.n	8006ec4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e34:	f000 fce2 	bl	80077fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689a      	ldr	r2, [r3, #8]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e46:	609a      	str	r2, [r3, #8]
      break;
 8006e48:	e03c      	b.n	8006ec4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e56:	461a      	mov	r2, r3
 8006e58:	f000 fc54 	bl	8007704 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2150      	movs	r1, #80	@ 0x50
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 fcad 	bl	80077c2 <TIM_ITRx_SetConfig>
      break;
 8006e68:	e02c      	b.n	8006ec4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e76:	461a      	mov	r2, r3
 8006e78:	f000 fc73 	bl	8007762 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2160      	movs	r1, #96	@ 0x60
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 fc9d 	bl	80077c2 <TIM_ITRx_SetConfig>
      break;
 8006e88:	e01c      	b.n	8006ec4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e96:	461a      	mov	r2, r3
 8006e98:	f000 fc34 	bl	8007704 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2140      	movs	r1, #64	@ 0x40
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f000 fc8d 	bl	80077c2 <TIM_ITRx_SetConfig>
      break;
 8006ea8:	e00c      	b.n	8006ec4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	f000 fc84 	bl	80077c2 <TIM_ITRx_SetConfig>
      break;
 8006eba:	e003      	b.n	8006ec4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8006ec0:	e000      	b.n	8006ec4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006ec2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	00100070 	.word	0x00100070
 8006ee4:	00100060 	.word	0x00100060
 8006ee8:	00100050 	.word	0x00100050
 8006eec:	00100040 	.word	0x00100040
 8006ef0:	00100030 	.word	0x00100030
 8006ef4:	00100020 	.word	0x00100020

08006ef8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a4c      	ldr	r2, [pc, #304]	@ (800708c <TIM_Base_SetConfig+0x144>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d017      	beq.n	8006f90 <TIM_Base_SetConfig+0x48>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f66:	d013      	beq.n	8006f90 <TIM_Base_SetConfig+0x48>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a49      	ldr	r2, [pc, #292]	@ (8007090 <TIM_Base_SetConfig+0x148>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d00f      	beq.n	8006f90 <TIM_Base_SetConfig+0x48>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a48      	ldr	r2, [pc, #288]	@ (8007094 <TIM_Base_SetConfig+0x14c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d00b      	beq.n	8006f90 <TIM_Base_SetConfig+0x48>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a47      	ldr	r2, [pc, #284]	@ (8007098 <TIM_Base_SetConfig+0x150>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d007      	beq.n	8006f90 <TIM_Base_SetConfig+0x48>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a46      	ldr	r2, [pc, #280]	@ (800709c <TIM_Base_SetConfig+0x154>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d003      	beq.n	8006f90 <TIM_Base_SetConfig+0x48>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a45      	ldr	r2, [pc, #276]	@ (80070a0 <TIM_Base_SetConfig+0x158>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d108      	bne.n	8006fa2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a39      	ldr	r2, [pc, #228]	@ (800708c <TIM_Base_SetConfig+0x144>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d023      	beq.n	8006ff2 <TIM_Base_SetConfig+0xaa>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fb0:	d01f      	beq.n	8006ff2 <TIM_Base_SetConfig+0xaa>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a36      	ldr	r2, [pc, #216]	@ (8007090 <TIM_Base_SetConfig+0x148>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d01b      	beq.n	8006ff2 <TIM_Base_SetConfig+0xaa>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a35      	ldr	r2, [pc, #212]	@ (8007094 <TIM_Base_SetConfig+0x14c>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d017      	beq.n	8006ff2 <TIM_Base_SetConfig+0xaa>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a34      	ldr	r2, [pc, #208]	@ (8007098 <TIM_Base_SetConfig+0x150>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d013      	beq.n	8006ff2 <TIM_Base_SetConfig+0xaa>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a33      	ldr	r2, [pc, #204]	@ (800709c <TIM_Base_SetConfig+0x154>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d00f      	beq.n	8006ff2 <TIM_Base_SetConfig+0xaa>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a33      	ldr	r2, [pc, #204]	@ (80070a4 <TIM_Base_SetConfig+0x15c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d00b      	beq.n	8006ff2 <TIM_Base_SetConfig+0xaa>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a32      	ldr	r2, [pc, #200]	@ (80070a8 <TIM_Base_SetConfig+0x160>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d007      	beq.n	8006ff2 <TIM_Base_SetConfig+0xaa>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a31      	ldr	r2, [pc, #196]	@ (80070ac <TIM_Base_SetConfig+0x164>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d003      	beq.n	8006ff2 <TIM_Base_SetConfig+0xaa>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a2c      	ldr	r2, [pc, #176]	@ (80070a0 <TIM_Base_SetConfig+0x158>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d108      	bne.n	8007004 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	4313      	orrs	r3, r2
 8007002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	4313      	orrs	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	689a      	ldr	r2, [r3, #8]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a18      	ldr	r2, [pc, #96]	@ (800708c <TIM_Base_SetConfig+0x144>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d013      	beq.n	8007058 <TIM_Base_SetConfig+0x110>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a1a      	ldr	r2, [pc, #104]	@ (800709c <TIM_Base_SetConfig+0x154>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d00f      	beq.n	8007058 <TIM_Base_SetConfig+0x110>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a1a      	ldr	r2, [pc, #104]	@ (80070a4 <TIM_Base_SetConfig+0x15c>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d00b      	beq.n	8007058 <TIM_Base_SetConfig+0x110>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a19      	ldr	r2, [pc, #100]	@ (80070a8 <TIM_Base_SetConfig+0x160>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d007      	beq.n	8007058 <TIM_Base_SetConfig+0x110>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a18      	ldr	r2, [pc, #96]	@ (80070ac <TIM_Base_SetConfig+0x164>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d003      	beq.n	8007058 <TIM_Base_SetConfig+0x110>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a13      	ldr	r2, [pc, #76]	@ (80070a0 <TIM_Base_SetConfig+0x158>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d103      	bne.n	8007060 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	691a      	ldr	r2, [r3, #16]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	f003 0301 	and.w	r3, r3, #1
 800706e:	2b01      	cmp	r3, #1
 8007070:	d105      	bne.n	800707e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	f023 0201 	bic.w	r2, r3, #1
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	611a      	str	r2, [r3, #16]
  }
}
 800707e:	bf00      	nop
 8007080:	3714      	adds	r7, #20
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	40012c00 	.word	0x40012c00
 8007090:	40000400 	.word	0x40000400
 8007094:	40000800 	.word	0x40000800
 8007098:	40000c00 	.word	0x40000c00
 800709c:	40013400 	.word	0x40013400
 80070a0:	40015000 	.word	0x40015000
 80070a4:	40014000 	.word	0x40014000
 80070a8:	40014400 	.word	0x40014400
 80070ac:	40014800 	.word	0x40014800

080070b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b087      	sub	sp, #28
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a1b      	ldr	r3, [r3, #32]
 80070c4:	f023 0201 	bic.w	r2, r3, #1
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f023 0303 	bic.w	r3, r3, #3
 80070ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	f023 0302 	bic.w	r3, r3, #2
 80070fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	4313      	orrs	r3, r2
 8007106:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a30      	ldr	r2, [pc, #192]	@ (80071cc <TIM_OC1_SetConfig+0x11c>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d013      	beq.n	8007138 <TIM_OC1_SetConfig+0x88>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a2f      	ldr	r2, [pc, #188]	@ (80071d0 <TIM_OC1_SetConfig+0x120>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d00f      	beq.n	8007138 <TIM_OC1_SetConfig+0x88>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a2e      	ldr	r2, [pc, #184]	@ (80071d4 <TIM_OC1_SetConfig+0x124>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d00b      	beq.n	8007138 <TIM_OC1_SetConfig+0x88>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a2d      	ldr	r2, [pc, #180]	@ (80071d8 <TIM_OC1_SetConfig+0x128>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d007      	beq.n	8007138 <TIM_OC1_SetConfig+0x88>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a2c      	ldr	r2, [pc, #176]	@ (80071dc <TIM_OC1_SetConfig+0x12c>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d003      	beq.n	8007138 <TIM_OC1_SetConfig+0x88>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a2b      	ldr	r2, [pc, #172]	@ (80071e0 <TIM_OC1_SetConfig+0x130>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d10c      	bne.n	8007152 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	f023 0308 	bic.w	r3, r3, #8
 800713e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	4313      	orrs	r3, r2
 8007148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	f023 0304 	bic.w	r3, r3, #4
 8007150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a1d      	ldr	r2, [pc, #116]	@ (80071cc <TIM_OC1_SetConfig+0x11c>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d013      	beq.n	8007182 <TIM_OC1_SetConfig+0xd2>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a1c      	ldr	r2, [pc, #112]	@ (80071d0 <TIM_OC1_SetConfig+0x120>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d00f      	beq.n	8007182 <TIM_OC1_SetConfig+0xd2>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a1b      	ldr	r2, [pc, #108]	@ (80071d4 <TIM_OC1_SetConfig+0x124>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d00b      	beq.n	8007182 <TIM_OC1_SetConfig+0xd2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a1a      	ldr	r2, [pc, #104]	@ (80071d8 <TIM_OC1_SetConfig+0x128>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d007      	beq.n	8007182 <TIM_OC1_SetConfig+0xd2>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a19      	ldr	r2, [pc, #100]	@ (80071dc <TIM_OC1_SetConfig+0x12c>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d003      	beq.n	8007182 <TIM_OC1_SetConfig+0xd2>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a18      	ldr	r2, [pc, #96]	@ (80071e0 <TIM_OC1_SetConfig+0x130>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d111      	bne.n	80071a6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	693a      	ldr	r2, [r7, #16]
 8007198:	4313      	orrs	r3, r2
 800719a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	693a      	ldr	r2, [r7, #16]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	621a      	str	r2, [r3, #32]
}
 80071c0:	bf00      	nop
 80071c2:	371c      	adds	r7, #28
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	40012c00 	.word	0x40012c00
 80071d0:	40013400 	.word	0x40013400
 80071d4:	40014000 	.word	0x40014000
 80071d8:	40014400 	.word	0x40014400
 80071dc:	40014800 	.word	0x40014800
 80071e0:	40015000 	.word	0x40015000

080071e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b087      	sub	sp, #28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a1b      	ldr	r3, [r3, #32]
 80071f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a1b      	ldr	r3, [r3, #32]
 80071f8:	f023 0210 	bic.w	r2, r3, #16
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007212:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800721e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	021b      	lsls	r3, r3, #8
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	4313      	orrs	r3, r2
 800722a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	f023 0320 	bic.w	r3, r3, #32
 8007232:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	011b      	lsls	r3, r3, #4
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	4313      	orrs	r3, r2
 800723e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a2c      	ldr	r2, [pc, #176]	@ (80072f4 <TIM_OC2_SetConfig+0x110>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d007      	beq.n	8007258 <TIM_OC2_SetConfig+0x74>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a2b      	ldr	r2, [pc, #172]	@ (80072f8 <TIM_OC2_SetConfig+0x114>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d003      	beq.n	8007258 <TIM_OC2_SetConfig+0x74>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a2a      	ldr	r2, [pc, #168]	@ (80072fc <TIM_OC2_SetConfig+0x118>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d10d      	bne.n	8007274 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800725e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	011b      	lsls	r3, r3, #4
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	4313      	orrs	r3, r2
 800726a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007272:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a1f      	ldr	r2, [pc, #124]	@ (80072f4 <TIM_OC2_SetConfig+0x110>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d013      	beq.n	80072a4 <TIM_OC2_SetConfig+0xc0>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a1e      	ldr	r2, [pc, #120]	@ (80072f8 <TIM_OC2_SetConfig+0x114>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d00f      	beq.n	80072a4 <TIM_OC2_SetConfig+0xc0>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a1e      	ldr	r2, [pc, #120]	@ (8007300 <TIM_OC2_SetConfig+0x11c>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d00b      	beq.n	80072a4 <TIM_OC2_SetConfig+0xc0>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a1d      	ldr	r2, [pc, #116]	@ (8007304 <TIM_OC2_SetConfig+0x120>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d007      	beq.n	80072a4 <TIM_OC2_SetConfig+0xc0>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a1c      	ldr	r2, [pc, #112]	@ (8007308 <TIM_OC2_SetConfig+0x124>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d003      	beq.n	80072a4 <TIM_OC2_SetConfig+0xc0>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a17      	ldr	r2, [pc, #92]	@ (80072fc <TIM_OC2_SetConfig+0x118>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d113      	bne.n	80072cc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80072aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80072b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	695b      	ldr	r3, [r3, #20]
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	4313      	orrs	r3, r2
 80072be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	621a      	str	r2, [r3, #32]
}
 80072e6:	bf00      	nop
 80072e8:	371c      	adds	r7, #28
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	40012c00 	.word	0x40012c00
 80072f8:	40013400 	.word	0x40013400
 80072fc:	40015000 	.word	0x40015000
 8007300:	40014000 	.word	0x40014000
 8007304:	40014400 	.word	0x40014400
 8007308:	40014800 	.word	0x40014800

0800730c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800730c:	b480      	push	{r7}
 800730e:	b087      	sub	sp, #28
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a1b      	ldr	r3, [r3, #32]
 8007320:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	69db      	ldr	r3, [r3, #28]
 8007332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800733a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800733e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f023 0303 	bic.w	r3, r3, #3
 8007346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	021b      	lsls	r3, r3, #8
 8007360:	697a      	ldr	r2, [r7, #20]
 8007362:	4313      	orrs	r3, r2
 8007364:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a2b      	ldr	r2, [pc, #172]	@ (8007418 <TIM_OC3_SetConfig+0x10c>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d007      	beq.n	800737e <TIM_OC3_SetConfig+0x72>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a2a      	ldr	r2, [pc, #168]	@ (800741c <TIM_OC3_SetConfig+0x110>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d003      	beq.n	800737e <TIM_OC3_SetConfig+0x72>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a29      	ldr	r2, [pc, #164]	@ (8007420 <TIM_OC3_SetConfig+0x114>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d10d      	bne.n	800739a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007384:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	021b      	lsls	r3, r3, #8
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	4313      	orrs	r3, r2
 8007390:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007398:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a1e      	ldr	r2, [pc, #120]	@ (8007418 <TIM_OC3_SetConfig+0x10c>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d013      	beq.n	80073ca <TIM_OC3_SetConfig+0xbe>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a1d      	ldr	r2, [pc, #116]	@ (800741c <TIM_OC3_SetConfig+0x110>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d00f      	beq.n	80073ca <TIM_OC3_SetConfig+0xbe>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a1d      	ldr	r2, [pc, #116]	@ (8007424 <TIM_OC3_SetConfig+0x118>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d00b      	beq.n	80073ca <TIM_OC3_SetConfig+0xbe>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a1c      	ldr	r2, [pc, #112]	@ (8007428 <TIM_OC3_SetConfig+0x11c>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d007      	beq.n	80073ca <TIM_OC3_SetConfig+0xbe>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a1b      	ldr	r2, [pc, #108]	@ (800742c <TIM_OC3_SetConfig+0x120>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d003      	beq.n	80073ca <TIM_OC3_SetConfig+0xbe>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a16      	ldr	r2, [pc, #88]	@ (8007420 <TIM_OC3_SetConfig+0x114>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d113      	bne.n	80073f2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80073d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	695b      	ldr	r3, [r3, #20]
 80073de:	011b      	lsls	r3, r3, #4
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	011b      	lsls	r3, r3, #4
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	685a      	ldr	r2, [r3, #4]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	621a      	str	r2, [r3, #32]
}
 800740c:	bf00      	nop
 800740e:	371c      	adds	r7, #28
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	40012c00 	.word	0x40012c00
 800741c:	40013400 	.word	0x40013400
 8007420:	40015000 	.word	0x40015000
 8007424:	40014000 	.word	0x40014000
 8007428:	40014400 	.word	0x40014400
 800742c:	40014800 	.word	0x40014800

08007430 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007430:	b480      	push	{r7}
 8007432:	b087      	sub	sp, #28
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a1b      	ldr	r3, [r3, #32]
 8007444:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800745e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800746a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	021b      	lsls	r3, r3, #8
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	4313      	orrs	r3, r2
 8007476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800747e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	031b      	lsls	r3, r3, #12
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	4313      	orrs	r3, r2
 800748a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a2c      	ldr	r2, [pc, #176]	@ (8007540 <TIM_OC4_SetConfig+0x110>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d007      	beq.n	80074a4 <TIM_OC4_SetConfig+0x74>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a2b      	ldr	r2, [pc, #172]	@ (8007544 <TIM_OC4_SetConfig+0x114>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d003      	beq.n	80074a4 <TIM_OC4_SetConfig+0x74>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a2a      	ldr	r2, [pc, #168]	@ (8007548 <TIM_OC4_SetConfig+0x118>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d10d      	bne.n	80074c0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80074aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	031b      	lsls	r3, r3, #12
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a1f      	ldr	r2, [pc, #124]	@ (8007540 <TIM_OC4_SetConfig+0x110>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d013      	beq.n	80074f0 <TIM_OC4_SetConfig+0xc0>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a1e      	ldr	r2, [pc, #120]	@ (8007544 <TIM_OC4_SetConfig+0x114>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d00f      	beq.n	80074f0 <TIM_OC4_SetConfig+0xc0>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a1e      	ldr	r2, [pc, #120]	@ (800754c <TIM_OC4_SetConfig+0x11c>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d00b      	beq.n	80074f0 <TIM_OC4_SetConfig+0xc0>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a1d      	ldr	r2, [pc, #116]	@ (8007550 <TIM_OC4_SetConfig+0x120>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d007      	beq.n	80074f0 <TIM_OC4_SetConfig+0xc0>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a1c      	ldr	r2, [pc, #112]	@ (8007554 <TIM_OC4_SetConfig+0x124>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d003      	beq.n	80074f0 <TIM_OC4_SetConfig+0xc0>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a17      	ldr	r2, [pc, #92]	@ (8007548 <TIM_OC4_SetConfig+0x118>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d113      	bne.n	8007518 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074f6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80074fe:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	695b      	ldr	r3, [r3, #20]
 8007504:	019b      	lsls	r3, r3, #6
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	4313      	orrs	r3, r2
 800750a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	019b      	lsls	r3, r3, #6
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	4313      	orrs	r3, r2
 8007516:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	693a      	ldr	r2, [r7, #16]
 800751c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	685a      	ldr	r2, [r3, #4]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	621a      	str	r2, [r3, #32]
}
 8007532:	bf00      	nop
 8007534:	371c      	adds	r7, #28
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	40012c00 	.word	0x40012c00
 8007544:	40013400 	.word	0x40013400
 8007548:	40015000 	.word	0x40015000
 800754c:	40014000 	.word	0x40014000
 8007550:	40014400 	.word	0x40014400
 8007554:	40014800 	.word	0x40014800

08007558 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007558:	b480      	push	{r7}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a1b      	ldr	r3, [r3, #32]
 800756c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800757e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800758a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	4313      	orrs	r3, r2
 8007594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800759c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	041b      	lsls	r3, r3, #16
 80075a4:	693a      	ldr	r2, [r7, #16]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a19      	ldr	r2, [pc, #100]	@ (8007614 <TIM_OC5_SetConfig+0xbc>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d013      	beq.n	80075da <TIM_OC5_SetConfig+0x82>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a18      	ldr	r2, [pc, #96]	@ (8007618 <TIM_OC5_SetConfig+0xc0>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d00f      	beq.n	80075da <TIM_OC5_SetConfig+0x82>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a17      	ldr	r2, [pc, #92]	@ (800761c <TIM_OC5_SetConfig+0xc4>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d00b      	beq.n	80075da <TIM_OC5_SetConfig+0x82>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a16      	ldr	r2, [pc, #88]	@ (8007620 <TIM_OC5_SetConfig+0xc8>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d007      	beq.n	80075da <TIM_OC5_SetConfig+0x82>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a15      	ldr	r2, [pc, #84]	@ (8007624 <TIM_OC5_SetConfig+0xcc>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d003      	beq.n	80075da <TIM_OC5_SetConfig+0x82>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a14      	ldr	r2, [pc, #80]	@ (8007628 <TIM_OC5_SetConfig+0xd0>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d109      	bne.n	80075ee <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	021b      	lsls	r3, r3, #8
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	697a      	ldr	r2, [r7, #20]
 80075f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	685a      	ldr	r2, [r3, #4]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	621a      	str	r2, [r3, #32]
}
 8007608:	bf00      	nop
 800760a:	371c      	adds	r7, #28
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr
 8007614:	40012c00 	.word	0x40012c00
 8007618:	40013400 	.word	0x40013400
 800761c:	40014000 	.word	0x40014000
 8007620:	40014400 	.word	0x40014400
 8007624:	40014800 	.word	0x40014800
 8007628:	40015000 	.word	0x40015000

0800762c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800762c:	b480      	push	{r7}
 800762e:	b087      	sub	sp, #28
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a1b      	ldr	r3, [r3, #32]
 8007640:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800765a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800765e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	021b      	lsls	r3, r3, #8
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	4313      	orrs	r3, r2
 800766a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007672:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	051b      	lsls	r3, r3, #20
 800767a:	693a      	ldr	r2, [r7, #16]
 800767c:	4313      	orrs	r3, r2
 800767e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a1a      	ldr	r2, [pc, #104]	@ (80076ec <TIM_OC6_SetConfig+0xc0>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d013      	beq.n	80076b0 <TIM_OC6_SetConfig+0x84>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a19      	ldr	r2, [pc, #100]	@ (80076f0 <TIM_OC6_SetConfig+0xc4>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d00f      	beq.n	80076b0 <TIM_OC6_SetConfig+0x84>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a18      	ldr	r2, [pc, #96]	@ (80076f4 <TIM_OC6_SetConfig+0xc8>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d00b      	beq.n	80076b0 <TIM_OC6_SetConfig+0x84>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a17      	ldr	r2, [pc, #92]	@ (80076f8 <TIM_OC6_SetConfig+0xcc>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d007      	beq.n	80076b0 <TIM_OC6_SetConfig+0x84>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a16      	ldr	r2, [pc, #88]	@ (80076fc <TIM_OC6_SetConfig+0xd0>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d003      	beq.n	80076b0 <TIM_OC6_SetConfig+0x84>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a15      	ldr	r2, [pc, #84]	@ (8007700 <TIM_OC6_SetConfig+0xd4>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d109      	bne.n	80076c4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80076b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	695b      	ldr	r3, [r3, #20]
 80076bc:	029b      	lsls	r3, r3, #10
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	697a      	ldr	r2, [r7, #20]
 80076c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	685a      	ldr	r2, [r3, #4]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	621a      	str	r2, [r3, #32]
}
 80076de:	bf00      	nop
 80076e0:	371c      	adds	r7, #28
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	40012c00 	.word	0x40012c00
 80076f0:	40013400 	.word	0x40013400
 80076f4:	40014000 	.word	0x40014000
 80076f8:	40014400 	.word	0x40014400
 80076fc:	40014800 	.word	0x40014800
 8007700:	40015000 	.word	0x40015000

08007704 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007704:	b480      	push	{r7}
 8007706:	b087      	sub	sp, #28
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6a1b      	ldr	r3, [r3, #32]
 8007714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6a1b      	ldr	r3, [r3, #32]
 800771a:	f023 0201 	bic.w	r2, r3, #1
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800772e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	011b      	lsls	r3, r3, #4
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	4313      	orrs	r3, r2
 8007738:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	f023 030a 	bic.w	r3, r3, #10
 8007740:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007742:	697a      	ldr	r2, [r7, #20]
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	4313      	orrs	r3, r2
 8007748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	693a      	ldr	r2, [r7, #16]
 800774e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	697a      	ldr	r2, [r7, #20]
 8007754:	621a      	str	r2, [r3, #32]
}
 8007756:	bf00      	nop
 8007758:	371c      	adds	r7, #28
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr

08007762 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007762:	b480      	push	{r7}
 8007764:	b087      	sub	sp, #28
 8007766:	af00      	add	r7, sp, #0
 8007768:	60f8      	str	r0, [r7, #12]
 800776a:	60b9      	str	r1, [r7, #8]
 800776c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6a1b      	ldr	r3, [r3, #32]
 8007778:	f023 0210 	bic.w	r2, r3, #16
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800778c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	031b      	lsls	r3, r3, #12
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	4313      	orrs	r3, r2
 8007796:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800779e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	011b      	lsls	r3, r3, #4
 80077a4:	697a      	ldr	r2, [r7, #20]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	621a      	str	r2, [r3, #32]
}
 80077b6:	bf00      	nop
 80077b8:	371c      	adds	r7, #28
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr

080077c2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b085      	sub	sp, #20
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
 80077ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80077d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077de:	683a      	ldr	r2, [r7, #0]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	f043 0307 	orr.w	r3, r3, #7
 80077e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	609a      	str	r2, [r3, #8]
}
 80077f0:	bf00      	nop
 80077f2:	3714      	adds	r7, #20
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b087      	sub	sp, #28
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
 8007808:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007816:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	021a      	lsls	r2, r3, #8
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	431a      	orrs	r2, r3
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	4313      	orrs	r3, r2
 8007824:	697a      	ldr	r2, [r7, #20]
 8007826:	4313      	orrs	r3, r2
 8007828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	697a      	ldr	r2, [r7, #20]
 800782e:	609a      	str	r2, [r3, #8]
}
 8007830:	bf00      	nop
 8007832:	371c      	adds	r7, #28
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800783c:	b480      	push	{r7}
 800783e:	b087      	sub	sp, #28
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	f003 031f 	and.w	r3, r3, #31
 800784e:	2201      	movs	r2, #1
 8007850:	fa02 f303 	lsl.w	r3, r2, r3
 8007854:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6a1a      	ldr	r2, [r3, #32]
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	43db      	mvns	r3, r3
 800785e:	401a      	ands	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6a1a      	ldr	r2, [r3, #32]
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	f003 031f 	and.w	r3, r3, #31
 800786e:	6879      	ldr	r1, [r7, #4]
 8007870:	fa01 f303 	lsl.w	r3, r1, r3
 8007874:	431a      	orrs	r2, r3
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	621a      	str	r2, [r3, #32]
}
 800787a:	bf00      	nop
 800787c:	371c      	adds	r7, #28
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
	...

08007888 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007898:	2b01      	cmp	r3, #1
 800789a:	d101      	bne.n	80078a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800789c:	2302      	movs	r3, #2
 800789e:	e074      	b.n	800798a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2202      	movs	r2, #2
 80078ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a34      	ldr	r2, [pc, #208]	@ (8007998 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d009      	beq.n	80078de <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a33      	ldr	r2, [pc, #204]	@ (800799c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d004      	beq.n	80078de <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a31      	ldr	r2, [pc, #196]	@ (80079a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d108      	bne.n	80078f0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80078e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80078f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	4313      	orrs	r3, r2
 8007904:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a21      	ldr	r2, [pc, #132]	@ (8007998 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d022      	beq.n	800795e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007920:	d01d      	beq.n	800795e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a1f      	ldr	r2, [pc, #124]	@ (80079a4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d018      	beq.n	800795e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a1d      	ldr	r2, [pc, #116]	@ (80079a8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d013      	beq.n	800795e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a1c      	ldr	r2, [pc, #112]	@ (80079ac <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d00e      	beq.n	800795e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a15      	ldr	r2, [pc, #84]	@ (800799c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d009      	beq.n	800795e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a18      	ldr	r2, [pc, #96]	@ (80079b0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d004      	beq.n	800795e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a11      	ldr	r2, [pc, #68]	@ (80079a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d10c      	bne.n	8007978 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007964:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	4313      	orrs	r3, r2
 800796e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68ba      	ldr	r2, [r7, #8]
 8007976:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3714      	adds	r7, #20
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	40012c00 	.word	0x40012c00
 800799c:	40013400 	.word	0x40013400
 80079a0:	40015000 	.word	0x40015000
 80079a4:	40000400 	.word	0x40000400
 80079a8:	40000800 	.word	0x40000800
 80079ac:	40000c00 	.word	0x40000c00
 80079b0:	40014000 	.word	0x40014000

080079b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80079be:	2300      	movs	r3, #0
 80079c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d101      	bne.n	80079d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80079cc:	2302      	movs	r3, #2
 80079ce:	e078      	b.n	8007ac2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	695b      	ldr	r3, [r3, #20]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a36:	4313      	orrs	r3, r2
 8007a38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	699b      	ldr	r3, [r3, #24]
 8007a44:	041b      	lsls	r3, r3, #16
 8007a46:	4313      	orrs	r3, r2
 8007a48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	69db      	ldr	r3, [r3, #28]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8007ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d009      	beq.n	8007a76 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a1b      	ldr	r2, [pc, #108]	@ (8007ad4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d004      	beq.n	8007a76 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a19      	ldr	r2, [pc, #100]	@ (8007ad8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d11c      	bne.n	8007ab0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a80:	051b      	lsls	r3, r3, #20
 8007a82:	4313      	orrs	r3, r2
 8007a84:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aac:	4313      	orrs	r3, r2
 8007aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	40012c00 	.word	0x40012c00
 8007ad4:	40013400 	.word	0x40013400
 8007ad8:	40015000 	.word	0x40015000

08007adc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ae4:	bf00      	nop
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d101      	bne.n	8007b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e042      	b.n	8007c00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d106      	bne.n	8007b92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f7fa fc89 	bl	80024a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2224      	movs	r2, #36	@ 0x24
 8007b96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f022 0201 	bic.w	r2, r2, #1
 8007ba8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d002      	beq.n	8007bb8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fb24 	bl	8008200 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f825 	bl	8007c08 <UART_SetConfig>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d101      	bne.n	8007bc8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e01b      	b.n	8007c00 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	685a      	ldr	r2, [r3, #4]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007bd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	689a      	ldr	r2, [r3, #8]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007be6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f042 0201 	orr.w	r2, r2, #1
 8007bf6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fba3 	bl	8008344 <UART_CheckIdleState>
 8007bfe:	4603      	mov	r3, r0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c0c:	b08c      	sub	sp, #48	@ 0x30
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	689a      	ldr	r2, [r3, #8]
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	431a      	orrs	r2, r3
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	431a      	orrs	r2, r3
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	69db      	ldr	r3, [r3, #28]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	4baa      	ldr	r3, [pc, #680]	@ (8007ee0 <UART_SetConfig+0x2d8>)
 8007c38:	4013      	ands	r3, r2
 8007c3a:	697a      	ldr	r2, [r7, #20]
 8007c3c:	6812      	ldr	r2, [r2, #0]
 8007c3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c40:	430b      	orrs	r3, r1
 8007c42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	68da      	ldr	r2, [r3, #12]
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	430a      	orrs	r2, r1
 8007c58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a9f      	ldr	r2, [pc, #636]	@ (8007ee4 <UART_SetConfig+0x2dc>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d004      	beq.n	8007c74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
 8007c6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c70:	4313      	orrs	r3, r2
 8007c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007c7e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007c82:	697a      	ldr	r2, [r7, #20]
 8007c84:	6812      	ldr	r2, [r2, #0]
 8007c86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c88:	430b      	orrs	r3, r1
 8007c8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c92:	f023 010f 	bic.w	r1, r3, #15
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a90      	ldr	r2, [pc, #576]	@ (8007ee8 <UART_SetConfig+0x2e0>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d125      	bne.n	8007cf8 <UART_SetConfig+0xf0>
 8007cac:	4b8f      	ldr	r3, [pc, #572]	@ (8007eec <UART_SetConfig+0x2e4>)
 8007cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cb2:	f003 0303 	and.w	r3, r3, #3
 8007cb6:	2b03      	cmp	r3, #3
 8007cb8:	d81a      	bhi.n	8007cf0 <UART_SetConfig+0xe8>
 8007cba:	a201      	add	r2, pc, #4	@ (adr r2, 8007cc0 <UART_SetConfig+0xb8>)
 8007cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc0:	08007cd1 	.word	0x08007cd1
 8007cc4:	08007ce1 	.word	0x08007ce1
 8007cc8:	08007cd9 	.word	0x08007cd9
 8007ccc:	08007ce9 	.word	0x08007ce9
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cd6:	e116      	b.n	8007f06 <UART_SetConfig+0x2fe>
 8007cd8:	2302      	movs	r3, #2
 8007cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cde:	e112      	b.n	8007f06 <UART_SetConfig+0x2fe>
 8007ce0:	2304      	movs	r3, #4
 8007ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ce6:	e10e      	b.n	8007f06 <UART_SetConfig+0x2fe>
 8007ce8:	2308      	movs	r3, #8
 8007cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cee:	e10a      	b.n	8007f06 <UART_SetConfig+0x2fe>
 8007cf0:	2310      	movs	r3, #16
 8007cf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cf6:	e106      	b.n	8007f06 <UART_SetConfig+0x2fe>
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a7c      	ldr	r2, [pc, #496]	@ (8007ef0 <UART_SetConfig+0x2e8>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d138      	bne.n	8007d74 <UART_SetConfig+0x16c>
 8007d02:	4b7a      	ldr	r3, [pc, #488]	@ (8007eec <UART_SetConfig+0x2e4>)
 8007d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d08:	f003 030c 	and.w	r3, r3, #12
 8007d0c:	2b0c      	cmp	r3, #12
 8007d0e:	d82d      	bhi.n	8007d6c <UART_SetConfig+0x164>
 8007d10:	a201      	add	r2, pc, #4	@ (adr r2, 8007d18 <UART_SetConfig+0x110>)
 8007d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d16:	bf00      	nop
 8007d18:	08007d4d 	.word	0x08007d4d
 8007d1c:	08007d6d 	.word	0x08007d6d
 8007d20:	08007d6d 	.word	0x08007d6d
 8007d24:	08007d6d 	.word	0x08007d6d
 8007d28:	08007d5d 	.word	0x08007d5d
 8007d2c:	08007d6d 	.word	0x08007d6d
 8007d30:	08007d6d 	.word	0x08007d6d
 8007d34:	08007d6d 	.word	0x08007d6d
 8007d38:	08007d55 	.word	0x08007d55
 8007d3c:	08007d6d 	.word	0x08007d6d
 8007d40:	08007d6d 	.word	0x08007d6d
 8007d44:	08007d6d 	.word	0x08007d6d
 8007d48:	08007d65 	.word	0x08007d65
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d52:	e0d8      	b.n	8007f06 <UART_SetConfig+0x2fe>
 8007d54:	2302      	movs	r3, #2
 8007d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d5a:	e0d4      	b.n	8007f06 <UART_SetConfig+0x2fe>
 8007d5c:	2304      	movs	r3, #4
 8007d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d62:	e0d0      	b.n	8007f06 <UART_SetConfig+0x2fe>
 8007d64:	2308      	movs	r3, #8
 8007d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d6a:	e0cc      	b.n	8007f06 <UART_SetConfig+0x2fe>
 8007d6c:	2310      	movs	r3, #16
 8007d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d72:	e0c8      	b.n	8007f06 <UART_SetConfig+0x2fe>
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a5e      	ldr	r2, [pc, #376]	@ (8007ef4 <UART_SetConfig+0x2ec>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d125      	bne.n	8007dca <UART_SetConfig+0x1c2>
 8007d7e:	4b5b      	ldr	r3, [pc, #364]	@ (8007eec <UART_SetConfig+0x2e4>)
 8007d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d84:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007d88:	2b30      	cmp	r3, #48	@ 0x30
 8007d8a:	d016      	beq.n	8007dba <UART_SetConfig+0x1b2>
 8007d8c:	2b30      	cmp	r3, #48	@ 0x30
 8007d8e:	d818      	bhi.n	8007dc2 <UART_SetConfig+0x1ba>
 8007d90:	2b20      	cmp	r3, #32
 8007d92:	d00a      	beq.n	8007daa <UART_SetConfig+0x1a2>
 8007d94:	2b20      	cmp	r3, #32
 8007d96:	d814      	bhi.n	8007dc2 <UART_SetConfig+0x1ba>
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d002      	beq.n	8007da2 <UART_SetConfig+0x19a>
 8007d9c:	2b10      	cmp	r3, #16
 8007d9e:	d008      	beq.n	8007db2 <UART_SetConfig+0x1aa>
 8007da0:	e00f      	b.n	8007dc2 <UART_SetConfig+0x1ba>
 8007da2:	2300      	movs	r3, #0
 8007da4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007da8:	e0ad      	b.n	8007f06 <UART_SetConfig+0x2fe>
 8007daa:	2302      	movs	r3, #2
 8007dac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007db0:	e0a9      	b.n	8007f06 <UART_SetConfig+0x2fe>
 8007db2:	2304      	movs	r3, #4
 8007db4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007db8:	e0a5      	b.n	8007f06 <UART_SetConfig+0x2fe>
 8007dba:	2308      	movs	r3, #8
 8007dbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dc0:	e0a1      	b.n	8007f06 <UART_SetConfig+0x2fe>
 8007dc2:	2310      	movs	r3, #16
 8007dc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dc8:	e09d      	b.n	8007f06 <UART_SetConfig+0x2fe>
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a4a      	ldr	r2, [pc, #296]	@ (8007ef8 <UART_SetConfig+0x2f0>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d125      	bne.n	8007e20 <UART_SetConfig+0x218>
 8007dd4:	4b45      	ldr	r3, [pc, #276]	@ (8007eec <UART_SetConfig+0x2e4>)
 8007dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dda:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007dde:	2bc0      	cmp	r3, #192	@ 0xc0
 8007de0:	d016      	beq.n	8007e10 <UART_SetConfig+0x208>
 8007de2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007de4:	d818      	bhi.n	8007e18 <UART_SetConfig+0x210>
 8007de6:	2b80      	cmp	r3, #128	@ 0x80
 8007de8:	d00a      	beq.n	8007e00 <UART_SetConfig+0x1f8>
 8007dea:	2b80      	cmp	r3, #128	@ 0x80
 8007dec:	d814      	bhi.n	8007e18 <UART_SetConfig+0x210>
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d002      	beq.n	8007df8 <UART_SetConfig+0x1f0>
 8007df2:	2b40      	cmp	r3, #64	@ 0x40
 8007df4:	d008      	beq.n	8007e08 <UART_SetConfig+0x200>
 8007df6:	e00f      	b.n	8007e18 <UART_SetConfig+0x210>
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dfe:	e082      	b.n	8007f06 <UART_SetConfig+0x2fe>
 8007e00:	2302      	movs	r3, #2
 8007e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e06:	e07e      	b.n	8007f06 <UART_SetConfig+0x2fe>
 8007e08:	2304      	movs	r3, #4
 8007e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e0e:	e07a      	b.n	8007f06 <UART_SetConfig+0x2fe>
 8007e10:	2308      	movs	r3, #8
 8007e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e16:	e076      	b.n	8007f06 <UART_SetConfig+0x2fe>
 8007e18:	2310      	movs	r3, #16
 8007e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e1e:	e072      	b.n	8007f06 <UART_SetConfig+0x2fe>
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a35      	ldr	r2, [pc, #212]	@ (8007efc <UART_SetConfig+0x2f4>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d12a      	bne.n	8007e80 <UART_SetConfig+0x278>
 8007e2a:	4b30      	ldr	r3, [pc, #192]	@ (8007eec <UART_SetConfig+0x2e4>)
 8007e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e38:	d01a      	beq.n	8007e70 <UART_SetConfig+0x268>
 8007e3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e3e:	d81b      	bhi.n	8007e78 <UART_SetConfig+0x270>
 8007e40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e44:	d00c      	beq.n	8007e60 <UART_SetConfig+0x258>
 8007e46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e4a:	d815      	bhi.n	8007e78 <UART_SetConfig+0x270>
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d003      	beq.n	8007e58 <UART_SetConfig+0x250>
 8007e50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e54:	d008      	beq.n	8007e68 <UART_SetConfig+0x260>
 8007e56:	e00f      	b.n	8007e78 <UART_SetConfig+0x270>
 8007e58:	2300      	movs	r3, #0
 8007e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e5e:	e052      	b.n	8007f06 <UART_SetConfig+0x2fe>
 8007e60:	2302      	movs	r3, #2
 8007e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e66:	e04e      	b.n	8007f06 <UART_SetConfig+0x2fe>
 8007e68:	2304      	movs	r3, #4
 8007e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e6e:	e04a      	b.n	8007f06 <UART_SetConfig+0x2fe>
 8007e70:	2308      	movs	r3, #8
 8007e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e76:	e046      	b.n	8007f06 <UART_SetConfig+0x2fe>
 8007e78:	2310      	movs	r3, #16
 8007e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e7e:	e042      	b.n	8007f06 <UART_SetConfig+0x2fe>
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a17      	ldr	r2, [pc, #92]	@ (8007ee4 <UART_SetConfig+0x2dc>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d13a      	bne.n	8007f00 <UART_SetConfig+0x2f8>
 8007e8a:	4b18      	ldr	r3, [pc, #96]	@ (8007eec <UART_SetConfig+0x2e4>)
 8007e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007e94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e98:	d01a      	beq.n	8007ed0 <UART_SetConfig+0x2c8>
 8007e9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e9e:	d81b      	bhi.n	8007ed8 <UART_SetConfig+0x2d0>
 8007ea0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ea4:	d00c      	beq.n	8007ec0 <UART_SetConfig+0x2b8>
 8007ea6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007eaa:	d815      	bhi.n	8007ed8 <UART_SetConfig+0x2d0>
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d003      	beq.n	8007eb8 <UART_SetConfig+0x2b0>
 8007eb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007eb4:	d008      	beq.n	8007ec8 <UART_SetConfig+0x2c0>
 8007eb6:	e00f      	b.n	8007ed8 <UART_SetConfig+0x2d0>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ebe:	e022      	b.n	8007f06 <UART_SetConfig+0x2fe>
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ec6:	e01e      	b.n	8007f06 <UART_SetConfig+0x2fe>
 8007ec8:	2304      	movs	r3, #4
 8007eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ece:	e01a      	b.n	8007f06 <UART_SetConfig+0x2fe>
 8007ed0:	2308      	movs	r3, #8
 8007ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ed6:	e016      	b.n	8007f06 <UART_SetConfig+0x2fe>
 8007ed8:	2310      	movs	r3, #16
 8007eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ede:	e012      	b.n	8007f06 <UART_SetConfig+0x2fe>
 8007ee0:	cfff69f3 	.word	0xcfff69f3
 8007ee4:	40008000 	.word	0x40008000
 8007ee8:	40013800 	.word	0x40013800
 8007eec:	40021000 	.word	0x40021000
 8007ef0:	40004400 	.word	0x40004400
 8007ef4:	40004800 	.word	0x40004800
 8007ef8:	40004c00 	.word	0x40004c00
 8007efc:	40005000 	.word	0x40005000
 8007f00:	2310      	movs	r3, #16
 8007f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4aae      	ldr	r2, [pc, #696]	@ (80081c4 <UART_SetConfig+0x5bc>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	f040 8097 	bne.w	8008040 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007f16:	2b08      	cmp	r3, #8
 8007f18:	d823      	bhi.n	8007f62 <UART_SetConfig+0x35a>
 8007f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f20 <UART_SetConfig+0x318>)
 8007f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f20:	08007f45 	.word	0x08007f45
 8007f24:	08007f63 	.word	0x08007f63
 8007f28:	08007f4d 	.word	0x08007f4d
 8007f2c:	08007f63 	.word	0x08007f63
 8007f30:	08007f53 	.word	0x08007f53
 8007f34:	08007f63 	.word	0x08007f63
 8007f38:	08007f63 	.word	0x08007f63
 8007f3c:	08007f63 	.word	0x08007f63
 8007f40:	08007f5b 	.word	0x08007f5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f44:	f7fd fdb6 	bl	8005ab4 <HAL_RCC_GetPCLK1Freq>
 8007f48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f4a:	e010      	b.n	8007f6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f4c:	4b9e      	ldr	r3, [pc, #632]	@ (80081c8 <UART_SetConfig+0x5c0>)
 8007f4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007f50:	e00d      	b.n	8007f6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f52:	f7fd fd41 	bl	80059d8 <HAL_RCC_GetSysClockFreq>
 8007f56:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f58:	e009      	b.n	8007f6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007f60:	e005      	b.n	8007f6e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007f62:	2300      	movs	r3, #0
 8007f64:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007f6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f000 8130 	beq.w	80081d6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f7a:	4a94      	ldr	r2, [pc, #592]	@ (80081cc <UART_SetConfig+0x5c4>)
 8007f7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f80:	461a      	mov	r2, r3
 8007f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f84:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f88:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	685a      	ldr	r2, [r3, #4]
 8007f8e:	4613      	mov	r3, r2
 8007f90:	005b      	lsls	r3, r3, #1
 8007f92:	4413      	add	r3, r2
 8007f94:	69ba      	ldr	r2, [r7, #24]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d305      	bcc.n	8007fa6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fa0:	69ba      	ldr	r2, [r7, #24]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d903      	bls.n	8007fae <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007fac:	e113      	b.n	80081d6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	60bb      	str	r3, [r7, #8]
 8007fb4:	60fa      	str	r2, [r7, #12]
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fba:	4a84      	ldr	r2, [pc, #528]	@ (80081cc <UART_SetConfig+0x5c4>)
 8007fbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	603b      	str	r3, [r7, #0]
 8007fc6:	607a      	str	r2, [r7, #4]
 8007fc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fcc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007fd0:	f7f8 fe10 	bl	8000bf4 <__aeabi_uldivmod>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	4610      	mov	r0, r2
 8007fda:	4619      	mov	r1, r3
 8007fdc:	f04f 0200 	mov.w	r2, #0
 8007fe0:	f04f 0300 	mov.w	r3, #0
 8007fe4:	020b      	lsls	r3, r1, #8
 8007fe6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007fea:	0202      	lsls	r2, r0, #8
 8007fec:	6979      	ldr	r1, [r7, #20]
 8007fee:	6849      	ldr	r1, [r1, #4]
 8007ff0:	0849      	lsrs	r1, r1, #1
 8007ff2:	2000      	movs	r0, #0
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	4605      	mov	r5, r0
 8007ff8:	eb12 0804 	adds.w	r8, r2, r4
 8007ffc:	eb43 0905 	adc.w	r9, r3, r5
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	469a      	mov	sl, r3
 8008008:	4693      	mov	fp, r2
 800800a:	4652      	mov	r2, sl
 800800c:	465b      	mov	r3, fp
 800800e:	4640      	mov	r0, r8
 8008010:	4649      	mov	r1, r9
 8008012:	f7f8 fdef 	bl	8000bf4 <__aeabi_uldivmod>
 8008016:	4602      	mov	r2, r0
 8008018:	460b      	mov	r3, r1
 800801a:	4613      	mov	r3, r2
 800801c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800801e:	6a3b      	ldr	r3, [r7, #32]
 8008020:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008024:	d308      	bcc.n	8008038 <UART_SetConfig+0x430>
 8008026:	6a3b      	ldr	r3, [r7, #32]
 8008028:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800802c:	d204      	bcs.n	8008038 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	6a3a      	ldr	r2, [r7, #32]
 8008034:	60da      	str	r2, [r3, #12]
 8008036:	e0ce      	b.n	80081d6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800803e:	e0ca      	b.n	80081d6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	69db      	ldr	r3, [r3, #28]
 8008044:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008048:	d166      	bne.n	8008118 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800804a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800804e:	2b08      	cmp	r3, #8
 8008050:	d827      	bhi.n	80080a2 <UART_SetConfig+0x49a>
 8008052:	a201      	add	r2, pc, #4	@ (adr r2, 8008058 <UART_SetConfig+0x450>)
 8008054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008058:	0800807d 	.word	0x0800807d
 800805c:	08008085 	.word	0x08008085
 8008060:	0800808d 	.word	0x0800808d
 8008064:	080080a3 	.word	0x080080a3
 8008068:	08008093 	.word	0x08008093
 800806c:	080080a3 	.word	0x080080a3
 8008070:	080080a3 	.word	0x080080a3
 8008074:	080080a3 	.word	0x080080a3
 8008078:	0800809b 	.word	0x0800809b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800807c:	f7fd fd1a 	bl	8005ab4 <HAL_RCC_GetPCLK1Freq>
 8008080:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008082:	e014      	b.n	80080ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008084:	f7fd fd2c 	bl	8005ae0 <HAL_RCC_GetPCLK2Freq>
 8008088:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800808a:	e010      	b.n	80080ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800808c:	4b4e      	ldr	r3, [pc, #312]	@ (80081c8 <UART_SetConfig+0x5c0>)
 800808e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008090:	e00d      	b.n	80080ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008092:	f7fd fca1 	bl	80059d8 <HAL_RCC_GetSysClockFreq>
 8008096:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008098:	e009      	b.n	80080ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800809a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800809e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80080a0:	e005      	b.n	80080ae <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80080a2:	2300      	movs	r3, #0
 80080a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80080ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80080ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f000 8090 	beq.w	80081d6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ba:	4a44      	ldr	r2, [pc, #272]	@ (80081cc <UART_SetConfig+0x5c4>)
 80080bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080c0:	461a      	mov	r2, r3
 80080c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80080c8:	005a      	lsls	r2, r3, #1
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	085b      	lsrs	r3, r3, #1
 80080d0:	441a      	add	r2, r3
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080dc:	6a3b      	ldr	r3, [r7, #32]
 80080de:	2b0f      	cmp	r3, #15
 80080e0:	d916      	bls.n	8008110 <UART_SetConfig+0x508>
 80080e2:	6a3b      	ldr	r3, [r7, #32]
 80080e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080e8:	d212      	bcs.n	8008110 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080ea:	6a3b      	ldr	r3, [r7, #32]
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	f023 030f 	bic.w	r3, r3, #15
 80080f2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080f4:	6a3b      	ldr	r3, [r7, #32]
 80080f6:	085b      	lsrs	r3, r3, #1
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	f003 0307 	and.w	r3, r3, #7
 80080fe:	b29a      	uxth	r2, r3
 8008100:	8bfb      	ldrh	r3, [r7, #30]
 8008102:	4313      	orrs	r3, r2
 8008104:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	8bfa      	ldrh	r2, [r7, #30]
 800810c:	60da      	str	r2, [r3, #12]
 800810e:	e062      	b.n	80081d6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008116:	e05e      	b.n	80081d6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008118:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800811c:	2b08      	cmp	r3, #8
 800811e:	d828      	bhi.n	8008172 <UART_SetConfig+0x56a>
 8008120:	a201      	add	r2, pc, #4	@ (adr r2, 8008128 <UART_SetConfig+0x520>)
 8008122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008126:	bf00      	nop
 8008128:	0800814d 	.word	0x0800814d
 800812c:	08008155 	.word	0x08008155
 8008130:	0800815d 	.word	0x0800815d
 8008134:	08008173 	.word	0x08008173
 8008138:	08008163 	.word	0x08008163
 800813c:	08008173 	.word	0x08008173
 8008140:	08008173 	.word	0x08008173
 8008144:	08008173 	.word	0x08008173
 8008148:	0800816b 	.word	0x0800816b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800814c:	f7fd fcb2 	bl	8005ab4 <HAL_RCC_GetPCLK1Freq>
 8008150:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008152:	e014      	b.n	800817e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008154:	f7fd fcc4 	bl	8005ae0 <HAL_RCC_GetPCLK2Freq>
 8008158:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800815a:	e010      	b.n	800817e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800815c:	4b1a      	ldr	r3, [pc, #104]	@ (80081c8 <UART_SetConfig+0x5c0>)
 800815e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008160:	e00d      	b.n	800817e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008162:	f7fd fc39 	bl	80059d8 <HAL_RCC_GetSysClockFreq>
 8008166:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008168:	e009      	b.n	800817e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800816a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800816e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008170:	e005      	b.n	800817e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008172:	2300      	movs	r3, #0
 8008174:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800817c:	bf00      	nop
    }

    if (pclk != 0U)
 800817e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008180:	2b00      	cmp	r3, #0
 8008182:	d028      	beq.n	80081d6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008188:	4a10      	ldr	r2, [pc, #64]	@ (80081cc <UART_SetConfig+0x5c4>)
 800818a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800818e:	461a      	mov	r2, r3
 8008190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008192:	fbb3 f2f2 	udiv	r2, r3, r2
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	085b      	lsrs	r3, r3, #1
 800819c:	441a      	add	r2, r3
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081a8:	6a3b      	ldr	r3, [r7, #32]
 80081aa:	2b0f      	cmp	r3, #15
 80081ac:	d910      	bls.n	80081d0 <UART_SetConfig+0x5c8>
 80081ae:	6a3b      	ldr	r3, [r7, #32]
 80081b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081b4:	d20c      	bcs.n	80081d0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80081b6:	6a3b      	ldr	r3, [r7, #32]
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	60da      	str	r2, [r3, #12]
 80081c0:	e009      	b.n	80081d6 <UART_SetConfig+0x5ce>
 80081c2:	bf00      	nop
 80081c4:	40008000 	.word	0x40008000
 80081c8:	00f42400 	.word	0x00f42400
 80081cc:	080088cc 	.word	0x080088cc
      }
      else
      {
        ret = HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	2201      	movs	r2, #1
 80081da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	2201      	movs	r2, #1
 80081e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	2200      	movs	r2, #0
 80081ea:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	2200      	movs	r2, #0
 80081f0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80081f2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3730      	adds	r7, #48	@ 0x30
 80081fa:	46bd      	mov	sp, r7
 80081fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008200 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800820c:	f003 0308 	and.w	r3, r3, #8
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00a      	beq.n	800822a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	430a      	orrs	r2, r1
 8008228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800822e:	f003 0301 	and.w	r3, r3, #1
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00a      	beq.n	800824c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	430a      	orrs	r2, r1
 800824a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008250:	f003 0302 	and.w	r3, r3, #2
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00a      	beq.n	800826e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	430a      	orrs	r2, r1
 800826c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008272:	f003 0304 	and.w	r3, r3, #4
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00a      	beq.n	8008290 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	430a      	orrs	r2, r1
 800828e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008294:	f003 0310 	and.w	r3, r3, #16
 8008298:	2b00      	cmp	r3, #0
 800829a:	d00a      	beq.n	80082b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	430a      	orrs	r2, r1
 80082b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082b6:	f003 0320 	and.w	r3, r3, #32
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00a      	beq.n	80082d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	430a      	orrs	r2, r1
 80082d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d01a      	beq.n	8008316 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	430a      	orrs	r2, r1
 80082f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082fe:	d10a      	bne.n	8008316 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	430a      	orrs	r2, r1
 8008314:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800831a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00a      	beq.n	8008338 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	430a      	orrs	r2, r1
 8008336:	605a      	str	r2, [r3, #4]
  }
}
 8008338:	bf00      	nop
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b098      	sub	sp, #96	@ 0x60
 8008348:	af02      	add	r7, sp, #8
 800834a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008354:	f7fa fac4 	bl	80028e0 <HAL_GetTick>
 8008358:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f003 0308 	and.w	r3, r3, #8
 8008364:	2b08      	cmp	r3, #8
 8008366:	d12f      	bne.n	80083c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008368:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008370:	2200      	movs	r2, #0
 8008372:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f88e 	bl	8008498 <UART_WaitOnFlagUntilTimeout>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d022      	beq.n	80083c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800838a:	e853 3f00 	ldrex	r3, [r3]
 800838e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008392:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008396:	653b      	str	r3, [r7, #80]	@ 0x50
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	461a      	mov	r2, r3
 800839e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80083a2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80083a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083a8:	e841 2300 	strex	r3, r2, [r1]
 80083ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80083ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d1e6      	bne.n	8008382 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2220      	movs	r2, #32
 80083b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083c4:	2303      	movs	r3, #3
 80083c6:	e063      	b.n	8008490 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 0304 	and.w	r3, r3, #4
 80083d2:	2b04      	cmp	r3, #4
 80083d4:	d149      	bne.n	800846a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80083da:	9300      	str	r3, [sp, #0]
 80083dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083de:	2200      	movs	r2, #0
 80083e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 f857 	bl	8008498 <UART_WaitOnFlagUntilTimeout>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d03c      	beq.n	800846a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f8:	e853 3f00 	ldrex	r3, [r3]
 80083fc:	623b      	str	r3, [r7, #32]
   return(result);
 80083fe:	6a3b      	ldr	r3, [r7, #32]
 8008400:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008404:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	461a      	mov	r2, r3
 800840c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800840e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008410:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008412:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008414:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008416:	e841 2300 	strex	r3, r2, [r1]
 800841a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800841c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1e6      	bne.n	80083f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	3308      	adds	r3, #8
 8008428:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	e853 3f00 	ldrex	r3, [r3]
 8008430:	60fb      	str	r3, [r7, #12]
   return(result);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f023 0301 	bic.w	r3, r3, #1
 8008438:	64bb      	str	r3, [r7, #72]	@ 0x48
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	3308      	adds	r3, #8
 8008440:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008442:	61fa      	str	r2, [r7, #28]
 8008444:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008446:	69b9      	ldr	r1, [r7, #24]
 8008448:	69fa      	ldr	r2, [r7, #28]
 800844a:	e841 2300 	strex	r3, r2, [r1]
 800844e:	617b      	str	r3, [r7, #20]
   return(result);
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1e5      	bne.n	8008422 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2220      	movs	r2, #32
 800845a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008466:	2303      	movs	r3, #3
 8008468:	e012      	b.n	8008490 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2220      	movs	r2, #32
 800846e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2220      	movs	r2, #32
 8008476:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3758      	adds	r7, #88	@ 0x58
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	603b      	str	r3, [r7, #0]
 80084a4:	4613      	mov	r3, r2
 80084a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084a8:	e04f      	b.n	800854a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b0:	d04b      	beq.n	800854a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084b2:	f7fa fa15 	bl	80028e0 <HAL_GetTick>
 80084b6:	4602      	mov	r2, r0
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	69ba      	ldr	r2, [r7, #24]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d302      	bcc.n	80084c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d101      	bne.n	80084cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80084c8:	2303      	movs	r3, #3
 80084ca:	e04e      	b.n	800856a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 0304 	and.w	r3, r3, #4
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d037      	beq.n	800854a <UART_WaitOnFlagUntilTimeout+0xb2>
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	2b80      	cmp	r3, #128	@ 0x80
 80084de:	d034      	beq.n	800854a <UART_WaitOnFlagUntilTimeout+0xb2>
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2b40      	cmp	r3, #64	@ 0x40
 80084e4:	d031      	beq.n	800854a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	69db      	ldr	r3, [r3, #28]
 80084ec:	f003 0308 	and.w	r3, r3, #8
 80084f0:	2b08      	cmp	r3, #8
 80084f2:	d110      	bne.n	8008516 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2208      	movs	r2, #8
 80084fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f000 f838 	bl	8008572 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2208      	movs	r2, #8
 8008506:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2200      	movs	r2, #0
 800850e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e029      	b.n	800856a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	69db      	ldr	r3, [r3, #28]
 800851c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008520:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008524:	d111      	bne.n	800854a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800852e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f000 f81e 	bl	8008572 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2220      	movs	r2, #32
 800853a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e00f      	b.n	800856a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	69da      	ldr	r2, [r3, #28]
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	4013      	ands	r3, r2
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	429a      	cmp	r2, r3
 8008558:	bf0c      	ite	eq
 800855a:	2301      	moveq	r3, #1
 800855c:	2300      	movne	r3, #0
 800855e:	b2db      	uxtb	r3, r3
 8008560:	461a      	mov	r2, r3
 8008562:	79fb      	ldrb	r3, [r7, #7]
 8008564:	429a      	cmp	r2, r3
 8008566:	d0a0      	beq.n	80084aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008572:	b480      	push	{r7}
 8008574:	b095      	sub	sp, #84	@ 0x54
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008582:	e853 3f00 	ldrex	r3, [r3]
 8008586:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800858a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800858e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	461a      	mov	r2, r3
 8008596:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008598:	643b      	str	r3, [r7, #64]	@ 0x40
 800859a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800859e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80085a0:	e841 2300 	strex	r3, r2, [r1]
 80085a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80085a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1e6      	bne.n	800857a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	3308      	adds	r3, #8
 80085b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b4:	6a3b      	ldr	r3, [r7, #32]
 80085b6:	e853 3f00 	ldrex	r3, [r3]
 80085ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80085c2:	f023 0301 	bic.w	r3, r3, #1
 80085c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	3308      	adds	r3, #8
 80085ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80085d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085d8:	e841 2300 	strex	r3, r2, [r1]
 80085dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80085de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1e3      	bne.n	80085ac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d118      	bne.n	800861e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	e853 3f00 	ldrex	r3, [r3]
 80085f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	f023 0310 	bic.w	r3, r3, #16
 8008600:	647b      	str	r3, [r7, #68]	@ 0x44
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	461a      	mov	r2, r3
 8008608:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800860a:	61bb      	str	r3, [r7, #24]
 800860c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860e:	6979      	ldr	r1, [r7, #20]
 8008610:	69ba      	ldr	r2, [r7, #24]
 8008612:	e841 2300 	strex	r3, r2, [r1]
 8008616:	613b      	str	r3, [r7, #16]
   return(result);
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1e6      	bne.n	80085ec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2220      	movs	r2, #32
 8008622:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008632:	bf00      	nop
 8008634:	3754      	adds	r7, #84	@ 0x54
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr

0800863e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800863e:	b480      	push	{r7}
 8008640:	b085      	sub	sp, #20
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800864c:	2b01      	cmp	r3, #1
 800864e:	d101      	bne.n	8008654 <HAL_UARTEx_DisableFifoMode+0x16>
 8008650:	2302      	movs	r3, #2
 8008652:	e027      	b.n	80086a4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2224      	movs	r2, #36	@ 0x24
 8008660:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f022 0201 	bic.w	r2, r2, #1
 800867a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008682:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2220      	movs	r2, #32
 8008696:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3714      	adds	r7, #20
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d101      	bne.n	80086c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80086c4:	2302      	movs	r3, #2
 80086c6:	e02d      	b.n	8008724 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2224      	movs	r2, #36	@ 0x24
 80086d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f022 0201 	bic.w	r2, r2, #1
 80086ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	683a      	ldr	r2, [r7, #0]
 8008700:	430a      	orrs	r2, r1
 8008702:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f84f 	bl	80087a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2220      	movs	r2, #32
 8008716:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	3710      	adds	r7, #16
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800873c:	2b01      	cmp	r3, #1
 800873e:	d101      	bne.n	8008744 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008740:	2302      	movs	r3, #2
 8008742:	e02d      	b.n	80087a0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2224      	movs	r2, #36	@ 0x24
 8008750:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f022 0201 	bic.w	r2, r2, #1
 800876a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	430a      	orrs	r2, r1
 800877e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f811 	bl	80087a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	68fa      	ldr	r2, [r7, #12]
 800878c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2220      	movs	r2, #32
 8008792:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d108      	bne.n	80087ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80087c8:	e031      	b.n	800882e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80087ca:	2308      	movs	r3, #8
 80087cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80087ce:	2308      	movs	r3, #8
 80087d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	0e5b      	lsrs	r3, r3, #25
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	f003 0307 	and.w	r3, r3, #7
 80087e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	0f5b      	lsrs	r3, r3, #29
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	f003 0307 	and.w	r3, r3, #7
 80087f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087f2:	7bbb      	ldrb	r3, [r7, #14]
 80087f4:	7b3a      	ldrb	r2, [r7, #12]
 80087f6:	4911      	ldr	r1, [pc, #68]	@ (800883c <UARTEx_SetNbDataToProcess+0x94>)
 80087f8:	5c8a      	ldrb	r2, [r1, r2]
 80087fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80087fe:	7b3a      	ldrb	r2, [r7, #12]
 8008800:	490f      	ldr	r1, [pc, #60]	@ (8008840 <UARTEx_SetNbDataToProcess+0x98>)
 8008802:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008804:	fb93 f3f2 	sdiv	r3, r3, r2
 8008808:	b29a      	uxth	r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008810:	7bfb      	ldrb	r3, [r7, #15]
 8008812:	7b7a      	ldrb	r2, [r7, #13]
 8008814:	4909      	ldr	r1, [pc, #36]	@ (800883c <UARTEx_SetNbDataToProcess+0x94>)
 8008816:	5c8a      	ldrb	r2, [r1, r2]
 8008818:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800881c:	7b7a      	ldrb	r2, [r7, #13]
 800881e:	4908      	ldr	r1, [pc, #32]	@ (8008840 <UARTEx_SetNbDataToProcess+0x98>)
 8008820:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008822:	fb93 f3f2 	sdiv	r3, r3, r2
 8008826:	b29a      	uxth	r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800882e:	bf00      	nop
 8008830:	3714      	adds	r7, #20
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	080088e4 	.word	0x080088e4
 8008840:	080088ec 	.word	0x080088ec

08008844 <memset>:
 8008844:	4402      	add	r2, r0
 8008846:	4603      	mov	r3, r0
 8008848:	4293      	cmp	r3, r2
 800884a:	d100      	bne.n	800884e <memset+0xa>
 800884c:	4770      	bx	lr
 800884e:	f803 1b01 	strb.w	r1, [r3], #1
 8008852:	e7f9      	b.n	8008848 <memset+0x4>

08008854 <__libc_init_array>:
 8008854:	b570      	push	{r4, r5, r6, lr}
 8008856:	4d0d      	ldr	r5, [pc, #52]	@ (800888c <__libc_init_array+0x38>)
 8008858:	4c0d      	ldr	r4, [pc, #52]	@ (8008890 <__libc_init_array+0x3c>)
 800885a:	1b64      	subs	r4, r4, r5
 800885c:	10a4      	asrs	r4, r4, #2
 800885e:	2600      	movs	r6, #0
 8008860:	42a6      	cmp	r6, r4
 8008862:	d109      	bne.n	8008878 <__libc_init_array+0x24>
 8008864:	4d0b      	ldr	r5, [pc, #44]	@ (8008894 <__libc_init_array+0x40>)
 8008866:	4c0c      	ldr	r4, [pc, #48]	@ (8008898 <__libc_init_array+0x44>)
 8008868:	f000 f818 	bl	800889c <_init>
 800886c:	1b64      	subs	r4, r4, r5
 800886e:	10a4      	asrs	r4, r4, #2
 8008870:	2600      	movs	r6, #0
 8008872:	42a6      	cmp	r6, r4
 8008874:	d105      	bne.n	8008882 <__libc_init_array+0x2e>
 8008876:	bd70      	pop	{r4, r5, r6, pc}
 8008878:	f855 3b04 	ldr.w	r3, [r5], #4
 800887c:	4798      	blx	r3
 800887e:	3601      	adds	r6, #1
 8008880:	e7ee      	b.n	8008860 <__libc_init_array+0xc>
 8008882:	f855 3b04 	ldr.w	r3, [r5], #4
 8008886:	4798      	blx	r3
 8008888:	3601      	adds	r6, #1
 800888a:	e7f2      	b.n	8008872 <__libc_init_array+0x1e>
 800888c:	080088fc 	.word	0x080088fc
 8008890:	080088fc 	.word	0x080088fc
 8008894:	080088fc 	.word	0x080088fc
 8008898:	08008900 	.word	0x08008900

0800889c <_init>:
 800889c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800889e:	bf00      	nop
 80088a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088a2:	bc08      	pop	{r3}
 80088a4:	469e      	mov	lr, r3
 80088a6:	4770      	bx	lr

080088a8 <_fini>:
 80088a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088aa:	bf00      	nop
 80088ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ae:	bc08      	pop	{r3}
 80088b0:	469e      	mov	lr, r3
 80088b2:	4770      	bx	lr

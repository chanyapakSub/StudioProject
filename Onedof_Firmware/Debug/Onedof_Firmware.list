
Onedof_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a390  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800a568  0800a568  0000b568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a60c  0800a60c  0000c050  2**0
                  CONTENTS
  4 .ARM          00000008  0800a60c  0800a60c  0000b60c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a614  0800a614  0000c050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a614  0800a614  0000b614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a618  0800a618  0000b618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  0800a61c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e80  20000050  0800a66c  0000c050  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000ed0  0800a66c  0000ced0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f690  00000000  00000000  0000c080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c06  00000000  00000000  0002b710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001700  00000000  00000000  0002f318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011d7  00000000  00000000  00030a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a259  00000000  00000000  00031bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e898  00000000  00000000  0005be48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115464  00000000  00000000  0007a6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018fb44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062fc  00000000  00000000  0018fb88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00195e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000050 	.word	0x20000050
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a550 	.word	0x0800a550

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000054 	.word	0x20000054
 8000214:	0800a550 	.word	0x0800a550

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b96a 	b.w	8000d80 <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	460c      	mov	r4, r1
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d14e      	bne.n	8000b6e <__udivmoddi4+0xaa>
 8000ad0:	4694      	mov	ip, r2
 8000ad2:	458c      	cmp	ip, r1
 8000ad4:	4686      	mov	lr, r0
 8000ad6:	fab2 f282 	clz	r2, r2
 8000ada:	d962      	bls.n	8000ba2 <__udivmoddi4+0xde>
 8000adc:	b14a      	cbz	r2, 8000af2 <__udivmoddi4+0x2e>
 8000ade:	f1c2 0320 	rsb	r3, r2, #32
 8000ae2:	4091      	lsls	r1, r2
 8000ae4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aec:	4319      	orrs	r1, r3
 8000aee:	fa00 fe02 	lsl.w	lr, r0, r2
 8000af2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af6:	fa1f f68c 	uxth.w	r6, ip
 8000afa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000afe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b02:	fb07 1114 	mls	r1, r7, r4, r1
 8000b06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0a:	fb04 f106 	mul.w	r1, r4, r6
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	d90a      	bls.n	8000b28 <__udivmoddi4+0x64>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b1a:	f080 8112 	bcs.w	8000d42 <__udivmoddi4+0x27e>
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	f240 810f 	bls.w	8000d42 <__udivmoddi4+0x27e>
 8000b24:	3c02      	subs	r4, #2
 8000b26:	4463      	add	r3, ip
 8000b28:	1a59      	subs	r1, r3, r1
 8000b2a:	fa1f f38e 	uxth.w	r3, lr
 8000b2e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b32:	fb07 1110 	mls	r1, r7, r0, r1
 8000b36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3a:	fb00 f606 	mul.w	r6, r0, r6
 8000b3e:	429e      	cmp	r6, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x94>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b4a:	f080 80fc 	bcs.w	8000d46 <__udivmoddi4+0x282>
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	f240 80f9 	bls.w	8000d46 <__udivmoddi4+0x282>
 8000b54:	4463      	add	r3, ip
 8000b56:	3802      	subs	r0, #2
 8000b58:	1b9b      	subs	r3, r3, r6
 8000b5a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b5e:	2100      	movs	r1, #0
 8000b60:	b11d      	cbz	r5, 8000b6a <__udivmoddi4+0xa6>
 8000b62:	40d3      	lsrs	r3, r2
 8000b64:	2200      	movs	r2, #0
 8000b66:	e9c5 3200 	strd	r3, r2, [r5]
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	428b      	cmp	r3, r1
 8000b70:	d905      	bls.n	8000b7e <__udivmoddi4+0xba>
 8000b72:	b10d      	cbz	r5, 8000b78 <__udivmoddi4+0xb4>
 8000b74:	e9c5 0100 	strd	r0, r1, [r5]
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e7f5      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000b7e:	fab3 f183 	clz	r1, r3
 8000b82:	2900      	cmp	r1, #0
 8000b84:	d146      	bne.n	8000c14 <__udivmoddi4+0x150>
 8000b86:	42a3      	cmp	r3, r4
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xcc>
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	f0c0 80f0 	bcc.w	8000d70 <__udivmoddi4+0x2ac>
 8000b90:	1a86      	subs	r6, r0, r2
 8000b92:	eb64 0303 	sbc.w	r3, r4, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	2d00      	cmp	r5, #0
 8000b9a:	d0e6      	beq.n	8000b6a <__udivmoddi4+0xa6>
 8000b9c:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba0:	e7e3      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000ba2:	2a00      	cmp	r2, #0
 8000ba4:	f040 8090 	bne.w	8000cc8 <__udivmoddi4+0x204>
 8000ba8:	eba1 040c 	sub.w	r4, r1, ip
 8000bac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb0:	fa1f f78c 	uxth.w	r7, ip
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bbe:	fb08 4416 	mls	r4, r8, r6, r4
 8000bc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bc6:	fb07 f006 	mul.w	r0, r7, r6
 8000bca:	4298      	cmp	r0, r3
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x11c>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x11a>
 8000bd8:	4298      	cmp	r0, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2b4>
 8000bde:	4626      	mov	r6, r4
 8000be0:	1a1c      	subs	r4, r3, r0
 8000be2:	fa1f f38e 	uxth.w	r3, lr
 8000be6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bea:	fb08 4410 	mls	r4, r8, r0, r4
 8000bee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bf2:	fb00 f707 	mul.w	r7, r0, r7
 8000bf6:	429f      	cmp	r7, r3
 8000bf8:	d908      	bls.n	8000c0c <__udivmoddi4+0x148>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c02:	d202      	bcs.n	8000c0a <__udivmoddi4+0x146>
 8000c04:	429f      	cmp	r7, r3
 8000c06:	f200 80b0 	bhi.w	8000d6a <__udivmoddi4+0x2a6>
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	1bdb      	subs	r3, r3, r7
 8000c0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c12:	e7a5      	b.n	8000b60 <__udivmoddi4+0x9c>
 8000c14:	f1c1 0620 	rsb	r6, r1, #32
 8000c18:	408b      	lsls	r3, r1
 8000c1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c24:	fa04 f301 	lsl.w	r3, r4, r1
 8000c28:	ea43 030c 	orr.w	r3, r3, ip
 8000c2c:	40f4      	lsrs	r4, r6
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	0c38      	lsrs	r0, r7, #16
 8000c34:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c38:	fbb4 fef0 	udiv	lr, r4, r0
 8000c3c:	fa1f fc87 	uxth.w	ip, r7
 8000c40:	fb00 441e 	mls	r4, r0, lr, r4
 8000c44:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c48:	fb0e f90c 	mul.w	r9, lr, ip
 8000c4c:	45a1      	cmp	r9, r4
 8000c4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x1a6>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c5a:	f080 8084 	bcs.w	8000d66 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8081 	bls.w	8000d66 <__udivmoddi4+0x2a2>
 8000c64:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c68:	443c      	add	r4, r7
 8000c6a:	eba4 0409 	sub.w	r4, r4, r9
 8000c6e:	fa1f f983 	uxth.w	r9, r3
 8000c72:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c76:	fb00 4413 	mls	r4, r0, r3, r4
 8000c7a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c7e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c82:	45a4      	cmp	ip, r4
 8000c84:	d907      	bls.n	8000c96 <__udivmoddi4+0x1d2>
 8000c86:	193c      	adds	r4, r7, r4
 8000c88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c8c:	d267      	bcs.n	8000d5e <__udivmoddi4+0x29a>
 8000c8e:	45a4      	cmp	ip, r4
 8000c90:	d965      	bls.n	8000d5e <__udivmoddi4+0x29a>
 8000c92:	3b02      	subs	r3, #2
 8000c94:	443c      	add	r4, r7
 8000c96:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c9a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c9e:	eba4 040c 	sub.w	r4, r4, ip
 8000ca2:	429c      	cmp	r4, r3
 8000ca4:	46ce      	mov	lr, r9
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	d351      	bcc.n	8000d4e <__udivmoddi4+0x28a>
 8000caa:	d04e      	beq.n	8000d4a <__udivmoddi4+0x286>
 8000cac:	b155      	cbz	r5, 8000cc4 <__udivmoddi4+0x200>
 8000cae:	ebb8 030e 	subs.w	r3, r8, lr
 8000cb2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cba:	40cb      	lsrs	r3, r1
 8000cbc:	431e      	orrs	r6, r3
 8000cbe:	40cc      	lsrs	r4, r1
 8000cc0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e750      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000cc8:	f1c2 0320 	rsb	r3, r2, #32
 8000ccc:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd4:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd8:	4094      	lsls	r4, r2
 8000cda:	430c      	orrs	r4, r1
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cec:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf0:	0c23      	lsrs	r3, r4, #16
 8000cf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf6:	fb00 f107 	mul.w	r1, r0, r7
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x24c>
 8000cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000d02:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d06:	d22c      	bcs.n	8000d62 <__udivmoddi4+0x29e>
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d92a      	bls.n	8000d62 <__udivmoddi4+0x29e>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d18:	fb08 3311 	mls	r3, r8, r1, r3
 8000d1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d20:	fb01 f307 	mul.w	r3, r1, r7
 8000d24:	42a3      	cmp	r3, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x276>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d30:	d213      	bcs.n	8000d5a <__udivmoddi4+0x296>
 8000d32:	42a3      	cmp	r3, r4
 8000d34:	d911      	bls.n	8000d5a <__udivmoddi4+0x296>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4464      	add	r4, ip
 8000d3a:	1ae4      	subs	r4, r4, r3
 8000d3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d40:	e739      	b.n	8000bb6 <__udivmoddi4+0xf2>
 8000d42:	4604      	mov	r4, r0
 8000d44:	e6f0      	b.n	8000b28 <__udivmoddi4+0x64>
 8000d46:	4608      	mov	r0, r1
 8000d48:	e706      	b.n	8000b58 <__udivmoddi4+0x94>
 8000d4a:	45c8      	cmp	r8, r9
 8000d4c:	d2ae      	bcs.n	8000cac <__udivmoddi4+0x1e8>
 8000d4e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d52:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d56:	3801      	subs	r0, #1
 8000d58:	e7a8      	b.n	8000cac <__udivmoddi4+0x1e8>
 8000d5a:	4631      	mov	r1, r6
 8000d5c:	e7ed      	b.n	8000d3a <__udivmoddi4+0x276>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	e799      	b.n	8000c96 <__udivmoddi4+0x1d2>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e7d4      	b.n	8000d10 <__udivmoddi4+0x24c>
 8000d66:	46d6      	mov	lr, sl
 8000d68:	e77f      	b.n	8000c6a <__udivmoddi4+0x1a6>
 8000d6a:	4463      	add	r3, ip
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	e74d      	b.n	8000c0c <__udivmoddi4+0x148>
 8000d70:	4606      	mov	r6, r0
 8000d72:	4623      	mov	r3, r4
 8000d74:	4608      	mov	r0, r1
 8000d76:	e70f      	b.n	8000b98 <__udivmoddi4+0xd4>
 8000d78:	3e02      	subs	r6, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	e730      	b.n	8000be0 <__udivmoddi4+0x11c>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <Gripper_Movement_Status>:
        strcpy(Vacuum, "Off");
        eff -> solenoid_command[0] = 0;
    }
}

void Gripper_Movement_Status(EFF* eff){
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
    //Movement Forward
    if (registerFrame[0x03].U16 == 1){ // ใช้ == แทน =
 8000d8c:	4b12      	ldr	r3, [pc, #72]	@ (8000dd8 <Gripper_Movement_Status+0x54>)
 8000d8e:	88db      	ldrh	r3, [r3, #6]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d10c      	bne.n	8000dae <Gripper_Movement_Status+0x2a>
        strcpy(Gripper, "Forward");
 8000d94:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <Gripper_Movement_Status+0x58>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	@ (8000de0 <Gripper_Movement_Status+0x5c>)
 8000d98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d9c:	e883 0003 	stmia.w	r3, {r0, r1}
        eff -> solenoid_command[1] = 1;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2201      	movs	r2, #1
 8000da4:	70da      	strb	r2, [r3, #3]
        eff -> solenoid_command[2] = 0;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	711a      	strb	r2, [r3, #4]
    else if (registerFrame[0x03].U16 == 0){ // ใช้ == แทน =
        strcpy(Gripper, "Backward");
        eff -> solenoid_command[1] = 0;
        eff -> solenoid_command[2] = 1;
    }
}
 8000dac:	e00e      	b.n	8000dcc <Gripper_Movement_Status+0x48>
    else if (registerFrame[0x03].U16 == 0){ // ใช้ == แทน =
 8000dae:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd8 <Gripper_Movement_Status+0x54>)
 8000db0:	88db      	ldrh	r3, [r3, #6]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d10a      	bne.n	8000dcc <Gripper_Movement_Status+0x48>
        strcpy(Gripper, "Backward");
 8000db6:	4b09      	ldr	r3, [pc, #36]	@ (8000ddc <Gripper_Movement_Status+0x58>)
 8000db8:	4a0a      	ldr	r2, [pc, #40]	@ (8000de4 <Gripper_Movement_Status+0x60>)
 8000dba:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dbc:	c303      	stmia	r3!, {r0, r1}
 8000dbe:	701a      	strb	r2, [r3, #0]
        eff -> solenoid_command[1] = 0;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	70da      	strb	r2, [r3, #3]
        eff -> solenoid_command[2] = 1;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	711a      	strb	r2, [r3, #4]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	20000bb4 	.word	0x20000bb4
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	0800a56c 	.word	0x0800a56c
 8000de4:	0800a574 	.word	0x0800a574

08000de8 <Set_Shelves>:

void Set_Shelves(){
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
    //Set
    if (registerFrame[0x01].U16 == 1){ // ใช้ == แทน =
 8000dec:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <Set_Shelves+0x5c>)
 8000dee:	885b      	ldrh	r3, [r3, #2]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d10e      	bne.n	8000e12 <Set_Shelves+0x2a>
    	state = 1;
 8000df4:	4b14      	ldr	r3, [pc, #80]	@ (8000e48 <Set_Shelves+0x60>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	801a      	strh	r2, [r3, #0]
        strcpy(Shelves, "SET");
 8000dfa:	4b14      	ldr	r3, [pc, #80]	@ (8000e4c <Set_Shelves+0x64>)
 8000dfc:	4a14      	ldr	r2, [pc, #80]	@ (8000e50 <Set_Shelves+0x68>)
 8000dfe:	601a      	str	r2, [r3, #0]
        registerFrame[0x01].U16 = 0;
 8000e00:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <Set_Shelves+0x5c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	805a      	strh	r2, [r3, #2]
        registerFrame[0x10].U16 = 1;
 8000e06:	4b0f      	ldr	r3, [pc, #60]	@ (8000e44 <Set_Shelves+0x5c>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	841a      	strh	r2, [r3, #32]
        set_shelves_state = 1;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	@ (8000e54 <Set_Shelves+0x6c>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	701a      	strb	r2, [r3, #0]
//        if(Jogging == 1){
//            registerFrame[0x10].U16 = 0;
//        }
    }

    registerFrame[0x23].U16 = 8;  //1st Shelve Position
 8000e12:	4b0c      	ldr	r3, [pc, #48]	@ (8000e44 <Set_Shelves+0x5c>)
 8000e14:	2208      	movs	r2, #8
 8000e16:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    registerFrame[0x24].U16 = 8;  //2nd Shelve Position
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e44 <Set_Shelves+0x5c>)
 8000e1c:	2208      	movs	r2, #8
 8000e1e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    registerFrame[0x25].U16 = 8;  //3rd Shelve Position
 8000e22:	4b08      	ldr	r3, [pc, #32]	@ (8000e44 <Set_Shelves+0x5c>)
 8000e24:	2208      	movs	r2, #8
 8000e26:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    registerFrame[0x26].U16 = 8;  //4th Shelve Position
 8000e2a:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <Set_Shelves+0x5c>)
 8000e2c:	2208      	movs	r2, #8
 8000e2e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    registerFrame[0x27].U16 = 8;  //5th Shelve Position
 8000e32:	4b04      	ldr	r3, [pc, #16]	@ (8000e44 <Set_Shelves+0x5c>)
 8000e34:	2208      	movs	r2, #8
 8000e36:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	20000bb4 	.word	0x20000bb4
 8000e48:	2000006e 	.word	0x2000006e
 8000e4c:	20000014 	.word	0x20000014
 8000e50:	00544553 	.word	0x00544553
 8000e54:	20000070 	.word	0x20000070

08000e58 <Set_Goal_Point>:


void Set_Goal_Point(){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	if (registerFrame[0x30].U16 != 0){
 8000e5c:	4b04      	ldr	r3, [pc, #16]	@ (8000e70 <Set_Goal_Point+0x18>)
 8000e5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <Set_Goal_Point+0x12>
//		*set_point = registerFrame[0x30].U16;
		Run_Point_Mode();
 8000e66:	f000 f805 	bl	8000e74 <Run_Point_Mode>
	 }
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000bb4 	.word	0x20000bb4

08000e74 <Run_Point_Mode>:

void Run_Point_Mode(){
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
	if (registerFrame[0x01].U16 == 8){
 8000e78:	4b09      	ldr	r3, [pc, #36]	@ (8000ea0 <Run_Point_Mode+0x2c>)
 8000e7a:	885b      	ldrh	r3, [r3, #2]
 8000e7c:	2b08      	cmp	r3, #8
 8000e7e:	d109      	bne.n	8000e94 <Run_Point_Mode+0x20>
		registerFrame[0x01].U16 = 0;
 8000e80:	4b07      	ldr	r3, [pc, #28]	@ (8000ea0 <Run_Point_Mode+0x2c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 8;
 8000e86:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <Run_Point_Mode+0x2c>)
 8000e88:	2208      	movs	r2, #8
 8000e8a:	841a      	strh	r2, [r3, #32]
		state = registerFrame[0x10].U16;
 8000e8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ea0 <Run_Point_Mode+0x2c>)
 8000e8e:	8c1a      	ldrh	r2, [r3, #32]
 8000e90:	4b04      	ldr	r3, [pc, #16]	@ (8000ea4 <Run_Point_Mode+0x30>)
 8000e92:	801a      	strh	r2, [r3, #0]
	}
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000bb4 	.word	0x20000bb4
 8000ea4:	2000006e 	.word	0x2000006e

08000ea8 <Set_Home>:

void Set_Home(){
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
	state = 2;
 8000eac:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <Set_Home+0x2c>)
 8000eae:	2202      	movs	r2, #2
 8000eb0:	801a      	strh	r2, [r3, #0]
	strcpy(Home, "Homing...");
 8000eb2:	4b09      	ldr	r3, [pc, #36]	@ (8000ed8 <Set_Home+0x30>)
 8000eb4:	4a09      	ldr	r2, [pc, #36]	@ (8000edc <Set_Home+0x34>)
 8000eb6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000eb8:	c303      	stmia	r3!, {r0, r1}
 8000eba:	801a      	strh	r2, [r3, #0]
	if (Jogginghome == 1){
 8000ebc:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <Set_Home+0x38>)
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d102      	bne.n	8000eca <Set_Home+0x22>
		registerFrame[0x01].U16 = 0;
 8000ec4:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <Set_Home+0x3c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	805a      	strh	r2, [r3, #2]
	}


}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	2000006e 	.word	0x2000006e
 8000ed8:	20000028 	.word	0x20000028
 8000edc:	0800a580 	.word	0x0800a580
 8000ee0:	2000006c 	.word	0x2000006c
 8000ee4:	20000bb4 	.word	0x20000bb4

08000ee8 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000eec:	4b0d      	ldr	r3, [pc, #52]	@ (8000f24 <modbus_1t5_Timeout+0x3c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f24 <modbus_1t5_Timeout+0x3c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	691b      	ldr	r3, [r3, #16]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2200      	movs	r2, #0
 8000efe:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000f00:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <modbus_1t5_Timeout+0x3c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	691b      	ldr	r3, [r3, #16]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <modbus_1t5_Timeout+0x3c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f042 0201 	orr.w	r2, r2, #1
 8000f16:	601a      	str	r2, [r3, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	2000054c 	.word	0x2000054c

08000f28 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000f30:	4b04      	ldr	r3, [pc, #16]	@ (8000f44 <modbus_3t5_Timeout+0x1c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2201      	movs	r2, #1
 8000f36:	755a      	strb	r2, [r3, #21]

}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	2000054c 	.word	0x2000054c

08000f48 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f008 fa09 	bl	8009368 <HAL_UART_GetError>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b20      	cmp	r3, #32
 8000f5a:	d101      	bne.n	8000f60 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8000f5c:	f7ff ffc4 	bl	8000ee8 <modbus_1t5_Timeout>

	}
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000f72:	4a25      	ldr	r2, [pc, #148]	@ (8001008 <Modbus_init+0xa0>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000f78:	4b23      	ldr	r3, [pc, #140]	@ (8001008 <Modbus_init+0xa0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	683a      	ldr	r2, [r7, #0]
 8000f7e:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	691b      	ldr	r3, [r3, #16]
 8000f84:	4a21      	ldr	r2, [pc, #132]	@ (800100c <Modbus_init+0xa4>)
 8000f86:	210e      	movs	r1, #14
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f006 fcb1 	bl	80078f0 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	2110      	movs	r1, #16
 8000f94:	4618      	mov	r0, r3
 8000f96:	f008 f991 	bl	80092bc <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f008 f9a8 	bl	80092f4 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	4a19      	ldr	r2, [pc, #100]	@ (8001010 <Modbus_init+0xa8>)
 8000faa:	2104      	movs	r1, #4
 8000fac:	4618      	mov	r0, r3
 8000fae:	f007 fcef 	bl	8008990 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8000fb2:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <Modbus_init+0xa0>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8000fb8:	4b13      	ldr	r3, [pc, #76]	@ (8001008 <Modbus_init+0xa0>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <Modbus_init+0xa0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8000fc4:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000fc8:	4413      	add	r3, r2
 8000fca:	3302      	adds	r3, #2
 8000fcc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f007 fd97 	bl	8008b04 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001008 <Modbus_init+0xa0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	691b      	ldr	r3, [r3, #16]
 8000fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d10c      	bne.n	8001000 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000fe6:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <Modbus_init+0xa0>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f005 fc51 	bl	8006894 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000ff2:	4b05      	ldr	r3, [pc, #20]	@ (8001008 <Modbus_init+0xa0>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f005 feaa 	bl	8006d54 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000054c 	.word	0x2000054c
 800100c:	08000f29 	.word	0x08000f29
 8001010:	08000f49 	.word	0x08000f49

08001014 <ADC_init>:
 *      Author: naker
 */

#include "adc.h"

void ADC_init(ADC_HandleTypeDef* hadc, ADC* adc){
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, adc -> adc_buffer, 50);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	2232      	movs	r2, #50	@ 0x32
 8001022:	4619      	mov	r1, r3
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f002 faff 	bl	8003628 <HAL_ADC_Start_DMA>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <Update_adc>:

uint32_t Update_adc(ADC* adc){
 8001032:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	uint64_t sum_adc = 0;
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	f04f 0300 	mov.w	r3, #0
 8001044:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (uint8_t i = 0; i < 50; i++){
 8001048:	2300      	movs	r3, #0
 800104a:	73fb      	strb	r3, [r7, #15]
 800104c:	e011      	b.n	8001072 <Update_adc+0x40>
		sum_adc += adc -> adc_buffer[i];
 800104e:	7bfa      	ldrb	r2, [r7, #15]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001056:	2200      	movs	r2, #0
 8001058:	461c      	mov	r4, r3
 800105a:	4615      	mov	r5, r2
 800105c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001060:	eb12 0804 	adds.w	r8, r2, r4
 8001064:	eb43 0905 	adc.w	r9, r3, r5
 8001068:	e9c7 8904 	strd	r8, r9, [r7, #16]
	for (uint8_t i = 0; i < 50; i++){
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	3301      	adds	r3, #1
 8001070:	73fb      	strb	r3, [r7, #15]
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	2b31      	cmp	r3, #49	@ 0x31
 8001076:	d9ea      	bls.n	800104e <Update_adc+0x1c>
	}
	return adc -> adc_avg = sum_adc / 50;
 8001078:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800107c:	f04f 0232 	mov.w	r2, #50	@ 0x32
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	f7ff fd06 	bl	8000a94 <__aeabi_uldivmod>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080010a2 <Update_actual_eff>:
 *      Author: naker
 */

#include "eff.h"

void Update_actual_eff(EFF* eff, u16u8_t* registerFrame[200], GPIO_TypeDef* GPIO_Pull, uint16_t GPIO_Pin_Pull, GPIO_TypeDef* GPIO_Push, uint16_t GPIO_Pin_Push){
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b084      	sub	sp, #16
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	60f8      	str	r0, [r7, #12]
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	807b      	strh	r3, [r7, #2]
	eff -> actual_status[0] = HAL_GPIO_ReadPin(GPIO_Pull, GPIO_Pin_Pull);
 80010b0:	887b      	ldrh	r3, [r7, #2]
 80010b2:	4619      	mov	r1, r3
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f004 faa1 	bl	80055fc <HAL_GPIO_ReadPin>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	701a      	strb	r2, [r3, #0]
	eff -> actual_status[1] = HAL_GPIO_ReadPin(GPIO_Push, GPIO_Pin_Push);
 80010c2:	8bbb      	ldrh	r3, [r7, #28]
 80010c4:	4619      	mov	r1, r3
 80010c6:	69b8      	ldr	r0, [r7, #24]
 80010c8:	f004 fa98 	bl	80055fc <HAL_GPIO_ReadPin>
 80010cc:	4603      	mov	r3, r0
 80010ce:	461a      	mov	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	705a      	strb	r2, [r3, #1]
	if(eff -> actual_status[0] && !eff -> actual_status[1]){
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d009      	beq.n	80010f0 <Update_actual_eff+0x4e>
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	785b      	ldrb	r3, [r3, #1]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d105      	bne.n	80010f0 <Update_actual_eff+0x4e>
		// Pull reed switch on and Push reed switch off
		registerFrame[0x04] -> U16 = 1;
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	3310      	adds	r3, #16
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2201      	movs	r2, #1
 80010ec:	801a      	strh	r2, [r3, #0]
 80010ee:	e012      	b.n	8001116 <Update_actual_eff+0x74>
	}
	else if(!eff -> actual_status[0] && eff -> actual_status[1]){
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d109      	bne.n	800110c <Update_actual_eff+0x6a>
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	785b      	ldrb	r3, [r3, #1]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d005      	beq.n	800110c <Update_actual_eff+0x6a>
		// Pull reed switch off and Push reed switch on
		registerFrame[0x04] -> U16 = 2;
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	3310      	adds	r3, #16
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2202      	movs	r2, #2
 8001108:	801a      	strh	r2, [r3, #0]
 800110a:	e004      	b.n	8001116 <Update_actual_eff+0x74>
	}
	else{registerFrame[0x04] = 0;} // Pull reed switch off and Push reed switch off
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	3310      	adds	r3, #16
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001124:	f001 fe13 	bl	8002d4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001128:	f000 f89e 	bl	8001268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112c:	f000 fbb8 	bl	80018a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001130:	f000 fb7c 	bl	800182c <MX_DMA_Init>
  MX_TIM1_Init();
 8001134:	f000 f95a 	bl	80013ec <MX_TIM1_Init>
  MX_TIM3_Init();
 8001138:	f000 fa08 	bl	800154c <MX_TIM3_Init>
  MX_TIM4_Init();
 800113c:	f000 fa54 	bl	80015e8 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001140:	f000 f8dc 	bl	80012fc <MX_ADC1_Init>
  MX_TIM5_Init();
 8001144:	f000 faa6 	bl	8001694 <MX_TIM5_Init>
  MX_TIM16_Init();
 8001148:	f000 faf2 	bl	8001730 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 800114c:	f000 fb20 	bl	8001790 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //Modbus setting
  hmodbus.huart = &huart2;
 8001150:	4b2f      	ldr	r3, [pc, #188]	@ (8001210 <main+0xf0>)
 8001152:	4a30      	ldr	r2, [pc, #192]	@ (8001214 <main+0xf4>)
 8001154:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8001156:	4b2e      	ldr	r3, [pc, #184]	@ (8001210 <main+0xf0>)
 8001158:	4a2f      	ldr	r2, [pc, #188]	@ (8001218 <main+0xf8>)
 800115a:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 800115c:	4b2c      	ldr	r3, [pc, #176]	@ (8001210 <main+0xf0>)
 800115e:	2215      	movs	r2, #21
 8001160:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8001162:	4b2b      	ldr	r3, [pc, #172]	@ (8001210 <main+0xf0>)
 8001164:	22c8      	movs	r2, #200	@ 0xc8
 8001166:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8001168:	492c      	ldr	r1, [pc, #176]	@ (800121c <main+0xfc>)
 800116a:	4829      	ldr	r0, [pc, #164]	@ (8001210 <main+0xf0>)
 800116c:	f7ff fefc 	bl	8000f68 <Modbus_init>
  registerFrame[0x00].U16 = 22881; // Set default heart beat to "Ya"
 8001170:	4b2a      	ldr	r3, [pc, #168]	@ (800121c <main+0xfc>)
 8001172:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001176:	801a      	strh	r2, [r3, #0]
  //Update MODBUS timer
  HAL_TIM_Base_Start_IT(&htim5);
 8001178:	4829      	ldr	r0, [pc, #164]	@ (8001220 <main+0x100>)
 800117a:	f005 fb8b 	bl	8006894 <HAL_TIM_Base_Start_IT>

  //Update command timer
  HAL_TIM_Base_Start_IT(&htim3);
 800117e:	4829      	ldr	r0, [pc, #164]	@ (8001224 <main+0x104>)
 8001180:	f005 fb88 	bl	8006894 <HAL_TIM_Base_Start_IT>

  //PWM generator
  HAL_TIM_Base_Start(&htim1);
 8001184:	4828      	ldr	r0, [pc, #160]	@ (8001228 <main+0x108>)
 8001186:	f005 fb15 	bl	80067b4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800118a:	2100      	movs	r1, #0
 800118c:	4826      	ldr	r0, [pc, #152]	@ (8001228 <main+0x108>)
 800118e:	f005 fc67 	bl	8006a60 <HAL_TIM_PWM_Start>

  //Encoder reader
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001192:	213c      	movs	r1, #60	@ 0x3c
 8001194:	4825      	ldr	r0, [pc, #148]	@ (800122c <main+0x10c>)
 8001196:	f005 ff1f 	bl	8006fd8 <HAL_TIM_Encoder_Start>
  QEI_init(&encoder, 8192, 8000, 65536);
 800119a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800119e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80011a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011a6:	4822      	ldr	r0, [pc, #136]	@ (8001230 <main+0x110>)
 80011a8:	f000 fdd2 	bl	8001d50 <QEI_init>

  //Current reader
  ADC_init(&hadc1, &current_sensor);
 80011ac:	4921      	ldr	r1, [pc, #132]	@ (8001234 <main+0x114>)
 80011ae:	4822      	ldr	r0, [pc, #136]	@ (8001238 <main+0x118>)
 80011b0:	f7ff ff30 	bl	8001014 <ADC_init>

  //Position PID
  PID_init(&p_pid, p_kp, p_ki, p_kd, 0.001);
 80011b4:	4b21      	ldr	r3, [pc, #132]	@ (800123c <main+0x11c>)
 80011b6:	edd3 7a00 	vldr	s15, [r3]
 80011ba:	4b21      	ldr	r3, [pc, #132]	@ (8001240 <main+0x120>)
 80011bc:	ed93 7a00 	vldr	s14, [r3]
 80011c0:	4b20      	ldr	r3, [pc, #128]	@ (8001244 <main+0x124>)
 80011c2:	edd3 6a00 	vldr	s13, [r3]
 80011c6:	eddf 1a20 	vldr	s3, [pc, #128]	@ 8001248 <main+0x128>
 80011ca:	eeb0 1a66 	vmov.f32	s2, s13
 80011ce:	eef0 0a47 	vmov.f32	s1, s14
 80011d2:	eeb0 0a67 	vmov.f32	s0, s15
 80011d6:	481d      	ldr	r0, [pc, #116]	@ (800124c <main+0x12c>)
 80011d8:	f000 fcfe 	bl	8001bd8 <PID_init>
  PID_init(&v_pid, v_kp, v_ki, v_kd, 0.000125);
 80011dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001250 <main+0x130>)
 80011de:	edd3 7a00 	vldr	s15, [r3]
 80011e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001254 <main+0x134>)
 80011e4:	ed93 7a00 	vldr	s14, [r3]
 80011e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001258 <main+0x138>)
 80011ea:	edd3 6a00 	vldr	s13, [r3]
 80011ee:	eddf 1a1b 	vldr	s3, [pc, #108]	@ 800125c <main+0x13c>
 80011f2:	eeb0 1a66 	vmov.f32	s2, s13
 80011f6:	eef0 0a47 	vmov.f32	s1, s14
 80011fa:	eeb0 0a67 	vmov.f32	s0, s15
 80011fe:	4818      	ldr	r0, [pc, #96]	@ (8001260 <main+0x140>)
 8001200:	f000 fcea 	bl	8001bd8 <PID_init>

  //Set point
  set_point = 0;
 8001204:	4b17      	ldr	r3, [pc, #92]	@ (8001264 <main+0x144>)
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <main+0xec>
 8001210:	20000074 	.word	0x20000074
 8001214:	20000a18 	.word	0x20000a18
 8001218:	2000094c 	.word	0x2000094c
 800121c:	20000bb4 	.word	0x20000bb4
 8001220:	20000880 	.word	0x20000880
 8001224:	200006e8 	.word	0x200006e8
 8001228:	2000061c 	.word	0x2000061c
 800122c:	200007b4 	.word	0x200007b4
 8001230:	20000e18 	.word	0x20000e18
 8001234:	20000d4c 	.word	0x20000d4c
 8001238:	20000550 	.word	0x20000550
 800123c:	20000040 	.word	0x20000040
 8001240:	20000eb0 	.word	0x20000eb0
 8001244:	20000eb4 	.word	0x20000eb4
 8001248:	3a83126f 	.word	0x3a83126f
 800124c:	20000e98 	.word	0x20000e98
 8001250:	2000003c 	.word	0x2000003c
 8001254:	20000e90 	.word	0x20000e90
 8001258:	20000e94 	.word	0x20000e94
 800125c:	3903126f 	.word	0x3903126f
 8001260:	20000e78 	.word	0x20000e78
 8001264:	20000ba8 	.word	0x20000ba8

08001268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b094      	sub	sp, #80	@ 0x50
 800126c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126e:	f107 0318 	add.w	r3, r7, #24
 8001272:	2238      	movs	r2, #56	@ 0x38
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f009 f93e 	bl	800a4f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
 8001288:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800128a:	2000      	movs	r0, #0
 800128c:	f004 f9fe 	bl	800568c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001290:	2301      	movs	r3, #1
 8001292:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001294:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001298:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129a:	2302      	movs	r3, #2
 800129c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800129e:	2303      	movs	r3, #3
 80012a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80012a2:	2306      	movs	r3, #6
 80012a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80012a6:	2355      	movs	r3, #85	@ 0x55
 80012a8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012aa:	2302      	movs	r3, #2
 80012ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012ae:	2302      	movs	r3, #2
 80012b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012b2:	2302      	movs	r3, #2
 80012b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b6:	f107 0318 	add.w	r3, r7, #24
 80012ba:	4618      	mov	r0, r3
 80012bc:	f004 fa9a 	bl	80057f4 <HAL_RCC_OscConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <SystemClock_Config+0x62>
  {
    Error_Handler();
 80012c6:	f000 fc81 	bl	8001bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ca:	230f      	movs	r3, #15
 80012cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ce:	2303      	movs	r3, #3
 80012d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	2104      	movs	r1, #4
 80012e2:	4618      	mov	r0, r3
 80012e4:	f004 fd98 	bl	8005e18 <HAL_RCC_ClockConfig>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80012ee:	f000 fc6d 	bl	8001bcc <Error_Handler>
  }
}
 80012f2:	bf00      	nop
 80012f4:	3750      	adds	r7, #80	@ 0x50
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08c      	sub	sp, #48	@ 0x30
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001302:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	2220      	movs	r2, #32
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f009 f8ef 	bl	800a4f8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800131a:	4b32      	ldr	r3, [pc, #200]	@ (80013e4 <MX_ADC1_Init+0xe8>)
 800131c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001320:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001322:	4b30      	ldr	r3, [pc, #192]	@ (80013e4 <MX_ADC1_Init+0xe8>)
 8001324:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001328:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800132a:	4b2e      	ldr	r3, [pc, #184]	@ (80013e4 <MX_ADC1_Init+0xe8>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001330:	4b2c      	ldr	r3, [pc, #176]	@ (80013e4 <MX_ADC1_Init+0xe8>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001336:	4b2b      	ldr	r3, [pc, #172]	@ (80013e4 <MX_ADC1_Init+0xe8>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800133c:	4b29      	ldr	r3, [pc, #164]	@ (80013e4 <MX_ADC1_Init+0xe8>)
 800133e:	2200      	movs	r2, #0
 8001340:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001342:	4b28      	ldr	r3, [pc, #160]	@ (80013e4 <MX_ADC1_Init+0xe8>)
 8001344:	2204      	movs	r2, #4
 8001346:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001348:	4b26      	ldr	r3, [pc, #152]	@ (80013e4 <MX_ADC1_Init+0xe8>)
 800134a:	2200      	movs	r2, #0
 800134c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800134e:	4b25      	ldr	r3, [pc, #148]	@ (80013e4 <MX_ADC1_Init+0xe8>)
 8001350:	2201      	movs	r2, #1
 8001352:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001354:	4b23      	ldr	r3, [pc, #140]	@ (80013e4 <MX_ADC1_Init+0xe8>)
 8001356:	2201      	movs	r2, #1
 8001358:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800135a:	4b22      	ldr	r3, [pc, #136]	@ (80013e4 <MX_ADC1_Init+0xe8>)
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001362:	4b20      	ldr	r3, [pc, #128]	@ (80013e4 <MX_ADC1_Init+0xe8>)
 8001364:	2200      	movs	r2, #0
 8001366:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001368:	4b1e      	ldr	r3, [pc, #120]	@ (80013e4 <MX_ADC1_Init+0xe8>)
 800136a:	2200      	movs	r2, #0
 800136c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800136e:	4b1d      	ldr	r3, [pc, #116]	@ (80013e4 <MX_ADC1_Init+0xe8>)
 8001370:	2201      	movs	r2, #1
 8001372:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001376:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <MX_ADC1_Init+0xe8>)
 8001378:	2200      	movs	r2, #0
 800137a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800137c:	4b19      	ldr	r3, [pc, #100]	@ (80013e4 <MX_ADC1_Init+0xe8>)
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001384:	4817      	ldr	r0, [pc, #92]	@ (80013e4 <MX_ADC1_Init+0xe8>)
 8001386:	f001 ff93 	bl	80032b0 <HAL_ADC_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001390:	f000 fc1c 	bl	8001bcc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001398:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800139c:	4619      	mov	r1, r3
 800139e:	4811      	ldr	r0, [pc, #68]	@ (80013e4 <MX_ADC1_Init+0xe8>)
 80013a0:	f003 fa60 	bl	8004864 <HAL_ADCEx_MultiModeConfigChannel>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80013aa:	f000 fc0f 	bl	8001bcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	@ (80013e8 <MX_ADC1_Init+0xec>)
 80013b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013b2:	2306      	movs	r3, #6
 80013b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013ba:	237f      	movs	r3, #127	@ 0x7f
 80013bc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013be:	2304      	movs	r3, #4
 80013c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	4619      	mov	r1, r3
 80013ca:	4806      	ldr	r0, [pc, #24]	@ (80013e4 <MX_ADC1_Init+0xe8>)
 80013cc:	f002 fc88 	bl	8003ce0 <HAL_ADC_ConfigChannel>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80013d6:	f000 fbf9 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	3730      	adds	r7, #48	@ 0x30
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000550 	.word	0x20000550
 80013e8:	04300002 	.word	0x04300002

080013ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b09c      	sub	sp, #112	@ 0x70
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001400:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800140c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
 800141c:	615a      	str	r2, [r3, #20]
 800141e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	2234      	movs	r2, #52	@ 0x34
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f009 f866 	bl	800a4f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800142c:	4b45      	ldr	r3, [pc, #276]	@ (8001544 <MX_TIM1_Init+0x158>)
 800142e:	4a46      	ldr	r2, [pc, #280]	@ (8001548 <MX_TIM1_Init+0x15c>)
 8001430:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8001432:	4b44      	ldr	r3, [pc, #272]	@ (8001544 <MX_TIM1_Init+0x158>)
 8001434:	22a9      	movs	r2, #169	@ 0xa9
 8001436:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b42      	ldr	r3, [pc, #264]	@ (8001544 <MX_TIM1_Init+0x158>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800143e:	4b41      	ldr	r3, [pc, #260]	@ (8001544 <MX_TIM1_Init+0x158>)
 8001440:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001444:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001446:	4b3f      	ldr	r3, [pc, #252]	@ (8001544 <MX_TIM1_Init+0x158>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800144c:	4b3d      	ldr	r3, [pc, #244]	@ (8001544 <MX_TIM1_Init+0x158>)
 800144e:	2200      	movs	r2, #0
 8001450:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001452:	4b3c      	ldr	r3, [pc, #240]	@ (8001544 <MX_TIM1_Init+0x158>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001458:	483a      	ldr	r0, [pc, #232]	@ (8001544 <MX_TIM1_Init+0x158>)
 800145a:	f005 f947 	bl	80066ec <HAL_TIM_Base_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001464:	f000 fbb2 	bl	8001bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001468:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800146c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800146e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001472:	4619      	mov	r1, r3
 8001474:	4833      	ldr	r0, [pc, #204]	@ (8001544 <MX_TIM1_Init+0x158>)
 8001476:	f006 f8cb 	bl	8007610 <HAL_TIM_ConfigClockSource>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001480:	f000 fba4 	bl	8001bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001484:	482f      	ldr	r0, [pc, #188]	@ (8001544 <MX_TIM1_Init+0x158>)
 8001486:	f005 fa7d 	bl	8006984 <HAL_TIM_PWM_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001490:	f000 fb9c 	bl	8001bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001494:	2300      	movs	r3, #0
 8001496:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001498:	2300      	movs	r3, #0
 800149a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014a4:	4619      	mov	r1, r3
 80014a6:	4827      	ldr	r0, [pc, #156]	@ (8001544 <MX_TIM1_Init+0x158>)
 80014a8:	f007 f898 	bl	80085dc <HAL_TIMEx_MasterConfigSynchronization>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80014b2:	f000 fb8b 	bl	8001bcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014b6:	2360      	movs	r3, #96	@ 0x60
 80014b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014be:	2300      	movs	r3, #0
 80014c0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014c2:	2300      	movs	r3, #0
 80014c4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80014c6:	2304      	movs	r3, #4
 80014c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014ca:	2300      	movs	r3, #0
 80014cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014ce:	2300      	movs	r3, #0
 80014d0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014d6:	2200      	movs	r2, #0
 80014d8:	4619      	mov	r1, r3
 80014da:	481a      	ldr	r0, [pc, #104]	@ (8001544 <MX_TIM1_Init+0x158>)
 80014dc:	f005 ff84 	bl	80073e8 <HAL_TIM_PWM_ConfigChannel>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80014e6:	f000 fb71 	bl	8001bcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001502:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001510:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001514:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800151a:	2300      	movs	r3, #0
 800151c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	4619      	mov	r1, r3
 8001526:	4807      	ldr	r0, [pc, #28]	@ (8001544 <MX_TIM1_Init+0x158>)
 8001528:	f007 f8ee 	bl	8008708 <HAL_TIMEx_ConfigBreakDeadTime>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8001532:	f000 fb4b 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001536:	4803      	ldr	r0, [pc, #12]	@ (8001544 <MX_TIM1_Init+0x158>)
 8001538:	f001 fa40 	bl	80029bc <HAL_TIM_MspPostInit>

}
 800153c:	bf00      	nop
 800153e:	3770      	adds	r7, #112	@ 0x70
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	2000061c 	.word	0x2000061c
 8001548:	40012c00 	.word	0x40012c00

0800154c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001552:	f107 0310 	add.w	r3, r7, #16
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800156a:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <MX_TIM3_Init+0x94>)
 800156c:	4a1d      	ldr	r2, [pc, #116]	@ (80015e4 <MX_TIM3_Init+0x98>)
 800156e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001570:	4b1b      	ldr	r3, [pc, #108]	@ (80015e0 <MX_TIM3_Init+0x94>)
 8001572:	22a9      	movs	r2, #169	@ 0xa9
 8001574:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001576:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <MX_TIM3_Init+0x94>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 124;
 800157c:	4b18      	ldr	r3, [pc, #96]	@ (80015e0 <MX_TIM3_Init+0x94>)
 800157e:	227c      	movs	r2, #124	@ 0x7c
 8001580:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001582:	4b17      	ldr	r3, [pc, #92]	@ (80015e0 <MX_TIM3_Init+0x94>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001588:	4b15      	ldr	r3, [pc, #84]	@ (80015e0 <MX_TIM3_Init+0x94>)
 800158a:	2200      	movs	r2, #0
 800158c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800158e:	4814      	ldr	r0, [pc, #80]	@ (80015e0 <MX_TIM3_Init+0x94>)
 8001590:	f005 f8ac 	bl	80066ec <HAL_TIM_Base_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800159a:	f000 fb17 	bl	8001bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800159e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	4619      	mov	r1, r3
 80015aa:	480d      	ldr	r0, [pc, #52]	@ (80015e0 <MX_TIM3_Init+0x94>)
 80015ac:	f006 f830 	bl	8007610 <HAL_TIM_ConfigClockSource>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80015b6:	f000 fb09 	bl	8001bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	4619      	mov	r1, r3
 80015c6:	4806      	ldr	r0, [pc, #24]	@ (80015e0 <MX_TIM3_Init+0x94>)
 80015c8:	f007 f808 	bl	80085dc <HAL_TIMEx_MasterConfigSynchronization>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80015d2:	f000 fafb 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	3720      	adds	r7, #32
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200006e8 	.word	0x200006e8
 80015e4:	40000400 	.word	0x40000400

080015e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08c      	sub	sp, #48	@ 0x30
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015ee:	f107 030c 	add.w	r3, r7, #12
 80015f2:	2224      	movs	r2, #36	@ 0x24
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f008 ff7e 	bl	800a4f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fc:	463b      	mov	r3, r7
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001606:	4b21      	ldr	r3, [pc, #132]	@ (800168c <MX_TIM4_Init+0xa4>)
 8001608:	4a21      	ldr	r2, [pc, #132]	@ (8001690 <MX_TIM4_Init+0xa8>)
 800160a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800160c:	4b1f      	ldr	r3, [pc, #124]	@ (800168c <MX_TIM4_Init+0xa4>)
 800160e:	2200      	movs	r2, #0
 8001610:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001612:	4b1e      	ldr	r3, [pc, #120]	@ (800168c <MX_TIM4_Init+0xa4>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001618:	4b1c      	ldr	r3, [pc, #112]	@ (800168c <MX_TIM4_Init+0xa4>)
 800161a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800161e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001620:	4b1a      	ldr	r3, [pc, #104]	@ (800168c <MX_TIM4_Init+0xa4>)
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001626:	4b19      	ldr	r3, [pc, #100]	@ (800168c <MX_TIM4_Init+0xa4>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800162c:	2303      	movs	r3, #3
 800162e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001630:	2300      	movs	r3, #0
 8001632:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001634:	2301      	movs	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001638:	2300      	movs	r3, #0
 800163a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001640:	2300      	movs	r3, #0
 8001642:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001644:	2301      	movs	r3, #1
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001648:	2300      	movs	r3, #0
 800164a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	4619      	mov	r1, r3
 8001656:	480d      	ldr	r0, [pc, #52]	@ (800168c <MX_TIM4_Init+0xa4>)
 8001658:	f005 fc0a 	bl	8006e70 <HAL_TIM_Encoder_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001662:	f000 fab3 	bl	8001bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001666:	2300      	movs	r3, #0
 8001668:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800166e:	463b      	mov	r3, r7
 8001670:	4619      	mov	r1, r3
 8001672:	4806      	ldr	r0, [pc, #24]	@ (800168c <MX_TIM4_Init+0xa4>)
 8001674:	f006 ffb2 	bl	80085dc <HAL_TIMEx_MasterConfigSynchronization>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800167e:	f000 faa5 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	3730      	adds	r7, #48	@ 0x30
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200007b4 	.word	0x200007b4
 8001690:	40000800 	.word	0x40000800

08001694 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800169a:	f107 0310 	add.w	r3, r7, #16
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80016b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001728 <MX_TIM5_Init+0x94>)
 80016b4:	4a1d      	ldr	r2, [pc, #116]	@ (800172c <MX_TIM5_Init+0x98>)
 80016b6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80016b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001728 <MX_TIM5_Init+0x94>)
 80016ba:	22a9      	movs	r2, #169	@ 0xa9
 80016bc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016be:	4b1a      	ldr	r3, [pc, #104]	@ (8001728 <MX_TIM5_Init+0x94>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 80016c4:	4b18      	ldr	r3, [pc, #96]	@ (8001728 <MX_TIM5_Init+0x94>)
 80016c6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80016ca:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016cc:	4b16      	ldr	r3, [pc, #88]	@ (8001728 <MX_TIM5_Init+0x94>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d2:	4b15      	ldr	r3, [pc, #84]	@ (8001728 <MX_TIM5_Init+0x94>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80016d8:	4813      	ldr	r0, [pc, #76]	@ (8001728 <MX_TIM5_Init+0x94>)
 80016da:	f005 f807 	bl	80066ec <HAL_TIM_Base_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80016e4:	f000 fa72 	bl	8001bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80016ee:	f107 0310 	add.w	r3, r7, #16
 80016f2:	4619      	mov	r1, r3
 80016f4:	480c      	ldr	r0, [pc, #48]	@ (8001728 <MX_TIM5_Init+0x94>)
 80016f6:	f005 ff8b 	bl	8007610 <HAL_TIM_ConfigClockSource>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001700:	f000 fa64 	bl	8001bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001704:	2300      	movs	r3, #0
 8001706:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	4619      	mov	r1, r3
 8001710:	4805      	ldr	r0, [pc, #20]	@ (8001728 <MX_TIM5_Init+0x94>)
 8001712:	f006 ff63 	bl	80085dc <HAL_TIMEx_MasterConfigSynchronization>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800171c:	f000 fa56 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001720:	bf00      	nop
 8001722:	3720      	adds	r7, #32
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000880 	.word	0x20000880
 800172c:	40000c00 	.word	0x40000c00

08001730 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001734:	4b14      	ldr	r3, [pc, #80]	@ (8001788 <MX_TIM16_Init+0x58>)
 8001736:	4a15      	ldr	r2, [pc, #84]	@ (800178c <MX_TIM16_Init+0x5c>)
 8001738:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 800173a:	4b13      	ldr	r3, [pc, #76]	@ (8001788 <MX_TIM16_Init+0x58>)
 800173c:	22a9      	movs	r2, #169	@ 0xa9
 800173e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001740:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <MX_TIM16_Init+0x58>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8001746:	4b10      	ldr	r3, [pc, #64]	@ (8001788 <MX_TIM16_Init+0x58>)
 8001748:	f240 4279 	movw	r2, #1145	@ 0x479
 800174c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800174e:	4b0e      	ldr	r3, [pc, #56]	@ (8001788 <MX_TIM16_Init+0x58>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001754:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <MX_TIM16_Init+0x58>)
 8001756:	2200      	movs	r2, #0
 8001758:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800175a:	4b0b      	ldr	r3, [pc, #44]	@ (8001788 <MX_TIM16_Init+0x58>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001760:	4809      	ldr	r0, [pc, #36]	@ (8001788 <MX_TIM16_Init+0x58>)
 8001762:	f004 ffc3 	bl	80066ec <HAL_TIM_Base_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800176c:	f000 fa2e 	bl	8001bcc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001770:	2108      	movs	r1, #8
 8001772:	4805      	ldr	r0, [pc, #20]	@ (8001788 <MX_TIM16_Init+0x58>)
 8001774:	f005 fa86 	bl	8006c84 <HAL_TIM_OnePulse_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 800177e:	f000 fa25 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	2000094c 	.word	0x2000094c
 800178c:	40014400 	.word	0x40014400

08001790 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001794:	4b23      	ldr	r3, [pc, #140]	@ (8001824 <MX_USART2_UART_Init+0x94>)
 8001796:	4a24      	ldr	r2, [pc, #144]	@ (8001828 <MX_USART2_UART_Init+0x98>)
 8001798:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800179a:	4b22      	ldr	r3, [pc, #136]	@ (8001824 <MX_USART2_UART_Init+0x94>)
 800179c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80017a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80017a2:	4b20      	ldr	r3, [pc, #128]	@ (8001824 <MX_USART2_UART_Init+0x94>)
 80017a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017a8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001824 <MX_USART2_UART_Init+0x94>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80017b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001824 <MX_USART2_UART_Init+0x94>)
 80017b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001824 <MX_USART2_UART_Init+0x94>)
 80017ba:	220c      	movs	r2, #12
 80017bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017be:	4b19      	ldr	r3, [pc, #100]	@ (8001824 <MX_USART2_UART_Init+0x94>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c4:	4b17      	ldr	r3, [pc, #92]	@ (8001824 <MX_USART2_UART_Init+0x94>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ca:	4b16      	ldr	r3, [pc, #88]	@ (8001824 <MX_USART2_UART_Init+0x94>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017d0:	4b14      	ldr	r3, [pc, #80]	@ (8001824 <MX_USART2_UART_Init+0x94>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017d6:	4b13      	ldr	r3, [pc, #76]	@ (8001824 <MX_USART2_UART_Init+0x94>)
 80017d8:	2200      	movs	r2, #0
 80017da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017dc:	4811      	ldr	r0, [pc, #68]	@ (8001824 <MX_USART2_UART_Init+0x94>)
 80017de:	f007 f877 	bl	80088d0 <HAL_UART_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80017e8:	f000 f9f0 	bl	8001bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017ec:	2100      	movs	r1, #0
 80017ee:	480d      	ldr	r0, [pc, #52]	@ (8001824 <MX_USART2_UART_Init+0x94>)
 80017f0:	f008 fdb8 	bl	800a364 <HAL_UARTEx_SetTxFifoThreshold>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80017fa:	f000 f9e7 	bl	8001bcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017fe:	2100      	movs	r1, #0
 8001800:	4808      	ldr	r0, [pc, #32]	@ (8001824 <MX_USART2_UART_Init+0x94>)
 8001802:	f008 fded 	bl	800a3e0 <HAL_UARTEx_SetRxFifoThreshold>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 800180c:	f000 f9de 	bl	8001bcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001810:	4804      	ldr	r0, [pc, #16]	@ (8001824 <MX_USART2_UART_Init+0x94>)
 8001812:	f008 fd6e 	bl	800a2f2 <HAL_UARTEx_DisableFifoMode>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 800181c:	f000 f9d6 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000a18 	.word	0x20000a18
 8001828:	40004400 	.word	0x40004400

0800182c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001832:	4b1a      	ldr	r3, [pc, #104]	@ (800189c <MX_DMA_Init+0x70>)
 8001834:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001836:	4a19      	ldr	r2, [pc, #100]	@ (800189c <MX_DMA_Init+0x70>)
 8001838:	f043 0304 	orr.w	r3, r3, #4
 800183c:	6493      	str	r3, [r2, #72]	@ 0x48
 800183e:	4b17      	ldr	r3, [pc, #92]	@ (800189c <MX_DMA_Init+0x70>)
 8001840:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800184a:	4b14      	ldr	r3, [pc, #80]	@ (800189c <MX_DMA_Init+0x70>)
 800184c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800184e:	4a13      	ldr	r2, [pc, #76]	@ (800189c <MX_DMA_Init+0x70>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6493      	str	r3, [r2, #72]	@ 0x48
 8001856:	4b11      	ldr	r3, [pc, #68]	@ (800189c <MX_DMA_Init+0x70>)
 8001858:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	200b      	movs	r0, #11
 8001868:	f003 f9df 	bl	8004c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800186c:	200b      	movs	r0, #11
 800186e:	f003 f9f6 	bl	8004c5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	200c      	movs	r0, #12
 8001878:	f003 f9d7 	bl	8004c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800187c:	200c      	movs	r0, #12
 800187e:	f003 f9ee 	bl	8004c5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	200d      	movs	r0, #13
 8001888:	f003 f9cf 	bl	8004c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800188c:	200d      	movs	r0, #13
 800188e:	f003 f9e6 	bl	8004c5e <HAL_NVIC_EnableIRQ>

}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40021000 	.word	0x40021000

080018a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	@ 0x28
 80018a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	60da      	str	r2, [r3, #12]
 80018b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b6:	4b67      	ldr	r3, [pc, #412]	@ (8001a54 <MX_GPIO_Init+0x1b4>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ba:	4a66      	ldr	r2, [pc, #408]	@ (8001a54 <MX_GPIO_Init+0x1b4>)
 80018bc:	f043 0304 	orr.w	r3, r3, #4
 80018c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018c2:	4b64      	ldr	r3, [pc, #400]	@ (8001a54 <MX_GPIO_Init+0x1b4>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c6:	f003 0304 	and.w	r3, r3, #4
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018ce:	4b61      	ldr	r3, [pc, #388]	@ (8001a54 <MX_GPIO_Init+0x1b4>)
 80018d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d2:	4a60      	ldr	r2, [pc, #384]	@ (8001a54 <MX_GPIO_Init+0x1b4>)
 80018d4:	f043 0320 	orr.w	r3, r3, #32
 80018d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018da:	4b5e      	ldr	r3, [pc, #376]	@ (8001a54 <MX_GPIO_Init+0x1b4>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018de:	f003 0320 	and.w	r3, r3, #32
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e6:	4b5b      	ldr	r3, [pc, #364]	@ (8001a54 <MX_GPIO_Init+0x1b4>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ea:	4a5a      	ldr	r2, [pc, #360]	@ (8001a54 <MX_GPIO_Init+0x1b4>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018f2:	4b58      	ldr	r3, [pc, #352]	@ (8001a54 <MX_GPIO_Init+0x1b4>)
 80018f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fe:	4b55      	ldr	r3, [pc, #340]	@ (8001a54 <MX_GPIO_Init+0x1b4>)
 8001900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001902:	4a54      	ldr	r2, [pc, #336]	@ (8001a54 <MX_GPIO_Init+0x1b4>)
 8001904:	f043 0302 	orr.w	r3, r3, #2
 8001908:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800190a:	4b52      	ldr	r3, [pc, #328]	@ (8001a54 <MX_GPIO_Init+0x1b4>)
 800190c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Direaction_motor_Pin|Emergency_light_Pin, GPIO_PIN_RESET);
 8001916:	2200      	movs	r2, #0
 8001918:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800191c:	484e      	ldr	r0, [pc, #312]	@ (8001a58 <MX_GPIO_Init+0x1b8>)
 800191e:	f003 fe85 	bl	800562c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Solenoid_valve_push_Pin, GPIO_PIN_RESET);
 8001922:	2200      	movs	r2, #0
 8001924:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8001928:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800192c:	f003 fe7e 	bl	800562c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin, GPIO_PIN_RESET);
 8001930:	2200      	movs	r2, #0
 8001932:	f240 4116 	movw	r1, #1046	@ 0x416
 8001936:	4849      	ldr	r0, [pc, #292]	@ (8001a5c <MX_GPIO_Init+0x1bc>)
 8001938:	f003 fe78 	bl	800562c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800193c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001942:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001946:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	4619      	mov	r1, r3
 8001952:	4841      	ldr	r0, [pc, #260]	@ (8001a58 <MX_GPIO_Init+0x1b8>)
 8001954:	f003 fcd0 	bl	80052f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Direaction_motor_Pin */
  GPIO_InitStruct.Pin = Direaction_motor_Pin;
 8001958:	2302      	movs	r3, #2
 800195a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195c:	2301      	movs	r3, #1
 800195e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001964:	2303      	movs	r3, #3
 8001966:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direaction_motor_GPIO_Port, &GPIO_InitStruct);
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	4619      	mov	r1, r3
 800196e:	483a      	ldr	r0, [pc, #232]	@ (8001a58 <MX_GPIO_Init+0x1b8>)
 8001970:	f003 fcc2 	bl	80052f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Solenoid_valve_push_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Solenoid_valve_push_Pin;
 8001974:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197a:	2301      	movs	r3, #1
 800197c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	4619      	mov	r1, r3
 800198c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001990:	f003 fcb2 	bl	80052f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : joy_switch_3_Pin joy_switch_4_Pin Set_home_Pin Reed_switch_pull_Pin */
  GPIO_InitStruct.Pin = joy_switch_3_Pin|joy_switch_4_Pin|Set_home_Pin|Reed_switch_pull_Pin;
 8001994:	23f0      	movs	r3, #240	@ 0xf0
 8001996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001998:	2300      	movs	r3, #0
 800199a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	4619      	mov	r1, r3
 80019a6:	482c      	ldr	r0, [pc, #176]	@ (8001a58 <MX_GPIO_Init+0x1b8>)
 80019a8:	f003 fca6 	bl	80052f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pilot_controller_error_Pin Pilot_motor_error_Pin Solenoid_valve_pull_Pin Solenoid_valve_vacuum_Pin */
  GPIO_InitStruct.Pin = Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin;
 80019ac:	f240 4316 	movw	r3, #1046	@ 0x416
 80019b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b2:	2301      	movs	r3, #1
 80019b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	2300      	movs	r3, #0
 80019bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	4619      	mov	r1, r3
 80019c4:	4825      	ldr	r0, [pc, #148]	@ (8001a5c <MX_GPIO_Init+0x1bc>)
 80019c6:	f003 fc97 	bl	80052f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Proximity_Pin joy_switch_1_Pin */
  GPIO_InitStruct.Pin = Proximity_Pin|joy_switch_1_Pin;
 80019ca:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 80019ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4619      	mov	r1, r3
 80019de:	481f      	ldr	r0, [pc, #124]	@ (8001a5c <MX_GPIO_Init+0x1bc>)
 80019e0:	f003 fc8a 	bl	80052f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_switch_Pin */
  GPIO_InitStruct.Pin = Emergency_switch_Pin;
 80019e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019ea:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80019ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_switch_GPIO_Port, &GPIO_InitStruct);
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	4619      	mov	r1, r3
 80019fa:	4818      	ldr	r0, [pc, #96]	@ (8001a5c <MX_GPIO_Init+0x1bc>)
 80019fc:	f003 fc7c 	bl	80052f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_light_Pin */
  GPIO_InitStruct.Pin = Emergency_light_Pin;
 8001a00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a06:	2301      	movs	r3, #1
 8001a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Emergency_light_GPIO_Port, &GPIO_InitStruct);
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	4619      	mov	r1, r3
 8001a18:	480f      	ldr	r0, [pc, #60]	@ (8001a58 <MX_GPIO_Init+0x1b8>)
 8001a1a:	f003 fc6d 	bl	80052f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Reed_switch_push_Pin joy_switch_2_Pin */
  GPIO_InitStruct.Pin = Reed_switch_push_Pin|joy_switch_2_Pin;
 8001a1e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	4619      	mov	r1, r3
 8001a32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a36:	f003 fc5f 	bl	80052f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	2028      	movs	r0, #40	@ 0x28
 8001a40:	f003 f8f3 	bl	8004c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a44:	2028      	movs	r0, #40	@ 0x28
 8001a46:	f003 f90a 	bl	8004c5e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a4a:	bf00      	nop
 8001a4c:	3728      	adds	r7, #40	@ 0x28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000
 8001a58:	48000800 	.word	0x48000800
 8001a5c:	48000400 	.word	0x48000400

08001a60 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Main timer interrupt for run program with accuracy time
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	@ 0x28
 8001a64:	af08      	add	r7, sp, #32
 8001a66:	6078      	str	r0, [r7, #4]
//			registerFrame[0x13].U16 = encoder.mmpss;	// Z-axis Acceleration(0x13)    //////ความเร่งต้องเปลี่ยน/////
//			registerFrame[0x40].U16 = encoder.rpm;		// X-axis Actual Position(0x40)
//		  heartbeat_status = 0;
//		}
	}
	if(htim == &htim3){
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a36      	ldr	r2, [pc, #216]	@ (8001b44 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d165      	bne.n	8001b3c <HAL_TIM_PeriodElapsedCallback+0xdc>
		// Update main
		Update_qei(&encoder, &htim4);
 8001a70:	4935      	ldr	r1, [pc, #212]	@ (8001b48 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001a72:	4836      	ldr	r0, [pc, #216]	@ (8001b4c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001a74:	f000 f9c8 	bl	8001e08 <Update_qei>
		Update_adc(&current_sensor);
 8001a78:	4835      	ldr	r0, [pc, #212]	@ (8001b50 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001a7a:	f7ff fada 	bl	8001032 <Update_adc>
		Update_actual_eff(&eff, &registerFrame,GPIOC, GPIO_PIN_7, GPIOA, GPIO_PIN_9); // Pull -> Push
 8001a7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a82:	9301      	str	r3, [sp, #4]
 8001a84:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	2380      	movs	r3, #128	@ 0x80
 8001a8c:	4a31      	ldr	r2, [pc, #196]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001a8e:	4932      	ldr	r1, [pc, #200]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001a90:	4832      	ldr	r0, [pc, #200]	@ (8001b5c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001a92:	f7ff fb06 	bl	80010a2 <Update_actual_eff>
		Gripper_Movement_Status(&eff);
 8001a96:	4831      	ldr	r0, [pc, #196]	@ (8001b5c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001a98:	f7ff f974 	bl	8000d84 <Gripper_Movement_Status>
		if(emer.emer_state == 1){
 8001a9c:	4b30      	ldr	r3, [pc, #192]	@ (8001b60 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d126      	bne.n	8001af2 <HAL_TIM_PeriodElapsedCallback+0x92>
			Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	4a2a      	ldr	r2, [pc, #168]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001aac:	2100      	movs	r1, #0
 8001aae:	482d      	ldr	r0, [pc, #180]	@ (8001b64 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001ab0:	f000 f8b7 	bl	8001c22 <Update_pwm>
			// Check for homing from base system
			Set_Home();
 8001ab4:	f7ff f9f8 	bl	8000ea8 <Set_Home>
			// homing function for homing state and reset emergency state
			homing(&home, GPIOB, GPIO_PIN_12, &htim1, TIM_CHANNEL_1,
 8001ab8:	4b24      	ldr	r3, [pc, #144]	@ (8001b4c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001aba:	9306      	str	r3, [sp, #24]
 8001abc:	2340      	movs	r3, #64	@ 0x40
 8001abe:	9305      	str	r3, [sp, #20]
 8001ac0:	4b24      	ldr	r3, [pc, #144]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001ac2:	9304      	str	r3, [sp, #16]
 8001ac4:	4b24      	ldr	r3, [pc, #144]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001ac6:	9303      	str	r3, [sp, #12]
 8001ac8:	2302      	movs	r3, #2
 8001aca:	9302      	str	r3, [sp, #8]
 8001acc:	4b21      	ldr	r3, [pc, #132]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001ace:	9301      	str	r3, [sp, #4]
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	4b23      	ldr	r3, [pc, #140]	@ (8001b64 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001ad6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ada:	4923      	ldr	r1, [pc, #140]	@ (8001b68 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001adc:	4823      	ldr	r0, [pc, #140]	@ (8001b6c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001ade:	f000 fbf9 	bl	80022d4 <homing>
					GPIOC, GPIO_PIN_1, &registerFrame, GPIOC,
					GPIO_PIN_6, &encoder);
			if(home.is_home == 1){
 8001ae2:	4b22      	ldr	r3, [pc, #136]	@ (8001b6c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001ae4:	78db      	ldrb	r3, [r3, #3]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d128      	bne.n	8001b3c <HAL_TIM_PeriodElapsedCallback+0xdc>
				emer.emer_state = 0; // Reset emergency state
 8001aea:	4b1d      	ldr	r3, [pc, #116]	@ (8001b60 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
//					homing_ts++;
//				}
//			}
//		}
	}
}
 8001af0:	e024      	b.n	8001b3c <HAL_TIM_PeriodElapsedCallback+0xdc>
		else if(encoder.mm >= 685 || encoder.mm <= 5){
 8001af2:	4b16      	ldr	r3, [pc, #88]	@ (8001b4c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001af4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001af8:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001b70 <HAL_TIM_PeriodElapsedCallback+0x110>
 8001afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b04:	da09      	bge.n	8001b1a <HAL_TIM_PeriodElapsedCallback+0xba>
 8001b06:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001b08:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001b0c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001b10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b18:	d808      	bhi.n	8001b2c <HAL_TIM_PeriodElapsedCallback+0xcc>
			Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	2302      	movs	r3, #2
 8001b20:	4a0c      	ldr	r2, [pc, #48]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001b22:	2100      	movs	r1, #0
 8001b24:	480f      	ldr	r0, [pc, #60]	@ (8001b64 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001b26:	f000 f87c 	bl	8001c22 <Update_pwm>
}
 8001b2a:	e007      	b.n	8001b3c <HAL_TIM_PeriodElapsedCallback+0xdc>
		else if(tuning == 1){
 8001b2c:	4b11      	ldr	r3, [pc, #68]	@ (8001b74 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d003      	beq.n	8001b3c <HAL_TIM_PeriodElapsedCallback+0xdc>
			Set_Shelves();
 8001b34:	f7ff f958 	bl	8000de8 <Set_Shelves>
			Set_Goal_Point();
 8001b38:	f7ff f98e 	bl	8000e58 <Set_Goal_Point>
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	200006e8 	.word	0x200006e8
 8001b48:	200007b4 	.word	0x200007b4
 8001b4c:	20000e18 	.word	0x20000e18
 8001b50:	20000d4c 	.word	0x20000d4c
 8001b54:	48000800 	.word	0x48000800
 8001b58:	20000bb4 	.word	0x20000bb4
 8001b5c:	20000d44 	.word	0x20000d44
 8001b60:	20000bb0 	.word	0x20000bb0
 8001b64:	2000061c 	.word	0x2000061c
 8001b68:	48000400 	.word	0x48000400
 8001b6c:	20000bac 	.word	0x20000bac
 8001b70:	442b4000 	.word	0x442b4000
 8001b74:	20000ba4 	.word	0x20000ba4

08001b78 <HAL_GPIO_EXTI_Callback>:
// GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af02      	add	r7, sp, #8
 8001b7e:	4603      	mov	r3, r0
 8001b80:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_15){
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b88:	d113      	bne.n	8001bb2 <HAL_GPIO_EXTI_Callback+0x3a>
		// Emergency switch interrupted
		// Stop motor
		Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2302      	movs	r3, #2
 8001b90:	4a0a      	ldr	r2, [pc, #40]	@ (8001bbc <HAL_GPIO_EXTI_Callback+0x44>)
 8001b92:	2100      	movs	r1, #0
 8001b94:	480a      	ldr	r0, [pc, #40]	@ (8001bc0 <HAL_GPIO_EXTI_Callback+0x48>)
 8001b96:	f000 f844 	bl	8001c22 <Update_pwm>
		// Emergency light enable
		Reset_qei(&encoder);
 8001b9a:	480a      	ldr	r0, [pc, #40]	@ (8001bc4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001b9c:	f000 fb4c 	bl	8002238 <Reset_qei>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, SET);
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ba6:	4805      	ldr	r0, [pc, #20]	@ (8001bbc <HAL_GPIO_EXTI_Callback+0x44>)
 8001ba8:	f003 fd40 	bl	800562c <HAL_GPIO_WritePin>
		emer.emer_state = 1;
 8001bac:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <HAL_GPIO_EXTI_Callback+0x50>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	701a      	strb	r2, [r3, #0]
	}
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	48000800 	.word	0x48000800
 8001bc0:	2000061c 	.word	0x2000061c
 8001bc4:	20000e18 	.word	0x20000e18
 8001bc8:	20000bb0 	.word	0x20000bb0

08001bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd0:	b672      	cpsid	i
}
 8001bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <Error_Handler+0x8>

08001bd8 <PID_init>:
 *  Created on: Apr 26, 2024
 *      Author: naker
 */
#include "pid.h"

void PID_init(PID* pid, float32_t _kp,  float32_t _ki, float32_t _kd, float32_t _sampt){
 8001bd8:	b480      	push	{r7}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6178      	str	r0, [r7, #20]
 8001be0:	ed87 0a04 	vstr	s0, [r7, #16]
 8001be4:	edc7 0a03 	vstr	s1, [r7, #12]
 8001be8:	ed87 1a02 	vstr	s2, [r7, #8]
 8001bec:	edc7 1a01 	vstr	s3, [r7, #4]
	pid -> kp = _kp;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	601a      	str	r2, [r3, #0]
	pid -> ki = _ki;
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	605a      	str	r2, [r3, #4]
	pid -> kd = _kd;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	609a      	str	r2, [r3, #8]
	pid -> sampt = _sampt;
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	60da      	str	r2, [r3, #12]
	pid -> y_n = 0.0;
 8001c08:	6979      	ldr	r1, [r7, #20]
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	f04f 0300 	mov.w	r3, #0
 8001c12:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001c16:	bf00      	nop
 8001c18:	371c      	adds	r7, #28
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <Update_pwm>:
 *      Author: naker
 */

#include "pwm.h"

void Update_pwm(TIM_HandleTypeDef* htim, uint16_t htim_channel,GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, int32_t pwm_signal) {
 8001c22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c26:	b08b      	sub	sp, #44	@ 0x2c
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6278      	str	r0, [r7, #36]	@ 0x24
 8001c2c:	61fa      	str	r2, [r7, #28]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	460b      	mov	r3, r1
 8001c32:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001c34:	4613      	mov	r3, r2
 8001c36:	843b      	strh	r3, [r7, #32]
	__HAL_TIM_SET_COMPARE(htim, htim_channel, fabs(pwm_signal));
 8001c38:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d111      	bne.n	8001c62 <Update_pwm+0x40>
 8001c3e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001c40:	f7fe fc3c 	bl	80004bc <__aeabi_i2d>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	613a      	str	r2, [r7, #16]
 8001c4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c52:	681c      	ldr	r4, [r3, #0]
 8001c54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c58:	f7fe feac 	bl	80009b4 <__aeabi_d2uiz>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8001c60:	e061      	b.n	8001d26 <Update_pwm+0x104>
 8001c62:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d111      	bne.n	8001c8c <Update_pwm+0x6a>
 8001c68:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001c6a:	f7fe fc27 	bl	80004bc <__aeabi_i2d>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	60ba      	str	r2, [r7, #8]
 8001c74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7c:	681c      	ldr	r4, [r3, #0]
 8001c7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c82:	f7fe fe97 	bl	80009b4 <__aeabi_d2uiz>
 8001c86:	4603      	mov	r3, r0
 8001c88:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001c8a:	e04c      	b.n	8001d26 <Update_pwm+0x104>
 8001c8c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d111      	bne.n	8001cb6 <Update_pwm+0x94>
 8001c92:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001c94:	f7fe fc12 	bl	80004bc <__aeabi_i2d>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	603a      	str	r2, [r7, #0]
 8001c9e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca6:	681c      	ldr	r4, [r3, #0]
 8001ca8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cac:	f7fe fe82 	bl	80009b4 <__aeabi_d2uiz>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8001cb4:	e037      	b.n	8001d26 <Update_pwm+0x104>
 8001cb6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001cb8:	2b0c      	cmp	r3, #12
 8001cba:	d110      	bne.n	8001cde <Update_pwm+0xbc>
 8001cbc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001cbe:	f7fe fbfd 	bl	80004bc <__aeabi_i2d>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4615      	mov	r5, r2
 8001cc8:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cce:	681c      	ldr	r4, [r3, #0]
 8001cd0:	4628      	mov	r0, r5
 8001cd2:	4631      	mov	r1, r6
 8001cd4:	f7fe fe6e 	bl	80009b4 <__aeabi_d2uiz>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	6423      	str	r3, [r4, #64]	@ 0x40
 8001cdc:	e023      	b.n	8001d26 <Update_pwm+0x104>
 8001cde:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001ce0:	2b10      	cmp	r3, #16
 8001ce2:	d110      	bne.n	8001d06 <Update_pwm+0xe4>
 8001ce4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001ce6:	f7fe fbe9 	bl	80004bc <__aeabi_i2d>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4692      	mov	sl, r2
 8001cf0:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf6:	681c      	ldr	r4, [r3, #0]
 8001cf8:	4650      	mov	r0, sl
 8001cfa:	4659      	mov	r1, fp
 8001cfc:	f7fe fe5a 	bl	80009b4 <__aeabi_d2uiz>
 8001d00:	4603      	mov	r3, r0
 8001d02:	64a3      	str	r3, [r4, #72]	@ 0x48
 8001d04:	e00f      	b.n	8001d26 <Update_pwm+0x104>
 8001d06:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001d08:	f7fe fbd8 	bl	80004bc <__aeabi_i2d>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4690      	mov	r8, r2
 8001d12:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d18:	681c      	ldr	r4, [r3, #0]
 8001d1a:	4640      	mov	r0, r8
 8001d1c:	4649      	mov	r1, r9
 8001d1e:	f7fe fe49 	bl	80009b4 <__aeabi_d2uiz>
 8001d22:	4603      	mov	r3, r0
 8001d24:	64e3      	str	r3, [r4, #76]	@ 0x4c
	if (pwm_signal < 0) {
 8001d26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	da06      	bge.n	8001d3a <Update_pwm+0x118>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, RESET);
 8001d2c:	8c3b      	ldrh	r3, [r7, #32]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	4619      	mov	r1, r3
 8001d32:	69f8      	ldr	r0, [r7, #28]
 8001d34:	f003 fc7a 	bl	800562c <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
	}
}
 8001d38:	e005      	b.n	8001d46 <Update_pwm+0x124>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
 8001d3a:	8c3b      	ldrh	r3, [r7, #32]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	4619      	mov	r1, r3
 8001d40:	69f8      	ldr	r0, [r7, #28]
 8001d42:	f003 fc73 	bl	800562c <HAL_GPIO_WritePin>
}
 8001d46:	bf00      	nop
 8001d48:	372c      	adds	r7, #44	@ 0x2c
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001d50 <QEI_init>:
 *  Created on: Apr 24, 2024
 *      Author: naker
 */
#include "qei.h"

void QEI_init(QEI* qei, int32_t ppr, int32_t freq, int32_t period){
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	603b      	str	r3, [r7, #0]
	qei -> ppr = ppr;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	601a      	str	r2, [r3, #0]
	qei -> freq = freq;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	605a      	str	r2, [r3, #4]
	qei -> period = period;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	609a      	str	r2, [r3, #8]
	qei -> counter_value[NEW] = 0;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 8001d82:	68f9      	ldr	r1, [r7, #12]
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	f04f 0300 	mov.w	r3, #0
 8001d8c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0.0;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0.0;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	621a      	str	r2, [r3, #32]
	qei -> mm = 0.0;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	629a      	str	r2, [r3, #40]	@ 0x28
	qei -> pps = 0.0;
 8001da8:	68f9      	ldr	r1, [r7, #12]
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> rpm = 0.0;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> radps = 0.0;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> mmps = 0.0;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	641a      	str	r2, [r3, #64]	@ 0x40
	qei -> radpss = 0.0;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	655a      	str	r2, [r3, #84]	@ 0x54
	qei -> rpms = 0.0;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	659a      	str	r2, [r3, #88]	@ 0x58
	qei -> mmpss = 0.0;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	65da      	str	r2, [r3, #92]	@ 0x5c
	qei -> velocity_value[NEW] = 0;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	645a      	str	r2, [r3, #68]	@ 0x44
	qei -> velocity_value[OLD] = 0;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	649a      	str	r2, [r3, #72]	@ 0x48

}
 8001df6:	bf00      	nop
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	0000      	movs	r0, r0
 8001e04:	0000      	movs	r0, r0
	...

08001e08 <Update_qei>:

void Update_qei(QEI* qei, TIM_HandleTypeDef* htim){
 8001e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	6039      	str	r1, [r7, #0]
	// Update counter
	qei -> counter_value[NEW] = __HAL_TIM_GET_COUNTER(htim);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	60da      	str	r2, [r3, #12]
	// Update difference of counter's value = NEW - OLD
	qei -> diff_counter_value = qei -> counter_value[NEW] - qei -> counter_value[OLD];
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	461a      	mov	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	615a      	str	r2, [r3, #20]
	if(qei -> diff_counter_value > qei -> period / 2){
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	695a      	ldr	r2, [r3, #20]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	0fd9      	lsrs	r1, r3, #31
 8001e38:	440b      	add	r3, r1
 8001e3a:	105b      	asrs	r3, r3, #1
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	dd06      	ble.n	8001e4e <Update_qei+0x46>
		qei -> diff_counter_value -= qei -> period;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	695a      	ldr	r2, [r3, #20]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	1ad2      	subs	r2, r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	615a      	str	r2, [r3, #20]
	}
	// over flow problem
	if(qei -> diff_counter_value < -(qei -> period) / 2){
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695a      	ldr	r2, [r3, #20]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	425b      	negs	r3, r3
 8001e58:	0fd9      	lsrs	r1, r3, #31
 8001e5a:	440b      	add	r3, r1
 8001e5c:	105b      	asrs	r3, r3, #1
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	da06      	bge.n	8001e70 <Update_qei+0x68>
		qei -> diff_counter_value += qei -> period;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695a      	ldr	r2, [r3, #20]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	441a      	add	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	615a      	str	r2, [r3, #20]
	}
	// Update velocity at difference unit
	qei -> pps = (float)qei -> diff_counter_value * (float)(qei -> freq);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	ee07 3a90 	vmov	s15, r3
 8001e78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	ee07 3a90 	vmov	s15, r3
 8001e84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e8c:	ee17 0a90 	vmov	r0, s15
 8001e90:	f7fe fb26 	bl	80004e0 <__aeabi_f2d>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> radps = qei -> pps * 2.0 * M_PI / (float)(qei -> ppr);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	f7fe f9bc 	bl	8000224 <__adddf3>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	a3dc      	add	r3, pc, #880	@ (adr r3, 8002228 <Update_qei+0x420>)
 8001eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eba:	f7fe fb69 	bl	8000590 <__aeabi_dmul>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	4692      	mov	sl, r2
 8001ec4:	469b      	mov	fp, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	ee07 3a90 	vmov	s15, r3
 8001ece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed2:	ee17 0a90 	vmov	r0, s15
 8001ed6:	f7fe fb03 	bl	80004e0 <__aeabi_f2d>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4650      	mov	r0, sl
 8001ee0:	4659      	mov	r1, fp
 8001ee2:	f7fe fc7f 	bl	80007e4 <__aeabi_ddiv>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4610      	mov	r0, r2
 8001eec:	4619      	mov	r1, r3
 8001eee:	f7fe fd81 	bl	80009f4 <__aeabi_d2f>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> rpm = qei -> pps * 60.0 / (float)(qei -> ppr) ;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	4bcb      	ldr	r3, [pc, #812]	@ (8002230 <Update_qei+0x428>)
 8001f04:	f7fe fb44 	bl	8000590 <__aeabi_dmul>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4692      	mov	sl, r2
 8001f0e:	469b      	mov	fp, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	ee07 3a90 	vmov	s15, r3
 8001f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f1c:	ee17 0a90 	vmov	r0, s15
 8001f20:	f7fe fade 	bl	80004e0 <__aeabi_f2d>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4650      	mov	r0, sl
 8001f2a:	4659      	mov	r1, fp
 8001f2c:	f7fe fc5a 	bl	80007e4 <__aeabi_ddiv>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4610      	mov	r0, r2
 8001f36:	4619      	mov	r1, r3
 8001f38:	f7fe fd5c 	bl	80009f4 <__aeabi_d2f>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> mmps = qei -> pps * 16.0 / (float)(qei -> ppr);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	4bb9      	ldr	r3, [pc, #740]	@ (8002234 <Update_qei+0x42c>)
 8001f4e:	f7fe fb1f 	bl	8000590 <__aeabi_dmul>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	4692      	mov	sl, r2
 8001f58:	469b      	mov	fp, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	ee07 3a90 	vmov	s15, r3
 8001f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f66:	ee17 0a90 	vmov	r0, s15
 8001f6a:	f7fe fab9 	bl	80004e0 <__aeabi_f2d>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4650      	mov	r0, sl
 8001f74:	4659      	mov	r1, fp
 8001f76:	f7fe fc35 	bl	80007e4 <__aeabi_ddiv>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4610      	mov	r0, r2
 8001f80:	4619      	mov	r1, r3
 8001f82:	f7fe fd37 	bl	80009f4 <__aeabi_d2f>
 8001f86:	4602      	mov	r2, r0
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	641a      	str	r2, [r3, #64]	@ 0x40

	// Update position at difference unit
	qei -> pulse += qei -> diff_counter_value;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	6949      	ldr	r1, [r1, #20]
 8001f96:	17c8      	asrs	r0, r1, #31
 8001f98:	460c      	mov	r4, r1
 8001f9a:	4605      	mov	r5, r0
 8001f9c:	eb12 0804 	adds.w	r8, r2, r4
 8001fa0:	eb43 0905 	adc.w	r9, r3, r5
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	e9c3 8906 	strd	r8, r9, [r3, #24]
	qei -> rad += (float)qei -> diff_counter_value * 2.0 * M_PI / (float)(qei -> ppr);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fa96 	bl	80004e0 <__aeabi_f2d>
 8001fb4:	4604      	mov	r4, r0
 8001fb6:	460d      	mov	r5, r1
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	ee07 3a90 	vmov	s15, r3
 8001fc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fc4:	ee17 0a90 	vmov	r0, s15
 8001fc8:	f7fe fa8a 	bl	80004e0 <__aeabi_f2d>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	f7fe f928 	bl	8000224 <__adddf3>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4610      	mov	r0, r2
 8001fda:	4619      	mov	r1, r3
 8001fdc:	a392      	add	r3, pc, #584	@ (adr r3, 8002228 <Update_qei+0x420>)
 8001fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe2:	f7fe fad5 	bl	8000590 <__aeabi_dmul>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4690      	mov	r8, r2
 8001fec:	4699      	mov	r9, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	ee07 3a90 	vmov	s15, r3
 8001ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ffa:	ee17 0a90 	vmov	r0, s15
 8001ffe:	f7fe fa6f 	bl	80004e0 <__aeabi_f2d>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4640      	mov	r0, r8
 8002008:	4649      	mov	r1, r9
 800200a:	f7fe fbeb 	bl	80007e4 <__aeabi_ddiv>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4620      	mov	r0, r4
 8002014:	4629      	mov	r1, r5
 8002016:	f7fe f905 	bl	8000224 <__adddf3>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4610      	mov	r0, r2
 8002020:	4619      	mov	r1, r3
 8002022:	f7fe fce7 	bl	80009f4 <__aeabi_d2f>
 8002026:	4602      	mov	r2, r0
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev += (float)qei -> diff_counter_value / (float)(qei -> ppr);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	ed93 7a08 	vldr	s14, [r3, #32]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	ee07 3a90 	vmov	s15, r3
 800203a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	ee07 3a90 	vmov	s15, r3
 8002046:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800204a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800204e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	edc3 7a08 	vstr	s15, [r3, #32]
	qei -> mm += (float)qei -> diff_counter_value * 16.0 / (float)(qei -> ppr); // for lead 16 mm.
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe fa3f 	bl	80004e0 <__aeabi_f2d>
 8002062:	4604      	mov	r4, r0
 8002064:	460d      	mov	r5, r1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	ee07 3a90 	vmov	s15, r3
 800206e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002072:	ee17 0a90 	vmov	r0, s15
 8002076:	f7fe fa33 	bl	80004e0 <__aeabi_f2d>
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	4b6d      	ldr	r3, [pc, #436]	@ (8002234 <Update_qei+0x42c>)
 8002080:	f7fe fa86 	bl	8000590 <__aeabi_dmul>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4690      	mov	r8, r2
 800208a:	4699      	mov	r9, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	ee07 3a90 	vmov	s15, r3
 8002094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002098:	ee17 0a90 	vmov	r0, s15
 800209c:	f7fe fa20 	bl	80004e0 <__aeabi_f2d>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4640      	mov	r0, r8
 80020a6:	4649      	mov	r1, r9
 80020a8:	f7fe fb9c 	bl	80007e4 <__aeabi_ddiv>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4620      	mov	r0, r4
 80020b2:	4629      	mov	r1, r5
 80020b4:	f7fe f8b6 	bl	8000224 <__adddf3>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4610      	mov	r0, r2
 80020be:	4619      	mov	r1, r3
 80020c0:	f7fe fc98 	bl	80009f4 <__aeabi_d2f>
 80020c4:	4602      	mov	r2, r0
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	629a      	str	r2, [r3, #40]	@ 0x28

	// Update acceleration
	qei -> velocity_value[NEW] = qei -> pps;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80020d0:	4610      	mov	r0, r2
 80020d2:	4619      	mov	r1, r3
 80020d4:	f7fe fc8e 	bl	80009f4 <__aeabi_d2f>
 80020d8:	4602      	mov	r2, r0
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	645a      	str	r2, [r3, #68]	@ 0x44
	qei -> diff_velocity_value = qei -> velocity_value[NEW] - qei -> velocity_value[OLD];
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80020ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	qei -> ppss = qei -> diff_velocity_value * (float)(qei -> freq);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	ee07 3a90 	vmov	s15, r3
 8002102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	qei -> radpss = qei -> ppss * 2.0 * M_PI / (float)(qei -> ppr);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe f9e3 	bl	80004e0 <__aeabi_f2d>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	f7fe f881 	bl	8000224 <__adddf3>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4610      	mov	r0, r2
 8002128:	4619      	mov	r1, r3
 800212a:	a33f      	add	r3, pc, #252	@ (adr r3, 8002228 <Update_qei+0x420>)
 800212c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002130:	f7fe fa2e 	bl	8000590 <__aeabi_dmul>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4614      	mov	r4, r2
 800213a:	461d      	mov	r5, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	ee07 3a90 	vmov	s15, r3
 8002144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002148:	ee17 0a90 	vmov	r0, s15
 800214c:	f7fe f9c8 	bl	80004e0 <__aeabi_f2d>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4620      	mov	r0, r4
 8002156:	4629      	mov	r1, r5
 8002158:	f7fe fb44 	bl	80007e4 <__aeabi_ddiv>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	f7fe fc46 	bl	80009f4 <__aeabi_d2f>
 8002168:	4602      	mov	r2, r0
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	655a      	str	r2, [r3, #84]	@ 0x54
	qei -> rpms = qei -> ppss * 60.0 / (float)(qei -> ppr);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe f9b4 	bl	80004e0 <__aeabi_f2d>
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	4b2c      	ldr	r3, [pc, #176]	@ (8002230 <Update_qei+0x428>)
 800217e:	f7fe fa07 	bl	8000590 <__aeabi_dmul>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4614      	mov	r4, r2
 8002188:	461d      	mov	r5, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	ee07 3a90 	vmov	s15, r3
 8002192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002196:	ee17 0a90 	vmov	r0, s15
 800219a:	f7fe f9a1 	bl	80004e0 <__aeabi_f2d>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4620      	mov	r0, r4
 80021a4:	4629      	mov	r1, r5
 80021a6:	f7fe fb1d 	bl	80007e4 <__aeabi_ddiv>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4610      	mov	r0, r2
 80021b0:	4619      	mov	r1, r3
 80021b2:	f7fe fc1f 	bl	80009f4 <__aeabi_d2f>
 80021b6:	4602      	mov	r2, r0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	659a      	str	r2, [r3, #88]	@ 0x58
	qei -> mmpss = qei -> ppss * 16.0 / (float)(qei -> ppr); // Acceleration in mm/s^2
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe f98d 	bl	80004e0 <__aeabi_f2d>
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002234 <Update_qei+0x42c>)
 80021cc:	f7fe f9e0 	bl	8000590 <__aeabi_dmul>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4614      	mov	r4, r2
 80021d6:	461d      	mov	r5, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	ee07 3a90 	vmov	s15, r3
 80021e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021e4:	ee17 0a90 	vmov	r0, s15
 80021e8:	f7fe f97a 	bl	80004e0 <__aeabi_f2d>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4620      	mov	r0, r4
 80021f2:	4629      	mov	r1, r5
 80021f4:	f7fe faf6 	bl	80007e4 <__aeabi_ddiv>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4610      	mov	r0, r2
 80021fe:	4619      	mov	r1, r3
 8002200:	f7fe fbf8 	bl	80009f4 <__aeabi_d2f>
 8002204:	4602      	mov	r2, r0
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	65da      	str	r2, [r3, #92]	@ 0x5c

	// Update OLD value
	qei -> counter_value[OLD] = qei -> counter_value[NEW];
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	611a      	str	r2, [r3, #16]
	qei -> velocity_value[OLD] = qei -> velocity_value[NEW];
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	649a      	str	r2, [r3, #72]	@ 0x48

}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002224:	f3af 8000 	nop.w
 8002228:	54442d18 	.word	0x54442d18
 800222c:	400921fb 	.word	0x400921fb
 8002230:	404e0000 	.word	0x404e0000
 8002234:	40300000 	.word	0x40300000

08002238 <Reset_qei>:

void Reset_qei(QEI* qei){
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
	qei -> counter_value[NEW] = 0;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0.0;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0.0;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	621a      	str	r2, [r3, #32]
	qei -> mm = 0.0;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	629a      	str	r2, [r3, #40]	@ 0x28
	qei -> pps = 0.0;
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> rpm = 0.0;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> radps = 0.0;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> mmps = 0.0;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f04f 0200 	mov.w	r2, #0
 800229c:	641a      	str	r2, [r3, #64]	@ 0x40
	qei -> radpss = 0.0;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	655a      	str	r2, [r3, #84]	@ 0x54
	qei -> rpms = 0.0;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	659a      	str	r2, [r3, #88]	@ 0x58
	qei -> mmpss = 0.0;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	65da      	str	r2, [r3, #92]	@ 0x5c
	qei -> velocity_value[NEW] = 0;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	645a      	str	r2, [r3, #68]	@ 0x44
	qei -> velocity_value[OLD] = 0;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <homing>:
#include "state.h"

void homing(HOME* home, GPIO_TypeDef* GPIO_Prox, uint16_t GPIO_Pin_Prox, TIM_HandleTypeDef* htim, uint16_t htim_channel
		, GPIO_TypeDef* GPIO_PWM, uint16_t GPIO_Pin_PWM, u16u8_t* registerFrame[200]
		, GPIO_TypeDef* GPIO_HomingButton, uint16_t GPIO_Pin_HomingButton, QEI* encoder)
{
 80022d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022d8:	b08a      	sub	sp, #40	@ 0x28
 80022da:	af02      	add	r7, sp, #8
 80022dc:	61f8      	str	r0, [r7, #28]
 80022de:	61b9      	str	r1, [r7, #24]
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	4613      	mov	r3, r2
 80022e4:	82fb      	strh	r3, [r7, #22]
	static uint64_t is_home_ts = 0;
	// Clear is_home variable if is_home_ts = 1 mins is_home will clear
	if(is_home_ts == 480000){
 80022e6:	4ba3      	ldr	r3, [pc, #652]	@ (8002574 <homing+0x2a0>)
 80022e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ec:	49a2      	ldr	r1, [pc, #648]	@ (8002578 <homing+0x2a4>)
 80022ee:	4411      	add	r1, r2
 80022f0:	430b      	orrs	r3, r1
 80022f2:	d109      	bne.n	8002308 <homing+0x34>
		home -> is_home = 0;
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	2200      	movs	r2, #0
 80022f8:	70da      	strb	r2, [r3, #3]
		is_home_ts = 0;
 80022fa:	499e      	ldr	r1, [pc, #632]	@ (8002574 <homing+0x2a0>)
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	f04f 0300 	mov.w	r3, #0
 8002304:	e9c1 2300 	strd	r2, r3, [r1]
	}
	// Check homing command from Homing button and Base system command
	if(state == 0b0010){
 8002308:	4b9c      	ldr	r3, [pc, #624]	@ (800257c <homing+0x2a8>)
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	2b02      	cmp	r3, #2
 800230e:	d10d      	bne.n	800232c <homing+0x58>
		home -> homing_command = 1;
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	2201      	movs	r2, #1
 8002314:	709a      	strb	r2, [r3, #2]
		registerFrame[0x01] -> U16 = 0b0000;
 8002316:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002318:	3304      	adds	r3, #4
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2200      	movs	r2, #0
 800231e:	801a      	strh	r2, [r3, #0]
		registerFrame[0x10] -> U16 = 0b0010;
 8002320:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002322:	3340      	adds	r3, #64	@ 0x40
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2202      	movs	r2, #2
 8002328:	801a      	strh	r2, [r3, #0]
 800232a:	e1c6      	b.n	80026ba <homing+0x3e6>
	}
	else if(HAL_GPIO_ReadPin(GPIO_HomingButton, GPIO_Pin_HomingButton)){
 800232c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8002330:	4619      	mov	r1, r3
 8002332:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002334:	f003 f962 	bl	80055fc <HAL_GPIO_ReadPin>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d008      	beq.n	8002350 <homing+0x7c>
		home -> homing_command = 1;
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	2201      	movs	r2, #1
 8002342:	709a      	strb	r2, [r3, #2]
		registerFrame[0x10] -> U16 = 0b0010;
 8002344:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002346:	3340      	adds	r3, #64	@ 0x40
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2202      	movs	r2, #2
 800234c:	801a      	strh	r2, [r3, #0]
 800234e:	e1b4      	b.n	80026ba <homing+0x3e6>
	}
	// If we have homing command
	else if(home -> homing_command){
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	789b      	ldrb	r3, [r3, #2]
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 81a6 	beq.w	80026a6 <homing+0x3d2>
		if(home -> homing_state[0] == 0){
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d132      	bne.n	80023c8 <homing+0xf4>
			// Homing state selection
			// Robot is actually home
			if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && home -> is_home){
 8002362:	8afb      	ldrh	r3, [r7, #22]
 8002364:	4619      	mov	r1, r3
 8002366:	69b8      	ldr	r0, [r7, #24]
 8002368:	f003 f948 	bl	80055fc <HAL_GPIO_ReadPin>
 800236c:	4603      	mov	r3, r0
 800236e:	2b01      	cmp	r3, #1
 8002370:	d107      	bne.n	8002382 <homing+0xae>
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	78db      	ldrb	r3, [r3, #3]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <homing+0xae>
				home -> homing_state[1] = 1;
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	2201      	movs	r2, #1
 800237e:	705a      	strb	r2, [r3, #1]
 8002380:	e01e      	b.n	80023c0 <homing+0xec>
			}
			// Robot is not home but proximity is detecting
			else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && !(home -> is_home)){
 8002382:	8afb      	ldrh	r3, [r7, #22]
 8002384:	4619      	mov	r1, r3
 8002386:	69b8      	ldr	r0, [r7, #24]
 8002388:	f003 f938 	bl	80055fc <HAL_GPIO_ReadPin>
 800238c:	4603      	mov	r3, r0
 800238e:	2b01      	cmp	r3, #1
 8002390:	d107      	bne.n	80023a2 <homing+0xce>
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	78db      	ldrb	r3, [r3, #3]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d103      	bne.n	80023a2 <homing+0xce>
				home -> homing_state[1] = 2;
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	2202      	movs	r2, #2
 800239e:	705a      	strb	r2, [r3, #1]
 80023a0:	e00e      	b.n	80023c0 <homing+0xec>
			}
			// Robot is not home and proximity isn't detecting
			else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && !(home -> is_home)){
 80023a2:	8afb      	ldrh	r3, [r7, #22]
 80023a4:	4619      	mov	r1, r3
 80023a6:	69b8      	ldr	r0, [r7, #24]
 80023a8:	f003 f928 	bl	80055fc <HAL_GPIO_ReadPin>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d106      	bne.n	80023c0 <homing+0xec>
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	78db      	ldrb	r3, [r3, #3]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d102      	bne.n	80023c0 <homing+0xec>
				home -> homing_state[1] = 3;
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	2203      	movs	r2, #3
 80023be:	705a      	strb	r2, [r3, #1]
			}
			// Set homing state
			home -> homing_state[0] = 1;
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	2201      	movs	r2, #1
 80023c4:	701a      	strb	r2, [r3, #0]
 80023c6:	e178      	b.n	80026ba <homing+0x3e6>
		}
		else if(home -> homing_state[0] == 1){
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	f040 8174 	bne.w	80026ba <homing+0x3e6>
			static uint64_t homing_ts = 0; // Start homing time stamp
			// Homing
			if(home -> homing_state[1] == 1){
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	785b      	ldrb	r3, [r3, #1]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d11b      	bne.n	8002412 <homing+0x13e>
				Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0);
 80023da:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80023de:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 80023e2:	2200      	movs	r2, #0
 80023e4:	9200      	str	r2, [sp, #0]
 80023e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80023e8:	6938      	ldr	r0, [r7, #16]
 80023ea:	f7ff fc1a 	bl	8001c22 <Update_pwm>
				home -> homing_command = 0;
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	2200      	movs	r2, #0
 80023f2:	709a      	strb	r2, [r3, #2]
				home -> homing_state[0] = 0;
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]
				Reset_qei(encoder); // Reset encoder parameter
 80023fa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80023fc:	f7ff ff1c 	bl	8002238 <Reset_qei>
				home -> is_home = 1;
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	2201      	movs	r2, #1
 8002404:	70da      	strb	r2, [r3, #3]
				registerFrame[0x10] -> U16 = 0b0000;
 8002406:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002408:	3340      	adds	r3, #64	@ 0x40
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2200      	movs	r2, #0
 800240e:	801a      	strh	r2, [r3, #0]
				return;
 8002410:	e153      	b.n	80026ba <homing+0x3e6>
			}
			else if(home -> homing_state[1] == 2){
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	785b      	ldrb	r3, [r3, #1]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d172      	bne.n	8002500 <homing+0x22c>
				home -> homing_state[1] = 1;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	2201      	movs	r2, #1
 800241e:	705a      	strb	r2, [r3, #1]
				if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1){
 8002420:	8afb      	ldrh	r3, [r7, #22]
 8002422:	4619      	mov	r1, r3
 8002424:	69b8      	ldr	r0, [r7, #24]
 8002426:	f003 f8e9 	bl	80055fc <HAL_GPIO_ReadPin>
 800242a:	4603      	mov	r3, r0
 800242c:	2b01      	cmp	r3, #1
 800242e:	d125      	bne.n	800247c <homing+0x1a8>
					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0); // Stop when proximity was detected
 8002430:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002434:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8002438:	2200      	movs	r2, #0
 800243a:	9200      	str	r2, [sp, #0]
 800243c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800243e:	6938      	ldr	r0, [r7, #16]
 8002440:	f7ff fbef 	bl	8001c22 <Update_pwm>
					// Reset homing state and other
					homing_ts = 0;
 8002444:	494e      	ldr	r1, [pc, #312]	@ (8002580 <homing+0x2ac>)
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	e9c1 2300 	strd	r2, r3, [r1]
					home -> homing_state[0] = 0;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
					home -> homing_state[1] = 0;
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	2200      	movs	r2, #0
 800245c:	705a      	strb	r2, [r3, #1]
					home -> homing_command = 0;
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	2200      	movs	r2, #0
 8002462:	709a      	strb	r2, [r3, #2]
					Reset_qei(encoder); // Reset encoder parameter
 8002464:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002466:	f7ff fee7 	bl	8002238 <Reset_qei>
					home -> is_home = 1;
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	2201      	movs	r2, #1
 800246e:	70da      	strb	r2, [r3, #3]
					registerFrame[0x10] -> U16 = 0b0000;
 8002470:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002472:	3340      	adds	r3, #64	@ 0x40
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2200      	movs	r2, #0
 8002478:	801a      	strh	r2, [r3, #0]
					return;
 800247a:	e11e      	b.n	80026ba <homing+0x3e6>
				}else if(homing_ts == 0){
 800247c:	4b40      	ldr	r3, [pc, #256]	@ (8002580 <homing+0x2ac>)
 800247e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002482:	4313      	orrs	r3, r2
 8002484:	d10a      	bne.n	800249c <homing+0x1c8>
					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 200); // Move upper
 8002486:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800248a:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 800248e:	22c8      	movs	r2, #200	@ 0xc8
 8002490:	9200      	str	r2, [sp, #0]
 8002492:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002494:	6938      	ldr	r0, [r7, #16]
 8002496:	f7ff fbc4 	bl	8001c22 <Update_pwm>
 800249a:	e023      	b.n	80024e4 <homing+0x210>
				}else if(homing_ts == 4000){ // wait 0.5 secs
 800249c:	4b38      	ldr	r3, [pc, #224]	@ (8002580 <homing+0x2ac>)
 800249e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a2:	f5a2 617a 	sub.w	r1, r2, #4000	@ 0xfa0
 80024a6:	430b      	orrs	r3, r1
 80024a8:	d10a      	bne.n	80024c0 <homing+0x1ec>
					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0); // Stop
 80024aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80024ae:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 80024b2:	2200      	movs	r2, #0
 80024b4:	9200      	str	r2, [sp, #0]
 80024b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80024b8:	6938      	ldr	r0, [r7, #16]
 80024ba:	f7ff fbb2 	bl	8001c22 <Update_pwm>
 80024be:	e011      	b.n	80024e4 <homing+0x210>
				}else if(homing_ts == 14000){ // wait 1.25 secs
 80024c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002580 <homing+0x2ac>)
 80024c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c6:	492f      	ldr	r1, [pc, #188]	@ (8002584 <homing+0x2b0>)
 80024c8:	4411      	add	r1, r2
 80024ca:	430b      	orrs	r3, r1
 80024cc:	d10a      	bne.n	80024e4 <homing+0x210>
					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, -100); // Move lower
 80024ce:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80024d2:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 80024d6:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 80024da:	9200      	str	r2, [sp, #0]
 80024dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80024de:	6938      	ldr	r0, [r7, #16]
 80024e0:	f7ff fb9f 	bl	8001c22 <Update_pwm>
				}
				homing_ts++;
 80024e4:	4b26      	ldr	r3, [pc, #152]	@ (8002580 <homing+0x2ac>)
 80024e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ea:	1c51      	adds	r1, r2, #1
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	f143 0300 	adc.w	r3, r3, #0
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	4b22      	ldr	r3, [pc, #136]	@ (8002580 <homing+0x2ac>)
 80024f6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80024fa:	e9c3 1200 	strd	r1, r2, [r3]
 80024fe:	e0dc      	b.n	80026ba <homing+0x3e6>
			}
			else if(home -> homing_state[1] == 3){
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	785b      	ldrb	r3, [r3, #1]
 8002504:	2b03      	cmp	r3, #3
 8002506:	f040 80d8 	bne.w	80026ba <homing+0x3e6>
				static uint8_t homing_first = 0;
				if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && (homing_first == 1)){
 800250a:	8afb      	ldrh	r3, [r7, #22]
 800250c:	4619      	mov	r1, r3
 800250e:	69b8      	ldr	r0, [r7, #24]
 8002510:	f003 f874 	bl	80055fc <HAL_GPIO_ReadPin>
 8002514:	4603      	mov	r3, r0
 8002516:	2b01      	cmp	r3, #1
 8002518:	d138      	bne.n	800258c <homing+0x2b8>
 800251a:	4b1b      	ldr	r3, [pc, #108]	@ (8002588 <homing+0x2b4>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d134      	bne.n	800258c <homing+0x2b8>
					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0); // Stop when proximity was detected
 8002522:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002526:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 800252a:	2200      	movs	r2, #0
 800252c:	9200      	str	r2, [sp, #0]
 800252e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002530:	6938      	ldr	r0, [r7, #16]
 8002532:	f7ff fb76 	bl	8001c22 <Update_pwm>
					// Reset homing state and other
					homing_ts = 0;
 8002536:	4912      	ldr	r1, [pc, #72]	@ (8002580 <homing+0x2ac>)
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	e9c1 2300 	strd	r2, r3, [r1]
					homing_first = 0;
 8002544:	4b10      	ldr	r3, [pc, #64]	@ (8002588 <homing+0x2b4>)
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]
					home -> homing_state[0] = 0;
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
					home -> homing_state[1] = 0;
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	2200      	movs	r2, #0
 8002554:	705a      	strb	r2, [r3, #1]
					home -> homing_command = 0;
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	2200      	movs	r2, #0
 800255a:	709a      	strb	r2, [r3, #2]
					Reset_qei(encoder); // Reset encoder parameter
 800255c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800255e:	f7ff fe6b 	bl	8002238 <Reset_qei>
					home -> is_home = 1;
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	2201      	movs	r2, #1
 8002566:	70da      	strb	r2, [r3, #3]
					registerFrame[0x10] -> U16 = 0b0000;
 8002568:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800256a:	3340      	adds	r3, #64	@ 0x40
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2200      	movs	r2, #0
 8002570:	801a      	strh	r2, [r3, #0]
					return;
 8002572:	e0a2      	b.n	80026ba <homing+0x3e6>
 8002574:	20000eb8 	.word	0x20000eb8
 8002578:	fff8ad00 	.word	0xfff8ad00
 800257c:	2000006e 	.word	0x2000006e
 8002580:	20000ec0 	.word	0x20000ec0
 8002584:	ffffc950 	.word	0xffffc950
 8002588:	20000ec8 	.word	0x20000ec8
				}else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && (homing_first == 0)){
 800258c:	8afb      	ldrh	r3, [r7, #22]
 800258e:	4619      	mov	r1, r3
 8002590:	69b8      	ldr	r0, [r7, #24]
 8002592:	f003 f833 	bl	80055fc <HAL_GPIO_ReadPin>
 8002596:	4603      	mov	r3, r0
 8002598:	2b01      	cmp	r3, #1
 800259a:	d12f      	bne.n	80025fc <homing+0x328>
 800259c:	4b49      	ldr	r3, [pc, #292]	@ (80026c4 <homing+0x3f0>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d12b      	bne.n	80025fc <homing+0x328>
					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0); // Stop when proximity was detected
 80025a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80025a8:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 80025ac:	2200      	movs	r2, #0
 80025ae:	9200      	str	r2, [sp, #0]
 80025b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80025b2:	6938      	ldr	r0, [r7, #16]
 80025b4:	f7ff fb35 	bl	8001c22 <Update_pwm>
					homing_ts++;
 80025b8:	4b43      	ldr	r3, [pc, #268]	@ (80026c8 <homing+0x3f4>)
 80025ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025be:	1c51      	adds	r1, r2, #1
 80025c0:	6039      	str	r1, [r7, #0]
 80025c2:	f143 0300 	adc.w	r3, r3, #0
 80025c6:	607b      	str	r3, [r7, #4]
 80025c8:	4b3f      	ldr	r3, [pc, #252]	@ (80026c8 <homing+0x3f4>)
 80025ca:	e9d7 1200 	ldrd	r1, r2, [r7]
 80025ce:	e9c3 1200 	strd	r1, r2, [r3]
					if(homing_ts == 2000){ // wait 0.25 secs
 80025d2:	4b3d      	ldr	r3, [pc, #244]	@ (80026c8 <homing+0x3f4>)
 80025d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d8:	f5a2 61fa 	sub.w	r1, r2, #2000	@ 0x7d0
 80025dc:	430b      	orrs	r3, r1
 80025de:	d16c      	bne.n	80026ba <homing+0x3e6>
						Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 200); // Move upper
 80025e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80025e4:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 80025e8:	22c8      	movs	r2, #200	@ 0xc8
 80025ea:	9200      	str	r2, [sp, #0]
 80025ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80025ee:	6938      	ldr	r0, [r7, #16]
 80025f0:	f7ff fb17 	bl	8001c22 <Update_pwm>
						homing_first = 1;
 80025f4:	4b33      	ldr	r3, [pc, #204]	@ (80026c4 <homing+0x3f0>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	701a      	strb	r2, [r3, #0]
					if(homing_ts == 2000){ // wait 0.25 secs
 80025fa:	e05e      	b.n	80026ba <homing+0x3e6>
					}
				}else if(homing_ts == 6000){ // wait 0.5 secs
 80025fc:	4b32      	ldr	r3, [pc, #200]	@ (80026c8 <homing+0x3f4>)
 80025fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002602:	4932      	ldr	r1, [pc, #200]	@ (80026cc <homing+0x3f8>)
 8002604:	4411      	add	r1, r2
 8002606:	430b      	orrs	r3, r1
 8002608:	d114      	bne.n	8002634 <homing+0x360>
					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0); // Stop
 800260a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800260e:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8002612:	2200      	movs	r2, #0
 8002614:	9200      	str	r2, [sp, #0]
 8002616:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002618:	6938      	ldr	r0, [r7, #16]
 800261a:	f7ff fb02 	bl	8001c22 <Update_pwm>
					homing_ts++;
 800261e:	4b2a      	ldr	r3, [pc, #168]	@ (80026c8 <homing+0x3f4>)
 8002620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002624:	f112 0a01 	adds.w	sl, r2, #1
 8002628:	f143 0b00 	adc.w	fp, r3, #0
 800262c:	4b26      	ldr	r3, [pc, #152]	@ (80026c8 <homing+0x3f4>)
 800262e:	e9c3 ab00 	strd	sl, fp, [r3]
 8002632:	e042      	b.n	80026ba <homing+0x3e6>
				}else if(homing_ts == 16000){ // wait 1.25 secs
 8002634:	4b24      	ldr	r3, [pc, #144]	@ (80026c8 <homing+0x3f4>)
 8002636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263a:	f5a2 517a 	sub.w	r1, r2, #16000	@ 0x3e80
 800263e:	430b      	orrs	r3, r1
 8002640:	d10b      	bne.n	800265a <homing+0x386>
					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, -100); // Move lower
 8002642:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002646:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 800264a:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800264e:	9200      	str	r2, [sp, #0]
 8002650:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002652:	6938      	ldr	r0, [r7, #16]
 8002654:	f7ff fae5 	bl	8001c22 <Update_pwm>
 8002658:	e02f      	b.n	80026ba <homing+0x3e6>
				}else{
					if(homing_first == 1){
 800265a:	4b1a      	ldr	r3, [pc, #104]	@ (80026c4 <homing+0x3f0>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d10a      	bne.n	8002678 <homing+0x3a4>
						homing_ts++;
 8002662:	4b19      	ldr	r3, [pc, #100]	@ (80026c8 <homing+0x3f4>)
 8002664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002668:	f112 0801 	adds.w	r8, r2, #1
 800266c:	f143 0900 	adc.w	r9, r3, #0
 8002670:	4b15      	ldr	r3, [pc, #84]	@ (80026c8 <homing+0x3f4>)
 8002672:	e9c3 8900 	strd	r8, r9, [r3]
 8002676:	e020      	b.n	80026ba <homing+0x3e6>
					}else if(homing_first == 0){
 8002678:	4b12      	ldr	r3, [pc, #72]	@ (80026c4 <homing+0x3f0>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d11c      	bne.n	80026ba <homing+0x3e6>
						homing_ts = 0;
 8002680:	4911      	ldr	r1, [pc, #68]	@ (80026c8 <homing+0x3f4>)
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	e9c1 2300 	strd	r2, r3, [r1]
						Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, -100); // Move lower
 800268e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002692:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8002696:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800269a:	9200      	str	r2, [sp, #0]
 800269c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800269e:	6938      	ldr	r0, [r7, #16]
 80026a0:	f7ff fabf 	bl	8001c22 <Update_pwm>
 80026a4:	e009      	b.n	80026ba <homing+0x3e6>
			}
		}
	}
	// Nothing happen
	else{
		is_home_ts++;
 80026a6:	4b0a      	ldr	r3, [pc, #40]	@ (80026d0 <homing+0x3fc>)
 80026a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ac:	1c54      	adds	r4, r2, #1
 80026ae:	f143 0500 	adc.w	r5, r3, #0
 80026b2:	4b07      	ldr	r3, [pc, #28]	@ (80026d0 <homing+0x3fc>)
 80026b4:	e9c3 4500 	strd	r4, r5, [r3]
		return;
 80026b8:	bf00      	nop
	}
}
 80026ba:	3720      	adds	r7, #32
 80026bc:	46bd      	mov	sp, r7
 80026be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026c2:	bf00      	nop
 80026c4:	20000ec8 	.word	0x20000ec8
 80026c8:	20000ec0 	.word	0x20000ec0
 80026cc:	ffffe890 	.word	0xffffe890
 80026d0:	20000eb8 	.word	0x20000eb8

080026d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026da:	4b0f      	ldr	r3, [pc, #60]	@ (8002718 <HAL_MspInit+0x44>)
 80026dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026de:	4a0e      	ldr	r2, [pc, #56]	@ (8002718 <HAL_MspInit+0x44>)
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80026e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002718 <HAL_MspInit+0x44>)
 80026e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026f2:	4b09      	ldr	r3, [pc, #36]	@ (8002718 <HAL_MspInit+0x44>)
 80026f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f6:	4a08      	ldr	r2, [pc, #32]	@ (8002718 <HAL_MspInit+0x44>)
 80026f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80026fe:	4b06      	ldr	r3, [pc, #24]	@ (8002718 <HAL_MspInit+0x44>)
 8002700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800270a:	f003 f863 	bl	80057d4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000

0800271c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b09e      	sub	sp, #120	@ 0x78
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002724:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002734:	f107 0310 	add.w	r3, r7, #16
 8002738:	2254      	movs	r2, #84	@ 0x54
 800273a:	2100      	movs	r1, #0
 800273c:	4618      	mov	r0, r3
 800273e:	f007 fedb 	bl	800a4f8 <memset>
  if(hadc->Instance==ADC1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800274a:	d167      	bne.n	800281c <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800274c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002750:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002752:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002756:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002758:	f107 0310 	add.w	r3, r7, #16
 800275c:	4618      	mov	r0, r3
 800275e:	f003 fd77 	bl	8006250 <HAL_RCCEx_PeriphCLKConfig>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002768:	f7ff fa30 	bl	8001bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800276c:	4b2d      	ldr	r3, [pc, #180]	@ (8002824 <HAL_ADC_MspInit+0x108>)
 800276e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002770:	4a2c      	ldr	r2, [pc, #176]	@ (8002824 <HAL_ADC_MspInit+0x108>)
 8002772:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002776:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002778:	4b2a      	ldr	r3, [pc, #168]	@ (8002824 <HAL_ADC_MspInit+0x108>)
 800277a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800277c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002784:	4b27      	ldr	r3, [pc, #156]	@ (8002824 <HAL_ADC_MspInit+0x108>)
 8002786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002788:	4a26      	ldr	r2, [pc, #152]	@ (8002824 <HAL_ADC_MspInit+0x108>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002790:	4b24      	ldr	r3, [pc, #144]	@ (8002824 <HAL_ADC_MspInit+0x108>)
 8002792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Current_sensor_Pin;
 800279c:	2301      	movs	r3, #1
 800279e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027a0:	2303      	movs	r3, #3
 80027a2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Current_sensor_GPIO_Port, &GPIO_InitStruct);
 80027a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80027ac:	4619      	mov	r1, r3
 80027ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027b2:	f002 fda1 	bl	80052f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80027b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002828 <HAL_ADC_MspInit+0x10c>)
 80027b8:	4a1c      	ldr	r2, [pc, #112]	@ (800282c <HAL_ADC_MspInit+0x110>)
 80027ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80027bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002828 <HAL_ADC_MspInit+0x10c>)
 80027be:	2205      	movs	r2, #5
 80027c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027c2:	4b19      	ldr	r3, [pc, #100]	@ (8002828 <HAL_ADC_MspInit+0x10c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027c8:	4b17      	ldr	r3, [pc, #92]	@ (8002828 <HAL_ADC_MspInit+0x10c>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027ce:	4b16      	ldr	r3, [pc, #88]	@ (8002828 <HAL_ADC_MspInit+0x10c>)
 80027d0:	2280      	movs	r2, #128	@ 0x80
 80027d2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027d4:	4b14      	ldr	r3, [pc, #80]	@ (8002828 <HAL_ADC_MspInit+0x10c>)
 80027d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027da:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027dc:	4b12      	ldr	r3, [pc, #72]	@ (8002828 <HAL_ADC_MspInit+0x10c>)
 80027de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027e2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80027e4:	4b10      	ldr	r3, [pc, #64]	@ (8002828 <HAL_ADC_MspInit+0x10c>)
 80027e6:	2220      	movs	r2, #32
 80027e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80027ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002828 <HAL_ADC_MspInit+0x10c>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027f0:	480d      	ldr	r0, [pc, #52]	@ (8002828 <HAL_ADC_MspInit+0x10c>)
 80027f2:	f002 fa4f 	bl	8004c94 <HAL_DMA_Init>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80027fc:	f7ff f9e6 	bl	8001bcc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a09      	ldr	r2, [pc, #36]	@ (8002828 <HAL_ADC_MspInit+0x10c>)
 8002804:	655a      	str	r2, [r3, #84]	@ 0x54
 8002806:	4a08      	ldr	r2, [pc, #32]	@ (8002828 <HAL_ADC_MspInit+0x10c>)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800280c:	2200      	movs	r2, #0
 800280e:	2100      	movs	r1, #0
 8002810:	2012      	movs	r0, #18
 8002812:	f002 fa0a 	bl	8004c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002816:	2012      	movs	r0, #18
 8002818:	f002 fa21 	bl	8004c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800281c:	bf00      	nop
 800281e:	3778      	adds	r7, #120	@ 0x78
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40021000 	.word	0x40021000
 8002828:	200005bc 	.word	0x200005bc
 800282c:	40020008 	.word	0x40020008

08002830 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a34      	ldr	r2, [pc, #208]	@ (8002910 <HAL_TIM_Base_MspInit+0xe0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d114      	bne.n	800286c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002842:	4b34      	ldr	r3, [pc, #208]	@ (8002914 <HAL_TIM_Base_MspInit+0xe4>)
 8002844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002846:	4a33      	ldr	r2, [pc, #204]	@ (8002914 <HAL_TIM_Base_MspInit+0xe4>)
 8002848:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800284c:	6613      	str	r3, [r2, #96]	@ 0x60
 800284e:	4b31      	ldr	r3, [pc, #196]	@ (8002914 <HAL_TIM_Base_MspInit+0xe4>)
 8002850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002852:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800285a:	2200      	movs	r2, #0
 800285c:	2100      	movs	r1, #0
 800285e:	2019      	movs	r0, #25
 8002860:	f002 f9e3 	bl	8004c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002864:	2019      	movs	r0, #25
 8002866:	f002 f9fa 	bl	8004c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800286a:	e04c      	b.n	8002906 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a29      	ldr	r2, [pc, #164]	@ (8002918 <HAL_TIM_Base_MspInit+0xe8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d114      	bne.n	80028a0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002876:	4b27      	ldr	r3, [pc, #156]	@ (8002914 <HAL_TIM_Base_MspInit+0xe4>)
 8002878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287a:	4a26      	ldr	r2, [pc, #152]	@ (8002914 <HAL_TIM_Base_MspInit+0xe4>)
 800287c:	f043 0302 	orr.w	r3, r3, #2
 8002880:	6593      	str	r3, [r2, #88]	@ 0x58
 8002882:	4b24      	ldr	r3, [pc, #144]	@ (8002914 <HAL_TIM_Base_MspInit+0xe4>)
 8002884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800288e:	2200      	movs	r2, #0
 8002890:	2100      	movs	r1, #0
 8002892:	201d      	movs	r0, #29
 8002894:	f002 f9c9 	bl	8004c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002898:	201d      	movs	r0, #29
 800289a:	f002 f9e0 	bl	8004c5e <HAL_NVIC_EnableIRQ>
}
 800289e:	e032      	b.n	8002906 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM5)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a1d      	ldr	r2, [pc, #116]	@ (800291c <HAL_TIM_Base_MspInit+0xec>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d114      	bne.n	80028d4 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80028aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002914 <HAL_TIM_Base_MspInit+0xe4>)
 80028ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ae:	4a19      	ldr	r2, [pc, #100]	@ (8002914 <HAL_TIM_Base_MspInit+0xe4>)
 80028b0:	f043 0308 	orr.w	r3, r3, #8
 80028b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80028b6:	4b17      	ldr	r3, [pc, #92]	@ (8002914 <HAL_TIM_Base_MspInit+0xe4>)
 80028b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80028c2:	2200      	movs	r2, #0
 80028c4:	2100      	movs	r1, #0
 80028c6:	2032      	movs	r0, #50	@ 0x32
 80028c8:	f002 f9af 	bl	8004c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80028cc:	2032      	movs	r0, #50	@ 0x32
 80028ce:	f002 f9c6 	bl	8004c5e <HAL_NVIC_EnableIRQ>
}
 80028d2:	e018      	b.n	8002906 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM16)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a11      	ldr	r2, [pc, #68]	@ (8002920 <HAL_TIM_Base_MspInit+0xf0>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d113      	bne.n	8002906 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80028de:	4b0d      	ldr	r3, [pc, #52]	@ (8002914 <HAL_TIM_Base_MspInit+0xe4>)
 80028e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002914 <HAL_TIM_Base_MspInit+0xe4>)
 80028e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80028ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002914 <HAL_TIM_Base_MspInit+0xe4>)
 80028ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2100      	movs	r1, #0
 80028fa:	2019      	movs	r0, #25
 80028fc:	f002 f995 	bl	8004c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002900:	2019      	movs	r0, #25
 8002902:	f002 f9ac 	bl	8004c5e <HAL_NVIC_EnableIRQ>
}
 8002906:	bf00      	nop
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40012c00 	.word	0x40012c00
 8002914:	40021000 	.word	0x40021000
 8002918:	40000400 	.word	0x40000400
 800291c:	40000c00 	.word	0x40000c00
 8002920:	40014400 	.word	0x40014400

08002924 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08a      	sub	sp, #40	@ 0x28
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800292c:	f107 0314 	add.w	r3, r7, #20
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	60da      	str	r2, [r3, #12]
 800293a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a1c      	ldr	r2, [pc, #112]	@ (80029b4 <HAL_TIM_Encoder_MspInit+0x90>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d131      	bne.n	80029aa <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002946:	4b1c      	ldr	r3, [pc, #112]	@ (80029b8 <HAL_TIM_Encoder_MspInit+0x94>)
 8002948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294a:	4a1b      	ldr	r2, [pc, #108]	@ (80029b8 <HAL_TIM_Encoder_MspInit+0x94>)
 800294c:	f043 0304 	orr.w	r3, r3, #4
 8002950:	6593      	str	r3, [r2, #88]	@ 0x58
 8002952:	4b19      	ldr	r3, [pc, #100]	@ (80029b8 <HAL_TIM_Encoder_MspInit+0x94>)
 8002954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295e:	4b16      	ldr	r3, [pc, #88]	@ (80029b8 <HAL_TIM_Encoder_MspInit+0x94>)
 8002960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002962:	4a15      	ldr	r2, [pc, #84]	@ (80029b8 <HAL_TIM_Encoder_MspInit+0x94>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800296a:	4b13      	ldr	r3, [pc, #76]	@ (80029b8 <HAL_TIM_Encoder_MspInit+0x94>)
 800296c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
 8002976:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800297a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297c:	2302      	movs	r3, #2
 800297e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002984:	2300      	movs	r3, #0
 8002986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002988:	230a      	movs	r3, #10
 800298a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298c:	f107 0314 	add.w	r3, r7, #20
 8002990:	4619      	mov	r1, r3
 8002992:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002996:	f002 fcaf 	bl	80052f8 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800299a:	2200      	movs	r2, #0
 800299c:	2100      	movs	r1, #0
 800299e:	201e      	movs	r0, #30
 80029a0:	f002 f943 	bl	8004c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80029a4:	201e      	movs	r0, #30
 80029a6:	f002 f95a 	bl	8004c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80029aa:	bf00      	nop
 80029ac:	3728      	adds	r7, #40	@ 0x28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40000800 	.word	0x40000800
 80029b8:	40021000 	.word	0x40021000

080029bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c4:	f107 030c 	add.w	r3, r7, #12
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a11      	ldr	r2, [pc, #68]	@ (8002a20 <HAL_TIM_MspPostInit+0x64>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d11b      	bne.n	8002a16 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029de:	4b11      	ldr	r3, [pc, #68]	@ (8002a24 <HAL_TIM_MspPostInit+0x68>)
 80029e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029e2:	4a10      	ldr	r2, [pc, #64]	@ (8002a24 <HAL_TIM_MspPostInit+0x68>)
 80029e4:	f043 0304 	orr.w	r3, r3, #4
 80029e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002a24 <HAL_TIM_MspPostInit+0x68>)
 80029ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_signal_Pin;
 80029f6:	2301      	movs	r3, #1
 80029f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fa:	2302      	movs	r3, #2
 80029fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002a06:	2302      	movs	r3, #2
 8002a08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_signal_GPIO_Port, &GPIO_InitStruct);
 8002a0a:	f107 030c 	add.w	r3, r7, #12
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4805      	ldr	r0, [pc, #20]	@ (8002a28 <HAL_TIM_MspPostInit+0x6c>)
 8002a12:	f002 fc71 	bl	80052f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a16:	bf00      	nop
 8002a18:	3720      	adds	r7, #32
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40012c00 	.word	0x40012c00
 8002a24:	40021000 	.word	0x40021000
 8002a28:	48000800 	.word	0x48000800

08002a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b09e      	sub	sp, #120	@ 0x78
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a34:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	60da      	str	r2, [r3, #12]
 8002a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a44:	f107 0310 	add.w	r3, r7, #16
 8002a48:	2254      	movs	r2, #84	@ 0x54
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f007 fd53 	bl	800a4f8 <memset>
  if(huart->Instance==USART2)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a4d      	ldr	r2, [pc, #308]	@ (8002b8c <HAL_UART_MspInit+0x160>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	f040 8092 	bne.w	8002b82 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a66:	f107 0310 	add.w	r3, r7, #16
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f003 fbf0 	bl	8006250 <HAL_RCCEx_PeriphCLKConfig>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002a76:	f7ff f8a9 	bl	8001bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a7a:	4b45      	ldr	r3, [pc, #276]	@ (8002b90 <HAL_UART_MspInit+0x164>)
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7e:	4a44      	ldr	r2, [pc, #272]	@ (8002b90 <HAL_UART_MspInit+0x164>)
 8002a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a84:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a86:	4b42      	ldr	r3, [pc, #264]	@ (8002b90 <HAL_UART_MspInit+0x164>)
 8002a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a92:	4b3f      	ldr	r3, [pc, #252]	@ (8002b90 <HAL_UART_MspInit+0x164>)
 8002a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a96:	4a3e      	ldr	r2, [pc, #248]	@ (8002b90 <HAL_UART_MspInit+0x164>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a9e:	4b3c      	ldr	r3, [pc, #240]	@ (8002b90 <HAL_UART_MspInit+0x164>)
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	60bb      	str	r3, [r7, #8]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002aaa:	230c      	movs	r3, #12
 8002aac:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002aba:	2307      	movs	r3, #7
 8002abc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002abe:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ac8:	f002 fc16 	bl	80052f8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8002acc:	4b31      	ldr	r3, [pc, #196]	@ (8002b94 <HAL_UART_MspInit+0x168>)
 8002ace:	4a32      	ldr	r2, [pc, #200]	@ (8002b98 <HAL_UART_MspInit+0x16c>)
 8002ad0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002ad2:	4b30      	ldr	r3, [pc, #192]	@ (8002b94 <HAL_UART_MspInit+0x168>)
 8002ad4:	221a      	movs	r2, #26
 8002ad6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ad8:	4b2e      	ldr	r3, [pc, #184]	@ (8002b94 <HAL_UART_MspInit+0x168>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ade:	4b2d      	ldr	r3, [pc, #180]	@ (8002b94 <HAL_UART_MspInit+0x168>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b94 <HAL_UART_MspInit+0x168>)
 8002ae6:	2280      	movs	r2, #128	@ 0x80
 8002ae8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002aea:	4b2a      	ldr	r3, [pc, #168]	@ (8002b94 <HAL_UART_MspInit+0x168>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002af0:	4b28      	ldr	r3, [pc, #160]	@ (8002b94 <HAL_UART_MspInit+0x168>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002af6:	4b27      	ldr	r3, [pc, #156]	@ (8002b94 <HAL_UART_MspInit+0x168>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002afc:	4b25      	ldr	r3, [pc, #148]	@ (8002b94 <HAL_UART_MspInit+0x168>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002b02:	4824      	ldr	r0, [pc, #144]	@ (8002b94 <HAL_UART_MspInit+0x168>)
 8002b04:	f002 f8c6 	bl	8004c94 <HAL_DMA_Init>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8002b0e:	f7ff f85d 	bl	8001bcc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a1f      	ldr	r2, [pc, #124]	@ (8002b94 <HAL_UART_MspInit+0x168>)
 8002b16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002b1a:	4a1e      	ldr	r2, [pc, #120]	@ (8002b94 <HAL_UART_MspInit+0x168>)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8002b20:	4b1e      	ldr	r3, [pc, #120]	@ (8002b9c <HAL_UART_MspInit+0x170>)
 8002b22:	4a1f      	ldr	r2, [pc, #124]	@ (8002ba0 <HAL_UART_MspInit+0x174>)
 8002b24:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002b26:	4b1d      	ldr	r3, [pc, #116]	@ (8002b9c <HAL_UART_MspInit+0x170>)
 8002b28:	221b      	movs	r2, #27
 8002b2a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b9c <HAL_UART_MspInit+0x170>)
 8002b2e:	2210      	movs	r2, #16
 8002b30:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b32:	4b1a      	ldr	r3, [pc, #104]	@ (8002b9c <HAL_UART_MspInit+0x170>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b38:	4b18      	ldr	r3, [pc, #96]	@ (8002b9c <HAL_UART_MspInit+0x170>)
 8002b3a:	2280      	movs	r2, #128	@ 0x80
 8002b3c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b3e:	4b17      	ldr	r3, [pc, #92]	@ (8002b9c <HAL_UART_MspInit+0x170>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b44:	4b15      	ldr	r3, [pc, #84]	@ (8002b9c <HAL_UART_MspInit+0x170>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002b4a:	4b14      	ldr	r3, [pc, #80]	@ (8002b9c <HAL_UART_MspInit+0x170>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b50:	4b12      	ldr	r3, [pc, #72]	@ (8002b9c <HAL_UART_MspInit+0x170>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002b56:	4811      	ldr	r0, [pc, #68]	@ (8002b9c <HAL_UART_MspInit+0x170>)
 8002b58:	f002 f89c 	bl	8004c94 <HAL_DMA_Init>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8002b62:	f7ff f833 	bl	8001bcc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a0c      	ldr	r2, [pc, #48]	@ (8002b9c <HAL_UART_MspInit+0x170>)
 8002b6a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002b6c:	4a0b      	ldr	r2, [pc, #44]	@ (8002b9c <HAL_UART_MspInit+0x170>)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b72:	2200      	movs	r2, #0
 8002b74:	2100      	movs	r1, #0
 8002b76:	2026      	movs	r0, #38	@ 0x26
 8002b78:	f002 f857 	bl	8004c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b7c:	2026      	movs	r0, #38	@ 0x26
 8002b7e:	f002 f86e 	bl	8004c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b82:	bf00      	nop
 8002b84:	3778      	adds	r7, #120	@ 0x78
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40004400 	.word	0x40004400
 8002b90:	40021000 	.word	0x40021000
 8002b94:	20000ae4 	.word	0x20000ae4
 8002b98:	4002001c 	.word	0x4002001c
 8002b9c:	20000b44 	.word	0x20000b44
 8002ba0:	40020030 	.word	0x40020030

08002ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ba8:	bf00      	nop
 8002baa:	e7fd      	b.n	8002ba8 <NMI_Handler+0x4>

08002bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bb0:	bf00      	nop
 8002bb2:	e7fd      	b.n	8002bb0 <HardFault_Handler+0x4>

08002bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bb8:	bf00      	nop
 8002bba:	e7fd      	b.n	8002bb8 <MemManage_Handler+0x4>

08002bbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bc0:	bf00      	nop
 8002bc2:	e7fd      	b.n	8002bc0 <BusFault_Handler+0x4>

08002bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bc8:	bf00      	nop
 8002bca:	e7fd      	b.n	8002bc8 <UsageFault_Handler+0x4>

08002bcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bfa:	f000 f8fb 	bl	8002df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c08:	4802      	ldr	r0, [pc, #8]	@ (8002c14 <DMA1_Channel1_IRQHandler+0x10>)
 8002c0a:	f002 fa26 	bl	800505a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	200005bc 	.word	0x200005bc

08002c18 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002c1c:	4802      	ldr	r0, [pc, #8]	@ (8002c28 <DMA1_Channel2_IRQHandler+0x10>)
 8002c1e:	f002 fa1c 	bl	800505a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000ae4 	.word	0x20000ae4

08002c2c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002c30:	4802      	ldr	r0, [pc, #8]	@ (8002c3c <DMA1_Channel3_IRQHandler+0x10>)
 8002c32:	f002 fa12 	bl	800505a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000b44 	.word	0x20000b44

08002c40 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002c44:	4802      	ldr	r0, [pc, #8]	@ (8002c50 <ADC1_2_IRQHandler+0x10>)
 8002c46:	f000 fdc3 	bl	80037d0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20000550 	.word	0x20000550

08002c54 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c58:	4803      	ldr	r0, [pc, #12]	@ (8002c68 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002c5a:	f004 fa4b 	bl	80070f4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002c5e:	4803      	ldr	r0, [pc, #12]	@ (8002c6c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002c60:	f004 fa48 	bl	80070f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002c64:	bf00      	nop
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	2000061c 	.word	0x2000061c
 8002c6c:	2000094c 	.word	0x2000094c

08002c70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c74:	4802      	ldr	r0, [pc, #8]	@ (8002c80 <TIM3_IRQHandler+0x10>)
 8002c76:	f004 fa3d 	bl	80070f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	200006e8 	.word	0x200006e8

08002c84 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002c88:	4802      	ldr	r0, [pc, #8]	@ (8002c94 <TIM4_IRQHandler+0x10>)
 8002c8a:	f004 fa33 	bl	80070f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	200007b4 	.word	0x200007b4

08002c98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c9c:	4802      	ldr	r0, [pc, #8]	@ (8002ca8 <USART2_IRQHandler+0x10>)
 8002c9e:	f005 ff7d 	bl	8008b9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000a18 	.word	0x20000a18

08002cac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002cb0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002cb4:	f002 fcd2 	bl	800565c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_switch_Pin);
 8002cb8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002cbc:	f002 fcce 	bl	800565c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002cc0:	bf00      	nop
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002cc8:	4802      	ldr	r0, [pc, #8]	@ (8002cd4 <TIM5_IRQHandler+0x10>)
 8002cca:	f004 fa13 	bl	80070f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000880 	.word	0x20000880

08002cd8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002cdc:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <SystemInit+0x20>)
 8002cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce2:	4a05      	ldr	r2, [pc, #20]	@ (8002cf8 <SystemInit+0x20>)
 8002ce4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ce8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002cfc:	480d      	ldr	r0, [pc, #52]	@ (8002d34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002cfe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d00:	f7ff ffea 	bl	8002cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d04:	480c      	ldr	r0, [pc, #48]	@ (8002d38 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d06:	490d      	ldr	r1, [pc, #52]	@ (8002d3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d08:	4a0d      	ldr	r2, [pc, #52]	@ (8002d40 <LoopForever+0xe>)
  movs r3, #0
 8002d0a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002d0c:	e002      	b.n	8002d14 <LoopCopyDataInit>

08002d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d12:	3304      	adds	r3, #4

08002d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d18:	d3f9      	bcc.n	8002d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d1c:	4c0a      	ldr	r4, [pc, #40]	@ (8002d48 <LoopForever+0x16>)
  movs r3, #0
 8002d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d20:	e001      	b.n	8002d26 <LoopFillZerobss>

08002d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d24:	3204      	adds	r2, #4

08002d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d28:	d3fb      	bcc.n	8002d22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d2a:	f007 fbed 	bl	800a508 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d2e:	f7fe f9f7 	bl	8001120 <main>

08002d32 <LoopForever>:

LoopForever:
    b LoopForever
 8002d32:	e7fe      	b.n	8002d32 <LoopForever>
  ldr   r0, =_estack
 8002d34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d3c:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8002d40:	0800a61c 	.word	0x0800a61c
  ldr r2, =_sbss
 8002d44:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8002d48:	20000ed0 	.word	0x20000ed0

08002d4c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d4c:	e7fe      	b.n	8002d4c <ADC3_IRQHandler>

08002d4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d58:	2003      	movs	r0, #3
 8002d5a:	f001 ff5b 	bl	8004c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d5e:	2000      	movs	r0, #0
 8002d60:	f000 f80e 	bl	8002d80 <HAL_InitTick>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	71fb      	strb	r3, [r7, #7]
 8002d6e:	e001      	b.n	8002d74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d70:	f7ff fcb0 	bl	80026d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d74:	79fb      	ldrb	r3, [r7, #7]

}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002d8c:	4b16      	ldr	r3, [pc, #88]	@ (8002de8 <HAL_InitTick+0x68>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d022      	beq.n	8002dda <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002d94:	4b15      	ldr	r3, [pc, #84]	@ (8002dec <HAL_InitTick+0x6c>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4b13      	ldr	r3, [pc, #76]	@ (8002de8 <HAL_InitTick+0x68>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002da0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da8:	4618      	mov	r0, r3
 8002daa:	f001 ff66 	bl	8004c7a <HAL_SYSTICK_Config>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10f      	bne.n	8002dd4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b0f      	cmp	r3, #15
 8002db8:	d809      	bhi.n	8002dce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dba:	2200      	movs	r2, #0
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc2:	f001 ff32 	bl	8004c2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8002df0 <HAL_InitTick+0x70>)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6013      	str	r3, [r2, #0]
 8002dcc:	e007      	b.n	8002dde <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	73fb      	strb	r3, [r7, #15]
 8002dd2:	e004      	b.n	8002dde <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	73fb      	strb	r3, [r7, #15]
 8002dd8:	e001      	b.n	8002dde <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	2000004c 	.word	0x2000004c
 8002dec:	20000044 	.word	0x20000044
 8002df0:	20000048 	.word	0x20000048

08002df4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002df8:	4b05      	ldr	r3, [pc, #20]	@ (8002e10 <HAL_IncTick+0x1c>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4b05      	ldr	r3, [pc, #20]	@ (8002e14 <HAL_IncTick+0x20>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4413      	add	r3, r2
 8002e02:	4a03      	ldr	r2, [pc, #12]	@ (8002e10 <HAL_IncTick+0x1c>)
 8002e04:	6013      	str	r3, [r2, #0]
}
 8002e06:	bf00      	nop
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	20000ecc 	.word	0x20000ecc
 8002e14:	2000004c 	.word	0x2000004c

08002e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e1c:	4b03      	ldr	r3, [pc, #12]	@ (8002e2c <HAL_GetTick+0x14>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	20000ecc 	.word	0x20000ecc

08002e30 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	609a      	str	r2, [r3, #8]
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
 8002e5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	609a      	str	r2, [r3, #8]
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
 8002ea4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	3360      	adds	r3, #96	@ 0x60
 8002eaa:	461a      	mov	r2, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	4b08      	ldr	r3, [pc, #32]	@ (8002edc <LL_ADC_SetOffset+0x44>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002ed0:	bf00      	nop
 8002ed2:	371c      	adds	r7, #28
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	03fff000 	.word	0x03fff000

08002ee0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3360      	adds	r3, #96	@ 0x60
 8002eee:	461a      	mov	r2, r3
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	3360      	adds	r3, #96	@ 0x60
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	431a      	orrs	r2, r3
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002f36:	bf00      	nop
 8002f38:	371c      	adds	r7, #28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b087      	sub	sp, #28
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	3360      	adds	r3, #96	@ 0x60
 8002f52:	461a      	mov	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002f6c:	bf00      	nop
 8002f6e:	371c      	adds	r7, #28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	3360      	adds	r3, #96	@ 0x60
 8002f88:	461a      	mov	r2, r3
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002fa2:	bf00      	nop
 8002fa4:	371c      	adds	r7, #28
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	615a      	str	r2, [r3, #20]
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e000      	b.n	8002fee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b087      	sub	sp, #28
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	60f8      	str	r0, [r7, #12]
 8003002:	60b9      	str	r1, [r7, #8]
 8003004:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	3330      	adds	r3, #48	@ 0x30
 800300a:	461a      	mov	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	0a1b      	lsrs	r3, r3, #8
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	4413      	add	r3, r2
 8003018:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f003 031f 	and.w	r3, r3, #31
 8003024:	211f      	movs	r1, #31
 8003026:	fa01 f303 	lsl.w	r3, r1, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	401a      	ands	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	0e9b      	lsrs	r3, r3, #26
 8003032:	f003 011f 	and.w	r1, r3, #31
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f003 031f 	and.w	r3, r3, #31
 800303c:	fa01 f303 	lsl.w	r3, r1, r3
 8003040:	431a      	orrs	r2, r3
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003046:	bf00      	nop
 8003048:	371c      	adds	r7, #28
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800305e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003078:	b480      	push	{r7}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	3314      	adds	r3, #20
 8003088:	461a      	mov	r2, r3
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	0e5b      	lsrs	r3, r3, #25
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	4413      	add	r3, r2
 8003096:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	0d1b      	lsrs	r3, r3, #20
 80030a0:	f003 031f 	and.w	r3, r3, #31
 80030a4:	2107      	movs	r1, #7
 80030a6:	fa01 f303 	lsl.w	r3, r1, r3
 80030aa:	43db      	mvns	r3, r3
 80030ac:	401a      	ands	r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	0d1b      	lsrs	r3, r3, #20
 80030b2:	f003 031f 	and.w	r3, r3, #31
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	fa01 f303 	lsl.w	r3, r1, r3
 80030bc:	431a      	orrs	r2, r3
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80030c2:	bf00      	nop
 80030c4:	371c      	adds	r7, #28
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
	...

080030d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e8:	43db      	mvns	r3, r3
 80030ea:	401a      	ands	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f003 0318 	and.w	r3, r3, #24
 80030f2:	4908      	ldr	r1, [pc, #32]	@ (8003114 <LL_ADC_SetChannelSingleDiff+0x44>)
 80030f4:	40d9      	lsrs	r1, r3
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	400b      	ands	r3, r1
 80030fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030fe:	431a      	orrs	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003106:	bf00      	nop
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	0007ffff 	.word	0x0007ffff

08003118 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 031f 	and.w	r3, r3, #31
}
 8003128:	4618      	mov	r0, r3
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003144:	4618      	mov	r0, r3
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003160:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6093      	str	r3, [r2, #8]
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003184:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003188:	d101      	bne.n	800318e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80031ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80031b0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031d8:	d101      	bne.n	80031de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80031fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003200:	f043 0201 	orr.w	r2, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b01      	cmp	r3, #1
 8003226:	d101      	bne.n	800322c <LL_ADC_IsEnabled+0x18>
 8003228:	2301      	movs	r3, #1
 800322a:	e000      	b.n	800322e <LL_ADC_IsEnabled+0x1a>
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800324a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800324e:	f043 0204 	orr.w	r2, r3, #4
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	2b04      	cmp	r3, #4
 8003274:	d101      	bne.n	800327a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 0308 	and.w	r3, r3, #8
 8003298:	2b08      	cmp	r3, #8
 800329a:	d101      	bne.n	80032a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800329c:	2301      	movs	r3, #1
 800329e:	e000      	b.n	80032a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
	...

080032b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032b0:	b590      	push	{r4, r7, lr}
 80032b2:	b089      	sub	sp, #36	@ 0x24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80032bc:	2300      	movs	r3, #0
 80032be:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e1a9      	b.n	800361e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d109      	bne.n	80032ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff fa1f 	bl	800271c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff ff3f 	bl	8003174 <LL_ADC_IsDeepPowerDownEnabled>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d004      	beq.n	8003306 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff ff25 	bl	8003150 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff ff5a 	bl	80031c4 <LL_ADC_IsInternalRegulatorEnabled>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d115      	bne.n	8003342 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff ff3e 	bl	800319c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003320:	4b9c      	ldr	r3, [pc, #624]	@ (8003594 <HAL_ADC_Init+0x2e4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	099b      	lsrs	r3, r3, #6
 8003326:	4a9c      	ldr	r2, [pc, #624]	@ (8003598 <HAL_ADC_Init+0x2e8>)
 8003328:	fba2 2303 	umull	r2, r3, r2, r3
 800332c:	099b      	lsrs	r3, r3, #6
 800332e:	3301      	adds	r3, #1
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003334:	e002      	b.n	800333c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	3b01      	subs	r3, #1
 800333a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f9      	bne.n	8003336 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff ff3c 	bl	80031c4 <LL_ADC_IsInternalRegulatorEnabled>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10d      	bne.n	800336e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003356:	f043 0210 	orr.w	r2, r3, #16
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003362:	f043 0201 	orr.w	r2, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff ff75 	bl	8003262 <LL_ADC_REG_IsConversionOngoing>
 8003378:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	2b00      	cmp	r3, #0
 8003384:	f040 8142 	bne.w	800360c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	2b00      	cmp	r3, #0
 800338c:	f040 813e 	bne.w	800360c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003394:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003398:	f043 0202 	orr.w	r2, r3, #2
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff ff35 	bl	8003214 <LL_ADC_IsEnabled>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d141      	bne.n	8003434 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033b8:	d004      	beq.n	80033c4 <HAL_ADC_Init+0x114>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a77      	ldr	r2, [pc, #476]	@ (800359c <HAL_ADC_Init+0x2ec>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d10f      	bne.n	80033e4 <HAL_ADC_Init+0x134>
 80033c4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80033c8:	f7ff ff24 	bl	8003214 <LL_ADC_IsEnabled>
 80033cc:	4604      	mov	r4, r0
 80033ce:	4873      	ldr	r0, [pc, #460]	@ (800359c <HAL_ADC_Init+0x2ec>)
 80033d0:	f7ff ff20 	bl	8003214 <LL_ADC_IsEnabled>
 80033d4:	4603      	mov	r3, r0
 80033d6:	4323      	orrs	r3, r4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	bf0c      	ite	eq
 80033dc:	2301      	moveq	r3, #1
 80033de:	2300      	movne	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	e012      	b.n	800340a <HAL_ADC_Init+0x15a>
 80033e4:	486e      	ldr	r0, [pc, #440]	@ (80035a0 <HAL_ADC_Init+0x2f0>)
 80033e6:	f7ff ff15 	bl	8003214 <LL_ADC_IsEnabled>
 80033ea:	4604      	mov	r4, r0
 80033ec:	486d      	ldr	r0, [pc, #436]	@ (80035a4 <HAL_ADC_Init+0x2f4>)
 80033ee:	f7ff ff11 	bl	8003214 <LL_ADC_IsEnabled>
 80033f2:	4603      	mov	r3, r0
 80033f4:	431c      	orrs	r4, r3
 80033f6:	486c      	ldr	r0, [pc, #432]	@ (80035a8 <HAL_ADC_Init+0x2f8>)
 80033f8:	f7ff ff0c 	bl	8003214 <LL_ADC_IsEnabled>
 80033fc:	4603      	mov	r3, r0
 80033fe:	4323      	orrs	r3, r4
 8003400:	2b00      	cmp	r3, #0
 8003402:	bf0c      	ite	eq
 8003404:	2301      	moveq	r3, #1
 8003406:	2300      	movne	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d012      	beq.n	8003434 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003416:	d004      	beq.n	8003422 <HAL_ADC_Init+0x172>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a5f      	ldr	r2, [pc, #380]	@ (800359c <HAL_ADC_Init+0x2ec>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d101      	bne.n	8003426 <HAL_ADC_Init+0x176>
 8003422:	4a62      	ldr	r2, [pc, #392]	@ (80035ac <HAL_ADC_Init+0x2fc>)
 8003424:	e000      	b.n	8003428 <HAL_ADC_Init+0x178>
 8003426:	4a62      	ldr	r2, [pc, #392]	@ (80035b0 <HAL_ADC_Init+0x300>)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	4619      	mov	r1, r3
 800342e:	4610      	mov	r0, r2
 8003430:	f7ff fcfe 	bl	8002e30 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	7f5b      	ldrb	r3, [r3, #29]
 8003438:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800343e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003444:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800344a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003452:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003454:	4313      	orrs	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800345e:	2b01      	cmp	r3, #1
 8003460:	d106      	bne.n	8003470 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003466:	3b01      	subs	r3, #1
 8003468:	045b      	lsls	r3, r3, #17
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4313      	orrs	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003474:	2b00      	cmp	r3, #0
 8003476:	d009      	beq.n	800348c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003484:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4313      	orrs	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	4b48      	ldr	r3, [pc, #288]	@ (80035b4 <HAL_ADC_Init+0x304>)
 8003494:	4013      	ands	r3, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6812      	ldr	r2, [r2, #0]
 800349a:	69b9      	ldr	r1, [r7, #24]
 800349c:	430b      	orrs	r3, r1
 800349e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff fee4 	bl	8003288 <LL_ADC_INJ_IsConversionOngoing>
 80034c0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d17f      	bne.n	80035c8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d17c      	bne.n	80035c8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80034d2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80034da:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80034dc:	4313      	orrs	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034ea:	f023 0302 	bic.w	r3, r3, #2
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	69b9      	ldr	r1, [r7, #24]
 80034f4:	430b      	orrs	r3, r1
 80034f6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d017      	beq.n	8003530 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800350e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003518:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800351c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6911      	ldr	r1, [r2, #16]
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6812      	ldr	r2, [r2, #0]
 8003528:	430b      	orrs	r3, r1
 800352a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800352e:	e013      	b.n	8003558 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691a      	ldr	r2, [r3, #16]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800353e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003550:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003554:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800355e:	2b01      	cmp	r3, #1
 8003560:	d12a      	bne.n	80035b8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800356c:	f023 0304 	bic.w	r3, r3, #4
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003578:	4311      	orrs	r1, r2
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800357e:	4311      	orrs	r1, r2
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003584:	430a      	orrs	r2, r1
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0201 	orr.w	r2, r2, #1
 8003590:	611a      	str	r2, [r3, #16]
 8003592:	e019      	b.n	80035c8 <HAL_ADC_Init+0x318>
 8003594:	20000044 	.word	0x20000044
 8003598:	053e2d63 	.word	0x053e2d63
 800359c:	50000100 	.word	0x50000100
 80035a0:	50000400 	.word	0x50000400
 80035a4:	50000500 	.word	0x50000500
 80035a8:	50000600 	.word	0x50000600
 80035ac:	50000300 	.word	0x50000300
 80035b0:	50000700 	.word	0x50000700
 80035b4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691a      	ldr	r2, [r3, #16]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0201 	bic.w	r2, r2, #1
 80035c6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d10c      	bne.n	80035ea <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d6:	f023 010f 	bic.w	r1, r3, #15
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	1e5a      	subs	r2, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80035e8:	e007      	b.n	80035fa <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 020f 	bic.w	r2, r2, #15
 80035f8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035fe:	f023 0303 	bic.w	r3, r3, #3
 8003602:	f043 0201 	orr.w	r2, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	65da      	str	r2, [r3, #92]	@ 0x5c
 800360a:	e007      	b.n	800361c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003610:	f043 0210 	orr.w	r2, r3, #16
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800361c:	7ffb      	ldrb	r3, [r7, #31]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3724      	adds	r7, #36	@ 0x24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd90      	pop	{r4, r7, pc}
 8003626:	bf00      	nop

08003628 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800363c:	d004      	beq.n	8003648 <HAL_ADC_Start_DMA+0x20>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a5a      	ldr	r2, [pc, #360]	@ (80037ac <HAL_ADC_Start_DMA+0x184>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d101      	bne.n	800364c <HAL_ADC_Start_DMA+0x24>
 8003648:	4b59      	ldr	r3, [pc, #356]	@ (80037b0 <HAL_ADC_Start_DMA+0x188>)
 800364a:	e000      	b.n	800364e <HAL_ADC_Start_DMA+0x26>
 800364c:	4b59      	ldr	r3, [pc, #356]	@ (80037b4 <HAL_ADC_Start_DMA+0x18c>)
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff fd62 	bl	8003118 <LL_ADC_GetMultimode>
 8003654:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff fe01 	bl	8003262 <LL_ADC_REG_IsConversionOngoing>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	f040 809b 	bne.w	800379e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800366e:	2b01      	cmp	r3, #1
 8003670:	d101      	bne.n	8003676 <HAL_ADC_Start_DMA+0x4e>
 8003672:	2302      	movs	r3, #2
 8003674:	e096      	b.n	80037a4 <HAL_ADC_Start_DMA+0x17c>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a4d      	ldr	r2, [pc, #308]	@ (80037b8 <HAL_ADC_Start_DMA+0x190>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d008      	beq.n	800369a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d005      	beq.n	800369a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	2b05      	cmp	r3, #5
 8003692:	d002      	beq.n	800369a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	2b09      	cmp	r3, #9
 8003698:	d17a      	bne.n	8003790 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 ff60 	bl	8004560 <ADC_Enable>
 80036a0:	4603      	mov	r3, r0
 80036a2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80036a4:	7dfb      	ldrb	r3, [r7, #23]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d16d      	bne.n	8003786 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80036b2:	f023 0301 	bic.w	r3, r3, #1
 80036b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a3a      	ldr	r2, [pc, #232]	@ (80037ac <HAL_ADC_Start_DMA+0x184>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d009      	beq.n	80036dc <HAL_ADC_Start_DMA+0xb4>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a3b      	ldr	r2, [pc, #236]	@ (80037bc <HAL_ADC_Start_DMA+0x194>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d002      	beq.n	80036d8 <HAL_ADC_Start_DMA+0xb0>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	e003      	b.n	80036e0 <HAL_ADC_Start_DMA+0xb8>
 80036d8:	4b39      	ldr	r3, [pc, #228]	@ (80037c0 <HAL_ADC_Start_DMA+0x198>)
 80036da:	e001      	b.n	80036e0 <HAL_ADC_Start_DMA+0xb8>
 80036dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d002      	beq.n	80036ee <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d105      	bne.n	80036fa <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d006      	beq.n	8003714 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800370a:	f023 0206 	bic.w	r2, r3, #6
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	661a      	str	r2, [r3, #96]	@ 0x60
 8003712:	e002      	b.n	800371a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800371e:	4a29      	ldr	r2, [pc, #164]	@ (80037c4 <HAL_ADC_Start_DMA+0x19c>)
 8003720:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003726:	4a28      	ldr	r2, [pc, #160]	@ (80037c8 <HAL_ADC_Start_DMA+0x1a0>)
 8003728:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800372e:	4a27      	ldr	r2, [pc, #156]	@ (80037cc <HAL_ADC_Start_DMA+0x1a4>)
 8003730:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	221c      	movs	r2, #28
 8003738:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f042 0210 	orr.w	r2, r2, #16
 8003750:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0201 	orr.w	r2, r2, #1
 8003760:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	3340      	adds	r3, #64	@ 0x40
 800376c:	4619      	mov	r1, r3
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f001 fb37 	bl	8004de4 <HAL_DMA_Start_IT>
 8003776:	4603      	mov	r3, r0
 8003778:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff fd5b 	bl	800323a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003784:	e00d      	b.n	80037a2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800378e:	e008      	b.n	80037a2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800379c:	e001      	b.n	80037a2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800379e:	2302      	movs	r3, #2
 80037a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80037a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	50000100 	.word	0x50000100
 80037b0:	50000300 	.word	0x50000300
 80037b4:	50000700 	.word	0x50000700
 80037b8:	50000600 	.word	0x50000600
 80037bc:	50000500 	.word	0x50000500
 80037c0:	50000400 	.word	0x50000400
 80037c4:	0800468d 	.word	0x0800468d
 80037c8:	08004765 	.word	0x08004765
 80037cc:	08004781 	.word	0x08004781

080037d0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08a      	sub	sp, #40	@ 0x28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80037d8:	2300      	movs	r3, #0
 80037da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037f4:	d004      	beq.n	8003800 <HAL_ADC_IRQHandler+0x30>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a8e      	ldr	r2, [pc, #568]	@ (8003a34 <HAL_ADC_IRQHandler+0x264>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d101      	bne.n	8003804 <HAL_ADC_IRQHandler+0x34>
 8003800:	4b8d      	ldr	r3, [pc, #564]	@ (8003a38 <HAL_ADC_IRQHandler+0x268>)
 8003802:	e000      	b.n	8003806 <HAL_ADC_IRQHandler+0x36>
 8003804:	4b8d      	ldr	r3, [pc, #564]	@ (8003a3c <HAL_ADC_IRQHandler+0x26c>)
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff fc86 	bl	8003118 <LL_ADC_GetMultimode>
 800380c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d017      	beq.n	8003848 <HAL_ADC_IRQHandler+0x78>
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d012      	beq.n	8003848 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	2b00      	cmp	r3, #0
 800382c:	d105      	bne.n	800383a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003832:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f001 f808 	bl	8004850 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2202      	movs	r2, #2
 8003846:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	2b00      	cmp	r3, #0
 8003850:	d004      	beq.n	800385c <HAL_ADC_IRQHandler+0x8c>
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10b      	bne.n	8003874 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 8094 	beq.w	8003990 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 808e 	beq.w	8003990 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003878:	f003 0310 	and.w	r3, r3, #16
 800387c:	2b00      	cmp	r3, #0
 800387e:	d105      	bne.n	800388c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003884:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff fb9f 	bl	8002fd4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d072      	beq.n	8003982 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a64      	ldr	r2, [pc, #400]	@ (8003a34 <HAL_ADC_IRQHandler+0x264>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d009      	beq.n	80038ba <HAL_ADC_IRQHandler+0xea>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a65      	ldr	r2, [pc, #404]	@ (8003a40 <HAL_ADC_IRQHandler+0x270>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d002      	beq.n	80038b6 <HAL_ADC_IRQHandler+0xe6>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	e003      	b.n	80038be <HAL_ADC_IRQHandler+0xee>
 80038b6:	4b63      	ldr	r3, [pc, #396]	@ (8003a44 <HAL_ADC_IRQHandler+0x274>)
 80038b8:	e001      	b.n	80038be <HAL_ADC_IRQHandler+0xee>
 80038ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6812      	ldr	r2, [r2, #0]
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d008      	beq.n	80038d8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2b05      	cmp	r3, #5
 80038d0:	d002      	beq.n	80038d8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b09      	cmp	r3, #9
 80038d6:	d104      	bne.n	80038e2 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	623b      	str	r3, [r7, #32]
 80038e0:	e014      	b.n	800390c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a53      	ldr	r2, [pc, #332]	@ (8003a34 <HAL_ADC_IRQHandler+0x264>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d009      	beq.n	8003900 <HAL_ADC_IRQHandler+0x130>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a53      	ldr	r2, [pc, #332]	@ (8003a40 <HAL_ADC_IRQHandler+0x270>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d002      	beq.n	80038fc <HAL_ADC_IRQHandler+0x12c>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	e003      	b.n	8003904 <HAL_ADC_IRQHandler+0x134>
 80038fc:	4b51      	ldr	r3, [pc, #324]	@ (8003a44 <HAL_ADC_IRQHandler+0x274>)
 80038fe:	e001      	b.n	8003904 <HAL_ADC_IRQHandler+0x134>
 8003900:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003904:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d135      	bne.n	8003982 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b08      	cmp	r3, #8
 8003922:	d12e      	bne.n	8003982 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff fc9a 	bl	8003262 <LL_ADC_REG_IsConversionOngoing>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d11a      	bne.n	800396a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 020c 	bic.w	r2, r2, #12
 8003942:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003948:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003954:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d112      	bne.n	8003982 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003960:	f043 0201 	orr.w	r2, r3, #1
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003968:	e00b      	b.n	8003982 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800396e:	f043 0210 	orr.w	r2, r3, #16
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800397a:	f043 0201 	orr.w	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f984 	bl	8003c90 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	220c      	movs	r2, #12
 800398e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d004      	beq.n	80039a4 <HAL_ADC_IRQHandler+0x1d4>
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	f003 0320 	and.w	r3, r3, #32
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10b      	bne.n	80039bc <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 80b3 	beq.w	8003b16 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 80ad 	beq.w	8003b16 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d105      	bne.n	80039d4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039cc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff fb3a 	bl	8003052 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80039de:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff faf5 	bl	8002fd4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80039ea:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a10      	ldr	r2, [pc, #64]	@ (8003a34 <HAL_ADC_IRQHandler+0x264>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d009      	beq.n	8003a0a <HAL_ADC_IRQHandler+0x23a>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a11      	ldr	r2, [pc, #68]	@ (8003a40 <HAL_ADC_IRQHandler+0x270>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d002      	beq.n	8003a06 <HAL_ADC_IRQHandler+0x236>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	e003      	b.n	8003a0e <HAL_ADC_IRQHandler+0x23e>
 8003a06:	4b0f      	ldr	r3, [pc, #60]	@ (8003a44 <HAL_ADC_IRQHandler+0x274>)
 8003a08:	e001      	b.n	8003a0e <HAL_ADC_IRQHandler+0x23e>
 8003a0a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d008      	beq.n	8003a28 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	2b06      	cmp	r3, #6
 8003a20:	d002      	beq.n	8003a28 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2b07      	cmp	r3, #7
 8003a26:	d10f      	bne.n	8003a48 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	623b      	str	r3, [r7, #32]
 8003a30:	e01f      	b.n	8003a72 <HAL_ADC_IRQHandler+0x2a2>
 8003a32:	bf00      	nop
 8003a34:	50000100 	.word	0x50000100
 8003a38:	50000300 	.word	0x50000300
 8003a3c:	50000700 	.word	0x50000700
 8003a40:	50000500 	.word	0x50000500
 8003a44:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a8b      	ldr	r2, [pc, #556]	@ (8003c7c <HAL_ADC_IRQHandler+0x4ac>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d009      	beq.n	8003a66 <HAL_ADC_IRQHandler+0x296>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a8a      	ldr	r2, [pc, #552]	@ (8003c80 <HAL_ADC_IRQHandler+0x4b0>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d002      	beq.n	8003a62 <HAL_ADC_IRQHandler+0x292>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	e003      	b.n	8003a6a <HAL_ADC_IRQHandler+0x29a>
 8003a62:	4b88      	ldr	r3, [pc, #544]	@ (8003c84 <HAL_ADC_IRQHandler+0x4b4>)
 8003a64:	e001      	b.n	8003a6a <HAL_ADC_IRQHandler+0x29a>
 8003a66:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003a6a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d047      	beq.n	8003b08 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d007      	beq.n	8003a92 <HAL_ADC_IRQHandler+0x2c2>
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d03f      	beq.n	8003b08 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d13a      	bne.n	8003b08 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a9c:	2b40      	cmp	r3, #64	@ 0x40
 8003a9e:	d133      	bne.n	8003b08 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d12e      	bne.n	8003b08 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff fbea 	bl	8003288 <LL_ADC_INJ_IsConversionOngoing>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d11a      	bne.n	8003af0 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ac8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ace:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d112      	bne.n	8003b08 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae6:	f043 0201 	orr.w	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003aee:	e00b      	b.n	8003b08 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af4:	f043 0210 	orr.w	r2, r3, #16
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b00:	f043 0201 	orr.w	r2, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 fe79 	bl	8004800 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2260      	movs	r2, #96	@ 0x60
 8003b14:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d011      	beq.n	8003b44 <HAL_ADC_IRQHandler+0x374>
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00c      	beq.n	8003b44 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b2e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f8be 	bl	8003cb8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2280      	movs	r2, #128	@ 0x80
 8003b42:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d012      	beq.n	8003b74 <HAL_ADC_IRQHandler+0x3a4>
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00d      	beq.n	8003b74 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b5c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 fe5f 	bl	8004828 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b72:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d012      	beq.n	8003ba4 <HAL_ADC_IRQHandler+0x3d4>
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00d      	beq.n	8003ba4 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b8c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 fe51 	bl	800483c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ba2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f003 0310 	and.w	r3, r3, #16
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d043      	beq.n	8003c36 <HAL_ADC_IRQHandler+0x466>
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	f003 0310 	and.w	r3, r3, #16
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d03e      	beq.n	8003c36 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d102      	bne.n	8003bc6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bc4:	e021      	b.n	8003c0a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d015      	beq.n	8003bf8 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bd4:	d004      	beq.n	8003be0 <HAL_ADC_IRQHandler+0x410>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a28      	ldr	r2, [pc, #160]	@ (8003c7c <HAL_ADC_IRQHandler+0x4ac>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d101      	bne.n	8003be4 <HAL_ADC_IRQHandler+0x414>
 8003be0:	4b29      	ldr	r3, [pc, #164]	@ (8003c88 <HAL_ADC_IRQHandler+0x4b8>)
 8003be2:	e000      	b.n	8003be6 <HAL_ADC_IRQHandler+0x416>
 8003be4:	4b29      	ldr	r3, [pc, #164]	@ (8003c8c <HAL_ADC_IRQHandler+0x4bc>)
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff faa4 	bl	8003134 <LL_ADC_GetMultiDMATransfer>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00b      	beq.n	8003c0a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bf6:	e008      	b.n	8003c0a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003c06:	2301      	movs	r3, #1
 8003c08:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d10e      	bne.n	8003c2e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c14:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c20:	f043 0202 	orr.w	r2, r3, #2
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f84f 	bl	8003ccc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2210      	movs	r2, #16
 8003c34:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d018      	beq.n	8003c72 <HAL_ADC_IRQHandler+0x4a2>
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d013      	beq.n	8003c72 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c4e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c5a:	f043 0208 	orr.w	r2, r3, #8
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c6a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 fdd1 	bl	8004814 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003c72:	bf00      	nop
 8003c74:	3728      	adds	r7, #40	@ 0x28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	50000100 	.word	0x50000100
 8003c80:	50000500 	.word	0x50000500
 8003c84:	50000400 	.word	0x50000400
 8003c88:	50000300 	.word	0x50000300
 8003c8c:	50000700 	.word	0x50000700

08003c90 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b0b6      	sub	sp, #216	@ 0xd8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d102      	bne.n	8003d04 <HAL_ADC_ConfigChannel+0x24>
 8003cfe:	2302      	movs	r3, #2
 8003d00:	f000 bc13 	b.w	800452a <HAL_ADC_ConfigChannel+0x84a>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff faa6 	bl	8003262 <LL_ADC_REG_IsConversionOngoing>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f040 83f3 	bne.w	8004504 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6818      	ldr	r0, [r3, #0]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6859      	ldr	r1, [r3, #4]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f7ff f965 	bl	8002ffa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff fa94 	bl	8003262 <LL_ADC_REG_IsConversionOngoing>
 8003d3a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff faa0 	bl	8003288 <LL_ADC_INJ_IsConversionOngoing>
 8003d48:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d4c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f040 81d9 	bne.w	8004108 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f040 81d4 	bne.w	8004108 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d68:	d10f      	bne.n	8003d8a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2200      	movs	r2, #0
 8003d74:	4619      	mov	r1, r3
 8003d76:	f7ff f97f 	bl	8003078 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff f913 	bl	8002fae <LL_ADC_SetSamplingTimeCommonConfig>
 8003d88:	e00e      	b.n	8003da8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6818      	ldr	r0, [r3, #0]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	6819      	ldr	r1, [r3, #0]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	461a      	mov	r2, r3
 8003d98:	f7ff f96e 	bl	8003078 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2100      	movs	r1, #0
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff f903 	bl	8002fae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	695a      	ldr	r2, [r3, #20]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	08db      	lsrs	r3, r3, #3
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d022      	beq.n	8003e10 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6818      	ldr	r0, [r3, #0]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	6919      	ldr	r1, [r3, #16]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003dda:	f7ff f85d 	bl	8002e98 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	6919      	ldr	r1, [r3, #16]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	461a      	mov	r2, r3
 8003dec:	f7ff f8a9 	bl	8002f42 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6818      	ldr	r0, [r3, #0]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d102      	bne.n	8003e06 <HAL_ADC_ConfigChannel+0x126>
 8003e00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e04:	e000      	b.n	8003e08 <HAL_ADC_ConfigChannel+0x128>
 8003e06:	2300      	movs	r3, #0
 8003e08:	461a      	mov	r2, r3
 8003e0a:	f7ff f8b5 	bl	8002f78 <LL_ADC_SetOffsetSaturation>
 8003e0e:	e17b      	b.n	8004108 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2100      	movs	r1, #0
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7ff f862 	bl	8002ee0 <LL_ADC_GetOffsetChannel>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10a      	bne.n	8003e3c <HAL_ADC_ConfigChannel+0x15c>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff f857 	bl	8002ee0 <LL_ADC_GetOffsetChannel>
 8003e32:	4603      	mov	r3, r0
 8003e34:	0e9b      	lsrs	r3, r3, #26
 8003e36:	f003 021f 	and.w	r2, r3, #31
 8003e3a:	e01e      	b.n	8003e7a <HAL_ADC_ConfigChannel+0x19a>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2100      	movs	r1, #0
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff f84c 	bl	8002ee0 <LL_ADC_GetOffsetChannel>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003e52:	fa93 f3a3 	rbit	r3, r3
 8003e56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003e5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003e6a:	2320      	movs	r3, #32
 8003e6c:	e004      	b.n	8003e78 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003e6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003e72:	fab3 f383 	clz	r3, r3
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d105      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0x1b2>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	0e9b      	lsrs	r3, r3, #26
 8003e8c:	f003 031f 	and.w	r3, r3, #31
 8003e90:	e018      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x1e4>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003e9e:	fa93 f3a3 	rbit	r3, r3
 8003ea2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003ea6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003eaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003eae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003eb6:	2320      	movs	r3, #32
 8003eb8:	e004      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003eba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003ebe:	fab3 f383 	clz	r3, r3
 8003ec2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d106      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2100      	movs	r1, #0
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7ff f81b 	bl	8002f0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2101      	movs	r1, #1
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7fe ffff 	bl	8002ee0 <LL_ADC_GetOffsetChannel>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10a      	bne.n	8003f02 <HAL_ADC_ConfigChannel+0x222>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fe fff4 	bl	8002ee0 <LL_ADC_GetOffsetChannel>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	0e9b      	lsrs	r3, r3, #26
 8003efc:	f003 021f 	and.w	r2, r3, #31
 8003f00:	e01e      	b.n	8003f40 <HAL_ADC_ConfigChannel+0x260>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2101      	movs	r1, #1
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7fe ffe9 	bl	8002ee0 <LL_ADC_GetOffsetChannel>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003f18:	fa93 f3a3 	rbit	r3, r3
 8003f1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003f20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003f28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003f30:	2320      	movs	r3, #32
 8003f32:	e004      	b.n	8003f3e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003f34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f38:	fab3 f383 	clz	r3, r3
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d105      	bne.n	8003f58 <HAL_ADC_ConfigChannel+0x278>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	0e9b      	lsrs	r3, r3, #26
 8003f52:	f003 031f 	and.w	r3, r3, #31
 8003f56:	e018      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x2aa>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f64:	fa93 f3a3 	rbit	r3, r3
 8003f68:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003f6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003f74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003f7c:	2320      	movs	r3, #32
 8003f7e:	e004      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003f80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f84:	fab3 f383 	clz	r3, r3
 8003f88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d106      	bne.n	8003f9c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2200      	movs	r2, #0
 8003f94:	2101      	movs	r1, #1
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fe ffb8 	bl	8002f0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2102      	movs	r1, #2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fe ff9c 	bl	8002ee0 <LL_ADC_GetOffsetChannel>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10a      	bne.n	8003fc8 <HAL_ADC_ConfigChannel+0x2e8>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2102      	movs	r1, #2
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7fe ff91 	bl	8002ee0 <LL_ADC_GetOffsetChannel>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	0e9b      	lsrs	r3, r3, #26
 8003fc2:	f003 021f 	and.w	r2, r3, #31
 8003fc6:	e01e      	b.n	8004006 <HAL_ADC_ConfigChannel+0x326>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2102      	movs	r1, #2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fe ff86 	bl	8002ee0 <LL_ADC_GetOffsetChannel>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fde:	fa93 f3a3 	rbit	r3, r3
 8003fe2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003fe6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003fea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003fee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003ff6:	2320      	movs	r3, #32
 8003ff8:	e004      	b.n	8004004 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003ffa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ffe:	fab3 f383 	clz	r3, r3
 8004002:	b2db      	uxtb	r3, r3
 8004004:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800400e:	2b00      	cmp	r3, #0
 8004010:	d105      	bne.n	800401e <HAL_ADC_ConfigChannel+0x33e>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	0e9b      	lsrs	r3, r3, #26
 8004018:	f003 031f 	and.w	r3, r3, #31
 800401c:	e016      	b.n	800404c <HAL_ADC_ConfigChannel+0x36c>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004026:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800402a:	fa93 f3a3 	rbit	r3, r3
 800402e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004030:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004032:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004036:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800403e:	2320      	movs	r3, #32
 8004040:	e004      	b.n	800404c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004042:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004046:	fab3 f383 	clz	r3, r3
 800404a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800404c:	429a      	cmp	r2, r3
 800404e:	d106      	bne.n	800405e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2200      	movs	r2, #0
 8004056:	2102      	movs	r1, #2
 8004058:	4618      	mov	r0, r3
 800405a:	f7fe ff57 	bl	8002f0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2103      	movs	r1, #3
 8004064:	4618      	mov	r0, r3
 8004066:	f7fe ff3b 	bl	8002ee0 <LL_ADC_GetOffsetChannel>
 800406a:	4603      	mov	r3, r0
 800406c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10a      	bne.n	800408a <HAL_ADC_ConfigChannel+0x3aa>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2103      	movs	r1, #3
 800407a:	4618      	mov	r0, r3
 800407c:	f7fe ff30 	bl	8002ee0 <LL_ADC_GetOffsetChannel>
 8004080:	4603      	mov	r3, r0
 8004082:	0e9b      	lsrs	r3, r3, #26
 8004084:	f003 021f 	and.w	r2, r3, #31
 8004088:	e017      	b.n	80040ba <HAL_ADC_ConfigChannel+0x3da>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2103      	movs	r1, #3
 8004090:	4618      	mov	r0, r3
 8004092:	f7fe ff25 	bl	8002ee0 <LL_ADC_GetOffsetChannel>
 8004096:	4603      	mov	r3, r0
 8004098:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800409c:	fa93 f3a3 	rbit	r3, r3
 80040a0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80040a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040a4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80040a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80040ac:	2320      	movs	r3, #32
 80040ae:	e003      	b.n	80040b8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80040b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040b2:	fab3 f383 	clz	r3, r3
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d105      	bne.n	80040d2 <HAL_ADC_ConfigChannel+0x3f2>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	0e9b      	lsrs	r3, r3, #26
 80040cc:	f003 031f 	and.w	r3, r3, #31
 80040d0:	e011      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x416>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040da:	fa93 f3a3 	rbit	r3, r3
 80040de:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80040e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80040e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80040ea:	2320      	movs	r3, #32
 80040ec:	e003      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80040ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040f0:	fab3 f383 	clz	r3, r3
 80040f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d106      	bne.n	8004108 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2200      	movs	r2, #0
 8004100:	2103      	movs	r1, #3
 8004102:	4618      	mov	r0, r3
 8004104:	f7fe ff02 	bl	8002f0c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f7ff f881 	bl	8003214 <LL_ADC_IsEnabled>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	f040 813d 	bne.w	8004394 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6818      	ldr	r0, [r3, #0]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	6819      	ldr	r1, [r3, #0]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	461a      	mov	r2, r3
 8004128:	f7fe ffd2 	bl	80030d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	4aa2      	ldr	r2, [pc, #648]	@ (80043bc <HAL_ADC_ConfigChannel+0x6dc>)
 8004132:	4293      	cmp	r3, r2
 8004134:	f040 812e 	bne.w	8004394 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10b      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x480>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	0e9b      	lsrs	r3, r3, #26
 800414e:	3301      	adds	r3, #1
 8004150:	f003 031f 	and.w	r3, r3, #31
 8004154:	2b09      	cmp	r3, #9
 8004156:	bf94      	ite	ls
 8004158:	2301      	movls	r3, #1
 800415a:	2300      	movhi	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	e019      	b.n	8004194 <HAL_ADC_ConfigChannel+0x4b4>
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004166:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004168:	fa93 f3a3 	rbit	r3, r3
 800416c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800416e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004170:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004172:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004178:	2320      	movs	r3, #32
 800417a:	e003      	b.n	8004184 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800417c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800417e:	fab3 f383 	clz	r3, r3
 8004182:	b2db      	uxtb	r3, r3
 8004184:	3301      	adds	r3, #1
 8004186:	f003 031f 	and.w	r3, r3, #31
 800418a:	2b09      	cmp	r3, #9
 800418c:	bf94      	ite	ls
 800418e:	2301      	movls	r3, #1
 8004190:	2300      	movhi	r3, #0
 8004192:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004194:	2b00      	cmp	r3, #0
 8004196:	d079      	beq.n	800428c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d107      	bne.n	80041b4 <HAL_ADC_ConfigChannel+0x4d4>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	0e9b      	lsrs	r3, r3, #26
 80041aa:	3301      	adds	r3, #1
 80041ac:	069b      	lsls	r3, r3, #26
 80041ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041b2:	e015      	b.n	80041e0 <HAL_ADC_ConfigChannel+0x500>
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041bc:	fa93 f3a3 	rbit	r3, r3
 80041c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80041c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041c4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80041c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80041cc:	2320      	movs	r3, #32
 80041ce:	e003      	b.n	80041d8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80041d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041d2:	fab3 f383 	clz	r3, r3
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	3301      	adds	r3, #1
 80041da:	069b      	lsls	r3, r3, #26
 80041dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d109      	bne.n	8004200 <HAL_ADC_ConfigChannel+0x520>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	0e9b      	lsrs	r3, r3, #26
 80041f2:	3301      	adds	r3, #1
 80041f4:	f003 031f 	and.w	r3, r3, #31
 80041f8:	2101      	movs	r1, #1
 80041fa:	fa01 f303 	lsl.w	r3, r1, r3
 80041fe:	e017      	b.n	8004230 <HAL_ADC_ConfigChannel+0x550>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004206:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004208:	fa93 f3a3 	rbit	r3, r3
 800420c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800420e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004210:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004212:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004218:	2320      	movs	r3, #32
 800421a:	e003      	b.n	8004224 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800421c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800421e:	fab3 f383 	clz	r3, r3
 8004222:	b2db      	uxtb	r3, r3
 8004224:	3301      	adds	r3, #1
 8004226:	f003 031f 	and.w	r3, r3, #31
 800422a:	2101      	movs	r1, #1
 800422c:	fa01 f303 	lsl.w	r3, r1, r3
 8004230:	ea42 0103 	orr.w	r1, r2, r3
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10a      	bne.n	8004256 <HAL_ADC_ConfigChannel+0x576>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	0e9b      	lsrs	r3, r3, #26
 8004246:	3301      	adds	r3, #1
 8004248:	f003 021f 	and.w	r2, r3, #31
 800424c:	4613      	mov	r3, r2
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	4413      	add	r3, r2
 8004252:	051b      	lsls	r3, r3, #20
 8004254:	e018      	b.n	8004288 <HAL_ADC_ConfigChannel+0x5a8>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425e:	fa93 f3a3 	rbit	r3, r3
 8004262:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004266:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800426e:	2320      	movs	r3, #32
 8004270:	e003      	b.n	800427a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004274:	fab3 f383 	clz	r3, r3
 8004278:	b2db      	uxtb	r3, r3
 800427a:	3301      	adds	r3, #1
 800427c:	f003 021f 	and.w	r2, r3, #31
 8004280:	4613      	mov	r3, r2
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	4413      	add	r3, r2
 8004286:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004288:	430b      	orrs	r3, r1
 800428a:	e07e      	b.n	800438a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004294:	2b00      	cmp	r3, #0
 8004296:	d107      	bne.n	80042a8 <HAL_ADC_ConfigChannel+0x5c8>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	0e9b      	lsrs	r3, r3, #26
 800429e:	3301      	adds	r3, #1
 80042a0:	069b      	lsls	r3, r3, #26
 80042a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042a6:	e015      	b.n	80042d4 <HAL_ADC_ConfigChannel+0x5f4>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042b0:	fa93 f3a3 	rbit	r3, r3
 80042b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80042b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80042ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80042c0:	2320      	movs	r3, #32
 80042c2:	e003      	b.n	80042cc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80042c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c6:	fab3 f383 	clz	r3, r3
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	3301      	adds	r3, #1
 80042ce:	069b      	lsls	r3, r3, #26
 80042d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d109      	bne.n	80042f4 <HAL_ADC_ConfigChannel+0x614>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	0e9b      	lsrs	r3, r3, #26
 80042e6:	3301      	adds	r3, #1
 80042e8:	f003 031f 	and.w	r3, r3, #31
 80042ec:	2101      	movs	r1, #1
 80042ee:	fa01 f303 	lsl.w	r3, r1, r3
 80042f2:	e017      	b.n	8004324 <HAL_ADC_ConfigChannel+0x644>
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	fa93 f3a3 	rbit	r3, r3
 8004300:	61fb      	str	r3, [r7, #28]
  return result;
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800430c:	2320      	movs	r3, #32
 800430e:	e003      	b.n	8004318 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004312:	fab3 f383 	clz	r3, r3
 8004316:	b2db      	uxtb	r3, r3
 8004318:	3301      	adds	r3, #1
 800431a:	f003 031f 	and.w	r3, r3, #31
 800431e:	2101      	movs	r1, #1
 8004320:	fa01 f303 	lsl.w	r3, r1, r3
 8004324:	ea42 0103 	orr.w	r1, r2, r3
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10d      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x670>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	0e9b      	lsrs	r3, r3, #26
 800433a:	3301      	adds	r3, #1
 800433c:	f003 021f 	and.w	r2, r3, #31
 8004340:	4613      	mov	r3, r2
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	4413      	add	r3, r2
 8004346:	3b1e      	subs	r3, #30
 8004348:	051b      	lsls	r3, r3, #20
 800434a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800434e:	e01b      	b.n	8004388 <HAL_ADC_ConfigChannel+0x6a8>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	fa93 f3a3 	rbit	r3, r3
 800435c:	613b      	str	r3, [r7, #16]
  return result;
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004368:	2320      	movs	r3, #32
 800436a:	e003      	b.n	8004374 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	fab3 f383 	clz	r3, r3
 8004372:	b2db      	uxtb	r3, r3
 8004374:	3301      	adds	r3, #1
 8004376:	f003 021f 	and.w	r2, r3, #31
 800437a:	4613      	mov	r3, r2
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	4413      	add	r3, r2
 8004380:	3b1e      	subs	r3, #30
 8004382:	051b      	lsls	r3, r3, #20
 8004384:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004388:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800438e:	4619      	mov	r1, r3
 8004390:	f7fe fe72 	bl	8003078 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	4b09      	ldr	r3, [pc, #36]	@ (80043c0 <HAL_ADC_ConfigChannel+0x6e0>)
 800439a:	4013      	ands	r3, r2
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 80be 	beq.w	800451e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043aa:	d004      	beq.n	80043b6 <HAL_ADC_ConfigChannel+0x6d6>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a04      	ldr	r2, [pc, #16]	@ (80043c4 <HAL_ADC_ConfigChannel+0x6e4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d10a      	bne.n	80043cc <HAL_ADC_ConfigChannel+0x6ec>
 80043b6:	4b04      	ldr	r3, [pc, #16]	@ (80043c8 <HAL_ADC_ConfigChannel+0x6e8>)
 80043b8:	e009      	b.n	80043ce <HAL_ADC_ConfigChannel+0x6ee>
 80043ba:	bf00      	nop
 80043bc:	407f0000 	.word	0x407f0000
 80043c0:	80080000 	.word	0x80080000
 80043c4:	50000100 	.word	0x50000100
 80043c8:	50000300 	.word	0x50000300
 80043cc:	4b59      	ldr	r3, [pc, #356]	@ (8004534 <HAL_ADC_ConfigChannel+0x854>)
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fe fd54 	bl	8002e7c <LL_ADC_GetCommonPathInternalCh>
 80043d4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a56      	ldr	r2, [pc, #344]	@ (8004538 <HAL_ADC_ConfigChannel+0x858>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d004      	beq.n	80043ec <HAL_ADC_ConfigChannel+0x70c>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a55      	ldr	r2, [pc, #340]	@ (800453c <HAL_ADC_ConfigChannel+0x85c>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d13a      	bne.n	8004462 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80043ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80043f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d134      	bne.n	8004462 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004400:	d005      	beq.n	800440e <HAL_ADC_ConfigChannel+0x72e>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a4e      	ldr	r2, [pc, #312]	@ (8004540 <HAL_ADC_ConfigChannel+0x860>)
 8004408:	4293      	cmp	r3, r2
 800440a:	f040 8085 	bne.w	8004518 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004416:	d004      	beq.n	8004422 <HAL_ADC_ConfigChannel+0x742>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a49      	ldr	r2, [pc, #292]	@ (8004544 <HAL_ADC_ConfigChannel+0x864>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d101      	bne.n	8004426 <HAL_ADC_ConfigChannel+0x746>
 8004422:	4a49      	ldr	r2, [pc, #292]	@ (8004548 <HAL_ADC_ConfigChannel+0x868>)
 8004424:	e000      	b.n	8004428 <HAL_ADC_ConfigChannel+0x748>
 8004426:	4a43      	ldr	r2, [pc, #268]	@ (8004534 <HAL_ADC_ConfigChannel+0x854>)
 8004428:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800442c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004430:	4619      	mov	r1, r3
 8004432:	4610      	mov	r0, r2
 8004434:	f7fe fd0f 	bl	8002e56 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004438:	4b44      	ldr	r3, [pc, #272]	@ (800454c <HAL_ADC_ConfigChannel+0x86c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	099b      	lsrs	r3, r3, #6
 800443e:	4a44      	ldr	r2, [pc, #272]	@ (8004550 <HAL_ADC_ConfigChannel+0x870>)
 8004440:	fba2 2303 	umull	r2, r3, r2, r3
 8004444:	099b      	lsrs	r3, r3, #6
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	4613      	mov	r3, r2
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004452:	e002      	b.n	800445a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	3b01      	subs	r3, #1
 8004458:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f9      	bne.n	8004454 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004460:	e05a      	b.n	8004518 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a3b      	ldr	r2, [pc, #236]	@ (8004554 <HAL_ADC_ConfigChannel+0x874>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d125      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800446c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004470:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d11f      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a31      	ldr	r2, [pc, #196]	@ (8004544 <HAL_ADC_ConfigChannel+0x864>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d104      	bne.n	800448c <HAL_ADC_ConfigChannel+0x7ac>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a34      	ldr	r2, [pc, #208]	@ (8004558 <HAL_ADC_ConfigChannel+0x878>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d047      	beq.n	800451c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004494:	d004      	beq.n	80044a0 <HAL_ADC_ConfigChannel+0x7c0>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a2a      	ldr	r2, [pc, #168]	@ (8004544 <HAL_ADC_ConfigChannel+0x864>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d101      	bne.n	80044a4 <HAL_ADC_ConfigChannel+0x7c4>
 80044a0:	4a29      	ldr	r2, [pc, #164]	@ (8004548 <HAL_ADC_ConfigChannel+0x868>)
 80044a2:	e000      	b.n	80044a6 <HAL_ADC_ConfigChannel+0x7c6>
 80044a4:	4a23      	ldr	r2, [pc, #140]	@ (8004534 <HAL_ADC_ConfigChannel+0x854>)
 80044a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044ae:	4619      	mov	r1, r3
 80044b0:	4610      	mov	r0, r2
 80044b2:	f7fe fcd0 	bl	8002e56 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044b6:	e031      	b.n	800451c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a27      	ldr	r2, [pc, #156]	@ (800455c <HAL_ADC_ConfigChannel+0x87c>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d12d      	bne.n	800451e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80044c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d127      	bne.n	800451e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004544 <HAL_ADC_ConfigChannel+0x864>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d022      	beq.n	800451e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044e0:	d004      	beq.n	80044ec <HAL_ADC_ConfigChannel+0x80c>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a17      	ldr	r2, [pc, #92]	@ (8004544 <HAL_ADC_ConfigChannel+0x864>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d101      	bne.n	80044f0 <HAL_ADC_ConfigChannel+0x810>
 80044ec:	4a16      	ldr	r2, [pc, #88]	@ (8004548 <HAL_ADC_ConfigChannel+0x868>)
 80044ee:	e000      	b.n	80044f2 <HAL_ADC_ConfigChannel+0x812>
 80044f0:	4a10      	ldr	r2, [pc, #64]	@ (8004534 <HAL_ADC_ConfigChannel+0x854>)
 80044f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80044fa:	4619      	mov	r1, r3
 80044fc:	4610      	mov	r0, r2
 80044fe:	f7fe fcaa 	bl	8002e56 <LL_ADC_SetCommonPathInternalCh>
 8004502:	e00c      	b.n	800451e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004508:	f043 0220 	orr.w	r2, r3, #32
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004516:	e002      	b.n	800451e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004518:	bf00      	nop
 800451a:	e000      	b.n	800451e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800451c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004526:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800452a:	4618      	mov	r0, r3
 800452c:	37d8      	adds	r7, #216	@ 0xd8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	50000700 	.word	0x50000700
 8004538:	c3210000 	.word	0xc3210000
 800453c:	90c00010 	.word	0x90c00010
 8004540:	50000600 	.word	0x50000600
 8004544:	50000100 	.word	0x50000100
 8004548:	50000300 	.word	0x50000300
 800454c:	20000044 	.word	0x20000044
 8004550:	053e2d63 	.word	0x053e2d63
 8004554:	c7520000 	.word	0xc7520000
 8004558:	50000500 	.word	0x50000500
 800455c:	cb840000 	.word	0xcb840000

08004560 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004568:	2300      	movs	r3, #0
 800456a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	f7fe fe4f 	bl	8003214 <LL_ADC_IsEnabled>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d176      	bne.n	800466a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689a      	ldr	r2, [r3, #8]
 8004582:	4b3c      	ldr	r3, [pc, #240]	@ (8004674 <ADC_Enable+0x114>)
 8004584:	4013      	ands	r3, r2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00d      	beq.n	80045a6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800458e:	f043 0210 	orr.w	r2, r3, #16
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800459a:	f043 0201 	orr.w	r2, r3, #1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e062      	b.n	800466c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fe fe1e 	bl	80031ec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045b8:	d004      	beq.n	80045c4 <ADC_Enable+0x64>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a2e      	ldr	r2, [pc, #184]	@ (8004678 <ADC_Enable+0x118>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d101      	bne.n	80045c8 <ADC_Enable+0x68>
 80045c4:	4b2d      	ldr	r3, [pc, #180]	@ (800467c <ADC_Enable+0x11c>)
 80045c6:	e000      	b.n	80045ca <ADC_Enable+0x6a>
 80045c8:	4b2d      	ldr	r3, [pc, #180]	@ (8004680 <ADC_Enable+0x120>)
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fe fc56 	bl	8002e7c <LL_ADC_GetCommonPathInternalCh>
 80045d0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80045d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d013      	beq.n	8004602 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045da:	4b2a      	ldr	r3, [pc, #168]	@ (8004684 <ADC_Enable+0x124>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	099b      	lsrs	r3, r3, #6
 80045e0:	4a29      	ldr	r2, [pc, #164]	@ (8004688 <ADC_Enable+0x128>)
 80045e2:	fba2 2303 	umull	r2, r3, r2, r3
 80045e6:	099b      	lsrs	r3, r3, #6
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	4613      	mov	r3, r2
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	4413      	add	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80045f4:	e002      	b.n	80045fc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	3b01      	subs	r3, #1
 80045fa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1f9      	bne.n	80045f6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004602:	f7fe fc09 	bl	8002e18 <HAL_GetTick>
 8004606:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004608:	e028      	b.n	800465c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f7fe fe00 	bl	8003214 <LL_ADC_IsEnabled>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d104      	bne.n	8004624 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f7fe fde4 	bl	80031ec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004624:	f7fe fbf8 	bl	8002e18 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d914      	bls.n	800465c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b01      	cmp	r3, #1
 800463e:	d00d      	beq.n	800465c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004644:	f043 0210 	orr.w	r2, r3, #16
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004650:	f043 0201 	orr.w	r2, r3, #1
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e007      	b.n	800466c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b01      	cmp	r3, #1
 8004668:	d1cf      	bne.n	800460a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	8000003f 	.word	0x8000003f
 8004678:	50000100 	.word	0x50000100
 800467c:	50000300 	.word	0x50000300
 8004680:	50000700 	.word	0x50000700
 8004684:	20000044 	.word	0x20000044
 8004688:	053e2d63 	.word	0x053e2d63

0800468c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004698:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800469e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d14b      	bne.n	800473e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046aa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d021      	beq.n	8004704 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7fe fc85 	bl	8002fd4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d032      	beq.n	8004736 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d12b      	bne.n	8004736 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d11f      	bne.n	8004736 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046fa:	f043 0201 	orr.w	r2, r3, #1
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004702:	e018      	b.n	8004736 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d111      	bne.n	8004736 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004716:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004722:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d105      	bne.n	8004736 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800472e:	f043 0201 	orr.w	r2, r3, #1
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f7ff faaa 	bl	8003c90 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800473c:	e00e      	b.n	800475c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004742:	f003 0310 	and.w	r3, r3, #16
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f7ff fabe 	bl	8003ccc <HAL_ADC_ErrorCallback>
}
 8004750:	e004      	b.n	800475c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	4798      	blx	r3
}
 800475c:	bf00      	nop
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004770:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f7ff fa96 	bl	8003ca4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004778:	bf00      	nop
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004792:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800479e:	f043 0204 	orr.w	r2, r3, #4
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f7ff fa90 	bl	8003ccc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047ac:	bf00      	nop
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <LL_ADC_IsEnabled>:
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d101      	bne.n	80047cc <LL_ADC_IsEnabled+0x18>
 80047c8:	2301      	movs	r3, #1
 80047ca:	e000      	b.n	80047ce <LL_ADC_IsEnabled+0x1a>
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <LL_ADC_REG_IsConversionOngoing>:
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 0304 	and.w	r3, r3, #4
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d101      	bne.n	80047f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004864:	b590      	push	{r4, r7, lr}
 8004866:	b0a1      	sub	sp, #132	@ 0x84
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800487a:	2b01      	cmp	r3, #1
 800487c:	d101      	bne.n	8004882 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800487e:	2302      	movs	r3, #2
 8004880:	e0e7      	b.n	8004a52 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800488a:	2300      	movs	r3, #0
 800488c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800488e:	2300      	movs	r3, #0
 8004890:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800489a:	d102      	bne.n	80048a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800489c:	4b6f      	ldr	r3, [pc, #444]	@ (8004a5c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800489e:	60bb      	str	r3, [r7, #8]
 80048a0:	e009      	b.n	80048b6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a6e      	ldr	r2, [pc, #440]	@ (8004a60 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d102      	bne.n	80048b2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80048ac:	4b6d      	ldr	r3, [pc, #436]	@ (8004a64 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80048ae:	60bb      	str	r3, [r7, #8]
 80048b0:	e001      	b.n	80048b6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80048b2:	2300      	movs	r3, #0
 80048b4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10b      	bne.n	80048d4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048c0:	f043 0220 	orr.w	r2, r3, #32
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e0be      	b.n	8004a52 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7ff ff7f 	bl	80047da <LL_ADC_REG_IsConversionOngoing>
 80048dc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff ff79 	bl	80047da <LL_ADC_REG_IsConversionOngoing>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f040 80a0 	bne.w	8004a30 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80048f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f040 809c 	bne.w	8004a30 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004900:	d004      	beq.n	800490c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a55      	ldr	r2, [pc, #340]	@ (8004a5c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d101      	bne.n	8004910 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800490c:	4b56      	ldr	r3, [pc, #344]	@ (8004a68 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800490e:	e000      	b.n	8004912 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004910:	4b56      	ldr	r3, [pc, #344]	@ (8004a6c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004912:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d04b      	beq.n	80049b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800491c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	6859      	ldr	r1, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800492e:	035b      	lsls	r3, r3, #13
 8004930:	430b      	orrs	r3, r1
 8004932:	431a      	orrs	r2, r3
 8004934:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004936:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004940:	d004      	beq.n	800494c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a45      	ldr	r2, [pc, #276]	@ (8004a5c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d10f      	bne.n	800496c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800494c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004950:	f7ff ff30 	bl	80047b4 <LL_ADC_IsEnabled>
 8004954:	4604      	mov	r4, r0
 8004956:	4841      	ldr	r0, [pc, #260]	@ (8004a5c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004958:	f7ff ff2c 	bl	80047b4 <LL_ADC_IsEnabled>
 800495c:	4603      	mov	r3, r0
 800495e:	4323      	orrs	r3, r4
 8004960:	2b00      	cmp	r3, #0
 8004962:	bf0c      	ite	eq
 8004964:	2301      	moveq	r3, #1
 8004966:	2300      	movne	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	e012      	b.n	8004992 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800496c:	483c      	ldr	r0, [pc, #240]	@ (8004a60 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800496e:	f7ff ff21 	bl	80047b4 <LL_ADC_IsEnabled>
 8004972:	4604      	mov	r4, r0
 8004974:	483b      	ldr	r0, [pc, #236]	@ (8004a64 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004976:	f7ff ff1d 	bl	80047b4 <LL_ADC_IsEnabled>
 800497a:	4603      	mov	r3, r0
 800497c:	431c      	orrs	r4, r3
 800497e:	483c      	ldr	r0, [pc, #240]	@ (8004a70 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004980:	f7ff ff18 	bl	80047b4 <LL_ADC_IsEnabled>
 8004984:	4603      	mov	r3, r0
 8004986:	4323      	orrs	r3, r4
 8004988:	2b00      	cmp	r3, #0
 800498a:	bf0c      	ite	eq
 800498c:	2301      	moveq	r3, #1
 800498e:	2300      	movne	r3, #0
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d056      	beq.n	8004a44 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004996:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800499e:	f023 030f 	bic.w	r3, r3, #15
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	6811      	ldr	r1, [r2, #0]
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	6892      	ldr	r2, [r2, #8]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	431a      	orrs	r2, r3
 80049ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049b0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80049b2:	e047      	b.n	8004a44 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80049b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049be:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049c8:	d004      	beq.n	80049d4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a23      	ldr	r2, [pc, #140]	@ (8004a5c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d10f      	bne.n	80049f4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80049d4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80049d8:	f7ff feec 	bl	80047b4 <LL_ADC_IsEnabled>
 80049dc:	4604      	mov	r4, r0
 80049de:	481f      	ldr	r0, [pc, #124]	@ (8004a5c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80049e0:	f7ff fee8 	bl	80047b4 <LL_ADC_IsEnabled>
 80049e4:	4603      	mov	r3, r0
 80049e6:	4323      	orrs	r3, r4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	bf0c      	ite	eq
 80049ec:	2301      	moveq	r3, #1
 80049ee:	2300      	movne	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	e012      	b.n	8004a1a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80049f4:	481a      	ldr	r0, [pc, #104]	@ (8004a60 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80049f6:	f7ff fedd 	bl	80047b4 <LL_ADC_IsEnabled>
 80049fa:	4604      	mov	r4, r0
 80049fc:	4819      	ldr	r0, [pc, #100]	@ (8004a64 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80049fe:	f7ff fed9 	bl	80047b4 <LL_ADC_IsEnabled>
 8004a02:	4603      	mov	r3, r0
 8004a04:	431c      	orrs	r4, r3
 8004a06:	481a      	ldr	r0, [pc, #104]	@ (8004a70 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004a08:	f7ff fed4 	bl	80047b4 <LL_ADC_IsEnabled>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	4323      	orrs	r3, r4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	bf0c      	ite	eq
 8004a14:	2301      	moveq	r3, #1
 8004a16:	2300      	movne	r3, #0
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d012      	beq.n	8004a44 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004a1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004a26:	f023 030f 	bic.w	r3, r3, #15
 8004a2a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004a2c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a2e:	e009      	b.n	8004a44 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a34:	f043 0220 	orr.w	r2, r3, #32
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004a42:	e000      	b.n	8004a46 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a44:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004a4e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3784      	adds	r7, #132	@ 0x84
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd90      	pop	{r4, r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	50000100 	.word	0x50000100
 8004a60:	50000400 	.word	0x50000400
 8004a64:	50000500 	.word	0x50000500
 8004a68:	50000300 	.word	0x50000300
 8004a6c:	50000700 	.word	0x50000700
 8004a70:	50000600 	.word	0x50000600

08004a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a84:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a90:	4013      	ands	r3, r2
 8004a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004aa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004aa6:	4a04      	ldr	r2, [pc, #16]	@ (8004ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	60d3      	str	r3, [r2, #12]
}
 8004aac:	bf00      	nop
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	e000ed00 	.word	0xe000ed00

08004abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ac0:	4b04      	ldr	r3, [pc, #16]	@ (8004ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	0a1b      	lsrs	r3, r3, #8
 8004ac6:	f003 0307 	and.w	r3, r3, #7
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	e000ed00 	.word	0xe000ed00

08004ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	db0b      	blt.n	8004b02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aea:	79fb      	ldrb	r3, [r7, #7]
 8004aec:	f003 021f 	and.w	r2, r3, #31
 8004af0:	4907      	ldr	r1, [pc, #28]	@ (8004b10 <__NVIC_EnableIRQ+0x38>)
 8004af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af6:	095b      	lsrs	r3, r3, #5
 8004af8:	2001      	movs	r0, #1
 8004afa:	fa00 f202 	lsl.w	r2, r0, r2
 8004afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b02:	bf00      	nop
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	e000e100 	.word	0xe000e100

08004b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	6039      	str	r1, [r7, #0]
 8004b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	db0a      	blt.n	8004b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	490c      	ldr	r1, [pc, #48]	@ (8004b60 <__NVIC_SetPriority+0x4c>)
 8004b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b32:	0112      	lsls	r2, r2, #4
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	440b      	add	r3, r1
 8004b38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b3c:	e00a      	b.n	8004b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	4908      	ldr	r1, [pc, #32]	@ (8004b64 <__NVIC_SetPriority+0x50>)
 8004b44:	79fb      	ldrb	r3, [r7, #7]
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	3b04      	subs	r3, #4
 8004b4c:	0112      	lsls	r2, r2, #4
 8004b4e:	b2d2      	uxtb	r2, r2
 8004b50:	440b      	add	r3, r1
 8004b52:	761a      	strb	r2, [r3, #24]
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	e000e100 	.word	0xe000e100
 8004b64:	e000ed00 	.word	0xe000ed00

08004b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b089      	sub	sp, #36	@ 0x24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	f1c3 0307 	rsb	r3, r3, #7
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	bf28      	it	cs
 8004b86:	2304      	movcs	r3, #4
 8004b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	2b06      	cmp	r3, #6
 8004b90:	d902      	bls.n	8004b98 <NVIC_EncodePriority+0x30>
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	3b03      	subs	r3, #3
 8004b96:	e000      	b.n	8004b9a <NVIC_EncodePriority+0x32>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba6:	43da      	mvns	r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	401a      	ands	r2, r3
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bba:	43d9      	mvns	r1, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bc0:	4313      	orrs	r3, r2
         );
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3724      	adds	r7, #36	@ 0x24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
	...

08004bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004be0:	d301      	bcc.n	8004be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004be2:	2301      	movs	r3, #1
 8004be4:	e00f      	b.n	8004c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004be6:	4a0a      	ldr	r2, [pc, #40]	@ (8004c10 <SysTick_Config+0x40>)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bee:	210f      	movs	r1, #15
 8004bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf4:	f7ff ff8e 	bl	8004b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bf8:	4b05      	ldr	r3, [pc, #20]	@ (8004c10 <SysTick_Config+0x40>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bfe:	4b04      	ldr	r3, [pc, #16]	@ (8004c10 <SysTick_Config+0x40>)
 8004c00:	2207      	movs	r2, #7
 8004c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	e000e010 	.word	0xe000e010

08004c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7ff ff29 	bl	8004a74 <__NVIC_SetPriorityGrouping>
}
 8004c22:	bf00      	nop
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b086      	sub	sp, #24
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	4603      	mov	r3, r0
 8004c32:	60b9      	str	r1, [r7, #8]
 8004c34:	607a      	str	r2, [r7, #4]
 8004c36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c38:	f7ff ff40 	bl	8004abc <__NVIC_GetPriorityGrouping>
 8004c3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	68b9      	ldr	r1, [r7, #8]
 8004c42:	6978      	ldr	r0, [r7, #20]
 8004c44:	f7ff ff90 	bl	8004b68 <NVIC_EncodePriority>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c4e:	4611      	mov	r1, r2
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7ff ff5f 	bl	8004b14 <__NVIC_SetPriority>
}
 8004c56:	bf00      	nop
 8004c58:	3718      	adds	r7, #24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b082      	sub	sp, #8
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	4603      	mov	r3, r0
 8004c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7ff ff33 	bl	8004ad8 <__NVIC_EnableIRQ>
}
 8004c72:	bf00      	nop
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b082      	sub	sp, #8
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7ff ffa4 	bl	8004bd0 <SysTick_Config>
 8004c88:	4603      	mov	r3, r0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3708      	adds	r7, #8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
	...

08004c94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e08d      	b.n	8004dc2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	461a      	mov	r2, r3
 8004cac:	4b47      	ldr	r3, [pc, #284]	@ (8004dcc <HAL_DMA_Init+0x138>)
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d80f      	bhi.n	8004cd2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	4b45      	ldr	r3, [pc, #276]	@ (8004dd0 <HAL_DMA_Init+0x13c>)
 8004cba:	4413      	add	r3, r2
 8004cbc:	4a45      	ldr	r2, [pc, #276]	@ (8004dd4 <HAL_DMA_Init+0x140>)
 8004cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc2:	091b      	lsrs	r3, r3, #4
 8004cc4:	009a      	lsls	r2, r3, #2
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a42      	ldr	r2, [pc, #264]	@ (8004dd8 <HAL_DMA_Init+0x144>)
 8004cce:	641a      	str	r2, [r3, #64]	@ 0x40
 8004cd0:	e00e      	b.n	8004cf0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	4b40      	ldr	r3, [pc, #256]	@ (8004ddc <HAL_DMA_Init+0x148>)
 8004cda:	4413      	add	r3, r2
 8004cdc:	4a3d      	ldr	r2, [pc, #244]	@ (8004dd4 <HAL_DMA_Init+0x140>)
 8004cde:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce2:	091b      	lsrs	r3, r3, #4
 8004ce4:	009a      	lsls	r2, r3, #2
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a3c      	ldr	r2, [pc, #240]	@ (8004de0 <HAL_DMA_Init+0x14c>)
 8004cee:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d0a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004d14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 fa76 	bl	8005234 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d50:	d102      	bne.n	8004d58 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d6c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d010      	beq.n	8004d98 <HAL_DMA_Init+0x104>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	d80c      	bhi.n	8004d98 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 fa96 	bl	80052b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004d94:	605a      	str	r2, [r3, #4]
 8004d96:	e008      	b.n	8004daa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	40020407 	.word	0x40020407
 8004dd0:	bffdfff8 	.word	0xbffdfff8
 8004dd4:	cccccccd 	.word	0xcccccccd
 8004dd8:	40020000 	.word	0x40020000
 8004ddc:	bffdfbf8 	.word	0xbffdfbf8
 8004de0:	40020400 	.word	0x40020400

08004de4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
 8004df0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004df2:	2300      	movs	r3, #0
 8004df4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d101      	bne.n	8004e04 <HAL_DMA_Start_IT+0x20>
 8004e00:	2302      	movs	r3, #2
 8004e02:	e066      	b.n	8004ed2 <HAL_DMA_Start_IT+0xee>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d155      	bne.n	8004ec4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 0201 	bic.w	r2, r2, #1
 8004e34:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	68b9      	ldr	r1, [r7, #8]
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 f9bb 	bl	80051b8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d008      	beq.n	8004e5c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f042 020e 	orr.w	r2, r2, #14
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	e00f      	b.n	8004e7c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 0204 	bic.w	r2, r2, #4
 8004e6a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 020a 	orr.w	r2, r2, #10
 8004e7a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d007      	beq.n	8004e9a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e98:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d007      	beq.n	8004eb2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004eb0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f042 0201 	orr.w	r2, r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	e005      	b.n	8004ed0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004ecc:	2302      	movs	r3, #2
 8004ece:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3718      	adds	r7, #24
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b085      	sub	sp, #20
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d005      	beq.n	8004efe <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2204      	movs	r2, #4
 8004ef6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	73fb      	strb	r3, [r7, #15]
 8004efc:	e037      	b.n	8004f6e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 020e 	bic.w	r2, r2, #14
 8004f0c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f1c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0201 	bic.w	r2, r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f32:	f003 021f 	and.w	r2, r3, #31
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3a:	2101      	movs	r1, #1
 8004f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8004f40:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f4a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00c      	beq.n	8004f6e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f5e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f62:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004f6c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f94:	2300      	movs	r3, #0
 8004f96:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d00d      	beq.n	8004fc0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2204      	movs	r2, #4
 8004fa8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	73fb      	strb	r3, [r7, #15]
 8004fbe:	e047      	b.n	8005050 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 020e 	bic.w	r2, r2, #14
 8004fce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 0201 	bic.w	r2, r2, #1
 8004fde:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff4:	f003 021f 	and.w	r2, r3, #31
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8005002:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800500c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00c      	beq.n	8005030 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005020:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005024:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800502e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005044:	2b00      	cmp	r3, #0
 8005046:	d003      	beq.n	8005050 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	4798      	blx	r3
    }
  }
  return status;
 8005050:	7bfb      	ldrb	r3, [r7, #15]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b084      	sub	sp, #16
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005076:	f003 031f 	and.w	r3, r3, #31
 800507a:	2204      	movs	r2, #4
 800507c:	409a      	lsls	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	4013      	ands	r3, r2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d026      	beq.n	80050d4 <HAL_DMA_IRQHandler+0x7a>
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b00      	cmp	r3, #0
 800508e:	d021      	beq.n	80050d4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b00      	cmp	r3, #0
 800509c:	d107      	bne.n	80050ae <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0204 	bic.w	r2, r2, #4
 80050ac:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050b2:	f003 021f 	and.w	r2, r3, #31
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ba:	2104      	movs	r1, #4
 80050bc:	fa01 f202 	lsl.w	r2, r1, r2
 80050c0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d071      	beq.n	80051ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80050d2:	e06c      	b.n	80051ae <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d8:	f003 031f 	and.w	r3, r3, #31
 80050dc:	2202      	movs	r2, #2
 80050de:	409a      	lsls	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4013      	ands	r3, r2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d02e      	beq.n	8005146 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d029      	beq.n	8005146 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0320 	and.w	r3, r3, #32
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10b      	bne.n	8005118 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 020a 	bic.w	r2, r2, #10
 800510e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800511c:	f003 021f 	and.w	r2, r3, #31
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005124:	2102      	movs	r1, #2
 8005126:	fa01 f202 	lsl.w	r2, r1, r2
 800512a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005138:	2b00      	cmp	r3, #0
 800513a:	d038      	beq.n	80051ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005144:	e033      	b.n	80051ae <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800514a:	f003 031f 	and.w	r3, r3, #31
 800514e:	2208      	movs	r2, #8
 8005150:	409a      	lsls	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	4013      	ands	r3, r2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d02a      	beq.n	80051b0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	f003 0308 	and.w	r3, r3, #8
 8005160:	2b00      	cmp	r3, #0
 8005162:	d025      	beq.n	80051b0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 020e 	bic.w	r2, r2, #14
 8005172:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005178:	f003 021f 	and.w	r2, r3, #31
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005180:	2101      	movs	r1, #1
 8005182:	fa01 f202 	lsl.w	r2, r1, r2
 8005186:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d004      	beq.n	80051b0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80051ae:	bf00      	nop
 80051b0:	bf00      	nop
}
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
 80051c4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80051ce:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d004      	beq.n	80051e2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80051e0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e6:	f003 021f 	and.w	r2, r3, #31
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ee:	2101      	movs	r1, #1
 80051f0:	fa01 f202 	lsl.w	r2, r1, r2
 80051f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	2b10      	cmp	r3, #16
 8005204:	d108      	bne.n	8005218 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005216:	e007      	b.n	8005228 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	60da      	str	r2, [r3, #12]
}
 8005228:	bf00      	nop
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	461a      	mov	r2, r3
 8005242:	4b16      	ldr	r3, [pc, #88]	@ (800529c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005244:	429a      	cmp	r2, r3
 8005246:	d802      	bhi.n	800524e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005248:	4b15      	ldr	r3, [pc, #84]	@ (80052a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	e001      	b.n	8005252 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800524e:	4b15      	ldr	r3, [pc, #84]	@ (80052a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005250:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	b2db      	uxtb	r3, r3
 800525c:	3b08      	subs	r3, #8
 800525e:	4a12      	ldr	r2, [pc, #72]	@ (80052a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005260:	fba2 2303 	umull	r2, r3, r2, r3
 8005264:	091b      	lsrs	r3, r3, #4
 8005266:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526c:	089b      	lsrs	r3, r3, #2
 800526e:	009a      	lsls	r2, r3, #2
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	4413      	add	r3, r2
 8005274:	461a      	mov	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a0b      	ldr	r2, [pc, #44]	@ (80052ac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800527e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f003 031f 	and.w	r3, r3, #31
 8005286:	2201      	movs	r2, #1
 8005288:	409a      	lsls	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800528e:	bf00      	nop
 8005290:	371c      	adds	r7, #28
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	40020407 	.word	0x40020407
 80052a0:	40020800 	.word	0x40020800
 80052a4:	40020820 	.word	0x40020820
 80052a8:	cccccccd 	.word	0xcccccccd
 80052ac:	40020880 	.word	0x40020880

080052b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	4b0b      	ldr	r3, [pc, #44]	@ (80052f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80052c4:	4413      	add	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	461a      	mov	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a08      	ldr	r2, [pc, #32]	@ (80052f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80052d2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	3b01      	subs	r3, #1
 80052d8:	f003 031f 	and.w	r3, r3, #31
 80052dc:	2201      	movs	r2, #1
 80052de:	409a      	lsls	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80052e4:	bf00      	nop
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	1000823f 	.word	0x1000823f
 80052f4:	40020940 	.word	0x40020940

080052f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005302:	2300      	movs	r3, #0
 8005304:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005306:	e15a      	b.n	80055be <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	2101      	movs	r1, #1
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	fa01 f303 	lsl.w	r3, r1, r3
 8005314:	4013      	ands	r3, r2
 8005316:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 814c 	beq.w	80055b8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f003 0303 	and.w	r3, r3, #3
 8005328:	2b01      	cmp	r3, #1
 800532a:	d005      	beq.n	8005338 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005334:	2b02      	cmp	r3, #2
 8005336:	d130      	bne.n	800539a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	2203      	movs	r2, #3
 8005344:	fa02 f303 	lsl.w	r3, r2, r3
 8005348:	43db      	mvns	r3, r3
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	4013      	ands	r3, r2
 800534e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	005b      	lsls	r3, r3, #1
 8005358:	fa02 f303 	lsl.w	r3, r2, r3
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	4313      	orrs	r3, r2
 8005360:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800536e:	2201      	movs	r2, #1
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	fa02 f303 	lsl.w	r3, r2, r3
 8005376:	43db      	mvns	r3, r3
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	4013      	ands	r3, r2
 800537c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	091b      	lsrs	r3, r3, #4
 8005384:	f003 0201 	and.w	r2, r3, #1
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	fa02 f303 	lsl.w	r3, r2, r3
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	2b03      	cmp	r3, #3
 80053a4:	d017      	beq.n	80053d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	005b      	lsls	r3, r3, #1
 80053b0:	2203      	movs	r2, #3
 80053b2:	fa02 f303 	lsl.w	r3, r2, r3
 80053b6:	43db      	mvns	r3, r3
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	4013      	ands	r3, r2
 80053bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	689a      	ldr	r2, [r3, #8]
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	005b      	lsls	r3, r3, #1
 80053c6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f003 0303 	and.w	r3, r3, #3
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d123      	bne.n	800542a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	08da      	lsrs	r2, r3, #3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	3208      	adds	r2, #8
 80053ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f003 0307 	and.w	r3, r3, #7
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	220f      	movs	r2, #15
 80053fa:	fa02 f303 	lsl.w	r3, r2, r3
 80053fe:	43db      	mvns	r3, r3
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4013      	ands	r3, r2
 8005404:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	691a      	ldr	r2, [r3, #16]
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	fa02 f303 	lsl.w	r3, r2, r3
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	4313      	orrs	r3, r2
 800541a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	08da      	lsrs	r2, r3, #3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3208      	adds	r2, #8
 8005424:	6939      	ldr	r1, [r7, #16]
 8005426:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	2203      	movs	r2, #3
 8005436:	fa02 f303 	lsl.w	r3, r2, r3
 800543a:	43db      	mvns	r3, r3
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	4013      	ands	r3, r2
 8005440:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f003 0203 	and.w	r2, r3, #3
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	fa02 f303 	lsl.w	r3, r2, r3
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	4313      	orrs	r3, r2
 8005456:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 80a6 	beq.w	80055b8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800546c:	4b5b      	ldr	r3, [pc, #364]	@ (80055dc <HAL_GPIO_Init+0x2e4>)
 800546e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005470:	4a5a      	ldr	r2, [pc, #360]	@ (80055dc <HAL_GPIO_Init+0x2e4>)
 8005472:	f043 0301 	orr.w	r3, r3, #1
 8005476:	6613      	str	r3, [r2, #96]	@ 0x60
 8005478:	4b58      	ldr	r3, [pc, #352]	@ (80055dc <HAL_GPIO_Init+0x2e4>)
 800547a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	60bb      	str	r3, [r7, #8]
 8005482:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005484:	4a56      	ldr	r2, [pc, #344]	@ (80055e0 <HAL_GPIO_Init+0x2e8>)
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	089b      	lsrs	r3, r3, #2
 800548a:	3302      	adds	r3, #2
 800548c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005490:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f003 0303 	and.w	r3, r3, #3
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	220f      	movs	r2, #15
 800549c:	fa02 f303 	lsl.w	r3, r2, r3
 80054a0:	43db      	mvns	r3, r3
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	4013      	ands	r3, r2
 80054a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80054ae:	d01f      	beq.n	80054f0 <HAL_GPIO_Init+0x1f8>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a4c      	ldr	r2, [pc, #304]	@ (80055e4 <HAL_GPIO_Init+0x2ec>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d019      	beq.n	80054ec <HAL_GPIO_Init+0x1f4>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a4b      	ldr	r2, [pc, #300]	@ (80055e8 <HAL_GPIO_Init+0x2f0>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d013      	beq.n	80054e8 <HAL_GPIO_Init+0x1f0>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a4a      	ldr	r2, [pc, #296]	@ (80055ec <HAL_GPIO_Init+0x2f4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d00d      	beq.n	80054e4 <HAL_GPIO_Init+0x1ec>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a49      	ldr	r2, [pc, #292]	@ (80055f0 <HAL_GPIO_Init+0x2f8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d007      	beq.n	80054e0 <HAL_GPIO_Init+0x1e8>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a48      	ldr	r2, [pc, #288]	@ (80055f4 <HAL_GPIO_Init+0x2fc>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d101      	bne.n	80054dc <HAL_GPIO_Init+0x1e4>
 80054d8:	2305      	movs	r3, #5
 80054da:	e00a      	b.n	80054f2 <HAL_GPIO_Init+0x1fa>
 80054dc:	2306      	movs	r3, #6
 80054de:	e008      	b.n	80054f2 <HAL_GPIO_Init+0x1fa>
 80054e0:	2304      	movs	r3, #4
 80054e2:	e006      	b.n	80054f2 <HAL_GPIO_Init+0x1fa>
 80054e4:	2303      	movs	r3, #3
 80054e6:	e004      	b.n	80054f2 <HAL_GPIO_Init+0x1fa>
 80054e8:	2302      	movs	r3, #2
 80054ea:	e002      	b.n	80054f2 <HAL_GPIO_Init+0x1fa>
 80054ec:	2301      	movs	r3, #1
 80054ee:	e000      	b.n	80054f2 <HAL_GPIO_Init+0x1fa>
 80054f0:	2300      	movs	r3, #0
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	f002 0203 	and.w	r2, r2, #3
 80054f8:	0092      	lsls	r2, r2, #2
 80054fa:	4093      	lsls	r3, r2
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	4313      	orrs	r3, r2
 8005500:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005502:	4937      	ldr	r1, [pc, #220]	@ (80055e0 <HAL_GPIO_Init+0x2e8>)
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	089b      	lsrs	r3, r3, #2
 8005508:	3302      	adds	r3, #2
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005510:	4b39      	ldr	r3, [pc, #228]	@ (80055f8 <HAL_GPIO_Init+0x300>)
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	43db      	mvns	r3, r3
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	4013      	ands	r3, r2
 800551e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d003      	beq.n	8005534 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4313      	orrs	r3, r2
 8005532:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005534:	4a30      	ldr	r2, [pc, #192]	@ (80055f8 <HAL_GPIO_Init+0x300>)
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800553a:	4b2f      	ldr	r3, [pc, #188]	@ (80055f8 <HAL_GPIO_Init+0x300>)
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	43db      	mvns	r3, r3
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	4013      	ands	r3, r2
 8005548:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4313      	orrs	r3, r2
 800555c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800555e:	4a26      	ldr	r2, [pc, #152]	@ (80055f8 <HAL_GPIO_Init+0x300>)
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005564:	4b24      	ldr	r3, [pc, #144]	@ (80055f8 <HAL_GPIO_Init+0x300>)
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	43db      	mvns	r3, r3
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	4013      	ands	r3, r2
 8005572:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4313      	orrs	r3, r2
 8005586:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005588:	4a1b      	ldr	r2, [pc, #108]	@ (80055f8 <HAL_GPIO_Init+0x300>)
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800558e:	4b1a      	ldr	r3, [pc, #104]	@ (80055f8 <HAL_GPIO_Init+0x300>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	43db      	mvns	r3, r3
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	4013      	ands	r3, r2
 800559c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80055b2:	4a11      	ldr	r2, [pc, #68]	@ (80055f8 <HAL_GPIO_Init+0x300>)
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	3301      	adds	r3, #1
 80055bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	fa22 f303 	lsr.w	r3, r2, r3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f47f ae9d 	bne.w	8005308 <HAL_GPIO_Init+0x10>
  }
}
 80055ce:	bf00      	nop
 80055d0:	bf00      	nop
 80055d2:	371c      	adds	r7, #28
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	40021000 	.word	0x40021000
 80055e0:	40010000 	.word	0x40010000
 80055e4:	48000400 	.word	0x48000400
 80055e8:	48000800 	.word	0x48000800
 80055ec:	48000c00 	.word	0x48000c00
 80055f0:	48001000 	.word	0x48001000
 80055f4:	48001400 	.word	0x48001400
 80055f8:	40010400 	.word	0x40010400

080055fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	460b      	mov	r3, r1
 8005606:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691a      	ldr	r2, [r3, #16]
 800560c:	887b      	ldrh	r3, [r7, #2]
 800560e:	4013      	ands	r3, r2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005614:	2301      	movs	r3, #1
 8005616:	73fb      	strb	r3, [r7, #15]
 8005618:	e001      	b.n	800561e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800561a:	2300      	movs	r3, #0
 800561c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800561e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005620:	4618      	mov	r0, r3
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	460b      	mov	r3, r1
 8005636:	807b      	strh	r3, [r7, #2]
 8005638:	4613      	mov	r3, r2
 800563a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800563c:	787b      	ldrb	r3, [r7, #1]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005642:	887a      	ldrh	r2, [r7, #2]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005648:	e002      	b.n	8005650 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800564a:	887a      	ldrh	r2, [r7, #2]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	4603      	mov	r3, r0
 8005664:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005666:	4b08      	ldr	r3, [pc, #32]	@ (8005688 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005668:	695a      	ldr	r2, [r3, #20]
 800566a:	88fb      	ldrh	r3, [r7, #6]
 800566c:	4013      	ands	r3, r2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d006      	beq.n	8005680 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005672:	4a05      	ldr	r2, [pc, #20]	@ (8005688 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005674:	88fb      	ldrh	r3, [r7, #6]
 8005676:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005678:	88fb      	ldrh	r3, [r7, #6]
 800567a:	4618      	mov	r0, r3
 800567c:	f7fc fa7c 	bl	8001b78 <HAL_GPIO_EXTI_Callback>
  }
}
 8005680:	bf00      	nop
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	40010400 	.word	0x40010400

0800568c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d141      	bne.n	800571e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800569a:	4b4b      	ldr	r3, [pc, #300]	@ (80057c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80056a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056a6:	d131      	bne.n	800570c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056a8:	4b47      	ldr	r3, [pc, #284]	@ (80057c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056ae:	4a46      	ldr	r2, [pc, #280]	@ (80057c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80056b8:	4b43      	ldr	r3, [pc, #268]	@ (80057c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80056c0:	4a41      	ldr	r2, [pc, #260]	@ (80057c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80056c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056c8:	4b40      	ldr	r3, [pc, #256]	@ (80057cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2232      	movs	r2, #50	@ 0x32
 80056ce:	fb02 f303 	mul.w	r3, r2, r3
 80056d2:	4a3f      	ldr	r2, [pc, #252]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80056d4:	fba2 2303 	umull	r2, r3, r2, r3
 80056d8:	0c9b      	lsrs	r3, r3, #18
 80056da:	3301      	adds	r3, #1
 80056dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056de:	e002      	b.n	80056e6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	3b01      	subs	r3, #1
 80056e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056e6:	4b38      	ldr	r3, [pc, #224]	@ (80057c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056f2:	d102      	bne.n	80056fa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1f2      	bne.n	80056e0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056fa:	4b33      	ldr	r3, [pc, #204]	@ (80057c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005702:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005706:	d158      	bne.n	80057ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e057      	b.n	80057bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800570c:	4b2e      	ldr	r3, [pc, #184]	@ (80057c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800570e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005712:	4a2d      	ldr	r2, [pc, #180]	@ (80057c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005714:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005718:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800571c:	e04d      	b.n	80057ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005724:	d141      	bne.n	80057aa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005726:	4b28      	ldr	r3, [pc, #160]	@ (80057c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800572e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005732:	d131      	bne.n	8005798 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005734:	4b24      	ldr	r3, [pc, #144]	@ (80057c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005736:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800573a:	4a23      	ldr	r2, [pc, #140]	@ (80057c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800573c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005740:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005744:	4b20      	ldr	r3, [pc, #128]	@ (80057c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800574c:	4a1e      	ldr	r2, [pc, #120]	@ (80057c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800574e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005752:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005754:	4b1d      	ldr	r3, [pc, #116]	@ (80057cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2232      	movs	r2, #50	@ 0x32
 800575a:	fb02 f303 	mul.w	r3, r2, r3
 800575e:	4a1c      	ldr	r2, [pc, #112]	@ (80057d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005760:	fba2 2303 	umull	r2, r3, r2, r3
 8005764:	0c9b      	lsrs	r3, r3, #18
 8005766:	3301      	adds	r3, #1
 8005768:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800576a:	e002      	b.n	8005772 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	3b01      	subs	r3, #1
 8005770:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005772:	4b15      	ldr	r3, [pc, #84]	@ (80057c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800577a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800577e:	d102      	bne.n	8005786 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1f2      	bne.n	800576c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005786:	4b10      	ldr	r3, [pc, #64]	@ (80057c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800578e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005792:	d112      	bne.n	80057ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e011      	b.n	80057bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005798:	4b0b      	ldr	r3, [pc, #44]	@ (80057c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800579a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800579e:	4a0a      	ldr	r2, [pc, #40]	@ (80057c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80057a8:	e007      	b.n	80057ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80057aa:	4b07      	ldr	r3, [pc, #28]	@ (80057c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80057b2:	4a05      	ldr	r2, [pc, #20]	@ (80057c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80057b8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	40007000 	.word	0x40007000
 80057cc:	20000044 	.word	0x20000044
 80057d0:	431bde83 	.word	0x431bde83

080057d4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80057d4:	b480      	push	{r7}
 80057d6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80057d8:	4b05      	ldr	r3, [pc, #20]	@ (80057f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	4a04      	ldr	r2, [pc, #16]	@ (80057f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80057de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057e2:	6093      	str	r3, [r2, #8]
}
 80057e4:	bf00      	nop
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	40007000 	.word	0x40007000

080057f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b088      	sub	sp, #32
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e2fe      	b.n	8005e04 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	d075      	beq.n	80058fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005812:	4b97      	ldr	r3, [pc, #604]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 030c 	and.w	r3, r3, #12
 800581a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800581c:	4b94      	ldr	r3, [pc, #592]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f003 0303 	and.w	r3, r3, #3
 8005824:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	2b0c      	cmp	r3, #12
 800582a:	d102      	bne.n	8005832 <HAL_RCC_OscConfig+0x3e>
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	2b03      	cmp	r3, #3
 8005830:	d002      	beq.n	8005838 <HAL_RCC_OscConfig+0x44>
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	2b08      	cmp	r3, #8
 8005836:	d10b      	bne.n	8005850 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005838:	4b8d      	ldr	r3, [pc, #564]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d05b      	beq.n	80058fc <HAL_RCC_OscConfig+0x108>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d157      	bne.n	80058fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e2d9      	b.n	8005e04 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005858:	d106      	bne.n	8005868 <HAL_RCC_OscConfig+0x74>
 800585a:	4b85      	ldr	r3, [pc, #532]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a84      	ldr	r2, [pc, #528]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 8005860:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005864:	6013      	str	r3, [r2, #0]
 8005866:	e01d      	b.n	80058a4 <HAL_RCC_OscConfig+0xb0>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005870:	d10c      	bne.n	800588c <HAL_RCC_OscConfig+0x98>
 8005872:	4b7f      	ldr	r3, [pc, #508]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a7e      	ldr	r2, [pc, #504]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 8005878:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800587c:	6013      	str	r3, [r2, #0]
 800587e:	4b7c      	ldr	r3, [pc, #496]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a7b      	ldr	r2, [pc, #492]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 8005884:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005888:	6013      	str	r3, [r2, #0]
 800588a:	e00b      	b.n	80058a4 <HAL_RCC_OscConfig+0xb0>
 800588c:	4b78      	ldr	r3, [pc, #480]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a77      	ldr	r2, [pc, #476]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 8005892:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005896:	6013      	str	r3, [r2, #0]
 8005898:	4b75      	ldr	r3, [pc, #468]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a74      	ldr	r2, [pc, #464]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 800589e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d013      	beq.n	80058d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ac:	f7fd fab4 	bl	8002e18 <HAL_GetTick>
 80058b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058b2:	e008      	b.n	80058c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058b4:	f7fd fab0 	bl	8002e18 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b64      	cmp	r3, #100	@ 0x64
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e29e      	b.n	8005e04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058c6:	4b6a      	ldr	r3, [pc, #424]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0f0      	beq.n	80058b4 <HAL_RCC_OscConfig+0xc0>
 80058d2:	e014      	b.n	80058fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d4:	f7fd faa0 	bl	8002e18 <HAL_GetTick>
 80058d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058da:	e008      	b.n	80058ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058dc:	f7fd fa9c 	bl	8002e18 <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b64      	cmp	r3, #100	@ 0x64
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e28a      	b.n	8005e04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058ee:	4b60      	ldr	r3, [pc, #384]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1f0      	bne.n	80058dc <HAL_RCC_OscConfig+0xe8>
 80058fa:	e000      	b.n	80058fe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d075      	beq.n	80059f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800590a:	4b59      	ldr	r3, [pc, #356]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f003 030c 	and.w	r3, r3, #12
 8005912:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005914:	4b56      	ldr	r3, [pc, #344]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f003 0303 	and.w	r3, r3, #3
 800591c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	2b0c      	cmp	r3, #12
 8005922:	d102      	bne.n	800592a <HAL_RCC_OscConfig+0x136>
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	2b02      	cmp	r3, #2
 8005928:	d002      	beq.n	8005930 <HAL_RCC_OscConfig+0x13c>
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	2b04      	cmp	r3, #4
 800592e:	d11f      	bne.n	8005970 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005930:	4b4f      	ldr	r3, [pc, #316]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005938:	2b00      	cmp	r3, #0
 800593a:	d005      	beq.n	8005948 <HAL_RCC_OscConfig+0x154>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e25d      	b.n	8005e04 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005948:	4b49      	ldr	r3, [pc, #292]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	061b      	lsls	r3, r3, #24
 8005956:	4946      	ldr	r1, [pc, #280]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 8005958:	4313      	orrs	r3, r2
 800595a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800595c:	4b45      	ldr	r3, [pc, #276]	@ (8005a74 <HAL_RCC_OscConfig+0x280>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4618      	mov	r0, r3
 8005962:	f7fd fa0d 	bl	8002d80 <HAL_InitTick>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d043      	beq.n	80059f4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e249      	b.n	8005e04 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d023      	beq.n	80059c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005978:	4b3d      	ldr	r3, [pc, #244]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a3c      	ldr	r2, [pc, #240]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 800597e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005982:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005984:	f7fd fa48 	bl	8002e18 <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800598c:	f7fd fa44 	bl	8002e18 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e232      	b.n	8005e04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800599e:	4b34      	ldr	r3, [pc, #208]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d0f0      	beq.n	800598c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059aa:	4b31      	ldr	r3, [pc, #196]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	061b      	lsls	r3, r3, #24
 80059b8:	492d      	ldr	r1, [pc, #180]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	604b      	str	r3, [r1, #4]
 80059be:	e01a      	b.n	80059f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a2a      	ldr	r2, [pc, #168]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 80059c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059cc:	f7fd fa24 	bl	8002e18 <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059d2:	e008      	b.n	80059e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059d4:	f7fd fa20 	bl	8002e18 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e20e      	b.n	8005e04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059e6:	4b22      	ldr	r3, [pc, #136]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1f0      	bne.n	80059d4 <HAL_RCC_OscConfig+0x1e0>
 80059f2:	e000      	b.n	80059f6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0308 	and.w	r3, r3, #8
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d041      	beq.n	8005a86 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d01c      	beq.n	8005a44 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a0a:	4b19      	ldr	r3, [pc, #100]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 8005a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a10:	4a17      	ldr	r2, [pc, #92]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 8005a12:	f043 0301 	orr.w	r3, r3, #1
 8005a16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a1a:	f7fd f9fd 	bl	8002e18 <HAL_GetTick>
 8005a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a20:	e008      	b.n	8005a34 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a22:	f7fd f9f9 	bl	8002e18 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d901      	bls.n	8005a34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e1e7      	b.n	8005e04 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a34:	4b0e      	ldr	r3, [pc, #56]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 8005a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d0ef      	beq.n	8005a22 <HAL_RCC_OscConfig+0x22e>
 8005a42:	e020      	b.n	8005a86 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a44:	4b0a      	ldr	r3, [pc, #40]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 8005a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a4a:	4a09      	ldr	r2, [pc, #36]	@ (8005a70 <HAL_RCC_OscConfig+0x27c>)
 8005a4c:	f023 0301 	bic.w	r3, r3, #1
 8005a50:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a54:	f7fd f9e0 	bl	8002e18 <HAL_GetTick>
 8005a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a5a:	e00d      	b.n	8005a78 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a5c:	f7fd f9dc 	bl	8002e18 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d906      	bls.n	8005a78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e1ca      	b.n	8005e04 <HAL_RCC_OscConfig+0x610>
 8005a6e:	bf00      	nop
 8005a70:	40021000 	.word	0x40021000
 8005a74:	20000048 	.word	0x20000048
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a78:	4b8c      	ldr	r3, [pc, #560]	@ (8005cac <HAL_RCC_OscConfig+0x4b8>)
 8005a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a7e:	f003 0302 	and.w	r3, r3, #2
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1ea      	bne.n	8005a5c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0304 	and.w	r3, r3, #4
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 80a6 	beq.w	8005be0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a94:	2300      	movs	r3, #0
 8005a96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a98:	4b84      	ldr	r3, [pc, #528]	@ (8005cac <HAL_RCC_OscConfig+0x4b8>)
 8005a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x2b4>
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e000      	b.n	8005aaa <HAL_RCC_OscConfig+0x2b6>
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00d      	beq.n	8005aca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aae:	4b7f      	ldr	r3, [pc, #508]	@ (8005cac <HAL_RCC_OscConfig+0x4b8>)
 8005ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab2:	4a7e      	ldr	r2, [pc, #504]	@ (8005cac <HAL_RCC_OscConfig+0x4b8>)
 8005ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ab8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005aba:	4b7c      	ldr	r3, [pc, #496]	@ (8005cac <HAL_RCC_OscConfig+0x4b8>)
 8005abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005aca:	4b79      	ldr	r3, [pc, #484]	@ (8005cb0 <HAL_RCC_OscConfig+0x4bc>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d118      	bne.n	8005b08 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ad6:	4b76      	ldr	r3, [pc, #472]	@ (8005cb0 <HAL_RCC_OscConfig+0x4bc>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a75      	ldr	r2, [pc, #468]	@ (8005cb0 <HAL_RCC_OscConfig+0x4bc>)
 8005adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ae2:	f7fd f999 	bl	8002e18 <HAL_GetTick>
 8005ae6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ae8:	e008      	b.n	8005afc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aea:	f7fd f995 	bl	8002e18 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d901      	bls.n	8005afc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e183      	b.n	8005e04 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005afc:	4b6c      	ldr	r3, [pc, #432]	@ (8005cb0 <HAL_RCC_OscConfig+0x4bc>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d0f0      	beq.n	8005aea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d108      	bne.n	8005b22 <HAL_RCC_OscConfig+0x32e>
 8005b10:	4b66      	ldr	r3, [pc, #408]	@ (8005cac <HAL_RCC_OscConfig+0x4b8>)
 8005b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b16:	4a65      	ldr	r2, [pc, #404]	@ (8005cac <HAL_RCC_OscConfig+0x4b8>)
 8005b18:	f043 0301 	orr.w	r3, r3, #1
 8005b1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b20:	e024      	b.n	8005b6c <HAL_RCC_OscConfig+0x378>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	2b05      	cmp	r3, #5
 8005b28:	d110      	bne.n	8005b4c <HAL_RCC_OscConfig+0x358>
 8005b2a:	4b60      	ldr	r3, [pc, #384]	@ (8005cac <HAL_RCC_OscConfig+0x4b8>)
 8005b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b30:	4a5e      	ldr	r2, [pc, #376]	@ (8005cac <HAL_RCC_OscConfig+0x4b8>)
 8005b32:	f043 0304 	orr.w	r3, r3, #4
 8005b36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b3a:	4b5c      	ldr	r3, [pc, #368]	@ (8005cac <HAL_RCC_OscConfig+0x4b8>)
 8005b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b40:	4a5a      	ldr	r2, [pc, #360]	@ (8005cac <HAL_RCC_OscConfig+0x4b8>)
 8005b42:	f043 0301 	orr.w	r3, r3, #1
 8005b46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b4a:	e00f      	b.n	8005b6c <HAL_RCC_OscConfig+0x378>
 8005b4c:	4b57      	ldr	r3, [pc, #348]	@ (8005cac <HAL_RCC_OscConfig+0x4b8>)
 8005b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b52:	4a56      	ldr	r2, [pc, #344]	@ (8005cac <HAL_RCC_OscConfig+0x4b8>)
 8005b54:	f023 0301 	bic.w	r3, r3, #1
 8005b58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b5c:	4b53      	ldr	r3, [pc, #332]	@ (8005cac <HAL_RCC_OscConfig+0x4b8>)
 8005b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b62:	4a52      	ldr	r2, [pc, #328]	@ (8005cac <HAL_RCC_OscConfig+0x4b8>)
 8005b64:	f023 0304 	bic.w	r3, r3, #4
 8005b68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d016      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b74:	f7fd f950 	bl	8002e18 <HAL_GetTick>
 8005b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b7a:	e00a      	b.n	8005b92 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b7c:	f7fd f94c 	bl	8002e18 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e138      	b.n	8005e04 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b92:	4b46      	ldr	r3, [pc, #280]	@ (8005cac <HAL_RCC_OscConfig+0x4b8>)
 8005b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d0ed      	beq.n	8005b7c <HAL_RCC_OscConfig+0x388>
 8005ba0:	e015      	b.n	8005bce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ba2:	f7fd f939 	bl	8002e18 <HAL_GetTick>
 8005ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ba8:	e00a      	b.n	8005bc0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005baa:	f7fd f935 	bl	8002e18 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d901      	bls.n	8005bc0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e121      	b.n	8005e04 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005bc0:	4b3a      	ldr	r3, [pc, #232]	@ (8005cac <HAL_RCC_OscConfig+0x4b8>)
 8005bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1ed      	bne.n	8005baa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005bce:	7ffb      	ldrb	r3, [r7, #31]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d105      	bne.n	8005be0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bd4:	4b35      	ldr	r3, [pc, #212]	@ (8005cac <HAL_RCC_OscConfig+0x4b8>)
 8005bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bd8:	4a34      	ldr	r2, [pc, #208]	@ (8005cac <HAL_RCC_OscConfig+0x4b8>)
 8005bda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bde:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0320 	and.w	r3, r3, #32
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d03c      	beq.n	8005c66 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d01c      	beq.n	8005c2e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005bf4:	4b2d      	ldr	r3, [pc, #180]	@ (8005cac <HAL_RCC_OscConfig+0x4b8>)
 8005bf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bfa:	4a2c      	ldr	r2, [pc, #176]	@ (8005cac <HAL_RCC_OscConfig+0x4b8>)
 8005bfc:	f043 0301 	orr.w	r3, r3, #1
 8005c00:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c04:	f7fd f908 	bl	8002e18 <HAL_GetTick>
 8005c08:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c0a:	e008      	b.n	8005c1e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c0c:	f7fd f904 	bl	8002e18 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e0f2      	b.n	8005e04 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c1e:	4b23      	ldr	r3, [pc, #140]	@ (8005cac <HAL_RCC_OscConfig+0x4b8>)
 8005c20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d0ef      	beq.n	8005c0c <HAL_RCC_OscConfig+0x418>
 8005c2c:	e01b      	b.n	8005c66 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8005cac <HAL_RCC_OscConfig+0x4b8>)
 8005c30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c34:	4a1d      	ldr	r2, [pc, #116]	@ (8005cac <HAL_RCC_OscConfig+0x4b8>)
 8005c36:	f023 0301 	bic.w	r3, r3, #1
 8005c3a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c3e:	f7fd f8eb 	bl	8002e18 <HAL_GetTick>
 8005c42:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c44:	e008      	b.n	8005c58 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c46:	f7fd f8e7 	bl	8002e18 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d901      	bls.n	8005c58 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e0d5      	b.n	8005e04 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c58:	4b14      	ldr	r3, [pc, #80]	@ (8005cac <HAL_RCC_OscConfig+0x4b8>)
 8005c5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1ef      	bne.n	8005c46 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 80c9 	beq.w	8005e02 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c70:	4b0e      	ldr	r3, [pc, #56]	@ (8005cac <HAL_RCC_OscConfig+0x4b8>)
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f003 030c 	and.w	r3, r3, #12
 8005c78:	2b0c      	cmp	r3, #12
 8005c7a:	f000 8083 	beq.w	8005d84 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d15e      	bne.n	8005d44 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c86:	4b09      	ldr	r3, [pc, #36]	@ (8005cac <HAL_RCC_OscConfig+0x4b8>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a08      	ldr	r2, [pc, #32]	@ (8005cac <HAL_RCC_OscConfig+0x4b8>)
 8005c8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c92:	f7fd f8c1 	bl	8002e18 <HAL_GetTick>
 8005c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c98:	e00c      	b.n	8005cb4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c9a:	f7fd f8bd 	bl	8002e18 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d905      	bls.n	8005cb4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e0ab      	b.n	8005e04 <HAL_RCC_OscConfig+0x610>
 8005cac:	40021000 	.word	0x40021000
 8005cb0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cb4:	4b55      	ldr	r3, [pc, #340]	@ (8005e0c <HAL_RCC_OscConfig+0x618>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1ec      	bne.n	8005c9a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cc0:	4b52      	ldr	r3, [pc, #328]	@ (8005e0c <HAL_RCC_OscConfig+0x618>)
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	4b52      	ldr	r3, [pc, #328]	@ (8005e10 <HAL_RCC_OscConfig+0x61c>)
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	6a11      	ldr	r1, [r2, #32]
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005cd0:	3a01      	subs	r2, #1
 8005cd2:	0112      	lsls	r2, r2, #4
 8005cd4:	4311      	orrs	r1, r2
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005cda:	0212      	lsls	r2, r2, #8
 8005cdc:	4311      	orrs	r1, r2
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005ce2:	0852      	lsrs	r2, r2, #1
 8005ce4:	3a01      	subs	r2, #1
 8005ce6:	0552      	lsls	r2, r2, #21
 8005ce8:	4311      	orrs	r1, r2
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005cee:	0852      	lsrs	r2, r2, #1
 8005cf0:	3a01      	subs	r2, #1
 8005cf2:	0652      	lsls	r2, r2, #25
 8005cf4:	4311      	orrs	r1, r2
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005cfa:	06d2      	lsls	r2, r2, #27
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	4943      	ldr	r1, [pc, #268]	@ (8005e0c <HAL_RCC_OscConfig+0x618>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d04:	4b41      	ldr	r3, [pc, #260]	@ (8005e0c <HAL_RCC_OscConfig+0x618>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a40      	ldr	r2, [pc, #256]	@ (8005e0c <HAL_RCC_OscConfig+0x618>)
 8005d0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d0e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d10:	4b3e      	ldr	r3, [pc, #248]	@ (8005e0c <HAL_RCC_OscConfig+0x618>)
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	4a3d      	ldr	r2, [pc, #244]	@ (8005e0c <HAL_RCC_OscConfig+0x618>)
 8005d16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d1a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d1c:	f7fd f87c 	bl	8002e18 <HAL_GetTick>
 8005d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d22:	e008      	b.n	8005d36 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d24:	f7fd f878 	bl	8002e18 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e066      	b.n	8005e04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d36:	4b35      	ldr	r3, [pc, #212]	@ (8005e0c <HAL_RCC_OscConfig+0x618>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0f0      	beq.n	8005d24 <HAL_RCC_OscConfig+0x530>
 8005d42:	e05e      	b.n	8005e02 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d44:	4b31      	ldr	r3, [pc, #196]	@ (8005e0c <HAL_RCC_OscConfig+0x618>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a30      	ldr	r2, [pc, #192]	@ (8005e0c <HAL_RCC_OscConfig+0x618>)
 8005d4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d50:	f7fd f862 	bl	8002e18 <HAL_GetTick>
 8005d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d56:	e008      	b.n	8005d6a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d58:	f7fd f85e 	bl	8002e18 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e04c      	b.n	8005e04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d6a:	4b28      	ldr	r3, [pc, #160]	@ (8005e0c <HAL_RCC_OscConfig+0x618>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1f0      	bne.n	8005d58 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005d76:	4b25      	ldr	r3, [pc, #148]	@ (8005e0c <HAL_RCC_OscConfig+0x618>)
 8005d78:	68da      	ldr	r2, [r3, #12]
 8005d7a:	4924      	ldr	r1, [pc, #144]	@ (8005e0c <HAL_RCC_OscConfig+0x618>)
 8005d7c:	4b25      	ldr	r3, [pc, #148]	@ (8005e14 <HAL_RCC_OscConfig+0x620>)
 8005d7e:	4013      	ands	r3, r2
 8005d80:	60cb      	str	r3, [r1, #12]
 8005d82:	e03e      	b.n	8005e02 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	69db      	ldr	r3, [r3, #28]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d101      	bne.n	8005d90 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e039      	b.n	8005e04 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005d90:	4b1e      	ldr	r3, [pc, #120]	@ (8005e0c <HAL_RCC_OscConfig+0x618>)
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f003 0203 	and.w	r2, r3, #3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d12c      	bne.n	8005dfe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dae:	3b01      	subs	r3, #1
 8005db0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d123      	bne.n	8005dfe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d11b      	bne.n	8005dfe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d113      	bne.n	8005dfe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de0:	085b      	lsrs	r3, r3, #1
 8005de2:	3b01      	subs	r3, #1
 8005de4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d109      	bne.n	8005dfe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005df4:	085b      	lsrs	r3, r3, #1
 8005df6:	3b01      	subs	r3, #1
 8005df8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d001      	beq.n	8005e02 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e000      	b.n	8005e04 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3720      	adds	r7, #32
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	40021000 	.word	0x40021000
 8005e10:	019f800c 	.word	0x019f800c
 8005e14:	feeefffc 	.word	0xfeeefffc

08005e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005e22:	2300      	movs	r3, #0
 8005e24:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d101      	bne.n	8005e30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e11e      	b.n	800606e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e30:	4b91      	ldr	r3, [pc, #580]	@ (8006078 <HAL_RCC_ClockConfig+0x260>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 030f 	and.w	r3, r3, #15
 8005e38:	683a      	ldr	r2, [r7, #0]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d910      	bls.n	8005e60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e3e:	4b8e      	ldr	r3, [pc, #568]	@ (8006078 <HAL_RCC_ClockConfig+0x260>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f023 020f 	bic.w	r2, r3, #15
 8005e46:	498c      	ldr	r1, [pc, #560]	@ (8006078 <HAL_RCC_ClockConfig+0x260>)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e4e:	4b8a      	ldr	r3, [pc, #552]	@ (8006078 <HAL_RCC_ClockConfig+0x260>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 030f 	and.w	r3, r3, #15
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d001      	beq.n	8005e60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e106      	b.n	800606e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d073      	beq.n	8005f54 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	2b03      	cmp	r3, #3
 8005e72:	d129      	bne.n	8005ec8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e74:	4b81      	ldr	r3, [pc, #516]	@ (800607c <HAL_RCC_ClockConfig+0x264>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d101      	bne.n	8005e84 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e0f4      	b.n	800606e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005e84:	f000 f99e 	bl	80061c4 <RCC_GetSysClockFreqFromPLLSource>
 8005e88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	4a7c      	ldr	r2, [pc, #496]	@ (8006080 <HAL_RCC_ClockConfig+0x268>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d93f      	bls.n	8005f12 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005e92:	4b7a      	ldr	r3, [pc, #488]	@ (800607c <HAL_RCC_ClockConfig+0x264>)
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d009      	beq.n	8005eb2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d033      	beq.n	8005f12 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d12f      	bne.n	8005f12 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005eb2:	4b72      	ldr	r3, [pc, #456]	@ (800607c <HAL_RCC_ClockConfig+0x264>)
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005eba:	4a70      	ldr	r2, [pc, #448]	@ (800607c <HAL_RCC_ClockConfig+0x264>)
 8005ebc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ec0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005ec2:	2380      	movs	r3, #128	@ 0x80
 8005ec4:	617b      	str	r3, [r7, #20]
 8005ec6:	e024      	b.n	8005f12 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d107      	bne.n	8005ee0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ed0:	4b6a      	ldr	r3, [pc, #424]	@ (800607c <HAL_RCC_ClockConfig+0x264>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d109      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e0c6      	b.n	800606e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ee0:	4b66      	ldr	r3, [pc, #408]	@ (800607c <HAL_RCC_ClockConfig+0x264>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e0be      	b.n	800606e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005ef0:	f000 f8ce 	bl	8006090 <HAL_RCC_GetSysClockFreq>
 8005ef4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	4a61      	ldr	r2, [pc, #388]	@ (8006080 <HAL_RCC_ClockConfig+0x268>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d909      	bls.n	8005f12 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005efe:	4b5f      	ldr	r3, [pc, #380]	@ (800607c <HAL_RCC_ClockConfig+0x264>)
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f06:	4a5d      	ldr	r2, [pc, #372]	@ (800607c <HAL_RCC_ClockConfig+0x264>)
 8005f08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f0c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005f0e:	2380      	movs	r3, #128	@ 0x80
 8005f10:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f12:	4b5a      	ldr	r3, [pc, #360]	@ (800607c <HAL_RCC_ClockConfig+0x264>)
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f023 0203 	bic.w	r2, r3, #3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	4957      	ldr	r1, [pc, #348]	@ (800607c <HAL_RCC_ClockConfig+0x264>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f24:	f7fc ff78 	bl	8002e18 <HAL_GetTick>
 8005f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f2a:	e00a      	b.n	8005f42 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f2c:	f7fc ff74 	bl	8002e18 <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e095      	b.n	800606e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f42:	4b4e      	ldr	r3, [pc, #312]	@ (800607c <HAL_RCC_ClockConfig+0x264>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f003 020c 	and.w	r2, r3, #12
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d1eb      	bne.n	8005f2c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d023      	beq.n	8005fa8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d005      	beq.n	8005f78 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f6c:	4b43      	ldr	r3, [pc, #268]	@ (800607c <HAL_RCC_ClockConfig+0x264>)
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	4a42      	ldr	r2, [pc, #264]	@ (800607c <HAL_RCC_ClockConfig+0x264>)
 8005f72:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005f76:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0308 	and.w	r3, r3, #8
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d007      	beq.n	8005f94 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005f84:	4b3d      	ldr	r3, [pc, #244]	@ (800607c <HAL_RCC_ClockConfig+0x264>)
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005f8c:	4a3b      	ldr	r2, [pc, #236]	@ (800607c <HAL_RCC_ClockConfig+0x264>)
 8005f8e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005f92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f94:	4b39      	ldr	r3, [pc, #228]	@ (800607c <HAL_RCC_ClockConfig+0x264>)
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	4936      	ldr	r1, [pc, #216]	@ (800607c <HAL_RCC_ClockConfig+0x264>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	608b      	str	r3, [r1, #8]
 8005fa6:	e008      	b.n	8005fba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	2b80      	cmp	r3, #128	@ 0x80
 8005fac:	d105      	bne.n	8005fba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005fae:	4b33      	ldr	r3, [pc, #204]	@ (800607c <HAL_RCC_ClockConfig+0x264>)
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	4a32      	ldr	r2, [pc, #200]	@ (800607c <HAL_RCC_ClockConfig+0x264>)
 8005fb4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fb8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fba:	4b2f      	ldr	r3, [pc, #188]	@ (8006078 <HAL_RCC_ClockConfig+0x260>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 030f 	and.w	r3, r3, #15
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d21d      	bcs.n	8006004 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fc8:	4b2b      	ldr	r3, [pc, #172]	@ (8006078 <HAL_RCC_ClockConfig+0x260>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f023 020f 	bic.w	r2, r3, #15
 8005fd0:	4929      	ldr	r1, [pc, #164]	@ (8006078 <HAL_RCC_ClockConfig+0x260>)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005fd8:	f7fc ff1e 	bl	8002e18 <HAL_GetTick>
 8005fdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fde:	e00a      	b.n	8005ff6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fe0:	f7fc ff1a 	bl	8002e18 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d901      	bls.n	8005ff6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e03b      	b.n	800606e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ff6:	4b20      	ldr	r3, [pc, #128]	@ (8006078 <HAL_RCC_ClockConfig+0x260>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 030f 	and.w	r3, r3, #15
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	429a      	cmp	r2, r3
 8006002:	d1ed      	bne.n	8005fe0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b00      	cmp	r3, #0
 800600e:	d008      	beq.n	8006022 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006010:	4b1a      	ldr	r3, [pc, #104]	@ (800607c <HAL_RCC_ClockConfig+0x264>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	4917      	ldr	r1, [pc, #92]	@ (800607c <HAL_RCC_ClockConfig+0x264>)
 800601e:	4313      	orrs	r3, r2
 8006020:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0308 	and.w	r3, r3, #8
 800602a:	2b00      	cmp	r3, #0
 800602c:	d009      	beq.n	8006042 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800602e:	4b13      	ldr	r3, [pc, #76]	@ (800607c <HAL_RCC_ClockConfig+0x264>)
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	490f      	ldr	r1, [pc, #60]	@ (800607c <HAL_RCC_ClockConfig+0x264>)
 800603e:	4313      	orrs	r3, r2
 8006040:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006042:	f000 f825 	bl	8006090 <HAL_RCC_GetSysClockFreq>
 8006046:	4602      	mov	r2, r0
 8006048:	4b0c      	ldr	r3, [pc, #48]	@ (800607c <HAL_RCC_ClockConfig+0x264>)
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	091b      	lsrs	r3, r3, #4
 800604e:	f003 030f 	and.w	r3, r3, #15
 8006052:	490c      	ldr	r1, [pc, #48]	@ (8006084 <HAL_RCC_ClockConfig+0x26c>)
 8006054:	5ccb      	ldrb	r3, [r1, r3]
 8006056:	f003 031f 	and.w	r3, r3, #31
 800605a:	fa22 f303 	lsr.w	r3, r2, r3
 800605e:	4a0a      	ldr	r2, [pc, #40]	@ (8006088 <HAL_RCC_ClockConfig+0x270>)
 8006060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006062:	4b0a      	ldr	r3, [pc, #40]	@ (800608c <HAL_RCC_ClockConfig+0x274>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4618      	mov	r0, r3
 8006068:	f7fc fe8a 	bl	8002d80 <HAL_InitTick>
 800606c:	4603      	mov	r3, r0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	40022000 	.word	0x40022000
 800607c:	40021000 	.word	0x40021000
 8006080:	04c4b400 	.word	0x04c4b400
 8006084:	0800a5cc 	.word	0x0800a5cc
 8006088:	20000044 	.word	0x20000044
 800608c:	20000048 	.word	0x20000048

08006090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006090:	b480      	push	{r7}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006096:	4b2c      	ldr	r3, [pc, #176]	@ (8006148 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f003 030c 	and.w	r3, r3, #12
 800609e:	2b04      	cmp	r3, #4
 80060a0:	d102      	bne.n	80060a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80060a2:	4b2a      	ldr	r3, [pc, #168]	@ (800614c <HAL_RCC_GetSysClockFreq+0xbc>)
 80060a4:	613b      	str	r3, [r7, #16]
 80060a6:	e047      	b.n	8006138 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80060a8:	4b27      	ldr	r3, [pc, #156]	@ (8006148 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f003 030c 	and.w	r3, r3, #12
 80060b0:	2b08      	cmp	r3, #8
 80060b2:	d102      	bne.n	80060ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80060b4:	4b26      	ldr	r3, [pc, #152]	@ (8006150 <HAL_RCC_GetSysClockFreq+0xc0>)
 80060b6:	613b      	str	r3, [r7, #16]
 80060b8:	e03e      	b.n	8006138 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80060ba:	4b23      	ldr	r3, [pc, #140]	@ (8006148 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f003 030c 	and.w	r3, r3, #12
 80060c2:	2b0c      	cmp	r3, #12
 80060c4:	d136      	bne.n	8006134 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80060c6:	4b20      	ldr	r3, [pc, #128]	@ (8006148 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	f003 0303 	and.w	r3, r3, #3
 80060ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80060d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006148 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	091b      	lsrs	r3, r3, #4
 80060d6:	f003 030f 	and.w	r3, r3, #15
 80060da:	3301      	adds	r3, #1
 80060dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2b03      	cmp	r3, #3
 80060e2:	d10c      	bne.n	80060fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060e4:	4a1a      	ldr	r2, [pc, #104]	@ (8006150 <HAL_RCC_GetSysClockFreq+0xc0>)
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ec:	4a16      	ldr	r2, [pc, #88]	@ (8006148 <HAL_RCC_GetSysClockFreq+0xb8>)
 80060ee:	68d2      	ldr	r2, [r2, #12]
 80060f0:	0a12      	lsrs	r2, r2, #8
 80060f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80060f6:	fb02 f303 	mul.w	r3, r2, r3
 80060fa:	617b      	str	r3, [r7, #20]
      break;
 80060fc:	e00c      	b.n	8006118 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060fe:	4a13      	ldr	r2, [pc, #76]	@ (800614c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	fbb2 f3f3 	udiv	r3, r2, r3
 8006106:	4a10      	ldr	r2, [pc, #64]	@ (8006148 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006108:	68d2      	ldr	r2, [r2, #12]
 800610a:	0a12      	lsrs	r2, r2, #8
 800610c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006110:	fb02 f303 	mul.w	r3, r2, r3
 8006114:	617b      	str	r3, [r7, #20]
      break;
 8006116:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006118:	4b0b      	ldr	r3, [pc, #44]	@ (8006148 <HAL_RCC_GetSysClockFreq+0xb8>)
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	0e5b      	lsrs	r3, r3, #25
 800611e:	f003 0303 	and.w	r3, r3, #3
 8006122:	3301      	adds	r3, #1
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006130:	613b      	str	r3, [r7, #16]
 8006132:	e001      	b.n	8006138 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006134:	2300      	movs	r3, #0
 8006136:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006138:	693b      	ldr	r3, [r7, #16]
}
 800613a:	4618      	mov	r0, r3
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	40021000 	.word	0x40021000
 800614c:	00f42400 	.word	0x00f42400
 8006150:	016e3600 	.word	0x016e3600

08006154 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006154:	b480      	push	{r7}
 8006156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006158:	4b03      	ldr	r3, [pc, #12]	@ (8006168 <HAL_RCC_GetHCLKFreq+0x14>)
 800615a:	681b      	ldr	r3, [r3, #0]
}
 800615c:	4618      	mov	r0, r3
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	20000044 	.word	0x20000044

0800616c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006170:	f7ff fff0 	bl	8006154 <HAL_RCC_GetHCLKFreq>
 8006174:	4602      	mov	r2, r0
 8006176:	4b06      	ldr	r3, [pc, #24]	@ (8006190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	0a1b      	lsrs	r3, r3, #8
 800617c:	f003 0307 	and.w	r3, r3, #7
 8006180:	4904      	ldr	r1, [pc, #16]	@ (8006194 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006182:	5ccb      	ldrb	r3, [r1, r3]
 8006184:	f003 031f 	and.w	r3, r3, #31
 8006188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800618c:	4618      	mov	r0, r3
 800618e:	bd80      	pop	{r7, pc}
 8006190:	40021000 	.word	0x40021000
 8006194:	0800a5dc 	.word	0x0800a5dc

08006198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800619c:	f7ff ffda 	bl	8006154 <HAL_RCC_GetHCLKFreq>
 80061a0:	4602      	mov	r2, r0
 80061a2:	4b06      	ldr	r3, [pc, #24]	@ (80061bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	0adb      	lsrs	r3, r3, #11
 80061a8:	f003 0307 	and.w	r3, r3, #7
 80061ac:	4904      	ldr	r1, [pc, #16]	@ (80061c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80061ae:	5ccb      	ldrb	r3, [r1, r3]
 80061b0:	f003 031f 	and.w	r3, r3, #31
 80061b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	40021000 	.word	0x40021000
 80061c0:	0800a5dc 	.word	0x0800a5dc

080061c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061ca:	4b1e      	ldr	r3, [pc, #120]	@ (8006244 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	f003 0303 	and.w	r3, r3, #3
 80061d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061d4:	4b1b      	ldr	r3, [pc, #108]	@ (8006244 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	091b      	lsrs	r3, r3, #4
 80061da:	f003 030f 	and.w	r3, r3, #15
 80061de:	3301      	adds	r3, #1
 80061e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	2b03      	cmp	r3, #3
 80061e6:	d10c      	bne.n	8006202 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061e8:	4a17      	ldr	r2, [pc, #92]	@ (8006248 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f0:	4a14      	ldr	r2, [pc, #80]	@ (8006244 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80061f2:	68d2      	ldr	r2, [r2, #12]
 80061f4:	0a12      	lsrs	r2, r2, #8
 80061f6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80061fa:	fb02 f303 	mul.w	r3, r2, r3
 80061fe:	617b      	str	r3, [r7, #20]
    break;
 8006200:	e00c      	b.n	800621c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006202:	4a12      	ldr	r2, [pc, #72]	@ (800624c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	fbb2 f3f3 	udiv	r3, r2, r3
 800620a:	4a0e      	ldr	r2, [pc, #56]	@ (8006244 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800620c:	68d2      	ldr	r2, [r2, #12]
 800620e:	0a12      	lsrs	r2, r2, #8
 8006210:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006214:	fb02 f303 	mul.w	r3, r2, r3
 8006218:	617b      	str	r3, [r7, #20]
    break;
 800621a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800621c:	4b09      	ldr	r3, [pc, #36]	@ (8006244 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	0e5b      	lsrs	r3, r3, #25
 8006222:	f003 0303 	and.w	r3, r3, #3
 8006226:	3301      	adds	r3, #1
 8006228:	005b      	lsls	r3, r3, #1
 800622a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	fbb2 f3f3 	udiv	r3, r2, r3
 8006234:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006236:	687b      	ldr	r3, [r7, #4]
}
 8006238:	4618      	mov	r0, r3
 800623a:	371c      	adds	r7, #28
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	40021000 	.word	0x40021000
 8006248:	016e3600 	.word	0x016e3600
 800624c:	00f42400 	.word	0x00f42400

08006250 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006258:	2300      	movs	r3, #0
 800625a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800625c:	2300      	movs	r3, #0
 800625e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 8098 	beq.w	800639e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800626e:	2300      	movs	r3, #0
 8006270:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006272:	4b43      	ldr	r3, [pc, #268]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10d      	bne.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800627e:	4b40      	ldr	r3, [pc, #256]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006282:	4a3f      	ldr	r2, [pc, #252]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006284:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006288:	6593      	str	r3, [r2, #88]	@ 0x58
 800628a:	4b3d      	ldr	r3, [pc, #244]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800628c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800628e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006292:	60bb      	str	r3, [r7, #8]
 8006294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006296:	2301      	movs	r3, #1
 8006298:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800629a:	4b3a      	ldr	r3, [pc, #232]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a39      	ldr	r2, [pc, #228]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80062a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062a6:	f7fc fdb7 	bl	8002e18 <HAL_GetTick>
 80062aa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062ac:	e009      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062ae:	f7fc fdb3 	bl	8002e18 <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d902      	bls.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	74fb      	strb	r3, [r7, #19]
        break;
 80062c0:	e005      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062c2:	4b30      	ldr	r3, [pc, #192]	@ (8006384 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0ef      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80062ce:	7cfb      	ldrb	r3, [r7, #19]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d159      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80062d4:	4b2a      	ldr	r3, [pc, #168]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062de:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d01e      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d019      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062f0:	4b23      	ldr	r3, [pc, #140]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062fc:	4b20      	ldr	r3, [pc, #128]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006302:	4a1f      	ldr	r2, [pc, #124]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006308:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800630c:	4b1c      	ldr	r3, [pc, #112]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800630e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006312:	4a1b      	ldr	r2, [pc, #108]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006314:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006318:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800631c:	4a18      	ldr	r2, [pc, #96]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b00      	cmp	r3, #0
 800632c:	d016      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800632e:	f7fc fd73 	bl	8002e18 <HAL_GetTick>
 8006332:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006334:	e00b      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006336:	f7fc fd6f 	bl	8002e18 <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006344:	4293      	cmp	r3, r2
 8006346:	d902      	bls.n	800634e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	74fb      	strb	r3, [r7, #19]
            break;
 800634c:	e006      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800634e:	4b0c      	ldr	r3, [pc, #48]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006354:	f003 0302 	and.w	r3, r3, #2
 8006358:	2b00      	cmp	r3, #0
 800635a:	d0ec      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800635c:	7cfb      	ldrb	r3, [r7, #19]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10b      	bne.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006362:	4b07      	ldr	r3, [pc, #28]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006368:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006370:	4903      	ldr	r1, [pc, #12]	@ (8006380 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006372:	4313      	orrs	r3, r2
 8006374:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006378:	e008      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800637a:	7cfb      	ldrb	r3, [r7, #19]
 800637c:	74bb      	strb	r3, [r7, #18]
 800637e:	e005      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006380:	40021000 	.word	0x40021000
 8006384:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006388:	7cfb      	ldrb	r3, [r7, #19]
 800638a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800638c:	7c7b      	ldrb	r3, [r7, #17]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d105      	bne.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006392:	4ba7      	ldr	r3, [pc, #668]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006396:	4aa6      	ldr	r2, [pc, #664]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006398:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800639c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063aa:	4ba1      	ldr	r3, [pc, #644]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063b0:	f023 0203 	bic.w	r2, r3, #3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	499d      	ldr	r1, [pc, #628]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00a      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063cc:	4b98      	ldr	r3, [pc, #608]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d2:	f023 020c 	bic.w	r2, r3, #12
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	4995      	ldr	r1, [pc, #596]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0304 	and.w	r3, r3, #4
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00a      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063ee:	4b90      	ldr	r3, [pc, #576]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063f4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	498c      	ldr	r1, [pc, #560]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0308 	and.w	r3, r3, #8
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00a      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006410:	4b87      	ldr	r3, [pc, #540]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006416:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	4984      	ldr	r1, [pc, #528]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006420:	4313      	orrs	r3, r2
 8006422:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0310 	and.w	r3, r3, #16
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00a      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006432:	4b7f      	ldr	r3, [pc, #508]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006438:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	497b      	ldr	r1, [pc, #492]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006442:	4313      	orrs	r3, r2
 8006444:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0320 	and.w	r3, r3, #32
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00a      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006454:	4b76      	ldr	r3, [pc, #472]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800645a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	4973      	ldr	r1, [pc, #460]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006464:	4313      	orrs	r3, r2
 8006466:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00a      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006476:	4b6e      	ldr	r3, [pc, #440]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800647c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	69db      	ldr	r3, [r3, #28]
 8006484:	496a      	ldr	r1, [pc, #424]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006486:	4313      	orrs	r3, r2
 8006488:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00a      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006498:	4b65      	ldr	r3, [pc, #404]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800649a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800649e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	4962      	ldr	r1, [pc, #392]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00a      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064ba:	4b5d      	ldr	r3, [pc, #372]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c8:	4959      	ldr	r1, [pc, #356]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00a      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064dc:	4b54      	ldr	r3, [pc, #336]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064e2:	f023 0203 	bic.w	r2, r3, #3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ea:	4951      	ldr	r1, [pc, #324]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00a      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064fe:	4b4c      	ldr	r3, [pc, #304]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006504:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800650c:	4948      	ldr	r1, [pc, #288]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800650e:	4313      	orrs	r3, r2
 8006510:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800651c:	2b00      	cmp	r3, #0
 800651e:	d015      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006520:	4b43      	ldr	r3, [pc, #268]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006526:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800652e:	4940      	ldr	r1, [pc, #256]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006530:	4313      	orrs	r3, r2
 8006532:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800653a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800653e:	d105      	bne.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006540:	4b3b      	ldr	r3, [pc, #236]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	4a3a      	ldr	r2, [pc, #232]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006546:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800654a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006554:	2b00      	cmp	r3, #0
 8006556:	d015      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006558:	4b35      	ldr	r3, [pc, #212]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800655a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800655e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006566:	4932      	ldr	r1, [pc, #200]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006568:	4313      	orrs	r3, r2
 800656a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006572:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006576:	d105      	bne.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006578:	4b2d      	ldr	r3, [pc, #180]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	4a2c      	ldr	r2, [pc, #176]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800657e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006582:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d015      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006590:	4b27      	ldr	r3, [pc, #156]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006596:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800659e:	4924      	ldr	r1, [pc, #144]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065ae:	d105      	bne.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065b0:	4b1f      	ldr	r3, [pc, #124]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	4a1e      	ldr	r2, [pc, #120]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065ba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d015      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065c8:	4b19      	ldr	r3, [pc, #100]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065d6:	4916      	ldr	r1, [pc, #88]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065e6:	d105      	bne.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065e8:	4b11      	ldr	r3, [pc, #68]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	4a10      	ldr	r2, [pc, #64]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065f2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d019      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006600:	4b0b      	ldr	r3, [pc, #44]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006606:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800660e:	4908      	ldr	r1, [pc, #32]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006610:	4313      	orrs	r3, r2
 8006612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800661a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800661e:	d109      	bne.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006620:	4b03      	ldr	r3, [pc, #12]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	4a02      	ldr	r2, [pc, #8]	@ (8006630 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006626:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800662a:	60d3      	str	r3, [r2, #12]
 800662c:	e002      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800662e:	bf00      	nop
 8006630:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d015      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006640:	4b29      	ldr	r3, [pc, #164]	@ (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006646:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800664e:	4926      	ldr	r1, [pc, #152]	@ (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006650:	4313      	orrs	r3, r2
 8006652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800665a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800665e:	d105      	bne.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006660:	4b21      	ldr	r3, [pc, #132]	@ (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	4a20      	ldr	r2, [pc, #128]	@ (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006666:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800666a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d015      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006678:	4b1b      	ldr	r3, [pc, #108]	@ (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800667a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800667e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006686:	4918      	ldr	r1, [pc, #96]	@ (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006688:	4313      	orrs	r3, r2
 800668a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006696:	d105      	bne.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006698:	4b13      	ldr	r3, [pc, #76]	@ (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	4a12      	ldr	r2, [pc, #72]	@ (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800669e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066a2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d015      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80066b0:	4b0d      	ldr	r3, [pc, #52]	@ (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066be:	490a      	ldr	r1, [pc, #40]	@ (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066ce:	d105      	bne.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066d0:	4b05      	ldr	r3, [pc, #20]	@ (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	4a04      	ldr	r2, [pc, #16]	@ (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066da:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80066dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3718      	adds	r7, #24
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	40021000 	.word	0x40021000

080066ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e054      	b.n	80067a8 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	d111      	bne.n	800672e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f001 feec 	bl	80084f0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800671c:	2b00      	cmp	r3, #0
 800671e:	d102      	bne.n	8006726 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a23      	ldr	r2, [pc, #140]	@ (80067b0 <HAL_TIM_Base_Init+0xc4>)
 8006724:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2202      	movs	r2, #2
 8006732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	3304      	adds	r3, #4
 800673e:	4619      	mov	r1, r3
 8006740:	4610      	mov	r0, r2
 8006742:	f001 fa35 	bl	8007bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	08002831 	.word	0x08002831

080067b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d001      	beq.n	80067cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e04c      	b.n	8006866 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2202      	movs	r2, #2
 80067d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a26      	ldr	r2, [pc, #152]	@ (8006874 <HAL_TIM_Base_Start+0xc0>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d022      	beq.n	8006824 <HAL_TIM_Base_Start+0x70>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067e6:	d01d      	beq.n	8006824 <HAL_TIM_Base_Start+0x70>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a22      	ldr	r2, [pc, #136]	@ (8006878 <HAL_TIM_Base_Start+0xc4>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d018      	beq.n	8006824 <HAL_TIM_Base_Start+0x70>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a21      	ldr	r2, [pc, #132]	@ (800687c <HAL_TIM_Base_Start+0xc8>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d013      	beq.n	8006824 <HAL_TIM_Base_Start+0x70>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a1f      	ldr	r2, [pc, #124]	@ (8006880 <HAL_TIM_Base_Start+0xcc>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d00e      	beq.n	8006824 <HAL_TIM_Base_Start+0x70>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a1e      	ldr	r2, [pc, #120]	@ (8006884 <HAL_TIM_Base_Start+0xd0>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d009      	beq.n	8006824 <HAL_TIM_Base_Start+0x70>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a1c      	ldr	r2, [pc, #112]	@ (8006888 <HAL_TIM_Base_Start+0xd4>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d004      	beq.n	8006824 <HAL_TIM_Base_Start+0x70>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a1b      	ldr	r2, [pc, #108]	@ (800688c <HAL_TIM_Base_Start+0xd8>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d115      	bne.n	8006850 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	689a      	ldr	r2, [r3, #8]
 800682a:	4b19      	ldr	r3, [pc, #100]	@ (8006890 <HAL_TIM_Base_Start+0xdc>)
 800682c:	4013      	ands	r3, r2
 800682e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2b06      	cmp	r3, #6
 8006834:	d015      	beq.n	8006862 <HAL_TIM_Base_Start+0xae>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800683c:	d011      	beq.n	8006862 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f042 0201 	orr.w	r2, r2, #1
 800684c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800684e:	e008      	b.n	8006862 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f042 0201 	orr.w	r2, r2, #1
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	e000      	b.n	8006864 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006862:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3714      	adds	r7, #20
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	40012c00 	.word	0x40012c00
 8006878:	40000400 	.word	0x40000400
 800687c:	40000800 	.word	0x40000800
 8006880:	40000c00 	.word	0x40000c00
 8006884:	40013400 	.word	0x40013400
 8006888:	40014000 	.word	0x40014000
 800688c:	40015000 	.word	0x40015000
 8006890:	00010007 	.word	0x00010007

08006894 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d001      	beq.n	80068ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e054      	b.n	8006956 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2202      	movs	r2, #2
 80068b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68da      	ldr	r2, [r3, #12]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f042 0201 	orr.w	r2, r2, #1
 80068c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a26      	ldr	r2, [pc, #152]	@ (8006964 <HAL_TIM_Base_Start_IT+0xd0>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d022      	beq.n	8006914 <HAL_TIM_Base_Start_IT+0x80>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068d6:	d01d      	beq.n	8006914 <HAL_TIM_Base_Start_IT+0x80>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a22      	ldr	r2, [pc, #136]	@ (8006968 <HAL_TIM_Base_Start_IT+0xd4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d018      	beq.n	8006914 <HAL_TIM_Base_Start_IT+0x80>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a21      	ldr	r2, [pc, #132]	@ (800696c <HAL_TIM_Base_Start_IT+0xd8>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d013      	beq.n	8006914 <HAL_TIM_Base_Start_IT+0x80>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a1f      	ldr	r2, [pc, #124]	@ (8006970 <HAL_TIM_Base_Start_IT+0xdc>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d00e      	beq.n	8006914 <HAL_TIM_Base_Start_IT+0x80>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a1e      	ldr	r2, [pc, #120]	@ (8006974 <HAL_TIM_Base_Start_IT+0xe0>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d009      	beq.n	8006914 <HAL_TIM_Base_Start_IT+0x80>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a1c      	ldr	r2, [pc, #112]	@ (8006978 <HAL_TIM_Base_Start_IT+0xe4>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d004      	beq.n	8006914 <HAL_TIM_Base_Start_IT+0x80>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a1b      	ldr	r2, [pc, #108]	@ (800697c <HAL_TIM_Base_Start_IT+0xe8>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d115      	bne.n	8006940 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	689a      	ldr	r2, [r3, #8]
 800691a:	4b19      	ldr	r3, [pc, #100]	@ (8006980 <HAL_TIM_Base_Start_IT+0xec>)
 800691c:	4013      	ands	r3, r2
 800691e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2b06      	cmp	r3, #6
 8006924:	d015      	beq.n	8006952 <HAL_TIM_Base_Start_IT+0xbe>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800692c:	d011      	beq.n	8006952 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f042 0201 	orr.w	r2, r2, #1
 800693c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800693e:	e008      	b.n	8006952 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f042 0201 	orr.w	r2, r2, #1
 800694e:	601a      	str	r2, [r3, #0]
 8006950:	e000      	b.n	8006954 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006952:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	40012c00 	.word	0x40012c00
 8006968:	40000400 	.word	0x40000400
 800696c:	40000800 	.word	0x40000800
 8006970:	40000c00 	.word	0x40000c00
 8006974:	40013400 	.word	0x40013400
 8006978:	40014000 	.word	0x40014000
 800697c:	40015000 	.word	0x40015000
 8006980:	00010007 	.word	0x00010007

08006984 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e054      	b.n	8006a40 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d111      	bne.n	80069c6 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f001 fda0 	bl	80084f0 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d102      	bne.n	80069be <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a23      	ldr	r2, [pc, #140]	@ (8006a48 <HAL_TIM_PWM_Init+0xc4>)
 80069bc:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2202      	movs	r2, #2
 80069ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	3304      	adds	r3, #4
 80069d6:	4619      	mov	r1, r3
 80069d8:	4610      	mov	r0, r2
 80069da:	f001 f8e9 	bl	8007bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2201      	movs	r2, #1
 80069ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2201      	movs	r2, #1
 80069f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	08006a4d 	.word	0x08006a4d

08006a4c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d109      	bne.n	8006a84 <HAL_TIM_PWM_Start+0x24>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	bf14      	ite	ne
 8006a7c:	2301      	movne	r3, #1
 8006a7e:	2300      	moveq	r3, #0
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	e03c      	b.n	8006afe <HAL_TIM_PWM_Start+0x9e>
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	2b04      	cmp	r3, #4
 8006a88:	d109      	bne.n	8006a9e <HAL_TIM_PWM_Start+0x3e>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	bf14      	ite	ne
 8006a96:	2301      	movne	r3, #1
 8006a98:	2300      	moveq	r3, #0
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	e02f      	b.n	8006afe <HAL_TIM_PWM_Start+0x9e>
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	2b08      	cmp	r3, #8
 8006aa2:	d109      	bne.n	8006ab8 <HAL_TIM_PWM_Start+0x58>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	bf14      	ite	ne
 8006ab0:	2301      	movne	r3, #1
 8006ab2:	2300      	moveq	r3, #0
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	e022      	b.n	8006afe <HAL_TIM_PWM_Start+0x9e>
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	2b0c      	cmp	r3, #12
 8006abc:	d109      	bne.n	8006ad2 <HAL_TIM_PWM_Start+0x72>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	bf14      	ite	ne
 8006aca:	2301      	movne	r3, #1
 8006acc:	2300      	moveq	r3, #0
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	e015      	b.n	8006afe <HAL_TIM_PWM_Start+0x9e>
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	2b10      	cmp	r3, #16
 8006ad6:	d109      	bne.n	8006aec <HAL_TIM_PWM_Start+0x8c>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	bf14      	ite	ne
 8006ae4:	2301      	movne	r3, #1
 8006ae6:	2300      	moveq	r3, #0
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	e008      	b.n	8006afe <HAL_TIM_PWM_Start+0x9e>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	bf14      	ite	ne
 8006af8:	2301      	movne	r3, #1
 8006afa:	2300      	moveq	r3, #0
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d001      	beq.n	8006b06 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e0a6      	b.n	8006c54 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d104      	bne.n	8006b16 <HAL_TIM_PWM_Start+0xb6>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b14:	e023      	b.n	8006b5e <HAL_TIM_PWM_Start+0xfe>
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	2b04      	cmp	r3, #4
 8006b1a:	d104      	bne.n	8006b26 <HAL_TIM_PWM_Start+0xc6>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b24:	e01b      	b.n	8006b5e <HAL_TIM_PWM_Start+0xfe>
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	2b08      	cmp	r3, #8
 8006b2a:	d104      	bne.n	8006b36 <HAL_TIM_PWM_Start+0xd6>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2202      	movs	r2, #2
 8006b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b34:	e013      	b.n	8006b5e <HAL_TIM_PWM_Start+0xfe>
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	2b0c      	cmp	r3, #12
 8006b3a:	d104      	bne.n	8006b46 <HAL_TIM_PWM_Start+0xe6>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2202      	movs	r2, #2
 8006b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b44:	e00b      	b.n	8006b5e <HAL_TIM_PWM_Start+0xfe>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b10      	cmp	r3, #16
 8006b4a:	d104      	bne.n	8006b56 <HAL_TIM_PWM_Start+0xf6>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b54:	e003      	b.n	8006b5e <HAL_TIM_PWM_Start+0xfe>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2202      	movs	r2, #2
 8006b5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2201      	movs	r2, #1
 8006b64:	6839      	ldr	r1, [r7, #0]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f001 fc9c 	bl	80084a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a3a      	ldr	r2, [pc, #232]	@ (8006c5c <HAL_TIM_PWM_Start+0x1fc>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d018      	beq.n	8006ba8 <HAL_TIM_PWM_Start+0x148>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a39      	ldr	r2, [pc, #228]	@ (8006c60 <HAL_TIM_PWM_Start+0x200>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d013      	beq.n	8006ba8 <HAL_TIM_PWM_Start+0x148>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a37      	ldr	r2, [pc, #220]	@ (8006c64 <HAL_TIM_PWM_Start+0x204>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d00e      	beq.n	8006ba8 <HAL_TIM_PWM_Start+0x148>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a36      	ldr	r2, [pc, #216]	@ (8006c68 <HAL_TIM_PWM_Start+0x208>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d009      	beq.n	8006ba8 <HAL_TIM_PWM_Start+0x148>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a34      	ldr	r2, [pc, #208]	@ (8006c6c <HAL_TIM_PWM_Start+0x20c>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d004      	beq.n	8006ba8 <HAL_TIM_PWM_Start+0x148>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a33      	ldr	r2, [pc, #204]	@ (8006c70 <HAL_TIM_PWM_Start+0x210>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d101      	bne.n	8006bac <HAL_TIM_PWM_Start+0x14c>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e000      	b.n	8006bae <HAL_TIM_PWM_Start+0x14e>
 8006bac:	2300      	movs	r3, #0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d007      	beq.n	8006bc2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006bc0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a25      	ldr	r2, [pc, #148]	@ (8006c5c <HAL_TIM_PWM_Start+0x1fc>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d022      	beq.n	8006c12 <HAL_TIM_PWM_Start+0x1b2>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bd4:	d01d      	beq.n	8006c12 <HAL_TIM_PWM_Start+0x1b2>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a26      	ldr	r2, [pc, #152]	@ (8006c74 <HAL_TIM_PWM_Start+0x214>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d018      	beq.n	8006c12 <HAL_TIM_PWM_Start+0x1b2>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a24      	ldr	r2, [pc, #144]	@ (8006c78 <HAL_TIM_PWM_Start+0x218>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d013      	beq.n	8006c12 <HAL_TIM_PWM_Start+0x1b2>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a23      	ldr	r2, [pc, #140]	@ (8006c7c <HAL_TIM_PWM_Start+0x21c>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d00e      	beq.n	8006c12 <HAL_TIM_PWM_Start+0x1b2>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a19      	ldr	r2, [pc, #100]	@ (8006c60 <HAL_TIM_PWM_Start+0x200>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d009      	beq.n	8006c12 <HAL_TIM_PWM_Start+0x1b2>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a18      	ldr	r2, [pc, #96]	@ (8006c64 <HAL_TIM_PWM_Start+0x204>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d004      	beq.n	8006c12 <HAL_TIM_PWM_Start+0x1b2>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a18      	ldr	r2, [pc, #96]	@ (8006c70 <HAL_TIM_PWM_Start+0x210>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d115      	bne.n	8006c3e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689a      	ldr	r2, [r3, #8]
 8006c18:	4b19      	ldr	r3, [pc, #100]	@ (8006c80 <HAL_TIM_PWM_Start+0x220>)
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2b06      	cmp	r3, #6
 8006c22:	d015      	beq.n	8006c50 <HAL_TIM_PWM_Start+0x1f0>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c2a:	d011      	beq.n	8006c50 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f042 0201 	orr.w	r2, r2, #1
 8006c3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c3c:	e008      	b.n	8006c50 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f042 0201 	orr.w	r2, r2, #1
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	e000      	b.n	8006c52 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	40012c00 	.word	0x40012c00
 8006c60:	40013400 	.word	0x40013400
 8006c64:	40014000 	.word	0x40014000
 8006c68:	40014400 	.word	0x40014400
 8006c6c:	40014800 	.word	0x40014800
 8006c70:	40015000 	.word	0x40015000
 8006c74:	40000400 	.word	0x40000400
 8006c78:	40000800 	.word	0x40000800
 8006c7c:	40000c00 	.word	0x40000c00
 8006c80:	00010007 	.word	0x00010007

08006c84 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d101      	bne.n	8006c98 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e04c      	b.n	8006d32 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d111      	bne.n	8006cc8 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f001 fc1f 	bl	80084f0 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d102      	bne.n	8006cc0 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a1f      	ldr	r2, [pc, #124]	@ (8006d3c <HAL_TIM_OnePulse_Init+0xb8>)
 8006cbe:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	3304      	adds	r3, #4
 8006cd8:	4619      	mov	r1, r3
 8006cda:	4610      	mov	r0, r2
 8006cdc:	f000 ff68 	bl	8007bb0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 0208 	bic.w	r2, r2, #8
 8006cee:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6819      	ldr	r1, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	08006d41 	.word	0x08006d41

08006d40 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d64:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006d6c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d74:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d7c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d108      	bne.n	8006d96 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d84:	7bbb      	ldrb	r3, [r7, #14]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d105      	bne.n	8006d96 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d8a:	7b7b      	ldrb	r3, [r7, #13]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d102      	bne.n	8006d96 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d90:	7b3b      	ldrb	r3, [r7, #12]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d001      	beq.n	8006d9a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e059      	b.n	8006e4e <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2202      	movs	r2, #2
 8006da6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2202      	movs	r2, #2
 8006dae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2202      	movs	r2, #2
 8006db6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68da      	ldr	r2, [r3, #12]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f042 0202 	orr.w	r2, r2, #2
 8006dc8:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68da      	ldr	r2, [r3, #12]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f042 0204 	orr.w	r2, r2, #4
 8006dd8:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2201      	movs	r2, #1
 8006de0:	2100      	movs	r1, #0
 8006de2:	4618      	mov	r0, r3
 8006de4:	f001 fb5e 	bl	80084a4 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2201      	movs	r2, #1
 8006dee:	2104      	movs	r1, #4
 8006df0:	4618      	mov	r0, r3
 8006df2:	f001 fb57 	bl	80084a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a17      	ldr	r2, [pc, #92]	@ (8006e58 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d018      	beq.n	8006e32 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a15      	ldr	r2, [pc, #84]	@ (8006e5c <HAL_TIM_OnePulse_Start_IT+0x108>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d013      	beq.n	8006e32 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a14      	ldr	r2, [pc, #80]	@ (8006e60 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d00e      	beq.n	8006e32 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a12      	ldr	r2, [pc, #72]	@ (8006e64 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d009      	beq.n	8006e32 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a11      	ldr	r2, [pc, #68]	@ (8006e68 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d004      	beq.n	8006e32 <HAL_TIM_OnePulse_Start_IT+0xde>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a0f      	ldr	r2, [pc, #60]	@ (8006e6c <HAL_TIM_OnePulse_Start_IT+0x118>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d101      	bne.n	8006e36 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8006e32:	2301      	movs	r3, #1
 8006e34:	e000      	b.n	8006e38 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8006e36:	2300      	movs	r3, #0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d007      	beq.n	8006e4c <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e4a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	40012c00 	.word	0x40012c00
 8006e5c:	40013400 	.word	0x40013400
 8006e60:	40014000 	.word	0x40014000
 8006e64:	40014400 	.word	0x40014400
 8006e68:	40014800 	.word	0x40014800
 8006e6c:	40015000 	.word	0x40015000

08006e70 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e0a2      	b.n	8006fca <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d111      	bne.n	8006eb4 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f001 fb29 	bl	80084f0 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d102      	bne.n	8006eac <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a4a      	ldr	r2, [pc, #296]	@ (8006fd4 <HAL_TIM_Encoder_Init+0x164>)
 8006eaa:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	6812      	ldr	r2, [r2, #0]
 8006ec6:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006eca:	f023 0307 	bic.w	r3, r3, #7
 8006ece:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	3304      	adds	r3, #4
 8006ed8:	4619      	mov	r1, r3
 8006eda:	4610      	mov	r0, r2
 8006edc:	f000 fe68 	bl	8007bb0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f08:	f023 0303 	bic.w	r3, r3, #3
 8006f0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	689a      	ldr	r2, [r3, #8]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	021b      	lsls	r3, r3, #8
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006f26:	f023 030c 	bic.w	r3, r3, #12
 8006f2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	68da      	ldr	r2, [r3, #12]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	69db      	ldr	r3, [r3, #28]
 8006f40:	021b      	lsls	r3, r3, #8
 8006f42:	4313      	orrs	r3, r2
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	011a      	lsls	r2, r3, #4
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	6a1b      	ldr	r3, [r3, #32]
 8006f54:	031b      	lsls	r3, r3, #12
 8006f56:	4313      	orrs	r3, r2
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006f64:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006f6c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	685a      	ldr	r2, [r3, #4]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	011b      	lsls	r3, r3, #4
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	697a      	ldr	r2, [r7, #20]
 8006f86:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3718      	adds	r7, #24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	08002925 	.word	0x08002925

08006fd8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006fe8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006ff0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ff8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007000:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d110      	bne.n	800702a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007008:	7bfb      	ldrb	r3, [r7, #15]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d102      	bne.n	8007014 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800700e:	7b7b      	ldrb	r3, [r7, #13]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d001      	beq.n	8007018 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e069      	b.n	80070ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2202      	movs	r2, #2
 800701c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2202      	movs	r2, #2
 8007024:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007028:	e031      	b.n	800708e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	2b04      	cmp	r3, #4
 800702e:	d110      	bne.n	8007052 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007030:	7bbb      	ldrb	r3, [r7, #14]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d102      	bne.n	800703c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007036:	7b3b      	ldrb	r3, [r7, #12]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d001      	beq.n	8007040 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e055      	b.n	80070ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2202      	movs	r2, #2
 8007044:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2202      	movs	r2, #2
 800704c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007050:	e01d      	b.n	800708e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007052:	7bfb      	ldrb	r3, [r7, #15]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d108      	bne.n	800706a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007058:	7bbb      	ldrb	r3, [r7, #14]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d105      	bne.n	800706a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800705e:	7b7b      	ldrb	r3, [r7, #13]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d102      	bne.n	800706a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007064:	7b3b      	ldrb	r3, [r7, #12]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d001      	beq.n	800706e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e03e      	b.n	80070ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2202      	movs	r2, #2
 8007072:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2202      	movs	r2, #2
 800707a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2202      	movs	r2, #2
 8007082:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2202      	movs	r2, #2
 800708a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d003      	beq.n	800709c <HAL_TIM_Encoder_Start+0xc4>
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	2b04      	cmp	r3, #4
 8007098:	d008      	beq.n	80070ac <HAL_TIM_Encoder_Start+0xd4>
 800709a:	e00f      	b.n	80070bc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2201      	movs	r2, #1
 80070a2:	2100      	movs	r1, #0
 80070a4:	4618      	mov	r0, r3
 80070a6:	f001 f9fd 	bl	80084a4 <TIM_CCxChannelCmd>
      break;
 80070aa:	e016      	b.n	80070da <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2201      	movs	r2, #1
 80070b2:	2104      	movs	r1, #4
 80070b4:	4618      	mov	r0, r3
 80070b6:	f001 f9f5 	bl	80084a4 <TIM_CCxChannelCmd>
      break;
 80070ba:	e00e      	b.n	80070da <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2201      	movs	r2, #1
 80070c2:	2100      	movs	r1, #0
 80070c4:	4618      	mov	r0, r3
 80070c6:	f001 f9ed 	bl	80084a4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2201      	movs	r2, #1
 80070d0:	2104      	movs	r1, #4
 80070d2:	4618      	mov	r0, r3
 80070d4:	f001 f9e6 	bl	80084a4 <TIM_CCxChannelCmd>
      break;
 80070d8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f042 0201 	orr.w	r2, r2, #1
 80070e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	f003 0302 	and.w	r3, r3, #2
 8007112:	2b00      	cmp	r3, #0
 8007114:	d026      	beq.n	8007164 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f003 0302 	and.w	r3, r3, #2
 800711c:	2b00      	cmp	r3, #0
 800711e:	d021      	beq.n	8007164 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f06f 0202 	mvn.w	r2, #2
 8007128:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	f003 0303 	and.w	r3, r3, #3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d005      	beq.n	800714a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	4798      	blx	r3
 8007148:	e009      	b.n	800715e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	f003 0304 	and.w	r3, r3, #4
 800716a:	2b00      	cmp	r3, #0
 800716c:	d026      	beq.n	80071bc <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f003 0304 	and.w	r3, r3, #4
 8007174:	2b00      	cmp	r3, #0
 8007176:	d021      	beq.n	80071bc <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f06f 0204 	mvn.w	r2, #4
 8007180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2202      	movs	r2, #2
 8007186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007192:	2b00      	cmp	r3, #0
 8007194:	d005      	beq.n	80071a2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	4798      	blx	r3
 80071a0:	e009      	b.n	80071b6 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	f003 0308 	and.w	r3, r3, #8
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d026      	beq.n	8007214 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f003 0308 	and.w	r3, r3, #8
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d021      	beq.n	8007214 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f06f 0208 	mvn.w	r2, #8
 80071d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2204      	movs	r2, #4
 80071de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	f003 0303 	and.w	r3, r3, #3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d005      	beq.n	80071fa <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	4798      	blx	r3
 80071f8:	e009      	b.n	800720e <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	f003 0310 	and.w	r3, r3, #16
 800721a:	2b00      	cmp	r3, #0
 800721c:	d026      	beq.n	800726c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f003 0310 	and.w	r3, r3, #16
 8007224:	2b00      	cmp	r3, #0
 8007226:	d021      	beq.n	800726c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f06f 0210 	mvn.w	r2, #16
 8007230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2208      	movs	r2, #8
 8007236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	69db      	ldr	r3, [r3, #28]
 800723e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007242:	2b00      	cmp	r3, #0
 8007244:	d005      	beq.n	8007252 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	4798      	blx	r3
 8007250:	e009      	b.n	8007266 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00e      	beq.n	8007294 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	2b00      	cmp	r3, #0
 800727e:	d009      	beq.n	8007294 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f06f 0201 	mvn.w	r2, #1
 8007288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800729a:	2b00      	cmp	r3, #0
 800729c:	d104      	bne.n	80072a8 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00e      	beq.n	80072c6 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d009      	beq.n	80072c6 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80072ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00e      	beq.n	80072ee <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d009      	beq.n	80072ee <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80072e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00e      	beq.n	8007316 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d009      	beq.n	8007316 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800730a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	f003 0320 	and.w	r3, r3, #32
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00e      	beq.n	800733e <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f003 0320 	and.w	r3, r3, #32
 8007326:	2b00      	cmp	r3, #0
 8007328:	d009      	beq.n	800733e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f06f 0220 	mvn.w	r2, #32
 8007332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00e      	beq.n	8007366 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800734e:	2b00      	cmp	r3, #0
 8007350:	d009      	beq.n	8007366 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800735a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00e      	beq.n	800738e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d009      	beq.n	800738e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00e      	beq.n	80073b6 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d009      	beq.n	80073b6 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80073aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00e      	beq.n	80073de <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d009      	beq.n	80073de <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80073d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073de:	bf00      	nop
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
	...

080073e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b086      	sub	sp, #24
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073f4:	2300      	movs	r3, #0
 80073f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d101      	bne.n	8007406 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007402:	2302      	movs	r3, #2
 8007404:	e0ff      	b.n	8007606 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2201      	movs	r2, #1
 800740a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2b14      	cmp	r3, #20
 8007412:	f200 80f0 	bhi.w	80075f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007416:	a201      	add	r2, pc, #4	@ (adr r2, 800741c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741c:	08007471 	.word	0x08007471
 8007420:	080075f7 	.word	0x080075f7
 8007424:	080075f7 	.word	0x080075f7
 8007428:	080075f7 	.word	0x080075f7
 800742c:	080074b1 	.word	0x080074b1
 8007430:	080075f7 	.word	0x080075f7
 8007434:	080075f7 	.word	0x080075f7
 8007438:	080075f7 	.word	0x080075f7
 800743c:	080074f3 	.word	0x080074f3
 8007440:	080075f7 	.word	0x080075f7
 8007444:	080075f7 	.word	0x080075f7
 8007448:	080075f7 	.word	0x080075f7
 800744c:	08007533 	.word	0x08007533
 8007450:	080075f7 	.word	0x080075f7
 8007454:	080075f7 	.word	0x080075f7
 8007458:	080075f7 	.word	0x080075f7
 800745c:	08007575 	.word	0x08007575
 8007460:	080075f7 	.word	0x080075f7
 8007464:	080075f7 	.word	0x080075f7
 8007468:	080075f7 	.word	0x080075f7
 800746c:	080075b5 	.word	0x080075b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68b9      	ldr	r1, [r7, #8]
 8007476:	4618      	mov	r0, r3
 8007478:	f000 fc4e 	bl	8007d18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	699a      	ldr	r2, [r3, #24]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f042 0208 	orr.w	r2, r2, #8
 800748a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	699a      	ldr	r2, [r3, #24]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f022 0204 	bic.w	r2, r2, #4
 800749a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6999      	ldr	r1, [r3, #24]
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	691a      	ldr	r2, [r3, #16]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	430a      	orrs	r2, r1
 80074ac:	619a      	str	r2, [r3, #24]
      break;
 80074ae:	e0a5      	b.n	80075fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68b9      	ldr	r1, [r7, #8]
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 fcc8 	bl	8007e4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	699a      	ldr	r2, [r3, #24]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80074ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	699a      	ldr	r2, [r3, #24]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6999      	ldr	r1, [r3, #24]
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	021a      	lsls	r2, r3, #8
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	430a      	orrs	r2, r1
 80074ee:	619a      	str	r2, [r3, #24]
      break;
 80074f0:	e084      	b.n	80075fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68b9      	ldr	r1, [r7, #8]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f000 fd3b 	bl	8007f74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	69da      	ldr	r2, [r3, #28]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f042 0208 	orr.w	r2, r2, #8
 800750c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	69da      	ldr	r2, [r3, #28]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f022 0204 	bic.w	r2, r2, #4
 800751c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	69d9      	ldr	r1, [r3, #28]
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	691a      	ldr	r2, [r3, #16]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	430a      	orrs	r2, r1
 800752e:	61da      	str	r2, [r3, #28]
      break;
 8007530:	e064      	b.n	80075fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68b9      	ldr	r1, [r7, #8]
 8007538:	4618      	mov	r0, r3
 800753a:	f000 fdad 	bl	8008098 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	69da      	ldr	r2, [r3, #28]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800754c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	69da      	ldr	r2, [r3, #28]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800755c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	69d9      	ldr	r1, [r3, #28]
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	021a      	lsls	r2, r3, #8
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	430a      	orrs	r2, r1
 8007570:	61da      	str	r2, [r3, #28]
      break;
 8007572:	e043      	b.n	80075fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68b9      	ldr	r1, [r7, #8]
 800757a:	4618      	mov	r0, r3
 800757c:	f000 fe20 	bl	80081c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f042 0208 	orr.w	r2, r2, #8
 800758e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f022 0204 	bic.w	r2, r2, #4
 800759e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	691a      	ldr	r2, [r3, #16]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	430a      	orrs	r2, r1
 80075b0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80075b2:	e023      	b.n	80075fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68b9      	ldr	r1, [r7, #8]
 80075ba:	4618      	mov	r0, r3
 80075bc:	f000 fe6a 	bl	8008294 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075ce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075de:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	021a      	lsls	r2, r3, #8
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	430a      	orrs	r2, r1
 80075f2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80075f4:	e002      	b.n	80075fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	75fb      	strb	r3, [r7, #23]
      break;
 80075fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007604:	7dfb      	ldrb	r3, [r7, #23]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3718      	adds	r7, #24
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop

08007610 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800761a:	2300      	movs	r3, #0
 800761c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007624:	2b01      	cmp	r3, #1
 8007626:	d101      	bne.n	800762c <HAL_TIM_ConfigClockSource+0x1c>
 8007628:	2302      	movs	r3, #2
 800762a:	e0f6      	b.n	800781a <HAL_TIM_ConfigClockSource+0x20a>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2202      	movs	r2, #2
 8007638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800764a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800764e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007656:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a6f      	ldr	r2, [pc, #444]	@ (8007824 <HAL_TIM_ConfigClockSource+0x214>)
 8007666:	4293      	cmp	r3, r2
 8007668:	f000 80c1 	beq.w	80077ee <HAL_TIM_ConfigClockSource+0x1de>
 800766c:	4a6d      	ldr	r2, [pc, #436]	@ (8007824 <HAL_TIM_ConfigClockSource+0x214>)
 800766e:	4293      	cmp	r3, r2
 8007670:	f200 80c6 	bhi.w	8007800 <HAL_TIM_ConfigClockSource+0x1f0>
 8007674:	4a6c      	ldr	r2, [pc, #432]	@ (8007828 <HAL_TIM_ConfigClockSource+0x218>)
 8007676:	4293      	cmp	r3, r2
 8007678:	f000 80b9 	beq.w	80077ee <HAL_TIM_ConfigClockSource+0x1de>
 800767c:	4a6a      	ldr	r2, [pc, #424]	@ (8007828 <HAL_TIM_ConfigClockSource+0x218>)
 800767e:	4293      	cmp	r3, r2
 8007680:	f200 80be 	bhi.w	8007800 <HAL_TIM_ConfigClockSource+0x1f0>
 8007684:	4a69      	ldr	r2, [pc, #420]	@ (800782c <HAL_TIM_ConfigClockSource+0x21c>)
 8007686:	4293      	cmp	r3, r2
 8007688:	f000 80b1 	beq.w	80077ee <HAL_TIM_ConfigClockSource+0x1de>
 800768c:	4a67      	ldr	r2, [pc, #412]	@ (800782c <HAL_TIM_ConfigClockSource+0x21c>)
 800768e:	4293      	cmp	r3, r2
 8007690:	f200 80b6 	bhi.w	8007800 <HAL_TIM_ConfigClockSource+0x1f0>
 8007694:	4a66      	ldr	r2, [pc, #408]	@ (8007830 <HAL_TIM_ConfigClockSource+0x220>)
 8007696:	4293      	cmp	r3, r2
 8007698:	f000 80a9 	beq.w	80077ee <HAL_TIM_ConfigClockSource+0x1de>
 800769c:	4a64      	ldr	r2, [pc, #400]	@ (8007830 <HAL_TIM_ConfigClockSource+0x220>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	f200 80ae 	bhi.w	8007800 <HAL_TIM_ConfigClockSource+0x1f0>
 80076a4:	4a63      	ldr	r2, [pc, #396]	@ (8007834 <HAL_TIM_ConfigClockSource+0x224>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	f000 80a1 	beq.w	80077ee <HAL_TIM_ConfigClockSource+0x1de>
 80076ac:	4a61      	ldr	r2, [pc, #388]	@ (8007834 <HAL_TIM_ConfigClockSource+0x224>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	f200 80a6 	bhi.w	8007800 <HAL_TIM_ConfigClockSource+0x1f0>
 80076b4:	4a60      	ldr	r2, [pc, #384]	@ (8007838 <HAL_TIM_ConfigClockSource+0x228>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	f000 8099 	beq.w	80077ee <HAL_TIM_ConfigClockSource+0x1de>
 80076bc:	4a5e      	ldr	r2, [pc, #376]	@ (8007838 <HAL_TIM_ConfigClockSource+0x228>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	f200 809e 	bhi.w	8007800 <HAL_TIM_ConfigClockSource+0x1f0>
 80076c4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80076c8:	f000 8091 	beq.w	80077ee <HAL_TIM_ConfigClockSource+0x1de>
 80076cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80076d0:	f200 8096 	bhi.w	8007800 <HAL_TIM_ConfigClockSource+0x1f0>
 80076d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076d8:	f000 8089 	beq.w	80077ee <HAL_TIM_ConfigClockSource+0x1de>
 80076dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076e0:	f200 808e 	bhi.w	8007800 <HAL_TIM_ConfigClockSource+0x1f0>
 80076e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076e8:	d03e      	beq.n	8007768 <HAL_TIM_ConfigClockSource+0x158>
 80076ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076ee:	f200 8087 	bhi.w	8007800 <HAL_TIM_ConfigClockSource+0x1f0>
 80076f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076f6:	f000 8086 	beq.w	8007806 <HAL_TIM_ConfigClockSource+0x1f6>
 80076fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076fe:	d87f      	bhi.n	8007800 <HAL_TIM_ConfigClockSource+0x1f0>
 8007700:	2b70      	cmp	r3, #112	@ 0x70
 8007702:	d01a      	beq.n	800773a <HAL_TIM_ConfigClockSource+0x12a>
 8007704:	2b70      	cmp	r3, #112	@ 0x70
 8007706:	d87b      	bhi.n	8007800 <HAL_TIM_ConfigClockSource+0x1f0>
 8007708:	2b60      	cmp	r3, #96	@ 0x60
 800770a:	d050      	beq.n	80077ae <HAL_TIM_ConfigClockSource+0x19e>
 800770c:	2b60      	cmp	r3, #96	@ 0x60
 800770e:	d877      	bhi.n	8007800 <HAL_TIM_ConfigClockSource+0x1f0>
 8007710:	2b50      	cmp	r3, #80	@ 0x50
 8007712:	d03c      	beq.n	800778e <HAL_TIM_ConfigClockSource+0x17e>
 8007714:	2b50      	cmp	r3, #80	@ 0x50
 8007716:	d873      	bhi.n	8007800 <HAL_TIM_ConfigClockSource+0x1f0>
 8007718:	2b40      	cmp	r3, #64	@ 0x40
 800771a:	d058      	beq.n	80077ce <HAL_TIM_ConfigClockSource+0x1be>
 800771c:	2b40      	cmp	r3, #64	@ 0x40
 800771e:	d86f      	bhi.n	8007800 <HAL_TIM_ConfigClockSource+0x1f0>
 8007720:	2b30      	cmp	r3, #48	@ 0x30
 8007722:	d064      	beq.n	80077ee <HAL_TIM_ConfigClockSource+0x1de>
 8007724:	2b30      	cmp	r3, #48	@ 0x30
 8007726:	d86b      	bhi.n	8007800 <HAL_TIM_ConfigClockSource+0x1f0>
 8007728:	2b20      	cmp	r3, #32
 800772a:	d060      	beq.n	80077ee <HAL_TIM_ConfigClockSource+0x1de>
 800772c:	2b20      	cmp	r3, #32
 800772e:	d867      	bhi.n	8007800 <HAL_TIM_ConfigClockSource+0x1f0>
 8007730:	2b00      	cmp	r3, #0
 8007732:	d05c      	beq.n	80077ee <HAL_TIM_ConfigClockSource+0x1de>
 8007734:	2b10      	cmp	r3, #16
 8007736:	d05a      	beq.n	80077ee <HAL_TIM_ConfigClockSource+0x1de>
 8007738:	e062      	b.n	8007800 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800774a:	f000 fe8b 	bl	8008464 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800775c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	609a      	str	r2, [r3, #8]
      break;
 8007766:	e04f      	b.n	8007808 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007778:	f000 fe74 	bl	8008464 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	689a      	ldr	r2, [r3, #8]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800778a:	609a      	str	r2, [r3, #8]
      break;
 800778c:	e03c      	b.n	8007808 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800779a:	461a      	mov	r2, r3
 800779c:	f000 fde6 	bl	800836c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2150      	movs	r1, #80	@ 0x50
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 fe3f 	bl	800842a <TIM_ITRx_SetConfig>
      break;
 80077ac:	e02c      	b.n	8007808 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80077ba:	461a      	mov	r2, r3
 80077bc:	f000 fe05 	bl	80083ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2160      	movs	r1, #96	@ 0x60
 80077c6:	4618      	mov	r0, r3
 80077c8:	f000 fe2f 	bl	800842a <TIM_ITRx_SetConfig>
      break;
 80077cc:	e01c      	b.n	8007808 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077da:	461a      	mov	r2, r3
 80077dc:	f000 fdc6 	bl	800836c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2140      	movs	r1, #64	@ 0x40
 80077e6:	4618      	mov	r0, r3
 80077e8:	f000 fe1f 	bl	800842a <TIM_ITRx_SetConfig>
      break;
 80077ec:	e00c      	b.n	8007808 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4619      	mov	r1, r3
 80077f8:	4610      	mov	r0, r2
 80077fa:	f000 fe16 	bl	800842a <TIM_ITRx_SetConfig>
      break;
 80077fe:	e003      	b.n	8007808 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	73fb      	strb	r3, [r7, #15]
      break;
 8007804:	e000      	b.n	8007808 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007806:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007818:	7bfb      	ldrb	r3, [r7, #15]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	00100070 	.word	0x00100070
 8007828:	00100060 	.word	0x00100060
 800782c:	00100050 	.word	0x00100050
 8007830:	00100040 	.word	0x00100040
 8007834:	00100030 	.word	0x00100030
 8007838:	00100020 	.word	0x00100020

0800783c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007844:	bf00      	nop
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078bc:	bf00      	nop
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80078d0:	bf00      	nop
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80078e4:	bf00      	nop
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b087      	sub	sp, #28
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	460b      	mov	r3, r1
 80078fa:	607a      	str	r2, [r7, #4]
 80078fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d101      	bne.n	800790c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	e14a      	b.n	8007ba2 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b01      	cmp	r3, #1
 8007916:	f040 80dd 	bne.w	8007ad4 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800791a:	7afb      	ldrb	r3, [r7, #11]
 800791c:	2b1f      	cmp	r3, #31
 800791e:	f200 80d6 	bhi.w	8007ace <HAL_TIM_RegisterCallback+0x1de>
 8007922:	a201      	add	r2, pc, #4	@ (adr r2, 8007928 <HAL_TIM_RegisterCallback+0x38>)
 8007924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007928:	080079a9 	.word	0x080079a9
 800792c:	080079b1 	.word	0x080079b1
 8007930:	080079b9 	.word	0x080079b9
 8007934:	080079c1 	.word	0x080079c1
 8007938:	080079c9 	.word	0x080079c9
 800793c:	080079d1 	.word	0x080079d1
 8007940:	080079d9 	.word	0x080079d9
 8007944:	080079e1 	.word	0x080079e1
 8007948:	080079e9 	.word	0x080079e9
 800794c:	080079f1 	.word	0x080079f1
 8007950:	080079f9 	.word	0x080079f9
 8007954:	08007a01 	.word	0x08007a01
 8007958:	08007a09 	.word	0x08007a09
 800795c:	08007a11 	.word	0x08007a11
 8007960:	08007a1b 	.word	0x08007a1b
 8007964:	08007a25 	.word	0x08007a25
 8007968:	08007a2f 	.word	0x08007a2f
 800796c:	08007a39 	.word	0x08007a39
 8007970:	08007a43 	.word	0x08007a43
 8007974:	08007a4d 	.word	0x08007a4d
 8007978:	08007a57 	.word	0x08007a57
 800797c:	08007a61 	.word	0x08007a61
 8007980:	08007a6b 	.word	0x08007a6b
 8007984:	08007a75 	.word	0x08007a75
 8007988:	08007a7f 	.word	0x08007a7f
 800798c:	08007a89 	.word	0x08007a89
 8007990:	08007a93 	.word	0x08007a93
 8007994:	08007a9d 	.word	0x08007a9d
 8007998:	08007aa7 	.word	0x08007aa7
 800799c:	08007ab1 	.word	0x08007ab1
 80079a0:	08007abb 	.word	0x08007abb
 80079a4:	08007ac5 	.word	0x08007ac5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80079ae:	e0f7      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80079b6:	e0f3      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80079be:	e0ef      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80079c6:	e0eb      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80079ce:	e0e7      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80079d6:	e0e3      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80079de:	e0df      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80079e6:	e0db      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80079ee:	e0d7      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80079f6:	e0d3      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80079fe:	e0cf      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007a06:	e0cb      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007a0e:	e0c7      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007a18:	e0c2      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8007a22:	e0bd      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8007a2c:	e0b8      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8007a36:	e0b3      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8007a40:	e0ae      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8007a4a:	e0a9      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8007a54:	e0a4      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007a5e:	e09f      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8007a68:	e09a      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8007a72:	e095      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8007a7c:	e090      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8007a86:	e08b      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8007a90:	e086      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8007a9a:	e081      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8007aa4:	e07c      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8007aae:	e077      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8007ab8:	e072      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8007ac2:	e06d      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007acc:	e068      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	75fb      	strb	r3, [r7, #23]
        break;
 8007ad2:	e065      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d15d      	bne.n	8007b9c <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8007ae0:	7afb      	ldrb	r3, [r7, #11]
 8007ae2:	2b0d      	cmp	r3, #13
 8007ae4:	d857      	bhi.n	8007b96 <HAL_TIM_RegisterCallback+0x2a6>
 8007ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8007aec <HAL_TIM_RegisterCallback+0x1fc>)
 8007ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aec:	08007b25 	.word	0x08007b25
 8007af0:	08007b2d 	.word	0x08007b2d
 8007af4:	08007b35 	.word	0x08007b35
 8007af8:	08007b3d 	.word	0x08007b3d
 8007afc:	08007b45 	.word	0x08007b45
 8007b00:	08007b4d 	.word	0x08007b4d
 8007b04:	08007b55 	.word	0x08007b55
 8007b08:	08007b5d 	.word	0x08007b5d
 8007b0c:	08007b65 	.word	0x08007b65
 8007b10:	08007b6d 	.word	0x08007b6d
 8007b14:	08007b75 	.word	0x08007b75
 8007b18:	08007b7d 	.word	0x08007b7d
 8007b1c:	08007b85 	.word	0x08007b85
 8007b20:	08007b8d 	.word	0x08007b8d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007b2a:	e039      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007b32:	e035      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007b3a:	e031      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007b42:	e02d      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007b4a:	e029      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007b52:	e025      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007b5a:	e021      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007b62:	e01d      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007b6a:	e019      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007b72:	e015      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007b7a:	e011      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007b82:	e00d      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007b8a:	e009      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007b94:	e004      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	75fb      	strb	r3, [r7, #23]
        break;
 8007b9a:	e001      	b.n	8007ba0 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	371c      	adds	r7, #28
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop

08007bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a4c      	ldr	r2, [pc, #304]	@ (8007cf4 <TIM_Base_SetConfig+0x144>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d017      	beq.n	8007bf8 <TIM_Base_SetConfig+0x48>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bce:	d013      	beq.n	8007bf8 <TIM_Base_SetConfig+0x48>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a49      	ldr	r2, [pc, #292]	@ (8007cf8 <TIM_Base_SetConfig+0x148>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d00f      	beq.n	8007bf8 <TIM_Base_SetConfig+0x48>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a48      	ldr	r2, [pc, #288]	@ (8007cfc <TIM_Base_SetConfig+0x14c>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d00b      	beq.n	8007bf8 <TIM_Base_SetConfig+0x48>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a47      	ldr	r2, [pc, #284]	@ (8007d00 <TIM_Base_SetConfig+0x150>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d007      	beq.n	8007bf8 <TIM_Base_SetConfig+0x48>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a46      	ldr	r2, [pc, #280]	@ (8007d04 <TIM_Base_SetConfig+0x154>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d003      	beq.n	8007bf8 <TIM_Base_SetConfig+0x48>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a45      	ldr	r2, [pc, #276]	@ (8007d08 <TIM_Base_SetConfig+0x158>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d108      	bne.n	8007c0a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a39      	ldr	r2, [pc, #228]	@ (8007cf4 <TIM_Base_SetConfig+0x144>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d023      	beq.n	8007c5a <TIM_Base_SetConfig+0xaa>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c18:	d01f      	beq.n	8007c5a <TIM_Base_SetConfig+0xaa>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a36      	ldr	r2, [pc, #216]	@ (8007cf8 <TIM_Base_SetConfig+0x148>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d01b      	beq.n	8007c5a <TIM_Base_SetConfig+0xaa>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a35      	ldr	r2, [pc, #212]	@ (8007cfc <TIM_Base_SetConfig+0x14c>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d017      	beq.n	8007c5a <TIM_Base_SetConfig+0xaa>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a34      	ldr	r2, [pc, #208]	@ (8007d00 <TIM_Base_SetConfig+0x150>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d013      	beq.n	8007c5a <TIM_Base_SetConfig+0xaa>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a33      	ldr	r2, [pc, #204]	@ (8007d04 <TIM_Base_SetConfig+0x154>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d00f      	beq.n	8007c5a <TIM_Base_SetConfig+0xaa>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a33      	ldr	r2, [pc, #204]	@ (8007d0c <TIM_Base_SetConfig+0x15c>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d00b      	beq.n	8007c5a <TIM_Base_SetConfig+0xaa>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a32      	ldr	r2, [pc, #200]	@ (8007d10 <TIM_Base_SetConfig+0x160>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d007      	beq.n	8007c5a <TIM_Base_SetConfig+0xaa>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	4a31      	ldr	r2, [pc, #196]	@ (8007d14 <TIM_Base_SetConfig+0x164>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d003      	beq.n	8007c5a <TIM_Base_SetConfig+0xaa>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a2c      	ldr	r2, [pc, #176]	@ (8007d08 <TIM_Base_SetConfig+0x158>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d108      	bne.n	8007c6c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	695b      	ldr	r3, [r3, #20]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	689a      	ldr	r2, [r3, #8]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a18      	ldr	r2, [pc, #96]	@ (8007cf4 <TIM_Base_SetConfig+0x144>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d013      	beq.n	8007cc0 <TIM_Base_SetConfig+0x110>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a1a      	ldr	r2, [pc, #104]	@ (8007d04 <TIM_Base_SetConfig+0x154>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d00f      	beq.n	8007cc0 <TIM_Base_SetConfig+0x110>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a1a      	ldr	r2, [pc, #104]	@ (8007d0c <TIM_Base_SetConfig+0x15c>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d00b      	beq.n	8007cc0 <TIM_Base_SetConfig+0x110>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a19      	ldr	r2, [pc, #100]	@ (8007d10 <TIM_Base_SetConfig+0x160>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d007      	beq.n	8007cc0 <TIM_Base_SetConfig+0x110>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a18      	ldr	r2, [pc, #96]	@ (8007d14 <TIM_Base_SetConfig+0x164>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d003      	beq.n	8007cc0 <TIM_Base_SetConfig+0x110>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a13      	ldr	r2, [pc, #76]	@ (8007d08 <TIM_Base_SetConfig+0x158>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d103      	bne.n	8007cc8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	691a      	ldr	r2, [r3, #16]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	f003 0301 	and.w	r3, r3, #1
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d105      	bne.n	8007ce6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	f023 0201 	bic.w	r2, r3, #1
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	611a      	str	r2, [r3, #16]
  }
}
 8007ce6:	bf00      	nop
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	40012c00 	.word	0x40012c00
 8007cf8:	40000400 	.word	0x40000400
 8007cfc:	40000800 	.word	0x40000800
 8007d00:	40000c00 	.word	0x40000c00
 8007d04:	40013400 	.word	0x40013400
 8007d08:	40015000 	.word	0x40015000
 8007d0c:	40014000 	.word	0x40014000
 8007d10:	40014400 	.word	0x40014400
 8007d14:	40014800 	.word	0x40014800

08007d18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b087      	sub	sp, #28
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a1b      	ldr	r3, [r3, #32]
 8007d2c:	f023 0201 	bic.w	r2, r3, #1
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f023 0303 	bic.w	r3, r3, #3
 8007d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	f023 0302 	bic.w	r3, r3, #2
 8007d64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a30      	ldr	r2, [pc, #192]	@ (8007e34 <TIM_OC1_SetConfig+0x11c>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d013      	beq.n	8007da0 <TIM_OC1_SetConfig+0x88>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a2f      	ldr	r2, [pc, #188]	@ (8007e38 <TIM_OC1_SetConfig+0x120>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d00f      	beq.n	8007da0 <TIM_OC1_SetConfig+0x88>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a2e      	ldr	r2, [pc, #184]	@ (8007e3c <TIM_OC1_SetConfig+0x124>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d00b      	beq.n	8007da0 <TIM_OC1_SetConfig+0x88>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a2d      	ldr	r2, [pc, #180]	@ (8007e40 <TIM_OC1_SetConfig+0x128>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d007      	beq.n	8007da0 <TIM_OC1_SetConfig+0x88>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a2c      	ldr	r2, [pc, #176]	@ (8007e44 <TIM_OC1_SetConfig+0x12c>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d003      	beq.n	8007da0 <TIM_OC1_SetConfig+0x88>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a2b      	ldr	r2, [pc, #172]	@ (8007e48 <TIM_OC1_SetConfig+0x130>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d10c      	bne.n	8007dba <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	f023 0308 	bic.w	r3, r3, #8
 8007da6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	697a      	ldr	r2, [r7, #20]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f023 0304 	bic.w	r3, r3, #4
 8007db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8007e34 <TIM_OC1_SetConfig+0x11c>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d013      	beq.n	8007dea <TIM_OC1_SetConfig+0xd2>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a1c      	ldr	r2, [pc, #112]	@ (8007e38 <TIM_OC1_SetConfig+0x120>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d00f      	beq.n	8007dea <TIM_OC1_SetConfig+0xd2>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8007e3c <TIM_OC1_SetConfig+0x124>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d00b      	beq.n	8007dea <TIM_OC1_SetConfig+0xd2>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a1a      	ldr	r2, [pc, #104]	@ (8007e40 <TIM_OC1_SetConfig+0x128>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d007      	beq.n	8007dea <TIM_OC1_SetConfig+0xd2>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a19      	ldr	r2, [pc, #100]	@ (8007e44 <TIM_OC1_SetConfig+0x12c>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d003      	beq.n	8007dea <TIM_OC1_SetConfig+0xd2>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a18      	ldr	r2, [pc, #96]	@ (8007e48 <TIM_OC1_SetConfig+0x130>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d111      	bne.n	8007e0e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007df0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007df8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	693a      	ldr	r2, [r7, #16]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	685a      	ldr	r2, [r3, #4]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	697a      	ldr	r2, [r7, #20]
 8007e26:	621a      	str	r2, [r3, #32]
}
 8007e28:	bf00      	nop
 8007e2a:	371c      	adds	r7, #28
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr
 8007e34:	40012c00 	.word	0x40012c00
 8007e38:	40013400 	.word	0x40013400
 8007e3c:	40014000 	.word	0x40014000
 8007e40:	40014400 	.word	0x40014400
 8007e44:	40014800 	.word	0x40014800
 8007e48:	40015000 	.word	0x40015000

08007e4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b087      	sub	sp, #28
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a1b      	ldr	r3, [r3, #32]
 8007e5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a1b      	ldr	r3, [r3, #32]
 8007e60:	f023 0210 	bic.w	r2, r3, #16
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	699b      	ldr	r3, [r3, #24]
 8007e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	021b      	lsls	r3, r3, #8
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	f023 0320 	bic.w	r3, r3, #32
 8007e9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	011b      	lsls	r3, r3, #4
 8007ea2:	697a      	ldr	r2, [r7, #20]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a2c      	ldr	r2, [pc, #176]	@ (8007f5c <TIM_OC2_SetConfig+0x110>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d007      	beq.n	8007ec0 <TIM_OC2_SetConfig+0x74>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a2b      	ldr	r2, [pc, #172]	@ (8007f60 <TIM_OC2_SetConfig+0x114>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d003      	beq.n	8007ec0 <TIM_OC2_SetConfig+0x74>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a2a      	ldr	r2, [pc, #168]	@ (8007f64 <TIM_OC2_SetConfig+0x118>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d10d      	bne.n	8007edc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	011b      	lsls	r3, r3, #4
 8007ece:	697a      	ldr	r2, [r7, #20]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007eda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a1f      	ldr	r2, [pc, #124]	@ (8007f5c <TIM_OC2_SetConfig+0x110>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d013      	beq.n	8007f0c <TIM_OC2_SetConfig+0xc0>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a1e      	ldr	r2, [pc, #120]	@ (8007f60 <TIM_OC2_SetConfig+0x114>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d00f      	beq.n	8007f0c <TIM_OC2_SetConfig+0xc0>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a1e      	ldr	r2, [pc, #120]	@ (8007f68 <TIM_OC2_SetConfig+0x11c>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d00b      	beq.n	8007f0c <TIM_OC2_SetConfig+0xc0>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a1d      	ldr	r2, [pc, #116]	@ (8007f6c <TIM_OC2_SetConfig+0x120>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d007      	beq.n	8007f0c <TIM_OC2_SetConfig+0xc0>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a1c      	ldr	r2, [pc, #112]	@ (8007f70 <TIM_OC2_SetConfig+0x124>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d003      	beq.n	8007f0c <TIM_OC2_SetConfig+0xc0>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a17      	ldr	r2, [pc, #92]	@ (8007f64 <TIM_OC2_SetConfig+0x118>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d113      	bne.n	8007f34 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	695b      	ldr	r3, [r3, #20]
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	693a      	ldr	r2, [r7, #16]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	693a      	ldr	r2, [r7, #16]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	693a      	ldr	r2, [r7, #16]
 8007f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	685a      	ldr	r2, [r3, #4]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	697a      	ldr	r2, [r7, #20]
 8007f4c:	621a      	str	r2, [r3, #32]
}
 8007f4e:	bf00      	nop
 8007f50:	371c      	adds	r7, #28
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	40012c00 	.word	0x40012c00
 8007f60:	40013400 	.word	0x40013400
 8007f64:	40015000 	.word	0x40015000
 8007f68:	40014000 	.word	0x40014000
 8007f6c:	40014400 	.word	0x40014400
 8007f70:	40014800 	.word	0x40014800

08007f74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b087      	sub	sp, #28
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a1b      	ldr	r3, [r3, #32]
 8007f82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6a1b      	ldr	r3, [r3, #32]
 8007f88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	69db      	ldr	r3, [r3, #28]
 8007f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f023 0303 	bic.w	r3, r3, #3
 8007fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007fc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	021b      	lsls	r3, r3, #8
 8007fc8:	697a      	ldr	r2, [r7, #20]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a2b      	ldr	r2, [pc, #172]	@ (8008080 <TIM_OC3_SetConfig+0x10c>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d007      	beq.n	8007fe6 <TIM_OC3_SetConfig+0x72>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a2a      	ldr	r2, [pc, #168]	@ (8008084 <TIM_OC3_SetConfig+0x110>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d003      	beq.n	8007fe6 <TIM_OC3_SetConfig+0x72>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a29      	ldr	r2, [pc, #164]	@ (8008088 <TIM_OC3_SetConfig+0x114>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d10d      	bne.n	8008002 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007fec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	021b      	lsls	r3, r3, #8
 8007ff4:	697a      	ldr	r2, [r7, #20]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a1e      	ldr	r2, [pc, #120]	@ (8008080 <TIM_OC3_SetConfig+0x10c>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d013      	beq.n	8008032 <TIM_OC3_SetConfig+0xbe>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a1d      	ldr	r2, [pc, #116]	@ (8008084 <TIM_OC3_SetConfig+0x110>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d00f      	beq.n	8008032 <TIM_OC3_SetConfig+0xbe>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a1d      	ldr	r2, [pc, #116]	@ (800808c <TIM_OC3_SetConfig+0x118>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d00b      	beq.n	8008032 <TIM_OC3_SetConfig+0xbe>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4a1c      	ldr	r2, [pc, #112]	@ (8008090 <TIM_OC3_SetConfig+0x11c>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d007      	beq.n	8008032 <TIM_OC3_SetConfig+0xbe>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4a1b      	ldr	r2, [pc, #108]	@ (8008094 <TIM_OC3_SetConfig+0x120>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d003      	beq.n	8008032 <TIM_OC3_SetConfig+0xbe>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4a16      	ldr	r2, [pc, #88]	@ (8008088 <TIM_OC3_SetConfig+0x114>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d113      	bne.n	800805a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	011b      	lsls	r3, r3, #4
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	4313      	orrs	r3, r2
 800804c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	011b      	lsls	r3, r3, #4
 8008054:	693a      	ldr	r2, [r7, #16]
 8008056:	4313      	orrs	r3, r2
 8008058:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	693a      	ldr	r2, [r7, #16]
 800805e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	685a      	ldr	r2, [r3, #4]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	697a      	ldr	r2, [r7, #20]
 8008072:	621a      	str	r2, [r3, #32]
}
 8008074:	bf00      	nop
 8008076:	371c      	adds	r7, #28
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr
 8008080:	40012c00 	.word	0x40012c00
 8008084:	40013400 	.word	0x40013400
 8008088:	40015000 	.word	0x40015000
 800808c:	40014000 	.word	0x40014000
 8008090:	40014400 	.word	0x40014400
 8008094:	40014800 	.word	0x40014800

08008098 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008098:	b480      	push	{r7}
 800809a:	b087      	sub	sp, #28
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a1b      	ldr	r3, [r3, #32]
 80080ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	69db      	ldr	r3, [r3, #28]
 80080be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80080c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	021b      	lsls	r3, r3, #8
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	4313      	orrs	r3, r2
 80080de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80080e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	031b      	lsls	r3, r3, #12
 80080ee:	697a      	ldr	r2, [r7, #20]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a2c      	ldr	r2, [pc, #176]	@ (80081a8 <TIM_OC4_SetConfig+0x110>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d007      	beq.n	800810c <TIM_OC4_SetConfig+0x74>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a2b      	ldr	r2, [pc, #172]	@ (80081ac <TIM_OC4_SetConfig+0x114>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d003      	beq.n	800810c <TIM_OC4_SetConfig+0x74>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a2a      	ldr	r2, [pc, #168]	@ (80081b0 <TIM_OC4_SetConfig+0x118>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d10d      	bne.n	8008128 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	031b      	lsls	r3, r3, #12
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	4313      	orrs	r3, r2
 800811e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008126:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a1f      	ldr	r2, [pc, #124]	@ (80081a8 <TIM_OC4_SetConfig+0x110>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d013      	beq.n	8008158 <TIM_OC4_SetConfig+0xc0>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a1e      	ldr	r2, [pc, #120]	@ (80081ac <TIM_OC4_SetConfig+0x114>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d00f      	beq.n	8008158 <TIM_OC4_SetConfig+0xc0>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a1e      	ldr	r2, [pc, #120]	@ (80081b4 <TIM_OC4_SetConfig+0x11c>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d00b      	beq.n	8008158 <TIM_OC4_SetConfig+0xc0>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a1d      	ldr	r2, [pc, #116]	@ (80081b8 <TIM_OC4_SetConfig+0x120>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d007      	beq.n	8008158 <TIM_OC4_SetConfig+0xc0>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a1c      	ldr	r2, [pc, #112]	@ (80081bc <TIM_OC4_SetConfig+0x124>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d003      	beq.n	8008158 <TIM_OC4_SetConfig+0xc0>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a17      	ldr	r2, [pc, #92]	@ (80081b0 <TIM_OC4_SetConfig+0x118>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d113      	bne.n	8008180 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800815e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008166:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	695b      	ldr	r3, [r3, #20]
 800816c:	019b      	lsls	r3, r3, #6
 800816e:	693a      	ldr	r2, [r7, #16]
 8008170:	4313      	orrs	r3, r2
 8008172:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	019b      	lsls	r3, r3, #6
 800817a:	693a      	ldr	r2, [r7, #16]
 800817c:	4313      	orrs	r3, r2
 800817e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	685a      	ldr	r2, [r3, #4]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	697a      	ldr	r2, [r7, #20]
 8008198:	621a      	str	r2, [r3, #32]
}
 800819a:	bf00      	nop
 800819c:	371c      	adds	r7, #28
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	40012c00 	.word	0x40012c00
 80081ac:	40013400 	.word	0x40013400
 80081b0:	40015000 	.word	0x40015000
 80081b4:	40014000 	.word	0x40014000
 80081b8:	40014400 	.word	0x40014400
 80081bc:	40014800 	.word	0x40014800

080081c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b087      	sub	sp, #28
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a1b      	ldr	r3, [r3, #32]
 80081ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a1b      	ldr	r3, [r3, #32]
 80081d4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008204:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	041b      	lsls	r3, r3, #16
 800820c:	693a      	ldr	r2, [r7, #16]
 800820e:	4313      	orrs	r3, r2
 8008210:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a19      	ldr	r2, [pc, #100]	@ (800827c <TIM_OC5_SetConfig+0xbc>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d013      	beq.n	8008242 <TIM_OC5_SetConfig+0x82>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a18      	ldr	r2, [pc, #96]	@ (8008280 <TIM_OC5_SetConfig+0xc0>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d00f      	beq.n	8008242 <TIM_OC5_SetConfig+0x82>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a17      	ldr	r2, [pc, #92]	@ (8008284 <TIM_OC5_SetConfig+0xc4>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d00b      	beq.n	8008242 <TIM_OC5_SetConfig+0x82>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a16      	ldr	r2, [pc, #88]	@ (8008288 <TIM_OC5_SetConfig+0xc8>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d007      	beq.n	8008242 <TIM_OC5_SetConfig+0x82>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a15      	ldr	r2, [pc, #84]	@ (800828c <TIM_OC5_SetConfig+0xcc>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d003      	beq.n	8008242 <TIM_OC5_SetConfig+0x82>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a14      	ldr	r2, [pc, #80]	@ (8008290 <TIM_OC5_SetConfig+0xd0>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d109      	bne.n	8008256 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008248:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	695b      	ldr	r3, [r3, #20]
 800824e:	021b      	lsls	r3, r3, #8
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	4313      	orrs	r3, r2
 8008254:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	697a      	ldr	r2, [r7, #20]
 800825a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	685a      	ldr	r2, [r3, #4]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	693a      	ldr	r2, [r7, #16]
 800826e:	621a      	str	r2, [r3, #32]
}
 8008270:	bf00      	nop
 8008272:	371c      	adds	r7, #28
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	40012c00 	.word	0x40012c00
 8008280:	40013400 	.word	0x40013400
 8008284:	40014000 	.word	0x40014000
 8008288:	40014400 	.word	0x40014400
 800828c:	40014800 	.word	0x40014800
 8008290:	40015000 	.word	0x40015000

08008294 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008294:	b480      	push	{r7}
 8008296:	b087      	sub	sp, #28
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a1b      	ldr	r3, [r3, #32]
 80082a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a1b      	ldr	r3, [r3, #32]
 80082a8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80082c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	021b      	lsls	r3, r3, #8
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80082da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	051b      	lsls	r3, r3, #20
 80082e2:	693a      	ldr	r2, [r7, #16]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a1a      	ldr	r2, [pc, #104]	@ (8008354 <TIM_OC6_SetConfig+0xc0>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d013      	beq.n	8008318 <TIM_OC6_SetConfig+0x84>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a19      	ldr	r2, [pc, #100]	@ (8008358 <TIM_OC6_SetConfig+0xc4>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d00f      	beq.n	8008318 <TIM_OC6_SetConfig+0x84>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a18      	ldr	r2, [pc, #96]	@ (800835c <TIM_OC6_SetConfig+0xc8>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d00b      	beq.n	8008318 <TIM_OC6_SetConfig+0x84>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a17      	ldr	r2, [pc, #92]	@ (8008360 <TIM_OC6_SetConfig+0xcc>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d007      	beq.n	8008318 <TIM_OC6_SetConfig+0x84>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a16      	ldr	r2, [pc, #88]	@ (8008364 <TIM_OC6_SetConfig+0xd0>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d003      	beq.n	8008318 <TIM_OC6_SetConfig+0x84>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4a15      	ldr	r2, [pc, #84]	@ (8008368 <TIM_OC6_SetConfig+0xd4>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d109      	bne.n	800832c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800831e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	695b      	ldr	r3, [r3, #20]
 8008324:	029b      	lsls	r3, r3, #10
 8008326:	697a      	ldr	r2, [r7, #20]
 8008328:	4313      	orrs	r3, r2
 800832a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	697a      	ldr	r2, [r7, #20]
 8008330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	685a      	ldr	r2, [r3, #4]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	621a      	str	r2, [r3, #32]
}
 8008346:	bf00      	nop
 8008348:	371c      	adds	r7, #28
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	40012c00 	.word	0x40012c00
 8008358:	40013400 	.word	0x40013400
 800835c:	40014000 	.word	0x40014000
 8008360:	40014400 	.word	0x40014400
 8008364:	40014800 	.word	0x40014800
 8008368:	40015000 	.word	0x40015000

0800836c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800836c:	b480      	push	{r7}
 800836e:	b087      	sub	sp, #28
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6a1b      	ldr	r3, [r3, #32]
 800837c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6a1b      	ldr	r3, [r3, #32]
 8008382:	f023 0201 	bic.w	r2, r3, #1
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	699b      	ldr	r3, [r3, #24]
 800838e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008396:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	011b      	lsls	r3, r3, #4
 800839c:	693a      	ldr	r2, [r7, #16]
 800839e:	4313      	orrs	r3, r2
 80083a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	f023 030a 	bic.w	r3, r3, #10
 80083a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083aa:	697a      	ldr	r2, [r7, #20]
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	693a      	ldr	r2, [r7, #16]
 80083b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	697a      	ldr	r2, [r7, #20]
 80083bc:	621a      	str	r2, [r3, #32]
}
 80083be:	bf00      	nop
 80083c0:	371c      	adds	r7, #28
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083ca:	b480      	push	{r7}
 80083cc:	b087      	sub	sp, #28
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	60f8      	str	r0, [r7, #12]
 80083d2:	60b9      	str	r1, [r7, #8]
 80083d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6a1b      	ldr	r3, [r3, #32]
 80083da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6a1b      	ldr	r3, [r3, #32]
 80083e0:	f023 0210 	bic.w	r2, r3, #16
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	699b      	ldr	r3, [r3, #24]
 80083ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80083f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	031b      	lsls	r3, r3, #12
 80083fa:	693a      	ldr	r2, [r7, #16]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008406:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	011b      	lsls	r3, r3, #4
 800840c:	697a      	ldr	r2, [r7, #20]
 800840e:	4313      	orrs	r3, r2
 8008410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	697a      	ldr	r2, [r7, #20]
 800841c:	621a      	str	r2, [r3, #32]
}
 800841e:	bf00      	nop
 8008420:	371c      	adds	r7, #28
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800842a:	b480      	push	{r7}
 800842c:	b085      	sub	sp, #20
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008440:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008444:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008446:	683a      	ldr	r2, [r7, #0]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	4313      	orrs	r3, r2
 800844c:	f043 0307 	orr.w	r3, r3, #7
 8008450:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	609a      	str	r2, [r3, #8]
}
 8008458:	bf00      	nop
 800845a:	3714      	adds	r7, #20
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008464:	b480      	push	{r7}
 8008466:	b087      	sub	sp, #28
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
 8008470:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800847e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	021a      	lsls	r2, r3, #8
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	431a      	orrs	r2, r3
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	4313      	orrs	r3, r2
 800848c:	697a      	ldr	r2, [r7, #20]
 800848e:	4313      	orrs	r3, r2
 8008490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	609a      	str	r2, [r3, #8]
}
 8008498:	bf00      	nop
 800849a:	371c      	adds	r7, #28
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b087      	sub	sp, #28
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	f003 031f 	and.w	r3, r3, #31
 80084b6:	2201      	movs	r2, #1
 80084b8:	fa02 f303 	lsl.w	r3, r2, r3
 80084bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6a1a      	ldr	r2, [r3, #32]
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	43db      	mvns	r3, r3
 80084c6:	401a      	ands	r2, r3
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6a1a      	ldr	r2, [r3, #32]
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	f003 031f 	and.w	r3, r3, #31
 80084d6:	6879      	ldr	r1, [r7, #4]
 80084d8:	fa01 f303 	lsl.w	r3, r1, r3
 80084dc:	431a      	orrs	r2, r3
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	621a      	str	r2, [r3, #32]
}
 80084e2:	bf00      	nop
 80084e4:	371c      	adds	r7, #28
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
	...

080084f0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a26      	ldr	r2, [pc, #152]	@ (8008594 <TIM_ResetCallback+0xa4>)
 80084fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a25      	ldr	r2, [pc, #148]	@ (8008598 <TIM_ResetCallback+0xa8>)
 8008504:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a24      	ldr	r2, [pc, #144]	@ (800859c <TIM_ResetCallback+0xac>)
 800850c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a23      	ldr	r2, [pc, #140]	@ (80085a0 <TIM_ResetCallback+0xb0>)
 8008514:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a22      	ldr	r2, [pc, #136]	@ (80085a4 <TIM_ResetCallback+0xb4>)
 800851c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4a21      	ldr	r2, [pc, #132]	@ (80085a8 <TIM_ResetCallback+0xb8>)
 8008524:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a20      	ldr	r2, [pc, #128]	@ (80085ac <TIM_ResetCallback+0xbc>)
 800852c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4a1f      	ldr	r2, [pc, #124]	@ (80085b0 <TIM_ResetCallback+0xc0>)
 8008534:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a1e      	ldr	r2, [pc, #120]	@ (80085b4 <TIM_ResetCallback+0xc4>)
 800853c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a1d      	ldr	r2, [pc, #116]	@ (80085b8 <TIM_ResetCallback+0xc8>)
 8008544:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a1c      	ldr	r2, [pc, #112]	@ (80085bc <TIM_ResetCallback+0xcc>)
 800854c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a1b      	ldr	r2, [pc, #108]	@ (80085c0 <TIM_ResetCallback+0xd0>)
 8008554:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a1a      	ldr	r2, [pc, #104]	@ (80085c4 <TIM_ResetCallback+0xd4>)
 800855c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a19      	ldr	r2, [pc, #100]	@ (80085c8 <TIM_ResetCallback+0xd8>)
 8008564:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a18      	ldr	r2, [pc, #96]	@ (80085cc <TIM_ResetCallback+0xdc>)
 800856c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a17      	ldr	r2, [pc, #92]	@ (80085d0 <TIM_ResetCallback+0xe0>)
 8008574:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a16      	ldr	r2, [pc, #88]	@ (80085d4 <TIM_ResetCallback+0xe4>)
 800857c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a15      	ldr	r2, [pc, #84]	@ (80085d8 <TIM_ResetCallback+0xe8>)
 8008584:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8008588:	bf00      	nop
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr
 8008594:	08001a61 	.word	0x08001a61
 8008598:	0800783d 	.word	0x0800783d
 800859c:	080078b5 	.word	0x080078b5
 80085a0:	080078c9 	.word	0x080078c9
 80085a4:	08007865 	.word	0x08007865
 80085a8:	08007879 	.word	0x08007879
 80085ac:	08007851 	.word	0x08007851
 80085b0:	0800788d 	.word	0x0800788d
 80085b4:	080078a1 	.word	0x080078a1
 80085b8:	080078dd 	.word	0x080078dd
 80085bc:	08008831 	.word	0x08008831
 80085c0:	08008845 	.word	0x08008845
 80085c4:	08008859 	.word	0x08008859
 80085c8:	0800886d 	.word	0x0800886d
 80085cc:	08008881 	.word	0x08008881
 80085d0:	08008895 	.word	0x08008895
 80085d4:	080088a9 	.word	0x080088a9
 80085d8:	080088bd 	.word	0x080088bd

080085dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085dc:	b480      	push	{r7}
 80085de:	b085      	sub	sp, #20
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d101      	bne.n	80085f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085f0:	2302      	movs	r3, #2
 80085f2:	e074      	b.n	80086de <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2202      	movs	r2, #2
 8008600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a34      	ldr	r2, [pc, #208]	@ (80086ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d009      	beq.n	8008632 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a33      	ldr	r2, [pc, #204]	@ (80086f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d004      	beq.n	8008632 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a31      	ldr	r2, [pc, #196]	@ (80086f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d108      	bne.n	8008644 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008638:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	4313      	orrs	r3, r2
 8008642:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800864a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800864e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	4313      	orrs	r3, r2
 8008658:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a21      	ldr	r2, [pc, #132]	@ (80086ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d022      	beq.n	80086b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008674:	d01d      	beq.n	80086b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a1f      	ldr	r2, [pc, #124]	@ (80086f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d018      	beq.n	80086b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a1d      	ldr	r2, [pc, #116]	@ (80086fc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d013      	beq.n	80086b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a1c      	ldr	r2, [pc, #112]	@ (8008700 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d00e      	beq.n	80086b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a15      	ldr	r2, [pc, #84]	@ (80086f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d009      	beq.n	80086b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a18      	ldr	r2, [pc, #96]	@ (8008704 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d004      	beq.n	80086b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a11      	ldr	r2, [pc, #68]	@ (80086f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d10c      	bne.n	80086cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	68ba      	ldr	r2, [r7, #8]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	68ba      	ldr	r2, [r7, #8]
 80086ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3714      	adds	r7, #20
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	40012c00 	.word	0x40012c00
 80086f0:	40013400 	.word	0x40013400
 80086f4:	40015000 	.word	0x40015000
 80086f8:	40000400 	.word	0x40000400
 80086fc:	40000800 	.word	0x40000800
 8008700:	40000c00 	.word	0x40000c00
 8008704:	40014000 	.word	0x40014000

08008708 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008712:	2300      	movs	r3, #0
 8008714:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800871c:	2b01      	cmp	r3, #1
 800871e:	d101      	bne.n	8008724 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008720:	2302      	movs	r3, #2
 8008722:	e078      	b.n	8008816 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	4313      	orrs	r3, r2
 8008738:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	4313      	orrs	r3, r2
 8008746:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	4313      	orrs	r3, r2
 8008754:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4313      	orrs	r3, r2
 8008762:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	4313      	orrs	r3, r2
 8008770:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	695b      	ldr	r3, [r3, #20]
 800877c:	4313      	orrs	r3, r2
 800877e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800878a:	4313      	orrs	r3, r2
 800878c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	699b      	ldr	r3, [r3, #24]
 8008798:	041b      	lsls	r3, r3, #16
 800879a:	4313      	orrs	r3, r2
 800879c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	69db      	ldr	r3, [r3, #28]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a1c      	ldr	r2, [pc, #112]	@ (8008824 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d009      	beq.n	80087ca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a1b      	ldr	r2, [pc, #108]	@ (8008828 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d004      	beq.n	80087ca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a19      	ldr	r2, [pc, #100]	@ (800882c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d11c      	bne.n	8008804 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087d4:	051b      	lsls	r3, r3, #20
 80087d6:	4313      	orrs	r3, r2
 80087d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	6a1b      	ldr	r3, [r3, #32]
 80087e4:	4313      	orrs	r3, r2
 80087e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f2:	4313      	orrs	r3, r2
 80087f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008800:	4313      	orrs	r3, r2
 8008802:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3714      	adds	r7, #20
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	40012c00 	.word	0x40012c00
 8008828:	40013400 	.word	0x40013400
 800882c:	40015000 	.word	0x40015000

08008830 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008838:	bf00      	nop
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800884c:	bf00      	nop
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008860:	bf00      	nop
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008874:	bf00      	nop
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008888:	bf00      	nop
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80088b0:	bf00      	nop
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80088c4:	bf00      	nop
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d101      	bne.n	80088e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	e050      	b.n	8008984 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d114      	bne.n	8008916 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 fd45 	bl	8009384 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008900:	2b00      	cmp	r3, #0
 8008902:	d103      	bne.n	800890c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a21      	ldr	r2, [pc, #132]	@ (800898c <HAL_UART_Init+0xbc>)
 8008908:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2224      	movs	r2, #36	@ 0x24
 800891a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f022 0201 	bic.w	r2, r2, #1
 800892c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008932:	2b00      	cmp	r3, #0
 8008934:	d002      	beq.n	800893c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f001 f872 	bl	8009a20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 fd73 	bl	8009428 <UART_SetConfig>
 8008942:	4603      	mov	r3, r0
 8008944:	2b01      	cmp	r3, #1
 8008946:	d101      	bne.n	800894c <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	e01b      	b.n	8008984 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	685a      	ldr	r2, [r3, #4]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800895a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	689a      	ldr	r2, [r3, #8]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800896a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f042 0201 	orr.w	r2, r2, #1
 800897a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f001 f8f1 	bl	8009b64 <UART_CheckIdleState>
 8008982:	4603      	mov	r3, r0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3708      	adds	r7, #8
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	08002a2d 	.word	0x08002a2d

08008990 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8008990:	b480      	push	{r7}
 8008992:	b087      	sub	sp, #28
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	460b      	mov	r3, r1
 800899a:	607a      	str	r2, [r7, #4]
 800899c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800899e:	2300      	movs	r3, #0
 80089a0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d109      	bne.n	80089bc <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e09c      	b.n	8008af6 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089c2:	2b20      	cmp	r3, #32
 80089c4:	d16c      	bne.n	8008aa0 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 80089c6:	7afb      	ldrb	r3, [r7, #11]
 80089c8:	2b0c      	cmp	r3, #12
 80089ca:	d85e      	bhi.n	8008a8a <HAL_UART_RegisterCallback+0xfa>
 80089cc:	a201      	add	r2, pc, #4	@ (adr r2, 80089d4 <HAL_UART_RegisterCallback+0x44>)
 80089ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d2:	bf00      	nop
 80089d4:	08008a09 	.word	0x08008a09
 80089d8:	08008a13 	.word	0x08008a13
 80089dc:	08008a1d 	.word	0x08008a1d
 80089e0:	08008a27 	.word	0x08008a27
 80089e4:	08008a31 	.word	0x08008a31
 80089e8:	08008a3b 	.word	0x08008a3b
 80089ec:	08008a45 	.word	0x08008a45
 80089f0:	08008a4f 	.word	0x08008a4f
 80089f4:	08008a59 	.word	0x08008a59
 80089f8:	08008a63 	.word	0x08008a63
 80089fc:	08008a6d 	.word	0x08008a6d
 8008a00:	08008a77 	.word	0x08008a77
 8008a04:	08008a81 	.word	0x08008a81
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008a10:	e070      	b.n	8008af4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008a1a:	e06b      	b.n	8008af4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008a24:	e066      	b.n	8008af4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008a2e:	e061      	b.n	8008af4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008a38:	e05c      	b.n	8008af4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008a42:	e057      	b.n	8008af4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008a4c:	e052      	b.n	8008af4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008a56:	e04d      	b.n	8008af4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008a60:	e048      	b.n	8008af4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008a6a:	e043      	b.n	8008af4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008a74:	e03e      	b.n	8008af4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008a7e:	e039      	b.n	8008af4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008a88:	e034      	b.n	8008af4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a90:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	75fb      	strb	r3, [r7, #23]
        break;
 8008a9e:	e029      	b.n	8008af4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d11a      	bne.n	8008ae0 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8008aaa:	7afb      	ldrb	r3, [r7, #11]
 8008aac:	2b0b      	cmp	r3, #11
 8008aae:	d002      	beq.n	8008ab6 <HAL_UART_RegisterCallback+0x126>
 8008ab0:	2b0c      	cmp	r3, #12
 8008ab2:	d005      	beq.n	8008ac0 <HAL_UART_RegisterCallback+0x130>
 8008ab4:	e009      	b.n	8008aca <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008abe:	e019      	b.n	8008af4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008ac8:	e014      	b.n	8008af4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ad0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	75fb      	strb	r3, [r7, #23]
        break;
 8008ade:	e009      	b.n	8008af4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ae6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	371c      	adds	r7, #28
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr
 8008b02:	bf00      	nop

08008b04 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b08a      	sub	sp, #40	@ 0x28
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b18:	2b20      	cmp	r3, #32
 8008b1a:	d137      	bne.n	8008b8c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d002      	beq.n	8008b28 <HAL_UART_Receive_DMA+0x24>
 8008b22:	88fb      	ldrh	r3, [r7, #6]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d101      	bne.n	8008b2c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e030      	b.n	8008b8e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a18      	ldr	r2, [pc, #96]	@ (8008b98 <HAL_UART_Receive_DMA+0x94>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d01f      	beq.n	8008b7c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d018      	beq.n	8008b7c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	e853 3f00 	ldrex	r3, [r3]
 8008b56:	613b      	str	r3, [r7, #16]
   return(result);
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	461a      	mov	r2, r3
 8008b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b68:	623b      	str	r3, [r7, #32]
 8008b6a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6c:	69f9      	ldr	r1, [r7, #28]
 8008b6e:	6a3a      	ldr	r2, [r7, #32]
 8008b70:	e841 2300 	strex	r3, r2, [r1]
 8008b74:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d1e6      	bne.n	8008b4a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008b7c:	88fb      	ldrh	r3, [r7, #6]
 8008b7e:	461a      	mov	r2, r3
 8008b80:	68b9      	ldr	r1, [r7, #8]
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f001 f906 	bl	8009d94 <UART_Start_Receive_DMA>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	e000      	b.n	8008b8e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008b8c:	2302      	movs	r3, #2
  }
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3728      	adds	r7, #40	@ 0x28
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	40008000 	.word	0x40008000

08008b9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b0ba      	sub	sp, #232	@ 0xe8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	69db      	ldr	r3, [r3, #28]
 8008baa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008bc2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008bc6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008bca:	4013      	ands	r3, r2
 8008bcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008bd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d11b      	bne.n	8008c10 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bdc:	f003 0320 	and.w	r3, r3, #32
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d015      	beq.n	8008c10 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008be8:	f003 0320 	and.w	r3, r3, #32
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d105      	bne.n	8008bfc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008bf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d009      	beq.n	8008c10 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f000 82f3 	beq.w	80091ec <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	4798      	blx	r3
      }
      return;
 8008c0e:	e2ed      	b.n	80091ec <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008c10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f000 8129 	beq.w	8008e6c <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008c1a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008c1e:	4b90      	ldr	r3, [pc, #576]	@ (8008e60 <HAL_UART_IRQHandler+0x2c4>)
 8008c20:	4013      	ands	r3, r2
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d106      	bne.n	8008c34 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008c26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008c2a:	4b8e      	ldr	r3, [pc, #568]	@ (8008e64 <HAL_UART_IRQHandler+0x2c8>)
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f000 811c 	beq.w	8008e6c <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c38:	f003 0301 	and.w	r3, r3, #1
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d011      	beq.n	8008c64 <HAL_UART_IRQHandler+0xc8>
 8008c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d00b      	beq.n	8008c64 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2201      	movs	r2, #1
 8008c52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c5a:	f043 0201 	orr.w	r2, r3, #1
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c68:	f003 0302 	and.w	r3, r3, #2
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d011      	beq.n	8008c94 <HAL_UART_IRQHandler+0xf8>
 8008c70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c74:	f003 0301 	and.w	r3, r3, #1
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00b      	beq.n	8008c94 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2202      	movs	r2, #2
 8008c82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c8a:	f043 0204 	orr.w	r2, r3, #4
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c98:	f003 0304 	and.w	r3, r3, #4
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d011      	beq.n	8008cc4 <HAL_UART_IRQHandler+0x128>
 8008ca0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ca4:	f003 0301 	and.w	r3, r3, #1
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00b      	beq.n	8008cc4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	2204      	movs	r2, #4
 8008cb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cba:	f043 0202 	orr.w	r2, r3, #2
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cc8:	f003 0308 	and.w	r3, r3, #8
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d017      	beq.n	8008d00 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cd4:	f003 0320 	and.w	r3, r3, #32
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d105      	bne.n	8008ce8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008cdc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008ce0:	4b5f      	ldr	r3, [pc, #380]	@ (8008e60 <HAL_UART_IRQHandler+0x2c4>)
 8008ce2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d00b      	beq.n	8008d00 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2208      	movs	r2, #8
 8008cee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cf6:	f043 0208 	orr.w	r2, r3, #8
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d012      	beq.n	8008d32 <HAL_UART_IRQHandler+0x196>
 8008d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d10:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00c      	beq.n	8008d32 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d28:	f043 0220 	orr.w	r2, r3, #32
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f000 8259 	beq.w	80091f0 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d42:	f003 0320 	and.w	r3, r3, #32
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d013      	beq.n	8008d72 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d4e:	f003 0320 	and.w	r3, r3, #32
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d105      	bne.n	8008d62 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d007      	beq.n	8008d72 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d003      	beq.n	8008d72 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d78:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d86:	2b40      	cmp	r3, #64	@ 0x40
 8008d88:	d005      	beq.n	8008d96 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008d8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008d8e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d058      	beq.n	8008e48 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f001 f8e3 	bl	8009f62 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008da6:	2b40      	cmp	r3, #64	@ 0x40
 8008da8:	d148      	bne.n	8008e3c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	3308      	adds	r3, #8
 8008db0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008db8:	e853 3f00 	ldrex	r3, [r3]
 8008dbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008dc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008dc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008dc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3308      	adds	r3, #8
 8008dd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008dd6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008dda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008de2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008de6:	e841 2300 	strex	r3, r2, [r1]
 8008dea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008dee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1d9      	bne.n	8008daa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d017      	beq.n	8008e30 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e06:	4a18      	ldr	r2, [pc, #96]	@ (8008e68 <HAL_UART_IRQHandler+0x2cc>)
 8008e08:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7fc f8bb 	bl	8004f8c <HAL_DMA_Abort_IT>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d01f      	beq.n	8008e5c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008e2a:	4610      	mov	r0, r2
 8008e2c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e2e:	e015      	b.n	8008e5c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e3a:	e00f      	b.n	8008e5c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e46:	e009      	b.n	8008e5c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008e5a:	e1c9      	b.n	80091f0 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e5c:	bf00      	nop
    return;
 8008e5e:	e1c7      	b.n	80091f0 <HAL_UART_IRQHandler+0x654>
 8008e60:	10000001 	.word	0x10000001
 8008e64:	04000120 	.word	0x04000120
 8008e68:	0800a22d 	.word	0x0800a22d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	f040 8157 	bne.w	8009124 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e7a:	f003 0310 	and.w	r3, r3, #16
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	f000 8150 	beq.w	8009124 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e88:	f003 0310 	and.w	r3, r3, #16
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f000 8149 	beq.w	8009124 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2210      	movs	r2, #16
 8008e98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ea4:	2b40      	cmp	r3, #64	@ 0x40
 8008ea6:	f040 80bd 	bne.w	8009024 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008eb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f000 8199 	beq.w	80091f4 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008ec8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	f080 8191 	bcs.w	80091f4 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008ed8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 0320 	and.w	r3, r3, #32
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f040 8087 	bne.w	8008ffe <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008efc:	e853 3f00 	ldrex	r3, [r3]
 8008f00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008f04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008f08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	461a      	mov	r2, r3
 8008f16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008f1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008f1e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f22:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008f26:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008f2a:	e841 2300 	strex	r3, r2, [r1]
 8008f2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008f32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d1da      	bne.n	8008ef0 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	3308      	adds	r3, #8
 8008f40:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f44:	e853 3f00 	ldrex	r3, [r3]
 8008f48:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008f4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008f4c:	f023 0301 	bic.w	r3, r3, #1
 8008f50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	3308      	adds	r3, #8
 8008f5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008f5e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008f62:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f64:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008f66:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008f6a:	e841 2300 	strex	r3, r2, [r1]
 8008f6e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008f70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d1e1      	bne.n	8008f3a <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	3308      	adds	r3, #8
 8008f7c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f80:	e853 3f00 	ldrex	r3, [r3]
 8008f84:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008f86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	3308      	adds	r3, #8
 8008f96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008f9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008f9c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008fa0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008fa2:	e841 2300 	strex	r3, r2, [r1]
 8008fa6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008fa8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1e3      	bne.n	8008f76 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2220      	movs	r2, #32
 8008fb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fc4:	e853 3f00 	ldrex	r3, [r3]
 8008fc8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008fca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fcc:	f023 0310 	bic.w	r3, r3, #16
 8008fd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	461a      	mov	r2, r3
 8008fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fde:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008fe0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008fe4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008fe6:	e841 2300 	strex	r3, r2, [r1]
 8008fea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008fec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d1e4      	bne.n	8008fbc <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7fb ff6e 	bl	8004eda <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2202      	movs	r2, #2
 8009002:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8009016:	b292      	uxth	r2, r2
 8009018:	1a8a      	subs	r2, r1, r2
 800901a:	b292      	uxth	r2, r2
 800901c:	4611      	mov	r1, r2
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009022:	e0e7      	b.n	80091f4 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009030:	b29b      	uxth	r3, r3
 8009032:	1ad3      	subs	r3, r2, r3
 8009034:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800903e:	b29b      	uxth	r3, r3
 8009040:	2b00      	cmp	r3, #0
 8009042:	f000 80d9 	beq.w	80091f8 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8009046:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800904a:	2b00      	cmp	r3, #0
 800904c:	f000 80d4 	beq.w	80091f8 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009058:	e853 3f00 	ldrex	r3, [r3]
 800905c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800905e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009060:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009064:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	461a      	mov	r2, r3
 800906e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009072:	647b      	str	r3, [r7, #68]	@ 0x44
 8009074:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009076:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009078:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800907a:	e841 2300 	strex	r3, r2, [r1]
 800907e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1e4      	bne.n	8009050 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3308      	adds	r3, #8
 800908c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009090:	e853 3f00 	ldrex	r3, [r3]
 8009094:	623b      	str	r3, [r7, #32]
   return(result);
 8009096:	6a3b      	ldr	r3, [r7, #32]
 8009098:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800909c:	f023 0301 	bic.w	r3, r3, #1
 80090a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	3308      	adds	r3, #8
 80090aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80090ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80090b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80090b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090b6:	e841 2300 	strex	r3, r2, [r1]
 80090ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80090bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1e1      	bne.n	8009086 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2220      	movs	r2, #32
 80090c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	e853 3f00 	ldrex	r3, [r3]
 80090e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f023 0310 	bic.w	r3, r3, #16
 80090ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	461a      	mov	r2, r3
 80090f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80090f8:	61fb      	str	r3, [r7, #28]
 80090fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fc:	69b9      	ldr	r1, [r7, #24]
 80090fe:	69fa      	ldr	r2, [r7, #28]
 8009100:	e841 2300 	strex	r3, r2, [r1]
 8009104:	617b      	str	r3, [r7, #20]
   return(result);
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d1e4      	bne.n	80090d6 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2202      	movs	r2, #2
 8009110:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009118:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800911c:	4611      	mov	r1, r2
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009122:	e069      	b.n	80091f8 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009128:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800912c:	2b00      	cmp	r3, #0
 800912e:	d010      	beq.n	8009152 <HAL_UART_IRQHandler+0x5b6>
 8009130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009134:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009138:	2b00      	cmp	r3, #0
 800913a:	d00a      	beq.n	8009152 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009144:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009150:	e055      	b.n	80091fe <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800915a:	2b00      	cmp	r3, #0
 800915c:	d014      	beq.n	8009188 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800915e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009166:	2b00      	cmp	r3, #0
 8009168:	d105      	bne.n	8009176 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800916a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800916e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009172:	2b00      	cmp	r3, #0
 8009174:	d008      	beq.n	8009188 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800917a:	2b00      	cmp	r3, #0
 800917c:	d03e      	beq.n	80091fc <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	4798      	blx	r3
    }
    return;
 8009186:	e039      	b.n	80091fc <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800918c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009190:	2b00      	cmp	r3, #0
 8009192:	d009      	beq.n	80091a8 <HAL_UART_IRQHandler+0x60c>
 8009194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800919c:	2b00      	cmp	r3, #0
 800919e:	d003      	beq.n	80091a8 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f001 f85b 	bl	800a25c <UART_EndTransmit_IT>
    return;
 80091a6:	e02a      	b.n	80091fe <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80091a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d00b      	beq.n	80091cc <HAL_UART_IRQHandler+0x630>
 80091b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091b8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d005      	beq.n	80091cc <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091ca:	e018      	b.n	80091fe <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80091cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d012      	beq.n	80091fe <HAL_UART_IRQHandler+0x662>
 80091d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	da0e      	bge.n	80091fe <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091ea:	e008      	b.n	80091fe <HAL_UART_IRQHandler+0x662>
      return;
 80091ec:	bf00      	nop
 80091ee:	e006      	b.n	80091fe <HAL_UART_IRQHandler+0x662>
    return;
 80091f0:	bf00      	nop
 80091f2:	e004      	b.n	80091fe <HAL_UART_IRQHandler+0x662>
      return;
 80091f4:	bf00      	nop
 80091f6:	e002      	b.n	80091fe <HAL_UART_IRQHandler+0x662>
      return;
 80091f8:	bf00      	nop
 80091fa:	e000      	b.n	80091fe <HAL_UART_IRQHandler+0x662>
    return;
 80091fc:	bf00      	nop
  }
}
 80091fe:	37e8      	adds	r7, #232	@ 0xe8
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800920c:	bf00      	nop
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009220:	bf00      	nop
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009234:	bf00      	nop
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009248:	bf00      	nop
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800925c:	bf00      	nop
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009270:	bf00      	nop
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009284:	bf00      	nop
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009298:	bf00      	nop
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	460b      	mov	r3, r1
 80092ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80092b0:	bf00      	nop
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a09      	ldr	r2, [pc, #36]	@ (80092f0 <HAL_UART_ReceiverTimeout_Config+0x34>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d009      	beq.n	80092e4 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	695b      	ldr	r3, [r3, #20]
 80092d6:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	683a      	ldr	r2, [r7, #0]
 80092e0:	430a      	orrs	r2, r1
 80092e2:	615a      	str	r2, [r3, #20]
  }
}
 80092e4:	bf00      	nop
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr
 80092f0:	40008000 	.word	0x40008000

080092f4 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a18      	ldr	r2, [pc, #96]	@ (8009364 <HAL_UART_EnableReceiverTimeout+0x70>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d027      	beq.n	8009356 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800930c:	2b20      	cmp	r3, #32
 800930e:	d120      	bne.n	8009352 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009316:	2b01      	cmp	r3, #1
 8009318:	d101      	bne.n	800931e <HAL_UART_EnableReceiverTimeout+0x2a>
 800931a:	2302      	movs	r3, #2
 800931c:	e01c      	b.n	8009358 <HAL_UART_EnableReceiverTimeout+0x64>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2201      	movs	r2, #1
 8009322:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2224      	movs	r2, #36	@ 0x24
 800932a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	685a      	ldr	r2, [r3, #4]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800933c:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2220      	movs	r2, #32
 8009342:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800934e:	2300      	movs	r3, #0
 8009350:	e002      	b.n	8009358 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8009352:	2302      	movs	r3, #2
 8009354:	e000      	b.n	8009358 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8009356:	2301      	movs	r3, #1
  }
}
 8009358:	4618      	mov	r0, r3
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr
 8009364:	40008000 	.word	0x40008000

08009368 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8009376:	4618      	mov	r0, r3
 8009378:	370c      	adds	r7, #12
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr
	...

08009384 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a1a      	ldr	r2, [pc, #104]	@ (80093f8 <UART_InitCallbacksToDefault+0x74>)
 8009390:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4a19      	ldr	r2, [pc, #100]	@ (80093fc <UART_InitCallbacksToDefault+0x78>)
 8009398:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	4a18      	ldr	r2, [pc, #96]	@ (8009400 <UART_InitCallbacksToDefault+0x7c>)
 80093a0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	4a17      	ldr	r2, [pc, #92]	@ (8009404 <UART_InitCallbacksToDefault+0x80>)
 80093a8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	4a16      	ldr	r2, [pc, #88]	@ (8009408 <UART_InitCallbacksToDefault+0x84>)
 80093b0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4a15      	ldr	r2, [pc, #84]	@ (800940c <UART_InitCallbacksToDefault+0x88>)
 80093b8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4a14      	ldr	r2, [pc, #80]	@ (8009410 <UART_InitCallbacksToDefault+0x8c>)
 80093c0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	4a13      	ldr	r2, [pc, #76]	@ (8009414 <UART_InitCallbacksToDefault+0x90>)
 80093c8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4a12      	ldr	r2, [pc, #72]	@ (8009418 <UART_InitCallbacksToDefault+0x94>)
 80093d0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4a11      	ldr	r2, [pc, #68]	@ (800941c <UART_InitCallbacksToDefault+0x98>)
 80093d8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a10      	ldr	r2, [pc, #64]	@ (8009420 <UART_InitCallbacksToDefault+0x9c>)
 80093e0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a0f      	ldr	r2, [pc, #60]	@ (8009424 <UART_InitCallbacksToDefault+0xa0>)
 80093e8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 80093ec:	bf00      	nop
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	08009219 	.word	0x08009219
 80093fc:	08009205 	.word	0x08009205
 8009400:	08009241 	.word	0x08009241
 8009404:	0800922d 	.word	0x0800922d
 8009408:	08009255 	.word	0x08009255
 800940c:	08009269 	.word	0x08009269
 8009410:	0800927d 	.word	0x0800927d
 8009414:	08009291 	.word	0x08009291
 8009418:	0800a2b7 	.word	0x0800a2b7
 800941c:	0800a2cb 	.word	0x0800a2cb
 8009420:	0800a2df 	.word	0x0800a2df
 8009424:	080092a5 	.word	0x080092a5

08009428 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800942c:	b08c      	sub	sp, #48	@ 0x30
 800942e:	af00      	add	r7, sp, #0
 8009430:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009432:	2300      	movs	r3, #0
 8009434:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	689a      	ldr	r2, [r3, #8]
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	431a      	orrs	r2, r3
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	695b      	ldr	r3, [r3, #20]
 8009446:	431a      	orrs	r2, r3
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	69db      	ldr	r3, [r3, #28]
 800944c:	4313      	orrs	r3, r2
 800944e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	4baa      	ldr	r3, [pc, #680]	@ (8009700 <UART_SetConfig+0x2d8>)
 8009458:	4013      	ands	r3, r2
 800945a:	697a      	ldr	r2, [r7, #20]
 800945c:	6812      	ldr	r2, [r2, #0]
 800945e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009460:	430b      	orrs	r3, r1
 8009462:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	68da      	ldr	r2, [r3, #12]
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	430a      	orrs	r2, r1
 8009478:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	699b      	ldr	r3, [r3, #24]
 800947e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a9f      	ldr	r2, [pc, #636]	@ (8009704 <UART_SetConfig+0x2dc>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d004      	beq.n	8009494 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	6a1b      	ldr	r3, [r3, #32]
 800948e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009490:	4313      	orrs	r3, r2
 8009492:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800949e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80094a2:	697a      	ldr	r2, [r7, #20]
 80094a4:	6812      	ldr	r2, [r2, #0]
 80094a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094a8:	430b      	orrs	r3, r1
 80094aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b2:	f023 010f 	bic.w	r1, r3, #15
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	430a      	orrs	r2, r1
 80094c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a90      	ldr	r2, [pc, #576]	@ (8009708 <UART_SetConfig+0x2e0>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d125      	bne.n	8009518 <UART_SetConfig+0xf0>
 80094cc:	4b8f      	ldr	r3, [pc, #572]	@ (800970c <UART_SetConfig+0x2e4>)
 80094ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094d2:	f003 0303 	and.w	r3, r3, #3
 80094d6:	2b03      	cmp	r3, #3
 80094d8:	d81a      	bhi.n	8009510 <UART_SetConfig+0xe8>
 80094da:	a201      	add	r2, pc, #4	@ (adr r2, 80094e0 <UART_SetConfig+0xb8>)
 80094dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e0:	080094f1 	.word	0x080094f1
 80094e4:	08009501 	.word	0x08009501
 80094e8:	080094f9 	.word	0x080094f9
 80094ec:	08009509 	.word	0x08009509
 80094f0:	2301      	movs	r3, #1
 80094f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094f6:	e116      	b.n	8009726 <UART_SetConfig+0x2fe>
 80094f8:	2302      	movs	r3, #2
 80094fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094fe:	e112      	b.n	8009726 <UART_SetConfig+0x2fe>
 8009500:	2304      	movs	r3, #4
 8009502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009506:	e10e      	b.n	8009726 <UART_SetConfig+0x2fe>
 8009508:	2308      	movs	r3, #8
 800950a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800950e:	e10a      	b.n	8009726 <UART_SetConfig+0x2fe>
 8009510:	2310      	movs	r3, #16
 8009512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009516:	e106      	b.n	8009726 <UART_SetConfig+0x2fe>
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a7c      	ldr	r2, [pc, #496]	@ (8009710 <UART_SetConfig+0x2e8>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d138      	bne.n	8009594 <UART_SetConfig+0x16c>
 8009522:	4b7a      	ldr	r3, [pc, #488]	@ (800970c <UART_SetConfig+0x2e4>)
 8009524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009528:	f003 030c 	and.w	r3, r3, #12
 800952c:	2b0c      	cmp	r3, #12
 800952e:	d82d      	bhi.n	800958c <UART_SetConfig+0x164>
 8009530:	a201      	add	r2, pc, #4	@ (adr r2, 8009538 <UART_SetConfig+0x110>)
 8009532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009536:	bf00      	nop
 8009538:	0800956d 	.word	0x0800956d
 800953c:	0800958d 	.word	0x0800958d
 8009540:	0800958d 	.word	0x0800958d
 8009544:	0800958d 	.word	0x0800958d
 8009548:	0800957d 	.word	0x0800957d
 800954c:	0800958d 	.word	0x0800958d
 8009550:	0800958d 	.word	0x0800958d
 8009554:	0800958d 	.word	0x0800958d
 8009558:	08009575 	.word	0x08009575
 800955c:	0800958d 	.word	0x0800958d
 8009560:	0800958d 	.word	0x0800958d
 8009564:	0800958d 	.word	0x0800958d
 8009568:	08009585 	.word	0x08009585
 800956c:	2300      	movs	r3, #0
 800956e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009572:	e0d8      	b.n	8009726 <UART_SetConfig+0x2fe>
 8009574:	2302      	movs	r3, #2
 8009576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800957a:	e0d4      	b.n	8009726 <UART_SetConfig+0x2fe>
 800957c:	2304      	movs	r3, #4
 800957e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009582:	e0d0      	b.n	8009726 <UART_SetConfig+0x2fe>
 8009584:	2308      	movs	r3, #8
 8009586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800958a:	e0cc      	b.n	8009726 <UART_SetConfig+0x2fe>
 800958c:	2310      	movs	r3, #16
 800958e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009592:	e0c8      	b.n	8009726 <UART_SetConfig+0x2fe>
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a5e      	ldr	r2, [pc, #376]	@ (8009714 <UART_SetConfig+0x2ec>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d125      	bne.n	80095ea <UART_SetConfig+0x1c2>
 800959e:	4b5b      	ldr	r3, [pc, #364]	@ (800970c <UART_SetConfig+0x2e4>)
 80095a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80095a8:	2b30      	cmp	r3, #48	@ 0x30
 80095aa:	d016      	beq.n	80095da <UART_SetConfig+0x1b2>
 80095ac:	2b30      	cmp	r3, #48	@ 0x30
 80095ae:	d818      	bhi.n	80095e2 <UART_SetConfig+0x1ba>
 80095b0:	2b20      	cmp	r3, #32
 80095b2:	d00a      	beq.n	80095ca <UART_SetConfig+0x1a2>
 80095b4:	2b20      	cmp	r3, #32
 80095b6:	d814      	bhi.n	80095e2 <UART_SetConfig+0x1ba>
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d002      	beq.n	80095c2 <UART_SetConfig+0x19a>
 80095bc:	2b10      	cmp	r3, #16
 80095be:	d008      	beq.n	80095d2 <UART_SetConfig+0x1aa>
 80095c0:	e00f      	b.n	80095e2 <UART_SetConfig+0x1ba>
 80095c2:	2300      	movs	r3, #0
 80095c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095c8:	e0ad      	b.n	8009726 <UART_SetConfig+0x2fe>
 80095ca:	2302      	movs	r3, #2
 80095cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095d0:	e0a9      	b.n	8009726 <UART_SetConfig+0x2fe>
 80095d2:	2304      	movs	r3, #4
 80095d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095d8:	e0a5      	b.n	8009726 <UART_SetConfig+0x2fe>
 80095da:	2308      	movs	r3, #8
 80095dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095e0:	e0a1      	b.n	8009726 <UART_SetConfig+0x2fe>
 80095e2:	2310      	movs	r3, #16
 80095e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80095e8:	e09d      	b.n	8009726 <UART_SetConfig+0x2fe>
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a4a      	ldr	r2, [pc, #296]	@ (8009718 <UART_SetConfig+0x2f0>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d125      	bne.n	8009640 <UART_SetConfig+0x218>
 80095f4:	4b45      	ldr	r3, [pc, #276]	@ (800970c <UART_SetConfig+0x2e4>)
 80095f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80095fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8009600:	d016      	beq.n	8009630 <UART_SetConfig+0x208>
 8009602:	2bc0      	cmp	r3, #192	@ 0xc0
 8009604:	d818      	bhi.n	8009638 <UART_SetConfig+0x210>
 8009606:	2b80      	cmp	r3, #128	@ 0x80
 8009608:	d00a      	beq.n	8009620 <UART_SetConfig+0x1f8>
 800960a:	2b80      	cmp	r3, #128	@ 0x80
 800960c:	d814      	bhi.n	8009638 <UART_SetConfig+0x210>
 800960e:	2b00      	cmp	r3, #0
 8009610:	d002      	beq.n	8009618 <UART_SetConfig+0x1f0>
 8009612:	2b40      	cmp	r3, #64	@ 0x40
 8009614:	d008      	beq.n	8009628 <UART_SetConfig+0x200>
 8009616:	e00f      	b.n	8009638 <UART_SetConfig+0x210>
 8009618:	2300      	movs	r3, #0
 800961a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800961e:	e082      	b.n	8009726 <UART_SetConfig+0x2fe>
 8009620:	2302      	movs	r3, #2
 8009622:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009626:	e07e      	b.n	8009726 <UART_SetConfig+0x2fe>
 8009628:	2304      	movs	r3, #4
 800962a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800962e:	e07a      	b.n	8009726 <UART_SetConfig+0x2fe>
 8009630:	2308      	movs	r3, #8
 8009632:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009636:	e076      	b.n	8009726 <UART_SetConfig+0x2fe>
 8009638:	2310      	movs	r3, #16
 800963a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800963e:	e072      	b.n	8009726 <UART_SetConfig+0x2fe>
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a35      	ldr	r2, [pc, #212]	@ (800971c <UART_SetConfig+0x2f4>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d12a      	bne.n	80096a0 <UART_SetConfig+0x278>
 800964a:	4b30      	ldr	r3, [pc, #192]	@ (800970c <UART_SetConfig+0x2e4>)
 800964c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009650:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009654:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009658:	d01a      	beq.n	8009690 <UART_SetConfig+0x268>
 800965a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800965e:	d81b      	bhi.n	8009698 <UART_SetConfig+0x270>
 8009660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009664:	d00c      	beq.n	8009680 <UART_SetConfig+0x258>
 8009666:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800966a:	d815      	bhi.n	8009698 <UART_SetConfig+0x270>
 800966c:	2b00      	cmp	r3, #0
 800966e:	d003      	beq.n	8009678 <UART_SetConfig+0x250>
 8009670:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009674:	d008      	beq.n	8009688 <UART_SetConfig+0x260>
 8009676:	e00f      	b.n	8009698 <UART_SetConfig+0x270>
 8009678:	2300      	movs	r3, #0
 800967a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800967e:	e052      	b.n	8009726 <UART_SetConfig+0x2fe>
 8009680:	2302      	movs	r3, #2
 8009682:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009686:	e04e      	b.n	8009726 <UART_SetConfig+0x2fe>
 8009688:	2304      	movs	r3, #4
 800968a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800968e:	e04a      	b.n	8009726 <UART_SetConfig+0x2fe>
 8009690:	2308      	movs	r3, #8
 8009692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009696:	e046      	b.n	8009726 <UART_SetConfig+0x2fe>
 8009698:	2310      	movs	r3, #16
 800969a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800969e:	e042      	b.n	8009726 <UART_SetConfig+0x2fe>
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a17      	ldr	r2, [pc, #92]	@ (8009704 <UART_SetConfig+0x2dc>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d13a      	bne.n	8009720 <UART_SetConfig+0x2f8>
 80096aa:	4b18      	ldr	r3, [pc, #96]	@ (800970c <UART_SetConfig+0x2e4>)
 80096ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80096b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80096b8:	d01a      	beq.n	80096f0 <UART_SetConfig+0x2c8>
 80096ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80096be:	d81b      	bhi.n	80096f8 <UART_SetConfig+0x2d0>
 80096c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096c4:	d00c      	beq.n	80096e0 <UART_SetConfig+0x2b8>
 80096c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096ca:	d815      	bhi.n	80096f8 <UART_SetConfig+0x2d0>
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d003      	beq.n	80096d8 <UART_SetConfig+0x2b0>
 80096d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096d4:	d008      	beq.n	80096e8 <UART_SetConfig+0x2c0>
 80096d6:	e00f      	b.n	80096f8 <UART_SetConfig+0x2d0>
 80096d8:	2300      	movs	r3, #0
 80096da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096de:	e022      	b.n	8009726 <UART_SetConfig+0x2fe>
 80096e0:	2302      	movs	r3, #2
 80096e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096e6:	e01e      	b.n	8009726 <UART_SetConfig+0x2fe>
 80096e8:	2304      	movs	r3, #4
 80096ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096ee:	e01a      	b.n	8009726 <UART_SetConfig+0x2fe>
 80096f0:	2308      	movs	r3, #8
 80096f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096f6:	e016      	b.n	8009726 <UART_SetConfig+0x2fe>
 80096f8:	2310      	movs	r3, #16
 80096fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80096fe:	e012      	b.n	8009726 <UART_SetConfig+0x2fe>
 8009700:	cfff69f3 	.word	0xcfff69f3
 8009704:	40008000 	.word	0x40008000
 8009708:	40013800 	.word	0x40013800
 800970c:	40021000 	.word	0x40021000
 8009710:	40004400 	.word	0x40004400
 8009714:	40004800 	.word	0x40004800
 8009718:	40004c00 	.word	0x40004c00
 800971c:	40005000 	.word	0x40005000
 8009720:	2310      	movs	r3, #16
 8009722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4aae      	ldr	r2, [pc, #696]	@ (80099e4 <UART_SetConfig+0x5bc>)
 800972c:	4293      	cmp	r3, r2
 800972e:	f040 8097 	bne.w	8009860 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009732:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009736:	2b08      	cmp	r3, #8
 8009738:	d823      	bhi.n	8009782 <UART_SetConfig+0x35a>
 800973a:	a201      	add	r2, pc, #4	@ (adr r2, 8009740 <UART_SetConfig+0x318>)
 800973c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009740:	08009765 	.word	0x08009765
 8009744:	08009783 	.word	0x08009783
 8009748:	0800976d 	.word	0x0800976d
 800974c:	08009783 	.word	0x08009783
 8009750:	08009773 	.word	0x08009773
 8009754:	08009783 	.word	0x08009783
 8009758:	08009783 	.word	0x08009783
 800975c:	08009783 	.word	0x08009783
 8009760:	0800977b 	.word	0x0800977b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009764:	f7fc fd02 	bl	800616c <HAL_RCC_GetPCLK1Freq>
 8009768:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800976a:	e010      	b.n	800978e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800976c:	4b9e      	ldr	r3, [pc, #632]	@ (80099e8 <UART_SetConfig+0x5c0>)
 800976e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009770:	e00d      	b.n	800978e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009772:	f7fc fc8d 	bl	8006090 <HAL_RCC_GetSysClockFreq>
 8009776:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009778:	e009      	b.n	800978e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800977a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800977e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009780:	e005      	b.n	800978e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009782:	2300      	movs	r3, #0
 8009784:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009786:	2301      	movs	r3, #1
 8009788:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800978c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800978e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009790:	2b00      	cmp	r3, #0
 8009792:	f000 8130 	beq.w	80099f6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800979a:	4a94      	ldr	r2, [pc, #592]	@ (80099ec <UART_SetConfig+0x5c4>)
 800979c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097a0:	461a      	mov	r2, r3
 80097a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80097a8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	685a      	ldr	r2, [r3, #4]
 80097ae:	4613      	mov	r3, r2
 80097b0:	005b      	lsls	r3, r3, #1
 80097b2:	4413      	add	r3, r2
 80097b4:	69ba      	ldr	r2, [r7, #24]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d305      	bcc.n	80097c6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097c0:	69ba      	ldr	r2, [r7, #24]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d903      	bls.n	80097ce <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80097c6:	2301      	movs	r3, #1
 80097c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80097cc:	e113      	b.n	80099f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d0:	2200      	movs	r2, #0
 80097d2:	60bb      	str	r3, [r7, #8]
 80097d4:	60fa      	str	r2, [r7, #12]
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097da:	4a84      	ldr	r2, [pc, #528]	@ (80099ec <UART_SetConfig+0x5c4>)
 80097dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	2200      	movs	r2, #0
 80097e4:	603b      	str	r3, [r7, #0]
 80097e6:	607a      	str	r2, [r7, #4]
 80097e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80097f0:	f7f7 f950 	bl	8000a94 <__aeabi_uldivmod>
 80097f4:	4602      	mov	r2, r0
 80097f6:	460b      	mov	r3, r1
 80097f8:	4610      	mov	r0, r2
 80097fa:	4619      	mov	r1, r3
 80097fc:	f04f 0200 	mov.w	r2, #0
 8009800:	f04f 0300 	mov.w	r3, #0
 8009804:	020b      	lsls	r3, r1, #8
 8009806:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800980a:	0202      	lsls	r2, r0, #8
 800980c:	6979      	ldr	r1, [r7, #20]
 800980e:	6849      	ldr	r1, [r1, #4]
 8009810:	0849      	lsrs	r1, r1, #1
 8009812:	2000      	movs	r0, #0
 8009814:	460c      	mov	r4, r1
 8009816:	4605      	mov	r5, r0
 8009818:	eb12 0804 	adds.w	r8, r2, r4
 800981c:	eb43 0905 	adc.w	r9, r3, r5
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	469a      	mov	sl, r3
 8009828:	4693      	mov	fp, r2
 800982a:	4652      	mov	r2, sl
 800982c:	465b      	mov	r3, fp
 800982e:	4640      	mov	r0, r8
 8009830:	4649      	mov	r1, r9
 8009832:	f7f7 f92f 	bl	8000a94 <__aeabi_uldivmod>
 8009836:	4602      	mov	r2, r0
 8009838:	460b      	mov	r3, r1
 800983a:	4613      	mov	r3, r2
 800983c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800983e:	6a3b      	ldr	r3, [r7, #32]
 8009840:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009844:	d308      	bcc.n	8009858 <UART_SetConfig+0x430>
 8009846:	6a3b      	ldr	r3, [r7, #32]
 8009848:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800984c:	d204      	bcs.n	8009858 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	6a3a      	ldr	r2, [r7, #32]
 8009854:	60da      	str	r2, [r3, #12]
 8009856:	e0ce      	b.n	80099f6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800985e:	e0ca      	b.n	80099f6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	69db      	ldr	r3, [r3, #28]
 8009864:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009868:	d166      	bne.n	8009938 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800986a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800986e:	2b08      	cmp	r3, #8
 8009870:	d827      	bhi.n	80098c2 <UART_SetConfig+0x49a>
 8009872:	a201      	add	r2, pc, #4	@ (adr r2, 8009878 <UART_SetConfig+0x450>)
 8009874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009878:	0800989d 	.word	0x0800989d
 800987c:	080098a5 	.word	0x080098a5
 8009880:	080098ad 	.word	0x080098ad
 8009884:	080098c3 	.word	0x080098c3
 8009888:	080098b3 	.word	0x080098b3
 800988c:	080098c3 	.word	0x080098c3
 8009890:	080098c3 	.word	0x080098c3
 8009894:	080098c3 	.word	0x080098c3
 8009898:	080098bb 	.word	0x080098bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800989c:	f7fc fc66 	bl	800616c <HAL_RCC_GetPCLK1Freq>
 80098a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80098a2:	e014      	b.n	80098ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098a4:	f7fc fc78 	bl	8006198 <HAL_RCC_GetPCLK2Freq>
 80098a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80098aa:	e010      	b.n	80098ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80098ac:	4b4e      	ldr	r3, [pc, #312]	@ (80099e8 <UART_SetConfig+0x5c0>)
 80098ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80098b0:	e00d      	b.n	80098ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098b2:	f7fc fbed 	bl	8006090 <HAL_RCC_GetSysClockFreq>
 80098b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80098b8:	e009      	b.n	80098ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80098c0:	e005      	b.n	80098ce <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80098c2:	2300      	movs	r3, #0
 80098c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80098cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80098ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f000 8090 	beq.w	80099f6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098da:	4a44      	ldr	r2, [pc, #272]	@ (80099ec <UART_SetConfig+0x5c4>)
 80098dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098e0:	461a      	mov	r2, r3
 80098e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80098e8:	005a      	lsls	r2, r3, #1
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	085b      	lsrs	r3, r3, #1
 80098f0:	441a      	add	r2, r3
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80098fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098fc:	6a3b      	ldr	r3, [r7, #32]
 80098fe:	2b0f      	cmp	r3, #15
 8009900:	d916      	bls.n	8009930 <UART_SetConfig+0x508>
 8009902:	6a3b      	ldr	r3, [r7, #32]
 8009904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009908:	d212      	bcs.n	8009930 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800990a:	6a3b      	ldr	r3, [r7, #32]
 800990c:	b29b      	uxth	r3, r3
 800990e:	f023 030f 	bic.w	r3, r3, #15
 8009912:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009914:	6a3b      	ldr	r3, [r7, #32]
 8009916:	085b      	lsrs	r3, r3, #1
 8009918:	b29b      	uxth	r3, r3
 800991a:	f003 0307 	and.w	r3, r3, #7
 800991e:	b29a      	uxth	r2, r3
 8009920:	8bfb      	ldrh	r3, [r7, #30]
 8009922:	4313      	orrs	r3, r2
 8009924:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	8bfa      	ldrh	r2, [r7, #30]
 800992c:	60da      	str	r2, [r3, #12]
 800992e:	e062      	b.n	80099f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009936:	e05e      	b.n	80099f6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009938:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800993c:	2b08      	cmp	r3, #8
 800993e:	d828      	bhi.n	8009992 <UART_SetConfig+0x56a>
 8009940:	a201      	add	r2, pc, #4	@ (adr r2, 8009948 <UART_SetConfig+0x520>)
 8009942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009946:	bf00      	nop
 8009948:	0800996d 	.word	0x0800996d
 800994c:	08009975 	.word	0x08009975
 8009950:	0800997d 	.word	0x0800997d
 8009954:	08009993 	.word	0x08009993
 8009958:	08009983 	.word	0x08009983
 800995c:	08009993 	.word	0x08009993
 8009960:	08009993 	.word	0x08009993
 8009964:	08009993 	.word	0x08009993
 8009968:	0800998b 	.word	0x0800998b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800996c:	f7fc fbfe 	bl	800616c <HAL_RCC_GetPCLK1Freq>
 8009970:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009972:	e014      	b.n	800999e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009974:	f7fc fc10 	bl	8006198 <HAL_RCC_GetPCLK2Freq>
 8009978:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800997a:	e010      	b.n	800999e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800997c:	4b1a      	ldr	r3, [pc, #104]	@ (80099e8 <UART_SetConfig+0x5c0>)
 800997e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009980:	e00d      	b.n	800999e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009982:	f7fc fb85 	bl	8006090 <HAL_RCC_GetSysClockFreq>
 8009986:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009988:	e009      	b.n	800999e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800998a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800998e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009990:	e005      	b.n	800999e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009992:	2300      	movs	r3, #0
 8009994:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800999c:	bf00      	nop
    }

    if (pclk != 0U)
 800999e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d028      	beq.n	80099f6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099a8:	4a10      	ldr	r2, [pc, #64]	@ (80099ec <UART_SetConfig+0x5c4>)
 80099aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099ae:	461a      	mov	r2, r3
 80099b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	085b      	lsrs	r3, r3, #1
 80099bc:	441a      	add	r2, r3
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80099c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099c8:	6a3b      	ldr	r3, [r7, #32]
 80099ca:	2b0f      	cmp	r3, #15
 80099cc:	d910      	bls.n	80099f0 <UART_SetConfig+0x5c8>
 80099ce:	6a3b      	ldr	r3, [r7, #32]
 80099d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099d4:	d20c      	bcs.n	80099f0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80099d6:	6a3b      	ldr	r3, [r7, #32]
 80099d8:	b29a      	uxth	r2, r3
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	60da      	str	r2, [r3, #12]
 80099e0:	e009      	b.n	80099f6 <UART_SetConfig+0x5ce>
 80099e2:	bf00      	nop
 80099e4:	40008000 	.word	0x40008000
 80099e8:	00f42400 	.word	0x00f42400
 80099ec:	0800a5e4 	.word	0x0800a5e4
      }
      else
      {
        ret = HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	2201      	movs	r2, #1
 80099fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	2201      	movs	r2, #1
 8009a02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009a12:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3730      	adds	r7, #48	@ 0x30
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009a20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b083      	sub	sp, #12
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a2c:	f003 0308 	and.w	r3, r3, #8
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d00a      	beq.n	8009a4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	430a      	orrs	r2, r1
 8009a48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a4e:	f003 0301 	and.w	r3, r3, #1
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00a      	beq.n	8009a6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	430a      	orrs	r2, r1
 8009a6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a70:	f003 0302 	and.w	r3, r3, #2
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d00a      	beq.n	8009a8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	430a      	orrs	r2, r1
 8009a8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a92:	f003 0304 	and.w	r3, r3, #4
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00a      	beq.n	8009ab0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	430a      	orrs	r2, r1
 8009aae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ab4:	f003 0310 	and.w	r3, r3, #16
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00a      	beq.n	8009ad2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	430a      	orrs	r2, r1
 8009ad0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ad6:	f003 0320 	and.w	r3, r3, #32
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d00a      	beq.n	8009af4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	430a      	orrs	r2, r1
 8009af2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d01a      	beq.n	8009b36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	430a      	orrs	r2, r1
 8009b14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b1e:	d10a      	bne.n	8009b36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	430a      	orrs	r2, r1
 8009b34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00a      	beq.n	8009b58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	430a      	orrs	r2, r1
 8009b56:	605a      	str	r2, [r3, #4]
  }
}
 8009b58:	bf00      	nop
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b098      	sub	sp, #96	@ 0x60
 8009b68:	af02      	add	r7, sp, #8
 8009b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b74:	f7f9 f950 	bl	8002e18 <HAL_GetTick>
 8009b78:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 0308 	and.w	r3, r3, #8
 8009b84:	2b08      	cmp	r3, #8
 8009b86:	d12f      	bne.n	8009be8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009b8c:	9300      	str	r3, [sp, #0]
 8009b8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b90:	2200      	movs	r2, #0
 8009b92:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 f88e 	bl	8009cb8 <UART_WaitOnFlagUntilTimeout>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d022      	beq.n	8009be8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009baa:	e853 3f00 	ldrex	r3, [r3]
 8009bae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009bb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bc2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009bc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009bc8:	e841 2300 	strex	r3, r2, [r1]
 8009bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009bce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d1e6      	bne.n	8009ba2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2220      	movs	r2, #32
 8009bd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009be4:	2303      	movs	r3, #3
 8009be6:	e063      	b.n	8009cb0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f003 0304 	and.w	r3, r3, #4
 8009bf2:	2b04      	cmp	r3, #4
 8009bf4:	d149      	bne.n	8009c8a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bf6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009bfa:	9300      	str	r3, [sp, #0]
 8009bfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 f857 	bl	8009cb8 <UART_WaitOnFlagUntilTimeout>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d03c      	beq.n	8009c8a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c18:	e853 3f00 	ldrex	r3, [r3]
 8009c1c:	623b      	str	r3, [r7, #32]
   return(result);
 8009c1e:	6a3b      	ldr	r3, [r7, #32]
 8009c20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c30:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c36:	e841 2300 	strex	r3, r2, [r1]
 8009c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d1e6      	bne.n	8009c10 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	3308      	adds	r3, #8
 8009c48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	e853 3f00 	ldrex	r3, [r3]
 8009c50:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f023 0301 	bic.w	r3, r3, #1
 8009c58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	3308      	adds	r3, #8
 8009c60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c62:	61fa      	str	r2, [r7, #28]
 8009c64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c66:	69b9      	ldr	r1, [r7, #24]
 8009c68:	69fa      	ldr	r2, [r7, #28]
 8009c6a:	e841 2300 	strex	r3, r2, [r1]
 8009c6e:	617b      	str	r3, [r7, #20]
   return(result);
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d1e5      	bne.n	8009c42 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2220      	movs	r2, #32
 8009c7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c86:	2303      	movs	r3, #3
 8009c88:	e012      	b.n	8009cb0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2220      	movs	r2, #32
 8009c8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2220      	movs	r2, #32
 8009c96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009cae:	2300      	movs	r3, #0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3758      	adds	r7, #88	@ 0x58
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	603b      	str	r3, [r7, #0]
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cc8:	e04f      	b.n	8009d6a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd0:	d04b      	beq.n	8009d6a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cd2:	f7f9 f8a1 	bl	8002e18 <HAL_GetTick>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	1ad3      	subs	r3, r2, r3
 8009cdc:	69ba      	ldr	r2, [r7, #24]
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d302      	bcc.n	8009ce8 <UART_WaitOnFlagUntilTimeout+0x30>
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d101      	bne.n	8009cec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009ce8:	2303      	movs	r3, #3
 8009cea:	e04e      	b.n	8009d8a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f003 0304 	and.w	r3, r3, #4
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d037      	beq.n	8009d6a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	2b80      	cmp	r3, #128	@ 0x80
 8009cfe:	d034      	beq.n	8009d6a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	2b40      	cmp	r3, #64	@ 0x40
 8009d04:	d031      	beq.n	8009d6a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	69db      	ldr	r3, [r3, #28]
 8009d0c:	f003 0308 	and.w	r3, r3, #8
 8009d10:	2b08      	cmp	r3, #8
 8009d12:	d110      	bne.n	8009d36 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2208      	movs	r2, #8
 8009d1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d1c:	68f8      	ldr	r0, [r7, #12]
 8009d1e:	f000 f920 	bl	8009f62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2208      	movs	r2, #8
 8009d26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	e029      	b.n	8009d8a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	69db      	ldr	r3, [r3, #28]
 8009d3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d44:	d111      	bne.n	8009d6a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009d4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d50:	68f8      	ldr	r0, [r7, #12]
 8009d52:	f000 f906 	bl	8009f62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2220      	movs	r2, #32
 8009d5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2200      	movs	r2, #0
 8009d62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009d66:	2303      	movs	r3, #3
 8009d68:	e00f      	b.n	8009d8a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	69da      	ldr	r2, [r3, #28]
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	4013      	ands	r3, r2
 8009d74:	68ba      	ldr	r2, [r7, #8]
 8009d76:	429a      	cmp	r2, r3
 8009d78:	bf0c      	ite	eq
 8009d7a:	2301      	moveq	r3, #1
 8009d7c:	2300      	movne	r3, #0
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	461a      	mov	r2, r3
 8009d82:	79fb      	ldrb	r3, [r7, #7]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d0a0      	beq.n	8009cca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
	...

08009d94 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b096      	sub	sp, #88	@ 0x58
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	4613      	mov	r3, r2
 8009da0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	68ba      	ldr	r2, [r7, #8]
 8009da6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	88fa      	ldrh	r2, [r7, #6]
 8009dac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2222      	movs	r2, #34	@ 0x22
 8009dbc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d02d      	beq.n	8009e26 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dd0:	4a40      	ldr	r2, [pc, #256]	@ (8009ed4 <UART_Start_Receive_DMA+0x140>)
 8009dd2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dda:	4a3f      	ldr	r2, [pc, #252]	@ (8009ed8 <UART_Start_Receive_DMA+0x144>)
 8009ddc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009de4:	4a3d      	ldr	r2, [pc, #244]	@ (8009edc <UART_Start_Receive_DMA+0x148>)
 8009de6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dee:	2200      	movs	r2, #0
 8009df0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	3324      	adds	r3, #36	@ 0x24
 8009dfe:	4619      	mov	r1, r3
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e04:	461a      	mov	r2, r3
 8009e06:	88fb      	ldrh	r3, [r7, #6]
 8009e08:	f7fa ffec 	bl	8004de4 <HAL_DMA_Start_IT>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d009      	beq.n	8009e26 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2210      	movs	r2, #16
 8009e16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2220      	movs	r2, #32
 8009e1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009e22:	2301      	movs	r3, #1
 8009e24:	e051      	b.n	8009eca <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	691b      	ldr	r3, [r3, #16]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d018      	beq.n	8009e60 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e36:	e853 3f00 	ldrex	r3, [r3]
 8009e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e42:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	461a      	mov	r2, r3
 8009e4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e4e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e50:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009e52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e54:	e841 2300 	strex	r3, r2, [r1]
 8009e58:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d1e6      	bne.n	8009e2e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	3308      	adds	r3, #8
 8009e66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e6a:	e853 3f00 	ldrex	r3, [r3]
 8009e6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e72:	f043 0301 	orr.w	r3, r3, #1
 8009e76:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	3308      	adds	r3, #8
 8009e7e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009e80:	637a      	str	r2, [r7, #52]	@ 0x34
 8009e82:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e84:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009e86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e88:	e841 2300 	strex	r3, r2, [r1]
 8009e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d1e5      	bne.n	8009e60 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	3308      	adds	r3, #8
 8009e9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	e853 3f00 	ldrex	r3, [r3]
 8009ea2:	613b      	str	r3, [r7, #16]
   return(result);
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	3308      	adds	r3, #8
 8009eb2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009eb4:	623a      	str	r2, [r7, #32]
 8009eb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb8:	69f9      	ldr	r1, [r7, #28]
 8009eba:	6a3a      	ldr	r2, [r7, #32]
 8009ebc:	e841 2300 	strex	r3, r2, [r1]
 8009ec0:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d1e5      	bne.n	8009e94 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3758      	adds	r7, #88	@ 0x58
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	0800a02f 	.word	0x0800a02f
 8009ed8:	0800a163 	.word	0x0800a163
 8009edc:	0800a1a9 	.word	0x0800a1a9

08009ee0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b08f      	sub	sp, #60	@ 0x3c
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eee:	6a3b      	ldr	r3, [r7, #32]
 8009ef0:	e853 3f00 	ldrex	r3, [r3]
 8009ef4:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ef6:	69fb      	ldr	r3, [r7, #28]
 8009ef8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009efc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	461a      	mov	r2, r3
 8009f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f08:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f0e:	e841 2300 	strex	r3, r2, [r1]
 8009f12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d1e6      	bne.n	8009ee8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	3308      	adds	r3, #8
 8009f20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	e853 3f00 	ldrex	r3, [r3]
 8009f28:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009f30:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	3308      	adds	r3, #8
 8009f38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f3a:	61ba      	str	r2, [r7, #24]
 8009f3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f3e:	6979      	ldr	r1, [r7, #20]
 8009f40:	69ba      	ldr	r2, [r7, #24]
 8009f42:	e841 2300 	strex	r3, r2, [r1]
 8009f46:	613b      	str	r3, [r7, #16]
   return(result);
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d1e5      	bne.n	8009f1a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2220      	movs	r2, #32
 8009f52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009f56:	bf00      	nop
 8009f58:	373c      	adds	r7, #60	@ 0x3c
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr

08009f62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f62:	b480      	push	{r7}
 8009f64:	b095      	sub	sp, #84	@ 0x54
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f72:	e853 3f00 	ldrex	r3, [r3]
 8009f76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	461a      	mov	r2, r3
 8009f86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f88:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f8a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009f8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009f90:	e841 2300 	strex	r3, r2, [r1]
 8009f94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d1e6      	bne.n	8009f6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	3308      	adds	r3, #8
 8009fa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa4:	6a3b      	ldr	r3, [r7, #32]
 8009fa6:	e853 3f00 	ldrex	r3, [r3]
 8009faa:	61fb      	str	r3, [r7, #28]
   return(result);
 8009fac:	69fb      	ldr	r3, [r7, #28]
 8009fae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009fb2:	f023 0301 	bic.w	r3, r3, #1
 8009fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	3308      	adds	r3, #8
 8009fbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009fc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fc8:	e841 2300 	strex	r3, r2, [r1]
 8009fcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d1e3      	bne.n	8009f9c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d118      	bne.n	800a00e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	e853 3f00 	ldrex	r3, [r3]
 8009fe8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	f023 0310 	bic.w	r3, r3, #16
 8009ff0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ffa:	61bb      	str	r3, [r7, #24]
 8009ffc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ffe:	6979      	ldr	r1, [r7, #20]
 800a000:	69ba      	ldr	r2, [r7, #24]
 800a002:	e841 2300 	strex	r3, r2, [r1]
 800a006:	613b      	str	r3, [r7, #16]
   return(result);
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d1e6      	bne.n	8009fdc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2220      	movs	r2, #32
 800a012:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2200      	movs	r2, #0
 800a01a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a022:	bf00      	nop
 800a024:	3754      	adds	r7, #84	@ 0x54
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr

0800a02e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b09c      	sub	sp, #112	@ 0x70
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a03a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f003 0320 	and.w	r3, r3, #32
 800a046:	2b00      	cmp	r3, #0
 800a048:	d171      	bne.n	800a12e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a04a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a04c:	2200      	movs	r2, #0
 800a04e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a052:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a058:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a05a:	e853 3f00 	ldrex	r3, [r3]
 800a05e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a060:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a062:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a066:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a068:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	461a      	mov	r2, r3
 800a06e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a070:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a072:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a074:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a076:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a078:	e841 2300 	strex	r3, r2, [r1]
 800a07c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a07e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a080:	2b00      	cmp	r3, #0
 800a082:	d1e6      	bne.n	800a052 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a084:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	3308      	adds	r3, #8
 800a08a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a08e:	e853 3f00 	ldrex	r3, [r3]
 800a092:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a096:	f023 0301 	bic.w	r3, r3, #1
 800a09a:	667b      	str	r3, [r7, #100]	@ 0x64
 800a09c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	3308      	adds	r3, #8
 800a0a2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a0a4:	647a      	str	r2, [r7, #68]	@ 0x44
 800a0a6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a0aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0ac:	e841 2300 	strex	r3, r2, [r1]
 800a0b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a0b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1e5      	bne.n	800a084 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	3308      	adds	r3, #8
 800a0be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c2:	e853 3f00 	ldrex	r3, [r3]
 800a0c6:	623b      	str	r3, [r7, #32]
   return(result);
 800a0c8:	6a3b      	ldr	r3, [r7, #32]
 800a0ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0ce:	663b      	str	r3, [r7, #96]	@ 0x60
 800a0d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	3308      	adds	r3, #8
 800a0d6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a0d8:	633a      	str	r2, [r7, #48]	@ 0x30
 800a0da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0e0:	e841 2300 	strex	r3, r2, [r1]
 800a0e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d1e5      	bne.n	800a0b8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a0ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0ee:	2220      	movs	r2, #32
 800a0f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d118      	bne.n	800a12e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	e853 3f00 	ldrex	r3, [r3]
 800a108:	60fb      	str	r3, [r7, #12]
   return(result);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f023 0310 	bic.w	r3, r3, #16
 800a110:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a112:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	461a      	mov	r2, r3
 800a118:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a11a:	61fb      	str	r3, [r7, #28]
 800a11c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a11e:	69b9      	ldr	r1, [r7, #24]
 800a120:	69fa      	ldr	r2, [r7, #28]
 800a122:	e841 2300 	strex	r3, r2, [r1]
 800a126:	617b      	str	r3, [r7, #20]
   return(result);
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d1e6      	bne.n	800a0fc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a12e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a130:	2200      	movs	r2, #0
 800a132:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a134:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a136:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d109      	bne.n	800a150 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800a13c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a13e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a142:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a144:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a148:	4611      	mov	r1, r2
 800a14a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a14c:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a14e:	e004      	b.n	800a15a <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800a150:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a152:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a156:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a158:	4798      	blx	r3
}
 800a15a:	bf00      	nop
 800a15c:	3770      	adds	r7, #112	@ 0x70
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b084      	sub	sp, #16
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a16e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2201      	movs	r2, #1
 800a174:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d10b      	bne.n	800a196 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a184:	68fa      	ldr	r2, [r7, #12]
 800a186:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a18a:	0852      	lsrs	r2, r2, #1
 800a18c:	b292      	uxth	r2, r2
 800a18e:	4611      	mov	r1, r2
 800a190:	68f8      	ldr	r0, [r7, #12]
 800a192:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a194:	e004      	b.n	800a1a0 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	4798      	blx	r3
}
 800a1a0:	bf00      	nop
 800a1a2:	3710      	adds	r7, #16
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b086      	sub	sp, #24
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1b4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1bc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a1c4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1d0:	2b80      	cmp	r3, #128	@ 0x80
 800a1d2:	d109      	bne.n	800a1e8 <UART_DMAError+0x40>
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	2b21      	cmp	r3, #33	@ 0x21
 800a1d8:	d106      	bne.n	800a1e8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a1e2:	6978      	ldr	r0, [r7, #20]
 800a1e4:	f7ff fe7c 	bl	8009ee0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	689b      	ldr	r3, [r3, #8]
 800a1ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1f2:	2b40      	cmp	r3, #64	@ 0x40
 800a1f4:	d109      	bne.n	800a20a <UART_DMAError+0x62>
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2b22      	cmp	r3, #34	@ 0x22
 800a1fa:	d106      	bne.n	800a20a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	2200      	movs	r2, #0
 800a200:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a204:	6978      	ldr	r0, [r7, #20]
 800a206:	f7ff feac 	bl	8009f62 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a210:	f043 0210 	orr.w	r2, r3, #16
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a220:	6978      	ldr	r0, [r7, #20]
 800a222:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a224:	bf00      	nop
 800a226:	3718      	adds	r7, #24
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a238:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2200      	movs	r2, #0
 800a23e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2200      	movs	r2, #0
 800a246:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a254:	bf00      	nop
 800a256:	3710      	adds	r7, #16
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b088      	sub	sp, #32
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	e853 3f00 	ldrex	r3, [r3]
 800a270:	60bb      	str	r3, [r7, #8]
   return(result);
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a278:	61fb      	str	r3, [r7, #28]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	461a      	mov	r2, r3
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	61bb      	str	r3, [r7, #24]
 800a284:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a286:	6979      	ldr	r1, [r7, #20]
 800a288:	69ba      	ldr	r2, [r7, #24]
 800a28a:	e841 2300 	strex	r3, r2, [r1]
 800a28e:	613b      	str	r3, [r7, #16]
   return(result);
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d1e6      	bne.n	800a264 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2220      	movs	r2, #32
 800a29a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2ae:	bf00      	nop
 800a2b0:	3720      	adds	r7, #32
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a2b6:	b480      	push	{r7}
 800a2b8:	b083      	sub	sp, #12
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a2be:	bf00      	nop
 800a2c0:	370c      	adds	r7, #12
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr

0800a2ca <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a2ca:	b480      	push	{r7}
 800a2cc:	b083      	sub	sp, #12
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a2d2:	bf00      	nop
 800a2d4:	370c      	adds	r7, #12
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr

0800a2de <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a2de:	b480      	push	{r7}
 800a2e0:	b083      	sub	sp, #12
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a2e6:	bf00      	nop
 800a2e8:	370c      	adds	r7, #12
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr

0800a2f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a2f2:	b480      	push	{r7}
 800a2f4:	b085      	sub	sp, #20
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a300:	2b01      	cmp	r3, #1
 800a302:	d101      	bne.n	800a308 <HAL_UARTEx_DisableFifoMode+0x16>
 800a304:	2302      	movs	r3, #2
 800a306:	e027      	b.n	800a358 <HAL_UARTEx_DisableFifoMode+0x66>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2224      	movs	r2, #36	@ 0x24
 800a314:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f022 0201 	bic.w	r2, r2, #1
 800a32e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a336:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	68fa      	ldr	r2, [r7, #12]
 800a344:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2220      	movs	r2, #32
 800a34a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3714      	adds	r7, #20
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a374:	2b01      	cmp	r3, #1
 800a376:	d101      	bne.n	800a37c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a378:	2302      	movs	r3, #2
 800a37a:	e02d      	b.n	800a3d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2201      	movs	r2, #1
 800a380:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2224      	movs	r2, #36	@ 0x24
 800a388:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f022 0201 	bic.w	r2, r2, #1
 800a3a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	683a      	ldr	r2, [r7, #0]
 800a3b4:	430a      	orrs	r2, r1
 800a3b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 f84f 	bl	800a45c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	68fa      	ldr	r2, [r7, #12]
 800a3c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2220      	movs	r2, #32
 800a3ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a3d6:	2300      	movs	r3, #0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3710      	adds	r7, #16
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d101      	bne.n	800a3f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a3f4:	2302      	movs	r3, #2
 800a3f6:	e02d      	b.n	800a454 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2224      	movs	r2, #36	@ 0x24
 800a404:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f022 0201 	bic.w	r2, r2, #1
 800a41e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	689b      	ldr	r3, [r3, #8]
 800a426:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	683a      	ldr	r2, [r7, #0]
 800a430:	430a      	orrs	r2, r1
 800a432:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 f811 	bl	800a45c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2220      	movs	r2, #32
 800a446:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a452:	2300      	movs	r3, #0
}
 800a454:	4618      	mov	r0, r3
 800a456:	3710      	adds	r7, #16
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b085      	sub	sp, #20
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d108      	bne.n	800a47e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a47c:	e031      	b.n	800a4e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a47e:	2308      	movs	r3, #8
 800a480:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a482:	2308      	movs	r3, #8
 800a484:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	0e5b      	lsrs	r3, r3, #25
 800a48e:	b2db      	uxtb	r3, r3
 800a490:	f003 0307 	and.w	r3, r3, #7
 800a494:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	0f5b      	lsrs	r3, r3, #29
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	f003 0307 	and.w	r3, r3, #7
 800a4a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4a6:	7bbb      	ldrb	r3, [r7, #14]
 800a4a8:	7b3a      	ldrb	r2, [r7, #12]
 800a4aa:	4911      	ldr	r1, [pc, #68]	@ (800a4f0 <UARTEx_SetNbDataToProcess+0x94>)
 800a4ac:	5c8a      	ldrb	r2, [r1, r2]
 800a4ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a4b2:	7b3a      	ldrb	r2, [r7, #12]
 800a4b4:	490f      	ldr	r1, [pc, #60]	@ (800a4f4 <UARTEx_SetNbDataToProcess+0x98>)
 800a4b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4bc:	b29a      	uxth	r2, r3
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4c4:	7bfb      	ldrb	r3, [r7, #15]
 800a4c6:	7b7a      	ldrb	r2, [r7, #13]
 800a4c8:	4909      	ldr	r1, [pc, #36]	@ (800a4f0 <UARTEx_SetNbDataToProcess+0x94>)
 800a4ca:	5c8a      	ldrb	r2, [r1, r2]
 800a4cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a4d0:	7b7a      	ldrb	r2, [r7, #13]
 800a4d2:	4908      	ldr	r1, [pc, #32]	@ (800a4f4 <UARTEx_SetNbDataToProcess+0x98>)
 800a4d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4da:	b29a      	uxth	r2, r3
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a4e2:	bf00      	nop
 800a4e4:	3714      	adds	r7, #20
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	0800a5fc 	.word	0x0800a5fc
 800a4f4:	0800a604 	.word	0x0800a604

0800a4f8 <memset>:
 800a4f8:	4402      	add	r2, r0
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d100      	bne.n	800a502 <memset+0xa>
 800a500:	4770      	bx	lr
 800a502:	f803 1b01 	strb.w	r1, [r3], #1
 800a506:	e7f9      	b.n	800a4fc <memset+0x4>

0800a508 <__libc_init_array>:
 800a508:	b570      	push	{r4, r5, r6, lr}
 800a50a:	4d0d      	ldr	r5, [pc, #52]	@ (800a540 <__libc_init_array+0x38>)
 800a50c:	4c0d      	ldr	r4, [pc, #52]	@ (800a544 <__libc_init_array+0x3c>)
 800a50e:	1b64      	subs	r4, r4, r5
 800a510:	10a4      	asrs	r4, r4, #2
 800a512:	2600      	movs	r6, #0
 800a514:	42a6      	cmp	r6, r4
 800a516:	d109      	bne.n	800a52c <__libc_init_array+0x24>
 800a518:	4d0b      	ldr	r5, [pc, #44]	@ (800a548 <__libc_init_array+0x40>)
 800a51a:	4c0c      	ldr	r4, [pc, #48]	@ (800a54c <__libc_init_array+0x44>)
 800a51c:	f000 f818 	bl	800a550 <_init>
 800a520:	1b64      	subs	r4, r4, r5
 800a522:	10a4      	asrs	r4, r4, #2
 800a524:	2600      	movs	r6, #0
 800a526:	42a6      	cmp	r6, r4
 800a528:	d105      	bne.n	800a536 <__libc_init_array+0x2e>
 800a52a:	bd70      	pop	{r4, r5, r6, pc}
 800a52c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a530:	4798      	blx	r3
 800a532:	3601      	adds	r6, #1
 800a534:	e7ee      	b.n	800a514 <__libc_init_array+0xc>
 800a536:	f855 3b04 	ldr.w	r3, [r5], #4
 800a53a:	4798      	blx	r3
 800a53c:	3601      	adds	r6, #1
 800a53e:	e7f2      	b.n	800a526 <__libc_init_array+0x1e>
 800a540:	0800a614 	.word	0x0800a614
 800a544:	0800a614 	.word	0x0800a614
 800a548:	0800a614 	.word	0x0800a614
 800a54c:	0800a618 	.word	0x0800a618

0800a550 <_init>:
 800a550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a552:	bf00      	nop
 800a554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a556:	bc08      	pop	{r3}
 800a558:	469e      	mov	lr, r3
 800a55a:	4770      	bx	lr

0800a55c <_fini>:
 800a55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a55e:	bf00      	nop
 800a560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a562:	bc08      	pop	{r3}
 800a564:	469e      	mov	lr, r3
 800a566:	4770      	bx	lr

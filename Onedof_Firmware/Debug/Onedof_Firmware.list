
Onedof_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094e8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080096c0  080096c0  0000a6c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009700  08009700  0000b018  2**0
                  CONTENTS
  4 .ARM          00000008  08009700  08009700  0000a700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009708  08009708  0000b018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009708  08009708  0000a708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800970c  0800970c  0000a70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08009710  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000774  20000018  08009728  0000b018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000078c  08009728  0000b78c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b9c6  00000000  00000000  0000b048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000332b  00000000  00000000  00026a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  00029d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001117  00000000  00000000  0002b338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003667  00000000  00000000  0002c44f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bcfd  00000000  00000000  0002fab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114be0  00000000  00000000  0004b7b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00160393  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000606c  00000000  00000000  001603d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00166444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080096a8 	.word	0x080096a8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	080096a8 	.word	0x080096a8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b96a 	b.w	8000ee0 <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	460c      	mov	r4, r1
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d14e      	bne.n	8000cce <__udivmoddi4+0xaa>
 8000c30:	4694      	mov	ip, r2
 8000c32:	458c      	cmp	ip, r1
 8000c34:	4686      	mov	lr, r0
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	d962      	bls.n	8000d02 <__udivmoddi4+0xde>
 8000c3c:	b14a      	cbz	r2, 8000c52 <__udivmoddi4+0x2e>
 8000c3e:	f1c2 0320 	rsb	r3, r2, #32
 8000c42:	4091      	lsls	r1, r2
 8000c44:	fa20 f303 	lsr.w	r3, r0, r3
 8000c48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c4c:	4319      	orrs	r1, r3
 8000c4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c56:	fa1f f68c 	uxth.w	r6, ip
 8000c5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c62:	fb07 1114 	mls	r1, r7, r4, r1
 8000c66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6a:	fb04 f106 	mul.w	r1, r4, r6
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x64>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7a:	f080 8112 	bcs.w	8000ea2 <__udivmoddi4+0x27e>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 810f 	bls.w	8000ea2 <__udivmoddi4+0x27e>
 8000c84:	3c02      	subs	r4, #2
 8000c86:	4463      	add	r3, ip
 8000c88:	1a59      	subs	r1, r3, r1
 8000c8a:	fa1f f38e 	uxth.w	r3, lr
 8000c8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c92:	fb07 1110 	mls	r1, r7, r0, r1
 8000c96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9a:	fb00 f606 	mul.w	r6, r0, r6
 8000c9e:	429e      	cmp	r6, r3
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x94>
 8000ca2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000caa:	f080 80fc 	bcs.w	8000ea6 <__udivmoddi4+0x282>
 8000cae:	429e      	cmp	r6, r3
 8000cb0:	f240 80f9 	bls.w	8000ea6 <__udivmoddi4+0x282>
 8000cb4:	4463      	add	r3, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	1b9b      	subs	r3, r3, r6
 8000cba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa6>
 8000cc2:	40d3      	lsrs	r3, r2
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xba>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb4>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa6>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x150>
 8000ce6:	42a3      	cmp	r3, r4
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xcc>
 8000cea:	4290      	cmp	r0, r2
 8000cec:	f0c0 80f0 	bcc.w	8000ed0 <__udivmoddi4+0x2ac>
 8000cf0:	1a86      	subs	r6, r0, r2
 8000cf2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	2d00      	cmp	r5, #0
 8000cfa:	d0e6      	beq.n	8000cca <__udivmoddi4+0xa6>
 8000cfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000d00:	e7e3      	b.n	8000cca <__udivmoddi4+0xa6>
 8000d02:	2a00      	cmp	r2, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x204>
 8000d08:	eba1 040c 	sub.w	r4, r1, ip
 8000d0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d10:	fa1f f78c 	uxth.w	r7, ip
 8000d14:	2101      	movs	r1, #1
 8000d16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb07 f006 	mul.w	r0, r7, r6
 8000d2a:	4298      	cmp	r0, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x11c>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x11a>
 8000d38:	4298      	cmp	r0, r3
 8000d3a:	f200 80cd 	bhi.w	8000ed8 <__udivmoddi4+0x2b4>
 8000d3e:	4626      	mov	r6, r4
 8000d40:	1a1c      	subs	r4, r3, r0
 8000d42:	fa1f f38e 	uxth.w	r3, lr
 8000d46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d52:	fb00 f707 	mul.w	r7, r0, r7
 8000d56:	429f      	cmp	r7, r3
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x148>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x146>
 8000d64:	429f      	cmp	r7, r3
 8000d66:	f200 80b0 	bhi.w	8000eca <__udivmoddi4+0x2a6>
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	1bdb      	subs	r3, r3, r7
 8000d6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x9c>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d84:	fa04 f301 	lsl.w	r3, r4, r1
 8000d88:	ea43 030c 	orr.w	r3, r3, ip
 8000d8c:	40f4      	lsrs	r4, r6
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	0c38      	lsrs	r0, r7, #16
 8000d94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d98:	fbb4 fef0 	udiv	lr, r4, r0
 8000d9c:	fa1f fc87 	uxth.w	ip, r7
 8000da0:	fb00 441e 	mls	r4, r0, lr, r4
 8000da4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da8:	fb0e f90c 	mul.w	r9, lr, ip
 8000dac:	45a1      	cmp	r9, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d90a      	bls.n	8000dca <__udivmoddi4+0x1a6>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dba:	f080 8084 	bcs.w	8000ec6 <__udivmoddi4+0x2a2>
 8000dbe:	45a1      	cmp	r9, r4
 8000dc0:	f240 8081 	bls.w	8000ec6 <__udivmoddi4+0x2a2>
 8000dc4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	eba4 0409 	sub.w	r4, r4, r9
 8000dce:	fa1f f983 	uxth.w	r9, r3
 8000dd2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dd6:	fb00 4413 	mls	r4, r0, r3, r4
 8000dda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dde:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x1d2>
 8000de6:	193c      	adds	r4, r7, r4
 8000de8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dec:	d267      	bcs.n	8000ebe <__udivmoddi4+0x29a>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d965      	bls.n	8000ebe <__udivmoddi4+0x29a>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfa:	fba0 9302 	umull	r9, r3, r0, r2
 8000dfe:	eba4 040c 	sub.w	r4, r4, ip
 8000e02:	429c      	cmp	r4, r3
 8000e04:	46ce      	mov	lr, r9
 8000e06:	469c      	mov	ip, r3
 8000e08:	d351      	bcc.n	8000eae <__udivmoddi4+0x28a>
 8000e0a:	d04e      	beq.n	8000eaa <__udivmoddi4+0x286>
 8000e0c:	b155      	cbz	r5, 8000e24 <__udivmoddi4+0x200>
 8000e0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000e12:	eb64 040c 	sbc.w	r4, r4, ip
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	40cb      	lsrs	r3, r1
 8000e1c:	431e      	orrs	r6, r3
 8000e1e:	40cc      	lsrs	r4, r1
 8000e20:	e9c5 6400 	strd	r6, r4, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	e750      	b.n	8000cca <__udivmoddi4+0xa6>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000e30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e34:	fa24 f303 	lsr.w	r3, r4, r3
 8000e38:	4094      	lsls	r4, r2
 8000e3a:	430c      	orrs	r4, r1
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e44:	fa1f f78c 	uxth.w	r7, ip
 8000e48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e50:	0c23      	lsrs	r3, r4, #16
 8000e52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e56:	fb00 f107 	mul.w	r1, r0, r7
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x24c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e66:	d22c      	bcs.n	8000ec2 <__udivmoddi4+0x29e>
 8000e68:	4299      	cmp	r1, r3
 8000e6a:	d92a      	bls.n	8000ec2 <__udivmoddi4+0x29e>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4463      	add	r3, ip
 8000e70:	1a5b      	subs	r3, r3, r1
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e78:	fb08 3311 	mls	r3, r8, r1, r3
 8000e7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e80:	fb01 f307 	mul.w	r3, r1, r7
 8000e84:	42a3      	cmp	r3, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x276>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e90:	d213      	bcs.n	8000eba <__udivmoddi4+0x296>
 8000e92:	42a3      	cmp	r3, r4
 8000e94:	d911      	bls.n	8000eba <__udivmoddi4+0x296>
 8000e96:	3902      	subs	r1, #2
 8000e98:	4464      	add	r4, ip
 8000e9a:	1ae4      	subs	r4, r4, r3
 8000e9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea0:	e739      	b.n	8000d16 <__udivmoddi4+0xf2>
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	e6f0      	b.n	8000c88 <__udivmoddi4+0x64>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e706      	b.n	8000cb8 <__udivmoddi4+0x94>
 8000eaa:	45c8      	cmp	r8, r9
 8000eac:	d2ae      	bcs.n	8000e0c <__udivmoddi4+0x1e8>
 8000eae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eb6:	3801      	subs	r0, #1
 8000eb8:	e7a8      	b.n	8000e0c <__udivmoddi4+0x1e8>
 8000eba:	4631      	mov	r1, r6
 8000ebc:	e7ed      	b.n	8000e9a <__udivmoddi4+0x276>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	e799      	b.n	8000df6 <__udivmoddi4+0x1d2>
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	e7d4      	b.n	8000e70 <__udivmoddi4+0x24c>
 8000ec6:	46d6      	mov	lr, sl
 8000ec8:	e77f      	b.n	8000dca <__udivmoddi4+0x1a6>
 8000eca:	4463      	add	r3, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e74d      	b.n	8000d6c <__udivmoddi4+0x148>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	4623      	mov	r3, r4
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	e70f      	b.n	8000cf8 <__udivmoddi4+0xd4>
 8000ed8:	3e02      	subs	r6, #2
 8000eda:	4463      	add	r3, ip
 8000edc:	e730      	b.n	8000d40 <__udivmoddi4+0x11c>
 8000ede:	bf00      	nop

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <ADC_init>:
 *      Author: naker
 */

#include "adc.h"

void ADC_init(ADC_HandleTypeDef* hadc, ADC* adc){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, adc -> adc_buffer, 50);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	2232      	movs	r2, #50	@ 0x32
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f002 f981 	bl	80031fc <HAL_ADC_Start_DMA>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <Update_joy>:
 *      Author: naker
 */

#include "joy.h"

void Update_joy(JOY *joy){
 8000f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f08:	b084      	sub	sp, #16
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
	uint8_t s_1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8000f0e:	2120      	movs	r1, #32
 8000f10:	4835      	ldr	r0, [pc, #212]	@ (8000fe8 <Update_joy+0xe4>)
 8000f12:	f004 f95d 	bl	80051d0 <HAL_GPIO_ReadPin>
 8000f16:	4603      	mov	r3, r0
 8000f18:	73fb      	strb	r3, [r7, #15]
	uint8_t s_2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8000f1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f22:	f004 f955 	bl	80051d0 <HAL_GPIO_ReadPin>
 8000f26:	4603      	mov	r3, r0
 8000f28:	73bb      	strb	r3, [r7, #14]
	uint8_t s_3 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4);
 8000f2a:	2110      	movs	r1, #16
 8000f2c:	482f      	ldr	r0, [pc, #188]	@ (8000fec <Update_joy+0xe8>)
 8000f2e:	f004 f94f 	bl	80051d0 <HAL_GPIO_ReadPin>
 8000f32:	4603      	mov	r3, r0
 8000f34:	737b      	strb	r3, [r7, #13]
	uint8_t s_4 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8000f36:	2120      	movs	r1, #32
 8000f38:	482c      	ldr	r0, [pc, #176]	@ (8000fec <Update_joy+0xe8>)
 8000f3a:	f004 f949 	bl	80051d0 <HAL_GPIO_ReadPin>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	733b      	strb	r3, [r7, #12]
	if(!s_1 || !s_2 || !s_3 || !s_4){
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d008      	beq.n	8000f5a <Update_joy+0x56>
 8000f48:	7bbb      	ldrb	r3, [r7, #14]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d005      	beq.n	8000f5a <Update_joy+0x56>
 8000f4e:	7b7b      	ldrb	r3, [r7, #13]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d002      	beq.n	8000f5a <Update_joy+0x56>
 8000f54:	7b3b      	ldrb	r3, [r7, #12]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d133      	bne.n	8000fc2 <Update_joy+0xbe>
		static uint8_t is_first = 1;
		static uint64_t timestamp = 0;
		if(is_first){
 8000f5a:	4b25      	ldr	r3, [pc, #148]	@ (8000ff0 <Update_joy+0xec>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d00c      	beq.n	8000f7c <Update_joy+0x78>
			timestamp = HAL_GetTick() + 50;
 8000f62:	f001 fd43 	bl	80029ec <HAL_GetTick>
 8000f66:	4603      	mov	r3, r0
 8000f68:	3332      	adds	r3, #50	@ 0x32
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	469a      	mov	sl, r3
 8000f6e:	4693      	mov	fp, r2
 8000f70:	4b20      	ldr	r3, [pc, #128]	@ (8000ff4 <Update_joy+0xf0>)
 8000f72:	e9c3 ab00 	strd	sl, fp, [r3]
			is_first = 0;
 8000f76:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff0 <Update_joy+0xec>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() > timestamp){
 8000f7c:	f001 fd36 	bl	80029ec <HAL_GetTick>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2200      	movs	r2, #0
 8000f84:	461c      	mov	r4, r3
 8000f86:	4615      	mov	r5, r2
 8000f88:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff4 <Update_joy+0xf0>)
 8000f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8e:	42a2      	cmp	r2, r4
 8000f90:	41ab      	sbcs	r3, r5
 8000f92:	d223      	bcs.n	8000fdc <Update_joy+0xd8>
			timestamp = HAL_GetTick() + 50;
 8000f94:	f001 fd2a 	bl	80029ec <HAL_GetTick>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	3332      	adds	r3, #50	@ 0x32
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	4698      	mov	r8, r3
 8000fa0:	4691      	mov	r9, r2
 8000fa2:	4b14      	ldr	r3, [pc, #80]	@ (8000ff4 <Update_joy+0xf0>)
 8000fa4:	e9c3 8900 	strd	r8, r9, [r3]
			joy -> s_1 = s_1;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	7bfa      	ldrb	r2, [r7, #15]
 8000fac:	701a      	strb	r2, [r3, #0]
			joy -> s_2 = s_2;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	7bba      	ldrb	r2, [r7, #14]
 8000fb2:	705a      	strb	r2, [r3, #1]
			joy -> s_3 = s_3;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	7b7a      	ldrb	r2, [r7, #13]
 8000fb8:	709a      	strb	r2, [r3, #2]
			joy -> s_4 = s_4;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	7b3a      	ldrb	r2, [r7, #12]
 8000fbe:	70da      	strb	r2, [r3, #3]
	if(!s_1 || !s_2 || !s_3 || !s_4){
 8000fc0:	e00c      	b.n	8000fdc <Update_joy+0xd8>
		}
	}else{
		joy -> s_1 = 1;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]
		joy -> s_2 = 1;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	705a      	strb	r2, [r3, #1]
		joy -> s_3 = 1;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	709a      	strb	r2, [r3, #2]
		joy -> s_4 = 1;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	70da      	strb	r2, [r3, #3]
	}
}
 8000fda:	e000      	b.n	8000fde <Update_joy+0xda>
	if(!s_1 || !s_2 || !s_3 || !s_4){
 8000fdc:	bf00      	nop
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000fe8:	48000400 	.word	0x48000400
 8000fec:	48000800 	.word	0x48000800
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000038 	.word	0x20000038

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffc:	f001 fc91 	bl	8002922 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001000:	f000 f8cc 	bl	800119c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001004:	f000 fb98 	bl	8001738 <MX_GPIO_Init>
  MX_DMA_Init();
 8001008:	f000 fb5c 	bl	80016c4 <MX_DMA_Init>
  MX_TIM1_Init();
 800100c:	f000 f988 	bl	8001320 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001010:	f000 fa36 	bl	8001480 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001014:	f000 fa82 	bl	800151c <MX_TIM4_Init>
  MX_ADC1_Init();
 8001018:	f000 f90a 	bl	8001230 <MX_ADC1_Init>
  MX_TIM16_Init();
 800101c:	f000 fad4 	bl	80015c8 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8001020:	f000 fb02 	bl	8001628 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //Update command timer
  HAL_TIM_Base_Start_IT(&htim3);
 8001024:	484a      	ldr	r0, [pc, #296]	@ (8001150 <main+0x158>)
 8001026:	f005 fa1f 	bl	8006468 <HAL_TIM_Base_Start_IT>

  //PWM generator
  HAL_TIM_Base_Start(&htim1);
 800102a:	484a      	ldr	r0, [pc, #296]	@ (8001154 <main+0x15c>)
 800102c:	f005 f9ac 	bl	8006388 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001030:	2100      	movs	r1, #0
 8001032:	4848      	ldr	r0, [pc, #288]	@ (8001154 <main+0x15c>)
 8001034:	f005 fafe 	bl	8006634 <HAL_TIM_PWM_Start>

  //Encoder reader
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001038:	213c      	movs	r1, #60	@ 0x3c
 800103a:	4847      	ldr	r0, [pc, #284]	@ (8001158 <main+0x160>)
 800103c:	f005 fd28 	bl	8006a90 <HAL_TIM_Encoder_Start>
  QEI_init(&encoder, 8192, 8000, 65536);
 8001040:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001044:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001048:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800104c:	4843      	ldr	r0, [pc, #268]	@ (800115c <main+0x164>)
 800104e:	f001 f8c8 	bl	80021e2 <QEI_init>

  //Current reader
  ADC_init(&hadc1, &current_sensor);
 8001052:	4943      	ldr	r1, [pc, #268]	@ (8001160 <main+0x168>)
 8001054:	4843      	ldr	r0, [pc, #268]	@ (8001164 <main+0x16c>)
 8001056:	f7ff ff45 	bl	8000ee4 <ADC_init>

  //Position PID
  PID_init(&p_pid, p_kp, p_ki, p_kd, 0.001);
 800105a:	4b43      	ldr	r3, [pc, #268]	@ (8001168 <main+0x170>)
 800105c:	edd3 7a00 	vldr	s15, [r3]
 8001060:	4b42      	ldr	r3, [pc, #264]	@ (800116c <main+0x174>)
 8001062:	ed93 7a00 	vldr	s14, [r3]
 8001066:	4b42      	ldr	r3, [pc, #264]	@ (8001170 <main+0x178>)
 8001068:	edd3 6a00 	vldr	s13, [r3]
 800106c:	eddf 1a41 	vldr	s3, [pc, #260]	@ 8001174 <main+0x17c>
 8001070:	eeb0 1a66 	vmov.f32	s2, s13
 8001074:	eef0 0a47 	vmov.f32	s1, s14
 8001078:	eeb0 0a67 	vmov.f32	s0, s15
 800107c:	483e      	ldr	r0, [pc, #248]	@ (8001178 <main+0x180>)
 800107e:	f000 feab 	bl	8001dd8 <PID_init>
  PID_init(&v_pid, v_kp, v_ki, v_kd, 0.000125);
 8001082:	4b3e      	ldr	r3, [pc, #248]	@ (800117c <main+0x184>)
 8001084:	edd3 7a00 	vldr	s15, [r3]
 8001088:	4b3d      	ldr	r3, [pc, #244]	@ (8001180 <main+0x188>)
 800108a:	ed93 7a00 	vldr	s14, [r3]
 800108e:	4b3d      	ldr	r3, [pc, #244]	@ (8001184 <main+0x18c>)
 8001090:	edd3 6a00 	vldr	s13, [r3]
 8001094:	eddf 1a3c 	vldr	s3, [pc, #240]	@ 8001188 <main+0x190>
 8001098:	eeb0 1a66 	vmov.f32	s2, s13
 800109c:	eef0 0a47 	vmov.f32	s1, s14
 80010a0:	eeb0 0a67 	vmov.f32	s0, s15
 80010a4:	4839      	ldr	r0, [pc, #228]	@ (800118c <main+0x194>)
 80010a6:	f000 fe97 	bl	8001dd8 <PID_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(mode == 1){
 80010aa:	4b39      	ldr	r3, [pc, #228]	@ (8001190 <main+0x198>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d1fb      	bne.n	80010aa <main+0xb2>
		  Update_joy(&joy);
 80010b2:	4838      	ldr	r0, [pc, #224]	@ (8001194 <main+0x19c>)
 80010b4:	f7ff ff26 	bl	8000f04 <Update_joy>
		  if (!joy.s_1 && joy.s_2 && joy.s_3 && joy.s_4){
 80010b8:	4b36      	ldr	r3, [pc, #216]	@ (8001194 <main+0x19c>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d111      	bne.n	80010e4 <main+0xec>
 80010c0:	4b34      	ldr	r3, [pc, #208]	@ (8001194 <main+0x19c>)
 80010c2:	785b      	ldrb	r3, [r3, #1]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00d      	beq.n	80010e4 <main+0xec>
 80010c8:	4b32      	ldr	r3, [pc, #200]	@ (8001194 <main+0x19c>)
 80010ca:	789b      	ldrb	r3, [r3, #2]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d009      	beq.n	80010e4 <main+0xec>
 80010d0:	4b30      	ldr	r3, [pc, #192]	@ (8001194 <main+0x19c>)
 80010d2:	78db      	ldrb	r3, [r3, #3]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d005      	beq.n	80010e4 <main+0xec>
			  // switch 1 has pushed
			  jog += 20; // Move up 20 mm.
 80010d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001198 <main+0x1a0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	3314      	adds	r3, #20
 80010de:	4a2e      	ldr	r2, [pc, #184]	@ (8001198 <main+0x1a0>)
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	e034      	b.n	800114e <main+0x156>
		  }else if (joy.s_1 && !joy.s_2 && joy.s_3 && joy.s_4){
 80010e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001194 <main+0x19c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d011      	beq.n	8001110 <main+0x118>
 80010ec:	4b29      	ldr	r3, [pc, #164]	@ (8001194 <main+0x19c>)
 80010ee:	785b      	ldrb	r3, [r3, #1]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d10d      	bne.n	8001110 <main+0x118>
 80010f4:	4b27      	ldr	r3, [pc, #156]	@ (8001194 <main+0x19c>)
 80010f6:	789b      	ldrb	r3, [r3, #2]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d009      	beq.n	8001110 <main+0x118>
 80010fc:	4b25      	ldr	r3, [pc, #148]	@ (8001194 <main+0x19c>)
 80010fe:	78db      	ldrb	r3, [r3, #3]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d005      	beq.n	8001110 <main+0x118>
			  // switch 2 has pushed
			  jog -= 20; // Move down 20 mm.
 8001104:	4b24      	ldr	r3, [pc, #144]	@ (8001198 <main+0x1a0>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	3b14      	subs	r3, #20
 800110a:	4a23      	ldr	r2, [pc, #140]	@ (8001198 <main+0x1a0>)
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	e01e      	b.n	800114e <main+0x156>
		  }else if (joy.s_1 && joy.s_2 && !joy.s_3 && joy.s_4){
 8001110:	4b20      	ldr	r3, [pc, #128]	@ (8001194 <main+0x19c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0c8      	beq.n	80010aa <main+0xb2>
 8001118:	4b1e      	ldr	r3, [pc, #120]	@ (8001194 <main+0x19c>)
 800111a:	785b      	ldrb	r3, [r3, #1]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0c4      	beq.n	80010aa <main+0xb2>
 8001120:	4b1c      	ldr	r3, [pc, #112]	@ (8001194 <main+0x19c>)
 8001122:	789b      	ldrb	r3, [r3, #2]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1c0      	bne.n	80010aa <main+0xb2>
 8001128:	4b1a      	ldr	r3, [pc, #104]	@ (8001194 <main+0x19c>)
 800112a:	78db      	ldrb	r3, [r3, #3]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <main+0x140>
			  // switch 3 has pushed
			  mode = 0; // Change mode to Automatic
 8001130:	4b17      	ldr	r3, [pc, #92]	@ (8001190 <main+0x198>)
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
 8001136:	e7b8      	b.n	80010aa <main+0xb2>
		  }else if (joy.s_1 && joy.s_2 && joy.s_3 && !joy.s_4){
 8001138:	4b16      	ldr	r3, [pc, #88]	@ (8001194 <main+0x19c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0b4      	beq.n	80010aa <main+0xb2>
 8001140:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <main+0x19c>)
 8001142:	785b      	ldrb	r3, [r3, #1]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0b0      	beq.n	80010aa <main+0xb2>
 8001148:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <main+0x19c>)
 800114a:	789b      	ldrb	r3, [r3, #2]
 800114c:	2b00      	cmp	r3, #0
	  if(mode == 1){
 800114e:	e7ac      	b.n	80010aa <main+0xb2>
 8001150:	200001d8 	.word	0x200001d8
 8001154:	2000010c 	.word	0x2000010c
 8001158:	200002a4 	.word	0x200002a4
 800115c:	200006e8 	.word	0x200006e8
 8001160:	2000061c 	.word	0x2000061c
 8001164:	20000040 	.word	0x20000040
 8001168:	20000008 	.word	0x20000008
 800116c:	20000770 	.word	0x20000770
 8001170:	20000774 	.word	0x20000774
 8001174:	3a83126f 	.word	0x3a83126f
 8001178:	20000758 	.word	0x20000758
 800117c:	20000004 	.word	0x20000004
 8001180:	20000748 	.word	0x20000748
 8001184:	2000074c 	.word	0x2000074c
 8001188:	3903126f 	.word	0x3903126f
 800118c:	20000730 	.word	0x20000730
 8001190:	20000002 	.word	0x20000002
 8001194:	20000604 	.word	0x20000604
 8001198:	20000608 	.word	0x20000608

0800119c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b094      	sub	sp, #80	@ 0x50
 80011a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a2:	f107 0318 	add.w	r3, r7, #24
 80011a6:	2238      	movs	r2, #56	@ 0x38
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f008 fa50 	bl	8009650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80011be:	2000      	movs	r0, #0
 80011c0:	f004 f84e 	bl	8005260 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011c4:	2301      	movs	r3, #1
 80011c6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011cc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ce:	2302      	movs	r3, #2
 80011d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011d2:	2303      	movs	r3, #3
 80011d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80011d6:	2306      	movs	r3, #6
 80011d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80011da:	2355      	movs	r3, #85	@ 0x55
 80011dc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011de:	2302      	movs	r3, #2
 80011e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011e2:	2302      	movs	r3, #2
 80011e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011e6:	2302      	movs	r3, #2
 80011e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ea:	f107 0318 	add.w	r3, r7, #24
 80011ee:	4618      	mov	r0, r3
 80011f0:	f004 f8ea 	bl	80053c8 <HAL_RCC_OscConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0x62>
  {
    Error_Handler();
 80011fa:	f000 fde7 	bl	8001dcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fe:	230f      	movs	r3, #15
 8001200:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001202:	2303      	movs	r3, #3
 8001204:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2104      	movs	r1, #4
 8001216:	4618      	mov	r0, r3
 8001218:	f004 fbe8 	bl	80059ec <HAL_RCC_ClockConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001222:	f000 fdd3 	bl	8001dcc <Error_Handler>
  }
}
 8001226:	bf00      	nop
 8001228:	3750      	adds	r7, #80	@ 0x50
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08c      	sub	sp, #48	@ 0x30
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001236:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	2220      	movs	r2, #32
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f008 fa01 	bl	8009650 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800124e:	4b32      	ldr	r3, [pc, #200]	@ (8001318 <MX_ADC1_Init+0xe8>)
 8001250:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001254:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001256:	4b30      	ldr	r3, [pc, #192]	@ (8001318 <MX_ADC1_Init+0xe8>)
 8001258:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800125c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800125e:	4b2e      	ldr	r3, [pc, #184]	@ (8001318 <MX_ADC1_Init+0xe8>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001264:	4b2c      	ldr	r3, [pc, #176]	@ (8001318 <MX_ADC1_Init+0xe8>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800126a:	4b2b      	ldr	r3, [pc, #172]	@ (8001318 <MX_ADC1_Init+0xe8>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001270:	4b29      	ldr	r3, [pc, #164]	@ (8001318 <MX_ADC1_Init+0xe8>)
 8001272:	2200      	movs	r2, #0
 8001274:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001276:	4b28      	ldr	r3, [pc, #160]	@ (8001318 <MX_ADC1_Init+0xe8>)
 8001278:	2204      	movs	r2, #4
 800127a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800127c:	4b26      	ldr	r3, [pc, #152]	@ (8001318 <MX_ADC1_Init+0xe8>)
 800127e:	2200      	movs	r2, #0
 8001280:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001282:	4b25      	ldr	r3, [pc, #148]	@ (8001318 <MX_ADC1_Init+0xe8>)
 8001284:	2201      	movs	r2, #1
 8001286:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001288:	4b23      	ldr	r3, [pc, #140]	@ (8001318 <MX_ADC1_Init+0xe8>)
 800128a:	2201      	movs	r2, #1
 800128c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800128e:	4b22      	ldr	r3, [pc, #136]	@ (8001318 <MX_ADC1_Init+0xe8>)
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001296:	4b20      	ldr	r3, [pc, #128]	@ (8001318 <MX_ADC1_Init+0xe8>)
 8001298:	2200      	movs	r2, #0
 800129a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800129c:	4b1e      	ldr	r3, [pc, #120]	@ (8001318 <MX_ADC1_Init+0xe8>)
 800129e:	2200      	movs	r2, #0
 80012a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001318 <MX_ADC1_Init+0xe8>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001318 <MX_ADC1_Init+0xe8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80012b0:	4b19      	ldr	r3, [pc, #100]	@ (8001318 <MX_ADC1_Init+0xe8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012b8:	4817      	ldr	r0, [pc, #92]	@ (8001318 <MX_ADC1_Init+0xe8>)
 80012ba:	f001 fde3 	bl	8002e84 <HAL_ADC_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80012c4:	f000 fd82 	bl	8001dcc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012c8:	2300      	movs	r3, #0
 80012ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012d0:	4619      	mov	r1, r3
 80012d2:	4811      	ldr	r0, [pc, #68]	@ (8001318 <MX_ADC1_Init+0xe8>)
 80012d4:	f003 f8b0 	bl	8004438 <HAL_ADCEx_MultiModeConfigChannel>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80012de:	f000 fd75 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <MX_ADC1_Init+0xec>)
 80012e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012e6:	2306      	movs	r3, #6
 80012e8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012ee:	237f      	movs	r3, #127	@ 0x7f
 80012f0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012f2:	2304      	movs	r3, #4
 80012f4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	4619      	mov	r1, r3
 80012fe:	4806      	ldr	r0, [pc, #24]	@ (8001318 <MX_ADC1_Init+0xe8>)
 8001300:	f002 fad8 	bl	80038b4 <HAL_ADC_ConfigChannel>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800130a:	f000 fd5f 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	3730      	adds	r7, #48	@ 0x30
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000040 	.word	0x20000040
 800131c:	04300002 	.word	0x04300002

08001320 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b09c      	sub	sp, #112	@ 0x70
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001326:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001334:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001340:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
 8001350:	615a      	str	r2, [r3, #20]
 8001352:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	2234      	movs	r2, #52	@ 0x34
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f008 f978 	bl	8009650 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001360:	4b45      	ldr	r3, [pc, #276]	@ (8001478 <MX_TIM1_Init+0x158>)
 8001362:	4a46      	ldr	r2, [pc, #280]	@ (800147c <MX_TIM1_Init+0x15c>)
 8001364:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8001366:	4b44      	ldr	r3, [pc, #272]	@ (8001478 <MX_TIM1_Init+0x158>)
 8001368:	22a9      	movs	r2, #169	@ 0xa9
 800136a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136c:	4b42      	ldr	r3, [pc, #264]	@ (8001478 <MX_TIM1_Init+0x158>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001372:	4b41      	ldr	r3, [pc, #260]	@ (8001478 <MX_TIM1_Init+0x158>)
 8001374:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001378:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137a:	4b3f      	ldr	r3, [pc, #252]	@ (8001478 <MX_TIM1_Init+0x158>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001380:	4b3d      	ldr	r3, [pc, #244]	@ (8001478 <MX_TIM1_Init+0x158>)
 8001382:	2200      	movs	r2, #0
 8001384:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001386:	4b3c      	ldr	r3, [pc, #240]	@ (8001478 <MX_TIM1_Init+0x158>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800138c:	483a      	ldr	r0, [pc, #232]	@ (8001478 <MX_TIM1_Init+0x158>)
 800138e:	f004 ff97 	bl	80062c0 <HAL_TIM_Base_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001398:	f000 fd18 	bl	8001dcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800139c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013a0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013a2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80013a6:	4619      	mov	r1, r3
 80013a8:	4833      	ldr	r0, [pc, #204]	@ (8001478 <MX_TIM1_Init+0x158>)
 80013aa:	f005 fe8d 	bl	80070c8 <HAL_TIM_ConfigClockSource>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80013b4:	f000 fd0a 	bl	8001dcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013b8:	482f      	ldr	r0, [pc, #188]	@ (8001478 <MX_TIM1_Init+0x158>)
 80013ba:	f005 f8cd 	bl	8006558 <HAL_TIM_PWM_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80013c4:	f000 fd02 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c8:	2300      	movs	r3, #0
 80013ca:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013cc:	2300      	movs	r3, #0
 80013ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013d8:	4619      	mov	r1, r3
 80013da:	4827      	ldr	r0, [pc, #156]	@ (8001478 <MX_TIM1_Init+0x158>)
 80013dc:	f006 fcfa 	bl	8007dd4 <HAL_TIMEx_MasterConfigSynchronization>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80013e6:	f000 fcf1 	bl	8001dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ea:	2360      	movs	r3, #96	@ 0x60
 80013ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f2:	2300      	movs	r3, #0
 80013f4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013f6:	2300      	movs	r3, #0
 80013f8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80013fa:	2304      	movs	r3, #4
 80013fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013fe:	2300      	movs	r3, #0
 8001400:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001402:	2300      	movs	r3, #0
 8001404:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001406:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800140a:	2200      	movs	r2, #0
 800140c:	4619      	mov	r1, r3
 800140e:	481a      	ldr	r0, [pc, #104]	@ (8001478 <MX_TIM1_Init+0x158>)
 8001410:	f005 fd46 	bl	8006ea0 <HAL_TIM_PWM_ConfigChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800141a:	f000 fcd7 	bl	8001dcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001432:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001436:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800143c:	2300      	movs	r3, #0
 800143e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001444:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001448:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800144e:	2300      	movs	r3, #0
 8001450:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	4619      	mov	r1, r3
 800145a:	4807      	ldr	r0, [pc, #28]	@ (8001478 <MX_TIM1_Init+0x158>)
 800145c:	f006 fd50 	bl	8007f00 <HAL_TIMEx_ConfigBreakDeadTime>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8001466:	f000 fcb1 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800146a:	4803      	ldr	r0, [pc, #12]	@ (8001478 <MX_TIM1_Init+0x158>)
 800146c:	f001 f896 	bl	800259c <HAL_TIM_MspPostInit>

}
 8001470:	bf00      	nop
 8001472:	3770      	adds	r7, #112	@ 0x70
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	2000010c 	.word	0x2000010c
 800147c:	40012c00 	.word	0x40012c00

08001480 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001486:	f107 0310 	add.w	r3, r7, #16
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800149e:	4b1d      	ldr	r3, [pc, #116]	@ (8001514 <MX_TIM3_Init+0x94>)
 80014a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001518 <MX_TIM3_Init+0x98>)
 80014a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 80014a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <MX_TIM3_Init+0x94>)
 80014a6:	22a9      	movs	r2, #169	@ 0xa9
 80014a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001514 <MX_TIM3_Init+0x94>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80014b0:	4b18      	ldr	r3, [pc, #96]	@ (8001514 <MX_TIM3_Init+0x94>)
 80014b2:	2263      	movs	r2, #99	@ 0x63
 80014b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b6:	4b17      	ldr	r3, [pc, #92]	@ (8001514 <MX_TIM3_Init+0x94>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014bc:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <MX_TIM3_Init+0x94>)
 80014be:	2200      	movs	r2, #0
 80014c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014c2:	4814      	ldr	r0, [pc, #80]	@ (8001514 <MX_TIM3_Init+0x94>)
 80014c4:	f004 fefc 	bl	80062c0 <HAL_TIM_Base_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80014ce:	f000 fc7d 	bl	8001dcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	4619      	mov	r1, r3
 80014de:	480d      	ldr	r0, [pc, #52]	@ (8001514 <MX_TIM3_Init+0x94>)
 80014e0:	f005 fdf2 	bl	80070c8 <HAL_TIM_ConfigClockSource>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80014ea:	f000 fc6f 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	4619      	mov	r1, r3
 80014fa:	4806      	ldr	r0, [pc, #24]	@ (8001514 <MX_TIM3_Init+0x94>)
 80014fc:	f006 fc6a 	bl	8007dd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001506:	f000 fc61 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	3720      	adds	r7, #32
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200001d8 	.word	0x200001d8
 8001518:	40000400 	.word	0x40000400

0800151c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08c      	sub	sp, #48	@ 0x30
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	2224      	movs	r2, #36	@ 0x24
 8001528:	2100      	movs	r1, #0
 800152a:	4618      	mov	r0, r3
 800152c:	f008 f890 	bl	8009650 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001530:	463b      	mov	r3, r7
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800153a:	4b21      	ldr	r3, [pc, #132]	@ (80015c0 <MX_TIM4_Init+0xa4>)
 800153c:	4a21      	ldr	r2, [pc, #132]	@ (80015c4 <MX_TIM4_Init+0xa8>)
 800153e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001540:	4b1f      	ldr	r3, [pc, #124]	@ (80015c0 <MX_TIM4_Init+0xa4>)
 8001542:	2200      	movs	r2, #0
 8001544:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001546:	4b1e      	ldr	r3, [pc, #120]	@ (80015c0 <MX_TIM4_Init+0xa4>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800154c:	4b1c      	ldr	r3, [pc, #112]	@ (80015c0 <MX_TIM4_Init+0xa4>)
 800154e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001552:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001554:	4b1a      	ldr	r3, [pc, #104]	@ (80015c0 <MX_TIM4_Init+0xa4>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155a:	4b19      	ldr	r3, [pc, #100]	@ (80015c0 <MX_TIM4_Init+0xa4>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001560:	2303      	movs	r3, #3
 8001562:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001564:	2300      	movs	r3, #0
 8001566:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001568:	2301      	movs	r3, #1
 800156a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001574:	2300      	movs	r3, #0
 8001576:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001578:	2301      	movs	r3, #1
 800157a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800157c:	2300      	movs	r3, #0
 800157e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	4619      	mov	r1, r3
 800158a:	480d      	ldr	r0, [pc, #52]	@ (80015c0 <MX_TIM4_Init+0xa4>)
 800158c:	f005 f9cc 	bl	8006928 <HAL_TIM_Encoder_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001596:	f000 fc19 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015a2:	463b      	mov	r3, r7
 80015a4:	4619      	mov	r1, r3
 80015a6:	4806      	ldr	r0, [pc, #24]	@ (80015c0 <MX_TIM4_Init+0xa4>)
 80015a8:	f006 fc14 	bl	8007dd4 <HAL_TIMEx_MasterConfigSynchronization>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80015b2:	f000 fc0b 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	3730      	adds	r7, #48	@ 0x30
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200002a4 	.word	0x200002a4
 80015c4:	40000800 	.word	0x40000800

080015c8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80015cc:	4b14      	ldr	r3, [pc, #80]	@ (8001620 <MX_TIM16_Init+0x58>)
 80015ce:	4a15      	ldr	r2, [pc, #84]	@ (8001624 <MX_TIM16_Init+0x5c>)
 80015d0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 80015d2:	4b13      	ldr	r3, [pc, #76]	@ (8001620 <MX_TIM16_Init+0x58>)
 80015d4:	22a9      	movs	r2, #169	@ 0xa9
 80015d6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d8:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <MX_TIM16_Init+0x58>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <MX_TIM16_Init+0x58>)
 80015e0:	f240 4279 	movw	r2, #1145	@ 0x479
 80015e4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <MX_TIM16_Init+0x58>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <MX_TIM16_Init+0x58>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <MX_TIM16_Init+0x58>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80015f8:	4809      	ldr	r0, [pc, #36]	@ (8001620 <MX_TIM16_Init+0x58>)
 80015fa:	f004 fe61 	bl	80062c0 <HAL_TIM_Base_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001604:	f000 fbe2 	bl	8001dcc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001608:	2108      	movs	r1, #8
 800160a:	4805      	ldr	r0, [pc, #20]	@ (8001620 <MX_TIM16_Init+0x58>)
 800160c:	f005 f924 	bl	8006858 <HAL_TIM_OnePulse_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8001616:	f000 fbd9 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000370 	.word	0x20000370
 8001624:	40014400 	.word	0x40014400

08001628 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800162c:	4b23      	ldr	r3, [pc, #140]	@ (80016bc <MX_USART2_UART_Init+0x94>)
 800162e:	4a24      	ldr	r2, [pc, #144]	@ (80016c0 <MX_USART2_UART_Init+0x98>)
 8001630:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001632:	4b22      	ldr	r3, [pc, #136]	@ (80016bc <MX_USART2_UART_Init+0x94>)
 8001634:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001638:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800163a:	4b20      	ldr	r3, [pc, #128]	@ (80016bc <MX_USART2_UART_Init+0x94>)
 800163c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001640:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001642:	4b1e      	ldr	r3, [pc, #120]	@ (80016bc <MX_USART2_UART_Init+0x94>)
 8001644:	2200      	movs	r2, #0
 8001646:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001648:	4b1c      	ldr	r3, [pc, #112]	@ (80016bc <MX_USART2_UART_Init+0x94>)
 800164a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800164e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001650:	4b1a      	ldr	r3, [pc, #104]	@ (80016bc <MX_USART2_UART_Init+0x94>)
 8001652:	220c      	movs	r2, #12
 8001654:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001656:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <MX_USART2_UART_Init+0x94>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800165c:	4b17      	ldr	r3, [pc, #92]	@ (80016bc <MX_USART2_UART_Init+0x94>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001662:	4b16      	ldr	r3, [pc, #88]	@ (80016bc <MX_USART2_UART_Init+0x94>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001668:	4b14      	ldr	r3, [pc, #80]	@ (80016bc <MX_USART2_UART_Init+0x94>)
 800166a:	2200      	movs	r2, #0
 800166c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800166e:	4b13      	ldr	r3, [pc, #76]	@ (80016bc <MX_USART2_UART_Init+0x94>)
 8001670:	2200      	movs	r2, #0
 8001672:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001674:	4811      	ldr	r0, [pc, #68]	@ (80016bc <MX_USART2_UART_Init+0x94>)
 8001676:	f006 fd27 	bl	80080c8 <HAL_UART_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8001680:	f000 fba4 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001684:	2100      	movs	r1, #0
 8001686:	480d      	ldr	r0, [pc, #52]	@ (80016bc <MX_USART2_UART_Init+0x94>)
 8001688:	f007 ff17 	bl	80094ba <HAL_UARTEx_SetTxFifoThreshold>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8001692:	f000 fb9b 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001696:	2100      	movs	r1, #0
 8001698:	4808      	ldr	r0, [pc, #32]	@ (80016bc <MX_USART2_UART_Init+0x94>)
 800169a:	f007 ff4c 	bl	8009536 <HAL_UARTEx_SetRxFifoThreshold>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80016a4:	f000 fb92 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80016a8:	4804      	ldr	r0, [pc, #16]	@ (80016bc <MX_USART2_UART_Init+0x94>)
 80016aa:	f007 fecd 	bl	8009448 <HAL_UARTEx_DisableFifoMode>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80016b4:	f000 fb8a 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	2000043c 	.word	0x2000043c
 80016c0:	40004400 	.word	0x40004400

080016c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80016ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001734 <MX_DMA_Init+0x70>)
 80016cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016ce:	4a19      	ldr	r2, [pc, #100]	@ (8001734 <MX_DMA_Init+0x70>)
 80016d0:	f043 0304 	orr.w	r3, r3, #4
 80016d4:	6493      	str	r3, [r2, #72]	@ 0x48
 80016d6:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <MX_DMA_Init+0x70>)
 80016d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016e2:	4b14      	ldr	r3, [pc, #80]	@ (8001734 <MX_DMA_Init+0x70>)
 80016e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016e6:	4a13      	ldr	r2, [pc, #76]	@ (8001734 <MX_DMA_Init+0x70>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6493      	str	r3, [r2, #72]	@ 0x48
 80016ee:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <MX_DMA_Init+0x70>)
 80016f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	200b      	movs	r0, #11
 8001700:	f003 f87d 	bl	80047fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001704:	200b      	movs	r0, #11
 8001706:	f003 f894 	bl	8004832 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2100      	movs	r1, #0
 800170e:	200c      	movs	r0, #12
 8001710:	f003 f875 	bl	80047fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001714:	200c      	movs	r0, #12
 8001716:	f003 f88c 	bl	8004832 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
 800171e:	200d      	movs	r0, #13
 8001720:	f003 f86d 	bl	80047fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001724:	200d      	movs	r0, #13
 8001726:	f003 f884 	bl	8004832 <HAL_NVIC_EnableIRQ>

}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000

08001738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	@ 0x28
 800173c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174e:	4b66      	ldr	r3, [pc, #408]	@ (80018e8 <MX_GPIO_Init+0x1b0>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001752:	4a65      	ldr	r2, [pc, #404]	@ (80018e8 <MX_GPIO_Init+0x1b0>)
 8001754:	f043 0304 	orr.w	r3, r3, #4
 8001758:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800175a:	4b63      	ldr	r3, [pc, #396]	@ (80018e8 <MX_GPIO_Init+0x1b0>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001766:	4b60      	ldr	r3, [pc, #384]	@ (80018e8 <MX_GPIO_Init+0x1b0>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176a:	4a5f      	ldr	r2, [pc, #380]	@ (80018e8 <MX_GPIO_Init+0x1b0>)
 800176c:	f043 0320 	orr.w	r3, r3, #32
 8001770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001772:	4b5d      	ldr	r3, [pc, #372]	@ (80018e8 <MX_GPIO_Init+0x1b0>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001776:	f003 0320 	and.w	r3, r3, #32
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	4b5a      	ldr	r3, [pc, #360]	@ (80018e8 <MX_GPIO_Init+0x1b0>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001782:	4a59      	ldr	r2, [pc, #356]	@ (80018e8 <MX_GPIO_Init+0x1b0>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800178a:	4b57      	ldr	r3, [pc, #348]	@ (80018e8 <MX_GPIO_Init+0x1b0>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001796:	4b54      	ldr	r3, [pc, #336]	@ (80018e8 <MX_GPIO_Init+0x1b0>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179a:	4a53      	ldr	r2, [pc, #332]	@ (80018e8 <MX_GPIO_Init+0x1b0>)
 800179c:	f043 0302 	orr.w	r3, r3, #2
 80017a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017a2:	4b51      	ldr	r3, [pc, #324]	@ (80018e8 <MX_GPIO_Init+0x1b0>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Direaction_motor_Pin|Emergency_light_Pin, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80017b4:	484d      	ldr	r0, [pc, #308]	@ (80018ec <MX_GPIO_Init+0x1b4>)
 80017b6:	f003 fd23 	bl	8005200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Solenoid_valve_push_Pin, GPIO_PIN_RESET);
 80017ba:	2200      	movs	r2, #0
 80017bc:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80017c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017c4:	f003 fd1c 	bl	8005200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin, GPIO_PIN_RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	f240 4116 	movw	r1, #1046	@ 0x416
 80017ce:	4848      	ldr	r0, [pc, #288]	@ (80018f0 <MX_GPIO_Init+0x1b8>)
 80017d0:	f003 fd16 	bl	8005200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4619      	mov	r1, r3
 80017ea:	4840      	ldr	r0, [pc, #256]	@ (80018ec <MX_GPIO_Init+0x1b4>)
 80017ec:	f003 fb6e 	bl	8004ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : Direaction_motor_Pin */
  GPIO_InitStruct.Pin = Direaction_motor_Pin;
 80017f0:	2302      	movs	r3, #2
 80017f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f4:	2301      	movs	r3, #1
 80017f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direaction_motor_GPIO_Port, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	4839      	ldr	r0, [pc, #228]	@ (80018ec <MX_GPIO_Init+0x1b4>)
 8001808:	f003 fb60 	bl	8004ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Solenoid_valve_push_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Solenoid_valve_push_Pin;
 800180c:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001812:	2301      	movs	r3, #1
 8001814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2300      	movs	r3, #0
 800181c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	4619      	mov	r1, r3
 8001824:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001828:	f003 fb50 	bl	8004ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : joy_switch_3_Pin joy_switch_4_Pin Set_home_Pin Reed_switch_pull_Pin */
  GPIO_InitStruct.Pin = joy_switch_3_Pin|joy_switch_4_Pin|Set_home_Pin|Reed_switch_pull_Pin;
 800182c:	23f0      	movs	r3, #240	@ 0xf0
 800182e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001830:	2300      	movs	r3, #0
 8001832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	4619      	mov	r1, r3
 800183e:	482b      	ldr	r0, [pc, #172]	@ (80018ec <MX_GPIO_Init+0x1b4>)
 8001840:	f003 fb44 	bl	8004ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : Pilot_controller_error_Pin Pilot_motor_error_Pin Solenoid_valve_pull_Pin Solenoid_valve_vacuum_Pin */
  GPIO_InitStruct.Pin = Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin;
 8001844:	f240 4316 	movw	r3, #1046	@ 0x416
 8001848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184a:	2301      	movs	r3, #1
 800184c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4619      	mov	r1, r3
 800185c:	4824      	ldr	r0, [pc, #144]	@ (80018f0 <MX_GPIO_Init+0x1b8>)
 800185e:	f003 fb35 	bl	8004ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : Proximity_Pin Emergency_switch_Pin */
  GPIO_InitStruct.Pin = Proximity_Pin|Emergency_switch_Pin;
 8001862:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8001866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001868:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800186c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4619      	mov	r1, r3
 8001878:	481d      	ldr	r0, [pc, #116]	@ (80018f0 <MX_GPIO_Init+0x1b8>)
 800187a:	f003 fb27 	bl	8004ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_light_Pin */
  GPIO_InitStruct.Pin = Emergency_light_Pin;
 800187e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001884:	2301      	movs	r3, #1
 8001886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Emergency_light_GPIO_Port, &GPIO_InitStruct);
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	4619      	mov	r1, r3
 8001896:	4815      	ldr	r0, [pc, #84]	@ (80018ec <MX_GPIO_Init+0x1b4>)
 8001898:	f003 fb18 	bl	8004ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : Reed_switch_push_Pin joy_switch_2_Pin */
  GPIO_InitStruct.Pin = Reed_switch_push_Pin|joy_switch_2_Pin;
 800189c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80018a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	4619      	mov	r1, r3
 80018b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018b4:	f003 fb0a 	bl	8004ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : joy_switch_1_Pin */
  GPIO_InitStruct.Pin = joy_switch_1_Pin;
 80018b8:	2320      	movs	r3, #32
 80018ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018bc:	2300      	movs	r3, #0
 80018be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(joy_switch_1_GPIO_Port, &GPIO_InitStruct);
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4619      	mov	r1, r3
 80018ca:	4809      	ldr	r0, [pc, #36]	@ (80018f0 <MX_GPIO_Init+0x1b8>)
 80018cc:	f003 fafe 	bl	8004ecc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018d0:	2200      	movs	r2, #0
 80018d2:	2100      	movs	r1, #0
 80018d4:	2028      	movs	r0, #40	@ 0x28
 80018d6:	f002 ff92 	bl	80047fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018da:	2028      	movs	r0, #40	@ 0x28
 80018dc:	f002 ffa9 	bl	8004832 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018e0:	bf00      	nop
 80018e2:	3728      	adds	r7, #40	@ 0x28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40021000 	.word	0x40021000
 80018ec:	48000800 	.word	0x48000800
 80018f0:	48000400 	.word	0x48000400

080018f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Main timer interrupt for run program with accuracy time
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80018f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018f8:	b08e      	sub	sp, #56	@ 0x38
 80018fa:	af02      	add	r7, sp, #8
 80018fc:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if(htim == &htim3){
 80018fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001900:	4ba8      	ldr	r3, [pc, #672]	@ (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001902:	429a      	cmp	r2, r3
 8001904:	f040 81a2 	bne.w	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
//		Update_qei(&encoder, &htim4);
//		Update_adc(&current_sensor);
		if(mode == 3){
 8001908:	4ba7      	ldr	r3, [pc, #668]	@ (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b03      	cmp	r3, #3
 800190e:	d138      	bne.n	8001982 <HAL_TIM_PeriodElapsedCallback+0x8e>
			sensor_test[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12); // Proximity
 8001910:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001914:	48a5      	ldr	r0, [pc, #660]	@ (8001bac <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001916:	f003 fc5b 	bl	80051d0 <HAL_GPIO_ReadPin>
 800191a:	4603      	mov	r3, r0
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2200      	movs	r2, #0
 8001920:	623b      	str	r3, [r7, #32]
 8001922:	627a      	str	r2, [r7, #36]	@ 0x24
 8001924:	4ba2      	ldr	r3, [pc, #648]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001926:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800192a:	e9c3 1200 	strd	r1, r2, [r3]
			sensor_test[1] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7); // Reed switch 1
 800192e:	2180      	movs	r1, #128	@ 0x80
 8001930:	48a0      	ldr	r0, [pc, #640]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001932:	f003 fc4d 	bl	80051d0 <HAL_GPIO_ReadPin>
 8001936:	4603      	mov	r3, r0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2200      	movs	r2, #0
 800193c:	61bb      	str	r3, [r7, #24]
 800193e:	61fa      	str	r2, [r7, #28]
 8001940:	4b9b      	ldr	r3, [pc, #620]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001942:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001946:	e9c3 1202 	strd	r1, r2, [r3, #8]
			sensor_test[2] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9); // Reed switch 2
 800194a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800194e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001952:	f003 fc3d 	bl	80051d0 <HAL_GPIO_ReadPin>
 8001956:	4603      	mov	r3, r0
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2200      	movs	r2, #0
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	617a      	str	r2, [r7, #20]
 8001960:	4b93      	ldr	r3, [pc, #588]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001962:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001966:	e9c3 1204 	strd	r1, r2, [r3, #16]
			sensor_test[3] = __HAL_TIM_GET_COUNTER(&htim4); // Encoder
 800196a:	4b93      	ldr	r3, [pc, #588]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001970:	2200      	movs	r2, #0
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	60fa      	str	r2, [r7, #12]
 8001976:	4b8e      	ldr	r3, [pc, #568]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001978:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800197c:	e9c3 1206 	strd	r1, r2, [r3, #24]
					homing_ts++;
				}
			}
		}
	}
}
 8001980:	e164      	b.n	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
		else if((homing == 0) && (encoder.mm > 500 || encoder.mm < 0)){
 8001982:	4b8e      	ldr	r3, [pc, #568]	@ (8001bbc <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d11a      	bne.n	80019c0 <HAL_TIM_PeriodElapsedCallback+0xcc>
 800198a:	4b8d      	ldr	r3, [pc, #564]	@ (8001bc0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800198c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001990:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8001bc4 <HAL_TIM_PeriodElapsedCallback+0x2d0>
 8001994:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199c:	dc07      	bgt.n	80019ae <HAL_TIM_PeriodElapsedCallback+0xba>
 800199e:	4b88      	ldr	r3, [pc, #544]	@ (8001bc0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80019a0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80019a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ac:	d508      	bpl.n	80019c0 <HAL_TIM_PeriodElapsedCallback+0xcc>
			Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 80019ae:	2300      	movs	r3, #0
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	2302      	movs	r3, #2
 80019b4:	4a7f      	ldr	r2, [pc, #508]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80019b6:	2100      	movs	r1, #0
 80019b8:	4883      	ldr	r0, [pc, #524]	@ (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80019ba:	f000 fb7b 	bl	80020b4 <Update_pwm>
 80019be:	e145      	b.n	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
		else if(mode == 0 || mode == 1){
 80019c0:	4b79      	ldr	r3, [pc, #484]	@ (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_TIM_PeriodElapsedCallback+0xdc>
 80019c8:	4b77      	ldr	r3, [pc, #476]	@ (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d13f      	bne.n	8001a50 <HAL_TIM_PeriodElapsedCallback+0x15c>
			Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, v_output);
 80019d0:	4b7e      	ldr	r3, [pc, #504]	@ (8001bcc <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	2302      	movs	r3, #2
 80019d8:	4a76      	ldr	r2, [pc, #472]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80019da:	2100      	movs	r1, #0
 80019dc:	487a      	ldr	r0, [pc, #488]	@ (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80019de:	f000 fb69 	bl	80020b4 <Update_pwm>
			if(mode == 0){ setpoint = 0;} // If mode == 0 : set point from base system
 80019e2:	4b71      	ldr	r3, [pc, #452]	@ (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d104      	bne.n	80019f4 <HAL_TIM_PeriodElapsedCallback+0x100>
 80019ea:	4b79      	ldr	r3, [pc, #484]	@ (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	e007      	b.n	8001a04 <HAL_TIM_PeriodElapsedCallback+0x110>
			else if(mode == 1){setpoint = 1;} // If mode == 1 : set point from joy
 80019f4:	4b6c      	ldr	r3, [pc, #432]	@ (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d103      	bne.n	8001a04 <HAL_TIM_PeriodElapsedCallback+0x110>
 80019fc:	4b74      	ldr	r3, [pc, #464]	@ (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80019fe:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001a02:	601a      	str	r2, [r3, #0]
			Update_velocity_control(test);
 8001a04:	4b73      	ldr	r3, [pc, #460]	@ (8001bd4 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	ee07 3a90 	vmov	s15, r3
 8001a0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a10:	eeb0 0a67 	vmov.f32	s0, s15
 8001a14:	f000 f9aa 	bl	8001d6c <Update_velocity_control>
			if (timestamp == 8){
 8001a18:	4b6f      	ldr	r3, [pc, #444]	@ (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1e:	f1a2 0108 	sub.w	r1, r2, #8
 8001a22:	430b      	orrs	r3, r1
 8001a24:	d106      	bne.n	8001a34 <HAL_TIM_PeriodElapsedCallback+0x140>
				timestamp = 0;
 8001a26:	496c      	ldr	r1, [pc, #432]	@ (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	f04f 0300 	mov.w	r3, #0
 8001a30:	e9c1 2300 	strd	r2, r3, [r1]
			timestamp++;
 8001a34:	4b68      	ldr	r3, [pc, #416]	@ (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3a:	1c51      	adds	r1, r2, #1
 8001a3c:	6039      	str	r1, [r7, #0]
 8001a3e:	f143 0300 	adc.w	r3, r3, #0
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	4b64      	ldr	r3, [pc, #400]	@ (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001a46:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001a4a:	e9c3 1200 	strd	r1, r2, [r3]
		else if(mode == 0 || mode == 1){
 8001a4e:	e0fd      	b.n	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
			repeat_cheack++;
 8001a50:	4b62      	ldr	r3, [pc, #392]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a56:	f112 0a01 	adds.w	sl, r2, #1
 8001a5a:	f143 0b00 	adc.w	fp, r3, #0
 8001a5e:	4b5f      	ldr	r3, [pc, #380]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001a60:	e9c3 ab00 	strd	sl, fp, [r3]
			if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)){
 8001a64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a68:	4850      	ldr	r0, [pc, #320]	@ (8001bac <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001a6a:	f003 fbb1 	bl	80051d0 <HAL_GPIO_ReadPin>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d112      	bne.n	8001a9a <HAL_TIM_PeriodElapsedCallback+0x1a6>
				repeat_cheack++;
 8001a74:	4b59      	ldr	r3, [pc, #356]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7a:	f112 0801 	adds.w	r8, r2, #1
 8001a7e:	f143 0900 	adc.w	r9, r3, #0
 8001a82:	4b56      	ldr	r3, [pc, #344]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001a84:	e9c3 8900 	strd	r8, r9, [r3]
				Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001a88:	2300      	movs	r3, #0
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	4a49      	ldr	r2, [pc, #292]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001a90:	2100      	movs	r1, #0
 8001a92:	484d      	ldr	r0, [pc, #308]	@ (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001a94:	f000 fb0e 	bl	80020b4 <Update_pwm>
}
 8001a98:	e0d8      	b.n	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
			else if(wait_command){
 8001a9a:	4b51      	ldr	r3, [pc, #324]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d03a      	beq.n	8001b18 <HAL_TIM_PeriodElapsedCallback+0x224>
				Update_joy(&joy);
 8001aa2:	4850      	ldr	r0, [pc, #320]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001aa4:	f7ff fa2e 	bl	8000f04 <Update_joy>
				if(!joy.s_1 && joy.s_2 && joy.s_3 && joy.s_4){
 8001aa8:	4b4e      	ldr	r3, [pc, #312]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d115      	bne.n	8001adc <HAL_TIM_PeriodElapsedCallback+0x1e8>
 8001ab0:	4b4c      	ldr	r3, [pc, #304]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001ab2:	785b      	ldrb	r3, [r3, #1]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d011      	beq.n	8001adc <HAL_TIM_PeriodElapsedCallback+0x1e8>
 8001ab8:	4b4a      	ldr	r3, [pc, #296]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001aba:	789b      	ldrb	r3, [r3, #2]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00d      	beq.n	8001adc <HAL_TIM_PeriodElapsedCallback+0x1e8>
 8001ac0:	4b48      	ldr	r3, [pc, #288]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001ac2:	78db      	ldrb	r3, [r3, #3]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d009      	beq.n	8001adc <HAL_TIM_PeriodElapsedCallback+0x1e8>
					mode = 0;
 8001ac8:	4b37      	ldr	r3, [pc, #220]	@ (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
					is_home = 0;
 8001ace:	4b46      	ldr	r3, [pc, #280]	@ (8001be8 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
					wait_command = 0;
 8001ad4:	4b42      	ldr	r3, [pc, #264]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
 8001ada:	e0b7      	b.n	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
				else if(joy.s_1 && !joy.s_2 && joy.s_3 && joy.s_4){
 8001adc:	4b41      	ldr	r3, [pc, #260]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 80b3 	beq.w	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
 8001ae6:	4b3f      	ldr	r3, [pc, #252]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001ae8:	785b      	ldrb	r3, [r3, #1]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f040 80ae 	bne.w	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
 8001af0:	4b3c      	ldr	r3, [pc, #240]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001af2:	789b      	ldrb	r3, [r3, #2]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 80a9 	beq.w	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
 8001afa:	4b3a      	ldr	r3, [pc, #232]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001afc:	78db      	ldrb	r3, [r3, #3]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 80a4 	beq.w	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
					mode = 1;
 8001b04:	4b28      	ldr	r3, [pc, #160]	@ (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	701a      	strb	r2, [r3, #0]
					is_home = 0;
 8001b0a:	4b37      	ldr	r3, [pc, #220]	@ (8001be8 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
					wait_command = 0;
 8001b10:	4b33      	ldr	r3, [pc, #204]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
}
 8001b16:	e099      	b.n	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
			else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)){
 8001b18:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b1c:	4823      	ldr	r0, [pc, #140]	@ (8001bac <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001b1e:	f003 fb57 	bl	80051d0 <HAL_GPIO_ReadPin>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 8091 	beq.w	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
				Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	2302      	movs	r3, #2
 8001b30:	4a20      	ldr	r2, [pc, #128]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001b32:	2100      	movs	r1, #0
 8001b34:	4824      	ldr	r0, [pc, #144]	@ (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001b36:	f000 fabd 	bl	80020b4 <Update_pwm>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b40:	481c      	ldr	r0, [pc, #112]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001b42:	f003 fb5d 	bl	8005200 <HAL_GPIO_WritePin>
				if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6)){
 8001b46:	2140      	movs	r1, #64	@ 0x40
 8001b48:	481a      	ldr	r0, [pc, #104]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001b4a:	f003 fb41 	bl	80051d0 <HAL_GPIO_ReadPin>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d010      	beq.n	8001b76 <HAL_TIM_PeriodElapsedCallback+0x282>
					if(homing_first == 1){
 8001b54:	4b25      	ldr	r3, [pc, #148]	@ (8001bec <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d177      	bne.n	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
						homing = 1;
 8001b5c:	4b17      	ldr	r3, [pc, #92]	@ (8001bbc <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	701a      	strb	r2, [r3, #0]
						Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, -100);
 8001b62:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	2302      	movs	r3, #2
 8001b6a:	4a12      	ldr	r2, [pc, #72]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4816      	ldr	r0, [pc, #88]	@ (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001b70:	f000 faa0 	bl	80020b4 <Update_pwm>
}
 8001b74:	e06a      	b.n	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
				else if(homing_first == 0){
 8001b76:	4b1d      	ldr	r3, [pc, #116]	@ (8001bec <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d166      	bne.n	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
					if (homing_ts == 8000){
 8001b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b84:	f5a2 51fa 	sub.w	r1, r2, #8000	@ 0x1f40
 8001b88:	430b      	orrs	r3, r1
 8001b8a:	d135      	bne.n	8001bf8 <HAL_TIM_PeriodElapsedCallback+0x304>
						homing_second = 1;
 8001b8c:	4b19      	ldr	r3, [pc, #100]	@ (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	701a      	strb	r2, [r3, #0]
						Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001b92:	2300      	movs	r3, #0
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	2302      	movs	r3, #2
 8001b98:	4a06      	ldr	r2, [pc, #24]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	480a      	ldr	r0, [pc, #40]	@ (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001b9e:	f000 fa89 	bl	80020b4 <Update_pwm>
 8001ba2:	e049      	b.n	8001c38 <HAL_TIM_PeriodElapsedCallback+0x344>
 8001ba4:	200001d8 	.word	0x200001d8
 8001ba8:	20000002 	.word	0x20000002
 8001bac:	48000400 	.word	0x48000400
 8001bb0:	200005d8 	.word	0x200005d8
 8001bb4:	48000800 	.word	0x48000800
 8001bb8:	200002a4 	.word	0x200002a4
 8001bbc:	20000619 	.word	0x20000619
 8001bc0:	200006e8 	.word	0x200006e8
 8001bc4:	43fa0000 	.word	0x43fa0000
 8001bc8:	2000010c 	.word	0x2000010c
 8001bcc:	20000754 	.word	0x20000754
 8001bd0:	20000600 	.word	0x20000600
 8001bd4:	200005d4 	.word	0x200005d4
 8001bd8:	20000778 	.word	0x20000778
 8001bdc:	200005c8 	.word	0x200005c8
 8001be0:	2000061b 	.word	0x2000061b
 8001be4:	20000604 	.word	0x20000604
 8001be8:	2000061a 	.word	0x2000061a
 8001bec:	20000001 	.word	0x20000001
 8001bf0:	20000610 	.word	0x20000610
 8001bf4:	20000618 	.word	0x20000618
					}else if(homing_ts == 18000){
 8001bf8:	4b17      	ldr	r3, [pc, #92]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfe:	4917      	ldr	r1, [pc, #92]	@ (8001c5c <HAL_TIM_PeriodElapsedCallback+0x368>)
 8001c00:	4411      	add	r1, r2
 8001c02:	430b      	orrs	r3, r1
 8001c04:	d109      	bne.n	8001c1a <HAL_TIM_PeriodElapsedCallback+0x326>
						Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, -80);
 8001c06:	f06f 034f 	mvn.w	r3, #79	@ 0x4f
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	4a14      	ldr	r2, [pc, #80]	@ (8001c60 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001c10:	2100      	movs	r1, #0
 8001c12:	4814      	ldr	r0, [pc, #80]	@ (8001c64 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001c14:	f000 fa4e 	bl	80020b4 <Update_pwm>
 8001c18:	e00e      	b.n	8001c38 <HAL_TIM_PeriodElapsedCallback+0x344>
					}else if(homing_ts == 4000){
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	f5a2 617a 	sub.w	r1, r2, #4000	@ 0xfa0
 8001c24:	430b      	orrs	r3, r1
 8001c26:	d107      	bne.n	8001c38 <HAL_TIM_PeriodElapsedCallback+0x344>
						Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 200);
 8001c28:	23c8      	movs	r3, #200	@ 0xc8
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	4a0c      	ldr	r2, [pc, #48]	@ (8001c60 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001c30:	2100      	movs	r1, #0
 8001c32:	480c      	ldr	r0, [pc, #48]	@ (8001c64 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001c34:	f000 fa3e 	bl	80020b4 <Update_pwm>
					homing_ts++;
 8001c38:	4b07      	ldr	r3, [pc, #28]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3e:	1c54      	adds	r4, r2, #1
 8001c40:	f143 0500 	adc.w	r5, r3, #0
 8001c44:	4b04      	ldr	r3, [pc, #16]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001c46:	e9c3 4500 	strd	r4, r5, [r3]
}
 8001c4a:	e7ff      	b.n	8001c4c <HAL_TIM_PeriodElapsedCallback+0x358>
 8001c4c:	bf00      	nop
 8001c4e:	3730      	adds	r7, #48	@ 0x30
 8001c50:	46bd      	mov	sp, r7
 8001c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c56:	bf00      	nop
 8001c58:	20000610 	.word	0x20000610
 8001c5c:	ffffb9b0 	.word	0xffffb9b0
 8001c60:	48000800 	.word	0x48000800
 8001c64:	2000010c 	.word	0x2000010c

08001c68 <HAL_GPIO_EXTI_Callback>:
// GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	4603      	mov	r3, r0
 8001c70:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_15){
 8001c72:	88fb      	ldrh	r3, [r7, #6]
 8001c74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c78:	d10d      	bne.n	8001c96 <HAL_GPIO_EXTI_Callback+0x2e>
		// Emergency switch interrupted
		// Stop motor
		Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	2302      	movs	r3, #2
 8001c80:	4a2f      	ldr	r2, [pc, #188]	@ (8001d40 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001c82:	2100      	movs	r1, #0
 8001c84:	482f      	ldr	r0, [pc, #188]	@ (8001d44 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001c86:	f000 fa15 	bl	80020b4 <Update_pwm>
		// Emergency light enable
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, SET);
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c90:	482b      	ldr	r0, [pc, #172]	@ (8001d40 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001c92:	f003 fab5 	bl	8005200 <HAL_GPIO_WritePin>
//		mode = 2;
	}
	if(GPIO_Pin == GPIO_PIN_12){
 8001c96:	88fb      	ldrh	r3, [r7, #6]
 8001c98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c9c:	d14d      	bne.n	8001d3a <HAL_GPIO_EXTI_Callback+0xd2>
		// Proximity interrupted
		limitswitch_test++;
 8001c9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d48 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	4a28      	ldr	r2, [pc, #160]	@ (8001d48 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001ca6:	6013      	str	r3, [r2, #0]
		if(homing == 1){
 8001ca8:	4b28      	ldr	r3, [pc, #160]	@ (8001d4c <HAL_GPIO_EXTI_Callback+0xe4>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d135      	bne.n	8001d1c <HAL_GPIO_EXTI_Callback+0xb4>
			// If homing
			if(homing_first == 1){
 8001cb0:	4b27      	ldr	r3, [pc, #156]	@ (8001d50 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d10b      	bne.n	8001cd0 <HAL_GPIO_EXTI_Callback+0x68>
				// First time stop
				Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001cb8:	2300      	movs	r3, #0
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	4a20      	ldr	r2, [pc, #128]	@ (8001d40 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4820      	ldr	r0, [pc, #128]	@ (8001d44 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001cc4:	f000 f9f6 	bl	80020b4 <Update_pwm>
				homing_first = 0;
 8001cc8:	4b21      	ldr	r3, [pc, #132]	@ (8001d50 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	701a      	strb	r2, [r3, #0]
				return;
 8001cce:	e034      	b.n	8001d3a <HAL_GPIO_EXTI_Callback+0xd2>
			}
			else if(homing_second == 1){
 8001cd0:	4b20      	ldr	r3, [pc, #128]	@ (8001d54 <HAL_GPIO_EXTI_Callback+0xec>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d130      	bne.n	8001d3a <HAL_GPIO_EXTI_Callback+0xd2>
				// Second time stop and reset variables.
				Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001cd8:	2300      	movs	r3, #0
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2302      	movs	r3, #2
 8001cde:	4a18      	ldr	r2, [pc, #96]	@ (8001d40 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4818      	ldr	r0, [pc, #96]	@ (8001d44 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001ce4:	f000 f9e6 	bl	80020b4 <Update_pwm>
				homing_ts = 0;
 8001ce8:	491b      	ldr	r1, [pc, #108]	@ (8001d58 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	f04f 0300 	mov.w	r3, #0
 8001cf2:	e9c1 2300 	strd	r2, r3, [r1]
				is_home = 1;
 8001cf6:	4b19      	ldr	r3, [pc, #100]	@ (8001d5c <HAL_GPIO_EXTI_Callback+0xf4>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	701a      	strb	r2, [r3, #0]
				homing_second = 0;
 8001cfc:	4b15      	ldr	r3, [pc, #84]	@ (8001d54 <HAL_GPIO_EXTI_Callback+0xec>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	701a      	strb	r2, [r3, #0]
				homing_first = 1;
 8001d02:	4b13      	ldr	r3, [pc, #76]	@ (8001d50 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
				homing = 0;
 8001d08:	4b10      	ldr	r3, [pc, #64]	@ (8001d4c <HAL_GPIO_EXTI_Callback+0xe4>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
				wait_command = 1;
 8001d0e:	4b14      	ldr	r3, [pc, #80]	@ (8001d60 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	701a      	strb	r2, [r3, #0]
				Reset_qei(&encoder);
 8001d14:	4813      	ldr	r0, [pc, #76]	@ (8001d64 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001d16:	f000 faa9 	bl	800226c <Reset_qei>
 8001d1a:	e00e      	b.n	8001d3a <HAL_GPIO_EXTI_Callback+0xd2>
			}
		}
		else{
			Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	2302      	movs	r3, #2
 8001d22:	4a07      	ldr	r2, [pc, #28]	@ (8001d40 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001d24:	2100      	movs	r1, #0
 8001d26:	4807      	ldr	r0, [pc, #28]	@ (8001d44 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001d28:	f000 f9c4 	bl	80020b4 <Update_pwm>
			mode = 2;
 8001d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d68 <HAL_GPIO_EXTI_Callback+0x100>)
 8001d2e:	2202      	movs	r2, #2
 8001d30:	701a      	strb	r2, [r3, #0]
			homing_first = 0;
 8001d32:	4b07      	ldr	r3, [pc, #28]	@ (8001d50 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
			return;
 8001d38:	bf00      	nop
		}
	}
}
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	48000800 	.word	0x48000800
 8001d44:	2000010c 	.word	0x2000010c
 8001d48:	200005d0 	.word	0x200005d0
 8001d4c:	20000619 	.word	0x20000619
 8001d50:	20000001 	.word	0x20000001
 8001d54:	20000618 	.word	0x20000618
 8001d58:	20000610 	.word	0x20000610
 8001d5c:	2000061a 	.word	0x2000061a
 8001d60:	2000061b 	.word	0x2000061b
 8001d64:	200006e8 	.word	0x200006e8
 8001d68:	20000002 	.word	0x20000002

08001d6c <Update_velocity_control>:
// Torque control update
void Update_torque_control(float32_t s){

}
// Velocity control update
void Update_velocity_control(float32_t s){
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	ed87 0a01 	vstr	s0, [r7, #4]
	//input is pulse unit
	v_e = s - Get_mmps(&encoder);
 8001d76:	480f      	ldr	r0, [pc, #60]	@ (8001db4 <Update_velocity_control+0x48>)
 8001d78:	f000 faa9 	bl	80022ce <Get_mmps>
 8001d7c:	eeb0 7a40 	vmov.f32	s14, s0
 8001d80:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d88:	4b0b      	ldr	r3, [pc, #44]	@ (8001db8 <Update_velocity_control+0x4c>)
 8001d8a:	edc3 7a00 	vstr	s15, [r3]
	v_output = Update_pid(&v_pid, v_e, 900.0, 1000.0);
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001db8 <Update_velocity_control+0x4c>)
 8001d90:	edd3 7a00 	vldr	s15, [r3]
 8001d94:	ed9f 1a09 	vldr	s2, [pc, #36]	@ 8001dbc <Update_velocity_control+0x50>
 8001d98:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8001dc0 <Update_velocity_control+0x54>
 8001d9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001da0:	4808      	ldr	r0, [pc, #32]	@ (8001dc4 <Update_velocity_control+0x58>)
 8001da2:	f000 f83f 	bl	8001e24 <Update_pid>
 8001da6:	4603      	mov	r3, r0
 8001da8:	4a07      	ldr	r2, [pc, #28]	@ (8001dc8 <Update_velocity_control+0x5c>)
 8001daa:	6013      	str	r3, [r2, #0]
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	200006e8 	.word	0x200006e8
 8001db8:	20000750 	.word	0x20000750
 8001dbc:	447a0000 	.word	0x447a0000
 8001dc0:	44610000 	.word	0x44610000
 8001dc4:	20000730 	.word	0x20000730
 8001dc8:	20000754 	.word	0x20000754

08001dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd0:	b672      	cpsid	i
}
 8001dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dd4:	bf00      	nop
 8001dd6:	e7fd      	b.n	8001dd4 <Error_Handler+0x8>

08001dd8 <PID_init>:
 *  Created on: Apr 26, 2024
 *      Author: naker
 */
#include "pid.h"

void PID_init(PID* pid, float32_t _kp,  float32_t _ki, float32_t _kd, float32_t _sampt){
 8001dd8:	b480      	push	{r7}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6178      	str	r0, [r7, #20]
 8001de0:	ed87 0a04 	vstr	s0, [r7, #16]
 8001de4:	edc7 0a03 	vstr	s1, [r7, #12]
 8001de8:	ed87 1a02 	vstr	s2, [r7, #8]
 8001dec:	edc7 1a01 	vstr	s3, [r7, #4]
	pid -> kp = _kp;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	601a      	str	r2, [r3, #0]
	pid -> ki = _ki;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	605a      	str	r2, [r3, #4]
	pid -> kd = _kd;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	609a      	str	r2, [r3, #8]
	pid -> sampt = _sampt;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	60da      	str	r2, [r3, #12]
	pid -> y_n = 0.0;
 8001e08:	6979      	ldr	r1, [r7, #20]
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001e16:	bf00      	nop
 8001e18:	371c      	adds	r7, #28
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <Update_pid>:
int32_t Update_pid(PID *pid, float32_t error, float32_t pid_sat, float32_t plant_sat) {
 8001e24:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e28:	b08a      	sub	sp, #40	@ 0x28
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e32:	edc7 0a01 	vstr	s1, [r7, #4]
 8001e36:	ed87 1a00 	vstr	s2, [r7]
//	static float32_t y_n = 0; // Output[n]
	static float32_t y_n_1 = 0; // Output[n-1]
	float32_t e_n = error; // error[n]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	61bb      	str	r3, [r7, #24]
	static float32_t e_n_1 = 0; // error[n-1]

	float32_t p_term = e_n * pid -> kp;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	edd3 7a00 	vldr	s15, [r3]
 8001e44:	ed97 7a06 	vldr	s14, [r7, #24]
 8001e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e4c:	edc7 7a05 	vstr	s15, [r7, #20]
	float32_t d_term = ((e_n - e_n_1) * pid -> kd) / pid -> sampt;
 8001e50:	4b96      	ldr	r3, [pc, #600]	@ (80020ac <Update_pid+0x288>)
 8001e52:	edd3 7a00 	vldr	s15, [r3]
 8001e56:	ed97 7a06 	vldr	s14, [r7, #24]
 8001e5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e64:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e72:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float32_t i_term = ((pid -> ki * pid -> sampt / 2.0)*(e_n + e_n_1)) + y_n_1;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e86:	ee17 0a90 	vmov	r0, s15
 8001e8a:	f7fe fb29 	bl	80004e0 <__aeabi_f2d>
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e96:	f7fe fca5 	bl	80007e4 <__aeabi_ddiv>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4690      	mov	r8, r2
 8001ea0:	4699      	mov	r9, r3
 8001ea2:	4b82      	ldr	r3, [pc, #520]	@ (80020ac <Update_pid+0x288>)
 8001ea4:	ed93 7a00 	vldr	s14, [r3]
 8001ea8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001eac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb0:	ee17 0a90 	vmov	r0, s15
 8001eb4:	f7fe fb14 	bl	80004e0 <__aeabi_f2d>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4640      	mov	r0, r8
 8001ebe:	4649      	mov	r1, r9
 8001ec0:	f7fe fb66 	bl	8000590 <__aeabi_dmul>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4690      	mov	r8, r2
 8001eca:	4699      	mov	r9, r3
 8001ecc:	4b78      	ldr	r3, [pc, #480]	@ (80020b0 <Update_pid+0x28c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe fb05 	bl	80004e0 <__aeabi_f2d>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4640      	mov	r0, r8
 8001edc:	4649      	mov	r1, r9
 8001ede:	f7fe f9a1 	bl	8000224 <__adddf3>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f7fe fe33 	bl	8000b54 <__aeabi_d2f>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	623b      	str	r3, [r7, #32]

	if(pid -> ki == 0){
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ef8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f00:	d102      	bne.n	8001f08 <Update_pid+0xe4>
		i_term = 0;
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	623b      	str	r3, [r7, #32]
	}
	if(pid -> kd == 0){
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f0e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f16:	d102      	bne.n	8001f1e <Update_pid+0xfa>
		d_term = 0;
 8001f18:	f04f 0300 	mov.w	r3, #0
 8001f1c:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	pid -> y_n = p_term + d_term + i_term; // pid output
 8001f1e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f22:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001f26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f32:	ee17 0a90 	vmov	r0, s15
 8001f36:	f7fe fad3 	bl	80004e0 <__aeabi_f2d>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	68f9      	ldr	r1, [r7, #12]
 8001f40:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uint8_t is_sat = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	77fb      	strb	r3, [r7, #31]
	// check is pid output is saturating
	if(pid -> y_n > pid_sat){
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7fe fac6 	bl	80004e0 <__aeabi_f2d>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4640      	mov	r0, r8
 8001f5a:	4649      	mov	r1, r9
 8001f5c:	f7fe fda8 	bl	8000ab0 <__aeabi_dcmpgt>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <Update_pid+0x148>
		is_sat = 1;
 8001f66:	2301      	movs	r3, #1
 8001f68:	77fb      	strb	r3, [r7, #31]
 8001f6a:	e016      	b.n	8001f9a <Update_pid+0x176>
	}
	else if(pid -> y_n < -(pid_sat)){
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8001f72:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f76:	eef1 7a67 	vneg.f32	s15, s15
 8001f7a:	ee17 3a90 	vmov	r3, s15
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe faae 	bl	80004e0 <__aeabi_f2d>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	4640      	mov	r0, r8
 8001f8a:	4649      	mov	r1, r9
 8001f8c:	f7fe fd72 	bl	8000a74 <__aeabi_dcmplt>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <Update_pid+0x176>
		is_sat = 1;
 8001f96:	2301      	movs	r3, #1
 8001f98:	77fb      	strb	r3, [r7, #31]
	}
	// check is error sign and output sign is equal
	if(e_n * pid -> y_n == fabs(e_n * pid -> y_n)){
 8001f9a:	69b8      	ldr	r0, [r7, #24]
 8001f9c:	f7fe faa0 	bl	80004e0 <__aeabi_f2d>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001fa6:	f7fe faf3 	bl	8000590 <__aeabi_dmul>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4690      	mov	r8, r2
 8001fb0:	4699      	mov	r9, r3
 8001fb2:	69b8      	ldr	r0, [r7, #24]
 8001fb4:	f7fe fa94 	bl	80004e0 <__aeabi_f2d>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001fbe:	f7fe fae7 	bl	8000590 <__aeabi_dmul>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4614      	mov	r4, r2
 8001fc8:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001fcc:	4622      	mov	r2, r4
 8001fce:	462b      	mov	r3, r5
 8001fd0:	4640      	mov	r0, r8
 8001fd2:	4649      	mov	r1, r9
 8001fd4:	f7fe fd44 	bl	8000a60 <__aeabi_dcmpeq>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d011      	beq.n	8002002 <Update_pid+0x1de>
		// if pid output is saturating and error sign and output sign is  i_term = 0;
		if(is_sat == 1){
 8001fde:	7ffb      	ldrb	r3, [r7, #31]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d10e      	bne.n	8002002 <Update_pid+0x1de>
			pid -> y_n = p_term + d_term;
 8001fe4:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fe8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff0:	ee17 0a90 	vmov	r0, s15
 8001ff4:	f7fe fa74 	bl	80004e0 <__aeabi_f2d>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	68f9      	ldr	r1, [r7, #12]
 8001ffe:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}
	}
	// Plant saturation
	if(pid -> y_n > plant_sat){
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002008:	6838      	ldr	r0, [r7, #0]
 800200a:	f7fe fa69 	bl	80004e0 <__aeabi_f2d>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4620      	mov	r0, r4
 8002014:	4629      	mov	r1, r5
 8002016:	f7fe fd4b 	bl	8000ab0 <__aeabi_dcmpgt>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <Update_pid+0x20e>
		pid -> y_n = plant_sat;
 8002020:	6838      	ldr	r0, [r7, #0]
 8002022:	f7fe fa5d 	bl	80004e0 <__aeabi_f2d>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	68f9      	ldr	r1, [r7, #12]
 800202c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002030:	e022      	b.n	8002078 <Update_pid+0x254>
	}
	else if(pid -> y_n < -(plant_sat)){
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002038:	edd7 7a00 	vldr	s15, [r7]
 800203c:	eef1 7a67 	vneg.f32	s15, s15
 8002040:	ee17 3a90 	vmov	r3, s15
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe fa4b 	bl	80004e0 <__aeabi_f2d>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4620      	mov	r0, r4
 8002050:	4629      	mov	r1, r5
 8002052:	f7fe fd0f 	bl	8000a74 <__aeabi_dcmplt>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00d      	beq.n	8002078 <Update_pid+0x254>
		pid -> y_n = (-(plant_sat));
 800205c:	edd7 7a00 	vldr	s15, [r7]
 8002060:	eef1 7a67 	vneg.f32	s15, s15
 8002064:	ee17 3a90 	vmov	r3, s15
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe fa39 	bl	80004e0 <__aeabi_f2d>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	68f9      	ldr	r1, [r7, #12]
 8002074:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}
	// Update value
	y_n_1 = pid -> y_n;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800207e:	4610      	mov	r0, r2
 8002080:	4619      	mov	r1, r3
 8002082:	f7fe fd67 	bl	8000b54 <__aeabi_d2f>
 8002086:	4603      	mov	r3, r0
 8002088:	4a09      	ldr	r2, [pc, #36]	@ (80020b0 <Update_pid+0x28c>)
 800208a:	6013      	str	r3, [r2, #0]
	e_n_1 = e_n;
 800208c:	4a07      	ldr	r2, [pc, #28]	@ (80020ac <Update_pid+0x288>)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	6013      	str	r3, [r2, #0]
	return pid -> y_n;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	f7fe fd12 	bl	8000ac4 <__aeabi_d2iz>
 80020a0:	4603      	mov	r3, r0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3728      	adds	r7, #40	@ 0x28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80020ac:	20000780 	.word	0x20000780
 80020b0:	20000784 	.word	0x20000784

080020b4 <Update_pwm>:
 *      Author: naker
 */

#include "pwm.h"

void Update_pwm(TIM_HandleTypeDef* htim, uint16_t htim_channel,GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, int32_t pwm_signal) {
 80020b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020b8:	b08b      	sub	sp, #44	@ 0x2c
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80020be:	61fa      	str	r2, [r7, #28]
 80020c0:	461a      	mov	r2, r3
 80020c2:	460b      	mov	r3, r1
 80020c4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80020c6:	4613      	mov	r3, r2
 80020c8:	843b      	strh	r3, [r7, #32]
	__HAL_TIM_SET_COMPARE(htim, htim_channel, fabs(pwm_signal));
 80020ca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d111      	bne.n	80020f4 <Update_pwm+0x40>
 80020d0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80020d2:	f7fe f9f3 	bl	80004bc <__aeabi_i2d>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	613a      	str	r2, [r7, #16]
 80020dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e4:	681c      	ldr	r4, [r3, #0]
 80020e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020ea:	f7fe fd13 	bl	8000b14 <__aeabi_d2uiz>
 80020ee:	4603      	mov	r3, r0
 80020f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80020f2:	e061      	b.n	80021b8 <Update_pwm+0x104>
 80020f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d111      	bne.n	800211e <Update_pwm+0x6a>
 80020fa:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80020fc:	f7fe f9de 	bl	80004bc <__aeabi_i2d>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	60ba      	str	r2, [r7, #8]
 8002106:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210e:	681c      	ldr	r4, [r3, #0]
 8002110:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002114:	f7fe fcfe 	bl	8000b14 <__aeabi_d2uiz>
 8002118:	4603      	mov	r3, r0
 800211a:	63a3      	str	r3, [r4, #56]	@ 0x38
 800211c:	e04c      	b.n	80021b8 <Update_pwm+0x104>
 800211e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002120:	2b08      	cmp	r3, #8
 8002122:	d111      	bne.n	8002148 <Update_pwm+0x94>
 8002124:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002126:	f7fe f9c9 	bl	80004bc <__aeabi_i2d>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	603a      	str	r2, [r7, #0]
 8002130:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002138:	681c      	ldr	r4, [r3, #0]
 800213a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800213e:	f7fe fce9 	bl	8000b14 <__aeabi_d2uiz>
 8002142:	4603      	mov	r3, r0
 8002144:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002146:	e037      	b.n	80021b8 <Update_pwm+0x104>
 8002148:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800214a:	2b0c      	cmp	r3, #12
 800214c:	d110      	bne.n	8002170 <Update_pwm+0xbc>
 800214e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002150:	f7fe f9b4 	bl	80004bc <__aeabi_i2d>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4615      	mov	r5, r2
 800215a:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 800215e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002160:	681c      	ldr	r4, [r3, #0]
 8002162:	4628      	mov	r0, r5
 8002164:	4631      	mov	r1, r6
 8002166:	f7fe fcd5 	bl	8000b14 <__aeabi_d2uiz>
 800216a:	4603      	mov	r3, r0
 800216c:	6423      	str	r3, [r4, #64]	@ 0x40
 800216e:	e023      	b.n	80021b8 <Update_pwm+0x104>
 8002170:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002172:	2b10      	cmp	r3, #16
 8002174:	d110      	bne.n	8002198 <Update_pwm+0xe4>
 8002176:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002178:	f7fe f9a0 	bl	80004bc <__aeabi_i2d>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4692      	mov	sl, r2
 8002182:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8002186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002188:	681c      	ldr	r4, [r3, #0]
 800218a:	4650      	mov	r0, sl
 800218c:	4659      	mov	r1, fp
 800218e:	f7fe fcc1 	bl	8000b14 <__aeabi_d2uiz>
 8002192:	4603      	mov	r3, r0
 8002194:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002196:	e00f      	b.n	80021b8 <Update_pwm+0x104>
 8002198:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800219a:	f7fe f98f 	bl	80004bc <__aeabi_i2d>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4690      	mov	r8, r2
 80021a4:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80021a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021aa:	681c      	ldr	r4, [r3, #0]
 80021ac:	4640      	mov	r0, r8
 80021ae:	4649      	mov	r1, r9
 80021b0:	f7fe fcb0 	bl	8000b14 <__aeabi_d2uiz>
 80021b4:	4603      	mov	r3, r0
 80021b6:	64e3      	str	r3, [r4, #76]	@ 0x4c
	if (pwm_signal < 0) {
 80021b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	da06      	bge.n	80021cc <Update_pwm+0x118>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, RESET);
 80021be:	8c3b      	ldrh	r3, [r7, #32]
 80021c0:	2200      	movs	r2, #0
 80021c2:	4619      	mov	r1, r3
 80021c4:	69f8      	ldr	r0, [r7, #28]
 80021c6:	f003 f81b 	bl	8005200 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
	}
}
 80021ca:	e005      	b.n	80021d8 <Update_pwm+0x124>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
 80021cc:	8c3b      	ldrh	r3, [r7, #32]
 80021ce:	2201      	movs	r2, #1
 80021d0:	4619      	mov	r1, r3
 80021d2:	69f8      	ldr	r0, [r7, #28]
 80021d4:	f003 f814 	bl	8005200 <HAL_GPIO_WritePin>
}
 80021d8:	bf00      	nop
 80021da:	372c      	adds	r7, #44	@ 0x2c
 80021dc:	46bd      	mov	sp, r7
 80021de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080021e2 <QEI_init>:
 *  Created on: Apr 24, 2024
 *      Author: naker
 */
#include "qei.h"

void QEI_init(QEI* qei, int32_t ppr, int32_t freq, int32_t period){
 80021e2:	b480      	push	{r7}
 80021e4:	b085      	sub	sp, #20
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	607a      	str	r2, [r7, #4]
 80021ee:	603b      	str	r3, [r7, #0]
	qei -> ppr = ppr;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	601a      	str	r2, [r3, #0]
	qei -> freq = freq;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	605a      	str	r2, [r3, #4]
	qei -> period = period;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	609a      	str	r2, [r3, #8]
	qei -> counter_value[NEW] = 0;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 8002214:	68f9      	ldr	r1, [r7, #12]
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	f04f 0300 	mov.w	r3, #0
 800221e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0.0;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0.0;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	621a      	str	r2, [r3, #32]
	qei -> mm = 0.0;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	629a      	str	r2, [r3, #40]	@ 0x28
	qei -> pps = 0.0;
 800223a:	68f9      	ldr	r1, [r7, #12]
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> rpm = 0.0;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> radps = 0.0;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> mmps = 0.0;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <Reset_qei>:
	// Update OLD value
	qei -> counter_value[OLD] = qei -> counter_value[NEW];

}

void Reset_qei(QEI* qei){
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	qei -> counter_value[NEW] = 0;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	621a      	str	r2, [r3, #32]
	qei -> pps = 0;
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	f04f 0300 	mov.w	r3, #0
 80022ae:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> rpm = 0;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> radps =0;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <Get_mmps>:

float32_t Get_mmps(QEI* qei){
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
	return qei -> mmps;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	ee07 3a90 	vmov	s15, r3
}
 80022de:	eeb0 0a67 	vmov.f32	s0, s15
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002330 <HAL_MspInit+0x44>)
 80022f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f6:	4a0e      	ldr	r2, [pc, #56]	@ (8002330 <HAL_MspInit+0x44>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80022fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002330 <HAL_MspInit+0x44>)
 8002300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800230a:	4b09      	ldr	r3, [pc, #36]	@ (8002330 <HAL_MspInit+0x44>)
 800230c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800230e:	4a08      	ldr	r2, [pc, #32]	@ (8002330 <HAL_MspInit+0x44>)
 8002310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002314:	6593      	str	r3, [r2, #88]	@ 0x58
 8002316:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <HAL_MspInit+0x44>)
 8002318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002322:	f003 f841 	bl	80053a8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40021000 	.word	0x40021000

08002334 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b09e      	sub	sp, #120	@ 0x78
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800234c:	f107 0310 	add.w	r3, r7, #16
 8002350:	2254      	movs	r2, #84	@ 0x54
 8002352:	2100      	movs	r1, #0
 8002354:	4618      	mov	r0, r3
 8002356:	f007 f97b 	bl	8009650 <memset>
  if(hadc->Instance==ADC1)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002362:	d167      	bne.n	8002434 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002364:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002368:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800236a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800236e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002370:	f107 0310 	add.w	r3, r7, #16
 8002374:	4618      	mov	r0, r3
 8002376:	f003 fd55 	bl	8005e24 <HAL_RCCEx_PeriphCLKConfig>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002380:	f7ff fd24 	bl	8001dcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002384:	4b2d      	ldr	r3, [pc, #180]	@ (800243c <HAL_ADC_MspInit+0x108>)
 8002386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002388:	4a2c      	ldr	r2, [pc, #176]	@ (800243c <HAL_ADC_MspInit+0x108>)
 800238a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800238e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002390:	4b2a      	ldr	r3, [pc, #168]	@ (800243c <HAL_ADC_MspInit+0x108>)
 8002392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002394:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239c:	4b27      	ldr	r3, [pc, #156]	@ (800243c <HAL_ADC_MspInit+0x108>)
 800239e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a0:	4a26      	ldr	r2, [pc, #152]	@ (800243c <HAL_ADC_MspInit+0x108>)
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023a8:	4b24      	ldr	r3, [pc, #144]	@ (800243c <HAL_ADC_MspInit+0x108>)
 80023aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Current_sensor_Pin;
 80023b4:	2301      	movs	r3, #1
 80023b6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023b8:	2303      	movs	r3, #3
 80023ba:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Current_sensor_GPIO_Port, &GPIO_InitStruct);
 80023c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80023c4:	4619      	mov	r1, r3
 80023c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023ca:	f002 fd7f 	bl	8004ecc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80023ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002440 <HAL_ADC_MspInit+0x10c>)
 80023d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002444 <HAL_ADC_MspInit+0x110>)
 80023d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80023d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002440 <HAL_ADC_MspInit+0x10c>)
 80023d6:	2205      	movs	r2, #5
 80023d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023da:	4b19      	ldr	r3, [pc, #100]	@ (8002440 <HAL_ADC_MspInit+0x10c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023e0:	4b17      	ldr	r3, [pc, #92]	@ (8002440 <HAL_ADC_MspInit+0x10c>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80023e6:	4b16      	ldr	r3, [pc, #88]	@ (8002440 <HAL_ADC_MspInit+0x10c>)
 80023e8:	2280      	movs	r2, #128	@ 0x80
 80023ea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023ec:	4b14      	ldr	r3, [pc, #80]	@ (8002440 <HAL_ADC_MspInit+0x10c>)
 80023ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023f2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023f4:	4b12      	ldr	r3, [pc, #72]	@ (8002440 <HAL_ADC_MspInit+0x10c>)
 80023f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023fa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80023fc:	4b10      	ldr	r3, [pc, #64]	@ (8002440 <HAL_ADC_MspInit+0x10c>)
 80023fe:	2220      	movs	r2, #32
 8002400:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002402:	4b0f      	ldr	r3, [pc, #60]	@ (8002440 <HAL_ADC_MspInit+0x10c>)
 8002404:	2200      	movs	r2, #0
 8002406:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002408:	480d      	ldr	r0, [pc, #52]	@ (8002440 <HAL_ADC_MspInit+0x10c>)
 800240a:	f002 fa2d 	bl	8004868 <HAL_DMA_Init>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8002414:	f7ff fcda 	bl	8001dcc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a09      	ldr	r2, [pc, #36]	@ (8002440 <HAL_ADC_MspInit+0x10c>)
 800241c:	655a      	str	r2, [r3, #84]	@ 0x54
 800241e:	4a08      	ldr	r2, [pc, #32]	@ (8002440 <HAL_ADC_MspInit+0x10c>)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002424:	2200      	movs	r2, #0
 8002426:	2100      	movs	r1, #0
 8002428:	2012      	movs	r0, #18
 800242a:	f002 f9e8 	bl	80047fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800242e:	2012      	movs	r0, #18
 8002430:	f002 f9ff 	bl	8004832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002434:	bf00      	nop
 8002436:	3778      	adds	r7, #120	@ 0x78
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000
 8002440:	200000ac 	.word	0x200000ac
 8002444:	40020008 	.word	0x40020008

08002448 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a27      	ldr	r2, [pc, #156]	@ (80024f4 <HAL_TIM_Base_MspInit+0xac>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d114      	bne.n	8002484 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800245a:	4b27      	ldr	r3, [pc, #156]	@ (80024f8 <HAL_TIM_Base_MspInit+0xb0>)
 800245c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800245e:	4a26      	ldr	r2, [pc, #152]	@ (80024f8 <HAL_TIM_Base_MspInit+0xb0>)
 8002460:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002464:	6613      	str	r3, [r2, #96]	@ 0x60
 8002466:	4b24      	ldr	r3, [pc, #144]	@ (80024f8 <HAL_TIM_Base_MspInit+0xb0>)
 8002468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800246a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002472:	2200      	movs	r2, #0
 8002474:	2100      	movs	r1, #0
 8002476:	2019      	movs	r0, #25
 8002478:	f002 f9c1 	bl	80047fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800247c:	2019      	movs	r0, #25
 800247e:	f002 f9d8 	bl	8004832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002482:	e032      	b.n	80024ea <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a1c      	ldr	r2, [pc, #112]	@ (80024fc <HAL_TIM_Base_MspInit+0xb4>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d114      	bne.n	80024b8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800248e:	4b1a      	ldr	r3, [pc, #104]	@ (80024f8 <HAL_TIM_Base_MspInit+0xb0>)
 8002490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002492:	4a19      	ldr	r2, [pc, #100]	@ (80024f8 <HAL_TIM_Base_MspInit+0xb0>)
 8002494:	f043 0302 	orr.w	r3, r3, #2
 8002498:	6593      	str	r3, [r2, #88]	@ 0x58
 800249a:	4b17      	ldr	r3, [pc, #92]	@ (80024f8 <HAL_TIM_Base_MspInit+0xb0>)
 800249c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2100      	movs	r1, #0
 80024aa:	201d      	movs	r0, #29
 80024ac:	f002 f9a7 	bl	80047fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024b0:	201d      	movs	r0, #29
 80024b2:	f002 f9be 	bl	8004832 <HAL_NVIC_EnableIRQ>
}
 80024b6:	e018      	b.n	80024ea <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a10      	ldr	r2, [pc, #64]	@ (8002500 <HAL_TIM_Base_MspInit+0xb8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d113      	bne.n	80024ea <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80024c2:	4b0d      	ldr	r3, [pc, #52]	@ (80024f8 <HAL_TIM_Base_MspInit+0xb0>)
 80024c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024c6:	4a0c      	ldr	r2, [pc, #48]	@ (80024f8 <HAL_TIM_Base_MspInit+0xb0>)
 80024c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80024ce:	4b0a      	ldr	r3, [pc, #40]	@ (80024f8 <HAL_TIM_Base_MspInit+0xb0>)
 80024d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80024da:	2200      	movs	r2, #0
 80024dc:	2100      	movs	r1, #0
 80024de:	2019      	movs	r0, #25
 80024e0:	f002 f98d 	bl	80047fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80024e4:	2019      	movs	r0, #25
 80024e6:	f002 f9a4 	bl	8004832 <HAL_NVIC_EnableIRQ>
}
 80024ea:	bf00      	nop
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40012c00 	.word	0x40012c00
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40000400 	.word	0x40000400
 8002500:	40014400 	.word	0x40014400

08002504 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08a      	sub	sp, #40	@ 0x28
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250c:	f107 0314 	add.w	r3, r7, #20
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a1c      	ldr	r2, [pc, #112]	@ (8002594 <HAL_TIM_Encoder_MspInit+0x90>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d131      	bne.n	800258a <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002526:	4b1c      	ldr	r3, [pc, #112]	@ (8002598 <HAL_TIM_Encoder_MspInit+0x94>)
 8002528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252a:	4a1b      	ldr	r2, [pc, #108]	@ (8002598 <HAL_TIM_Encoder_MspInit+0x94>)
 800252c:	f043 0304 	orr.w	r3, r3, #4
 8002530:	6593      	str	r3, [r2, #88]	@ 0x58
 8002532:	4b19      	ldr	r3, [pc, #100]	@ (8002598 <HAL_TIM_Encoder_MspInit+0x94>)
 8002534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253e:	4b16      	ldr	r3, [pc, #88]	@ (8002598 <HAL_TIM_Encoder_MspInit+0x94>)
 8002540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002542:	4a15      	ldr	r2, [pc, #84]	@ (8002598 <HAL_TIM_Encoder_MspInit+0x94>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800254a:	4b13      	ldr	r3, [pc, #76]	@ (8002598 <HAL_TIM_Encoder_MspInit+0x94>)
 800254c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
 8002556:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800255a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255c:	2302      	movs	r3, #2
 800255e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002564:	2300      	movs	r3, #0
 8002566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002568:	230a      	movs	r3, #10
 800256a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256c:	f107 0314 	add.w	r3, r7, #20
 8002570:	4619      	mov	r1, r3
 8002572:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002576:	f002 fca9 	bl	8004ecc <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	201e      	movs	r0, #30
 8002580:	f002 f93d 	bl	80047fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002584:	201e      	movs	r0, #30
 8002586:	f002 f954 	bl	8004832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800258a:	bf00      	nop
 800258c:	3728      	adds	r7, #40	@ 0x28
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40000800 	.word	0x40000800
 8002598:	40021000 	.word	0x40021000

0800259c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	f107 030c 	add.w	r3, r7, #12
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a11      	ldr	r2, [pc, #68]	@ (8002600 <HAL_TIM_MspPostInit+0x64>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d11b      	bne.n	80025f6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025be:	4b11      	ldr	r3, [pc, #68]	@ (8002604 <HAL_TIM_MspPostInit+0x68>)
 80025c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c2:	4a10      	ldr	r2, [pc, #64]	@ (8002604 <HAL_TIM_MspPostInit+0x68>)
 80025c4:	f043 0304 	orr.w	r3, r3, #4
 80025c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002604 <HAL_TIM_MspPostInit+0x68>)
 80025cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_signal_Pin;
 80025d6:	2301      	movs	r3, #1
 80025d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025da:	2302      	movs	r3, #2
 80025dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80025e6:	2302      	movs	r3, #2
 80025e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_signal_GPIO_Port, &GPIO_InitStruct);
 80025ea:	f107 030c 	add.w	r3, r7, #12
 80025ee:	4619      	mov	r1, r3
 80025f0:	4805      	ldr	r0, [pc, #20]	@ (8002608 <HAL_TIM_MspPostInit+0x6c>)
 80025f2:	f002 fc6b 	bl	8004ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80025f6:	bf00      	nop
 80025f8:	3720      	adds	r7, #32
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40012c00 	.word	0x40012c00
 8002604:	40021000 	.word	0x40021000
 8002608:	48000800 	.word	0x48000800

0800260c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b09e      	sub	sp, #120	@ 0x78
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002624:	f107 0310 	add.w	r3, r7, #16
 8002628:	2254      	movs	r2, #84	@ 0x54
 800262a:	2100      	movs	r1, #0
 800262c:	4618      	mov	r0, r3
 800262e:	f007 f80f 	bl	8009650 <memset>
  if(huart->Instance==USART2)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a4d      	ldr	r2, [pc, #308]	@ (800276c <HAL_UART_MspInit+0x160>)
 8002638:	4293      	cmp	r3, r2
 800263a:	f040 8092 	bne.w	8002762 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800263e:	2302      	movs	r3, #2
 8002640:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002642:	2300      	movs	r3, #0
 8002644:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002646:	f107 0310 	add.w	r3, r7, #16
 800264a:	4618      	mov	r0, r3
 800264c:	f003 fbea 	bl	8005e24 <HAL_RCCEx_PeriphCLKConfig>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002656:	f7ff fbb9 	bl	8001dcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800265a:	4b45      	ldr	r3, [pc, #276]	@ (8002770 <HAL_UART_MspInit+0x164>)
 800265c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265e:	4a44      	ldr	r2, [pc, #272]	@ (8002770 <HAL_UART_MspInit+0x164>)
 8002660:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002664:	6593      	str	r3, [r2, #88]	@ 0x58
 8002666:	4b42      	ldr	r3, [pc, #264]	@ (8002770 <HAL_UART_MspInit+0x164>)
 8002668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002672:	4b3f      	ldr	r3, [pc, #252]	@ (8002770 <HAL_UART_MspInit+0x164>)
 8002674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002676:	4a3e      	ldr	r2, [pc, #248]	@ (8002770 <HAL_UART_MspInit+0x164>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800267e:	4b3c      	ldr	r3, [pc, #240]	@ (8002770 <HAL_UART_MspInit+0x164>)
 8002680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800268a:	230c      	movs	r3, #12
 800268c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268e:	2302      	movs	r3, #2
 8002690:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002696:	2300      	movs	r3, #0
 8002698:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800269a:	2307      	movs	r3, #7
 800269c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80026a2:	4619      	mov	r1, r3
 80026a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026a8:	f002 fc10 	bl	8004ecc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80026ac:	4b31      	ldr	r3, [pc, #196]	@ (8002774 <HAL_UART_MspInit+0x168>)
 80026ae:	4a32      	ldr	r2, [pc, #200]	@ (8002778 <HAL_UART_MspInit+0x16c>)
 80026b0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80026b2:	4b30      	ldr	r3, [pc, #192]	@ (8002774 <HAL_UART_MspInit+0x168>)
 80026b4:	221a      	movs	r2, #26
 80026b6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002774 <HAL_UART_MspInit+0x168>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026be:	4b2d      	ldr	r3, [pc, #180]	@ (8002774 <HAL_UART_MspInit+0x168>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002774 <HAL_UART_MspInit+0x168>)
 80026c6:	2280      	movs	r2, #128	@ 0x80
 80026c8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002774 <HAL_UART_MspInit+0x168>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026d0:	4b28      	ldr	r3, [pc, #160]	@ (8002774 <HAL_UART_MspInit+0x168>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80026d6:	4b27      	ldr	r3, [pc, #156]	@ (8002774 <HAL_UART_MspInit+0x168>)
 80026d8:	2200      	movs	r2, #0
 80026da:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026dc:	4b25      	ldr	r3, [pc, #148]	@ (8002774 <HAL_UART_MspInit+0x168>)
 80026de:	2200      	movs	r2, #0
 80026e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80026e2:	4824      	ldr	r0, [pc, #144]	@ (8002774 <HAL_UART_MspInit+0x168>)
 80026e4:	f002 f8c0 	bl	8004868 <HAL_DMA_Init>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80026ee:	f7ff fb6d 	bl	8001dcc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002774 <HAL_UART_MspInit+0x168>)
 80026f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80026fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002774 <HAL_UART_MspInit+0x168>)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8002700:	4b1e      	ldr	r3, [pc, #120]	@ (800277c <HAL_UART_MspInit+0x170>)
 8002702:	4a1f      	ldr	r2, [pc, #124]	@ (8002780 <HAL_UART_MspInit+0x174>)
 8002704:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002706:	4b1d      	ldr	r3, [pc, #116]	@ (800277c <HAL_UART_MspInit+0x170>)
 8002708:	221b      	movs	r2, #27
 800270a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800270c:	4b1b      	ldr	r3, [pc, #108]	@ (800277c <HAL_UART_MspInit+0x170>)
 800270e:	2210      	movs	r2, #16
 8002710:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002712:	4b1a      	ldr	r3, [pc, #104]	@ (800277c <HAL_UART_MspInit+0x170>)
 8002714:	2200      	movs	r2, #0
 8002716:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002718:	4b18      	ldr	r3, [pc, #96]	@ (800277c <HAL_UART_MspInit+0x170>)
 800271a:	2280      	movs	r2, #128	@ 0x80
 800271c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800271e:	4b17      	ldr	r3, [pc, #92]	@ (800277c <HAL_UART_MspInit+0x170>)
 8002720:	2200      	movs	r2, #0
 8002722:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002724:	4b15      	ldr	r3, [pc, #84]	@ (800277c <HAL_UART_MspInit+0x170>)
 8002726:	2200      	movs	r2, #0
 8002728:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800272a:	4b14      	ldr	r3, [pc, #80]	@ (800277c <HAL_UART_MspInit+0x170>)
 800272c:	2200      	movs	r2, #0
 800272e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002730:	4b12      	ldr	r3, [pc, #72]	@ (800277c <HAL_UART_MspInit+0x170>)
 8002732:	2200      	movs	r2, #0
 8002734:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002736:	4811      	ldr	r0, [pc, #68]	@ (800277c <HAL_UART_MspInit+0x170>)
 8002738:	f002 f896 	bl	8004868 <HAL_DMA_Init>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8002742:	f7ff fb43 	bl	8001dcc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a0c      	ldr	r2, [pc, #48]	@ (800277c <HAL_UART_MspInit+0x170>)
 800274a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800274c:	4a0b      	ldr	r2, [pc, #44]	@ (800277c <HAL_UART_MspInit+0x170>)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002752:	2200      	movs	r2, #0
 8002754:	2100      	movs	r1, #0
 8002756:	2026      	movs	r0, #38	@ 0x26
 8002758:	f002 f851 	bl	80047fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800275c:	2026      	movs	r0, #38	@ 0x26
 800275e:	f002 f868 	bl	8004832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002762:	bf00      	nop
 8002764:	3778      	adds	r7, #120	@ 0x78
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40004400 	.word	0x40004400
 8002770:	40021000 	.word	0x40021000
 8002774:	20000508 	.word	0x20000508
 8002778:	4002001c 	.word	0x4002001c
 800277c:	20000568 	.word	0x20000568
 8002780:	40020030 	.word	0x40020030

08002784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002788:	bf00      	nop
 800278a:	e7fd      	b.n	8002788 <NMI_Handler+0x4>

0800278c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002790:	bf00      	nop
 8002792:	e7fd      	b.n	8002790 <HardFault_Handler+0x4>

08002794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002798:	bf00      	nop
 800279a:	e7fd      	b.n	8002798 <MemManage_Handler+0x4>

0800279c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027a0:	bf00      	nop
 80027a2:	e7fd      	b.n	80027a0 <BusFault_Handler+0x4>

080027a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027a8:	bf00      	nop
 80027aa:	e7fd      	b.n	80027a8 <UsageFault_Handler+0x4>

080027ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027ba:	b480      	push	{r7}
 80027bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027da:	f000 f8f5 	bl	80029c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80027e8:	4802      	ldr	r0, [pc, #8]	@ (80027f4 <DMA1_Channel1_IRQHandler+0x10>)
 80027ea:	f002 fa20 	bl	8004c2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	200000ac 	.word	0x200000ac

080027f8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80027fc:	4802      	ldr	r0, [pc, #8]	@ (8002808 <DMA1_Channel2_IRQHandler+0x10>)
 80027fe:	f002 fa16 	bl	8004c2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20000508 	.word	0x20000508

0800280c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002810:	4802      	ldr	r0, [pc, #8]	@ (800281c <DMA1_Channel3_IRQHandler+0x10>)
 8002812:	f002 fa0c 	bl	8004c2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000568 	.word	0x20000568

08002820 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002824:	4802      	ldr	r0, [pc, #8]	@ (8002830 <ADC1_2_IRQHandler+0x10>)
 8002826:	f000 fdbd 	bl	80033a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20000040 	.word	0x20000040

08002834 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002838:	4803      	ldr	r0, [pc, #12]	@ (8002848 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800283a:	f004 f9b7 	bl	8006bac <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800283e:	4803      	ldr	r0, [pc, #12]	@ (800284c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002840:	f004 f9b4 	bl	8006bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002844:	bf00      	nop
 8002846:	bd80      	pop	{r7, pc}
 8002848:	2000010c 	.word	0x2000010c
 800284c:	20000370 	.word	0x20000370

08002850 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002854:	4802      	ldr	r0, [pc, #8]	@ (8002860 <TIM3_IRQHandler+0x10>)
 8002856:	f004 f9a9 	bl	8006bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	200001d8 	.word	0x200001d8

08002864 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002868:	4802      	ldr	r0, [pc, #8]	@ (8002874 <TIM4_IRQHandler+0x10>)
 800286a:	f004 f99f 	bl	8006bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	200002a4 	.word	0x200002a4

08002878 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800287c:	4802      	ldr	r0, [pc, #8]	@ (8002888 <USART2_IRQHandler+0x10>)
 800287e:	f005 fc83 	bl	8008188 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	2000043c 	.word	0x2000043c

0800288c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Proximity_Pin);
 8002890:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002894:	f002 fccc 	bl	8005230 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002898:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800289c:	f002 fcc8 	bl	8005230 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_switch_Pin);
 80028a0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80028a4:	f002 fcc4 	bl	8005230 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80028a8:	bf00      	nop
 80028aa:	bd80      	pop	{r7, pc}

080028ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80028b0:	4b06      	ldr	r3, [pc, #24]	@ (80028cc <SystemInit+0x20>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b6:	4a05      	ldr	r2, [pc, #20]	@ (80028cc <SystemInit+0x20>)
 80028b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028d0:	480d      	ldr	r0, [pc, #52]	@ (8002908 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028d4:	f7ff ffea 	bl	80028ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028d8:	480c      	ldr	r0, [pc, #48]	@ (800290c <LoopForever+0x6>)
  ldr r1, =_edata
 80028da:	490d      	ldr	r1, [pc, #52]	@ (8002910 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002914 <LoopForever+0xe>)
  movs r3, #0
 80028de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80028e0:	e002      	b.n	80028e8 <LoopCopyDataInit>

080028e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028e6:	3304      	adds	r3, #4

080028e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028ec:	d3f9      	bcc.n	80028e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002918 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028f0:	4c0a      	ldr	r4, [pc, #40]	@ (800291c <LoopForever+0x16>)
  movs r3, #0
 80028f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028f4:	e001      	b.n	80028fa <LoopFillZerobss>

080028f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028f8:	3204      	adds	r2, #4

080028fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028fc:	d3fb      	bcc.n	80028f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028fe:	f006 feaf 	bl	8009660 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002902:	f7fe fb79 	bl	8000ff8 <main>

08002906 <LoopForever>:

LoopForever:
    b LoopForever
 8002906:	e7fe      	b.n	8002906 <LoopForever>
  ldr   r0, =_estack
 8002908:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800290c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002910:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002914:	08009710 	.word	0x08009710
  ldr r2, =_sbss
 8002918:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800291c:	2000078c 	.word	0x2000078c

08002920 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002920:	e7fe      	b.n	8002920 <ADC3_IRQHandler>

08002922 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002928:	2300      	movs	r3, #0
 800292a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800292c:	2003      	movs	r0, #3
 800292e:	f001 ff5b 	bl	80047e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002932:	2000      	movs	r0, #0
 8002934:	f000 f80e 	bl	8002954 <HAL_InitTick>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	71fb      	strb	r3, [r7, #7]
 8002942:	e001      	b.n	8002948 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002944:	f7ff fcd2 	bl	80022ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002948:	79fb      	ldrb	r3, [r7, #7]

}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002960:	4b16      	ldr	r3, [pc, #88]	@ (80029bc <HAL_InitTick+0x68>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d022      	beq.n	80029ae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002968:	4b15      	ldr	r3, [pc, #84]	@ (80029c0 <HAL_InitTick+0x6c>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4b13      	ldr	r3, [pc, #76]	@ (80029bc <HAL_InitTick+0x68>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002974:	fbb1 f3f3 	udiv	r3, r1, r3
 8002978:	fbb2 f3f3 	udiv	r3, r2, r3
 800297c:	4618      	mov	r0, r3
 800297e:	f001 ff66 	bl	800484e <HAL_SYSTICK_Config>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10f      	bne.n	80029a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b0f      	cmp	r3, #15
 800298c:	d809      	bhi.n	80029a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800298e:	2200      	movs	r2, #0
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	f04f 30ff 	mov.w	r0, #4294967295
 8002996:	f001 ff32 	bl	80047fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800299a:	4a0a      	ldr	r2, [pc, #40]	@ (80029c4 <HAL_InitTick+0x70>)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	e007      	b.n	80029b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	73fb      	strb	r3, [r7, #15]
 80029a6:	e004      	b.n	80029b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
 80029ac:	e001      	b.n	80029b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20000014 	.word	0x20000014
 80029c0:	2000000c 	.word	0x2000000c
 80029c4:	20000010 	.word	0x20000010

080029c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029cc:	4b05      	ldr	r3, [pc, #20]	@ (80029e4 <HAL_IncTick+0x1c>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4b05      	ldr	r3, [pc, #20]	@ (80029e8 <HAL_IncTick+0x20>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4413      	add	r3, r2
 80029d6:	4a03      	ldr	r2, [pc, #12]	@ (80029e4 <HAL_IncTick+0x1c>)
 80029d8:	6013      	str	r3, [r2, #0]
}
 80029da:	bf00      	nop
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	20000788 	.word	0x20000788
 80029e8:	20000014 	.word	0x20000014

080029ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return uwTick;
 80029f0:	4b03      	ldr	r3, [pc, #12]	@ (8002a00 <HAL_GetTick+0x14>)
 80029f2:	681b      	ldr	r3, [r3, #0]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	20000788 	.word	0x20000788

08002a04 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	609a      	str	r2, [r3, #8]
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
 8002a32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	609a      	str	r2, [r3, #8]
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
 8002a78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	3360      	adds	r3, #96	@ 0x60
 8002a7e:	461a      	mov	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	4b08      	ldr	r3, [pc, #32]	@ (8002ab0 <LL_ADC_SetOffset+0x44>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002aa4:	bf00      	nop
 8002aa6:	371c      	adds	r7, #28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	03fff000 	.word	0x03fff000

08002ab4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3360      	adds	r3, #96	@ 0x60
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	3360      	adds	r3, #96	@ 0x60
 8002af0:	461a      	mov	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	431a      	orrs	r2, r3
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002b0a:	bf00      	nop
 8002b0c:	371c      	adds	r7, #28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b087      	sub	sp, #28
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	60f8      	str	r0, [r7, #12]
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	3360      	adds	r3, #96	@ 0x60
 8002b26:	461a      	mov	r2, r3
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002b40:	bf00      	nop
 8002b42:	371c      	adds	r7, #28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b087      	sub	sp, #28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3360      	adds	r3, #96	@ 0x60
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	431a      	orrs	r2, r3
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002b76:	bf00      	nop
 8002b78:	371c      	adds	r7, #28
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	615a      	str	r2, [r3, #20]
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e000      	b.n	8002bc2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b087      	sub	sp, #28
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	60f8      	str	r0, [r7, #12]
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	3330      	adds	r3, #48	@ 0x30
 8002bde:	461a      	mov	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	f003 030c 	and.w	r3, r3, #12
 8002bea:	4413      	add	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	211f      	movs	r1, #31
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	401a      	ands	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	0e9b      	lsrs	r3, r3, #26
 8002c06:	f003 011f 	and.w	r1, r3, #31
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	fa01 f303 	lsl.w	r3, r1, r3
 8002c14:	431a      	orrs	r2, r3
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c1a:	bf00      	nop
 8002c1c:	371c      	adds	r7, #28
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c32:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	3314      	adds	r3, #20
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	0e5b      	lsrs	r3, r3, #25
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	4413      	add	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	0d1b      	lsrs	r3, r3, #20
 8002c74:	f003 031f 	and.w	r3, r3, #31
 8002c78:	2107      	movs	r1, #7
 8002c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	401a      	ands	r2, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	0d1b      	lsrs	r3, r3, #20
 8002c86:	f003 031f 	and.w	r3, r3, #31
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c90:	431a      	orrs	r2, r3
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c96:	bf00      	nop
 8002c98:	371c      	adds	r7, #28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
	...

08002ca4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f003 0318 	and.w	r3, r3, #24
 8002cc6:	4908      	ldr	r1, [pc, #32]	@ (8002ce8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002cc8:	40d9      	lsrs	r1, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	400b      	ands	r3, r1
 8002cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002cda:	bf00      	nop
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	0007ffff 	.word	0x0007ffff

08002cec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 031f 	and.w	r3, r3, #31
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002d34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6093      	str	r3, [r2, #8]
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d5c:	d101      	bne.n	8002d62 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002d80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d84:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002dac:	d101      	bne.n	8002db2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002dd0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002dd4:	f043 0201 	orr.w	r2, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d101      	bne.n	8002e00 <LL_ADC_IsEnabled+0x18>
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e000      	b.n	8002e02 <LL_ADC_IsEnabled+0x1a>
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e1e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e22:	f043 0204 	orr.w	r2, r3, #4
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d101      	bne.n	8002e4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d101      	bne.n	8002e74 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e70:	2301      	movs	r3, #1
 8002e72:	e000      	b.n	8002e76 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
	...

08002e84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e84:	b590      	push	{r4, r7, lr}
 8002e86:	b089      	sub	sp, #36	@ 0x24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e1a9      	b.n	80031f2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d109      	bne.n	8002ec0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff fa41 	bl	8002334 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff ff3f 	bl	8002d48 <LL_ADC_IsDeepPowerDownEnabled>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d004      	beq.n	8002eda <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff ff25 	bl	8002d24 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff ff5a 	bl	8002d98 <LL_ADC_IsInternalRegulatorEnabled>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d115      	bne.n	8002f16 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff ff3e 	bl	8002d70 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ef4:	4b9c      	ldr	r3, [pc, #624]	@ (8003168 <HAL_ADC_Init+0x2e4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	099b      	lsrs	r3, r3, #6
 8002efa:	4a9c      	ldr	r2, [pc, #624]	@ (800316c <HAL_ADC_Init+0x2e8>)
 8002efc:	fba2 2303 	umull	r2, r3, r2, r3
 8002f00:	099b      	lsrs	r3, r3, #6
 8002f02:	3301      	adds	r3, #1
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f08:	e002      	b.n	8002f10 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f9      	bne.n	8002f0a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff ff3c 	bl	8002d98 <LL_ADC_IsInternalRegulatorEnabled>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10d      	bne.n	8002f42 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f2a:	f043 0210 	orr.w	r2, r3, #16
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f36:	f043 0201 	orr.w	r2, r3, #1
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff ff75 	bl	8002e36 <LL_ADC_REG_IsConversionOngoing>
 8002f4c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f52:	f003 0310 	and.w	r3, r3, #16
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f040 8142 	bne.w	80031e0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f040 813e 	bne.w	80031e0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f68:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002f6c:	f043 0202 	orr.w	r2, r3, #2
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff ff35 	bl	8002de8 <LL_ADC_IsEnabled>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d141      	bne.n	8003008 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f8c:	d004      	beq.n	8002f98 <HAL_ADC_Init+0x114>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a77      	ldr	r2, [pc, #476]	@ (8003170 <HAL_ADC_Init+0x2ec>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d10f      	bne.n	8002fb8 <HAL_ADC_Init+0x134>
 8002f98:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002f9c:	f7ff ff24 	bl	8002de8 <LL_ADC_IsEnabled>
 8002fa0:	4604      	mov	r4, r0
 8002fa2:	4873      	ldr	r0, [pc, #460]	@ (8003170 <HAL_ADC_Init+0x2ec>)
 8002fa4:	f7ff ff20 	bl	8002de8 <LL_ADC_IsEnabled>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	4323      	orrs	r3, r4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	bf0c      	ite	eq
 8002fb0:	2301      	moveq	r3, #1
 8002fb2:	2300      	movne	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	e012      	b.n	8002fde <HAL_ADC_Init+0x15a>
 8002fb8:	486e      	ldr	r0, [pc, #440]	@ (8003174 <HAL_ADC_Init+0x2f0>)
 8002fba:	f7ff ff15 	bl	8002de8 <LL_ADC_IsEnabled>
 8002fbe:	4604      	mov	r4, r0
 8002fc0:	486d      	ldr	r0, [pc, #436]	@ (8003178 <HAL_ADC_Init+0x2f4>)
 8002fc2:	f7ff ff11 	bl	8002de8 <LL_ADC_IsEnabled>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	431c      	orrs	r4, r3
 8002fca:	486c      	ldr	r0, [pc, #432]	@ (800317c <HAL_ADC_Init+0x2f8>)
 8002fcc:	f7ff ff0c 	bl	8002de8 <LL_ADC_IsEnabled>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	4323      	orrs	r3, r4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	bf0c      	ite	eq
 8002fd8:	2301      	moveq	r3, #1
 8002fda:	2300      	movne	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d012      	beq.n	8003008 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fea:	d004      	beq.n	8002ff6 <HAL_ADC_Init+0x172>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a5f      	ldr	r2, [pc, #380]	@ (8003170 <HAL_ADC_Init+0x2ec>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d101      	bne.n	8002ffa <HAL_ADC_Init+0x176>
 8002ff6:	4a62      	ldr	r2, [pc, #392]	@ (8003180 <HAL_ADC_Init+0x2fc>)
 8002ff8:	e000      	b.n	8002ffc <HAL_ADC_Init+0x178>
 8002ffa:	4a62      	ldr	r2, [pc, #392]	@ (8003184 <HAL_ADC_Init+0x300>)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	4619      	mov	r1, r3
 8003002:	4610      	mov	r0, r2
 8003004:	f7ff fcfe 	bl	8002a04 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	7f5b      	ldrb	r3, [r3, #29]
 800300c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003012:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003018:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800301e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003026:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003028:	4313      	orrs	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003032:	2b01      	cmp	r3, #1
 8003034:	d106      	bne.n	8003044 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303a:	3b01      	subs	r3, #1
 800303c:	045b      	lsls	r3, r3, #17
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4313      	orrs	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003048:	2b00      	cmp	r3, #0
 800304a:	d009      	beq.n	8003060 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003050:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003058:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4313      	orrs	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	4b48      	ldr	r3, [pc, #288]	@ (8003188 <HAL_ADC_Init+0x304>)
 8003068:	4013      	ands	r3, r2
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6812      	ldr	r2, [r2, #0]
 800306e:	69b9      	ldr	r1, [r7, #24]
 8003070:	430b      	orrs	r3, r1
 8003072:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff fee4 	bl	8002e5c <LL_ADC_INJ_IsConversionOngoing>
 8003094:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d17f      	bne.n	800319c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d17c      	bne.n	800319c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80030a6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80030ae:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80030be:	f023 0302 	bic.w	r3, r3, #2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6812      	ldr	r2, [r2, #0]
 80030c6:	69b9      	ldr	r1, [r7, #24]
 80030c8:	430b      	orrs	r3, r1
 80030ca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d017      	beq.n	8003104 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691a      	ldr	r2, [r3, #16]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80030e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80030ec:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80030f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6911      	ldr	r1, [r2, #16]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6812      	ldr	r2, [r2, #0]
 80030fc:	430b      	orrs	r3, r1
 80030fe:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003102:	e013      	b.n	800312c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003112:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6812      	ldr	r2, [r2, #0]
 8003120:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003124:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003128:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003132:	2b01      	cmp	r3, #1
 8003134:	d12a      	bne.n	800318c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003140:	f023 0304 	bic.w	r3, r3, #4
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800314c:	4311      	orrs	r1, r2
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003152:	4311      	orrs	r1, r2
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003158:	430a      	orrs	r2, r1
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f042 0201 	orr.w	r2, r2, #1
 8003164:	611a      	str	r2, [r3, #16]
 8003166:	e019      	b.n	800319c <HAL_ADC_Init+0x318>
 8003168:	2000000c 	.word	0x2000000c
 800316c:	053e2d63 	.word	0x053e2d63
 8003170:	50000100 	.word	0x50000100
 8003174:	50000400 	.word	0x50000400
 8003178:	50000500 	.word	0x50000500
 800317c:	50000600 	.word	0x50000600
 8003180:	50000300 	.word	0x50000300
 8003184:	50000700 	.word	0x50000700
 8003188:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691a      	ldr	r2, [r3, #16]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0201 	bic.w	r2, r2, #1
 800319a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d10c      	bne.n	80031be <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031aa:	f023 010f 	bic.w	r1, r3, #15
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	1e5a      	subs	r2, r3, #1
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80031bc:	e007      	b.n	80031ce <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 020f 	bic.w	r2, r2, #15
 80031cc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d2:	f023 0303 	bic.w	r3, r3, #3
 80031d6:	f043 0201 	orr.w	r2, r3, #1
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80031de:	e007      	b.n	80031f0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e4:	f043 0210 	orr.w	r2, r3, #16
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80031f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3724      	adds	r7, #36	@ 0x24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd90      	pop	{r4, r7, pc}
 80031fa:	bf00      	nop

080031fc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003210:	d004      	beq.n	800321c <HAL_ADC_Start_DMA+0x20>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a5a      	ldr	r2, [pc, #360]	@ (8003380 <HAL_ADC_Start_DMA+0x184>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d101      	bne.n	8003220 <HAL_ADC_Start_DMA+0x24>
 800321c:	4b59      	ldr	r3, [pc, #356]	@ (8003384 <HAL_ADC_Start_DMA+0x188>)
 800321e:	e000      	b.n	8003222 <HAL_ADC_Start_DMA+0x26>
 8003220:	4b59      	ldr	r3, [pc, #356]	@ (8003388 <HAL_ADC_Start_DMA+0x18c>)
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fd62 	bl	8002cec <LL_ADC_GetMultimode>
 8003228:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff fe01 	bl	8002e36 <LL_ADC_REG_IsConversionOngoing>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	f040 809b 	bne.w	8003372 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003242:	2b01      	cmp	r3, #1
 8003244:	d101      	bne.n	800324a <HAL_ADC_Start_DMA+0x4e>
 8003246:	2302      	movs	r3, #2
 8003248:	e096      	b.n	8003378 <HAL_ADC_Start_DMA+0x17c>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a4d      	ldr	r2, [pc, #308]	@ (800338c <HAL_ADC_Start_DMA+0x190>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d008      	beq.n	800326e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d005      	beq.n	800326e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	2b05      	cmp	r3, #5
 8003266:	d002      	beq.n	800326e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	2b09      	cmp	r3, #9
 800326c:	d17a      	bne.n	8003364 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 ff60 	bl	8004134 <ADC_Enable>
 8003274:	4603      	mov	r3, r0
 8003276:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003278:	7dfb      	ldrb	r3, [r7, #23]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d16d      	bne.n	800335a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003282:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003286:	f023 0301 	bic.w	r3, r3, #1
 800328a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a3a      	ldr	r2, [pc, #232]	@ (8003380 <HAL_ADC_Start_DMA+0x184>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d009      	beq.n	80032b0 <HAL_ADC_Start_DMA+0xb4>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a3b      	ldr	r2, [pc, #236]	@ (8003390 <HAL_ADC_Start_DMA+0x194>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d002      	beq.n	80032ac <HAL_ADC_Start_DMA+0xb0>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	e003      	b.n	80032b4 <HAL_ADC_Start_DMA+0xb8>
 80032ac:	4b39      	ldr	r3, [pc, #228]	@ (8003394 <HAL_ADC_Start_DMA+0x198>)
 80032ae:	e001      	b.n	80032b4 <HAL_ADC_Start_DMA+0xb8>
 80032b0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d002      	beq.n	80032c2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d105      	bne.n	80032ce <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d006      	beq.n	80032e8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032de:	f023 0206 	bic.w	r2, r3, #6
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	661a      	str	r2, [r3, #96]	@ 0x60
 80032e6:	e002      	b.n	80032ee <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f2:	4a29      	ldr	r2, [pc, #164]	@ (8003398 <HAL_ADC_Start_DMA+0x19c>)
 80032f4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032fa:	4a28      	ldr	r2, [pc, #160]	@ (800339c <HAL_ADC_Start_DMA+0x1a0>)
 80032fc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003302:	4a27      	ldr	r2, [pc, #156]	@ (80033a0 <HAL_ADC_Start_DMA+0x1a4>)
 8003304:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	221c      	movs	r2, #28
 800330c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 0210 	orr.w	r2, r2, #16
 8003324:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0201 	orr.w	r2, r2, #1
 8003334:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	3340      	adds	r3, #64	@ 0x40
 8003340:	4619      	mov	r1, r3
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f001 fb37 	bl	80049b8 <HAL_DMA_Start_IT>
 800334a:	4603      	mov	r3, r0
 800334c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff fd5b 	bl	8002e0e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003358:	e00d      	b.n	8003376 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003362:	e008      	b.n	8003376 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003370:	e001      	b.n	8003376 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003372:	2302      	movs	r3, #2
 8003374:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003376:	7dfb      	ldrb	r3, [r7, #23]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	50000100 	.word	0x50000100
 8003384:	50000300 	.word	0x50000300
 8003388:	50000700 	.word	0x50000700
 800338c:	50000600 	.word	0x50000600
 8003390:	50000500 	.word	0x50000500
 8003394:	50000400 	.word	0x50000400
 8003398:	08004261 	.word	0x08004261
 800339c:	08004339 	.word	0x08004339
 80033a0:	08004355 	.word	0x08004355

080033a4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08a      	sub	sp, #40	@ 0x28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80033ac:	2300      	movs	r3, #0
 80033ae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033c8:	d004      	beq.n	80033d4 <HAL_ADC_IRQHandler+0x30>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a8e      	ldr	r2, [pc, #568]	@ (8003608 <HAL_ADC_IRQHandler+0x264>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d101      	bne.n	80033d8 <HAL_ADC_IRQHandler+0x34>
 80033d4:	4b8d      	ldr	r3, [pc, #564]	@ (800360c <HAL_ADC_IRQHandler+0x268>)
 80033d6:	e000      	b.n	80033da <HAL_ADC_IRQHandler+0x36>
 80033d8:	4b8d      	ldr	r3, [pc, #564]	@ (8003610 <HAL_ADC_IRQHandler+0x26c>)
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff fc86 	bl	8002cec <LL_ADC_GetMultimode>
 80033e0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d017      	beq.n	800341c <HAL_ADC_IRQHandler+0x78>
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d012      	beq.n	800341c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d105      	bne.n	800340e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003406:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f001 f808 	bl	8004424 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2202      	movs	r2, #2
 800341a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b00      	cmp	r3, #0
 8003424:	d004      	beq.n	8003430 <HAL_ADC_IRQHandler+0x8c>
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10b      	bne.n	8003448 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 8094 	beq.w	8003564 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 808e 	beq.w	8003564 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344c:	f003 0310 	and.w	r3, r3, #16
 8003450:	2b00      	cmp	r3, #0
 8003452:	d105      	bne.n	8003460 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003458:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff fb9f 	bl	8002ba8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d072      	beq.n	8003556 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a64      	ldr	r2, [pc, #400]	@ (8003608 <HAL_ADC_IRQHandler+0x264>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d009      	beq.n	800348e <HAL_ADC_IRQHandler+0xea>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a65      	ldr	r2, [pc, #404]	@ (8003614 <HAL_ADC_IRQHandler+0x270>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d002      	beq.n	800348a <HAL_ADC_IRQHandler+0xe6>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	e003      	b.n	8003492 <HAL_ADC_IRQHandler+0xee>
 800348a:	4b63      	ldr	r3, [pc, #396]	@ (8003618 <HAL_ADC_IRQHandler+0x274>)
 800348c:	e001      	b.n	8003492 <HAL_ADC_IRQHandler+0xee>
 800348e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6812      	ldr	r2, [r2, #0]
 8003496:	4293      	cmp	r3, r2
 8003498:	d008      	beq.n	80034ac <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d005      	beq.n	80034ac <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	2b05      	cmp	r3, #5
 80034a4:	d002      	beq.n	80034ac <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2b09      	cmp	r3, #9
 80034aa:	d104      	bne.n	80034b6 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	623b      	str	r3, [r7, #32]
 80034b4:	e014      	b.n	80034e0 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a53      	ldr	r2, [pc, #332]	@ (8003608 <HAL_ADC_IRQHandler+0x264>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d009      	beq.n	80034d4 <HAL_ADC_IRQHandler+0x130>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a53      	ldr	r2, [pc, #332]	@ (8003614 <HAL_ADC_IRQHandler+0x270>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d002      	beq.n	80034d0 <HAL_ADC_IRQHandler+0x12c>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	e003      	b.n	80034d8 <HAL_ADC_IRQHandler+0x134>
 80034d0:	4b51      	ldr	r3, [pc, #324]	@ (8003618 <HAL_ADC_IRQHandler+0x274>)
 80034d2:	e001      	b.n	80034d8 <HAL_ADC_IRQHandler+0x134>
 80034d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80034d8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d135      	bne.n	8003556 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d12e      	bne.n	8003556 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff fc9a 	bl	8002e36 <LL_ADC_REG_IsConversionOngoing>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d11a      	bne.n	800353e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 020c 	bic.w	r2, r2, #12
 8003516:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800351c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003528:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d112      	bne.n	8003556 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003534:	f043 0201 	orr.w	r2, r3, #1
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800353c:	e00b      	b.n	8003556 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003542:	f043 0210 	orr.w	r2, r3, #16
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800354e:	f043 0201 	orr.w	r2, r3, #1
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f984 	bl	8003864 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	220c      	movs	r2, #12
 8003562:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b00      	cmp	r3, #0
 800356c:	d004      	beq.n	8003578 <HAL_ADC_IRQHandler+0x1d4>
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	f003 0320 	and.w	r3, r3, #32
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10b      	bne.n	8003590 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 80b3 	beq.w	80036ea <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 80ad 	beq.w	80036ea <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003594:	f003 0310 	and.w	r3, r3, #16
 8003598:	2b00      	cmp	r3, #0
 800359a:	d105      	bne.n	80035a8 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff fb3a 	bl	8002c26 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80035b2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff faf5 	bl	8002ba8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80035be:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a10      	ldr	r2, [pc, #64]	@ (8003608 <HAL_ADC_IRQHandler+0x264>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d009      	beq.n	80035de <HAL_ADC_IRQHandler+0x23a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a11      	ldr	r2, [pc, #68]	@ (8003614 <HAL_ADC_IRQHandler+0x270>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d002      	beq.n	80035da <HAL_ADC_IRQHandler+0x236>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	e003      	b.n	80035e2 <HAL_ADC_IRQHandler+0x23e>
 80035da:	4b0f      	ldr	r3, [pc, #60]	@ (8003618 <HAL_ADC_IRQHandler+0x274>)
 80035dc:	e001      	b.n	80035e2 <HAL_ADC_IRQHandler+0x23e>
 80035de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d008      	beq.n	80035fc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	2b06      	cmp	r3, #6
 80035f4:	d002      	beq.n	80035fc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2b07      	cmp	r3, #7
 80035fa:	d10f      	bne.n	800361c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	623b      	str	r3, [r7, #32]
 8003604:	e01f      	b.n	8003646 <HAL_ADC_IRQHandler+0x2a2>
 8003606:	bf00      	nop
 8003608:	50000100 	.word	0x50000100
 800360c:	50000300 	.word	0x50000300
 8003610:	50000700 	.word	0x50000700
 8003614:	50000500 	.word	0x50000500
 8003618:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a8b      	ldr	r2, [pc, #556]	@ (8003850 <HAL_ADC_IRQHandler+0x4ac>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d009      	beq.n	800363a <HAL_ADC_IRQHandler+0x296>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a8a      	ldr	r2, [pc, #552]	@ (8003854 <HAL_ADC_IRQHandler+0x4b0>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d002      	beq.n	8003636 <HAL_ADC_IRQHandler+0x292>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	e003      	b.n	800363e <HAL_ADC_IRQHandler+0x29a>
 8003636:	4b88      	ldr	r3, [pc, #544]	@ (8003858 <HAL_ADC_IRQHandler+0x4b4>)
 8003638:	e001      	b.n	800363e <HAL_ADC_IRQHandler+0x29a>
 800363a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800363e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d047      	beq.n	80036dc <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d007      	beq.n	8003666 <HAL_ADC_IRQHandler+0x2c2>
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d03f      	beq.n	80036dc <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003662:	2b00      	cmp	r3, #0
 8003664:	d13a      	bne.n	80036dc <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003670:	2b40      	cmp	r3, #64	@ 0x40
 8003672:	d133      	bne.n	80036dc <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d12e      	bne.n	80036dc <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff fbea 	bl	8002e5c <LL_ADC_INJ_IsConversionOngoing>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d11a      	bne.n	80036c4 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800369c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d112      	bne.n	80036dc <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ba:	f043 0201 	orr.w	r2, r3, #1
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80036c2:	e00b      	b.n	80036dc <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c8:	f043 0210 	orr.w	r2, r3, #16
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d4:	f043 0201 	orr.w	r2, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 fe79 	bl	80043d4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2260      	movs	r2, #96	@ 0x60
 80036e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d011      	beq.n	8003718 <HAL_ADC_IRQHandler+0x374>
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00c      	beq.n	8003718 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003702:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f8be 	bl	800388c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2280      	movs	r2, #128	@ 0x80
 8003716:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800371e:	2b00      	cmp	r3, #0
 8003720:	d012      	beq.n	8003748 <HAL_ADC_IRQHandler+0x3a4>
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00d      	beq.n	8003748 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003730:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 fe5f 	bl	80043fc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003746:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800374e:	2b00      	cmp	r3, #0
 8003750:	d012      	beq.n	8003778 <HAL_ADC_IRQHandler+0x3d4>
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00d      	beq.n	8003778 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003760:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 fe51 	bl	8004410 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003776:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f003 0310 	and.w	r3, r3, #16
 800377e:	2b00      	cmp	r3, #0
 8003780:	d043      	beq.n	800380a <HAL_ADC_IRQHandler+0x466>
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	f003 0310 	and.w	r3, r3, #16
 8003788:	2b00      	cmp	r3, #0
 800378a:	d03e      	beq.n	800380a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003790:	2b00      	cmp	r3, #0
 8003792:	d102      	bne.n	800379a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003794:	2301      	movs	r3, #1
 8003796:	627b      	str	r3, [r7, #36]	@ 0x24
 8003798:	e021      	b.n	80037de <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d015      	beq.n	80037cc <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037a8:	d004      	beq.n	80037b4 <HAL_ADC_IRQHandler+0x410>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a28      	ldr	r2, [pc, #160]	@ (8003850 <HAL_ADC_IRQHandler+0x4ac>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d101      	bne.n	80037b8 <HAL_ADC_IRQHandler+0x414>
 80037b4:	4b29      	ldr	r3, [pc, #164]	@ (800385c <HAL_ADC_IRQHandler+0x4b8>)
 80037b6:	e000      	b.n	80037ba <HAL_ADC_IRQHandler+0x416>
 80037b8:	4b29      	ldr	r3, [pc, #164]	@ (8003860 <HAL_ADC_IRQHandler+0x4bc>)
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff faa4 	bl	8002d08 <LL_ADC_GetMultiDMATransfer>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00b      	beq.n	80037de <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80037c6:	2301      	movs	r3, #1
 80037c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ca:	e008      	b.n	80037de <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80037da:	2301      	movs	r3, #1
 80037dc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80037de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d10e      	bne.n	8003802 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037f4:	f043 0202 	orr.w	r2, r3, #2
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f84f 	bl	80038a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2210      	movs	r2, #16
 8003808:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003810:	2b00      	cmp	r3, #0
 8003812:	d018      	beq.n	8003846 <HAL_ADC_IRQHandler+0x4a2>
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800381a:	2b00      	cmp	r3, #0
 800381c:	d013      	beq.n	8003846 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003822:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800382e:	f043 0208 	orr.w	r2, r3, #8
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800383e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 fdd1 	bl	80043e8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003846:	bf00      	nop
 8003848:	3728      	adds	r7, #40	@ 0x28
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	50000100 	.word	0x50000100
 8003854:	50000500 	.word	0x50000500
 8003858:	50000400 	.word	0x50000400
 800385c:	50000300 	.word	0x50000300
 8003860:	50000700 	.word	0x50000700

08003864 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b0b6      	sub	sp, #216	@ 0xd8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038be:	2300      	movs	r3, #0
 80038c0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d102      	bne.n	80038d8 <HAL_ADC_ConfigChannel+0x24>
 80038d2:	2302      	movs	r3, #2
 80038d4:	f000 bc13 	b.w	80040fe <HAL_ADC_ConfigChannel+0x84a>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff faa6 	bl	8002e36 <LL_ADC_REG_IsConversionOngoing>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f040 83f3 	bne.w	80040d8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6818      	ldr	r0, [r3, #0]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	6859      	ldr	r1, [r3, #4]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	f7ff f965 	bl	8002bce <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff fa94 	bl	8002e36 <LL_ADC_REG_IsConversionOngoing>
 800390e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff faa0 	bl	8002e5c <LL_ADC_INJ_IsConversionOngoing>
 800391c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003920:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003924:	2b00      	cmp	r3, #0
 8003926:	f040 81d9 	bne.w	8003cdc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800392a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800392e:	2b00      	cmp	r3, #0
 8003930:	f040 81d4 	bne.w	8003cdc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800393c:	d10f      	bne.n	800395e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2200      	movs	r2, #0
 8003948:	4619      	mov	r1, r3
 800394a:	f7ff f97f 	bl	8002c4c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff f913 	bl	8002b82 <LL_ADC_SetSamplingTimeCommonConfig>
 800395c:	e00e      	b.n	800397c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	6819      	ldr	r1, [r3, #0]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	461a      	mov	r2, r3
 800396c:	f7ff f96e 	bl	8002c4c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2100      	movs	r1, #0
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff f903 	bl	8002b82 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	695a      	ldr	r2, [r3, #20]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	08db      	lsrs	r3, r3, #3
 8003988:	f003 0303 	and.w	r3, r3, #3
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	2b04      	cmp	r3, #4
 800399c:	d022      	beq.n	80039e4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6818      	ldr	r0, [r3, #0]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	6919      	ldr	r1, [r3, #16]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80039ae:	f7ff f85d 	bl	8002a6c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6818      	ldr	r0, [r3, #0]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	6919      	ldr	r1, [r3, #16]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	461a      	mov	r2, r3
 80039c0:	f7ff f8a9 	bl	8002b16 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6818      	ldr	r0, [r3, #0]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d102      	bne.n	80039da <HAL_ADC_ConfigChannel+0x126>
 80039d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039d8:	e000      	b.n	80039dc <HAL_ADC_ConfigChannel+0x128>
 80039da:	2300      	movs	r3, #0
 80039dc:	461a      	mov	r2, r3
 80039de:	f7ff f8b5 	bl	8002b4c <LL_ADC_SetOffsetSaturation>
 80039e2:	e17b      	b.n	8003cdc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2100      	movs	r1, #0
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff f862 	bl	8002ab4 <LL_ADC_GetOffsetChannel>
 80039f0:	4603      	mov	r3, r0
 80039f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10a      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x15c>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2100      	movs	r1, #0
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff f857 	bl	8002ab4 <LL_ADC_GetOffsetChannel>
 8003a06:	4603      	mov	r3, r0
 8003a08:	0e9b      	lsrs	r3, r3, #26
 8003a0a:	f003 021f 	and.w	r2, r3, #31
 8003a0e:	e01e      	b.n	8003a4e <HAL_ADC_ConfigChannel+0x19a>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2100      	movs	r1, #0
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff f84c 	bl	8002ab4 <LL_ADC_GetOffsetChannel>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003a26:	fa93 f3a3 	rbit	r3, r3
 8003a2a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003a32:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003a3e:	2320      	movs	r3, #32
 8003a40:	e004      	b.n	8003a4c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003a42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a46:	fab3 f383 	clz	r3, r3
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d105      	bne.n	8003a66 <HAL_ADC_ConfigChannel+0x1b2>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	0e9b      	lsrs	r3, r3, #26
 8003a60:	f003 031f 	and.w	r3, r3, #31
 8003a64:	e018      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x1e4>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003a72:	fa93 f3a3 	rbit	r3, r3
 8003a76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003a7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003a82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003a8a:	2320      	movs	r3, #32
 8003a8c:	e004      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003a8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003a92:	fab3 f383 	clz	r3, r3
 8003a96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d106      	bne.n	8003aaa <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff f81b 	bl	8002ae0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2101      	movs	r1, #1
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fe ffff 	bl	8002ab4 <LL_ADC_GetOffsetChannel>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10a      	bne.n	8003ad6 <HAL_ADC_ConfigChannel+0x222>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fe fff4 	bl	8002ab4 <LL_ADC_GetOffsetChannel>
 8003acc:	4603      	mov	r3, r0
 8003ace:	0e9b      	lsrs	r3, r3, #26
 8003ad0:	f003 021f 	and.w	r2, r3, #31
 8003ad4:	e01e      	b.n	8003b14 <HAL_ADC_ConfigChannel+0x260>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2101      	movs	r1, #1
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fe ffe9 	bl	8002ab4 <LL_ADC_GetOffsetChannel>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003aec:	fa93 f3a3 	rbit	r3, r3
 8003af0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003af4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003af8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003afc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003b04:	2320      	movs	r3, #32
 8003b06:	e004      	b.n	8003b12 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003b08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003b0c:	fab3 f383 	clz	r3, r3
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d105      	bne.n	8003b2c <HAL_ADC_ConfigChannel+0x278>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	0e9b      	lsrs	r3, r3, #26
 8003b26:	f003 031f 	and.w	r3, r3, #31
 8003b2a:	e018      	b.n	8003b5e <HAL_ADC_ConfigChannel+0x2aa>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b38:	fa93 f3a3 	rbit	r3, r3
 8003b3c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003b40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003b48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003b50:	2320      	movs	r3, #32
 8003b52:	e004      	b.n	8003b5e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003b54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b58:	fab3 f383 	clz	r3, r3
 8003b5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d106      	bne.n	8003b70 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2200      	movs	r2, #0
 8003b68:	2101      	movs	r1, #1
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fe ffb8 	bl	8002ae0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2102      	movs	r1, #2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fe ff9c 	bl	8002ab4 <LL_ADC_GetOffsetChannel>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10a      	bne.n	8003b9c <HAL_ADC_ConfigChannel+0x2e8>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2102      	movs	r1, #2
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fe ff91 	bl	8002ab4 <LL_ADC_GetOffsetChannel>
 8003b92:	4603      	mov	r3, r0
 8003b94:	0e9b      	lsrs	r3, r3, #26
 8003b96:	f003 021f 	and.w	r2, r3, #31
 8003b9a:	e01e      	b.n	8003bda <HAL_ADC_ConfigChannel+0x326>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2102      	movs	r1, #2
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fe ff86 	bl	8002ab4 <LL_ADC_GetOffsetChannel>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bb2:	fa93 f3a3 	rbit	r3, r3
 8003bb6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003bba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003bbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003bc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003bca:	2320      	movs	r3, #32
 8003bcc:	e004      	b.n	8003bd8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003bce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003bd2:	fab3 f383 	clz	r3, r3
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d105      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x33e>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	0e9b      	lsrs	r3, r3, #26
 8003bec:	f003 031f 	and.w	r3, r3, #31
 8003bf0:	e016      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x36c>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003bfe:	fa93 f3a3 	rbit	r3, r3
 8003c02:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003c04:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003c06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003c0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003c12:	2320      	movs	r3, #32
 8003c14:	e004      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003c16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c1a:	fab3 f383 	clz	r3, r3
 8003c1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d106      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2102      	movs	r1, #2
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7fe ff57 	bl	8002ae0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2103      	movs	r1, #3
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fe ff3b 	bl	8002ab4 <LL_ADC_GetOffsetChannel>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10a      	bne.n	8003c5e <HAL_ADC_ConfigChannel+0x3aa>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2103      	movs	r1, #3
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fe ff30 	bl	8002ab4 <LL_ADC_GetOffsetChannel>
 8003c54:	4603      	mov	r3, r0
 8003c56:	0e9b      	lsrs	r3, r3, #26
 8003c58:	f003 021f 	and.w	r2, r3, #31
 8003c5c:	e017      	b.n	8003c8e <HAL_ADC_ConfigChannel+0x3da>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2103      	movs	r1, #3
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fe ff25 	bl	8002ab4 <LL_ADC_GetOffsetChannel>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c70:	fa93 f3a3 	rbit	r3, r3
 8003c74:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003c76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c78:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003c7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003c80:	2320      	movs	r3, #32
 8003c82:	e003      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003c84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c86:	fab3 f383 	clz	r3, r3
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d105      	bne.n	8003ca6 <HAL_ADC_ConfigChannel+0x3f2>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	0e9b      	lsrs	r3, r3, #26
 8003ca0:	f003 031f 	and.w	r3, r3, #31
 8003ca4:	e011      	b.n	8003cca <HAL_ADC_ConfigChannel+0x416>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cae:	fa93 f3a3 	rbit	r3, r3
 8003cb2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003cb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003cb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003cb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003cbe:	2320      	movs	r3, #32
 8003cc0:	e003      	b.n	8003cca <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003cc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cc4:	fab3 f383 	clz	r3, r3
 8003cc8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d106      	bne.n	8003cdc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2103      	movs	r1, #3
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fe ff02 	bl	8002ae0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff f881 	bl	8002de8 <LL_ADC_IsEnabled>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f040 813d 	bne.w	8003f68 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6818      	ldr	r0, [r3, #0]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	6819      	ldr	r1, [r3, #0]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	f7fe ffd2 	bl	8002ca4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	4aa2      	ldr	r2, [pc, #648]	@ (8003f90 <HAL_ADC_ConfigChannel+0x6dc>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	f040 812e 	bne.w	8003f68 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10b      	bne.n	8003d34 <HAL_ADC_ConfigChannel+0x480>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	0e9b      	lsrs	r3, r3, #26
 8003d22:	3301      	adds	r3, #1
 8003d24:	f003 031f 	and.w	r3, r3, #31
 8003d28:	2b09      	cmp	r3, #9
 8003d2a:	bf94      	ite	ls
 8003d2c:	2301      	movls	r3, #1
 8003d2e:	2300      	movhi	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	e019      	b.n	8003d68 <HAL_ADC_ConfigChannel+0x4b4>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d3c:	fa93 f3a3 	rbit	r3, r3
 8003d40:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003d42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d44:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003d46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003d4c:	2320      	movs	r3, #32
 8003d4e:	e003      	b.n	8003d58 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003d50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d52:	fab3 f383 	clz	r3, r3
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	3301      	adds	r3, #1
 8003d5a:	f003 031f 	and.w	r3, r3, #31
 8003d5e:	2b09      	cmp	r3, #9
 8003d60:	bf94      	ite	ls
 8003d62:	2301      	movls	r3, #1
 8003d64:	2300      	movhi	r3, #0
 8003d66:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d079      	beq.n	8003e60 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d107      	bne.n	8003d88 <HAL_ADC_ConfigChannel+0x4d4>
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	0e9b      	lsrs	r3, r3, #26
 8003d7e:	3301      	adds	r3, #1
 8003d80:	069b      	lsls	r3, r3, #26
 8003d82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d86:	e015      	b.n	8003db4 <HAL_ADC_ConfigChannel+0x500>
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d90:	fa93 f3a3 	rbit	r3, r3
 8003d94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003d96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d98:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003d9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003da0:	2320      	movs	r3, #32
 8003da2:	e003      	b.n	8003dac <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003da4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003da6:	fab3 f383 	clz	r3, r3
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	3301      	adds	r3, #1
 8003dae:	069b      	lsls	r3, r3, #26
 8003db0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d109      	bne.n	8003dd4 <HAL_ADC_ConfigChannel+0x520>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	0e9b      	lsrs	r3, r3, #26
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	2101      	movs	r1, #1
 8003dce:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd2:	e017      	b.n	8003e04 <HAL_ADC_ConfigChannel+0x550>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ddc:	fa93 f3a3 	rbit	r3, r3
 8003de0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003de2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003de4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003de6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003dec:	2320      	movs	r3, #32
 8003dee:	e003      	b.n	8003df8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003df0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003df2:	fab3 f383 	clz	r3, r3
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	3301      	adds	r3, #1
 8003dfa:	f003 031f 	and.w	r3, r3, #31
 8003dfe:	2101      	movs	r1, #1
 8003e00:	fa01 f303 	lsl.w	r3, r1, r3
 8003e04:	ea42 0103 	orr.w	r1, r2, r3
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10a      	bne.n	8003e2a <HAL_ADC_ConfigChannel+0x576>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	0e9b      	lsrs	r3, r3, #26
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	f003 021f 	and.w	r2, r3, #31
 8003e20:	4613      	mov	r3, r2
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	4413      	add	r3, r2
 8003e26:	051b      	lsls	r3, r3, #20
 8003e28:	e018      	b.n	8003e5c <HAL_ADC_ConfigChannel+0x5a8>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e32:	fa93 f3a3 	rbit	r3, r3
 8003e36:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003e42:	2320      	movs	r3, #32
 8003e44:	e003      	b.n	8003e4e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e48:	fab3 f383 	clz	r3, r3
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	3301      	adds	r3, #1
 8003e50:	f003 021f 	and.w	r2, r3, #31
 8003e54:	4613      	mov	r3, r2
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	4413      	add	r3, r2
 8003e5a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	e07e      	b.n	8003f5e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d107      	bne.n	8003e7c <HAL_ADC_ConfigChannel+0x5c8>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	0e9b      	lsrs	r3, r3, #26
 8003e72:	3301      	adds	r3, #1
 8003e74:	069b      	lsls	r3, r3, #26
 8003e76:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e7a:	e015      	b.n	8003ea8 <HAL_ADC_ConfigChannel+0x5f4>
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e84:	fa93 f3a3 	rbit	r3, r3
 8003e88:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e8c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003e94:	2320      	movs	r3, #32
 8003e96:	e003      	b.n	8003ea0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9a:	fab3 f383 	clz	r3, r3
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	069b      	lsls	r3, r3, #26
 8003ea4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d109      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x614>
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	0e9b      	lsrs	r3, r3, #26
 8003eba:	3301      	adds	r3, #1
 8003ebc:	f003 031f 	and.w	r3, r3, #31
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec6:	e017      	b.n	8003ef8 <HAL_ADC_ConfigChannel+0x644>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	fa93 f3a3 	rbit	r3, r3
 8003ed4:	61fb      	str	r3, [r7, #28]
  return result;
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003ee0:	2320      	movs	r3, #32
 8003ee2:	e003      	b.n	8003eec <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee6:	fab3 f383 	clz	r3, r3
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	3301      	adds	r3, #1
 8003eee:	f003 031f 	and.w	r3, r3, #31
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef8:	ea42 0103 	orr.w	r1, r2, r3
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10d      	bne.n	8003f24 <HAL_ADC_ConfigChannel+0x670>
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	0e9b      	lsrs	r3, r3, #26
 8003f0e:	3301      	adds	r3, #1
 8003f10:	f003 021f 	and.w	r2, r3, #31
 8003f14:	4613      	mov	r3, r2
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	4413      	add	r3, r2
 8003f1a:	3b1e      	subs	r3, #30
 8003f1c:	051b      	lsls	r3, r3, #20
 8003f1e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f22:	e01b      	b.n	8003f5c <HAL_ADC_ConfigChannel+0x6a8>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	fa93 f3a3 	rbit	r3, r3
 8003f30:	613b      	str	r3, [r7, #16]
  return result;
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003f3c:	2320      	movs	r3, #32
 8003f3e:	e003      	b.n	8003f48 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	fab3 f383 	clz	r3, r3
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	3301      	adds	r3, #1
 8003f4a:	f003 021f 	and.w	r2, r3, #31
 8003f4e:	4613      	mov	r3, r2
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	4413      	add	r3, r2
 8003f54:	3b1e      	subs	r3, #30
 8003f56:	051b      	lsls	r3, r3, #20
 8003f58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f5c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f62:	4619      	mov	r1, r3
 8003f64:	f7fe fe72 	bl	8002c4c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	4b09      	ldr	r3, [pc, #36]	@ (8003f94 <HAL_ADC_ConfigChannel+0x6e0>)
 8003f6e:	4013      	ands	r3, r2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 80be 	beq.w	80040f2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f7e:	d004      	beq.n	8003f8a <HAL_ADC_ConfigChannel+0x6d6>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a04      	ldr	r2, [pc, #16]	@ (8003f98 <HAL_ADC_ConfigChannel+0x6e4>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d10a      	bne.n	8003fa0 <HAL_ADC_ConfigChannel+0x6ec>
 8003f8a:	4b04      	ldr	r3, [pc, #16]	@ (8003f9c <HAL_ADC_ConfigChannel+0x6e8>)
 8003f8c:	e009      	b.n	8003fa2 <HAL_ADC_ConfigChannel+0x6ee>
 8003f8e:	bf00      	nop
 8003f90:	407f0000 	.word	0x407f0000
 8003f94:	80080000 	.word	0x80080000
 8003f98:	50000100 	.word	0x50000100
 8003f9c:	50000300 	.word	0x50000300
 8003fa0:	4b59      	ldr	r3, [pc, #356]	@ (8004108 <HAL_ADC_ConfigChannel+0x854>)
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fe fd54 	bl	8002a50 <LL_ADC_GetCommonPathInternalCh>
 8003fa8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a56      	ldr	r2, [pc, #344]	@ (800410c <HAL_ADC_ConfigChannel+0x858>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d004      	beq.n	8003fc0 <HAL_ADC_ConfigChannel+0x70c>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a55      	ldr	r2, [pc, #340]	@ (8004110 <HAL_ADC_ConfigChannel+0x85c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d13a      	bne.n	8004036 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003fc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fc4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d134      	bne.n	8004036 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fd4:	d005      	beq.n	8003fe2 <HAL_ADC_ConfigChannel+0x72e>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a4e      	ldr	r2, [pc, #312]	@ (8004114 <HAL_ADC_ConfigChannel+0x860>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	f040 8085 	bne.w	80040ec <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fea:	d004      	beq.n	8003ff6 <HAL_ADC_ConfigChannel+0x742>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a49      	ldr	r2, [pc, #292]	@ (8004118 <HAL_ADC_ConfigChannel+0x864>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d101      	bne.n	8003ffa <HAL_ADC_ConfigChannel+0x746>
 8003ff6:	4a49      	ldr	r2, [pc, #292]	@ (800411c <HAL_ADC_ConfigChannel+0x868>)
 8003ff8:	e000      	b.n	8003ffc <HAL_ADC_ConfigChannel+0x748>
 8003ffa:	4a43      	ldr	r2, [pc, #268]	@ (8004108 <HAL_ADC_ConfigChannel+0x854>)
 8003ffc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004000:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004004:	4619      	mov	r1, r3
 8004006:	4610      	mov	r0, r2
 8004008:	f7fe fd0f 	bl	8002a2a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800400c:	4b44      	ldr	r3, [pc, #272]	@ (8004120 <HAL_ADC_ConfigChannel+0x86c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	099b      	lsrs	r3, r3, #6
 8004012:	4a44      	ldr	r2, [pc, #272]	@ (8004124 <HAL_ADC_ConfigChannel+0x870>)
 8004014:	fba2 2303 	umull	r2, r3, r2, r3
 8004018:	099b      	lsrs	r3, r3, #6
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	4613      	mov	r3, r2
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	4413      	add	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004026:	e002      	b.n	800402e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	3b01      	subs	r3, #1
 800402c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1f9      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004034:	e05a      	b.n	80040ec <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a3b      	ldr	r2, [pc, #236]	@ (8004128 <HAL_ADC_ConfigChannel+0x874>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d125      	bne.n	800408c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004040:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004044:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d11f      	bne.n	800408c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a31      	ldr	r2, [pc, #196]	@ (8004118 <HAL_ADC_ConfigChannel+0x864>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d104      	bne.n	8004060 <HAL_ADC_ConfigChannel+0x7ac>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a34      	ldr	r2, [pc, #208]	@ (800412c <HAL_ADC_ConfigChannel+0x878>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d047      	beq.n	80040f0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004068:	d004      	beq.n	8004074 <HAL_ADC_ConfigChannel+0x7c0>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a2a      	ldr	r2, [pc, #168]	@ (8004118 <HAL_ADC_ConfigChannel+0x864>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d101      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x7c4>
 8004074:	4a29      	ldr	r2, [pc, #164]	@ (800411c <HAL_ADC_ConfigChannel+0x868>)
 8004076:	e000      	b.n	800407a <HAL_ADC_ConfigChannel+0x7c6>
 8004078:	4a23      	ldr	r2, [pc, #140]	@ (8004108 <HAL_ADC_ConfigChannel+0x854>)
 800407a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800407e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004082:	4619      	mov	r1, r3
 8004084:	4610      	mov	r0, r2
 8004086:	f7fe fcd0 	bl	8002a2a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800408a:	e031      	b.n	80040f0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a27      	ldr	r2, [pc, #156]	@ (8004130 <HAL_ADC_ConfigChannel+0x87c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d12d      	bne.n	80040f2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004096:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800409a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d127      	bne.n	80040f2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004118 <HAL_ADC_ConfigChannel+0x864>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d022      	beq.n	80040f2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040b4:	d004      	beq.n	80040c0 <HAL_ADC_ConfigChannel+0x80c>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a17      	ldr	r2, [pc, #92]	@ (8004118 <HAL_ADC_ConfigChannel+0x864>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d101      	bne.n	80040c4 <HAL_ADC_ConfigChannel+0x810>
 80040c0:	4a16      	ldr	r2, [pc, #88]	@ (800411c <HAL_ADC_ConfigChannel+0x868>)
 80040c2:	e000      	b.n	80040c6 <HAL_ADC_ConfigChannel+0x812>
 80040c4:	4a10      	ldr	r2, [pc, #64]	@ (8004108 <HAL_ADC_ConfigChannel+0x854>)
 80040c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80040ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80040ce:	4619      	mov	r1, r3
 80040d0:	4610      	mov	r0, r2
 80040d2:	f7fe fcaa 	bl	8002a2a <LL_ADC_SetCommonPathInternalCh>
 80040d6:	e00c      	b.n	80040f2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040dc:	f043 0220 	orr.w	r2, r3, #32
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80040ea:	e002      	b.n	80040f2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040ec:	bf00      	nop
 80040ee:	e000      	b.n	80040f2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80040fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80040fe:	4618      	mov	r0, r3
 8004100:	37d8      	adds	r7, #216	@ 0xd8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	50000700 	.word	0x50000700
 800410c:	c3210000 	.word	0xc3210000
 8004110:	90c00010 	.word	0x90c00010
 8004114:	50000600 	.word	0x50000600
 8004118:	50000100 	.word	0x50000100
 800411c:	50000300 	.word	0x50000300
 8004120:	2000000c 	.word	0x2000000c
 8004124:	053e2d63 	.word	0x053e2d63
 8004128:	c7520000 	.word	0xc7520000
 800412c:	50000500 	.word	0x50000500
 8004130:	cb840000 	.word	0xcb840000

08004134 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800413c:	2300      	movs	r3, #0
 800413e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4618      	mov	r0, r3
 8004146:	f7fe fe4f 	bl	8002de8 <LL_ADC_IsEnabled>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d176      	bne.n	800423e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	4b3c      	ldr	r3, [pc, #240]	@ (8004248 <ADC_Enable+0x114>)
 8004158:	4013      	ands	r3, r2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00d      	beq.n	800417a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004162:	f043 0210 	orr.w	r2, r3, #16
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800416e:	f043 0201 	orr.w	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e062      	b.n	8004240 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4618      	mov	r0, r3
 8004180:	f7fe fe1e 	bl	8002dc0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800418c:	d004      	beq.n	8004198 <ADC_Enable+0x64>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a2e      	ldr	r2, [pc, #184]	@ (800424c <ADC_Enable+0x118>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d101      	bne.n	800419c <ADC_Enable+0x68>
 8004198:	4b2d      	ldr	r3, [pc, #180]	@ (8004250 <ADC_Enable+0x11c>)
 800419a:	e000      	b.n	800419e <ADC_Enable+0x6a>
 800419c:	4b2d      	ldr	r3, [pc, #180]	@ (8004254 <ADC_Enable+0x120>)
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fe fc56 	bl	8002a50 <LL_ADC_GetCommonPathInternalCh>
 80041a4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80041a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d013      	beq.n	80041d6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041ae:	4b2a      	ldr	r3, [pc, #168]	@ (8004258 <ADC_Enable+0x124>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	099b      	lsrs	r3, r3, #6
 80041b4:	4a29      	ldr	r2, [pc, #164]	@ (800425c <ADC_Enable+0x128>)
 80041b6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ba:	099b      	lsrs	r3, r3, #6
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	4613      	mov	r3, r2
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	4413      	add	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80041c8:	e002      	b.n	80041d0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	3b01      	subs	r3, #1
 80041ce:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f9      	bne.n	80041ca <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80041d6:	f7fe fc09 	bl	80029ec <HAL_GetTick>
 80041da:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041dc:	e028      	b.n	8004230 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fe fe00 	bl	8002de8 <LL_ADC_IsEnabled>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d104      	bne.n	80041f8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fe fde4 	bl	8002dc0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80041f8:	f7fe fbf8 	bl	80029ec <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d914      	bls.n	8004230 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b01      	cmp	r3, #1
 8004212:	d00d      	beq.n	8004230 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004218:	f043 0210 	orr.w	r2, r3, #16
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004224:	f043 0201 	orr.w	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e007      	b.n	8004240 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b01      	cmp	r3, #1
 800423c:	d1cf      	bne.n	80041de <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	8000003f 	.word	0x8000003f
 800424c:	50000100 	.word	0x50000100
 8004250:	50000300 	.word	0x50000300
 8004254:	50000700 	.word	0x50000700
 8004258:	2000000c 	.word	0x2000000c
 800425c:	053e2d63 	.word	0x053e2d63

08004260 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004272:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004276:	2b00      	cmp	r3, #0
 8004278:	d14b      	bne.n	8004312 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800427e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b00      	cmp	r3, #0
 8004292:	d021      	beq.n	80042d8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4618      	mov	r0, r3
 800429a:	f7fe fc85 	bl	8002ba8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d032      	beq.n	800430a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d12b      	bne.n	800430a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d11f      	bne.n	800430a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ce:	f043 0201 	orr.w	r2, r3, #1
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80042d6:	e018      	b.n	800430a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d111      	bne.n	800430a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d105      	bne.n	800430a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004302:	f043 0201 	orr.w	r2, r3, #1
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f7ff faaa 	bl	8003864 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004310:	e00e      	b.n	8004330 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004316:	f003 0310 	and.w	r3, r3, #16
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f7ff fabe 	bl	80038a0 <HAL_ADC_ErrorCallback>
}
 8004324:	e004      	b.n	8004330 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800432a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	4798      	blx	r3
}
 8004330:	bf00      	nop
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004344:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f7ff fa96 	bl	8003878 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800434c:	bf00      	nop
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004360:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004366:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004372:	f043 0204 	orr.w	r2, r3, #4
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f7ff fa90 	bl	80038a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004380:	bf00      	nop
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <LL_ADC_IsEnabled>:
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <LL_ADC_IsEnabled+0x18>
 800439c:	2301      	movs	r3, #1
 800439e:	e000      	b.n	80043a2 <LL_ADC_IsEnabled+0x1a>
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <LL_ADC_REG_IsConversionOngoing>:
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d101      	bne.n	80043c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80043c2:	2301      	movs	r3, #1
 80043c4:	e000      	b.n	80043c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004438:	b590      	push	{r4, r7, lr}
 800443a:	b0a1      	sub	sp, #132	@ 0x84
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800444e:	2b01      	cmp	r3, #1
 8004450:	d101      	bne.n	8004456 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004452:	2302      	movs	r3, #2
 8004454:	e0e7      	b.n	8004626 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800445e:	2300      	movs	r3, #0
 8004460:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004462:	2300      	movs	r3, #0
 8004464:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800446e:	d102      	bne.n	8004476 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004470:	4b6f      	ldr	r3, [pc, #444]	@ (8004630 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004472:	60bb      	str	r3, [r7, #8]
 8004474:	e009      	b.n	800448a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a6e      	ldr	r2, [pc, #440]	@ (8004634 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d102      	bne.n	8004486 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004480:	4b6d      	ldr	r3, [pc, #436]	@ (8004638 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004482:	60bb      	str	r3, [r7, #8]
 8004484:	e001      	b.n	800448a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004486:	2300      	movs	r3, #0
 8004488:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10b      	bne.n	80044a8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004494:	f043 0220 	orr.w	r2, r3, #32
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e0be      	b.n	8004626 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff ff7f 	bl	80043ae <LL_ADC_REG_IsConversionOngoing>
 80044b0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff ff79 	bl	80043ae <LL_ADC_REG_IsConversionOngoing>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f040 80a0 	bne.w	8004604 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80044c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f040 809c 	bne.w	8004604 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044d4:	d004      	beq.n	80044e0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a55      	ldr	r2, [pc, #340]	@ (8004630 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d101      	bne.n	80044e4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80044e0:	4b56      	ldr	r3, [pc, #344]	@ (800463c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80044e2:	e000      	b.n	80044e6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80044e4:	4b56      	ldr	r3, [pc, #344]	@ (8004640 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80044e6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d04b      	beq.n	8004588 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80044f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	6859      	ldr	r1, [r3, #4]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004502:	035b      	lsls	r3, r3, #13
 8004504:	430b      	orrs	r3, r1
 8004506:	431a      	orrs	r2, r3
 8004508:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800450a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004514:	d004      	beq.n	8004520 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a45      	ldr	r2, [pc, #276]	@ (8004630 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d10f      	bne.n	8004540 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004520:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004524:	f7ff ff30 	bl	8004388 <LL_ADC_IsEnabled>
 8004528:	4604      	mov	r4, r0
 800452a:	4841      	ldr	r0, [pc, #260]	@ (8004630 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800452c:	f7ff ff2c 	bl	8004388 <LL_ADC_IsEnabled>
 8004530:	4603      	mov	r3, r0
 8004532:	4323      	orrs	r3, r4
 8004534:	2b00      	cmp	r3, #0
 8004536:	bf0c      	ite	eq
 8004538:	2301      	moveq	r3, #1
 800453a:	2300      	movne	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	e012      	b.n	8004566 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004540:	483c      	ldr	r0, [pc, #240]	@ (8004634 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004542:	f7ff ff21 	bl	8004388 <LL_ADC_IsEnabled>
 8004546:	4604      	mov	r4, r0
 8004548:	483b      	ldr	r0, [pc, #236]	@ (8004638 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800454a:	f7ff ff1d 	bl	8004388 <LL_ADC_IsEnabled>
 800454e:	4603      	mov	r3, r0
 8004550:	431c      	orrs	r4, r3
 8004552:	483c      	ldr	r0, [pc, #240]	@ (8004644 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004554:	f7ff ff18 	bl	8004388 <LL_ADC_IsEnabled>
 8004558:	4603      	mov	r3, r0
 800455a:	4323      	orrs	r3, r4
 800455c:	2b00      	cmp	r3, #0
 800455e:	bf0c      	ite	eq
 8004560:	2301      	moveq	r3, #1
 8004562:	2300      	movne	r3, #0
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d056      	beq.n	8004618 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800456a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004572:	f023 030f 	bic.w	r3, r3, #15
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	6811      	ldr	r1, [r2, #0]
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	6892      	ldr	r2, [r2, #8]
 800457e:	430a      	orrs	r2, r1
 8004580:	431a      	orrs	r2, r3
 8004582:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004584:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004586:	e047      	b.n	8004618 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004588:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004590:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004592:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800459c:	d004      	beq.n	80045a8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a23      	ldr	r2, [pc, #140]	@ (8004630 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d10f      	bne.n	80045c8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80045a8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80045ac:	f7ff feec 	bl	8004388 <LL_ADC_IsEnabled>
 80045b0:	4604      	mov	r4, r0
 80045b2:	481f      	ldr	r0, [pc, #124]	@ (8004630 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80045b4:	f7ff fee8 	bl	8004388 <LL_ADC_IsEnabled>
 80045b8:	4603      	mov	r3, r0
 80045ba:	4323      	orrs	r3, r4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	bf0c      	ite	eq
 80045c0:	2301      	moveq	r3, #1
 80045c2:	2300      	movne	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	e012      	b.n	80045ee <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80045c8:	481a      	ldr	r0, [pc, #104]	@ (8004634 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80045ca:	f7ff fedd 	bl	8004388 <LL_ADC_IsEnabled>
 80045ce:	4604      	mov	r4, r0
 80045d0:	4819      	ldr	r0, [pc, #100]	@ (8004638 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80045d2:	f7ff fed9 	bl	8004388 <LL_ADC_IsEnabled>
 80045d6:	4603      	mov	r3, r0
 80045d8:	431c      	orrs	r4, r3
 80045da:	481a      	ldr	r0, [pc, #104]	@ (8004644 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80045dc:	f7ff fed4 	bl	8004388 <LL_ADC_IsEnabled>
 80045e0:	4603      	mov	r3, r0
 80045e2:	4323      	orrs	r3, r4
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	bf0c      	ite	eq
 80045e8:	2301      	moveq	r3, #1
 80045ea:	2300      	movne	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d012      	beq.n	8004618 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80045f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80045fa:	f023 030f 	bic.w	r3, r3, #15
 80045fe:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004600:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004602:	e009      	b.n	8004618 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004608:	f043 0220 	orr.w	r2, r3, #32
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004616:	e000      	b.n	800461a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004618:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004622:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004626:	4618      	mov	r0, r3
 8004628:	3784      	adds	r7, #132	@ 0x84
 800462a:	46bd      	mov	sp, r7
 800462c:	bd90      	pop	{r4, r7, pc}
 800462e:	bf00      	nop
 8004630:	50000100 	.word	0x50000100
 8004634:	50000400 	.word	0x50000400
 8004638:	50000500 	.word	0x50000500
 800463c:	50000300 	.word	0x50000300
 8004640:	50000700 	.word	0x50000700
 8004644:	50000600 	.word	0x50000600

08004648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004658:	4b0c      	ldr	r3, [pc, #48]	@ (800468c <__NVIC_SetPriorityGrouping+0x44>)
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004664:	4013      	ands	r3, r2
 8004666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004670:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800467a:	4a04      	ldr	r2, [pc, #16]	@ (800468c <__NVIC_SetPriorityGrouping+0x44>)
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	60d3      	str	r3, [r2, #12]
}
 8004680:	bf00      	nop
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	e000ed00 	.word	0xe000ed00

08004690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004694:	4b04      	ldr	r3, [pc, #16]	@ (80046a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	0a1b      	lsrs	r3, r3, #8
 800469a:	f003 0307 	and.w	r3, r3, #7
}
 800469e:	4618      	mov	r0, r3
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	e000ed00 	.word	0xe000ed00

080046ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	4603      	mov	r3, r0
 80046b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	db0b      	blt.n	80046d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046be:	79fb      	ldrb	r3, [r7, #7]
 80046c0:	f003 021f 	and.w	r2, r3, #31
 80046c4:	4907      	ldr	r1, [pc, #28]	@ (80046e4 <__NVIC_EnableIRQ+0x38>)
 80046c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	2001      	movs	r0, #1
 80046ce:	fa00 f202 	lsl.w	r2, r0, r2
 80046d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	e000e100 	.word	0xe000e100

080046e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	4603      	mov	r3, r0
 80046f0:	6039      	str	r1, [r7, #0]
 80046f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	db0a      	blt.n	8004712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	490c      	ldr	r1, [pc, #48]	@ (8004734 <__NVIC_SetPriority+0x4c>)
 8004702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004706:	0112      	lsls	r2, r2, #4
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	440b      	add	r3, r1
 800470c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004710:	e00a      	b.n	8004728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	b2da      	uxtb	r2, r3
 8004716:	4908      	ldr	r1, [pc, #32]	@ (8004738 <__NVIC_SetPriority+0x50>)
 8004718:	79fb      	ldrb	r3, [r7, #7]
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	3b04      	subs	r3, #4
 8004720:	0112      	lsls	r2, r2, #4
 8004722:	b2d2      	uxtb	r2, r2
 8004724:	440b      	add	r3, r1
 8004726:	761a      	strb	r2, [r3, #24]
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	e000e100 	.word	0xe000e100
 8004738:	e000ed00 	.word	0xe000ed00

0800473c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800473c:	b480      	push	{r7}
 800473e:	b089      	sub	sp, #36	@ 0x24
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	f1c3 0307 	rsb	r3, r3, #7
 8004756:	2b04      	cmp	r3, #4
 8004758:	bf28      	it	cs
 800475a:	2304      	movcs	r3, #4
 800475c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	3304      	adds	r3, #4
 8004762:	2b06      	cmp	r3, #6
 8004764:	d902      	bls.n	800476c <NVIC_EncodePriority+0x30>
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	3b03      	subs	r3, #3
 800476a:	e000      	b.n	800476e <NVIC_EncodePriority+0x32>
 800476c:	2300      	movs	r3, #0
 800476e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004770:	f04f 32ff 	mov.w	r2, #4294967295
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	43da      	mvns	r2, r3
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	401a      	ands	r2, r3
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004784:	f04f 31ff 	mov.w	r1, #4294967295
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	fa01 f303 	lsl.w	r3, r1, r3
 800478e:	43d9      	mvns	r1, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004794:	4313      	orrs	r3, r2
         );
}
 8004796:	4618      	mov	r0, r3
 8004798:	3724      	adds	r7, #36	@ 0x24
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
	...

080047a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3b01      	subs	r3, #1
 80047b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047b4:	d301      	bcc.n	80047ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047b6:	2301      	movs	r3, #1
 80047b8:	e00f      	b.n	80047da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047ba:	4a0a      	ldr	r2, [pc, #40]	@ (80047e4 <SysTick_Config+0x40>)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3b01      	subs	r3, #1
 80047c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047c2:	210f      	movs	r1, #15
 80047c4:	f04f 30ff 	mov.w	r0, #4294967295
 80047c8:	f7ff ff8e 	bl	80046e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047cc:	4b05      	ldr	r3, [pc, #20]	@ (80047e4 <SysTick_Config+0x40>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047d2:	4b04      	ldr	r3, [pc, #16]	@ (80047e4 <SysTick_Config+0x40>)
 80047d4:	2207      	movs	r2, #7
 80047d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	e000e010 	.word	0xe000e010

080047e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7ff ff29 	bl	8004648 <__NVIC_SetPriorityGrouping>
}
 80047f6:	bf00      	nop
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b086      	sub	sp, #24
 8004802:	af00      	add	r7, sp, #0
 8004804:	4603      	mov	r3, r0
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	607a      	str	r2, [r7, #4]
 800480a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800480c:	f7ff ff40 	bl	8004690 <__NVIC_GetPriorityGrouping>
 8004810:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	68b9      	ldr	r1, [r7, #8]
 8004816:	6978      	ldr	r0, [r7, #20]
 8004818:	f7ff ff90 	bl	800473c <NVIC_EncodePriority>
 800481c:	4602      	mov	r2, r0
 800481e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004822:	4611      	mov	r1, r2
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff ff5f 	bl	80046e8 <__NVIC_SetPriority>
}
 800482a:	bf00      	nop
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b082      	sub	sp, #8
 8004836:	af00      	add	r7, sp, #0
 8004838:	4603      	mov	r3, r0
 800483a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800483c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004840:	4618      	mov	r0, r3
 8004842:	f7ff ff33 	bl	80046ac <__NVIC_EnableIRQ>
}
 8004846:	bf00      	nop
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b082      	sub	sp, #8
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7ff ffa4 	bl	80047a4 <SysTick_Config>
 800485c:	4603      	mov	r3, r0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e08d      	b.n	8004996 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	4b47      	ldr	r3, [pc, #284]	@ (80049a0 <HAL_DMA_Init+0x138>)
 8004882:	429a      	cmp	r2, r3
 8004884:	d80f      	bhi.n	80048a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	461a      	mov	r2, r3
 800488c:	4b45      	ldr	r3, [pc, #276]	@ (80049a4 <HAL_DMA_Init+0x13c>)
 800488e:	4413      	add	r3, r2
 8004890:	4a45      	ldr	r2, [pc, #276]	@ (80049a8 <HAL_DMA_Init+0x140>)
 8004892:	fba2 2303 	umull	r2, r3, r2, r3
 8004896:	091b      	lsrs	r3, r3, #4
 8004898:	009a      	lsls	r2, r3, #2
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a42      	ldr	r2, [pc, #264]	@ (80049ac <HAL_DMA_Init+0x144>)
 80048a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80048a4:	e00e      	b.n	80048c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	461a      	mov	r2, r3
 80048ac:	4b40      	ldr	r3, [pc, #256]	@ (80049b0 <HAL_DMA_Init+0x148>)
 80048ae:	4413      	add	r3, r2
 80048b0:	4a3d      	ldr	r2, [pc, #244]	@ (80049a8 <HAL_DMA_Init+0x140>)
 80048b2:	fba2 2303 	umull	r2, r3, r2, r3
 80048b6:	091b      	lsrs	r3, r3, #4
 80048b8:	009a      	lsls	r2, r3, #2
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a3c      	ldr	r2, [pc, #240]	@ (80049b4 <HAL_DMA_Init+0x14c>)
 80048c2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80048da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80048e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004900:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	4313      	orrs	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fa76 	bl	8004e08 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004924:	d102      	bne.n	800492c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004940:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d010      	beq.n	800496c <HAL_DMA_Init+0x104>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	2b04      	cmp	r3, #4
 8004950:	d80c      	bhi.n	800496c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fa96 	bl	8004e84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004968:	605a      	str	r2, [r3, #4]
 800496a:	e008      	b.n	800497e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	40020407 	.word	0x40020407
 80049a4:	bffdfff8 	.word	0xbffdfff8
 80049a8:	cccccccd 	.word	0xcccccccd
 80049ac:	40020000 	.word	0x40020000
 80049b0:	bffdfbf8 	.word	0xbffdfbf8
 80049b4:	40020400 	.word	0x40020400

080049b8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_DMA_Start_IT+0x20>
 80049d4:	2302      	movs	r3, #2
 80049d6:	e066      	b.n	8004aa6 <HAL_DMA_Start_IT+0xee>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d155      	bne.n	8004a98 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0201 	bic.w	r2, r2, #1
 8004a08:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	68b9      	ldr	r1, [r7, #8]
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 f9bb 	bl	8004d8c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d008      	beq.n	8004a30 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f042 020e 	orr.w	r2, r2, #14
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	e00f      	b.n	8004a50 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0204 	bic.w	r2, r2, #4
 8004a3e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 020a 	orr.w	r2, r2, #10
 8004a4e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d007      	beq.n	8004a6e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a6c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d007      	beq.n	8004a86 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a84:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0201 	orr.w	r2, r2, #1
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	e005      	b.n	8004aa4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b085      	sub	sp, #20
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d005      	beq.n	8004ad2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2204      	movs	r2, #4
 8004aca:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	73fb      	strb	r3, [r7, #15]
 8004ad0:	e037      	b.n	8004b42 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 020e 	bic.w	r2, r2, #14
 8004ae0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004af0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 0201 	bic.w	r2, r2, #1
 8004b00:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b06:	f003 021f 	and.w	r2, r3, #31
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0e:	2101      	movs	r1, #1
 8004b10:	fa01 f202 	lsl.w	r2, r1, r2
 8004b14:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b1e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00c      	beq.n	8004b42 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b36:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004b40:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d00d      	beq.n	8004b94 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2204      	movs	r2, #4
 8004b7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	73fb      	strb	r3, [r7, #15]
 8004b92:	e047      	b.n	8004c24 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 020e 	bic.w	r2, r2, #14
 8004ba2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0201 	bic.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bbe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004bc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc8:	f003 021f 	and.w	r2, r3, #31
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8004bd6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004be0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00c      	beq.n	8004c04 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bf4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004bf8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004c02:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	4798      	blx	r3
    }
  }
  return status;
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b084      	sub	sp, #16
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c4a:	f003 031f 	and.w	r3, r3, #31
 8004c4e:	2204      	movs	r2, #4
 8004c50:	409a      	lsls	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4013      	ands	r3, r2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d026      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x7a>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d021      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0320 	and.w	r3, r3, #32
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d107      	bne.n	8004c82 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0204 	bic.w	r2, r2, #4
 8004c80:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c86:	f003 021f 	and.w	r2, r3, #31
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8e:	2104      	movs	r1, #4
 8004c90:	fa01 f202 	lsl.w	r2, r1, r2
 8004c94:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d071      	beq.n	8004d82 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004ca6:	e06c      	b.n	8004d82 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cac:	f003 031f 	and.w	r3, r3, #31
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	409a      	lsls	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d02e      	beq.n	8004d1a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d029      	beq.n	8004d1a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0320 	and.w	r3, r3, #32
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10b      	bne.n	8004cec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 020a 	bic.w	r2, r2, #10
 8004ce2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cf0:	f003 021f 	and.w	r2, r3, #31
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf8:	2102      	movs	r1, #2
 8004cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8004cfe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d038      	beq.n	8004d82 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004d18:	e033      	b.n	8004d82 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d1e:	f003 031f 	and.w	r3, r3, #31
 8004d22:	2208      	movs	r2, #8
 8004d24:	409a      	lsls	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d02a      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f003 0308 	and.w	r3, r3, #8
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d025      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 020e 	bic.w	r2, r2, #14
 8004d46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4c:	f003 021f 	and.w	r2, r3, #31
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d54:	2101      	movs	r1, #1
 8004d56:	fa01 f202 	lsl.w	r2, r1, r2
 8004d5a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d004      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004d82:	bf00      	nop
 8004d84:	bf00      	nop
}
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
 8004d98:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004da2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d004      	beq.n	8004db6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004db4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dba:	f003 021f 	and.w	r2, r3, #31
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8004dc8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	2b10      	cmp	r3, #16
 8004dd8:	d108      	bne.n	8004dec <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004dea:	e007      	b.n	8004dfc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	60da      	str	r2, [r3, #12]
}
 8004dfc:	bf00      	nop
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	461a      	mov	r2, r3
 8004e16:	4b16      	ldr	r3, [pc, #88]	@ (8004e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d802      	bhi.n	8004e22 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004e1c:	4b15      	ldr	r3, [pc, #84]	@ (8004e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	e001      	b.n	8004e26 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004e22:	4b15      	ldr	r3, [pc, #84]	@ (8004e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004e24:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	3b08      	subs	r3, #8
 8004e32:	4a12      	ldr	r2, [pc, #72]	@ (8004e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004e34:	fba2 2303 	umull	r2, r3, r2, r3
 8004e38:	091b      	lsrs	r3, r3, #4
 8004e3a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e40:	089b      	lsrs	r3, r3, #2
 8004e42:	009a      	lsls	r2, r3, #2
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	4413      	add	r3, r2
 8004e48:	461a      	mov	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a0b      	ldr	r2, [pc, #44]	@ (8004e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004e52:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f003 031f 	and.w	r3, r3, #31
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	409a      	lsls	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004e62:	bf00      	nop
 8004e64:	371c      	adds	r7, #28
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	40020407 	.word	0x40020407
 8004e74:	40020800 	.word	0x40020800
 8004e78:	40020820 	.word	0x40020820
 8004e7c:	cccccccd 	.word	0xcccccccd
 8004e80:	40020880 	.word	0x40020880

08004e84 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004e98:	4413      	add	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a08      	ldr	r2, [pc, #32]	@ (8004ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004ea6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	f003 031f 	and.w	r3, r3, #31
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	409a      	lsls	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004eb8:	bf00      	nop
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	1000823f 	.word	0x1000823f
 8004ec8:	40020940 	.word	0x40020940

08004ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004eda:	e15a      	b.n	8005192 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	2101      	movs	r1, #1
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee8:	4013      	ands	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 814c 	beq.w	800518c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f003 0303 	and.w	r3, r3, #3
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d005      	beq.n	8004f0c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d130      	bne.n	8004f6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	2203      	movs	r2, #3
 8004f18:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1c:	43db      	mvns	r3, r3
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	4013      	ands	r3, r2
 8004f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	68da      	ldr	r2, [r3, #12]
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f42:	2201      	movs	r2, #1
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	091b      	lsrs	r3, r3, #4
 8004f58:	f003 0201 	and.w	r2, r3, #1
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	2b03      	cmp	r3, #3
 8004f78:	d017      	beq.n	8004faa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	2203      	movs	r2, #3
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	43db      	mvns	r3, r3
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d123      	bne.n	8004ffe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	08da      	lsrs	r2, r3, #3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	3208      	adds	r2, #8
 8004fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	220f      	movs	r2, #15
 8004fce:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd2:	43db      	mvns	r3, r3
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	691a      	ldr	r2, [r3, #16]
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	08da      	lsrs	r2, r3, #3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3208      	adds	r2, #8
 8004ff8:	6939      	ldr	r1, [r7, #16]
 8004ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	2203      	movs	r2, #3
 800500a:	fa02 f303 	lsl.w	r3, r2, r3
 800500e:	43db      	mvns	r3, r3
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	4013      	ands	r3, r2
 8005014:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f003 0203 	and.w	r2, r3, #3
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	fa02 f303 	lsl.w	r3, r2, r3
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4313      	orrs	r3, r2
 800502a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 80a6 	beq.w	800518c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005040:	4b5b      	ldr	r3, [pc, #364]	@ (80051b0 <HAL_GPIO_Init+0x2e4>)
 8005042:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005044:	4a5a      	ldr	r2, [pc, #360]	@ (80051b0 <HAL_GPIO_Init+0x2e4>)
 8005046:	f043 0301 	orr.w	r3, r3, #1
 800504a:	6613      	str	r3, [r2, #96]	@ 0x60
 800504c:	4b58      	ldr	r3, [pc, #352]	@ (80051b0 <HAL_GPIO_Init+0x2e4>)
 800504e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	60bb      	str	r3, [r7, #8]
 8005056:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005058:	4a56      	ldr	r2, [pc, #344]	@ (80051b4 <HAL_GPIO_Init+0x2e8>)
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	089b      	lsrs	r3, r3, #2
 800505e:	3302      	adds	r3, #2
 8005060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005064:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f003 0303 	and.w	r3, r3, #3
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	220f      	movs	r2, #15
 8005070:	fa02 f303 	lsl.w	r3, r2, r3
 8005074:	43db      	mvns	r3, r3
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	4013      	ands	r3, r2
 800507a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005082:	d01f      	beq.n	80050c4 <HAL_GPIO_Init+0x1f8>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a4c      	ldr	r2, [pc, #304]	@ (80051b8 <HAL_GPIO_Init+0x2ec>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d019      	beq.n	80050c0 <HAL_GPIO_Init+0x1f4>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a4b      	ldr	r2, [pc, #300]	@ (80051bc <HAL_GPIO_Init+0x2f0>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d013      	beq.n	80050bc <HAL_GPIO_Init+0x1f0>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a4a      	ldr	r2, [pc, #296]	@ (80051c0 <HAL_GPIO_Init+0x2f4>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d00d      	beq.n	80050b8 <HAL_GPIO_Init+0x1ec>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a49      	ldr	r2, [pc, #292]	@ (80051c4 <HAL_GPIO_Init+0x2f8>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d007      	beq.n	80050b4 <HAL_GPIO_Init+0x1e8>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a48      	ldr	r2, [pc, #288]	@ (80051c8 <HAL_GPIO_Init+0x2fc>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d101      	bne.n	80050b0 <HAL_GPIO_Init+0x1e4>
 80050ac:	2305      	movs	r3, #5
 80050ae:	e00a      	b.n	80050c6 <HAL_GPIO_Init+0x1fa>
 80050b0:	2306      	movs	r3, #6
 80050b2:	e008      	b.n	80050c6 <HAL_GPIO_Init+0x1fa>
 80050b4:	2304      	movs	r3, #4
 80050b6:	e006      	b.n	80050c6 <HAL_GPIO_Init+0x1fa>
 80050b8:	2303      	movs	r3, #3
 80050ba:	e004      	b.n	80050c6 <HAL_GPIO_Init+0x1fa>
 80050bc:	2302      	movs	r3, #2
 80050be:	e002      	b.n	80050c6 <HAL_GPIO_Init+0x1fa>
 80050c0:	2301      	movs	r3, #1
 80050c2:	e000      	b.n	80050c6 <HAL_GPIO_Init+0x1fa>
 80050c4:	2300      	movs	r3, #0
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	f002 0203 	and.w	r2, r2, #3
 80050cc:	0092      	lsls	r2, r2, #2
 80050ce:	4093      	lsls	r3, r2
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050d6:	4937      	ldr	r1, [pc, #220]	@ (80051b4 <HAL_GPIO_Init+0x2e8>)
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	089b      	lsrs	r3, r3, #2
 80050dc:	3302      	adds	r3, #2
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050e4:	4b39      	ldr	r3, [pc, #228]	@ (80051cc <HAL_GPIO_Init+0x300>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	43db      	mvns	r3, r3
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	4013      	ands	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d003      	beq.n	8005108 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4313      	orrs	r3, r2
 8005106:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005108:	4a30      	ldr	r2, [pc, #192]	@ (80051cc <HAL_GPIO_Init+0x300>)
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800510e:	4b2f      	ldr	r3, [pc, #188]	@ (80051cc <HAL_GPIO_Init+0x300>)
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	43db      	mvns	r3, r3
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	4013      	ands	r3, r2
 800511c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005132:	4a26      	ldr	r2, [pc, #152]	@ (80051cc <HAL_GPIO_Init+0x300>)
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005138:	4b24      	ldr	r3, [pc, #144]	@ (80051cc <HAL_GPIO_Init+0x300>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	43db      	mvns	r3, r3
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4013      	ands	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4313      	orrs	r3, r2
 800515a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800515c:	4a1b      	ldr	r2, [pc, #108]	@ (80051cc <HAL_GPIO_Init+0x300>)
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005162:	4b1a      	ldr	r3, [pc, #104]	@ (80051cc <HAL_GPIO_Init+0x300>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	43db      	mvns	r3, r3
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	4013      	ands	r3, r2
 8005170:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4313      	orrs	r3, r2
 8005184:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005186:	4a11      	ldr	r2, [pc, #68]	@ (80051cc <HAL_GPIO_Init+0x300>)
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	3301      	adds	r3, #1
 8005190:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	fa22 f303 	lsr.w	r3, r2, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	f47f ae9d 	bne.w	8004edc <HAL_GPIO_Init+0x10>
  }
}
 80051a2:	bf00      	nop
 80051a4:	bf00      	nop
 80051a6:	371c      	adds	r7, #28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	40021000 	.word	0x40021000
 80051b4:	40010000 	.word	0x40010000
 80051b8:	48000400 	.word	0x48000400
 80051bc:	48000800 	.word	0x48000800
 80051c0:	48000c00 	.word	0x48000c00
 80051c4:	48001000 	.word	0x48001000
 80051c8:	48001400 	.word	0x48001400
 80051cc:	40010400 	.word	0x40010400

080051d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691a      	ldr	r2, [r3, #16]
 80051e0:	887b      	ldrh	r3, [r7, #2]
 80051e2:	4013      	ands	r3, r2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051e8:	2301      	movs	r3, #1
 80051ea:	73fb      	strb	r3, [r7, #15]
 80051ec:	e001      	b.n	80051f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051ee:	2300      	movs	r3, #0
 80051f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	460b      	mov	r3, r1
 800520a:	807b      	strh	r3, [r7, #2]
 800520c:	4613      	mov	r3, r2
 800520e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005210:	787b      	ldrb	r3, [r7, #1]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005216:	887a      	ldrh	r2, [r7, #2]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800521c:	e002      	b.n	8005224 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800521e:	887a      	ldrh	r2, [r7, #2]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	4603      	mov	r3, r0
 8005238:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800523a:	4b08      	ldr	r3, [pc, #32]	@ (800525c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800523c:	695a      	ldr	r2, [r3, #20]
 800523e:	88fb      	ldrh	r3, [r7, #6]
 8005240:	4013      	ands	r3, r2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d006      	beq.n	8005254 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005246:	4a05      	ldr	r2, [pc, #20]	@ (800525c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005248:	88fb      	ldrh	r3, [r7, #6]
 800524a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	4618      	mov	r0, r3
 8005250:	f7fc fd0a 	bl	8001c68 <HAL_GPIO_EXTI_Callback>
  }
}
 8005254:	bf00      	nop
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	40010400 	.word	0x40010400

08005260 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d141      	bne.n	80052f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800526e:	4b4b      	ldr	r3, [pc, #300]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005276:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800527a:	d131      	bne.n	80052e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800527c:	4b47      	ldr	r3, [pc, #284]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800527e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005282:	4a46      	ldr	r2, [pc, #280]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005284:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005288:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800528c:	4b43      	ldr	r3, [pc, #268]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005294:	4a41      	ldr	r2, [pc, #260]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005296:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800529a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800529c:	4b40      	ldr	r3, [pc, #256]	@ (80053a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2232      	movs	r2, #50	@ 0x32
 80052a2:	fb02 f303 	mul.w	r3, r2, r3
 80052a6:	4a3f      	ldr	r2, [pc, #252]	@ (80053a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80052a8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ac:	0c9b      	lsrs	r3, r3, #18
 80052ae:	3301      	adds	r3, #1
 80052b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052b2:	e002      	b.n	80052ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	3b01      	subs	r3, #1
 80052b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052ba:	4b38      	ldr	r3, [pc, #224]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052c6:	d102      	bne.n	80052ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1f2      	bne.n	80052b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052ce:	4b33      	ldr	r3, [pc, #204]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052da:	d158      	bne.n	800538e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e057      	b.n	8005390 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052e0:	4b2e      	ldr	r3, [pc, #184]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052e6:	4a2d      	ldr	r2, [pc, #180]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80052f0:	e04d      	b.n	800538e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052f8:	d141      	bne.n	800537e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80052fa:	4b28      	ldr	r3, [pc, #160]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005306:	d131      	bne.n	800536c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005308:	4b24      	ldr	r3, [pc, #144]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800530a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800530e:	4a23      	ldr	r2, [pc, #140]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005314:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005318:	4b20      	ldr	r3, [pc, #128]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005320:	4a1e      	ldr	r2, [pc, #120]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005322:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005326:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005328:	4b1d      	ldr	r3, [pc, #116]	@ (80053a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2232      	movs	r2, #50	@ 0x32
 800532e:	fb02 f303 	mul.w	r3, r2, r3
 8005332:	4a1c      	ldr	r2, [pc, #112]	@ (80053a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005334:	fba2 2303 	umull	r2, r3, r2, r3
 8005338:	0c9b      	lsrs	r3, r3, #18
 800533a:	3301      	adds	r3, #1
 800533c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800533e:	e002      	b.n	8005346 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	3b01      	subs	r3, #1
 8005344:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005346:	4b15      	ldr	r3, [pc, #84]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800534e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005352:	d102      	bne.n	800535a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1f2      	bne.n	8005340 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800535a:	4b10      	ldr	r3, [pc, #64]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005366:	d112      	bne.n	800538e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e011      	b.n	8005390 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800536c:	4b0b      	ldr	r3, [pc, #44]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800536e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005372:	4a0a      	ldr	r2, [pc, #40]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005378:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800537c:	e007      	b.n	800538e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800537e:	4b07      	ldr	r3, [pc, #28]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005386:	4a05      	ldr	r2, [pc, #20]	@ (800539c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005388:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800538c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	40007000 	.word	0x40007000
 80053a0:	2000000c 	.word	0x2000000c
 80053a4:	431bde83 	.word	0x431bde83

080053a8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80053ac:	4b05      	ldr	r3, [pc, #20]	@ (80053c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	4a04      	ldr	r2, [pc, #16]	@ (80053c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80053b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80053b6:	6093      	str	r3, [r2, #8]
}
 80053b8:	bf00      	nop
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	40007000 	.word	0x40007000

080053c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b088      	sub	sp, #32
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e2fe      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d075      	beq.n	80054d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053e6:	4b97      	ldr	r3, [pc, #604]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f003 030c 	and.w	r3, r3, #12
 80053ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053f0:	4b94      	ldr	r3, [pc, #592]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f003 0303 	and.w	r3, r3, #3
 80053f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	2b0c      	cmp	r3, #12
 80053fe:	d102      	bne.n	8005406 <HAL_RCC_OscConfig+0x3e>
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	2b03      	cmp	r3, #3
 8005404:	d002      	beq.n	800540c <HAL_RCC_OscConfig+0x44>
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	2b08      	cmp	r3, #8
 800540a:	d10b      	bne.n	8005424 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800540c:	4b8d      	ldr	r3, [pc, #564]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d05b      	beq.n	80054d0 <HAL_RCC_OscConfig+0x108>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d157      	bne.n	80054d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e2d9      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800542c:	d106      	bne.n	800543c <HAL_RCC_OscConfig+0x74>
 800542e:	4b85      	ldr	r3, [pc, #532]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a84      	ldr	r2, [pc, #528]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 8005434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005438:	6013      	str	r3, [r2, #0]
 800543a:	e01d      	b.n	8005478 <HAL_RCC_OscConfig+0xb0>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005444:	d10c      	bne.n	8005460 <HAL_RCC_OscConfig+0x98>
 8005446:	4b7f      	ldr	r3, [pc, #508]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a7e      	ldr	r2, [pc, #504]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 800544c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	4b7c      	ldr	r3, [pc, #496]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a7b      	ldr	r2, [pc, #492]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 8005458:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	e00b      	b.n	8005478 <HAL_RCC_OscConfig+0xb0>
 8005460:	4b78      	ldr	r3, [pc, #480]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a77      	ldr	r2, [pc, #476]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 8005466:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800546a:	6013      	str	r3, [r2, #0]
 800546c:	4b75      	ldr	r3, [pc, #468]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a74      	ldr	r2, [pc, #464]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 8005472:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005476:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d013      	beq.n	80054a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005480:	f7fd fab4 	bl	80029ec <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005488:	f7fd fab0 	bl	80029ec <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b64      	cmp	r3, #100	@ 0x64
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e29e      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800549a:	4b6a      	ldr	r3, [pc, #424]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0f0      	beq.n	8005488 <HAL_RCC_OscConfig+0xc0>
 80054a6:	e014      	b.n	80054d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a8:	f7fd faa0 	bl	80029ec <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054b0:	f7fd fa9c 	bl	80029ec <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b64      	cmp	r3, #100	@ 0x64
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e28a      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054c2:	4b60      	ldr	r3, [pc, #384]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1f0      	bne.n	80054b0 <HAL_RCC_OscConfig+0xe8>
 80054ce:	e000      	b.n	80054d2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d075      	beq.n	80055ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054de:	4b59      	ldr	r3, [pc, #356]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 030c 	and.w	r3, r3, #12
 80054e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054e8:	4b56      	ldr	r3, [pc, #344]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f003 0303 	and.w	r3, r3, #3
 80054f0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	2b0c      	cmp	r3, #12
 80054f6:	d102      	bne.n	80054fe <HAL_RCC_OscConfig+0x136>
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d002      	beq.n	8005504 <HAL_RCC_OscConfig+0x13c>
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	2b04      	cmp	r3, #4
 8005502:	d11f      	bne.n	8005544 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005504:	4b4f      	ldr	r3, [pc, #316]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800550c:	2b00      	cmp	r3, #0
 800550e:	d005      	beq.n	800551c <HAL_RCC_OscConfig+0x154>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e25d      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800551c:	4b49      	ldr	r3, [pc, #292]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	061b      	lsls	r3, r3, #24
 800552a:	4946      	ldr	r1, [pc, #280]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 800552c:	4313      	orrs	r3, r2
 800552e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005530:	4b45      	ldr	r3, [pc, #276]	@ (8005648 <HAL_RCC_OscConfig+0x280>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4618      	mov	r0, r3
 8005536:	f7fd fa0d 	bl	8002954 <HAL_InitTick>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d043      	beq.n	80055c8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e249      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d023      	beq.n	8005594 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800554c:	4b3d      	ldr	r3, [pc, #244]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a3c      	ldr	r2, [pc, #240]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 8005552:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005558:	f7fd fa48 	bl	80029ec <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800555e:	e008      	b.n	8005572 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005560:	f7fd fa44 	bl	80029ec <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b02      	cmp	r3, #2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e232      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005572:	4b34      	ldr	r3, [pc, #208]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800557a:	2b00      	cmp	r3, #0
 800557c:	d0f0      	beq.n	8005560 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800557e:	4b31      	ldr	r3, [pc, #196]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	061b      	lsls	r3, r3, #24
 800558c:	492d      	ldr	r1, [pc, #180]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 800558e:	4313      	orrs	r3, r2
 8005590:	604b      	str	r3, [r1, #4]
 8005592:	e01a      	b.n	80055ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005594:	4b2b      	ldr	r3, [pc, #172]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a2a      	ldr	r2, [pc, #168]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 800559a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800559e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a0:	f7fd fa24 	bl	80029ec <HAL_GetTick>
 80055a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055a6:	e008      	b.n	80055ba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055a8:	f7fd fa20 	bl	80029ec <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e20e      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055ba:	4b22      	ldr	r3, [pc, #136]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1f0      	bne.n	80055a8 <HAL_RCC_OscConfig+0x1e0>
 80055c6:	e000      	b.n	80055ca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d041      	beq.n	800565a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d01c      	beq.n	8005618 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055de:	4b19      	ldr	r3, [pc, #100]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 80055e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055e4:	4a17      	ldr	r2, [pc, #92]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 80055e6:	f043 0301 	orr.w	r3, r3, #1
 80055ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ee:	f7fd f9fd 	bl	80029ec <HAL_GetTick>
 80055f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055f4:	e008      	b.n	8005608 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055f6:	f7fd f9f9 	bl	80029ec <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	2b02      	cmp	r3, #2
 8005602:	d901      	bls.n	8005608 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e1e7      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005608:	4b0e      	ldr	r3, [pc, #56]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 800560a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d0ef      	beq.n	80055f6 <HAL_RCC_OscConfig+0x22e>
 8005616:	e020      	b.n	800565a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005618:	4b0a      	ldr	r3, [pc, #40]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 800561a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800561e:	4a09      	ldr	r2, [pc, #36]	@ (8005644 <HAL_RCC_OscConfig+0x27c>)
 8005620:	f023 0301 	bic.w	r3, r3, #1
 8005624:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005628:	f7fd f9e0 	bl	80029ec <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800562e:	e00d      	b.n	800564c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005630:	f7fd f9dc 	bl	80029ec <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d906      	bls.n	800564c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e1ca      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
 8005642:	bf00      	nop
 8005644:	40021000 	.word	0x40021000
 8005648:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800564c:	4b8c      	ldr	r3, [pc, #560]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 800564e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1ea      	bne.n	8005630 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0304 	and.w	r3, r3, #4
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 80a6 	beq.w	80057b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005668:	2300      	movs	r3, #0
 800566a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800566c:	4b84      	ldr	r3, [pc, #528]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 800566e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005670:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <HAL_RCC_OscConfig+0x2b4>
 8005678:	2301      	movs	r3, #1
 800567a:	e000      	b.n	800567e <HAL_RCC_OscConfig+0x2b6>
 800567c:	2300      	movs	r3, #0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00d      	beq.n	800569e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005682:	4b7f      	ldr	r3, [pc, #508]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005686:	4a7e      	ldr	r2, [pc, #504]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005688:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800568c:	6593      	str	r3, [r2, #88]	@ 0x58
 800568e:	4b7c      	ldr	r3, [pc, #496]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800569a:	2301      	movs	r3, #1
 800569c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800569e:	4b79      	ldr	r3, [pc, #484]	@ (8005884 <HAL_RCC_OscConfig+0x4bc>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d118      	bne.n	80056dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056aa:	4b76      	ldr	r3, [pc, #472]	@ (8005884 <HAL_RCC_OscConfig+0x4bc>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a75      	ldr	r2, [pc, #468]	@ (8005884 <HAL_RCC_OscConfig+0x4bc>)
 80056b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056b6:	f7fd f999 	bl	80029ec <HAL_GetTick>
 80056ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056bc:	e008      	b.n	80056d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056be:	f7fd f995 	bl	80029ec <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d901      	bls.n	80056d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e183      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056d0:	4b6c      	ldr	r3, [pc, #432]	@ (8005884 <HAL_RCC_OscConfig+0x4bc>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d0f0      	beq.n	80056be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d108      	bne.n	80056f6 <HAL_RCC_OscConfig+0x32e>
 80056e4:	4b66      	ldr	r3, [pc, #408]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 80056e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ea:	4a65      	ldr	r2, [pc, #404]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 80056ec:	f043 0301 	orr.w	r3, r3, #1
 80056f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056f4:	e024      	b.n	8005740 <HAL_RCC_OscConfig+0x378>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	2b05      	cmp	r3, #5
 80056fc:	d110      	bne.n	8005720 <HAL_RCC_OscConfig+0x358>
 80056fe:	4b60      	ldr	r3, [pc, #384]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005704:	4a5e      	ldr	r2, [pc, #376]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005706:	f043 0304 	orr.w	r3, r3, #4
 800570a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800570e:	4b5c      	ldr	r3, [pc, #368]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005714:	4a5a      	ldr	r2, [pc, #360]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005716:	f043 0301 	orr.w	r3, r3, #1
 800571a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800571e:	e00f      	b.n	8005740 <HAL_RCC_OscConfig+0x378>
 8005720:	4b57      	ldr	r3, [pc, #348]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005726:	4a56      	ldr	r2, [pc, #344]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005728:	f023 0301 	bic.w	r3, r3, #1
 800572c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005730:	4b53      	ldr	r3, [pc, #332]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005736:	4a52      	ldr	r2, [pc, #328]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005738:	f023 0304 	bic.w	r3, r3, #4
 800573c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d016      	beq.n	8005776 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005748:	f7fd f950 	bl	80029ec <HAL_GetTick>
 800574c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800574e:	e00a      	b.n	8005766 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005750:	f7fd f94c 	bl	80029ec <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800575e:	4293      	cmp	r3, r2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e138      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005766:	4b46      	ldr	r3, [pc, #280]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0ed      	beq.n	8005750 <HAL_RCC_OscConfig+0x388>
 8005774:	e015      	b.n	80057a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005776:	f7fd f939 	bl	80029ec <HAL_GetTick>
 800577a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800577c:	e00a      	b.n	8005794 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800577e:	f7fd f935 	bl	80029ec <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	f241 3288 	movw	r2, #5000	@ 0x1388
 800578c:	4293      	cmp	r3, r2
 800578e:	d901      	bls.n	8005794 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e121      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005794:	4b3a      	ldr	r3, [pc, #232]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1ed      	bne.n	800577e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057a2:	7ffb      	ldrb	r3, [r7, #31]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d105      	bne.n	80057b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057a8:	4b35      	ldr	r3, [pc, #212]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 80057aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ac:	4a34      	ldr	r2, [pc, #208]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 80057ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057b2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0320 	and.w	r3, r3, #32
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d03c      	beq.n	800583a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d01c      	beq.n	8005802 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057c8:	4b2d      	ldr	r3, [pc, #180]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 80057ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057ce:	4a2c      	ldr	r2, [pc, #176]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 80057d0:	f043 0301 	orr.w	r3, r3, #1
 80057d4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d8:	f7fd f908 	bl	80029ec <HAL_GetTick>
 80057dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057de:	e008      	b.n	80057f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057e0:	f7fd f904 	bl	80029ec <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e0f2      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057f2:	4b23      	ldr	r3, [pc, #140]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 80057f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0ef      	beq.n	80057e0 <HAL_RCC_OscConfig+0x418>
 8005800:	e01b      	b.n	800583a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005802:	4b1f      	ldr	r3, [pc, #124]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005804:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005808:	4a1d      	ldr	r2, [pc, #116]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 800580a:	f023 0301 	bic.w	r3, r3, #1
 800580e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005812:	f7fd f8eb 	bl	80029ec <HAL_GetTick>
 8005816:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005818:	e008      	b.n	800582c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800581a:	f7fd f8e7 	bl	80029ec <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e0d5      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800582c:	4b14      	ldr	r3, [pc, #80]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 800582e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1ef      	bne.n	800581a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 80c9 	beq.w	80059d6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005844:	4b0e      	ldr	r3, [pc, #56]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f003 030c 	and.w	r3, r3, #12
 800584c:	2b0c      	cmp	r3, #12
 800584e:	f000 8083 	beq.w	8005958 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	69db      	ldr	r3, [r3, #28]
 8005856:	2b02      	cmp	r3, #2
 8005858:	d15e      	bne.n	8005918 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800585a:	4b09      	ldr	r3, [pc, #36]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a08      	ldr	r2, [pc, #32]	@ (8005880 <HAL_RCC_OscConfig+0x4b8>)
 8005860:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005866:	f7fd f8c1 	bl	80029ec <HAL_GetTick>
 800586a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800586c:	e00c      	b.n	8005888 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800586e:	f7fd f8bd 	bl	80029ec <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d905      	bls.n	8005888 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e0ab      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
 8005880:	40021000 	.word	0x40021000
 8005884:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005888:	4b55      	ldr	r3, [pc, #340]	@ (80059e0 <HAL_RCC_OscConfig+0x618>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1ec      	bne.n	800586e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005894:	4b52      	ldr	r3, [pc, #328]	@ (80059e0 <HAL_RCC_OscConfig+0x618>)
 8005896:	68da      	ldr	r2, [r3, #12]
 8005898:	4b52      	ldr	r3, [pc, #328]	@ (80059e4 <HAL_RCC_OscConfig+0x61c>)
 800589a:	4013      	ands	r3, r2
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6a11      	ldr	r1, [r2, #32]
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80058a4:	3a01      	subs	r2, #1
 80058a6:	0112      	lsls	r2, r2, #4
 80058a8:	4311      	orrs	r1, r2
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80058ae:	0212      	lsls	r2, r2, #8
 80058b0:	4311      	orrs	r1, r2
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80058b6:	0852      	lsrs	r2, r2, #1
 80058b8:	3a01      	subs	r2, #1
 80058ba:	0552      	lsls	r2, r2, #21
 80058bc:	4311      	orrs	r1, r2
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80058c2:	0852      	lsrs	r2, r2, #1
 80058c4:	3a01      	subs	r2, #1
 80058c6:	0652      	lsls	r2, r2, #25
 80058c8:	4311      	orrs	r1, r2
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80058ce:	06d2      	lsls	r2, r2, #27
 80058d0:	430a      	orrs	r2, r1
 80058d2:	4943      	ldr	r1, [pc, #268]	@ (80059e0 <HAL_RCC_OscConfig+0x618>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058d8:	4b41      	ldr	r3, [pc, #260]	@ (80059e0 <HAL_RCC_OscConfig+0x618>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a40      	ldr	r2, [pc, #256]	@ (80059e0 <HAL_RCC_OscConfig+0x618>)
 80058de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058e4:	4b3e      	ldr	r3, [pc, #248]	@ (80059e0 <HAL_RCC_OscConfig+0x618>)
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	4a3d      	ldr	r2, [pc, #244]	@ (80059e0 <HAL_RCC_OscConfig+0x618>)
 80058ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f0:	f7fd f87c 	bl	80029ec <HAL_GetTick>
 80058f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058f6:	e008      	b.n	800590a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f8:	f7fd f878 	bl	80029ec <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e066      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800590a:	4b35      	ldr	r3, [pc, #212]	@ (80059e0 <HAL_RCC_OscConfig+0x618>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0f0      	beq.n	80058f8 <HAL_RCC_OscConfig+0x530>
 8005916:	e05e      	b.n	80059d6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005918:	4b31      	ldr	r3, [pc, #196]	@ (80059e0 <HAL_RCC_OscConfig+0x618>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a30      	ldr	r2, [pc, #192]	@ (80059e0 <HAL_RCC_OscConfig+0x618>)
 800591e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005924:	f7fd f862 	bl	80029ec <HAL_GetTick>
 8005928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800592c:	f7fd f85e 	bl	80029ec <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b02      	cmp	r3, #2
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e04c      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800593e:	4b28      	ldr	r3, [pc, #160]	@ (80059e0 <HAL_RCC_OscConfig+0x618>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1f0      	bne.n	800592c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800594a:	4b25      	ldr	r3, [pc, #148]	@ (80059e0 <HAL_RCC_OscConfig+0x618>)
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	4924      	ldr	r1, [pc, #144]	@ (80059e0 <HAL_RCC_OscConfig+0x618>)
 8005950:	4b25      	ldr	r3, [pc, #148]	@ (80059e8 <HAL_RCC_OscConfig+0x620>)
 8005952:	4013      	ands	r3, r2
 8005954:	60cb      	str	r3, [r1, #12]
 8005956:	e03e      	b.n	80059d6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	69db      	ldr	r3, [r3, #28]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d101      	bne.n	8005964 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e039      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005964:	4b1e      	ldr	r3, [pc, #120]	@ (80059e0 <HAL_RCC_OscConfig+0x618>)
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f003 0203 	and.w	r2, r3, #3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a1b      	ldr	r3, [r3, #32]
 8005974:	429a      	cmp	r2, r3
 8005976:	d12c      	bne.n	80059d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005982:	3b01      	subs	r3, #1
 8005984:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005986:	429a      	cmp	r2, r3
 8005988:	d123      	bne.n	80059d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005994:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005996:	429a      	cmp	r2, r3
 8005998:	d11b      	bne.n	80059d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d113      	bne.n	80059d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b4:	085b      	lsrs	r3, r3, #1
 80059b6:	3b01      	subs	r3, #1
 80059b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d109      	bne.n	80059d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059c8:	085b      	lsrs	r3, r3, #1
 80059ca:	3b01      	subs	r3, #1
 80059cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d001      	beq.n	80059d6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e000      	b.n	80059d8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3720      	adds	r7, #32
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	40021000 	.word	0x40021000
 80059e4:	019f800c 	.word	0x019f800c
 80059e8:	feeefffc 	.word	0xfeeefffc

080059ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80059f6:	2300      	movs	r3, #0
 80059f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e11e      	b.n	8005c42 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a04:	4b91      	ldr	r3, [pc, #580]	@ (8005c4c <HAL_RCC_ClockConfig+0x260>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 030f 	and.w	r3, r3, #15
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d910      	bls.n	8005a34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a12:	4b8e      	ldr	r3, [pc, #568]	@ (8005c4c <HAL_RCC_ClockConfig+0x260>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f023 020f 	bic.w	r2, r3, #15
 8005a1a:	498c      	ldr	r1, [pc, #560]	@ (8005c4c <HAL_RCC_ClockConfig+0x260>)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a22:	4b8a      	ldr	r3, [pc, #552]	@ (8005c4c <HAL_RCC_ClockConfig+0x260>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 030f 	and.w	r3, r3, #15
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d001      	beq.n	8005a34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e106      	b.n	8005c42 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d073      	beq.n	8005b28 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	2b03      	cmp	r3, #3
 8005a46:	d129      	bne.n	8005a9c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a48:	4b81      	ldr	r3, [pc, #516]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e0f4      	b.n	8005c42 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005a58:	f000 f99e 	bl	8005d98 <RCC_GetSysClockFreqFromPLLSource>
 8005a5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	4a7c      	ldr	r2, [pc, #496]	@ (8005c54 <HAL_RCC_ClockConfig+0x268>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d93f      	bls.n	8005ae6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a66:	4b7a      	ldr	r3, [pc, #488]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d009      	beq.n	8005a86 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d033      	beq.n	8005ae6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d12f      	bne.n	8005ae6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a86:	4b72      	ldr	r3, [pc, #456]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a8e:	4a70      	ldr	r2, [pc, #448]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a94:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a96:	2380      	movs	r3, #128	@ 0x80
 8005a98:	617b      	str	r3, [r7, #20]
 8005a9a:	e024      	b.n	8005ae6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d107      	bne.n	8005ab4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005aa4:	4b6a      	ldr	r3, [pc, #424]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d109      	bne.n	8005ac4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e0c6      	b.n	8005c42 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ab4:	4b66      	ldr	r3, [pc, #408]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e0be      	b.n	8005c42 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005ac4:	f000 f8ce 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 8005ac8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	4a61      	ldr	r2, [pc, #388]	@ (8005c54 <HAL_RCC_ClockConfig+0x268>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d909      	bls.n	8005ae6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ad2:	4b5f      	ldr	r3, [pc, #380]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ada:	4a5d      	ldr	r2, [pc, #372]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005adc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ae0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005ae2:	2380      	movs	r3, #128	@ 0x80
 8005ae4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ae6:	4b5a      	ldr	r3, [pc, #360]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f023 0203 	bic.w	r2, r3, #3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	4957      	ldr	r1, [pc, #348]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005af8:	f7fc ff78 	bl	80029ec <HAL_GetTick>
 8005afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005afe:	e00a      	b.n	8005b16 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b00:	f7fc ff74 	bl	80029ec <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e095      	b.n	8005c42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b16:	4b4e      	ldr	r3, [pc, #312]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 020c 	and.w	r2, r3, #12
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d1eb      	bne.n	8005b00 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d023      	beq.n	8005b7c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0304 	and.w	r3, r3, #4
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d005      	beq.n	8005b4c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b40:	4b43      	ldr	r3, [pc, #268]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	4a42      	ldr	r2, [pc, #264]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005b46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005b4a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0308 	and.w	r3, r3, #8
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d007      	beq.n	8005b68 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005b58:	4b3d      	ldr	r3, [pc, #244]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005b60:	4a3b      	ldr	r2, [pc, #236]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005b62:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005b66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b68:	4b39      	ldr	r3, [pc, #228]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	4936      	ldr	r1, [pc, #216]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	608b      	str	r3, [r1, #8]
 8005b7a:	e008      	b.n	8005b8e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	2b80      	cmp	r3, #128	@ 0x80
 8005b80:	d105      	bne.n	8005b8e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005b82:	4b33      	ldr	r3, [pc, #204]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	4a32      	ldr	r2, [pc, #200]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005b88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b8c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b8e:	4b2f      	ldr	r3, [pc, #188]	@ (8005c4c <HAL_RCC_ClockConfig+0x260>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 030f 	and.w	r3, r3, #15
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d21d      	bcs.n	8005bd8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8005c4c <HAL_RCC_ClockConfig+0x260>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f023 020f 	bic.w	r2, r3, #15
 8005ba4:	4929      	ldr	r1, [pc, #164]	@ (8005c4c <HAL_RCC_ClockConfig+0x260>)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005bac:	f7fc ff1e 	bl	80029ec <HAL_GetTick>
 8005bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bb2:	e00a      	b.n	8005bca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bb4:	f7fc ff1a 	bl	80029ec <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d901      	bls.n	8005bca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e03b      	b.n	8005c42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bca:	4b20      	ldr	r3, [pc, #128]	@ (8005c4c <HAL_RCC_ClockConfig+0x260>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 030f 	and.w	r3, r3, #15
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d1ed      	bne.n	8005bb4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0304 	and.w	r3, r3, #4
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d008      	beq.n	8005bf6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005be4:	4b1a      	ldr	r3, [pc, #104]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	4917      	ldr	r1, [pc, #92]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0308 	and.w	r3, r3, #8
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d009      	beq.n	8005c16 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c02:	4b13      	ldr	r3, [pc, #76]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	00db      	lsls	r3, r3, #3
 8005c10:	490f      	ldr	r1, [pc, #60]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c16:	f000 f825 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8005c50 <HAL_RCC_ClockConfig+0x264>)
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	091b      	lsrs	r3, r3, #4
 8005c22:	f003 030f 	and.w	r3, r3, #15
 8005c26:	490c      	ldr	r1, [pc, #48]	@ (8005c58 <HAL_RCC_ClockConfig+0x26c>)
 8005c28:	5ccb      	ldrb	r3, [r1, r3]
 8005c2a:	f003 031f 	and.w	r3, r3, #31
 8005c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c32:	4a0a      	ldr	r2, [pc, #40]	@ (8005c5c <HAL_RCC_ClockConfig+0x270>)
 8005c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005c36:	4b0a      	ldr	r3, [pc, #40]	@ (8005c60 <HAL_RCC_ClockConfig+0x274>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7fc fe8a 	bl	8002954 <HAL_InitTick>
 8005c40:	4603      	mov	r3, r0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	40022000 	.word	0x40022000
 8005c50:	40021000 	.word	0x40021000
 8005c54:	04c4b400 	.word	0x04c4b400
 8005c58:	080096c0 	.word	0x080096c0
 8005c5c:	2000000c 	.word	0x2000000c
 8005c60:	20000010 	.word	0x20000010

08005c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005c6a:	4b2c      	ldr	r3, [pc, #176]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 030c 	and.w	r3, r3, #12
 8005c72:	2b04      	cmp	r3, #4
 8005c74:	d102      	bne.n	8005c7c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c76:	4b2a      	ldr	r3, [pc, #168]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c78:	613b      	str	r3, [r7, #16]
 8005c7a:	e047      	b.n	8005d0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005c7c:	4b27      	ldr	r3, [pc, #156]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f003 030c 	and.w	r3, r3, #12
 8005c84:	2b08      	cmp	r3, #8
 8005c86:	d102      	bne.n	8005c8e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c88:	4b26      	ldr	r3, [pc, #152]	@ (8005d24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c8a:	613b      	str	r3, [r7, #16]
 8005c8c:	e03e      	b.n	8005d0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005c8e:	4b23      	ldr	r3, [pc, #140]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f003 030c 	and.w	r3, r3, #12
 8005c96:	2b0c      	cmp	r3, #12
 8005c98:	d136      	bne.n	8005d08 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c9a:	4b20      	ldr	r3, [pc, #128]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f003 0303 	and.w	r3, r3, #3
 8005ca2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	091b      	lsrs	r3, r3, #4
 8005caa:	f003 030f 	and.w	r3, r3, #15
 8005cae:	3301      	adds	r3, #1
 8005cb0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d10c      	bne.n	8005cd2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005cb8:	4a1a      	ldr	r2, [pc, #104]	@ (8005d24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc0:	4a16      	ldr	r2, [pc, #88]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cc2:	68d2      	ldr	r2, [r2, #12]
 8005cc4:	0a12      	lsrs	r2, r2, #8
 8005cc6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005cca:	fb02 f303 	mul.w	r3, r2, r3
 8005cce:	617b      	str	r3, [r7, #20]
      break;
 8005cd0:	e00c      	b.n	8005cec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005cd2:	4a13      	ldr	r2, [pc, #76]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cda:	4a10      	ldr	r2, [pc, #64]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cdc:	68d2      	ldr	r2, [r2, #12]
 8005cde:	0a12      	lsrs	r2, r2, #8
 8005ce0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005ce4:	fb02 f303 	mul.w	r3, r2, r3
 8005ce8:	617b      	str	r3, [r7, #20]
      break;
 8005cea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cec:	4b0b      	ldr	r3, [pc, #44]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	0e5b      	lsrs	r3, r3, #25
 8005cf2:	f003 0303 	and.w	r3, r3, #3
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d04:	613b      	str	r3, [r7, #16]
 8005d06:	e001      	b.n	8005d0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005d0c:	693b      	ldr	r3, [r7, #16]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	371c      	adds	r7, #28
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	40021000 	.word	0x40021000
 8005d20:	00f42400 	.word	0x00f42400
 8005d24:	016e3600 	.word	0x016e3600

08005d28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d2c:	4b03      	ldr	r3, [pc, #12]	@ (8005d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	2000000c 	.word	0x2000000c

08005d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d44:	f7ff fff0 	bl	8005d28 <HAL_RCC_GetHCLKFreq>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	4b06      	ldr	r3, [pc, #24]	@ (8005d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	0a1b      	lsrs	r3, r3, #8
 8005d50:	f003 0307 	and.w	r3, r3, #7
 8005d54:	4904      	ldr	r1, [pc, #16]	@ (8005d68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d56:	5ccb      	ldrb	r3, [r1, r3]
 8005d58:	f003 031f 	and.w	r3, r3, #31
 8005d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	40021000 	.word	0x40021000
 8005d68:	080096d0 	.word	0x080096d0

08005d6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d70:	f7ff ffda 	bl	8005d28 <HAL_RCC_GetHCLKFreq>
 8005d74:	4602      	mov	r2, r0
 8005d76:	4b06      	ldr	r3, [pc, #24]	@ (8005d90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	0adb      	lsrs	r3, r3, #11
 8005d7c:	f003 0307 	and.w	r3, r3, #7
 8005d80:	4904      	ldr	r1, [pc, #16]	@ (8005d94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d82:	5ccb      	ldrb	r3, [r1, r3]
 8005d84:	f003 031f 	and.w	r3, r3, #31
 8005d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	40021000 	.word	0x40021000
 8005d94:	080096d0 	.word	0x080096d0

08005d98 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8005e18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f003 0303 	and.w	r3, r3, #3
 8005da6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005da8:	4b1b      	ldr	r3, [pc, #108]	@ (8005e18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	091b      	lsrs	r3, r3, #4
 8005dae:	f003 030f 	and.w	r3, r3, #15
 8005db2:	3301      	adds	r3, #1
 8005db4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	2b03      	cmp	r3, #3
 8005dba:	d10c      	bne.n	8005dd6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005dbc:	4a17      	ldr	r2, [pc, #92]	@ (8005e1c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc4:	4a14      	ldr	r2, [pc, #80]	@ (8005e18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005dc6:	68d2      	ldr	r2, [r2, #12]
 8005dc8:	0a12      	lsrs	r2, r2, #8
 8005dca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005dce:	fb02 f303 	mul.w	r3, r2, r3
 8005dd2:	617b      	str	r3, [r7, #20]
    break;
 8005dd4:	e00c      	b.n	8005df0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005dd6:	4a12      	ldr	r2, [pc, #72]	@ (8005e20 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dde:	4a0e      	ldr	r2, [pc, #56]	@ (8005e18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005de0:	68d2      	ldr	r2, [r2, #12]
 8005de2:	0a12      	lsrs	r2, r2, #8
 8005de4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005de8:	fb02 f303 	mul.w	r3, r2, r3
 8005dec:	617b      	str	r3, [r7, #20]
    break;
 8005dee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005df0:	4b09      	ldr	r3, [pc, #36]	@ (8005e18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	0e5b      	lsrs	r3, r3, #25
 8005df6:	f003 0303 	and.w	r3, r3, #3
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	005b      	lsls	r3, r3, #1
 8005dfe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e08:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005e0a:	687b      	ldr	r3, [r7, #4]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	371c      	adds	r7, #28
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	40021000 	.word	0x40021000
 8005e1c:	016e3600 	.word	0x016e3600
 8005e20:	00f42400 	.word	0x00f42400

08005e24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e30:	2300      	movs	r3, #0
 8005e32:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 8098 	beq.w	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e42:	2300      	movs	r3, #0
 8005e44:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e46:	4b43      	ldr	r3, [pc, #268]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10d      	bne.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e52:	4b40      	ldr	r3, [pc, #256]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e56:	4a3f      	ldr	r2, [pc, #252]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e5e:	4b3d      	ldr	r3, [pc, #244]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e66:	60bb      	str	r3, [r7, #8]
 8005e68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e6e:	4b3a      	ldr	r3, [pc, #232]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a39      	ldr	r2, [pc, #228]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e7a:	f7fc fdb7 	bl	80029ec <HAL_GetTick>
 8005e7e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e80:	e009      	b.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e82:	f7fc fdb3 	bl	80029ec <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d902      	bls.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	74fb      	strb	r3, [r7, #19]
        break;
 8005e94:	e005      	b.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e96:	4b30      	ldr	r3, [pc, #192]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d0ef      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005ea2:	7cfb      	ldrb	r3, [r7, #19]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d159      	bne.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ea8:	4b2a      	ldr	r3, [pc, #168]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eb2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d01e      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d019      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ec4:	4b23      	ldr	r3, [pc, #140]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ece:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ed0:	4b20      	ldr	r3, [pc, #128]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ed8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005edc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ee6:	4a1b      	ldr	r2, [pc, #108]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ee8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ef0:	4a18      	ldr	r2, [pc, #96]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d016      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f02:	f7fc fd73 	bl	80029ec <HAL_GetTick>
 8005f06:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f08:	e00b      	b.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f0a:	f7fc fd6f 	bl	80029ec <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d902      	bls.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	74fb      	strb	r3, [r7, #19]
            break;
 8005f20:	e006      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f22:	4b0c      	ldr	r3, [pc, #48]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d0ec      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005f30:	7cfb      	ldrb	r3, [r7, #19]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10b      	bne.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f36:	4b07      	ldr	r3, [pc, #28]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f44:	4903      	ldr	r1, [pc, #12]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005f4c:	e008      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f4e:	7cfb      	ldrb	r3, [r7, #19]
 8005f50:	74bb      	strb	r3, [r7, #18]
 8005f52:	e005      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005f54:	40021000 	.word	0x40021000
 8005f58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f5c:	7cfb      	ldrb	r3, [r7, #19]
 8005f5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f60:	7c7b      	ldrb	r3, [r7, #17]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d105      	bne.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f66:	4ba7      	ldr	r3, [pc, #668]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f6a:	4aa6      	ldr	r2, [pc, #664]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f70:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00a      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f7e:	4ba1      	ldr	r3, [pc, #644]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f84:	f023 0203 	bic.w	r2, r3, #3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	499d      	ldr	r1, [pc, #628]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00a      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fa0:	4b98      	ldr	r3, [pc, #608]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fa6:	f023 020c 	bic.w	r2, r3, #12
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	4995      	ldr	r1, [pc, #596]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0304 	and.w	r3, r3, #4
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00a      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005fc2:	4b90      	ldr	r3, [pc, #576]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fc8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	498c      	ldr	r1, [pc, #560]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0308 	and.w	r3, r3, #8
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00a      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005fe4:	4b87      	ldr	r3, [pc, #540]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	4984      	ldr	r1, [pc, #528]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0310 	and.w	r3, r3, #16
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00a      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006006:	4b7f      	ldr	r3, [pc, #508]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800600c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	695b      	ldr	r3, [r3, #20]
 8006014:	497b      	ldr	r1, [pc, #492]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006016:	4313      	orrs	r3, r2
 8006018:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0320 	and.w	r3, r3, #32
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00a      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006028:	4b76      	ldr	r3, [pc, #472]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800602a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800602e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	4973      	ldr	r1, [pc, #460]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006038:	4313      	orrs	r3, r2
 800603a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00a      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800604a:	4b6e      	ldr	r3, [pc, #440]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800604c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006050:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	496a      	ldr	r1, [pc, #424]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800605a:	4313      	orrs	r3, r2
 800605c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00a      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800606c:	4b65      	ldr	r3, [pc, #404]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800606e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006072:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	4962      	ldr	r1, [pc, #392]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800607c:	4313      	orrs	r3, r2
 800607e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00a      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800608e:	4b5d      	ldr	r3, [pc, #372]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006094:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609c:	4959      	ldr	r1, [pc, #356]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00a      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80060b0:	4b54      	ldr	r3, [pc, #336]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060b6:	f023 0203 	bic.w	r2, r3, #3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060be:	4951      	ldr	r1, [pc, #324]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00a      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060d2:	4b4c      	ldr	r3, [pc, #304]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e0:	4948      	ldr	r1, [pc, #288]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d015      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060f4:	4b43      	ldr	r3, [pc, #268]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006102:	4940      	ldr	r1, [pc, #256]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006104:	4313      	orrs	r3, r2
 8006106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800610e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006112:	d105      	bne.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006114:	4b3b      	ldr	r3, [pc, #236]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	4a3a      	ldr	r2, [pc, #232]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800611a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800611e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006128:	2b00      	cmp	r3, #0
 800612a:	d015      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800612c:	4b35      	ldr	r3, [pc, #212]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800612e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006132:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800613a:	4932      	ldr	r1, [pc, #200]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800613c:	4313      	orrs	r3, r2
 800613e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006146:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800614a:	d105      	bne.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800614c:	4b2d      	ldr	r3, [pc, #180]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	4a2c      	ldr	r2, [pc, #176]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006152:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006156:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d015      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006164:	4b27      	ldr	r3, [pc, #156]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800616a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006172:	4924      	ldr	r1, [pc, #144]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006174:	4313      	orrs	r3, r2
 8006176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800617e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006182:	d105      	bne.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006184:	4b1f      	ldr	r3, [pc, #124]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	4a1e      	ldr	r2, [pc, #120]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800618a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800618e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d015      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800619c:	4b19      	ldr	r3, [pc, #100]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800619e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061aa:	4916      	ldr	r1, [pc, #88]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061ba:	d105      	bne.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061bc:	4b11      	ldr	r3, [pc, #68]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	4a10      	ldr	r2, [pc, #64]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061c6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d019      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e2:	4908      	ldr	r1, [pc, #32]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061f2:	d109      	bne.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061f4:	4b03      	ldr	r3, [pc, #12]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	4a02      	ldr	r2, [pc, #8]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061fe:	60d3      	str	r3, [r2, #12]
 8006200:	e002      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006202:	bf00      	nop
 8006204:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d015      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006214:	4b29      	ldr	r3, [pc, #164]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800621a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006222:	4926      	ldr	r1, [pc, #152]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006224:	4313      	orrs	r3, r2
 8006226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800622e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006232:	d105      	bne.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006234:	4b21      	ldr	r3, [pc, #132]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	4a20      	ldr	r2, [pc, #128]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800623a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800623e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d015      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800624c:	4b1b      	ldr	r3, [pc, #108]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800624e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006252:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800625a:	4918      	ldr	r1, [pc, #96]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800625c:	4313      	orrs	r3, r2
 800625e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800626a:	d105      	bne.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800626c:	4b13      	ldr	r3, [pc, #76]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	4a12      	ldr	r2, [pc, #72]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006272:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006276:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d015      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006284:	4b0d      	ldr	r3, [pc, #52]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006286:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800628a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006292:	490a      	ldr	r1, [pc, #40]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006294:	4313      	orrs	r3, r2
 8006296:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800629e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062a2:	d105      	bne.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062a4:	4b05      	ldr	r3, [pc, #20]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	4a04      	ldr	r2, [pc, #16]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80062b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3718      	adds	r7, #24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	40021000 	.word	0x40021000

080062c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e054      	b.n	800637c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d111      	bne.n	8006302 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f001 fcfe 	bl	8007ce8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d102      	bne.n	80062fa <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a23      	ldr	r2, [pc, #140]	@ (8006384 <HAL_TIM_Base_Init+0xc4>)
 80062f8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2202      	movs	r2, #2
 8006306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	3304      	adds	r3, #4
 8006312:	4619      	mov	r1, r3
 8006314:	4610      	mov	r0, r2
 8006316:	f001 f847 	bl	80073a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	08002449 	.word	0x08002449

08006388 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006396:	b2db      	uxtb	r3, r3
 8006398:	2b01      	cmp	r3, #1
 800639a:	d001      	beq.n	80063a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e04c      	b.n	800643a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a26      	ldr	r2, [pc, #152]	@ (8006448 <HAL_TIM_Base_Start+0xc0>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d022      	beq.n	80063f8 <HAL_TIM_Base_Start+0x70>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ba:	d01d      	beq.n	80063f8 <HAL_TIM_Base_Start+0x70>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a22      	ldr	r2, [pc, #136]	@ (800644c <HAL_TIM_Base_Start+0xc4>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d018      	beq.n	80063f8 <HAL_TIM_Base_Start+0x70>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a21      	ldr	r2, [pc, #132]	@ (8006450 <HAL_TIM_Base_Start+0xc8>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d013      	beq.n	80063f8 <HAL_TIM_Base_Start+0x70>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a1f      	ldr	r2, [pc, #124]	@ (8006454 <HAL_TIM_Base_Start+0xcc>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d00e      	beq.n	80063f8 <HAL_TIM_Base_Start+0x70>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a1e      	ldr	r2, [pc, #120]	@ (8006458 <HAL_TIM_Base_Start+0xd0>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d009      	beq.n	80063f8 <HAL_TIM_Base_Start+0x70>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a1c      	ldr	r2, [pc, #112]	@ (800645c <HAL_TIM_Base_Start+0xd4>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d004      	beq.n	80063f8 <HAL_TIM_Base_Start+0x70>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a1b      	ldr	r2, [pc, #108]	@ (8006460 <HAL_TIM_Base_Start+0xd8>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d115      	bne.n	8006424 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689a      	ldr	r2, [r3, #8]
 80063fe:	4b19      	ldr	r3, [pc, #100]	@ (8006464 <HAL_TIM_Base_Start+0xdc>)
 8006400:	4013      	ands	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2b06      	cmp	r3, #6
 8006408:	d015      	beq.n	8006436 <HAL_TIM_Base_Start+0xae>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006410:	d011      	beq.n	8006436 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f042 0201 	orr.w	r2, r2, #1
 8006420:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006422:	e008      	b.n	8006436 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f042 0201 	orr.w	r2, r2, #1
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	e000      	b.n	8006438 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006436:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	40012c00 	.word	0x40012c00
 800644c:	40000400 	.word	0x40000400
 8006450:	40000800 	.word	0x40000800
 8006454:	40000c00 	.word	0x40000c00
 8006458:	40013400 	.word	0x40013400
 800645c:	40014000 	.word	0x40014000
 8006460:	40015000 	.word	0x40015000
 8006464:	00010007 	.word	0x00010007

08006468 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b01      	cmp	r3, #1
 800647a:	d001      	beq.n	8006480 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e054      	b.n	800652a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0201 	orr.w	r2, r2, #1
 8006496:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a26      	ldr	r2, [pc, #152]	@ (8006538 <HAL_TIM_Base_Start_IT+0xd0>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d022      	beq.n	80064e8 <HAL_TIM_Base_Start_IT+0x80>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064aa:	d01d      	beq.n	80064e8 <HAL_TIM_Base_Start_IT+0x80>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a22      	ldr	r2, [pc, #136]	@ (800653c <HAL_TIM_Base_Start_IT+0xd4>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d018      	beq.n	80064e8 <HAL_TIM_Base_Start_IT+0x80>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a21      	ldr	r2, [pc, #132]	@ (8006540 <HAL_TIM_Base_Start_IT+0xd8>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d013      	beq.n	80064e8 <HAL_TIM_Base_Start_IT+0x80>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006544 <HAL_TIM_Base_Start_IT+0xdc>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d00e      	beq.n	80064e8 <HAL_TIM_Base_Start_IT+0x80>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a1e      	ldr	r2, [pc, #120]	@ (8006548 <HAL_TIM_Base_Start_IT+0xe0>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d009      	beq.n	80064e8 <HAL_TIM_Base_Start_IT+0x80>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a1c      	ldr	r2, [pc, #112]	@ (800654c <HAL_TIM_Base_Start_IT+0xe4>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d004      	beq.n	80064e8 <HAL_TIM_Base_Start_IT+0x80>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a1b      	ldr	r2, [pc, #108]	@ (8006550 <HAL_TIM_Base_Start_IT+0xe8>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d115      	bne.n	8006514 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689a      	ldr	r2, [r3, #8]
 80064ee:	4b19      	ldr	r3, [pc, #100]	@ (8006554 <HAL_TIM_Base_Start_IT+0xec>)
 80064f0:	4013      	ands	r3, r2
 80064f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2b06      	cmp	r3, #6
 80064f8:	d015      	beq.n	8006526 <HAL_TIM_Base_Start_IT+0xbe>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006500:	d011      	beq.n	8006526 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f042 0201 	orr.w	r2, r2, #1
 8006510:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006512:	e008      	b.n	8006526 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 0201 	orr.w	r2, r2, #1
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	e000      	b.n	8006528 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006526:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	40012c00 	.word	0x40012c00
 800653c:	40000400 	.word	0x40000400
 8006540:	40000800 	.word	0x40000800
 8006544:	40000c00 	.word	0x40000c00
 8006548:	40013400 	.word	0x40013400
 800654c:	40014000 	.word	0x40014000
 8006550:	40015000 	.word	0x40015000
 8006554:	00010007 	.word	0x00010007

08006558 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e054      	b.n	8006614 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d111      	bne.n	800659a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f001 fbb2 	bl	8007ce8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006588:	2b00      	cmp	r3, #0
 800658a:	d102      	bne.n	8006592 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a23      	ldr	r2, [pc, #140]	@ (800661c <HAL_TIM_PWM_Init+0xc4>)
 8006590:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2202      	movs	r2, #2
 800659e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	3304      	adds	r3, #4
 80065aa:	4619      	mov	r1, r3
 80065ac:	4610      	mov	r0, r2
 80065ae:	f000 fefb 	bl	80073a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3708      	adds	r7, #8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	08006621 	.word	0x08006621

08006620 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d109      	bne.n	8006658 <HAL_TIM_PWM_Start+0x24>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800664a:	b2db      	uxtb	r3, r3
 800664c:	2b01      	cmp	r3, #1
 800664e:	bf14      	ite	ne
 8006650:	2301      	movne	r3, #1
 8006652:	2300      	moveq	r3, #0
 8006654:	b2db      	uxtb	r3, r3
 8006656:	e03c      	b.n	80066d2 <HAL_TIM_PWM_Start+0x9e>
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	2b04      	cmp	r3, #4
 800665c:	d109      	bne.n	8006672 <HAL_TIM_PWM_Start+0x3e>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b01      	cmp	r3, #1
 8006668:	bf14      	ite	ne
 800666a:	2301      	movne	r3, #1
 800666c:	2300      	moveq	r3, #0
 800666e:	b2db      	uxtb	r3, r3
 8006670:	e02f      	b.n	80066d2 <HAL_TIM_PWM_Start+0x9e>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b08      	cmp	r3, #8
 8006676:	d109      	bne.n	800668c <HAL_TIM_PWM_Start+0x58>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800667e:	b2db      	uxtb	r3, r3
 8006680:	2b01      	cmp	r3, #1
 8006682:	bf14      	ite	ne
 8006684:	2301      	movne	r3, #1
 8006686:	2300      	moveq	r3, #0
 8006688:	b2db      	uxtb	r3, r3
 800668a:	e022      	b.n	80066d2 <HAL_TIM_PWM_Start+0x9e>
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	2b0c      	cmp	r3, #12
 8006690:	d109      	bne.n	80066a6 <HAL_TIM_PWM_Start+0x72>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b01      	cmp	r3, #1
 800669c:	bf14      	ite	ne
 800669e:	2301      	movne	r3, #1
 80066a0:	2300      	moveq	r3, #0
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	e015      	b.n	80066d2 <HAL_TIM_PWM_Start+0x9e>
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	2b10      	cmp	r3, #16
 80066aa:	d109      	bne.n	80066c0 <HAL_TIM_PWM_Start+0x8c>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	bf14      	ite	ne
 80066b8:	2301      	movne	r3, #1
 80066ba:	2300      	moveq	r3, #0
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	e008      	b.n	80066d2 <HAL_TIM_PWM_Start+0x9e>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	bf14      	ite	ne
 80066cc:	2301      	movne	r3, #1
 80066ce:	2300      	moveq	r3, #0
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e0a6      	b.n	8006828 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d104      	bne.n	80066ea <HAL_TIM_PWM_Start+0xb6>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066e8:	e023      	b.n	8006732 <HAL_TIM_PWM_Start+0xfe>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b04      	cmp	r3, #4
 80066ee:	d104      	bne.n	80066fa <HAL_TIM_PWM_Start+0xc6>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066f8:	e01b      	b.n	8006732 <HAL_TIM_PWM_Start+0xfe>
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2b08      	cmp	r3, #8
 80066fe:	d104      	bne.n	800670a <HAL_TIM_PWM_Start+0xd6>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006708:	e013      	b.n	8006732 <HAL_TIM_PWM_Start+0xfe>
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	2b0c      	cmp	r3, #12
 800670e:	d104      	bne.n	800671a <HAL_TIM_PWM_Start+0xe6>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2202      	movs	r2, #2
 8006714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006718:	e00b      	b.n	8006732 <HAL_TIM_PWM_Start+0xfe>
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	2b10      	cmp	r3, #16
 800671e:	d104      	bne.n	800672a <HAL_TIM_PWM_Start+0xf6>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2202      	movs	r2, #2
 8006724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006728:	e003      	b.n	8006732 <HAL_TIM_PWM_Start+0xfe>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2202      	movs	r2, #2
 800672e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2201      	movs	r2, #1
 8006738:	6839      	ldr	r1, [r7, #0]
 800673a:	4618      	mov	r0, r3
 800673c:	f001 faae 	bl	8007c9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a3a      	ldr	r2, [pc, #232]	@ (8006830 <HAL_TIM_PWM_Start+0x1fc>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d018      	beq.n	800677c <HAL_TIM_PWM_Start+0x148>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a39      	ldr	r2, [pc, #228]	@ (8006834 <HAL_TIM_PWM_Start+0x200>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d013      	beq.n	800677c <HAL_TIM_PWM_Start+0x148>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a37      	ldr	r2, [pc, #220]	@ (8006838 <HAL_TIM_PWM_Start+0x204>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d00e      	beq.n	800677c <HAL_TIM_PWM_Start+0x148>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a36      	ldr	r2, [pc, #216]	@ (800683c <HAL_TIM_PWM_Start+0x208>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d009      	beq.n	800677c <HAL_TIM_PWM_Start+0x148>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a34      	ldr	r2, [pc, #208]	@ (8006840 <HAL_TIM_PWM_Start+0x20c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d004      	beq.n	800677c <HAL_TIM_PWM_Start+0x148>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a33      	ldr	r2, [pc, #204]	@ (8006844 <HAL_TIM_PWM_Start+0x210>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d101      	bne.n	8006780 <HAL_TIM_PWM_Start+0x14c>
 800677c:	2301      	movs	r3, #1
 800677e:	e000      	b.n	8006782 <HAL_TIM_PWM_Start+0x14e>
 8006780:	2300      	movs	r3, #0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d007      	beq.n	8006796 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006794:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a25      	ldr	r2, [pc, #148]	@ (8006830 <HAL_TIM_PWM_Start+0x1fc>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d022      	beq.n	80067e6 <HAL_TIM_PWM_Start+0x1b2>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067a8:	d01d      	beq.n	80067e6 <HAL_TIM_PWM_Start+0x1b2>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a26      	ldr	r2, [pc, #152]	@ (8006848 <HAL_TIM_PWM_Start+0x214>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d018      	beq.n	80067e6 <HAL_TIM_PWM_Start+0x1b2>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a24      	ldr	r2, [pc, #144]	@ (800684c <HAL_TIM_PWM_Start+0x218>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d013      	beq.n	80067e6 <HAL_TIM_PWM_Start+0x1b2>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a23      	ldr	r2, [pc, #140]	@ (8006850 <HAL_TIM_PWM_Start+0x21c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d00e      	beq.n	80067e6 <HAL_TIM_PWM_Start+0x1b2>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a19      	ldr	r2, [pc, #100]	@ (8006834 <HAL_TIM_PWM_Start+0x200>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d009      	beq.n	80067e6 <HAL_TIM_PWM_Start+0x1b2>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a18      	ldr	r2, [pc, #96]	@ (8006838 <HAL_TIM_PWM_Start+0x204>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d004      	beq.n	80067e6 <HAL_TIM_PWM_Start+0x1b2>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a18      	ldr	r2, [pc, #96]	@ (8006844 <HAL_TIM_PWM_Start+0x210>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d115      	bne.n	8006812 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	689a      	ldr	r2, [r3, #8]
 80067ec:	4b19      	ldr	r3, [pc, #100]	@ (8006854 <HAL_TIM_PWM_Start+0x220>)
 80067ee:	4013      	ands	r3, r2
 80067f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2b06      	cmp	r3, #6
 80067f6:	d015      	beq.n	8006824 <HAL_TIM_PWM_Start+0x1f0>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067fe:	d011      	beq.n	8006824 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f042 0201 	orr.w	r2, r2, #1
 800680e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006810:	e008      	b.n	8006824 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f042 0201 	orr.w	r2, r2, #1
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	e000      	b.n	8006826 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006824:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	40012c00 	.word	0x40012c00
 8006834:	40013400 	.word	0x40013400
 8006838:	40014000 	.word	0x40014000
 800683c:	40014400 	.word	0x40014400
 8006840:	40014800 	.word	0x40014800
 8006844:	40015000 	.word	0x40015000
 8006848:	40000400 	.word	0x40000400
 800684c:	40000800 	.word	0x40000800
 8006850:	40000c00 	.word	0x40000c00
 8006854:	00010007 	.word	0x00010007

08006858 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e04c      	b.n	8006906 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006872:	b2db      	uxtb	r3, r3
 8006874:	2b00      	cmp	r3, #0
 8006876:	d111      	bne.n	800689c <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f001 fa31 	bl	8007ce8 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800688a:	2b00      	cmp	r3, #0
 800688c:	d102      	bne.n	8006894 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a1f      	ldr	r2, [pc, #124]	@ (8006910 <HAL_TIM_OnePulse_Init+0xb8>)
 8006892:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	3304      	adds	r3, #4
 80068ac:	4619      	mov	r1, r3
 80068ae:	4610      	mov	r0, r2
 80068b0:	f000 fd7a 	bl	80073a8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 0208 	bic.w	r2, r2, #8
 80068c2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6819      	ldr	r1, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	683a      	ldr	r2, [r7, #0]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	08006915 	.word	0x08006915

08006914 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e0a2      	b.n	8006a82 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	d111      	bne.n	800696c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f001 f9c9 	bl	8007ce8 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800695a:	2b00      	cmp	r3, #0
 800695c:	d102      	bne.n	8006964 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a4a      	ldr	r2, [pc, #296]	@ (8006a8c <HAL_TIM_Encoder_Init+0x164>)
 8006962:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2202      	movs	r2, #2
 8006970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	6812      	ldr	r2, [r2, #0]
 800697e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006982:	f023 0307 	bic.w	r3, r3, #7
 8006986:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	3304      	adds	r3, #4
 8006990:	4619      	mov	r1, r3
 8006992:	4610      	mov	r0, r2
 8006994:	f000 fd08 	bl	80073a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069c0:	f023 0303 	bic.w	r3, r3, #3
 80069c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	689a      	ldr	r2, [r3, #8]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	021b      	lsls	r3, r3, #8
 80069d0:	4313      	orrs	r3, r2
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80069de:	f023 030c 	bic.w	r3, r3, #12
 80069e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80069ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	68da      	ldr	r2, [r3, #12]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	021b      	lsls	r3, r3, #8
 80069fa:	4313      	orrs	r3, r2
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	011a      	lsls	r2, r3, #4
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	6a1b      	ldr	r3, [r3, #32]
 8006a0c:	031b      	lsls	r3, r3, #12
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006a1c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006a24:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	685a      	ldr	r2, [r3, #4]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	011b      	lsls	r3, r3, #4
 8006a30:	4313      	orrs	r3, r2
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	08002505 	.word	0x08002505

08006a90 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006aa0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006aa8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ab0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ab8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d110      	bne.n	8006ae2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d102      	bne.n	8006acc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ac6:	7b7b      	ldrb	r3, [r7, #13]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d001      	beq.n	8006ad0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e069      	b.n	8006ba4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2202      	movs	r2, #2
 8006adc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ae0:	e031      	b.n	8006b46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b04      	cmp	r3, #4
 8006ae6:	d110      	bne.n	8006b0a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ae8:	7bbb      	ldrb	r3, [r7, #14]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d102      	bne.n	8006af4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006aee:	7b3b      	ldrb	r3, [r7, #12]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d001      	beq.n	8006af8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e055      	b.n	8006ba4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2202      	movs	r2, #2
 8006afc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2202      	movs	r2, #2
 8006b04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b08:	e01d      	b.n	8006b46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b0a:	7bfb      	ldrb	r3, [r7, #15]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d108      	bne.n	8006b22 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b10:	7bbb      	ldrb	r3, [r7, #14]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d105      	bne.n	8006b22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b16:	7b7b      	ldrb	r3, [r7, #13]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d102      	bne.n	8006b22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b1c:	7b3b      	ldrb	r3, [r7, #12]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d001      	beq.n	8006b26 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e03e      	b.n	8006ba4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2202      	movs	r2, #2
 8006b2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2202      	movs	r2, #2
 8006b32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2202      	movs	r2, #2
 8006b3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2202      	movs	r2, #2
 8006b42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <HAL_TIM_Encoder_Start+0xc4>
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	d008      	beq.n	8006b64 <HAL_TIM_Encoder_Start+0xd4>
 8006b52:	e00f      	b.n	8006b74 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f001 f89d 	bl	8007c9c <TIM_CCxChannelCmd>
      break;
 8006b62:	e016      	b.n	8006b92 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	2104      	movs	r1, #4
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f001 f895 	bl	8007c9c <TIM_CCxChannelCmd>
      break;
 8006b72:	e00e      	b.n	8006b92 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f001 f88d 	bl	8007c9c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2201      	movs	r2, #1
 8006b88:	2104      	movs	r1, #4
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f001 f886 	bl	8007c9c <TIM_CCxChannelCmd>
      break;
 8006b90:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f042 0201 	orr.w	r2, r2, #1
 8006ba0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	f003 0302 	and.w	r3, r3, #2
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d026      	beq.n	8006c1c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f003 0302 	and.w	r3, r3, #2
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d021      	beq.n	8006c1c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f06f 0202 	mvn.w	r2, #2
 8006be0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	f003 0303 	and.w	r3, r3, #3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d005      	beq.n	8006c02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	4798      	blx	r3
 8006c00:	e009      	b.n	8006c16 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f003 0304 	and.w	r3, r3, #4
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d026      	beq.n	8006c74 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f003 0304 	and.w	r3, r3, #4
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d021      	beq.n	8006c74 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f06f 0204 	mvn.w	r2, #4
 8006c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2202      	movs	r2, #2
 8006c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d005      	beq.n	8006c5a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	4798      	blx	r3
 8006c58:	e009      	b.n	8006c6e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f003 0308 	and.w	r3, r3, #8
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d026      	beq.n	8006ccc <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f003 0308 	and.w	r3, r3, #8
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d021      	beq.n	8006ccc <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f06f 0208 	mvn.w	r2, #8
 8006c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2204      	movs	r2, #4
 8006c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	69db      	ldr	r3, [r3, #28]
 8006c9e:	f003 0303 	and.w	r3, r3, #3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d005      	beq.n	8006cb2 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	4798      	blx	r3
 8006cb0:	e009      	b.n	8006cc6 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	f003 0310 	and.w	r3, r3, #16
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d026      	beq.n	8006d24 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f003 0310 	and.w	r3, r3, #16
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d021      	beq.n	8006d24 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f06f 0210 	mvn.w	r2, #16
 8006ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2208      	movs	r2, #8
 8006cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	69db      	ldr	r3, [r3, #28]
 8006cf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d005      	beq.n	8006d0a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	4798      	blx	r3
 8006d08:	e009      	b.n	8006d1e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00e      	beq.n	8006d4c <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d009      	beq.n	8006d4c <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f06f 0201 	mvn.w	r2, #1
 8006d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d104      	bne.n	8006d60 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d00e      	beq.n	8006d7e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d009      	beq.n	8006d7e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00e      	beq.n	8006da6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d009      	beq.n	8006da6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00e      	beq.n	8006dce <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d009      	beq.n	8006dce <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	f003 0320 	and.w	r3, r3, #32
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00e      	beq.n	8006df6 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f003 0320 	and.w	r3, r3, #32
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d009      	beq.n	8006df6 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f06f 0220 	mvn.w	r2, #32
 8006dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00e      	beq.n	8006e1e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d009      	beq.n	8006e1e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00e      	beq.n	8006e46 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d009      	beq.n	8006e46 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00e      	beq.n	8006e6e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d009      	beq.n	8006e6e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00e      	beq.n	8006e96 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d009      	beq.n	8006e96 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e96:	bf00      	nop
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
	...

08006ea0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006eac:	2300      	movs	r3, #0
 8006eae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d101      	bne.n	8006ebe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006eba:	2302      	movs	r3, #2
 8006ebc:	e0ff      	b.n	80070be <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b14      	cmp	r3, #20
 8006eca:	f200 80f0 	bhi.w	80070ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006ece:	a201      	add	r2, pc, #4	@ (adr r2, 8006ed4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed4:	08006f29 	.word	0x08006f29
 8006ed8:	080070af 	.word	0x080070af
 8006edc:	080070af 	.word	0x080070af
 8006ee0:	080070af 	.word	0x080070af
 8006ee4:	08006f69 	.word	0x08006f69
 8006ee8:	080070af 	.word	0x080070af
 8006eec:	080070af 	.word	0x080070af
 8006ef0:	080070af 	.word	0x080070af
 8006ef4:	08006fab 	.word	0x08006fab
 8006ef8:	080070af 	.word	0x080070af
 8006efc:	080070af 	.word	0x080070af
 8006f00:	080070af 	.word	0x080070af
 8006f04:	08006feb 	.word	0x08006feb
 8006f08:	080070af 	.word	0x080070af
 8006f0c:	080070af 	.word	0x080070af
 8006f10:	080070af 	.word	0x080070af
 8006f14:	0800702d 	.word	0x0800702d
 8006f18:	080070af 	.word	0x080070af
 8006f1c:	080070af 	.word	0x080070af
 8006f20:	080070af 	.word	0x080070af
 8006f24:	0800706d 	.word	0x0800706d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68b9      	ldr	r1, [r7, #8]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 faee 	bl	8007510 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	699a      	ldr	r2, [r3, #24]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f042 0208 	orr.w	r2, r2, #8
 8006f42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	699a      	ldr	r2, [r3, #24]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f022 0204 	bic.w	r2, r2, #4
 8006f52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6999      	ldr	r1, [r3, #24]
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	691a      	ldr	r2, [r3, #16]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	430a      	orrs	r2, r1
 8006f64:	619a      	str	r2, [r3, #24]
      break;
 8006f66:	e0a5      	b.n	80070b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68b9      	ldr	r1, [r7, #8]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f000 fb68 	bl	8007644 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	699a      	ldr	r2, [r3, #24]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	699a      	ldr	r2, [r3, #24]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6999      	ldr	r1, [r3, #24]
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	021a      	lsls	r2, r3, #8
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	430a      	orrs	r2, r1
 8006fa6:	619a      	str	r2, [r3, #24]
      break;
 8006fa8:	e084      	b.n	80070b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68b9      	ldr	r1, [r7, #8]
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f000 fbdb 	bl	800776c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	69da      	ldr	r2, [r3, #28]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f042 0208 	orr.w	r2, r2, #8
 8006fc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	69da      	ldr	r2, [r3, #28]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f022 0204 	bic.w	r2, r2, #4
 8006fd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	69d9      	ldr	r1, [r3, #28]
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	691a      	ldr	r2, [r3, #16]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	430a      	orrs	r2, r1
 8006fe6:	61da      	str	r2, [r3, #28]
      break;
 8006fe8:	e064      	b.n	80070b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68b9      	ldr	r1, [r7, #8]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f000 fc4d 	bl	8007890 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	69da      	ldr	r2, [r3, #28]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007004:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	69da      	ldr	r2, [r3, #28]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007014:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	69d9      	ldr	r1, [r3, #28]
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	021a      	lsls	r2, r3, #8
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	430a      	orrs	r2, r1
 8007028:	61da      	str	r2, [r3, #28]
      break;
 800702a:	e043      	b.n	80070b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68b9      	ldr	r1, [r7, #8]
 8007032:	4618      	mov	r0, r3
 8007034:	f000 fcc0 	bl	80079b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f042 0208 	orr.w	r2, r2, #8
 8007046:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f022 0204 	bic.w	r2, r2, #4
 8007056:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	691a      	ldr	r2, [r3, #16]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	430a      	orrs	r2, r1
 8007068:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800706a:	e023      	b.n	80070b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68b9      	ldr	r1, [r7, #8]
 8007072:	4618      	mov	r0, r3
 8007074:	f000 fd0a 	bl	8007a8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007086:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007096:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	021a      	lsls	r2, r3, #8
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	430a      	orrs	r2, r1
 80070aa:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80070ac:	e002      	b.n	80070b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	75fb      	strb	r3, [r7, #23]
      break;
 80070b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80070bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3718      	adds	r7, #24
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop

080070c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d101      	bne.n	80070e4 <HAL_TIM_ConfigClockSource+0x1c>
 80070e0:	2302      	movs	r3, #2
 80070e2:	e0f6      	b.n	80072d2 <HAL_TIM_ConfigClockSource+0x20a>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2202      	movs	r2, #2
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007102:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007106:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800710e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a6f      	ldr	r2, [pc, #444]	@ (80072dc <HAL_TIM_ConfigClockSource+0x214>)
 800711e:	4293      	cmp	r3, r2
 8007120:	f000 80c1 	beq.w	80072a6 <HAL_TIM_ConfigClockSource+0x1de>
 8007124:	4a6d      	ldr	r2, [pc, #436]	@ (80072dc <HAL_TIM_ConfigClockSource+0x214>)
 8007126:	4293      	cmp	r3, r2
 8007128:	f200 80c6 	bhi.w	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800712c:	4a6c      	ldr	r2, [pc, #432]	@ (80072e0 <HAL_TIM_ConfigClockSource+0x218>)
 800712e:	4293      	cmp	r3, r2
 8007130:	f000 80b9 	beq.w	80072a6 <HAL_TIM_ConfigClockSource+0x1de>
 8007134:	4a6a      	ldr	r2, [pc, #424]	@ (80072e0 <HAL_TIM_ConfigClockSource+0x218>)
 8007136:	4293      	cmp	r3, r2
 8007138:	f200 80be 	bhi.w	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800713c:	4a69      	ldr	r2, [pc, #420]	@ (80072e4 <HAL_TIM_ConfigClockSource+0x21c>)
 800713e:	4293      	cmp	r3, r2
 8007140:	f000 80b1 	beq.w	80072a6 <HAL_TIM_ConfigClockSource+0x1de>
 8007144:	4a67      	ldr	r2, [pc, #412]	@ (80072e4 <HAL_TIM_ConfigClockSource+0x21c>)
 8007146:	4293      	cmp	r3, r2
 8007148:	f200 80b6 	bhi.w	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800714c:	4a66      	ldr	r2, [pc, #408]	@ (80072e8 <HAL_TIM_ConfigClockSource+0x220>)
 800714e:	4293      	cmp	r3, r2
 8007150:	f000 80a9 	beq.w	80072a6 <HAL_TIM_ConfigClockSource+0x1de>
 8007154:	4a64      	ldr	r2, [pc, #400]	@ (80072e8 <HAL_TIM_ConfigClockSource+0x220>)
 8007156:	4293      	cmp	r3, r2
 8007158:	f200 80ae 	bhi.w	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800715c:	4a63      	ldr	r2, [pc, #396]	@ (80072ec <HAL_TIM_ConfigClockSource+0x224>)
 800715e:	4293      	cmp	r3, r2
 8007160:	f000 80a1 	beq.w	80072a6 <HAL_TIM_ConfigClockSource+0x1de>
 8007164:	4a61      	ldr	r2, [pc, #388]	@ (80072ec <HAL_TIM_ConfigClockSource+0x224>)
 8007166:	4293      	cmp	r3, r2
 8007168:	f200 80a6 	bhi.w	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800716c:	4a60      	ldr	r2, [pc, #384]	@ (80072f0 <HAL_TIM_ConfigClockSource+0x228>)
 800716e:	4293      	cmp	r3, r2
 8007170:	f000 8099 	beq.w	80072a6 <HAL_TIM_ConfigClockSource+0x1de>
 8007174:	4a5e      	ldr	r2, [pc, #376]	@ (80072f0 <HAL_TIM_ConfigClockSource+0x228>)
 8007176:	4293      	cmp	r3, r2
 8007178:	f200 809e 	bhi.w	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800717c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007180:	f000 8091 	beq.w	80072a6 <HAL_TIM_ConfigClockSource+0x1de>
 8007184:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007188:	f200 8096 	bhi.w	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800718c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007190:	f000 8089 	beq.w	80072a6 <HAL_TIM_ConfigClockSource+0x1de>
 8007194:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007198:	f200 808e 	bhi.w	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 800719c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071a0:	d03e      	beq.n	8007220 <HAL_TIM_ConfigClockSource+0x158>
 80071a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071a6:	f200 8087 	bhi.w	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80071aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071ae:	f000 8086 	beq.w	80072be <HAL_TIM_ConfigClockSource+0x1f6>
 80071b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071b6:	d87f      	bhi.n	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80071b8:	2b70      	cmp	r3, #112	@ 0x70
 80071ba:	d01a      	beq.n	80071f2 <HAL_TIM_ConfigClockSource+0x12a>
 80071bc:	2b70      	cmp	r3, #112	@ 0x70
 80071be:	d87b      	bhi.n	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80071c0:	2b60      	cmp	r3, #96	@ 0x60
 80071c2:	d050      	beq.n	8007266 <HAL_TIM_ConfigClockSource+0x19e>
 80071c4:	2b60      	cmp	r3, #96	@ 0x60
 80071c6:	d877      	bhi.n	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80071c8:	2b50      	cmp	r3, #80	@ 0x50
 80071ca:	d03c      	beq.n	8007246 <HAL_TIM_ConfigClockSource+0x17e>
 80071cc:	2b50      	cmp	r3, #80	@ 0x50
 80071ce:	d873      	bhi.n	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80071d0:	2b40      	cmp	r3, #64	@ 0x40
 80071d2:	d058      	beq.n	8007286 <HAL_TIM_ConfigClockSource+0x1be>
 80071d4:	2b40      	cmp	r3, #64	@ 0x40
 80071d6:	d86f      	bhi.n	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80071d8:	2b30      	cmp	r3, #48	@ 0x30
 80071da:	d064      	beq.n	80072a6 <HAL_TIM_ConfigClockSource+0x1de>
 80071dc:	2b30      	cmp	r3, #48	@ 0x30
 80071de:	d86b      	bhi.n	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80071e0:	2b20      	cmp	r3, #32
 80071e2:	d060      	beq.n	80072a6 <HAL_TIM_ConfigClockSource+0x1de>
 80071e4:	2b20      	cmp	r3, #32
 80071e6:	d867      	bhi.n	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d05c      	beq.n	80072a6 <HAL_TIM_ConfigClockSource+0x1de>
 80071ec:	2b10      	cmp	r3, #16
 80071ee:	d05a      	beq.n	80072a6 <HAL_TIM_ConfigClockSource+0x1de>
 80071f0:	e062      	b.n	80072b8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007202:	f000 fd2b 	bl	8007c5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007214:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68ba      	ldr	r2, [r7, #8]
 800721c:	609a      	str	r2, [r3, #8]
      break;
 800721e:	e04f      	b.n	80072c0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007230:	f000 fd14 	bl	8007c5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689a      	ldr	r2, [r3, #8]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007242:	609a      	str	r2, [r3, #8]
      break;
 8007244:	e03c      	b.n	80072c0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007252:	461a      	mov	r2, r3
 8007254:	f000 fc86 	bl	8007b64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2150      	movs	r1, #80	@ 0x50
 800725e:	4618      	mov	r0, r3
 8007260:	f000 fcdf 	bl	8007c22 <TIM_ITRx_SetConfig>
      break;
 8007264:	e02c      	b.n	80072c0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007272:	461a      	mov	r2, r3
 8007274:	f000 fca5 	bl	8007bc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2160      	movs	r1, #96	@ 0x60
 800727e:	4618      	mov	r0, r3
 8007280:	f000 fccf 	bl	8007c22 <TIM_ITRx_SetConfig>
      break;
 8007284:	e01c      	b.n	80072c0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007292:	461a      	mov	r2, r3
 8007294:	f000 fc66 	bl	8007b64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2140      	movs	r1, #64	@ 0x40
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 fcbf 	bl	8007c22 <TIM_ITRx_SetConfig>
      break;
 80072a4:	e00c      	b.n	80072c0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4619      	mov	r1, r3
 80072b0:	4610      	mov	r0, r2
 80072b2:	f000 fcb6 	bl	8007c22 <TIM_ITRx_SetConfig>
      break;
 80072b6:	e003      	b.n	80072c0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	73fb      	strb	r3, [r7, #15]
      break;
 80072bc:	e000      	b.n	80072c0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80072be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80072d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	00100070 	.word	0x00100070
 80072e0:	00100060 	.word	0x00100060
 80072e4:	00100050 	.word	0x00100050
 80072e8:	00100040 	.word	0x00100040
 80072ec:	00100030 	.word	0x00100030
 80072f0:	00100020 	.word	0x00100020

080072f4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a4c      	ldr	r2, [pc, #304]	@ (80074ec <TIM_Base_SetConfig+0x144>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d017      	beq.n	80073f0 <TIM_Base_SetConfig+0x48>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073c6:	d013      	beq.n	80073f0 <TIM_Base_SetConfig+0x48>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a49      	ldr	r2, [pc, #292]	@ (80074f0 <TIM_Base_SetConfig+0x148>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d00f      	beq.n	80073f0 <TIM_Base_SetConfig+0x48>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a48      	ldr	r2, [pc, #288]	@ (80074f4 <TIM_Base_SetConfig+0x14c>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d00b      	beq.n	80073f0 <TIM_Base_SetConfig+0x48>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a47      	ldr	r2, [pc, #284]	@ (80074f8 <TIM_Base_SetConfig+0x150>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d007      	beq.n	80073f0 <TIM_Base_SetConfig+0x48>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a46      	ldr	r2, [pc, #280]	@ (80074fc <TIM_Base_SetConfig+0x154>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d003      	beq.n	80073f0 <TIM_Base_SetConfig+0x48>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a45      	ldr	r2, [pc, #276]	@ (8007500 <TIM_Base_SetConfig+0x158>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d108      	bne.n	8007402 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	4313      	orrs	r3, r2
 8007400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a39      	ldr	r2, [pc, #228]	@ (80074ec <TIM_Base_SetConfig+0x144>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d023      	beq.n	8007452 <TIM_Base_SetConfig+0xaa>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007410:	d01f      	beq.n	8007452 <TIM_Base_SetConfig+0xaa>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a36      	ldr	r2, [pc, #216]	@ (80074f0 <TIM_Base_SetConfig+0x148>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d01b      	beq.n	8007452 <TIM_Base_SetConfig+0xaa>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a35      	ldr	r2, [pc, #212]	@ (80074f4 <TIM_Base_SetConfig+0x14c>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d017      	beq.n	8007452 <TIM_Base_SetConfig+0xaa>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a34      	ldr	r2, [pc, #208]	@ (80074f8 <TIM_Base_SetConfig+0x150>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d013      	beq.n	8007452 <TIM_Base_SetConfig+0xaa>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a33      	ldr	r2, [pc, #204]	@ (80074fc <TIM_Base_SetConfig+0x154>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d00f      	beq.n	8007452 <TIM_Base_SetConfig+0xaa>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a33      	ldr	r2, [pc, #204]	@ (8007504 <TIM_Base_SetConfig+0x15c>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d00b      	beq.n	8007452 <TIM_Base_SetConfig+0xaa>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a32      	ldr	r2, [pc, #200]	@ (8007508 <TIM_Base_SetConfig+0x160>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d007      	beq.n	8007452 <TIM_Base_SetConfig+0xaa>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a31      	ldr	r2, [pc, #196]	@ (800750c <TIM_Base_SetConfig+0x164>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d003      	beq.n	8007452 <TIM_Base_SetConfig+0xaa>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a2c      	ldr	r2, [pc, #176]	@ (8007500 <TIM_Base_SetConfig+0x158>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d108      	bne.n	8007464 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	4313      	orrs	r3, r2
 8007462:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	4313      	orrs	r3, r2
 8007470:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	689a      	ldr	r2, [r3, #8]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a18      	ldr	r2, [pc, #96]	@ (80074ec <TIM_Base_SetConfig+0x144>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d013      	beq.n	80074b8 <TIM_Base_SetConfig+0x110>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a1a      	ldr	r2, [pc, #104]	@ (80074fc <TIM_Base_SetConfig+0x154>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d00f      	beq.n	80074b8 <TIM_Base_SetConfig+0x110>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a1a      	ldr	r2, [pc, #104]	@ (8007504 <TIM_Base_SetConfig+0x15c>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d00b      	beq.n	80074b8 <TIM_Base_SetConfig+0x110>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a19      	ldr	r2, [pc, #100]	@ (8007508 <TIM_Base_SetConfig+0x160>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d007      	beq.n	80074b8 <TIM_Base_SetConfig+0x110>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a18      	ldr	r2, [pc, #96]	@ (800750c <TIM_Base_SetConfig+0x164>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d003      	beq.n	80074b8 <TIM_Base_SetConfig+0x110>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a13      	ldr	r2, [pc, #76]	@ (8007500 <TIM_Base_SetConfig+0x158>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d103      	bne.n	80074c0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	691a      	ldr	r2, [r3, #16]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d105      	bne.n	80074de <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	f023 0201 	bic.w	r2, r3, #1
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	611a      	str	r2, [r3, #16]
  }
}
 80074de:	bf00      	nop
 80074e0:	3714      	adds	r7, #20
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	40012c00 	.word	0x40012c00
 80074f0:	40000400 	.word	0x40000400
 80074f4:	40000800 	.word	0x40000800
 80074f8:	40000c00 	.word	0x40000c00
 80074fc:	40013400 	.word	0x40013400
 8007500:	40015000 	.word	0x40015000
 8007504:	40014000 	.word	0x40014000
 8007508:	40014400 	.word	0x40014400
 800750c:	40014800 	.word	0x40014800

08007510 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007510:	b480      	push	{r7}
 8007512:	b087      	sub	sp, #28
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a1b      	ldr	r3, [r3, #32]
 800751e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a1b      	ldr	r3, [r3, #32]
 8007524:	f023 0201 	bic.w	r2, r3, #1
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800753e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f023 0303 	bic.w	r3, r3, #3
 800754a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	4313      	orrs	r3, r2
 8007554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	f023 0302 	bic.w	r3, r3, #2
 800755c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	4313      	orrs	r3, r2
 8007566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a30      	ldr	r2, [pc, #192]	@ (800762c <TIM_OC1_SetConfig+0x11c>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d013      	beq.n	8007598 <TIM_OC1_SetConfig+0x88>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a2f      	ldr	r2, [pc, #188]	@ (8007630 <TIM_OC1_SetConfig+0x120>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d00f      	beq.n	8007598 <TIM_OC1_SetConfig+0x88>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a2e      	ldr	r2, [pc, #184]	@ (8007634 <TIM_OC1_SetConfig+0x124>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d00b      	beq.n	8007598 <TIM_OC1_SetConfig+0x88>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a2d      	ldr	r2, [pc, #180]	@ (8007638 <TIM_OC1_SetConfig+0x128>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d007      	beq.n	8007598 <TIM_OC1_SetConfig+0x88>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a2c      	ldr	r2, [pc, #176]	@ (800763c <TIM_OC1_SetConfig+0x12c>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d003      	beq.n	8007598 <TIM_OC1_SetConfig+0x88>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a2b      	ldr	r2, [pc, #172]	@ (8007640 <TIM_OC1_SetConfig+0x130>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d10c      	bne.n	80075b2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	f023 0308 	bic.w	r3, r3, #8
 800759e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	697a      	ldr	r2, [r7, #20]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f023 0304 	bic.w	r3, r3, #4
 80075b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a1d      	ldr	r2, [pc, #116]	@ (800762c <TIM_OC1_SetConfig+0x11c>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d013      	beq.n	80075e2 <TIM_OC1_SetConfig+0xd2>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a1c      	ldr	r2, [pc, #112]	@ (8007630 <TIM_OC1_SetConfig+0x120>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d00f      	beq.n	80075e2 <TIM_OC1_SetConfig+0xd2>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a1b      	ldr	r2, [pc, #108]	@ (8007634 <TIM_OC1_SetConfig+0x124>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d00b      	beq.n	80075e2 <TIM_OC1_SetConfig+0xd2>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a1a      	ldr	r2, [pc, #104]	@ (8007638 <TIM_OC1_SetConfig+0x128>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d007      	beq.n	80075e2 <TIM_OC1_SetConfig+0xd2>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a19      	ldr	r2, [pc, #100]	@ (800763c <TIM_OC1_SetConfig+0x12c>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d003      	beq.n	80075e2 <TIM_OC1_SetConfig+0xd2>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a18      	ldr	r2, [pc, #96]	@ (8007640 <TIM_OC1_SetConfig+0x130>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d111      	bne.n	8007606 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80075f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	4313      	orrs	r3, r2
 8007604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	685a      	ldr	r2, [r3, #4]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	697a      	ldr	r2, [r7, #20]
 800761e:	621a      	str	r2, [r3, #32]
}
 8007620:	bf00      	nop
 8007622:	371c      	adds	r7, #28
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	40012c00 	.word	0x40012c00
 8007630:	40013400 	.word	0x40013400
 8007634:	40014000 	.word	0x40014000
 8007638:	40014400 	.word	0x40014400
 800763c:	40014800 	.word	0x40014800
 8007640:	40015000 	.word	0x40015000

08007644 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007644:	b480      	push	{r7}
 8007646:	b087      	sub	sp, #28
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a1b      	ldr	r3, [r3, #32]
 8007658:	f023 0210 	bic.w	r2, r3, #16
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007672:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800767e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	021b      	lsls	r3, r3, #8
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	4313      	orrs	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	f023 0320 	bic.w	r3, r3, #32
 8007692:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	011b      	lsls	r3, r3, #4
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	4313      	orrs	r3, r2
 800769e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a2c      	ldr	r2, [pc, #176]	@ (8007754 <TIM_OC2_SetConfig+0x110>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d007      	beq.n	80076b8 <TIM_OC2_SetConfig+0x74>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a2b      	ldr	r2, [pc, #172]	@ (8007758 <TIM_OC2_SetConfig+0x114>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d003      	beq.n	80076b8 <TIM_OC2_SetConfig+0x74>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a2a      	ldr	r2, [pc, #168]	@ (800775c <TIM_OC2_SetConfig+0x118>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d10d      	bne.n	80076d4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	011b      	lsls	r3, r3, #4
 80076c6:	697a      	ldr	r2, [r7, #20]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a1f      	ldr	r2, [pc, #124]	@ (8007754 <TIM_OC2_SetConfig+0x110>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d013      	beq.n	8007704 <TIM_OC2_SetConfig+0xc0>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a1e      	ldr	r2, [pc, #120]	@ (8007758 <TIM_OC2_SetConfig+0x114>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d00f      	beq.n	8007704 <TIM_OC2_SetConfig+0xc0>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a1e      	ldr	r2, [pc, #120]	@ (8007760 <TIM_OC2_SetConfig+0x11c>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d00b      	beq.n	8007704 <TIM_OC2_SetConfig+0xc0>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a1d      	ldr	r2, [pc, #116]	@ (8007764 <TIM_OC2_SetConfig+0x120>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d007      	beq.n	8007704 <TIM_OC2_SetConfig+0xc0>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a1c      	ldr	r2, [pc, #112]	@ (8007768 <TIM_OC2_SetConfig+0x124>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d003      	beq.n	8007704 <TIM_OC2_SetConfig+0xc0>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a17      	ldr	r2, [pc, #92]	@ (800775c <TIM_OC2_SetConfig+0x118>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d113      	bne.n	800772c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800770a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007712:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	695b      	ldr	r3, [r3, #20]
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	4313      	orrs	r3, r2
 800771e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	699b      	ldr	r3, [r3, #24]
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	693a      	ldr	r2, [r7, #16]
 8007728:	4313      	orrs	r3, r2
 800772a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	693a      	ldr	r2, [r7, #16]
 8007730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	697a      	ldr	r2, [r7, #20]
 8007744:	621a      	str	r2, [r3, #32]
}
 8007746:	bf00      	nop
 8007748:	371c      	adds	r7, #28
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	40012c00 	.word	0x40012c00
 8007758:	40013400 	.word	0x40013400
 800775c:	40015000 	.word	0x40015000
 8007760:	40014000 	.word	0x40014000
 8007764:	40014400 	.word	0x40014400
 8007768:	40014800 	.word	0x40014800

0800776c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800776c:	b480      	push	{r7}
 800776e:	b087      	sub	sp, #28
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a1b      	ldr	r3, [r3, #32]
 8007780:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	69db      	ldr	r3, [r3, #28]
 8007792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800779a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800779e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f023 0303 	bic.w	r3, r3, #3
 80077a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80077b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	021b      	lsls	r3, r3, #8
 80077c0:	697a      	ldr	r2, [r7, #20]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a2b      	ldr	r2, [pc, #172]	@ (8007878 <TIM_OC3_SetConfig+0x10c>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d007      	beq.n	80077de <TIM_OC3_SetConfig+0x72>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a2a      	ldr	r2, [pc, #168]	@ (800787c <TIM_OC3_SetConfig+0x110>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d003      	beq.n	80077de <TIM_OC3_SetConfig+0x72>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a29      	ldr	r2, [pc, #164]	@ (8007880 <TIM_OC3_SetConfig+0x114>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d10d      	bne.n	80077fa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80077e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	021b      	lsls	r3, r3, #8
 80077ec:	697a      	ldr	r2, [r7, #20]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80077f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a1e      	ldr	r2, [pc, #120]	@ (8007878 <TIM_OC3_SetConfig+0x10c>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d013      	beq.n	800782a <TIM_OC3_SetConfig+0xbe>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a1d      	ldr	r2, [pc, #116]	@ (800787c <TIM_OC3_SetConfig+0x110>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d00f      	beq.n	800782a <TIM_OC3_SetConfig+0xbe>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a1d      	ldr	r2, [pc, #116]	@ (8007884 <TIM_OC3_SetConfig+0x118>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d00b      	beq.n	800782a <TIM_OC3_SetConfig+0xbe>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a1c      	ldr	r2, [pc, #112]	@ (8007888 <TIM_OC3_SetConfig+0x11c>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d007      	beq.n	800782a <TIM_OC3_SetConfig+0xbe>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a1b      	ldr	r2, [pc, #108]	@ (800788c <TIM_OC3_SetConfig+0x120>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d003      	beq.n	800782a <TIM_OC3_SetConfig+0xbe>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a16      	ldr	r2, [pc, #88]	@ (8007880 <TIM_OC3_SetConfig+0x114>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d113      	bne.n	8007852 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	011b      	lsls	r3, r3, #4
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	4313      	orrs	r3, r2
 8007844:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	011b      	lsls	r3, r3, #4
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	4313      	orrs	r3, r2
 8007850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	685a      	ldr	r2, [r3, #4]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	697a      	ldr	r2, [r7, #20]
 800786a:	621a      	str	r2, [r3, #32]
}
 800786c:	bf00      	nop
 800786e:	371c      	adds	r7, #28
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr
 8007878:	40012c00 	.word	0x40012c00
 800787c:	40013400 	.word	0x40013400
 8007880:	40015000 	.word	0x40015000
 8007884:	40014000 	.word	0x40014000
 8007888:	40014400 	.word	0x40014400
 800788c:	40014800 	.word	0x40014800

08007890 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007890:	b480      	push	{r7}
 8007892:	b087      	sub	sp, #28
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a1b      	ldr	r3, [r3, #32]
 80078a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	69db      	ldr	r3, [r3, #28]
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80078be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	021b      	lsls	r3, r3, #8
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80078de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	031b      	lsls	r3, r3, #12
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a2c      	ldr	r2, [pc, #176]	@ (80079a0 <TIM_OC4_SetConfig+0x110>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d007      	beq.n	8007904 <TIM_OC4_SetConfig+0x74>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a2b      	ldr	r2, [pc, #172]	@ (80079a4 <TIM_OC4_SetConfig+0x114>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d003      	beq.n	8007904 <TIM_OC4_SetConfig+0x74>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a2a      	ldr	r2, [pc, #168]	@ (80079a8 <TIM_OC4_SetConfig+0x118>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d10d      	bne.n	8007920 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800790a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	031b      	lsls	r3, r3, #12
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	4313      	orrs	r3, r2
 8007916:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800791e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a1f      	ldr	r2, [pc, #124]	@ (80079a0 <TIM_OC4_SetConfig+0x110>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d013      	beq.n	8007950 <TIM_OC4_SetConfig+0xc0>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a1e      	ldr	r2, [pc, #120]	@ (80079a4 <TIM_OC4_SetConfig+0x114>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d00f      	beq.n	8007950 <TIM_OC4_SetConfig+0xc0>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a1e      	ldr	r2, [pc, #120]	@ (80079ac <TIM_OC4_SetConfig+0x11c>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d00b      	beq.n	8007950 <TIM_OC4_SetConfig+0xc0>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a1d      	ldr	r2, [pc, #116]	@ (80079b0 <TIM_OC4_SetConfig+0x120>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d007      	beq.n	8007950 <TIM_OC4_SetConfig+0xc0>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a1c      	ldr	r2, [pc, #112]	@ (80079b4 <TIM_OC4_SetConfig+0x124>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d003      	beq.n	8007950 <TIM_OC4_SetConfig+0xc0>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a17      	ldr	r2, [pc, #92]	@ (80079a8 <TIM_OC4_SetConfig+0x118>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d113      	bne.n	8007978 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007956:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800795e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	019b      	lsls	r3, r3, #6
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	4313      	orrs	r3, r2
 800796a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	019b      	lsls	r3, r3, #6
 8007972:	693a      	ldr	r2, [r7, #16]
 8007974:	4313      	orrs	r3, r2
 8007976:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	693a      	ldr	r2, [r7, #16]
 800797c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	697a      	ldr	r2, [r7, #20]
 8007990:	621a      	str	r2, [r3, #32]
}
 8007992:	bf00      	nop
 8007994:	371c      	adds	r7, #28
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	40012c00 	.word	0x40012c00
 80079a4:	40013400 	.word	0x40013400
 80079a8:	40015000 	.word	0x40015000
 80079ac:	40014000 	.word	0x40014000
 80079b0:	40014400 	.word	0x40014400
 80079b4:	40014800 	.word	0x40014800

080079b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b087      	sub	sp, #28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a1b      	ldr	r3, [r3, #32]
 80079cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80079fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	041b      	lsls	r3, r3, #16
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a19      	ldr	r2, [pc, #100]	@ (8007a74 <TIM_OC5_SetConfig+0xbc>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d013      	beq.n	8007a3a <TIM_OC5_SetConfig+0x82>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a18      	ldr	r2, [pc, #96]	@ (8007a78 <TIM_OC5_SetConfig+0xc0>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d00f      	beq.n	8007a3a <TIM_OC5_SetConfig+0x82>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a17      	ldr	r2, [pc, #92]	@ (8007a7c <TIM_OC5_SetConfig+0xc4>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d00b      	beq.n	8007a3a <TIM_OC5_SetConfig+0x82>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a16      	ldr	r2, [pc, #88]	@ (8007a80 <TIM_OC5_SetConfig+0xc8>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d007      	beq.n	8007a3a <TIM_OC5_SetConfig+0x82>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a15      	ldr	r2, [pc, #84]	@ (8007a84 <TIM_OC5_SetConfig+0xcc>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d003      	beq.n	8007a3a <TIM_OC5_SetConfig+0x82>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a14      	ldr	r2, [pc, #80]	@ (8007a88 <TIM_OC5_SetConfig+0xd0>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d109      	bne.n	8007a4e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a40:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	021b      	lsls	r3, r3, #8
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	685a      	ldr	r2, [r3, #4]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	621a      	str	r2, [r3, #32]
}
 8007a68:	bf00      	nop
 8007a6a:	371c      	adds	r7, #28
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr
 8007a74:	40012c00 	.word	0x40012c00
 8007a78:	40013400 	.word	0x40013400
 8007a7c:	40014000 	.word	0x40014000
 8007a80:	40014400 	.word	0x40014400
 8007a84:	40014800 	.word	0x40014800
 8007a88:	40015000 	.word	0x40015000

08007a8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007aba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	021b      	lsls	r3, r3, #8
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007ad2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	051b      	lsls	r3, r3, #20
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4a1a      	ldr	r2, [pc, #104]	@ (8007b4c <TIM_OC6_SetConfig+0xc0>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d013      	beq.n	8007b10 <TIM_OC6_SetConfig+0x84>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4a19      	ldr	r2, [pc, #100]	@ (8007b50 <TIM_OC6_SetConfig+0xc4>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d00f      	beq.n	8007b10 <TIM_OC6_SetConfig+0x84>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a18      	ldr	r2, [pc, #96]	@ (8007b54 <TIM_OC6_SetConfig+0xc8>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d00b      	beq.n	8007b10 <TIM_OC6_SetConfig+0x84>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a17      	ldr	r2, [pc, #92]	@ (8007b58 <TIM_OC6_SetConfig+0xcc>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d007      	beq.n	8007b10 <TIM_OC6_SetConfig+0x84>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a16      	ldr	r2, [pc, #88]	@ (8007b5c <TIM_OC6_SetConfig+0xd0>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d003      	beq.n	8007b10 <TIM_OC6_SetConfig+0x84>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a15      	ldr	r2, [pc, #84]	@ (8007b60 <TIM_OC6_SetConfig+0xd4>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d109      	bne.n	8007b24 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	695b      	ldr	r3, [r3, #20]
 8007b1c:	029b      	lsls	r3, r3, #10
 8007b1e:	697a      	ldr	r2, [r7, #20]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	697a      	ldr	r2, [r7, #20]
 8007b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	685a      	ldr	r2, [r3, #4]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	621a      	str	r2, [r3, #32]
}
 8007b3e:	bf00      	nop
 8007b40:	371c      	adds	r7, #28
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	40012c00 	.word	0x40012c00
 8007b50:	40013400 	.word	0x40013400
 8007b54:	40014000 	.word	0x40014000
 8007b58:	40014400 	.word	0x40014400
 8007b5c:	40014800 	.word	0x40014800
 8007b60:	40015000 	.word	0x40015000

08007b64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b087      	sub	sp, #28
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6a1b      	ldr	r3, [r3, #32]
 8007b74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	f023 0201 	bic.w	r2, r3, #1
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	011b      	lsls	r3, r3, #4
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	f023 030a 	bic.w	r3, r3, #10
 8007ba0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ba2:	697a      	ldr	r2, [r7, #20]
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	621a      	str	r2, [r3, #32]
}
 8007bb6:	bf00      	nop
 8007bb8:	371c      	adds	r7, #28
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr

08007bc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bc2:	b480      	push	{r7}
 8007bc4:	b087      	sub	sp, #28
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	60f8      	str	r0, [r7, #12]
 8007bca:	60b9      	str	r1, [r7, #8]
 8007bcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6a1b      	ldr	r3, [r3, #32]
 8007bd8:	f023 0210 	bic.w	r2, r3, #16
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007bec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	031b      	lsls	r3, r3, #12
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007bfe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	011b      	lsls	r3, r3, #4
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	697a      	ldr	r2, [r7, #20]
 8007c14:	621a      	str	r2, [r3, #32]
}
 8007c16:	bf00      	nop
 8007c18:	371c      	adds	r7, #28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c22:	b480      	push	{r7}
 8007c24:	b085      	sub	sp, #20
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007c38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c3e:	683a      	ldr	r2, [r7, #0]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	f043 0307 	orr.w	r3, r3, #7
 8007c48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	609a      	str	r2, [r3, #8]
}
 8007c50:	bf00      	nop
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b087      	sub	sp, #28
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	607a      	str	r2, [r7, #4]
 8007c68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	021a      	lsls	r2, r3, #8
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	697a      	ldr	r2, [r7, #20]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	697a      	ldr	r2, [r7, #20]
 8007c8e:	609a      	str	r2, [r3, #8]
}
 8007c90:	bf00      	nop
 8007c92:	371c      	adds	r7, #28
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b087      	sub	sp, #28
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	f003 031f 	and.w	r3, r3, #31
 8007cae:	2201      	movs	r2, #1
 8007cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6a1a      	ldr	r2, [r3, #32]
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	43db      	mvns	r3, r3
 8007cbe:	401a      	ands	r2, r3
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6a1a      	ldr	r2, [r3, #32]
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	f003 031f 	and.w	r3, r3, #31
 8007cce:	6879      	ldr	r1, [r7, #4]
 8007cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8007cd4:	431a      	orrs	r2, r3
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	621a      	str	r2, [r3, #32]
}
 8007cda:	bf00      	nop
 8007cdc:	371c      	adds	r7, #28
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
	...

08007ce8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a26      	ldr	r2, [pc, #152]	@ (8007d8c <TIM_ResetCallback+0xa4>)
 8007cf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a25      	ldr	r2, [pc, #148]	@ (8007d90 <TIM_ResetCallback+0xa8>)
 8007cfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a24      	ldr	r2, [pc, #144]	@ (8007d94 <TIM_ResetCallback+0xac>)
 8007d04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a23      	ldr	r2, [pc, #140]	@ (8007d98 <TIM_ResetCallback+0xb0>)
 8007d0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a22      	ldr	r2, [pc, #136]	@ (8007d9c <TIM_ResetCallback+0xb4>)
 8007d14:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a21      	ldr	r2, [pc, #132]	@ (8007da0 <TIM_ResetCallback+0xb8>)
 8007d1c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a20      	ldr	r2, [pc, #128]	@ (8007da4 <TIM_ResetCallback+0xbc>)
 8007d24:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a1f      	ldr	r2, [pc, #124]	@ (8007da8 <TIM_ResetCallback+0xc0>)
 8007d2c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a1e      	ldr	r2, [pc, #120]	@ (8007dac <TIM_ResetCallback+0xc4>)
 8007d34:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a1d      	ldr	r2, [pc, #116]	@ (8007db0 <TIM_ResetCallback+0xc8>)
 8007d3c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a1c      	ldr	r2, [pc, #112]	@ (8007db4 <TIM_ResetCallback+0xcc>)
 8007d44:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a1b      	ldr	r2, [pc, #108]	@ (8007db8 <TIM_ResetCallback+0xd0>)
 8007d4c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a1a      	ldr	r2, [pc, #104]	@ (8007dbc <TIM_ResetCallback+0xd4>)
 8007d54:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a19      	ldr	r2, [pc, #100]	@ (8007dc0 <TIM_ResetCallback+0xd8>)
 8007d5c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a18      	ldr	r2, [pc, #96]	@ (8007dc4 <TIM_ResetCallback+0xdc>)
 8007d64:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a17      	ldr	r2, [pc, #92]	@ (8007dc8 <TIM_ResetCallback+0xe0>)
 8007d6c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a16      	ldr	r2, [pc, #88]	@ (8007dcc <TIM_ResetCallback+0xe4>)
 8007d74:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a15      	ldr	r2, [pc, #84]	@ (8007dd0 <TIM_ResetCallback+0xe8>)
 8007d7c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr
 8007d8c:	080018f5 	.word	0x080018f5
 8007d90:	080072f5 	.word	0x080072f5
 8007d94:	0800736d 	.word	0x0800736d
 8007d98:	08007381 	.word	0x08007381
 8007d9c:	0800731d 	.word	0x0800731d
 8007da0:	08007331 	.word	0x08007331
 8007da4:	08007309 	.word	0x08007309
 8007da8:	08007345 	.word	0x08007345
 8007dac:	08007359 	.word	0x08007359
 8007db0:	08007395 	.word	0x08007395
 8007db4:	08008029 	.word	0x08008029
 8007db8:	0800803d 	.word	0x0800803d
 8007dbc:	08008051 	.word	0x08008051
 8007dc0:	08008065 	.word	0x08008065
 8007dc4:	08008079 	.word	0x08008079
 8007dc8:	0800808d 	.word	0x0800808d
 8007dcc:	080080a1 	.word	0x080080a1
 8007dd0:	080080b5 	.word	0x080080b5

08007dd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d101      	bne.n	8007dec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007de8:	2302      	movs	r3, #2
 8007dea:	e074      	b.n	8007ed6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2202      	movs	r2, #2
 8007df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a34      	ldr	r2, [pc, #208]	@ (8007ee4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d009      	beq.n	8007e2a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a33      	ldr	r2, [pc, #204]	@ (8007ee8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d004      	beq.n	8007e2a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a31      	ldr	r2, [pc, #196]	@ (8007eec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d108      	bne.n	8007e3c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007e30:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a21      	ldr	r2, [pc, #132]	@ (8007ee4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d022      	beq.n	8007eaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e6c:	d01d      	beq.n	8007eaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a1f      	ldr	r2, [pc, #124]	@ (8007ef0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d018      	beq.n	8007eaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ef4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d013      	beq.n	8007eaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a1c      	ldr	r2, [pc, #112]	@ (8007ef8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d00e      	beq.n	8007eaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a15      	ldr	r2, [pc, #84]	@ (8007ee8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d009      	beq.n	8007eaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a18      	ldr	r2, [pc, #96]	@ (8007efc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d004      	beq.n	8007eaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a11      	ldr	r2, [pc, #68]	@ (8007eec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d10c      	bne.n	8007ec4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007eb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	40012c00 	.word	0x40012c00
 8007ee8:	40013400 	.word	0x40013400
 8007eec:	40015000 	.word	0x40015000
 8007ef0:	40000400 	.word	0x40000400
 8007ef4:	40000800 	.word	0x40000800
 8007ef8:	40000c00 	.word	0x40000c00
 8007efc:	40014000 	.word	0x40014000

08007f00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d101      	bne.n	8007f1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007f18:	2302      	movs	r3, #2
 8007f1a:	e078      	b.n	800800e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	695b      	ldr	r3, [r3, #20]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f82:	4313      	orrs	r3, r2
 8007f84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	041b      	lsls	r3, r3, #16
 8007f92:	4313      	orrs	r3, r2
 8007f94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	69db      	ldr	r3, [r3, #28]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a1c      	ldr	r2, [pc, #112]	@ (800801c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d009      	beq.n	8007fc2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a1b      	ldr	r2, [pc, #108]	@ (8008020 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d004      	beq.n	8007fc2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a19      	ldr	r2, [pc, #100]	@ (8008024 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d11c      	bne.n	8007ffc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fcc:	051b      	lsls	r3, r3, #20
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	6a1b      	ldr	r3, [r3, #32]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fea:	4313      	orrs	r3, r2
 8007fec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3714      	adds	r7, #20
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	40012c00 	.word	0x40012c00
 8008020:	40013400 	.word	0x40013400
 8008024:	40015000 	.word	0x40015000

08008028 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008044:	bf00      	nop
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008094:	bf00      	nop
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80080a8:	bf00      	nop
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80080bc:	bf00      	nop
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d101      	bne.n	80080da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e050      	b.n	800817c <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d114      	bne.n	800810e <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 fbdb 	bl	80088a8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d103      	bne.n	8008104 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a21      	ldr	r2, [pc, #132]	@ (8008184 <HAL_UART_Init+0xbc>)
 8008100:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2224      	movs	r2, #36	@ 0x24
 8008112:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f022 0201 	bic.w	r2, r2, #1
 8008124:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800812a:	2b00      	cmp	r3, #0
 800812c:	d002      	beq.n	8008134 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 ff08 	bl	8008f44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fc09 	bl	800894c <UART_SetConfig>
 800813a:	4603      	mov	r3, r0
 800813c:	2b01      	cmp	r3, #1
 800813e:	d101      	bne.n	8008144 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	e01b      	b.n	800817c <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	685a      	ldr	r2, [r3, #4]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008152:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	689a      	ldr	r2, [r3, #8]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008162:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f042 0201 	orr.w	r2, r2, #1
 8008172:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 ff87 	bl	8009088 <UART_CheckIdleState>
 800817a:	4603      	mov	r3, r0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	0800260d 	.word	0x0800260d

08008188 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b0ba      	sub	sp, #232	@ 0xe8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80081ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80081b2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80081b6:	4013      	ands	r3, r2
 80081b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80081bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d11b      	bne.n	80081fc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80081c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081c8:	f003 0320 	and.w	r3, r3, #32
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d015      	beq.n	80081fc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80081d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081d4:	f003 0320 	and.w	r3, r3, #32
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d105      	bne.n	80081e8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80081dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d009      	beq.n	80081fc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f000 82f3 	beq.w	80087d8 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	4798      	blx	r3
      }
      return;
 80081fa:	e2ed      	b.n	80087d8 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80081fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008200:	2b00      	cmp	r3, #0
 8008202:	f000 8129 	beq.w	8008458 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008206:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800820a:	4b90      	ldr	r3, [pc, #576]	@ (800844c <HAL_UART_IRQHandler+0x2c4>)
 800820c:	4013      	ands	r3, r2
 800820e:	2b00      	cmp	r3, #0
 8008210:	d106      	bne.n	8008220 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008212:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008216:	4b8e      	ldr	r3, [pc, #568]	@ (8008450 <HAL_UART_IRQHandler+0x2c8>)
 8008218:	4013      	ands	r3, r2
 800821a:	2b00      	cmp	r3, #0
 800821c:	f000 811c 	beq.w	8008458 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008224:	f003 0301 	and.w	r3, r3, #1
 8008228:	2b00      	cmp	r3, #0
 800822a:	d011      	beq.n	8008250 <HAL_UART_IRQHandler+0xc8>
 800822c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00b      	beq.n	8008250 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2201      	movs	r2, #1
 800823e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008246:	f043 0201 	orr.w	r2, r3, #1
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008254:	f003 0302 	and.w	r3, r3, #2
 8008258:	2b00      	cmp	r3, #0
 800825a:	d011      	beq.n	8008280 <HAL_UART_IRQHandler+0xf8>
 800825c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008260:	f003 0301 	and.w	r3, r3, #1
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00b      	beq.n	8008280 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2202      	movs	r2, #2
 800826e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008276:	f043 0204 	orr.w	r2, r3, #4
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008284:	f003 0304 	and.w	r3, r3, #4
 8008288:	2b00      	cmp	r3, #0
 800828a:	d011      	beq.n	80082b0 <HAL_UART_IRQHandler+0x128>
 800828c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008290:	f003 0301 	and.w	r3, r3, #1
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00b      	beq.n	80082b0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2204      	movs	r2, #4
 800829e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082a6:	f043 0202 	orr.w	r2, r3, #2
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80082b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082b4:	f003 0308 	and.w	r3, r3, #8
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d017      	beq.n	80082ec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80082bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082c0:	f003 0320 	and.w	r3, r3, #32
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d105      	bne.n	80082d4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80082c8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80082cc:	4b5f      	ldr	r3, [pc, #380]	@ (800844c <HAL_UART_IRQHandler+0x2c4>)
 80082ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00b      	beq.n	80082ec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2208      	movs	r2, #8
 80082da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082e2:	f043 0208 	orr.w	r2, r3, #8
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80082ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d012      	beq.n	800831e <HAL_UART_IRQHandler+0x196>
 80082f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00c      	beq.n	800831e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800830c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008314:	f043 0220 	orr.w	r2, r3, #32
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 8259 	beq.w	80087dc <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800832a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800832e:	f003 0320 	and.w	r3, r3, #32
 8008332:	2b00      	cmp	r3, #0
 8008334:	d013      	beq.n	800835e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800833a:	f003 0320 	and.w	r3, r3, #32
 800833e:	2b00      	cmp	r3, #0
 8008340:	d105      	bne.n	800834e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800834a:	2b00      	cmp	r3, #0
 800834c:	d007      	beq.n	800835e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008352:	2b00      	cmp	r3, #0
 8008354:	d003      	beq.n	800835e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008364:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008372:	2b40      	cmp	r3, #64	@ 0x40
 8008374:	d005      	beq.n	8008382 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008376:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800837a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800837e:	2b00      	cmp	r3, #0
 8008380:	d058      	beq.n	8008434 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 ff97 	bl	80092b6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008392:	2b40      	cmp	r3, #64	@ 0x40
 8008394:	d148      	bne.n	8008428 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3308      	adds	r3, #8
 800839c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80083a4:	e853 3f00 	ldrex	r3, [r3]
 80083a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80083ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3308      	adds	r3, #8
 80083be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80083c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80083c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80083ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80083d2:	e841 2300 	strex	r3, r2, [r1]
 80083d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80083da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1d9      	bne.n	8008396 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d017      	beq.n	800841c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083f2:	4a18      	ldr	r2, [pc, #96]	@ (8008454 <HAL_UART_IRQHandler+0x2cc>)
 80083f4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7fc fbaf 	bl	8004b60 <HAL_DMA_Abort_IT>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d01f      	beq.n	8008448 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800840e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008416:	4610      	mov	r0, r2
 8008418:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800841a:	e015      	b.n	8008448 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008426:	e00f      	b.n	8008448 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008432:	e009      	b.n	8008448 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008446:	e1c9      	b.n	80087dc <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008448:	bf00      	nop
    return;
 800844a:	e1c7      	b.n	80087dc <HAL_UART_IRQHandler+0x654>
 800844c:	10000001 	.word	0x10000001
 8008450:	04000120 	.word	0x04000120
 8008454:	08009383 	.word	0x08009383

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800845c:	2b01      	cmp	r3, #1
 800845e:	f040 8157 	bne.w	8008710 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008466:	f003 0310 	and.w	r3, r3, #16
 800846a:	2b00      	cmp	r3, #0
 800846c:	f000 8150 	beq.w	8008710 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008474:	f003 0310 	and.w	r3, r3, #16
 8008478:	2b00      	cmp	r3, #0
 800847a:	f000 8149 	beq.w	8008710 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2210      	movs	r2, #16
 8008484:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008490:	2b40      	cmp	r3, #64	@ 0x40
 8008492:	f040 80bd 	bne.w	8008610 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80084a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f000 8199 	beq.w	80087e0 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80084b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80084b8:	429a      	cmp	r2, r3
 80084ba:	f080 8191 	bcs.w	80087e0 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80084c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 0320 	and.w	r3, r3, #32
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f040 8087 	bne.w	80085ea <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80084e8:	e853 3f00 	ldrex	r3, [r3]
 80084ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80084f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80084f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	461a      	mov	r2, r3
 8008502:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008506:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800850a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008512:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008516:	e841 2300 	strex	r3, r2, [r1]
 800851a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800851e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1da      	bne.n	80084dc <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	3308      	adds	r3, #8
 800852c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008530:	e853 3f00 	ldrex	r3, [r3]
 8008534:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008536:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008538:	f023 0301 	bic.w	r3, r3, #1
 800853c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	3308      	adds	r3, #8
 8008546:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800854a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800854e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008550:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008552:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008556:	e841 2300 	strex	r3, r2, [r1]
 800855a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800855c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1e1      	bne.n	8008526 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	3308      	adds	r3, #8
 8008568:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800856c:	e853 3f00 	ldrex	r3, [r3]
 8008570:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008572:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008574:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008578:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	3308      	adds	r3, #8
 8008582:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008586:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008588:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800858c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800858e:	e841 2300 	strex	r3, r2, [r1]
 8008592:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008594:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008596:	2b00      	cmp	r3, #0
 8008598:	d1e3      	bne.n	8008562 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2220      	movs	r2, #32
 800859e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085b0:	e853 3f00 	ldrex	r3, [r3]
 80085b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80085b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085b8:	f023 0310 	bic.w	r3, r3, #16
 80085bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	461a      	mov	r2, r3
 80085c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80085cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80085d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80085d2:	e841 2300 	strex	r3, r2, [r1]
 80085d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80085d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d1e4      	bne.n	80085a8 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7fc fa62 	bl	8004aae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2202      	movs	r2, #2
 80085ee:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8008602:	b292      	uxth	r2, r2
 8008604:	1a8a      	subs	r2, r1, r2
 8008606:	b292      	uxth	r2, r2
 8008608:	4611      	mov	r1, r2
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800860e:	e0e7      	b.n	80087e0 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800861c:	b29b      	uxth	r3, r3
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800862a:	b29b      	uxth	r3, r3
 800862c:	2b00      	cmp	r3, #0
 800862e:	f000 80d9 	beq.w	80087e4 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8008632:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008636:	2b00      	cmp	r3, #0
 8008638:	f000 80d4 	beq.w	80087e4 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008644:	e853 3f00 	ldrex	r3, [r3]
 8008648:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800864a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800864c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008650:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	461a      	mov	r2, r3
 800865a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800865e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008660:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008662:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008664:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008666:	e841 2300 	strex	r3, r2, [r1]
 800866a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800866c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1e4      	bne.n	800863c <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	3308      	adds	r3, #8
 8008678:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800867c:	e853 3f00 	ldrex	r3, [r3]
 8008680:	623b      	str	r3, [r7, #32]
   return(result);
 8008682:	6a3b      	ldr	r3, [r7, #32]
 8008684:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008688:	f023 0301 	bic.w	r3, r3, #1
 800868c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	3308      	adds	r3, #8
 8008696:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800869a:	633a      	str	r2, [r7, #48]	@ 0x30
 800869c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086a2:	e841 2300 	strex	r3, r2, [r1]
 80086a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1e1      	bne.n	8008672 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2220      	movs	r2, #32
 80086b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	e853 3f00 	ldrex	r3, [r3]
 80086ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f023 0310 	bic.w	r3, r3, #16
 80086d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	461a      	mov	r2, r3
 80086e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80086e4:	61fb      	str	r3, [r7, #28]
 80086e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e8:	69b9      	ldr	r1, [r7, #24]
 80086ea:	69fa      	ldr	r2, [r7, #28]
 80086ec:	e841 2300 	strex	r3, r2, [r1]
 80086f0:	617b      	str	r3, [r7, #20]
   return(result);
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1e4      	bne.n	80086c2 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2202      	movs	r2, #2
 80086fc:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008704:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8008708:	4611      	mov	r1, r2
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800870e:	e069      	b.n	80087e4 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008714:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008718:	2b00      	cmp	r3, #0
 800871a:	d010      	beq.n	800873e <HAL_UART_IRQHandler+0x5b6>
 800871c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008720:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00a      	beq.n	800873e <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008730:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800873c:	e055      	b.n	80087ea <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800873e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008746:	2b00      	cmp	r3, #0
 8008748:	d014      	beq.n	8008774 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800874a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800874e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008752:	2b00      	cmp	r3, #0
 8008754:	d105      	bne.n	8008762 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800875a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800875e:	2b00      	cmp	r3, #0
 8008760:	d008      	beq.n	8008774 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008766:	2b00      	cmp	r3, #0
 8008768:	d03e      	beq.n	80087e8 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	4798      	blx	r3
    }
    return;
 8008772:	e039      	b.n	80087e8 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800877c:	2b00      	cmp	r3, #0
 800877e:	d009      	beq.n	8008794 <HAL_UART_IRQHandler+0x60c>
 8008780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008788:	2b00      	cmp	r3, #0
 800878a:	d003      	beq.n	8008794 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fe10 	bl	80093b2 <UART_EndTransmit_IT>
    return;
 8008792:	e02a      	b.n	80087ea <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008798:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800879c:	2b00      	cmp	r3, #0
 800879e:	d00b      	beq.n	80087b8 <HAL_UART_IRQHandler+0x630>
 80087a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d005      	beq.n	80087b8 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80087b6:	e018      	b.n	80087ea <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80087b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d012      	beq.n	80087ea <HAL_UART_IRQHandler+0x662>
 80087c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	da0e      	bge.n	80087ea <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80087d6:	e008      	b.n	80087ea <HAL_UART_IRQHandler+0x662>
      return;
 80087d8:	bf00      	nop
 80087da:	e006      	b.n	80087ea <HAL_UART_IRQHandler+0x662>
    return;
 80087dc:	bf00      	nop
 80087de:	e004      	b.n	80087ea <HAL_UART_IRQHandler+0x662>
      return;
 80087e0:	bf00      	nop
 80087e2:	e002      	b.n	80087ea <HAL_UART_IRQHandler+0x662>
      return;
 80087e4:	bf00      	nop
 80087e6:	e000      	b.n	80087ea <HAL_UART_IRQHandler+0x662>
    return;
 80087e8:	bf00      	nop
  }
}
 80087ea:	37e8      	adds	r7, #232	@ 0xe8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80087f8:	bf00      	nop
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800880c:	bf00      	nop
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008834:	bf00      	nop
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	460b      	mov	r3, r1
 800889a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a1a      	ldr	r2, [pc, #104]	@ (800891c <UART_InitCallbacksToDefault+0x74>)
 80088b4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a19      	ldr	r2, [pc, #100]	@ (8008920 <UART_InitCallbacksToDefault+0x78>)
 80088bc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a18      	ldr	r2, [pc, #96]	@ (8008924 <UART_InitCallbacksToDefault+0x7c>)
 80088c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a17      	ldr	r2, [pc, #92]	@ (8008928 <UART_InitCallbacksToDefault+0x80>)
 80088cc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a16      	ldr	r2, [pc, #88]	@ (800892c <UART_InitCallbacksToDefault+0x84>)
 80088d4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a15      	ldr	r2, [pc, #84]	@ (8008930 <UART_InitCallbacksToDefault+0x88>)
 80088dc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a14      	ldr	r2, [pc, #80]	@ (8008934 <UART_InitCallbacksToDefault+0x8c>)
 80088e4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a13      	ldr	r2, [pc, #76]	@ (8008938 <UART_InitCallbacksToDefault+0x90>)
 80088ec:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a12      	ldr	r2, [pc, #72]	@ (800893c <UART_InitCallbacksToDefault+0x94>)
 80088f4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a11      	ldr	r2, [pc, #68]	@ (8008940 <UART_InitCallbacksToDefault+0x98>)
 80088fc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a10      	ldr	r2, [pc, #64]	@ (8008944 <UART_InitCallbacksToDefault+0x9c>)
 8008904:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a0f      	ldr	r2, [pc, #60]	@ (8008948 <UART_InitCallbacksToDefault+0xa0>)
 800890c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr
 800891c:	08008805 	.word	0x08008805
 8008920:	080087f1 	.word	0x080087f1
 8008924:	0800882d 	.word	0x0800882d
 8008928:	08008819 	.word	0x08008819
 800892c:	08008841 	.word	0x08008841
 8008930:	08008855 	.word	0x08008855
 8008934:	08008869 	.word	0x08008869
 8008938:	0800887d 	.word	0x0800887d
 800893c:	0800940d 	.word	0x0800940d
 8008940:	08009421 	.word	0x08009421
 8008944:	08009435 	.word	0x08009435
 8008948:	08008891 	.word	0x08008891

0800894c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800894c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008950:	b08c      	sub	sp, #48	@ 0x30
 8008952:	af00      	add	r7, sp, #0
 8008954:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008956:	2300      	movs	r3, #0
 8008958:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	689a      	ldr	r2, [r3, #8]
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	431a      	orrs	r2, r3
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	431a      	orrs	r2, r3
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	69db      	ldr	r3, [r3, #28]
 8008970:	4313      	orrs	r3, r2
 8008972:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	4baa      	ldr	r3, [pc, #680]	@ (8008c24 <UART_SetConfig+0x2d8>)
 800897c:	4013      	ands	r3, r2
 800897e:	697a      	ldr	r2, [r7, #20]
 8008980:	6812      	ldr	r2, [r2, #0]
 8008982:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008984:	430b      	orrs	r3, r1
 8008986:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	68da      	ldr	r2, [r3, #12]
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	430a      	orrs	r2, r1
 800899c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	699b      	ldr	r3, [r3, #24]
 80089a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a9f      	ldr	r2, [pc, #636]	@ (8008c28 <UART_SetConfig+0x2dc>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d004      	beq.n	80089b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	6a1b      	ldr	r3, [r3, #32]
 80089b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089b4:	4313      	orrs	r3, r2
 80089b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80089c2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	6812      	ldr	r2, [r2, #0]
 80089ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089cc:	430b      	orrs	r3, r1
 80089ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d6:	f023 010f 	bic.w	r1, r3, #15
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	430a      	orrs	r2, r1
 80089e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a90      	ldr	r2, [pc, #576]	@ (8008c2c <UART_SetConfig+0x2e0>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d125      	bne.n	8008a3c <UART_SetConfig+0xf0>
 80089f0:	4b8f      	ldr	r3, [pc, #572]	@ (8008c30 <UART_SetConfig+0x2e4>)
 80089f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089f6:	f003 0303 	and.w	r3, r3, #3
 80089fa:	2b03      	cmp	r3, #3
 80089fc:	d81a      	bhi.n	8008a34 <UART_SetConfig+0xe8>
 80089fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008a04 <UART_SetConfig+0xb8>)
 8008a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a04:	08008a15 	.word	0x08008a15
 8008a08:	08008a25 	.word	0x08008a25
 8008a0c:	08008a1d 	.word	0x08008a1d
 8008a10:	08008a2d 	.word	0x08008a2d
 8008a14:	2301      	movs	r3, #1
 8008a16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a1a:	e116      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a22:	e112      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008a24:	2304      	movs	r3, #4
 8008a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a2a:	e10e      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008a2c:	2308      	movs	r3, #8
 8008a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a32:	e10a      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008a34:	2310      	movs	r3, #16
 8008a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a3a:	e106      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a7c      	ldr	r2, [pc, #496]	@ (8008c34 <UART_SetConfig+0x2e8>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d138      	bne.n	8008ab8 <UART_SetConfig+0x16c>
 8008a46:	4b7a      	ldr	r3, [pc, #488]	@ (8008c30 <UART_SetConfig+0x2e4>)
 8008a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a4c:	f003 030c 	and.w	r3, r3, #12
 8008a50:	2b0c      	cmp	r3, #12
 8008a52:	d82d      	bhi.n	8008ab0 <UART_SetConfig+0x164>
 8008a54:	a201      	add	r2, pc, #4	@ (adr r2, 8008a5c <UART_SetConfig+0x110>)
 8008a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5a:	bf00      	nop
 8008a5c:	08008a91 	.word	0x08008a91
 8008a60:	08008ab1 	.word	0x08008ab1
 8008a64:	08008ab1 	.word	0x08008ab1
 8008a68:	08008ab1 	.word	0x08008ab1
 8008a6c:	08008aa1 	.word	0x08008aa1
 8008a70:	08008ab1 	.word	0x08008ab1
 8008a74:	08008ab1 	.word	0x08008ab1
 8008a78:	08008ab1 	.word	0x08008ab1
 8008a7c:	08008a99 	.word	0x08008a99
 8008a80:	08008ab1 	.word	0x08008ab1
 8008a84:	08008ab1 	.word	0x08008ab1
 8008a88:	08008ab1 	.word	0x08008ab1
 8008a8c:	08008aa9 	.word	0x08008aa9
 8008a90:	2300      	movs	r3, #0
 8008a92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a96:	e0d8      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008a98:	2302      	movs	r3, #2
 8008a9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008a9e:	e0d4      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008aa0:	2304      	movs	r3, #4
 8008aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aa6:	e0d0      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008aa8:	2308      	movs	r3, #8
 8008aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aae:	e0cc      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008ab0:	2310      	movs	r3, #16
 8008ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ab6:	e0c8      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a5e      	ldr	r2, [pc, #376]	@ (8008c38 <UART_SetConfig+0x2ec>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d125      	bne.n	8008b0e <UART_SetConfig+0x1c2>
 8008ac2:	4b5b      	ldr	r3, [pc, #364]	@ (8008c30 <UART_SetConfig+0x2e4>)
 8008ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ac8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008acc:	2b30      	cmp	r3, #48	@ 0x30
 8008ace:	d016      	beq.n	8008afe <UART_SetConfig+0x1b2>
 8008ad0:	2b30      	cmp	r3, #48	@ 0x30
 8008ad2:	d818      	bhi.n	8008b06 <UART_SetConfig+0x1ba>
 8008ad4:	2b20      	cmp	r3, #32
 8008ad6:	d00a      	beq.n	8008aee <UART_SetConfig+0x1a2>
 8008ad8:	2b20      	cmp	r3, #32
 8008ada:	d814      	bhi.n	8008b06 <UART_SetConfig+0x1ba>
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d002      	beq.n	8008ae6 <UART_SetConfig+0x19a>
 8008ae0:	2b10      	cmp	r3, #16
 8008ae2:	d008      	beq.n	8008af6 <UART_SetConfig+0x1aa>
 8008ae4:	e00f      	b.n	8008b06 <UART_SetConfig+0x1ba>
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008aec:	e0ad      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008aee:	2302      	movs	r3, #2
 8008af0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008af4:	e0a9      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008af6:	2304      	movs	r3, #4
 8008af8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008afc:	e0a5      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008afe:	2308      	movs	r3, #8
 8008b00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b04:	e0a1      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008b06:	2310      	movs	r3, #16
 8008b08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b0c:	e09d      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a4a      	ldr	r2, [pc, #296]	@ (8008c3c <UART_SetConfig+0x2f0>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d125      	bne.n	8008b64 <UART_SetConfig+0x218>
 8008b18:	4b45      	ldr	r3, [pc, #276]	@ (8008c30 <UART_SetConfig+0x2e4>)
 8008b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b1e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008b22:	2bc0      	cmp	r3, #192	@ 0xc0
 8008b24:	d016      	beq.n	8008b54 <UART_SetConfig+0x208>
 8008b26:	2bc0      	cmp	r3, #192	@ 0xc0
 8008b28:	d818      	bhi.n	8008b5c <UART_SetConfig+0x210>
 8008b2a:	2b80      	cmp	r3, #128	@ 0x80
 8008b2c:	d00a      	beq.n	8008b44 <UART_SetConfig+0x1f8>
 8008b2e:	2b80      	cmp	r3, #128	@ 0x80
 8008b30:	d814      	bhi.n	8008b5c <UART_SetConfig+0x210>
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d002      	beq.n	8008b3c <UART_SetConfig+0x1f0>
 8008b36:	2b40      	cmp	r3, #64	@ 0x40
 8008b38:	d008      	beq.n	8008b4c <UART_SetConfig+0x200>
 8008b3a:	e00f      	b.n	8008b5c <UART_SetConfig+0x210>
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b42:	e082      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008b44:	2302      	movs	r3, #2
 8008b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b4a:	e07e      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008b4c:	2304      	movs	r3, #4
 8008b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b52:	e07a      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008b54:	2308      	movs	r3, #8
 8008b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b5a:	e076      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008b5c:	2310      	movs	r3, #16
 8008b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b62:	e072      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a35      	ldr	r2, [pc, #212]	@ (8008c40 <UART_SetConfig+0x2f4>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d12a      	bne.n	8008bc4 <UART_SetConfig+0x278>
 8008b6e:	4b30      	ldr	r3, [pc, #192]	@ (8008c30 <UART_SetConfig+0x2e4>)
 8008b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b7c:	d01a      	beq.n	8008bb4 <UART_SetConfig+0x268>
 8008b7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b82:	d81b      	bhi.n	8008bbc <UART_SetConfig+0x270>
 8008b84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b88:	d00c      	beq.n	8008ba4 <UART_SetConfig+0x258>
 8008b8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b8e:	d815      	bhi.n	8008bbc <UART_SetConfig+0x270>
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d003      	beq.n	8008b9c <UART_SetConfig+0x250>
 8008b94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b98:	d008      	beq.n	8008bac <UART_SetConfig+0x260>
 8008b9a:	e00f      	b.n	8008bbc <UART_SetConfig+0x270>
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ba2:	e052      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008ba4:	2302      	movs	r3, #2
 8008ba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008baa:	e04e      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008bac:	2304      	movs	r3, #4
 8008bae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bb2:	e04a      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008bb4:	2308      	movs	r3, #8
 8008bb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bba:	e046      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008bbc:	2310      	movs	r3, #16
 8008bbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bc2:	e042      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a17      	ldr	r2, [pc, #92]	@ (8008c28 <UART_SetConfig+0x2dc>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d13a      	bne.n	8008c44 <UART_SetConfig+0x2f8>
 8008bce:	4b18      	ldr	r3, [pc, #96]	@ (8008c30 <UART_SetConfig+0x2e4>)
 8008bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bd4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008bd8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008bdc:	d01a      	beq.n	8008c14 <UART_SetConfig+0x2c8>
 8008bde:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008be2:	d81b      	bhi.n	8008c1c <UART_SetConfig+0x2d0>
 8008be4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008be8:	d00c      	beq.n	8008c04 <UART_SetConfig+0x2b8>
 8008bea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bee:	d815      	bhi.n	8008c1c <UART_SetConfig+0x2d0>
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d003      	beq.n	8008bfc <UART_SetConfig+0x2b0>
 8008bf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bf8:	d008      	beq.n	8008c0c <UART_SetConfig+0x2c0>
 8008bfa:	e00f      	b.n	8008c1c <UART_SetConfig+0x2d0>
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c02:	e022      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008c04:	2302      	movs	r3, #2
 8008c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c0a:	e01e      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008c0c:	2304      	movs	r3, #4
 8008c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c12:	e01a      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008c14:	2308      	movs	r3, #8
 8008c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c1a:	e016      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008c1c:	2310      	movs	r3, #16
 8008c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c22:	e012      	b.n	8008c4a <UART_SetConfig+0x2fe>
 8008c24:	cfff69f3 	.word	0xcfff69f3
 8008c28:	40008000 	.word	0x40008000
 8008c2c:	40013800 	.word	0x40013800
 8008c30:	40021000 	.word	0x40021000
 8008c34:	40004400 	.word	0x40004400
 8008c38:	40004800 	.word	0x40004800
 8008c3c:	40004c00 	.word	0x40004c00
 8008c40:	40005000 	.word	0x40005000
 8008c44:	2310      	movs	r3, #16
 8008c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4aae      	ldr	r2, [pc, #696]	@ (8008f08 <UART_SetConfig+0x5bc>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	f040 8097 	bne.w	8008d84 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c56:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008c5a:	2b08      	cmp	r3, #8
 8008c5c:	d823      	bhi.n	8008ca6 <UART_SetConfig+0x35a>
 8008c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c64 <UART_SetConfig+0x318>)
 8008c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c64:	08008c89 	.word	0x08008c89
 8008c68:	08008ca7 	.word	0x08008ca7
 8008c6c:	08008c91 	.word	0x08008c91
 8008c70:	08008ca7 	.word	0x08008ca7
 8008c74:	08008c97 	.word	0x08008c97
 8008c78:	08008ca7 	.word	0x08008ca7
 8008c7c:	08008ca7 	.word	0x08008ca7
 8008c80:	08008ca7 	.word	0x08008ca7
 8008c84:	08008c9f 	.word	0x08008c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c88:	f7fd f85a 	bl	8005d40 <HAL_RCC_GetPCLK1Freq>
 8008c8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c8e:	e010      	b.n	8008cb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c90:	4b9e      	ldr	r3, [pc, #632]	@ (8008f0c <UART_SetConfig+0x5c0>)
 8008c92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c94:	e00d      	b.n	8008cb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c96:	f7fc ffe5 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 8008c9a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c9c:	e009      	b.n	8008cb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ca2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ca4:	e005      	b.n	8008cb2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008cb0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f000 8130 	beq.w	8008f1a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cbe:	4a94      	ldr	r2, [pc, #592]	@ (8008f10 <UART_SetConfig+0x5c4>)
 8008cc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ccc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	685a      	ldr	r2, [r3, #4]
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	005b      	lsls	r3, r3, #1
 8008cd6:	4413      	add	r3, r2
 8008cd8:	69ba      	ldr	r2, [r7, #24]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d305      	bcc.n	8008cea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ce4:	69ba      	ldr	r2, [r7, #24]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d903      	bls.n	8008cf2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008cf0:	e113      	b.n	8008f1a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	60bb      	str	r3, [r7, #8]
 8008cf8:	60fa      	str	r2, [r7, #12]
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cfe:	4a84      	ldr	r2, [pc, #528]	@ (8008f10 <UART_SetConfig+0x5c4>)
 8008d00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	2200      	movs	r2, #0
 8008d08:	603b      	str	r3, [r7, #0]
 8008d0a:	607a      	str	r2, [r7, #4]
 8008d0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d14:	f7f7 ff6e 	bl	8000bf4 <__aeabi_uldivmod>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	4619      	mov	r1, r3
 8008d20:	f04f 0200 	mov.w	r2, #0
 8008d24:	f04f 0300 	mov.w	r3, #0
 8008d28:	020b      	lsls	r3, r1, #8
 8008d2a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d2e:	0202      	lsls	r2, r0, #8
 8008d30:	6979      	ldr	r1, [r7, #20]
 8008d32:	6849      	ldr	r1, [r1, #4]
 8008d34:	0849      	lsrs	r1, r1, #1
 8008d36:	2000      	movs	r0, #0
 8008d38:	460c      	mov	r4, r1
 8008d3a:	4605      	mov	r5, r0
 8008d3c:	eb12 0804 	adds.w	r8, r2, r4
 8008d40:	eb43 0905 	adc.w	r9, r3, r5
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	469a      	mov	sl, r3
 8008d4c:	4693      	mov	fp, r2
 8008d4e:	4652      	mov	r2, sl
 8008d50:	465b      	mov	r3, fp
 8008d52:	4640      	mov	r0, r8
 8008d54:	4649      	mov	r1, r9
 8008d56:	f7f7 ff4d 	bl	8000bf4 <__aeabi_uldivmod>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	4613      	mov	r3, r2
 8008d60:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d62:	6a3b      	ldr	r3, [r7, #32]
 8008d64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d68:	d308      	bcc.n	8008d7c <UART_SetConfig+0x430>
 8008d6a:	6a3b      	ldr	r3, [r7, #32]
 8008d6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d70:	d204      	bcs.n	8008d7c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	6a3a      	ldr	r2, [r7, #32]
 8008d78:	60da      	str	r2, [r3, #12]
 8008d7a:	e0ce      	b.n	8008f1a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008d82:	e0ca      	b.n	8008f1a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	69db      	ldr	r3, [r3, #28]
 8008d88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d8c:	d166      	bne.n	8008e5c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008d8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008d92:	2b08      	cmp	r3, #8
 8008d94:	d827      	bhi.n	8008de6 <UART_SetConfig+0x49a>
 8008d96:	a201      	add	r2, pc, #4	@ (adr r2, 8008d9c <UART_SetConfig+0x450>)
 8008d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d9c:	08008dc1 	.word	0x08008dc1
 8008da0:	08008dc9 	.word	0x08008dc9
 8008da4:	08008dd1 	.word	0x08008dd1
 8008da8:	08008de7 	.word	0x08008de7
 8008dac:	08008dd7 	.word	0x08008dd7
 8008db0:	08008de7 	.word	0x08008de7
 8008db4:	08008de7 	.word	0x08008de7
 8008db8:	08008de7 	.word	0x08008de7
 8008dbc:	08008ddf 	.word	0x08008ddf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dc0:	f7fc ffbe 	bl	8005d40 <HAL_RCC_GetPCLK1Freq>
 8008dc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008dc6:	e014      	b.n	8008df2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008dc8:	f7fc ffd0 	bl	8005d6c <HAL_RCC_GetPCLK2Freq>
 8008dcc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008dce:	e010      	b.n	8008df2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008dd0:	4b4e      	ldr	r3, [pc, #312]	@ (8008f0c <UART_SetConfig+0x5c0>)
 8008dd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008dd4:	e00d      	b.n	8008df2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008dd6:	f7fc ff45 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 8008dda:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ddc:	e009      	b.n	8008df2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008de2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008de4:	e005      	b.n	8008df2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008de6:	2300      	movs	r3, #0
 8008de8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008df0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f000 8090 	beq.w	8008f1a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dfe:	4a44      	ldr	r2, [pc, #272]	@ (8008f10 <UART_SetConfig+0x5c4>)
 8008e00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e04:	461a      	mov	r2, r3
 8008e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e08:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e0c:	005a      	lsls	r2, r3, #1
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	085b      	lsrs	r3, r3, #1
 8008e14:	441a      	add	r2, r3
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e20:	6a3b      	ldr	r3, [r7, #32]
 8008e22:	2b0f      	cmp	r3, #15
 8008e24:	d916      	bls.n	8008e54 <UART_SetConfig+0x508>
 8008e26:	6a3b      	ldr	r3, [r7, #32]
 8008e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e2c:	d212      	bcs.n	8008e54 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e2e:	6a3b      	ldr	r3, [r7, #32]
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	f023 030f 	bic.w	r3, r3, #15
 8008e36:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e38:	6a3b      	ldr	r3, [r7, #32]
 8008e3a:	085b      	lsrs	r3, r3, #1
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	f003 0307 	and.w	r3, r3, #7
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	8bfb      	ldrh	r3, [r7, #30]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	8bfa      	ldrh	r2, [r7, #30]
 8008e50:	60da      	str	r2, [r3, #12]
 8008e52:	e062      	b.n	8008f1a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008e5a:	e05e      	b.n	8008f1a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e5c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008e60:	2b08      	cmp	r3, #8
 8008e62:	d828      	bhi.n	8008eb6 <UART_SetConfig+0x56a>
 8008e64:	a201      	add	r2, pc, #4	@ (adr r2, 8008e6c <UART_SetConfig+0x520>)
 8008e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e6a:	bf00      	nop
 8008e6c:	08008e91 	.word	0x08008e91
 8008e70:	08008e99 	.word	0x08008e99
 8008e74:	08008ea1 	.word	0x08008ea1
 8008e78:	08008eb7 	.word	0x08008eb7
 8008e7c:	08008ea7 	.word	0x08008ea7
 8008e80:	08008eb7 	.word	0x08008eb7
 8008e84:	08008eb7 	.word	0x08008eb7
 8008e88:	08008eb7 	.word	0x08008eb7
 8008e8c:	08008eaf 	.word	0x08008eaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e90:	f7fc ff56 	bl	8005d40 <HAL_RCC_GetPCLK1Freq>
 8008e94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e96:	e014      	b.n	8008ec2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e98:	f7fc ff68 	bl	8005d6c <HAL_RCC_GetPCLK2Freq>
 8008e9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e9e:	e010      	b.n	8008ec2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8008f0c <UART_SetConfig+0x5c0>)
 8008ea2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ea4:	e00d      	b.n	8008ec2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ea6:	f7fc fedd 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 8008eaa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008eac:	e009      	b.n	8008ec2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008eae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008eb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008eb4:	e005      	b.n	8008ec2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008ec0:	bf00      	nop
    }

    if (pclk != 0U)
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d028      	beq.n	8008f1a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ecc:	4a10      	ldr	r2, [pc, #64]	@ (8008f10 <UART_SetConfig+0x5c4>)
 8008ece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed6:	fbb3 f2f2 	udiv	r2, r3, r2
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	085b      	lsrs	r3, r3, #1
 8008ee0:	441a      	add	r2, r3
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008eec:	6a3b      	ldr	r3, [r7, #32]
 8008eee:	2b0f      	cmp	r3, #15
 8008ef0:	d910      	bls.n	8008f14 <UART_SetConfig+0x5c8>
 8008ef2:	6a3b      	ldr	r3, [r7, #32]
 8008ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ef8:	d20c      	bcs.n	8008f14 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008efa:	6a3b      	ldr	r3, [r7, #32]
 8008efc:	b29a      	uxth	r2, r3
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	60da      	str	r2, [r3, #12]
 8008f04:	e009      	b.n	8008f1a <UART_SetConfig+0x5ce>
 8008f06:	bf00      	nop
 8008f08:	40008000 	.word	0x40008000
 8008f0c:	00f42400 	.word	0x00f42400
 8008f10:	080096d8 	.word	0x080096d8
      }
      else
      {
        ret = HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	2201      	movs	r2, #1
 8008f26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	2200      	movs	r2, #0
 8008f34:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008f36:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3730      	adds	r7, #48	@ 0x30
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008f44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f50:	f003 0308 	and.w	r3, r3, #8
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00a      	beq.n	8008f6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	430a      	orrs	r2, r1
 8008f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f72:	f003 0301 	and.w	r3, r3, #1
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00a      	beq.n	8008f90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	430a      	orrs	r2, r1
 8008f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f94:	f003 0302 	and.w	r3, r3, #2
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00a      	beq.n	8008fb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	430a      	orrs	r2, r1
 8008fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fb6:	f003 0304 	and.w	r3, r3, #4
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00a      	beq.n	8008fd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	430a      	orrs	r2, r1
 8008fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fd8:	f003 0310 	and.w	r3, r3, #16
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00a      	beq.n	8008ff6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	430a      	orrs	r2, r1
 8008ff4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ffa:	f003 0320 	and.w	r3, r3, #32
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00a      	beq.n	8009018 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	430a      	orrs	r2, r1
 8009016:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800901c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009020:	2b00      	cmp	r3, #0
 8009022:	d01a      	beq.n	800905a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	430a      	orrs	r2, r1
 8009038:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800903e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009042:	d10a      	bne.n	800905a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	430a      	orrs	r2, r1
 8009058:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800905e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009062:	2b00      	cmp	r3, #0
 8009064:	d00a      	beq.n	800907c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	430a      	orrs	r2, r1
 800907a:	605a      	str	r2, [r3, #4]
  }
}
 800907c:	bf00      	nop
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b098      	sub	sp, #96	@ 0x60
 800908c:	af02      	add	r7, sp, #8
 800908e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009098:	f7f9 fca8 	bl	80029ec <HAL_GetTick>
 800909c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 0308 	and.w	r3, r3, #8
 80090a8:	2b08      	cmp	r3, #8
 80090aa:	d12f      	bne.n	800910c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090b4:	2200      	movs	r2, #0
 80090b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 f88e 	bl	80091dc <UART_WaitOnFlagUntilTimeout>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d022      	beq.n	800910c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ce:	e853 3f00 	ldrex	r3, [r3]
 80090d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80090d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090da:	653b      	str	r3, [r7, #80]	@ 0x50
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	461a      	mov	r2, r3
 80090e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80090e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80090ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090ec:	e841 2300 	strex	r3, r2, [r1]
 80090f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80090f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1e6      	bne.n	80090c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2220      	movs	r2, #32
 80090fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009108:	2303      	movs	r3, #3
 800910a:	e063      	b.n	80091d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f003 0304 	and.w	r3, r3, #4
 8009116:	2b04      	cmp	r3, #4
 8009118:	d149      	bne.n	80091ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800911a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009122:	2200      	movs	r2, #0
 8009124:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 f857 	bl	80091dc <UART_WaitOnFlagUntilTimeout>
 800912e:	4603      	mov	r3, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d03c      	beq.n	80091ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800913c:	e853 3f00 	ldrex	r3, [r3]
 8009140:	623b      	str	r3, [r7, #32]
   return(result);
 8009142:	6a3b      	ldr	r3, [r7, #32]
 8009144:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009148:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	461a      	mov	r2, r3
 8009150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009152:	633b      	str	r3, [r7, #48]	@ 0x30
 8009154:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009156:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009158:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800915a:	e841 2300 	strex	r3, r2, [r1]
 800915e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1e6      	bne.n	8009134 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	3308      	adds	r3, #8
 800916c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	e853 3f00 	ldrex	r3, [r3]
 8009174:	60fb      	str	r3, [r7, #12]
   return(result);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f023 0301 	bic.w	r3, r3, #1
 800917c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	3308      	adds	r3, #8
 8009184:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009186:	61fa      	str	r2, [r7, #28]
 8009188:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918a:	69b9      	ldr	r1, [r7, #24]
 800918c:	69fa      	ldr	r2, [r7, #28]
 800918e:	e841 2300 	strex	r3, r2, [r1]
 8009192:	617b      	str	r3, [r7, #20]
   return(result);
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d1e5      	bne.n	8009166 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2220      	movs	r2, #32
 800919e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091aa:	2303      	movs	r3, #3
 80091ac:	e012      	b.n	80091d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2220      	movs	r2, #32
 80091b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2220      	movs	r2, #32
 80091ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3758      	adds	r7, #88	@ 0x58
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	603b      	str	r3, [r7, #0]
 80091e8:	4613      	mov	r3, r2
 80091ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091ec:	e04f      	b.n	800928e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f4:	d04b      	beq.n	800928e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091f6:	f7f9 fbf9 	bl	80029ec <HAL_GetTick>
 80091fa:	4602      	mov	r2, r0
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	1ad3      	subs	r3, r2, r3
 8009200:	69ba      	ldr	r2, [r7, #24]
 8009202:	429a      	cmp	r2, r3
 8009204:	d302      	bcc.n	800920c <UART_WaitOnFlagUntilTimeout+0x30>
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d101      	bne.n	8009210 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800920c:	2303      	movs	r3, #3
 800920e:	e04e      	b.n	80092ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f003 0304 	and.w	r3, r3, #4
 800921a:	2b00      	cmp	r3, #0
 800921c:	d037      	beq.n	800928e <UART_WaitOnFlagUntilTimeout+0xb2>
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	2b80      	cmp	r3, #128	@ 0x80
 8009222:	d034      	beq.n	800928e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	2b40      	cmp	r3, #64	@ 0x40
 8009228:	d031      	beq.n	800928e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	69db      	ldr	r3, [r3, #28]
 8009230:	f003 0308 	and.w	r3, r3, #8
 8009234:	2b08      	cmp	r3, #8
 8009236:	d110      	bne.n	800925a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2208      	movs	r2, #8
 800923e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009240:	68f8      	ldr	r0, [r7, #12]
 8009242:	f000 f838 	bl	80092b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2208      	movs	r2, #8
 800924a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2200      	movs	r2, #0
 8009252:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	e029      	b.n	80092ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	69db      	ldr	r3, [r3, #28]
 8009260:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009264:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009268:	d111      	bne.n	800928e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009272:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f000 f81e 	bl	80092b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2220      	movs	r2, #32
 800927e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800928a:	2303      	movs	r3, #3
 800928c:	e00f      	b.n	80092ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	69da      	ldr	r2, [r3, #28]
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	4013      	ands	r3, r2
 8009298:	68ba      	ldr	r2, [r7, #8]
 800929a:	429a      	cmp	r2, r3
 800929c:	bf0c      	ite	eq
 800929e:	2301      	moveq	r3, #1
 80092a0:	2300      	movne	r3, #0
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	461a      	mov	r2, r3
 80092a6:	79fb      	ldrb	r3, [r7, #7]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d0a0      	beq.n	80091ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092b6:	b480      	push	{r7}
 80092b8:	b095      	sub	sp, #84	@ 0x54
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092c6:	e853 3f00 	ldrex	r3, [r3]
 80092ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80092cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80092d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	461a      	mov	r2, r3
 80092da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80092de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80092e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80092e4:	e841 2300 	strex	r3, r2, [r1]
 80092e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80092ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d1e6      	bne.n	80092be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	3308      	adds	r3, #8
 80092f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f8:	6a3b      	ldr	r3, [r7, #32]
 80092fa:	e853 3f00 	ldrex	r3, [r3]
 80092fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009306:	f023 0301 	bic.w	r3, r3, #1
 800930a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	3308      	adds	r3, #8
 8009312:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009314:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009316:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009318:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800931a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800931c:	e841 2300 	strex	r3, r2, [r1]
 8009320:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009324:	2b00      	cmp	r3, #0
 8009326:	d1e3      	bne.n	80092f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800932c:	2b01      	cmp	r3, #1
 800932e:	d118      	bne.n	8009362 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	e853 3f00 	ldrex	r3, [r3]
 800933c:	60bb      	str	r3, [r7, #8]
   return(result);
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	f023 0310 	bic.w	r3, r3, #16
 8009344:	647b      	str	r3, [r7, #68]	@ 0x44
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	461a      	mov	r2, r3
 800934c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800934e:	61bb      	str	r3, [r7, #24]
 8009350:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009352:	6979      	ldr	r1, [r7, #20]
 8009354:	69ba      	ldr	r2, [r7, #24]
 8009356:	e841 2300 	strex	r3, r2, [r1]
 800935a:	613b      	str	r3, [r7, #16]
   return(result);
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1e6      	bne.n	8009330 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2220      	movs	r2, #32
 8009366:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009376:	bf00      	nop
 8009378:	3754      	adds	r7, #84	@ 0x54
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr

08009382 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b084      	sub	sp, #16
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800938e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093aa:	bf00      	nop
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b088      	sub	sp, #32
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	e853 3f00 	ldrex	r3, [r3]
 80093c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093ce:	61fb      	str	r3, [r7, #28]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	461a      	mov	r2, r3
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	61bb      	str	r3, [r7, #24]
 80093da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093dc:	6979      	ldr	r1, [r7, #20]
 80093de:	69ba      	ldr	r2, [r7, #24]
 80093e0:	e841 2300 	strex	r3, r2, [r1]
 80093e4:	613b      	str	r3, [r7, #16]
   return(result);
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d1e6      	bne.n	80093ba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2220      	movs	r2, #32
 80093f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009404:	bf00      	nop
 8009406:	3720      	adds	r7, #32
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009414:	bf00      	nop
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800943c:	bf00      	nop
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009456:	2b01      	cmp	r3, #1
 8009458:	d101      	bne.n	800945e <HAL_UARTEx_DisableFifoMode+0x16>
 800945a:	2302      	movs	r3, #2
 800945c:	e027      	b.n	80094ae <HAL_UARTEx_DisableFifoMode+0x66>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2201      	movs	r2, #1
 8009462:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2224      	movs	r2, #36	@ 0x24
 800946a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f022 0201 	bic.w	r2, r2, #1
 8009484:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800948c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2220      	movs	r2, #32
 80094a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3714      	adds	r7, #20
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr

080094ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b084      	sub	sp, #16
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
 80094c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d101      	bne.n	80094d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80094ce:	2302      	movs	r3, #2
 80094d0:	e02d      	b.n	800952e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2201      	movs	r2, #1
 80094d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2224      	movs	r2, #36	@ 0x24
 80094de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f022 0201 	bic.w	r2, r2, #1
 80094f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	683a      	ldr	r2, [r7, #0]
 800950a:	430a      	orrs	r2, r1
 800950c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f850 	bl	80095b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2220      	movs	r2, #32
 8009520:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b084      	sub	sp, #16
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
 800953e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009546:	2b01      	cmp	r3, #1
 8009548:	d101      	bne.n	800954e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800954a:	2302      	movs	r3, #2
 800954c:	e02d      	b.n	80095aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2201      	movs	r2, #1
 8009552:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2224      	movs	r2, #36	@ 0x24
 800955a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f022 0201 	bic.w	r2, r2, #1
 8009574:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	683a      	ldr	r2, [r7, #0]
 8009586:	430a      	orrs	r2, r1
 8009588:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 f812 	bl	80095b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	68fa      	ldr	r2, [r7, #12]
 8009596:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2220      	movs	r2, #32
 800959c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
	...

080095b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d108      	bne.n	80095d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2201      	movs	r2, #1
 80095d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80095d4:	e031      	b.n	800963a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80095d6:	2308      	movs	r3, #8
 80095d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80095da:	2308      	movs	r3, #8
 80095dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	0e5b      	lsrs	r3, r3, #25
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	f003 0307 	and.w	r3, r3, #7
 80095ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	0f5b      	lsrs	r3, r3, #29
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	f003 0307 	and.w	r3, r3, #7
 80095fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095fe:	7bbb      	ldrb	r3, [r7, #14]
 8009600:	7b3a      	ldrb	r2, [r7, #12]
 8009602:	4911      	ldr	r1, [pc, #68]	@ (8009648 <UARTEx_SetNbDataToProcess+0x94>)
 8009604:	5c8a      	ldrb	r2, [r1, r2]
 8009606:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800960a:	7b3a      	ldrb	r2, [r7, #12]
 800960c:	490f      	ldr	r1, [pc, #60]	@ (800964c <UARTEx_SetNbDataToProcess+0x98>)
 800960e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009610:	fb93 f3f2 	sdiv	r3, r3, r2
 8009614:	b29a      	uxth	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800961c:	7bfb      	ldrb	r3, [r7, #15]
 800961e:	7b7a      	ldrb	r2, [r7, #13]
 8009620:	4909      	ldr	r1, [pc, #36]	@ (8009648 <UARTEx_SetNbDataToProcess+0x94>)
 8009622:	5c8a      	ldrb	r2, [r1, r2]
 8009624:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009628:	7b7a      	ldrb	r2, [r7, #13]
 800962a:	4908      	ldr	r1, [pc, #32]	@ (800964c <UARTEx_SetNbDataToProcess+0x98>)
 800962c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800962e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009632:	b29a      	uxth	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800963a:	bf00      	nop
 800963c:	3714      	adds	r7, #20
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	080096f0 	.word	0x080096f0
 800964c:	080096f8 	.word	0x080096f8

08009650 <memset>:
 8009650:	4402      	add	r2, r0
 8009652:	4603      	mov	r3, r0
 8009654:	4293      	cmp	r3, r2
 8009656:	d100      	bne.n	800965a <memset+0xa>
 8009658:	4770      	bx	lr
 800965a:	f803 1b01 	strb.w	r1, [r3], #1
 800965e:	e7f9      	b.n	8009654 <memset+0x4>

08009660 <__libc_init_array>:
 8009660:	b570      	push	{r4, r5, r6, lr}
 8009662:	4d0d      	ldr	r5, [pc, #52]	@ (8009698 <__libc_init_array+0x38>)
 8009664:	4c0d      	ldr	r4, [pc, #52]	@ (800969c <__libc_init_array+0x3c>)
 8009666:	1b64      	subs	r4, r4, r5
 8009668:	10a4      	asrs	r4, r4, #2
 800966a:	2600      	movs	r6, #0
 800966c:	42a6      	cmp	r6, r4
 800966e:	d109      	bne.n	8009684 <__libc_init_array+0x24>
 8009670:	4d0b      	ldr	r5, [pc, #44]	@ (80096a0 <__libc_init_array+0x40>)
 8009672:	4c0c      	ldr	r4, [pc, #48]	@ (80096a4 <__libc_init_array+0x44>)
 8009674:	f000 f818 	bl	80096a8 <_init>
 8009678:	1b64      	subs	r4, r4, r5
 800967a:	10a4      	asrs	r4, r4, #2
 800967c:	2600      	movs	r6, #0
 800967e:	42a6      	cmp	r6, r4
 8009680:	d105      	bne.n	800968e <__libc_init_array+0x2e>
 8009682:	bd70      	pop	{r4, r5, r6, pc}
 8009684:	f855 3b04 	ldr.w	r3, [r5], #4
 8009688:	4798      	blx	r3
 800968a:	3601      	adds	r6, #1
 800968c:	e7ee      	b.n	800966c <__libc_init_array+0xc>
 800968e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009692:	4798      	blx	r3
 8009694:	3601      	adds	r6, #1
 8009696:	e7f2      	b.n	800967e <__libc_init_array+0x1e>
 8009698:	08009708 	.word	0x08009708
 800969c:	08009708 	.word	0x08009708
 80096a0:	08009708 	.word	0x08009708
 80096a4:	0800970c 	.word	0x0800970c

080096a8 <_init>:
 80096a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096aa:	bf00      	nop
 80096ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ae:	bc08      	pop	{r3}
 80096b0:	469e      	mov	lr, r3
 80096b2:	4770      	bx	lr

080096b4 <_fini>:
 80096b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b6:	bf00      	nop
 80096b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ba:	bc08      	pop	{r3}
 80096bc:	469e      	mov	lr, r3
 80096be:	4770      	bx	lr

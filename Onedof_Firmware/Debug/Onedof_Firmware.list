
Onedof_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc88  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800de60  0800de60  0000ee60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dfb8  0800dfb8  0000f0f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800dfb8  0800dfb8  0000efb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dfc0  0800dfc0  0000f0f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dfc0  0800dfc0  0000efc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dfc4  0800dfc4  0000efc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f8  20000000  0800dfc8  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000160c  200000f8  0800e0c0  0000f0f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001704  0800e0c0  0000f704  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f0f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025eb6  00000000  00000000  0000f128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004376  00000000  00000000  00034fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001938  00000000  00000000  00039358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013ab  00000000  00000000  0003ac90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b76e  00000000  00000000  0003c03b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000260a3  00000000  00000000  000677a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117460  00000000  00000000  0008d84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a4cac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000729c  00000000  00000000  001a4cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001abf8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000f8 	.word	0x200000f8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800de48 	.word	0x0800de48

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000fc 	.word	0x200000fc
 8000214:	0800de48 	.word	0x0800de48

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b96a 	b.w	8000ebc <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	460c      	mov	r4, r1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d14e      	bne.n	8000caa <__udivmoddi4+0xaa>
 8000c0c:	4694      	mov	ip, r2
 8000c0e:	458c      	cmp	ip, r1
 8000c10:	4686      	mov	lr, r0
 8000c12:	fab2 f282 	clz	r2, r2
 8000c16:	d962      	bls.n	8000cde <__udivmoddi4+0xde>
 8000c18:	b14a      	cbz	r2, 8000c2e <__udivmoddi4+0x2e>
 8000c1a:	f1c2 0320 	rsb	r3, r2, #32
 8000c1e:	4091      	lsls	r1, r2
 8000c20:	fa20 f303 	lsr.w	r3, r0, r3
 8000c24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c28:	4319      	orrs	r1, r3
 8000c2a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c32:	fa1f f68c 	uxth.w	r6, ip
 8000c36:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c3e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c46:	fb04 f106 	mul.w	r1, r4, r6
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x64>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c56:	f080 8112 	bcs.w	8000e7e <__udivmoddi4+0x27e>
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	f240 810f 	bls.w	8000e7e <__udivmoddi4+0x27e>
 8000c60:	3c02      	subs	r4, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1a59      	subs	r1, r3, r1
 8000c66:	fa1f f38e 	uxth.w	r3, lr
 8000c6a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c76:	fb00 f606 	mul.w	r6, r0, r6
 8000c7a:	429e      	cmp	r6, r3
 8000c7c:	d90a      	bls.n	8000c94 <__udivmoddi4+0x94>
 8000c7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c82:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c86:	f080 80fc 	bcs.w	8000e82 <__udivmoddi4+0x282>
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	f240 80f9 	bls.w	8000e82 <__udivmoddi4+0x282>
 8000c90:	4463      	add	r3, ip
 8000c92:	3802      	subs	r0, #2
 8000c94:	1b9b      	subs	r3, r3, r6
 8000c96:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	b11d      	cbz	r5, 8000ca6 <__udivmoddi4+0xa6>
 8000c9e:	40d3      	lsrs	r3, r2
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d905      	bls.n	8000cba <__udivmoddi4+0xba>
 8000cae:	b10d      	cbz	r5, 8000cb4 <__udivmoddi4+0xb4>
 8000cb0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e7f5      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000cba:	fab3 f183 	clz	r1, r3
 8000cbe:	2900      	cmp	r1, #0
 8000cc0:	d146      	bne.n	8000d50 <__udivmoddi4+0x150>
 8000cc2:	42a3      	cmp	r3, r4
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xcc>
 8000cc6:	4290      	cmp	r0, r2
 8000cc8:	f0c0 80f0 	bcc.w	8000eac <__udivmoddi4+0x2ac>
 8000ccc:	1a86      	subs	r6, r0, r2
 8000cce:	eb64 0303 	sbc.w	r3, r4, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	2d00      	cmp	r5, #0
 8000cd6:	d0e6      	beq.n	8000ca6 <__udivmoddi4+0xa6>
 8000cd8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cdc:	e7e3      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000cde:	2a00      	cmp	r2, #0
 8000ce0:	f040 8090 	bne.w	8000e04 <__udivmoddi4+0x204>
 8000ce4:	eba1 040c 	sub.w	r4, r1, ip
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	fa1f f78c 	uxth.w	r7, ip
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cf6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cfa:	fb08 4416 	mls	r4, r8, r6, r4
 8000cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d02:	fb07 f006 	mul.w	r0, r7, r6
 8000d06:	4298      	cmp	r0, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x11c>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x11a>
 8000d14:	4298      	cmp	r0, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2b4>
 8000d1a:	4626      	mov	r6, r4
 8000d1c:	1a1c      	subs	r4, r3, r0
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d26:	fb08 4410 	mls	r4, r8, r0, r4
 8000d2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2e:	fb00 f707 	mul.w	r7, r0, r7
 8000d32:	429f      	cmp	r7, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x148>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x146>
 8000d40:	429f      	cmp	r7, r3
 8000d42:	f200 80b0 	bhi.w	8000ea6 <__udivmoddi4+0x2a6>
 8000d46:	4620      	mov	r0, r4
 8000d48:	1bdb      	subs	r3, r3, r7
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	e7a5      	b.n	8000c9c <__udivmoddi4+0x9c>
 8000d50:	f1c1 0620 	rsb	r6, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 f706 	lsr.w	r7, r2, r6
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d60:	fa04 f301 	lsl.w	r3, r4, r1
 8000d64:	ea43 030c 	orr.w	r3, r3, ip
 8000d68:	40f4      	lsrs	r4, r6
 8000d6a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d6e:	0c38      	lsrs	r0, r7, #16
 8000d70:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d74:	fbb4 fef0 	udiv	lr, r4, r0
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d80:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d84:	fb0e f90c 	mul.w	r9, lr, ip
 8000d88:	45a1      	cmp	r9, r4
 8000d8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x1a6>
 8000d90:	193c      	adds	r4, r7, r4
 8000d92:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d96:	f080 8084 	bcs.w	8000ea2 <__udivmoddi4+0x2a2>
 8000d9a:	45a1      	cmp	r9, r4
 8000d9c:	f240 8081 	bls.w	8000ea2 <__udivmoddi4+0x2a2>
 8000da0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	eba4 0409 	sub.w	r4, r4, r9
 8000daa:	fa1f f983 	uxth.w	r9, r3
 8000dae:	fbb4 f3f0 	udiv	r3, r4, r0
 8000db2:	fb00 4413 	mls	r4, r0, r3, r4
 8000db6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dba:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d907      	bls.n	8000dd2 <__udivmoddi4+0x1d2>
 8000dc2:	193c      	adds	r4, r7, r4
 8000dc4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc8:	d267      	bcs.n	8000e9a <__udivmoddi4+0x29a>
 8000dca:	45a4      	cmp	ip, r4
 8000dcc:	d965      	bls.n	8000e9a <__udivmoddi4+0x29a>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	443c      	add	r4, r7
 8000dd2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dd6:	fba0 9302 	umull	r9, r3, r0, r2
 8000dda:	eba4 040c 	sub.w	r4, r4, ip
 8000dde:	429c      	cmp	r4, r3
 8000de0:	46ce      	mov	lr, r9
 8000de2:	469c      	mov	ip, r3
 8000de4:	d351      	bcc.n	8000e8a <__udivmoddi4+0x28a>
 8000de6:	d04e      	beq.n	8000e86 <__udivmoddi4+0x286>
 8000de8:	b155      	cbz	r5, 8000e00 <__udivmoddi4+0x200>
 8000dea:	ebb8 030e 	subs.w	r3, r8, lr
 8000dee:	eb64 040c 	sbc.w	r4, r4, ip
 8000df2:	fa04 f606 	lsl.w	r6, r4, r6
 8000df6:	40cb      	lsrs	r3, r1
 8000df8:	431e      	orrs	r6, r3
 8000dfa:	40cc      	lsrs	r4, r1
 8000dfc:	e9c5 6400 	strd	r6, r4, [r5]
 8000e00:	2100      	movs	r1, #0
 8000e02:	e750      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000e04:	f1c2 0320 	rsb	r3, r2, #32
 8000e08:	fa20 f103 	lsr.w	r1, r0, r3
 8000e0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e10:	fa24 f303 	lsr.w	r3, r4, r3
 8000e14:	4094      	lsls	r4, r2
 8000e16:	430c      	orrs	r4, r1
 8000e18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e1c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e28:	fb08 3110 	mls	r1, r8, r0, r3
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e32:	fb00 f107 	mul.w	r1, r0, r7
 8000e36:	4299      	cmp	r1, r3
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x24c>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e42:	d22c      	bcs.n	8000e9e <__udivmoddi4+0x29e>
 8000e44:	4299      	cmp	r1, r3
 8000e46:	d92a      	bls.n	8000e9e <__udivmoddi4+0x29e>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	1a5b      	subs	r3, r3, r1
 8000e4e:	b2a4      	uxth	r4, r4
 8000e50:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e54:	fb08 3311 	mls	r3, r8, r1, r3
 8000e58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e5c:	fb01 f307 	mul.w	r3, r1, r7
 8000e60:	42a3      	cmp	r3, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x276>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e6c:	d213      	bcs.n	8000e96 <__udivmoddi4+0x296>
 8000e6e:	42a3      	cmp	r3, r4
 8000e70:	d911      	bls.n	8000e96 <__udivmoddi4+0x296>
 8000e72:	3902      	subs	r1, #2
 8000e74:	4464      	add	r4, ip
 8000e76:	1ae4      	subs	r4, r4, r3
 8000e78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e7c:	e739      	b.n	8000cf2 <__udivmoddi4+0xf2>
 8000e7e:	4604      	mov	r4, r0
 8000e80:	e6f0      	b.n	8000c64 <__udivmoddi4+0x64>
 8000e82:	4608      	mov	r0, r1
 8000e84:	e706      	b.n	8000c94 <__udivmoddi4+0x94>
 8000e86:	45c8      	cmp	r8, r9
 8000e88:	d2ae      	bcs.n	8000de8 <__udivmoddi4+0x1e8>
 8000e8a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e8e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e92:	3801      	subs	r0, #1
 8000e94:	e7a8      	b.n	8000de8 <__udivmoddi4+0x1e8>
 8000e96:	4631      	mov	r1, r6
 8000e98:	e7ed      	b.n	8000e76 <__udivmoddi4+0x276>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	e799      	b.n	8000dd2 <__udivmoddi4+0x1d2>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e7d4      	b.n	8000e4c <__udivmoddi4+0x24c>
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1a6>
 8000ea6:	4463      	add	r3, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e74d      	b.n	8000d48 <__udivmoddi4+0x148>
 8000eac:	4606      	mov	r6, r0
 8000eae:	4623      	mov	r3, r4
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e70f      	b.n	8000cd4 <__udivmoddi4+0xd4>
 8000eb4:	3e02      	subs	r6, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	e730      	b.n	8000d1c <__udivmoddi4+0x11c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <Vacuum_Status>:
uint16_t countPlace = 0;
uint16_t state = 0;
uint8_t set_shelves_state = 0;
ModbusHandleTypedef hmodbus;

void Vacuum_Status(EFF* eff){
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
    //Vacuum On
    if (registerFrame[0x02].U16 == 1){
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f08 <Vacuum_Status+0x48>)
 8000eca:	889b      	ldrh	r3, [r3, #4]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d10b      	bne.n	8000ee8 <Vacuum_Status+0x28>
        strcpy(Vacuum, "On");
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f0c <Vacuum_Status+0x4c>)
 8000ed2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f10 <Vacuum_Status+0x50>)
 8000ed4:	6812      	ldr	r2, [r2, #0]
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	8019      	strh	r1, [r3, #0]
 8000eda:	3302      	adds	r3, #2
 8000edc:	0c12      	lsrs	r2, r2, #16
 8000ede:	701a      	strb	r2, [r3, #0]
        eff -> solenoid_command[0] = 1;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	709a      	strb	r2, [r3, #2]
    //Vacuum Off
    else if (registerFrame[0x02].U16 == 0){
        strcpy(Vacuum, "Off");
        eff -> solenoid_command[0] = 0;
    }
}
 8000ee6:	e009      	b.n	8000efc <Vacuum_Status+0x3c>
    else if (registerFrame[0x02].U16 == 0){
 8000ee8:	4b07      	ldr	r3, [pc, #28]	@ (8000f08 <Vacuum_Status+0x48>)
 8000eea:	889b      	ldrh	r3, [r3, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d105      	bne.n	8000efc <Vacuum_Status+0x3c>
        strcpy(Vacuum, "Off");
 8000ef0:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <Vacuum_Status+0x4c>)
 8000ef2:	4a08      	ldr	r2, [pc, #32]	@ (8000f14 <Vacuum_Status+0x54>)
 8000ef4:	601a      	str	r2, [r3, #0]
        eff -> solenoid_command[0] = 0;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	709a      	strb	r2, [r3, #2]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	20000cec 	.word	0x20000cec
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	0800de60 	.word	0x0800de60
 8000f14:	0066664f 	.word	0x0066664f

08000f18 <Gripper_Movement_Status>:

void Gripper_Movement_Status(EFF* eff){
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
    //Movement Forward (push)
    if (registerFrame[0x03].U16 == 1){
 8000f20:	4b2a      	ldr	r3, [pc, #168]	@ (8000fcc <Gripper_Movement_Status+0xb4>)
 8000f22:	88db      	ldrh	r3, [r3, #6]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d123      	bne.n	8000f70 <Gripper_Movement_Status+0x58>
        strcpy(Gripper, "Forward");
 8000f28:	4b29      	ldr	r3, [pc, #164]	@ (8000fd0 <Gripper_Movement_Status+0xb8>)
 8000f2a:	4a2a      	ldr	r2, [pc, #168]	@ (8000fd4 <Gripper_Movement_Status+0xbc>)
 8000f2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f30:	e883 0003 	stmia.w	r3, {r0, r1}
        // if pull reed switch is activate
        if(eff -> actual_status[0] == 1 && eff -> actual_status[1] == 0){
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d10a      	bne.n	8000f52 <Gripper_Movement_Status+0x3a>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	785b      	ldrb	r3, [r3, #1]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d106      	bne.n	8000f52 <Gripper_Movement_Status+0x3a>
			eff -> solenoid_command[1] = 1;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2201      	movs	r2, #1
 8000f48:	70da      	strb	r2, [r3, #3]
			eff -> solenoid_command[2] = 0;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	711a      	strb	r2, [r3, #4]
 8000f50:	e035      	b.n	8000fbe <Gripper_Movement_Status+0xa6>
        }
        // if push reed switch is activate
        else if(eff -> actual_status[0] == 0 && eff -> actual_status[1] == 1){
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d131      	bne.n	8000fbe <Gripper_Movement_Status+0xa6>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	785b      	ldrb	r3, [r3, #1]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d12d      	bne.n	8000fbe <Gripper_Movement_Status+0xa6>
        	eff -> solenoid_command[1] = 0;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	70da      	strb	r2, [r3, #3]
			eff -> solenoid_command[2] = 0;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	711a      	strb	r2, [r3, #4]
        else if(eff -> actual_status[0] == 0 && eff -> actual_status[1] == 1){
        	eff -> solenoid_command[1] = 0;
			eff -> solenoid_command[2] = 1;
        }
    }
}
 8000f6e:	e026      	b.n	8000fbe <Gripper_Movement_Status+0xa6>
    else if (registerFrame[0x03].U16 == 0){
 8000f70:	4b16      	ldr	r3, [pc, #88]	@ (8000fcc <Gripper_Movement_Status+0xb4>)
 8000f72:	88db      	ldrh	r3, [r3, #6]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d122      	bne.n	8000fbe <Gripper_Movement_Status+0xa6>
        strcpy(Gripper, "Backward");
 8000f78:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <Gripper_Movement_Status+0xb8>)
 8000f7a:	4a17      	ldr	r2, [pc, #92]	@ (8000fd8 <Gripper_Movement_Status+0xc0>)
 8000f7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f7e:	c303      	stmia	r3!, {r0, r1}
 8000f80:	701a      	strb	r2, [r3, #0]
        if(eff -> actual_status[0] == 1 && eff -> actual_status[1] == 0){
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d10a      	bne.n	8000fa0 <Gripper_Movement_Status+0x88>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	785b      	ldrb	r3, [r3, #1]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d106      	bne.n	8000fa0 <Gripper_Movement_Status+0x88>
			eff -> solenoid_command[1] = 0;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	70da      	strb	r2, [r3, #3]
			eff -> solenoid_command[2] = 0;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	711a      	strb	r2, [r3, #4]
 8000f9e:	e00e      	b.n	8000fbe <Gripper_Movement_Status+0xa6>
        else if(eff -> actual_status[0] == 0 && eff -> actual_status[1] == 1){
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d10a      	bne.n	8000fbe <Gripper_Movement_Status+0xa6>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	785b      	ldrb	r3, [r3, #1]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d106      	bne.n	8000fbe <Gripper_Movement_Status+0xa6>
        	eff -> solenoid_command[1] = 0;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	70da      	strb	r2, [r3, #3]
			eff -> solenoid_command[2] = 1;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	711a      	strb	r2, [r3, #4]
}
 8000fbc:	e7ff      	b.n	8000fbe <Gripper_Movement_Status+0xa6>
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000cec 	.word	0x20000cec
 8000fd0:	2000000c 	.word	0x2000000c
 8000fd4:	0800de64 	.word	0x0800de64
 8000fd8:	0800de6c 	.word	0x0800de6c

08000fdc <Set_Shelves>:

uint16_t Set_Shelves(){
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
    //Set shelve
    if (registerFrame[0x01].U16 == 1){
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8001018 <Set_Shelves+0x3c>)
 8000fe2:	885b      	ldrh	r3, [r3, #2]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d110      	bne.n	800100a <Set_Shelves+0x2e>
    	state = 1;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <Set_Shelves+0x40>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	801a      	strh	r2, [r3, #0]
        strcpy(Shelves, "SET");
 8000fee:	4b0c      	ldr	r3, [pc, #48]	@ (8001020 <Set_Shelves+0x44>)
 8000ff0:	4a0c      	ldr	r2, [pc, #48]	@ (8001024 <Set_Shelves+0x48>)
 8000ff2:	601a      	str	r2, [r3, #0]
        registerFrame[0x01].U16 = 0;
 8000ff4:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <Set_Shelves+0x3c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	805a      	strh	r2, [r3, #2]
        registerFrame[0x10].U16 = 1;
 8000ffa:	4b07      	ldr	r3, [pc, #28]	@ (8001018 <Set_Shelves+0x3c>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	841a      	strh	r2, [r3, #32]
        set_shelves_state = 1;
 8001000:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <Set_Shelves+0x4c>)
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
        return 1;
 8001006:	2301      	movs	r3, #1
 8001008:	e000      	b.n	800100c <Set_Shelves+0x30>
    }
    else{return 0;}
 800100a:	2300      	movs	r3, #0
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000cec 	.word	0x20000cec
 800101c:	2000012e 	.word	0x2000012e
 8001020:	20000020 	.word	0x20000020
 8001024:	00544553 	.word	0x00544553
 8001028:	20000130 	.word	0x20000130

0800102c <Set_Goal_Point>:

// wait for Data type check
uint16_t Set_Goal_Point(){
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
	return registerFrame[0x30].U16;
 8001030:	4b03      	ldr	r3, [pc, #12]	@ (8001040 <Set_Goal_Point+0x14>)
 8001032:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
}
 8001036:	4618      	mov	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	20000cec 	.word	0x20000cec

08001044 <Run_Point_Mode>:

uint16_t Run_Point_Mode(){
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
	if (registerFrame[0x01].U16 == 8){
 8001048:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <Run_Point_Mode+0x30>)
 800104a:	885b      	ldrh	r3, [r3, #2]
 800104c:	2b08      	cmp	r3, #8
 800104e:	d10b      	bne.n	8001068 <Run_Point_Mode+0x24>
		registerFrame[0x01].U16 = 0;
 8001050:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <Run_Point_Mode+0x30>)
 8001052:	2200      	movs	r2, #0
 8001054:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 16;
 8001056:	4b07      	ldr	r3, [pc, #28]	@ (8001074 <Run_Point_Mode+0x30>)
 8001058:	2210      	movs	r2, #16
 800105a:	841a      	strh	r2, [r3, #32]
		state = registerFrame[0x10].U16;
 800105c:	4b05      	ldr	r3, [pc, #20]	@ (8001074 <Run_Point_Mode+0x30>)
 800105e:	8c1a      	ldrh	r2, [r3, #32]
 8001060:	4b05      	ldr	r3, [pc, #20]	@ (8001078 <Run_Point_Mode+0x34>)
 8001062:	801a      	strh	r2, [r3, #0]
		return 1;
 8001064:	2301      	movs	r3, #1
 8001066:	e000      	b.n	800106a <Run_Point_Mode+0x26>
	}else{return 0;}
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	20000cec 	.word	0x20000cec
 8001078:	2000012e 	.word	0x2000012e

0800107c <Set_Home>:

void Set_Home(){
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
	if(registerFrame[0x10].U16 == 2){
 8001080:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <Set_Home+0x28>)
 8001082:	8c1b      	ldrh	r3, [r3, #32]
 8001084:	2b02      	cmp	r3, #2
 8001086:	d108      	bne.n	800109a <Set_Home+0x1e>
		state = 2;
 8001088:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <Set_Home+0x2c>)
 800108a:	2202      	movs	r2, #2
 800108c:	801a      	strh	r2, [r3, #0]
		strcpy(Home, "Homing...");
 800108e:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <Set_Home+0x30>)
 8001090:	4a07      	ldr	r2, [pc, #28]	@ (80010b0 <Set_Home+0x34>)
 8001092:	ca07      	ldmia	r2, {r0, r1, r2}
 8001094:	c303      	stmia	r3!, {r0, r1}
 8001096:	801a      	strh	r2, [r3, #0]
 8001098:	e000      	b.n	800109c <Set_Home+0x20>
	}
	else{
		return;
 800109a:	bf00      	nop
//	if (Jogginghome == 1){
//		registerFrame[0x01].U16 = 0;
//	}


}
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	20000cec 	.word	0x20000cec
 80010a8:	2000012e 	.word	0x2000012e
 80010ac:	20000054 	.word	0x20000054
 80010b0:	0800de78 	.word	0x0800de78

080010b4 <SetPick_PlaceOrder>:
void SetPick_PlaceOrder() {
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
    if (registerFrame[0x21].U16 != 00000 && registerFrame[0x22].U16 != 00000 ) {
 80010b8:	4bab      	ldr	r3, [pc, #684]	@ (8001368 <SetPick_PlaceOrder+0x2b4>)
 80010ba:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f000 8176 	beq.w	80013b0 <SetPick_PlaceOrder+0x2fc>
 80010c4:	4ba8      	ldr	r3, [pc, #672]	@ (8001368 <SetPick_PlaceOrder+0x2b4>)
 80010c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f000 8170 	beq.w	80013b0 <SetPick_PlaceOrder+0x2fc>
    	strcpy(Order, "Pick");
 80010d0:	4ba6      	ldr	r3, [pc, #664]	@ (800136c <SetPick_PlaceOrder+0x2b8>)
 80010d2:	4aa7      	ldr	r2, [pc, #668]	@ (8001370 <SetPick_PlaceOrder+0x2bc>)
 80010d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010d8:	6018      	str	r0, [r3, #0]
 80010da:	3304      	adds	r3, #4
 80010dc:	7019      	strb	r1, [r3, #0]
    	Pick[0] = registerFrame[0x21].U16/10000;
 80010de:	4ba2      	ldr	r3, [pc, #648]	@ (8001368 <SetPick_PlaceOrder+0x2b4>)
 80010e0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80010e4:	4aa3      	ldr	r2, [pc, #652]	@ (8001374 <SetPick_PlaceOrder+0x2c0>)
 80010e6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ea:	0b5b      	lsrs	r3, r3, #13
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	4ba2      	ldr	r3, [pc, #648]	@ (8001378 <SetPick_PlaceOrder+0x2c4>)
 80010f0:	801a      	strh	r2, [r3, #0]
    	countPick += Pick[0]*10000;
 80010f2:	4ba1      	ldr	r3, [pc, #644]	@ (8001378 <SetPick_PlaceOrder+0x2c4>)
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	0152      	lsls	r2, r2, #5
 80010fa:	1ad2      	subs	r2, r2, r3
 80010fc:	0092      	lsls	r2, r2, #2
 80010fe:	4413      	add	r3, r2
 8001100:	461a      	mov	r2, r3
 8001102:	0091      	lsls	r1, r2, #2
 8001104:	461a      	mov	r2, r3
 8001106:	460b      	mov	r3, r1
 8001108:	4413      	add	r3, r2
 800110a:	011b      	lsls	r3, r3, #4
 800110c:	b29a      	uxth	r2, r3
 800110e:	4b9b      	ldr	r3, [pc, #620]	@ (800137c <SetPick_PlaceOrder+0x2c8>)
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	4413      	add	r3, r2
 8001114:	b29a      	uxth	r2, r3
 8001116:	4b99      	ldr	r3, [pc, #612]	@ (800137c <SetPick_PlaceOrder+0x2c8>)
 8001118:	801a      	strh	r2, [r3, #0]
    	strcpy(Order, "Place");
 800111a:	4b94      	ldr	r3, [pc, #592]	@ (800136c <SetPick_PlaceOrder+0x2b8>)
 800111c:	4a98      	ldr	r2, [pc, #608]	@ (8001380 <SetPick_PlaceOrder+0x2cc>)
 800111e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001122:	6018      	str	r0, [r3, #0]
 8001124:	3304      	adds	r3, #4
 8001126:	8019      	strh	r1, [r3, #0]
    	Place[0] = registerFrame[0x22].U16/10000;
 8001128:	4b8f      	ldr	r3, [pc, #572]	@ (8001368 <SetPick_PlaceOrder+0x2b4>)
 800112a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800112e:	4a91      	ldr	r2, [pc, #580]	@ (8001374 <SetPick_PlaceOrder+0x2c0>)
 8001130:	fba2 2303 	umull	r2, r3, r2, r3
 8001134:	0b5b      	lsrs	r3, r3, #13
 8001136:	b29a      	uxth	r2, r3
 8001138:	4b92      	ldr	r3, [pc, #584]	@ (8001384 <SetPick_PlaceOrder+0x2d0>)
 800113a:	801a      	strh	r2, [r3, #0]
    	countPlace +=Place[0]*10000;
 800113c:	4b91      	ldr	r3, [pc, #580]	@ (8001384 <SetPick_PlaceOrder+0x2d0>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	0152      	lsls	r2, r2, #5
 8001144:	1ad2      	subs	r2, r2, r3
 8001146:	0092      	lsls	r2, r2, #2
 8001148:	4413      	add	r3, r2
 800114a:	461a      	mov	r2, r3
 800114c:	0091      	lsls	r1, r2, #2
 800114e:	461a      	mov	r2, r3
 8001150:	460b      	mov	r3, r1
 8001152:	4413      	add	r3, r2
 8001154:	011b      	lsls	r3, r3, #4
 8001156:	b29a      	uxth	r2, r3
 8001158:	4b8b      	ldr	r3, [pc, #556]	@ (8001388 <SetPick_PlaceOrder+0x2d4>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	4413      	add	r3, r2
 800115e:	b29a      	uxth	r2, r3
 8001160:	4b89      	ldr	r3, [pc, #548]	@ (8001388 <SetPick_PlaceOrder+0x2d4>)
 8001162:	801a      	strh	r2, [r3, #0]


    	strcpy(Order, "Pick");
 8001164:	4b81      	ldr	r3, [pc, #516]	@ (800136c <SetPick_PlaceOrder+0x2b8>)
 8001166:	4a82      	ldr	r2, [pc, #520]	@ (8001370 <SetPick_PlaceOrder+0x2bc>)
 8001168:	e892 0003 	ldmia.w	r2, {r0, r1}
 800116c:	6018      	str	r0, [r3, #0]
 800116e:	3304      	adds	r3, #4
 8001170:	7019      	strb	r1, [r3, #0]
    	Pick[1] = (registerFrame[0x21].U16- countPick)/1000;
 8001172:	4b7d      	ldr	r3, [pc, #500]	@ (8001368 <SetPick_PlaceOrder+0x2b4>)
 8001174:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001178:	461a      	mov	r2, r3
 800117a:	4b80      	ldr	r3, [pc, #512]	@ (800137c <SetPick_PlaceOrder+0x2c8>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	4a82      	ldr	r2, [pc, #520]	@ (800138c <SetPick_PlaceOrder+0x2d8>)
 8001182:	fb82 1203 	smull	r1, r2, r2, r3
 8001186:	1192      	asrs	r2, r2, #6
 8001188:	17db      	asrs	r3, r3, #31
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	b29a      	uxth	r2, r3
 800118e:	4b7a      	ldr	r3, [pc, #488]	@ (8001378 <SetPick_PlaceOrder+0x2c4>)
 8001190:	805a      	strh	r2, [r3, #2]
    	countPick += Pick[1]*1000;
 8001192:	4b79      	ldr	r3, [pc, #484]	@ (8001378 <SetPick_PlaceOrder+0x2c4>)
 8001194:	885b      	ldrh	r3, [r3, #2]
 8001196:	461a      	mov	r2, r3
 8001198:	0152      	lsls	r2, r2, #5
 800119a:	1ad2      	subs	r2, r2, r3
 800119c:	0092      	lsls	r2, r2, #2
 800119e:	4413      	add	r3, r2
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	4b75      	ldr	r3, [pc, #468]	@ (800137c <SetPick_PlaceOrder+0x2c8>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	4413      	add	r3, r2
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	4b73      	ldr	r3, [pc, #460]	@ (800137c <SetPick_PlaceOrder+0x2c8>)
 80011ae:	801a      	strh	r2, [r3, #0]
    	strcpy(Order, "Place");
 80011b0:	4b6e      	ldr	r3, [pc, #440]	@ (800136c <SetPick_PlaceOrder+0x2b8>)
 80011b2:	4a73      	ldr	r2, [pc, #460]	@ (8001380 <SetPick_PlaceOrder+0x2cc>)
 80011b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011b8:	6018      	str	r0, [r3, #0]
 80011ba:	3304      	adds	r3, #4
 80011bc:	8019      	strh	r1, [r3, #0]
    	Place[1] = (registerFrame[0x22].U16- countPlace)/1000;
 80011be:	4b6a      	ldr	r3, [pc, #424]	@ (8001368 <SetPick_PlaceOrder+0x2b4>)
 80011c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b70      	ldr	r3, [pc, #448]	@ (8001388 <SetPick_PlaceOrder+0x2d4>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	4a6f      	ldr	r2, [pc, #444]	@ (800138c <SetPick_PlaceOrder+0x2d8>)
 80011ce:	fb82 1203 	smull	r1, r2, r2, r3
 80011d2:	1192      	asrs	r2, r2, #6
 80011d4:	17db      	asrs	r3, r3, #31
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	b29a      	uxth	r2, r3
 80011da:	4b6a      	ldr	r3, [pc, #424]	@ (8001384 <SetPick_PlaceOrder+0x2d0>)
 80011dc:	805a      	strh	r2, [r3, #2]
    	countPlace +=Place[1]*1000;
 80011de:	4b69      	ldr	r3, [pc, #420]	@ (8001384 <SetPick_PlaceOrder+0x2d0>)
 80011e0:	885b      	ldrh	r3, [r3, #2]
 80011e2:	461a      	mov	r2, r3
 80011e4:	0152      	lsls	r2, r2, #5
 80011e6:	1ad2      	subs	r2, r2, r3
 80011e8:	0092      	lsls	r2, r2, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	4b65      	ldr	r3, [pc, #404]	@ (8001388 <SetPick_PlaceOrder+0x2d4>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	4413      	add	r3, r2
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	4b63      	ldr	r3, [pc, #396]	@ (8001388 <SetPick_PlaceOrder+0x2d4>)
 80011fa:	801a      	strh	r2, [r3, #0]


    	strcpy(Order, "Pick");
 80011fc:	4b5b      	ldr	r3, [pc, #364]	@ (800136c <SetPick_PlaceOrder+0x2b8>)
 80011fe:	4a5c      	ldr	r2, [pc, #368]	@ (8001370 <SetPick_PlaceOrder+0x2bc>)
 8001200:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001204:	6018      	str	r0, [r3, #0]
 8001206:	3304      	adds	r3, #4
 8001208:	7019      	strb	r1, [r3, #0]
		Pick[2] = (registerFrame[0x21].U16 - countPick) / 100;
 800120a:	4b57      	ldr	r3, [pc, #348]	@ (8001368 <SetPick_PlaceOrder+0x2b4>)
 800120c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001210:	461a      	mov	r2, r3
 8001212:	4b5a      	ldr	r3, [pc, #360]	@ (800137c <SetPick_PlaceOrder+0x2c8>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	4a5d      	ldr	r2, [pc, #372]	@ (8001390 <SetPick_PlaceOrder+0x2dc>)
 800121a:	fb82 1203 	smull	r1, r2, r2, r3
 800121e:	1152      	asrs	r2, r2, #5
 8001220:	17db      	asrs	r3, r3, #31
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	b29a      	uxth	r2, r3
 8001226:	4b54      	ldr	r3, [pc, #336]	@ (8001378 <SetPick_PlaceOrder+0x2c4>)
 8001228:	809a      	strh	r2, [r3, #4]
		countPick += Pick[2] * 100;
 800122a:	4b53      	ldr	r3, [pc, #332]	@ (8001378 <SetPick_PlaceOrder+0x2c4>)
 800122c:	889b      	ldrh	r3, [r3, #4]
 800122e:	461a      	mov	r2, r3
 8001230:	0092      	lsls	r2, r2, #2
 8001232:	4413      	add	r3, r2
 8001234:	461a      	mov	r2, r3
 8001236:	0091      	lsls	r1, r2, #2
 8001238:	461a      	mov	r2, r3
 800123a:	460b      	mov	r3, r1
 800123c:	4413      	add	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	b29a      	uxth	r2, r3
 8001242:	4b4e      	ldr	r3, [pc, #312]	@ (800137c <SetPick_PlaceOrder+0x2c8>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	4413      	add	r3, r2
 8001248:	b29a      	uxth	r2, r3
 800124a:	4b4c      	ldr	r3, [pc, #304]	@ (800137c <SetPick_PlaceOrder+0x2c8>)
 800124c:	801a      	strh	r2, [r3, #0]
		strcpy(Order, "Place");
 800124e:	4b47      	ldr	r3, [pc, #284]	@ (800136c <SetPick_PlaceOrder+0x2b8>)
 8001250:	4a4b      	ldr	r2, [pc, #300]	@ (8001380 <SetPick_PlaceOrder+0x2cc>)
 8001252:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001256:	6018      	str	r0, [r3, #0]
 8001258:	3304      	adds	r3, #4
 800125a:	8019      	strh	r1, [r3, #0]
		Place[2] = (registerFrame[0x22].U16 - countPlace) / 100;
 800125c:	4b42      	ldr	r3, [pc, #264]	@ (8001368 <SetPick_PlaceOrder+0x2b4>)
 800125e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001262:	461a      	mov	r2, r3
 8001264:	4b48      	ldr	r3, [pc, #288]	@ (8001388 <SetPick_PlaceOrder+0x2d4>)
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	4a49      	ldr	r2, [pc, #292]	@ (8001390 <SetPick_PlaceOrder+0x2dc>)
 800126c:	fb82 1203 	smull	r1, r2, r2, r3
 8001270:	1152      	asrs	r2, r2, #5
 8001272:	17db      	asrs	r3, r3, #31
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	b29a      	uxth	r2, r3
 8001278:	4b42      	ldr	r3, [pc, #264]	@ (8001384 <SetPick_PlaceOrder+0x2d0>)
 800127a:	809a      	strh	r2, [r3, #4]
		countPlace += Place[2] * 100;
 800127c:	4b41      	ldr	r3, [pc, #260]	@ (8001384 <SetPick_PlaceOrder+0x2d0>)
 800127e:	889b      	ldrh	r3, [r3, #4]
 8001280:	461a      	mov	r2, r3
 8001282:	0092      	lsls	r2, r2, #2
 8001284:	4413      	add	r3, r2
 8001286:	461a      	mov	r2, r3
 8001288:	0091      	lsls	r1, r2, #2
 800128a:	461a      	mov	r2, r3
 800128c:	460b      	mov	r3, r1
 800128e:	4413      	add	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	b29a      	uxth	r2, r3
 8001294:	4b3c      	ldr	r3, [pc, #240]	@ (8001388 <SetPick_PlaceOrder+0x2d4>)
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	4413      	add	r3, r2
 800129a:	b29a      	uxth	r2, r3
 800129c:	4b3a      	ldr	r3, [pc, #232]	@ (8001388 <SetPick_PlaceOrder+0x2d4>)
 800129e:	801a      	strh	r2, [r3, #0]


		strcpy(Order, "Pick");
 80012a0:	4b32      	ldr	r3, [pc, #200]	@ (800136c <SetPick_PlaceOrder+0x2b8>)
 80012a2:	4a33      	ldr	r2, [pc, #204]	@ (8001370 <SetPick_PlaceOrder+0x2bc>)
 80012a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012a8:	6018      	str	r0, [r3, #0]
 80012aa:	3304      	adds	r3, #4
 80012ac:	7019      	strb	r1, [r3, #0]
		Pick[3] = (registerFrame[0x21].U16 - countPick) / 10;
 80012ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001368 <SetPick_PlaceOrder+0x2b4>)
 80012b0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b31      	ldr	r3, [pc, #196]	@ (800137c <SetPick_PlaceOrder+0x2c8>)
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	4a35      	ldr	r2, [pc, #212]	@ (8001394 <SetPick_PlaceOrder+0x2e0>)
 80012be:	fb82 1203 	smull	r1, r2, r2, r3
 80012c2:	1092      	asrs	r2, r2, #2
 80012c4:	17db      	asrs	r3, r3, #31
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001378 <SetPick_PlaceOrder+0x2c4>)
 80012cc:	80da      	strh	r2, [r3, #6]
		countPick += Pick[3] * 10;
 80012ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001378 <SetPick_PlaceOrder+0x2c4>)
 80012d0:	88db      	ldrh	r3, [r3, #6]
 80012d2:	461a      	mov	r2, r3
 80012d4:	0092      	lsls	r2, r2, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	b29a      	uxth	r2, r3
 80012dc:	4b27      	ldr	r3, [pc, #156]	@ (800137c <SetPick_PlaceOrder+0x2c8>)
 80012de:	881b      	ldrh	r3, [r3, #0]
 80012e0:	4413      	add	r3, r2
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	4b25      	ldr	r3, [pc, #148]	@ (800137c <SetPick_PlaceOrder+0x2c8>)
 80012e6:	801a      	strh	r2, [r3, #0]
		strcpy(Order, "Place");
 80012e8:	4b20      	ldr	r3, [pc, #128]	@ (800136c <SetPick_PlaceOrder+0x2b8>)
 80012ea:	4a25      	ldr	r2, [pc, #148]	@ (8001380 <SetPick_PlaceOrder+0x2cc>)
 80012ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012f0:	6018      	str	r0, [r3, #0]
 80012f2:	3304      	adds	r3, #4
 80012f4:	8019      	strh	r1, [r3, #0]
		Place[3] = (registerFrame[0x22].U16 - countPlace) / 10;
 80012f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001368 <SetPick_PlaceOrder+0x2b4>)
 80012f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <SetPick_PlaceOrder+0x2d4>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	4a23      	ldr	r2, [pc, #140]	@ (8001394 <SetPick_PlaceOrder+0x2e0>)
 8001306:	fb82 1203 	smull	r1, r2, r2, r3
 800130a:	1092      	asrs	r2, r2, #2
 800130c:	17db      	asrs	r3, r3, #31
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	b29a      	uxth	r2, r3
 8001312:	4b1c      	ldr	r3, [pc, #112]	@ (8001384 <SetPick_PlaceOrder+0x2d0>)
 8001314:	80da      	strh	r2, [r3, #6]
		countPlace += Place[3] * 10;
 8001316:	4b1b      	ldr	r3, [pc, #108]	@ (8001384 <SetPick_PlaceOrder+0x2d0>)
 8001318:	88db      	ldrh	r3, [r3, #6]
 800131a:	461a      	mov	r2, r3
 800131c:	0092      	lsls	r2, r2, #2
 800131e:	4413      	add	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	b29a      	uxth	r2, r3
 8001324:	4b18      	ldr	r3, [pc, #96]	@ (8001388 <SetPick_PlaceOrder+0x2d4>)
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	4413      	add	r3, r2
 800132a:	b29a      	uxth	r2, r3
 800132c:	4b16      	ldr	r3, [pc, #88]	@ (8001388 <SetPick_PlaceOrder+0x2d4>)
 800132e:	801a      	strh	r2, [r3, #0]


		strcpy(Order, "Pick");
 8001330:	4b0e      	ldr	r3, [pc, #56]	@ (800136c <SetPick_PlaceOrder+0x2b8>)
 8001332:	4a0f      	ldr	r2, [pc, #60]	@ (8001370 <SetPick_PlaceOrder+0x2bc>)
 8001334:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001338:	6018      	str	r0, [r3, #0]
 800133a:	3304      	adds	r3, #4
 800133c:	7019      	strb	r1, [r3, #0]
		Pick[4] = (registerFrame[0x21].U16 - countPick);
 800133e:	4b0a      	ldr	r3, [pc, #40]	@ (8001368 <SetPick_PlaceOrder+0x2b4>)
 8001340:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8001344:	4b0d      	ldr	r3, [pc, #52]	@ (800137c <SetPick_PlaceOrder+0x2c8>)
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	b29a      	uxth	r2, r3
 800134c:	4b0a      	ldr	r3, [pc, #40]	@ (8001378 <SetPick_PlaceOrder+0x2c4>)
 800134e:	811a      	strh	r2, [r3, #8]
		countPick = 0;
 8001350:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <SetPick_PlaceOrder+0x2c8>)
 8001352:	2200      	movs	r2, #0
 8001354:	801a      	strh	r2, [r3, #0]
		strcpy(Order, "Place");
 8001356:	4b05      	ldr	r3, [pc, #20]	@ (800136c <SetPick_PlaceOrder+0x2b8>)
 8001358:	4a09      	ldr	r2, [pc, #36]	@ (8001380 <SetPick_PlaceOrder+0x2cc>)
 800135a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800135e:	6018      	str	r0, [r3, #0]
 8001360:	3304      	adds	r3, #4
 8001362:	8019      	strh	r1, [r3, #0]
 8001364:	e018      	b.n	8001398 <SetPick_PlaceOrder+0x2e4>
 8001366:	bf00      	nop
 8001368:	20000cec 	.word	0x20000cec
 800136c:	20000034 	.word	0x20000034
 8001370:	0800de84 	.word	0x0800de84
 8001374:	d1b71759 	.word	0xd1b71759
 8001378:	20000114 	.word	0x20000114
 800137c:	2000012a 	.word	0x2000012a
 8001380:	0800de8c 	.word	0x0800de8c
 8001384:	20000120 	.word	0x20000120
 8001388:	2000012c 	.word	0x2000012c
 800138c:	10624dd3 	.word	0x10624dd3
 8001390:	51eb851f 	.word	0x51eb851f
 8001394:	66666667 	.word	0x66666667
		Place[4] = (registerFrame[0x22].U16 - countPlace);
 8001398:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <SetPick_PlaceOrder+0x308>)
 800139a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800139e:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <SetPick_PlaceOrder+0x30c>)
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	4b07      	ldr	r3, [pc, #28]	@ (80013c4 <SetPick_PlaceOrder+0x310>)
 80013a8:	811a      	strh	r2, [r3, #8]
		countPlace = 0;
 80013aa:	4b05      	ldr	r3, [pc, #20]	@ (80013c0 <SetPick_PlaceOrder+0x30c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	801a      	strh	r2, [r3, #0]

    }
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20000cec 	.word	0x20000cec
 80013c0:	2000012c 	.word	0x2000012c
 80013c4:	20000120 	.word	0x20000120

080013c8 <Run_Jog_Mode>:



uint16_t Run_Jog_Mode() {
 80013c8:	b490      	push	{r4, r7}
 80013ca:	af00      	add	r7, sp, #0
	if (registerFrame[0x01].U16 == 1) {
 80013cc:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <Run_Jog_Mode+0x2c>)
 80013ce:	885b      	ldrh	r3, [r3, #2]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d10a      	bne.n	80013ea <Run_Jog_Mode+0x22>
		strcpy(Jogmode, "Run Jog Mode");
 80013d4:	4a08      	ldr	r2, [pc, #32]	@ (80013f8 <Run_Jog_Mode+0x30>)
 80013d6:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <Run_Jog_Mode+0x34>)
 80013d8:	4614      	mov	r4, r2
 80013da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013dc:	c407      	stmia	r4!, {r0, r1, r2}
 80013de:	7023      	strb	r3, [r4, #0]
		registerFrame[0x01].U16 = 0;
 80013e0:	4b04      	ldr	r3, [pc, #16]	@ (80013f4 <Run_Jog_Mode+0x2c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	805a      	strh	r2, [r3, #2]
		return 1;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <Run_Jog_Mode+0x24>
//			strcpy(Jogmode, "Go to Place...");
//			registerFrame[0x10].U16 = 8;
//			SetPick_PlaceOrder(); //แก้ให้เข้ากับซัน
//		}
	}
	else{return 0;}
 80013ea:	2300      	movs	r3, #0
//	registerFrame[0x10].U16 = 0;
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc90      	pop	{r4, r7}
 80013f2:	4770      	bx	lr
 80013f4:	20000cec 	.word	0x20000cec
 80013f8:	20000040 	.word	0x20000040
 80013fc:	0800de94 	.word	0x0800de94

08001400 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001404:	4b0d      	ldr	r3, [pc, #52]	@ (800143c <modbus_1t5_Timeout+0x3c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2201      	movs	r2, #1
 800140a:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 800140c:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <modbus_1t5_Timeout+0x3c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2200      	movs	r2, #0
 8001416:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001418:	4b08      	ldr	r3, [pc, #32]	@ (800143c <modbus_1t5_Timeout+0x3c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b06      	ldr	r3, [pc, #24]	@ (800143c <modbus_1t5_Timeout+0x3c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f042 0201 	orr.w	r2, r2, #1
 800142e:	601a      	str	r2, [r3, #0]
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	2000060c 	.word	0x2000060c

08001440 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001448:	4b04      	ldr	r3, [pc, #16]	@ (800145c <modbus_3t5_Timeout+0x1c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2201      	movs	r2, #1
 800144e:	755a      	strb	r2, [r3, #21]

}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	2000060c 	.word	0x2000060c

08001460 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f00a fc4f 	bl	800bd0c <HAL_UART_GetError>
 800146e:	4603      	mov	r3, r0
 8001470:	2b20      	cmp	r3, #32
 8001472:	d101      	bne.n	8001478 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001474:	f7ff ffc4 	bl	8001400 <modbus_1t5_Timeout>

	}
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800148a:	4a25      	ldr	r2, [pc, #148]	@ (8001520 <Modbus_init+0xa0>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001490:	4b23      	ldr	r3, [pc, #140]	@ (8001520 <Modbus_init+0xa0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	4a21      	ldr	r2, [pc, #132]	@ (8001524 <Modbus_init+0xa4>)
 800149e:	210e      	movs	r1, #14
 80014a0:	4618      	mov	r0, r3
 80014a2:	f008 fef7 	bl	800a294 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	2110      	movs	r1, #16
 80014ac:	4618      	mov	r0, r3
 80014ae:	f00a fbd7 	bl	800bc60 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f00a fbee 	bl	800bc98 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	4a19      	ldr	r2, [pc, #100]	@ (8001528 <Modbus_init+0xa8>)
 80014c2:	2104      	movs	r1, #4
 80014c4:	4618      	mov	r0, r3
 80014c6:	f009 ff35 	bl	800b334 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80014ca:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <Modbus_init+0xa0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80014d0:	4b13      	ldr	r3, [pc, #76]	@ (8001520 <Modbus_init+0xa0>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b12      	ldr	r3, [pc, #72]	@ (8001520 <Modbus_init+0xa0>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80014dc:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80014e0:	4413      	add	r3, r2
 80014e2:	3302      	adds	r3, #2
 80014e4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80014e8:	4619      	mov	r1, r3
 80014ea:	f009 ffdd 	bl	800b4a8 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80014ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001520 <Modbus_init+0xa0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d10c      	bne.n	8001518 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80014fe:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <Modbus_init+0xa0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	4618      	mov	r0, r3
 8001506:	f007 fe97 	bl	8009238 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800150a:	4b05      	ldr	r3, [pc, #20]	@ (8001520 <Modbus_init+0xa0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f008 f8f0 	bl	80096f8 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	2000060c 	.word	0x2000060c
 8001524:	08001441 	.word	0x08001441
 8001528:	08001461 	.word	0x08001461
 800152c:	00000000 	.word	0x00000000

08001530 <Trajectory_Generator>:
//	Traj->dir = 0;
//	Traj->t2 = Traj->t1;
//}
double p1,p2,p3,p4,p5,p6 = 0.0;

void Trajectory_Generator(volatile Scurve_GenStruct *genScurve,float initial_p,float target_p,float vmax,float amax,float jmax){
 8001530:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001534:	b096      	sub	sp, #88	@ 0x58
 8001536:	af00      	add	r7, sp, #0
 8001538:	6178      	str	r0, [r7, #20]
 800153a:	ed87 0a04 	vstr	s0, [r7, #16]
 800153e:	edc7 0a03 	vstr	s1, [r7, #12]
 8001542:	ed87 1a02 	vstr	s2, [r7, #8]
 8001546:	edc7 1a01 	vstr	s3, [r7, #4]
 800154a:	ed87 2a00 	vstr	s4, [r7]
	//Set parameter
	uint32_t s = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	637b      	str	r3, [r7, #52]	@ 0x34
	uint8_t M = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	uint8_t N = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	uint8_t pattern = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	double va = 0.0f;
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double sa = 0.0f;
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	f04f 0300 	mov.w	r3, #0
 8001578:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double sv = 0.0f;
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double tj,ta,tv;

	genScurve->dir = 0;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	genScurve->time_total = 0.0;
 8001590:	6979      	ldr	r1, [r7, #20]
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	f04f 0300 	mov.w	r3, #0
 800159a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	genScurve->t1 = 0.0;
 800159e:	6979      	ldr	r1, [r7, #20]
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	f04f 0300 	mov.w	r3, #0
 80015a8:	e9c1 2300 	strd	r2, r3, [r1]
	genScurve->t2 = 0.0;
 80015ac:	6979      	ldr	r1, [r7, #20]
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	genScurve->t3 = 0.0;
 80015ba:	6979      	ldr	r1, [r7, #20]
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	genScurve->t4 = 0.0;
 80015c8:	6979      	ldr	r1, [r7, #20]
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	f04f 0300 	mov.w	r3, #0
 80015d2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	genScurve->t5 = 0.0;
 80015d6:	6979      	ldr	r1, [r7, #20]
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	e9c1 2308 	strd	r2, r3, [r1, #32]
	genScurve->t6 = 0.0;
 80015e4:	6979      	ldr	r1, [r7, #20]
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	f04f 0300 	mov.w	r3, #0
 80015ee:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	genScurve->t7 = 0.0;
 80015f2:	6979      	ldr	r1, [r7, #20]
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	f04f 0300 	mov.w	r3, #0
 80015fc:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	// Check for the feasibility of the trajectory
	if(vmax*jmax < amax*amax){
 8001600:	ed97 7a02 	vldr	s14, [r7, #8]
 8001604:	edd7 7a00 	vldr	s15, [r7]
 8001608:	ee27 7a27 	vmul.f32	s14, s14, s15
 800160c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001610:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001614:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161c:	d506      	bpl.n	800162c <Trajectory_Generator+0xfc>
		M = 1;
 800161e:	2301      	movs	r3, #1
 8001620:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		N = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 800162a:	e005      	b.n	8001638 <Trajectory_Generator+0x108>
	}
	else{
		M = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		N = 1;
 8001632:	2301      	movs	r3, #1
 8001634:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	}

    // Determine the direction of the motion
    if (target_p - initial_p < 0){
 8001638:	ed97 7a03 	vldr	s14, [r7, #12]
 800163c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001640:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001644:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164c:	d504      	bpl.n	8001658 <Trajectory_Generator+0x128>
    	genScurve->dir = -1;
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	22ff      	movs	r2, #255	@ 0xff
 8001652:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001656:	e003      	b.n	8001660 <Trajectory_Generator+0x130>
    }
    else{
    	genScurve->dir = 1;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    }

    // Calculate the required distance
    s = fabs(target_p - initial_p);
 8001660:	ed97 7a03 	vldr	s14, [r7, #12]
 8001664:	edd7 7a04 	vldr	s15, [r7, #16]
 8001668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800166c:	eef0 7ae7 	vabs.f32	s15, s15
 8001670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001674:	ee17 3a90 	vmov	r3, s15
 8001678:	637b      	str	r3, [r7, #52]	@ 0x34

    // Calculate the values of va, sa and sv
    va = (amax*amax)/jmax;
 800167a:	edd7 7a01 	vldr	s15, [r7, #4]
 800167e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001682:	edd7 7a00 	vldr	s15, [r7]
 8001686:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800168a:	ee16 0a90 	vmov	r0, s13
 800168e:	f7fe ff27 	bl	80004e0 <__aeabi_f2d>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    sa = 2*(amax*amax*amax)/(jmax*jmax);
 800169a:	edd7 7a01 	vldr	s15, [r7, #4]
 800169e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80016a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80016a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016aa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80016ae:	edd7 7a00 	vldr	s15, [r7]
 80016b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80016b6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016ba:	ee16 0a90 	vmov	r0, s13
 80016be:	f7fe ff0f 	bl	80004e0 <__aeabi_f2d>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    sv = vmax*((M * 2 * sqrt(vmax/jmax)) + N*((vmax/amax)+(amax/jmax)));
 80016ca:	68b8      	ldr	r0, [r7, #8]
 80016cc:	f7fe ff08 	bl	80004e0 <__aeabi_f2d>
 80016d0:	4604      	mov	r4, r0
 80016d2:	460d      	mov	r5, r1
 80016d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe feee 	bl	80004bc <__aeabi_i2d>
 80016e0:	4680      	mov	r8, r0
 80016e2:	4689      	mov	r9, r1
 80016e4:	ed97 7a02 	vldr	s14, [r7, #8]
 80016e8:	edd7 7a00 	vldr	s15, [r7]
 80016ec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016f0:	ee16 0a90 	vmov	r0, s13
 80016f4:	f7fe fef4 	bl	80004e0 <__aeabi_f2d>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	ec43 2b10 	vmov	d0, r2, r3
 8001700:	f00b fc86 	bl	800d010 <sqrt>
 8001704:	ec53 2b10 	vmov	r2, r3, d0
 8001708:	4640      	mov	r0, r8
 800170a:	4649      	mov	r1, r9
 800170c:	f7fe ff40 	bl	8000590 <__aeabi_dmul>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4690      	mov	r8, r2
 8001716:	4699      	mov	r9, r3
 8001718:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800171c:	ee07 3a90 	vmov	s15, r3
 8001720:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001724:	ed97 6a02 	vldr	s12, [r7, #8]
 8001728:	edd7 7a01 	vldr	s15, [r7, #4]
 800172c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001730:	edd7 5a01 	vldr	s11, [r7, #4]
 8001734:	ed97 6a00 	vldr	s12, [r7]
 8001738:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800173c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001744:	ee17 0a90 	vmov	r0, s15
 8001748:	f7fe feca 	bl	80004e0 <__aeabi_f2d>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4640      	mov	r0, r8
 8001752:	4649      	mov	r1, r9
 8001754:	f7fe fd66 	bl	8000224 <__adddf3>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4620      	mov	r0, r4
 800175e:	4629      	mov	r1, r5
 8001760:	f7fe ff16 	bl	8000590 <__aeabi_dmul>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	e9c7 2306 	strd	r2, r3, [r7, #24]

    // Determine the shape of the trajectory based on the values of va, sa and sv
    if ((vmax <= va) && (s >= sa)){
 800176c:	68b8      	ldr	r0, [r7, #8]
 800176e:	f7fe feb7 	bl	80004e0 <__aeabi_f2d>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800177a:	f7ff f98f 	bl	8000a9c <__aeabi_dcmpge>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d00f      	beq.n	80017a4 <Trajectory_Generator+0x274>
 8001784:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001786:	f7fe fe89 	bl	800049c <__aeabi_ui2d>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001792:	f7ff f979 	bl	8000a88 <__aeabi_dcmple>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <Trajectory_Generator+0x274>
        pattern = 1;
 800179c:	2301      	movs	r3, #1
 800179e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 80017a2:	e0ba      	b.n	800191a <Trajectory_Generator+0x3ea>
    }
    else if ((vmax > va) && (s < sa)){
 80017a4:	68b8      	ldr	r0, [r7, #8]
 80017a6:	f7fe fe9b 	bl	80004e0 <__aeabi_f2d>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80017b2:	f7ff f95f 	bl	8000a74 <__aeabi_dcmplt>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00f      	beq.n	80017dc <Trajectory_Generator+0x2ac>
 80017bc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80017be:	f7fe fe6d 	bl	800049c <__aeabi_ui2d>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017ca:	f7ff f971 	bl	8000ab0 <__aeabi_dcmpgt>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <Trajectory_Generator+0x2ac>
        pattern = 2;
 80017d4:	2302      	movs	r3, #2
 80017d6:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 80017da:	e09e      	b.n	800191a <Trajectory_Generator+0x3ea>
    }
    else if ((vmax < va) && (s < sa) && (s > sv)){
 80017dc:	68b8      	ldr	r0, [r7, #8]
 80017de:	f7fe fe7f 	bl	80004e0 <__aeabi_f2d>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80017ea:	f7ff f961 	bl	8000ab0 <__aeabi_dcmpgt>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d01b      	beq.n	800182c <Trajectory_Generator+0x2fc>
 80017f4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80017f6:	f7fe fe51 	bl	800049c <__aeabi_ui2d>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001802:	f7ff f955 	bl	8000ab0 <__aeabi_dcmpgt>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00f      	beq.n	800182c <Trajectory_Generator+0x2fc>
 800180c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800180e:	f7fe fe45 	bl	800049c <__aeabi_ui2d>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800181a:	f7ff f92b 	bl	8000a74 <__aeabi_dcmplt>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <Trajectory_Generator+0x2fc>
        pattern = 3;
 8001824:	2303      	movs	r3, #3
 8001826:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 800182a:	e076      	b.n	800191a <Trajectory_Generator+0x3ea>
    }
    else if ((vmax < va) && (s < sa) && (s < sv)){
 800182c:	68b8      	ldr	r0, [r7, #8]
 800182e:	f7fe fe57 	bl	80004e0 <__aeabi_f2d>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800183a:	f7ff f939 	bl	8000ab0 <__aeabi_dcmpgt>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d01b      	beq.n	800187c <Trajectory_Generator+0x34c>
 8001844:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001846:	f7fe fe29 	bl	800049c <__aeabi_ui2d>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001852:	f7ff f92d 	bl	8000ab0 <__aeabi_dcmpgt>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00f      	beq.n	800187c <Trajectory_Generator+0x34c>
 800185c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800185e:	f7fe fe1d 	bl	800049c <__aeabi_ui2d>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800186a:	f7ff f921 	bl	8000ab0 <__aeabi_dcmpgt>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <Trajectory_Generator+0x34c>
        pattern = 4;
 8001874:	2304      	movs	r3, #4
 8001876:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 800187a:	e04e      	b.n	800191a <Trajectory_Generator+0x3ea>
    }
    else if ((vmax >= va) && (s >= sa) && (s >= sv)){
 800187c:	68b8      	ldr	r0, [r7, #8]
 800187e:	f7fe fe2f 	bl	80004e0 <__aeabi_f2d>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800188a:	f7ff f8fd 	bl	8000a88 <__aeabi_dcmple>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d01b      	beq.n	80018cc <Trajectory_Generator+0x39c>
 8001894:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001896:	f7fe fe01 	bl	800049c <__aeabi_ui2d>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018a2:	f7ff f8f1 	bl	8000a88 <__aeabi_dcmple>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00f      	beq.n	80018cc <Trajectory_Generator+0x39c>
 80018ac:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80018ae:	f7fe fdf5 	bl	800049c <__aeabi_ui2d>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80018ba:	f7ff f8e5 	bl	8000a88 <__aeabi_dcmple>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <Trajectory_Generator+0x39c>
        pattern = 5;
 80018c4:	2305      	movs	r3, #5
 80018c6:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 80018ca:	e026      	b.n	800191a <Trajectory_Generator+0x3ea>
    }
    else if ((vmax >= va) && (s >= sa) && (s < sv)){
 80018cc:	68b8      	ldr	r0, [r7, #8]
 80018ce:	f7fe fe07 	bl	80004e0 <__aeabi_f2d>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80018da:	f7ff f8d5 	bl	8000a88 <__aeabi_dcmple>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d01a      	beq.n	800191a <Trajectory_Generator+0x3ea>
 80018e4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80018e6:	f7fe fdd9 	bl	800049c <__aeabi_ui2d>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018f2:	f7ff f8c9 	bl	8000a88 <__aeabi_dcmple>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00e      	beq.n	800191a <Trajectory_Generator+0x3ea>
 80018fc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80018fe:	f7fe fdcd 	bl	800049c <__aeabi_ui2d>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800190a:	f7ff f8d1 	bl	8000ab0 <__aeabi_dcmpgt>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d002      	beq.n	800191a <Trajectory_Generator+0x3ea>
        pattern = 6;
 8001914:	2306      	movs	r3, #6
 8001916:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    }

    // Calculate the values of tj, ta and tv for each trajectory pattern
    switch (pattern){
 800191a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800191e:	3b01      	subs	r3, #1
 8001920:	2b05      	cmp	r3, #5
 8001922:	f200 8187 	bhi.w	8001c34 <Trajectory_Generator+0x704>
 8001926:	a201      	add	r2, pc, #4	@ (adr r2, 800192c <Trajectory_Generator+0x3fc>)
 8001928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800192c:	08001945 	.word	0x08001945
 8001930:	080019b1 	.word	0x080019b1
 8001934:	08001a27 	.word	0x08001a27
 8001938:	08001a8f 	.word	0x08001a8f
 800193c:	08001af7 	.word	0x08001af7
 8001940:	08001b69 	.word	0x08001b69
        case 1:
            tj = (float)pow((vmax/jmax),(0.5));
 8001944:	ed97 7a02 	vldr	s14, [r7, #8]
 8001948:	edd7 7a00 	vldr	s15, [r7]
 800194c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001950:	ee16 0a90 	vmov	r0, s13
 8001954:	f7fe fdc4 	bl	80004e0 <__aeabi_f2d>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	ed9f 1b7e 	vldr	d1, [pc, #504]	@ 8001b58 <Trajectory_Generator+0x628>
 8001960:	ec43 2b10 	vmov	d0, r2, r3
 8001964:	f00b fae4 	bl	800cf30 <pow>
 8001968:	ec53 2b10 	vmov	r2, r3, d0
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	f7ff f8de 	bl	8000b30 <__aeabi_d2f>
 8001974:	4603      	mov	r3, r0
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fdb2 	bl	80004e0 <__aeabi_f2d>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
            ta = tj;
 8001984:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001988:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
            tv = s/vmax;
 800198c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800198e:	ee07 3a90 	vmov	s15, r3
 8001992:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001996:	edd7 7a02 	vldr	s15, [r7, #8]
 800199a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800199e:	ee16 0a90 	vmov	r0, s13
 80019a2:	f7fe fd9d 	bl	80004e0 <__aeabi_f2d>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
            break;
 80019ae:	e141      	b.n	8001c34 <Trajectory_Generator+0x704>
        case 2:
            tj = (float)pow(s/(2.0*jmax),1.0/3.0);
 80019b0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80019b2:	f7fe fd73 	bl	800049c <__aeabi_ui2d>
 80019b6:	4604      	mov	r4, r0
 80019b8:	460d      	mov	r5, r1
 80019ba:	6838      	ldr	r0, [r7, #0]
 80019bc:	f7fe fd90 	bl	80004e0 <__aeabi_f2d>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	f7fe fc2e 	bl	8000224 <__adddf3>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4620      	mov	r0, r4
 80019ce:	4629      	mov	r1, r5
 80019d0:	f7fe ff08 	bl	80007e4 <__aeabi_ddiv>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	ec43 2b17 	vmov	d7, r2, r3
 80019dc:	ed9f 1b60 	vldr	d1, [pc, #384]	@ 8001b60 <Trajectory_Generator+0x630>
 80019e0:	eeb0 0a47 	vmov.f32	s0, s14
 80019e4:	eef0 0a67 	vmov.f32	s1, s15
 80019e8:	f00b faa2 	bl	800cf30 <pow>
 80019ec:	ec53 2b10 	vmov	r2, r3, d0
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	f7ff f89c 	bl	8000b30 <__aeabi_d2f>
 80019f8:	4603      	mov	r3, r0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe fd70 	bl	80004e0 <__aeabi_f2d>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
            ta = tj;
 8001a08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001a0c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
            tv = 2*tj;
 8001a10:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	f7fe fc04 	bl	8000224 <__adddf3>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
            break;
 8001a24:	e106      	b.n	8001c34 <Trajectory_Generator+0x704>
        case 3:
            tj = (float)pow((s/(2*jmax)),(1.0/3.0));
 8001a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a28:	ee07 3a90 	vmov	s15, r3
 8001a2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a30:	edd7 7a00 	vldr	s15, [r7]
 8001a34:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a38:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a3c:	ee16 0a90 	vmov	r0, s13
 8001a40:	f7fe fd4e 	bl	80004e0 <__aeabi_f2d>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	ed9f 1b45 	vldr	d1, [pc, #276]	@ 8001b60 <Trajectory_Generator+0x630>
 8001a4c:	ec43 2b10 	vmov	d0, r2, r3
 8001a50:	f00b fa6e 	bl	800cf30 <pow>
 8001a54:	ec53 2b10 	vmov	r2, r3, d0
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f7ff f868 	bl	8000b30 <__aeabi_d2f>
 8001a60:	4603      	mov	r3, r0
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fd3c 	bl	80004e0 <__aeabi_f2d>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
            ta = tj;
 8001a70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001a74:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
            tv = 2*tj;
 8001a78:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	f7fe fbd0 	bl	8000224 <__adddf3>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
            break;
 8001a8c:	e0d2      	b.n	8001c34 <Trajectory_Generator+0x704>
        case 4:
            tj = (float)pow((s/(2*jmax)),(1.0/3.0));
 8001a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a90:	ee07 3a90 	vmov	s15, r3
 8001a94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a98:	edd7 7a00 	vldr	s15, [r7]
 8001a9c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001aa0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001aa4:	ee16 0a90 	vmov	r0, s13
 8001aa8:	f7fe fd1a 	bl	80004e0 <__aeabi_f2d>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	ed9f 1b2b 	vldr	d1, [pc, #172]	@ 8001b60 <Trajectory_Generator+0x630>
 8001ab4:	ec43 2b10 	vmov	d0, r2, r3
 8001ab8:	f00b fa3a 	bl	800cf30 <pow>
 8001abc:	ec53 2b10 	vmov	r2, r3, d0
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f7ff f834 	bl	8000b30 <__aeabi_d2f>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fd08 	bl	80004e0 <__aeabi_f2d>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
            ta = tj;
 8001ad8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001adc:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
            tv = 2*tj;
 8001ae0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	f7fe fb9c 	bl	8000224 <__adddf3>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
            break;
 8001af4:	e09e      	b.n	8001c34 <Trajectory_Generator+0x704>
        case 5:
            tj = amax/jmax;
 8001af6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001afa:	edd7 7a00 	vldr	s15, [r7]
 8001afe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b02:	ee16 0a90 	vmov	r0, s13
 8001b06:	f7fe fceb 	bl	80004e0 <__aeabi_f2d>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
            ta = vmax/amax;
 8001b12:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b16:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b1a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b1e:	ee16 0a90 	vmov	r0, s13
 8001b22:	f7fe fcdd 	bl	80004e0 <__aeabi_f2d>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
            tv = s/vmax;
 8001b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b30:	ee07 3a90 	vmov	s15, r3
 8001b34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b38:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b3c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b40:	ee16 0a90 	vmov	r0, s13
 8001b44:	f7fe fccc 	bl	80004e0 <__aeabi_f2d>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
            break;
 8001b50:	e070      	b.n	8001c34 <Trajectory_Generator+0x704>
 8001b52:	bf00      	nop
 8001b54:	f3af 8000 	nop.w
 8001b58:	00000000 	.word	0x00000000
 8001b5c:	3fe00000 	.word	0x3fe00000
 8001b60:	55555555 	.word	0x55555555
 8001b64:	3fd55555 	.word	0x3fd55555
        case 6:
            tj = amax/jmax;
 8001b68:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b6c:	edd7 7a00 	vldr	s15, [r7]
 8001b70:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b74:	ee16 0a90 	vmov	r0, s13
 8001b78:	f7fe fcb2 	bl	80004e0 <__aeabi_f2d>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
            ta = 0.5*(sqrt(((4*s*jmax*jmax)+(amax*amax*amax)) / (amax * jmax*jmax)) - (amax/jmax));
 8001b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	ee07 3a90 	vmov	s15, r3
 8001b8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b90:	edd7 7a00 	vldr	s15, [r7]
 8001b94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b98:	edd7 7a00 	vldr	s15, [r7]
 8001b9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ba4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001ba8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bb4:	edd7 6a01 	vldr	s13, [r7, #4]
 8001bb8:	edd7 7a00 	vldr	s15, [r7]
 8001bbc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bc0:	edd7 7a00 	vldr	s15, [r7]
 8001bc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bc8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001bcc:	ee16 0a90 	vmov	r0, s13
 8001bd0:	f7fe fc86 	bl	80004e0 <__aeabi_f2d>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	ec43 2b10 	vmov	d0, r2, r3
 8001bdc:	f00b fa18 	bl	800d010 <sqrt>
 8001be0:	ec55 4b10 	vmov	r4, r5, d0
 8001be4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001be8:	edd7 7a00 	vldr	s15, [r7]
 8001bec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001bf0:	ee16 0a90 	vmov	r0, s13
 8001bf4:	f7fe fc74 	bl	80004e0 <__aeabi_f2d>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4620      	mov	r0, r4
 8001bfe:	4629      	mov	r1, r5
 8001c00:	f7fe fb0e 	bl	8000220 <__aeabi_dsub>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	4b34      	ldr	r3, [pc, #208]	@ (8001ce4 <Trajectory_Generator+0x7b4>)
 8001c12:	f7fe fcbd 	bl	8000590 <__aeabi_dmul>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
            tv = ta + tj;
 8001c1e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001c22:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001c26:	f7fe fafd 	bl	8000224 <__adddf3>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
            break;
 8001c32:	bf00      	nop
    }
    // Calculate the values of t1 to t7 and the total time
    genScurve->t1 = tj;
 8001c34:	6979      	ldr	r1, [r7, #20]
 8001c36:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001c3a:	e9c1 2300 	strd	r2, r3, [r1]
    genScurve->t2 = ta;
 8001c3e:	6979      	ldr	r1, [r7, #20]
 8001c40:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001c44:	e9c1 2302 	strd	r2, r3, [r1, #8]
    genScurve->t3 = ta + tj;
 8001c48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001c4c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001c50:	f7fe fae8 	bl	8000224 <__adddf3>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	6979      	ldr	r1, [r7, #20]
 8001c5a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    genScurve->t4 = tv;
 8001c5e:	6979      	ldr	r1, [r7, #20]
 8001c60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001c64:	e9c1 2306 	strd	r2, r3, [r1, #24]
    genScurve->t5 = tv + tj;
 8001c68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001c6c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001c70:	f7fe fad8 	bl	8000224 <__adddf3>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	6979      	ldr	r1, [r7, #20]
 8001c7a:	e9c1 2308 	strd	r2, r3, [r1, #32]
    genScurve->t6 = tv + ta;
 8001c7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001c82:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001c86:	f7fe facd 	bl	8000224 <__adddf3>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	6979      	ldr	r1, [r7, #20]
 8001c90:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    genScurve->t7 = tv + tj + ta;
 8001c94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001c98:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001c9c:	f7fe fac2 	bl	8000224 <__adddf3>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001cac:	f7fe faba 	bl	8000224 <__adddf3>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	6979      	ldr	r1, [r7, #20]
 8001cb6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    genScurve->time_total = genScurve->t7;
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001cc0:	6979      	ldr	r1, [r7, #20]
 8001cc2:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    if (s == 0){
 8001cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d106      	bne.n	8001cda <Trajectory_Generator+0x7aa>
    	genScurve->time_total = 0;
 8001ccc:	6979      	ldr	r1, [r7, #20]
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    }
}
 8001cda:	bf00      	nop
 8001cdc:	3758      	adds	r7, #88	@ 0x58
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ce4:	3fe00000 	.word	0x3fe00000

08001ce8 <Trajectory_Evaluated>:

void Trajectory_Evaluated(volatile Scurve_GenStruct *genScurve,volatile Scurve_EvaStruct *evaScurve,float initial_p,float target_p,float vmax,float amax,float jmax){
 8001ce8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cec:	b088      	sub	sp, #32
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	61f8      	str	r0, [r7, #28]
 8001cf2:	61b9      	str	r1, [r7, #24]
 8001cf4:	ed87 0a05 	vstr	s0, [r7, #20]
 8001cf8:	edc7 0a04 	vstr	s1, [r7, #16]
 8001cfc:	ed87 1a03 	vstr	s2, [r7, #12]
 8001d00:	edc7 1a02 	vstr	s3, [r7, #8]
 8001d04:	ed87 2a01 	vstr	s4, [r7, #4]
	static double v1,v2,v3,v4,v5,v6 = 0.0;
	static double a1,a2,a3,a4,a5,a6 = 0.0;

	evaScurve->t += 1.0/1000.0;
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001d0e:	a3d4      	add	r3, pc, #848	@ (adr r3, 8002060 <Trajectory_Evaluated+0x378>)
 8001d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d14:	f7fe fa86 	bl	8000224 <__adddf3>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	69b9      	ldr	r1, [r7, #24]
 8001d1e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	if (evaScurve->t <= genScurve->time_total){
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001d2e:	f7fe feab 	bl	8000a88 <__aeabi_dcmple>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 86e0 	beq.w	8002afa <Trajectory_Evaluated+0xe12>
		evaScurve->isFinised = false;
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2020 	strb.w	r2, [r3, #32]
		if(evaScurve->t <= genScurve->t1){
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4e:	f7fe fe9b 	bl	8000a88 <__aeabi_dcmple>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80b2 	beq.w	8001ebe <Trajectory_Evaluated+0x1d6>
			evaScurve->setposition = initial_p + 1/6.0 * jmax * pow(evaScurve->t,3.0) * genScurve->dir;
 8001d5a:	6978      	ldr	r0, [r7, #20]
 8001d5c:	f7fe fbc0 	bl	80004e0 <__aeabi_f2d>
 8001d60:	4604      	mov	r4, r0
 8001d62:	460d      	mov	r5, r1
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7fe fbbb 	bl	80004e0 <__aeabi_f2d>
 8001d6a:	a3bf      	add	r3, pc, #764	@ (adr r3, 8002068 <Trajectory_Evaluated+0x380>)
 8001d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d70:	f7fe fc0e 	bl	8000590 <__aeabi_dmul>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4690      	mov	r8, r2
 8001d7a:	4699      	mov	r9, r3
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	ed93 7b06 	vldr	d7, [r3, #24]
 8001d82:	ed9f 1ba9 	vldr	d1, [pc, #676]	@ 8002028 <Trajectory_Evaluated+0x340>
 8001d86:	eeb0 0a47 	vmov.f32	s0, s14
 8001d8a:	eef0 0a67 	vmov.f32	s1, s15
 8001d8e:	f00b f8cf 	bl	800cf30 <pow>
 8001d92:	ec53 2b10 	vmov	r2, r3, d0
 8001d96:	4640      	mov	r0, r8
 8001d98:	4649      	mov	r1, r9
 8001d9a:	f7fe fbf9 	bl	8000590 <__aeabi_dmul>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4690      	mov	r8, r2
 8001da4:	4699      	mov	r9, r3
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001dac:	b25b      	sxtb	r3, r3
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe fb84 	bl	80004bc <__aeabi_i2d>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4640      	mov	r0, r8
 8001dba:	4649      	mov	r1, r9
 8001dbc:	f7fe fbe8 	bl	8000590 <__aeabi_dmul>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4620      	mov	r0, r4
 8001dc6:	4629      	mov	r1, r5
 8001dc8:	f7fe fa2c 	bl	8000224 <__adddf3>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	69b9      	ldr	r1, [r7, #24]
 8001dd2:	e9c1 2300 	strd	r2, r3, [r1]
			evaScurve->setvelocity =  1/2.0 * jmax * evaScurve->t * evaScurve->t * genScurve->dir;
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7fe fb82 	bl	80004e0 <__aeabi_f2d>
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	4b95      	ldr	r3, [pc, #596]	@ (8002038 <Trajectory_Evaluated+0x350>)
 8001de2:	f7fe fbd5 	bl	8000590 <__aeabi_dmul>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4610      	mov	r0, r2
 8001dec:	4619      	mov	r1, r3
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001df4:	f7fe fbcc 	bl	8000590 <__aeabi_dmul>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001e06:	f7fe fbc3 	bl	8000590 <__aeabi_dmul>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4614      	mov	r4, r2
 8001e10:	461d      	mov	r5, r3
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e18:	b25b      	sxtb	r3, r3
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe fb4e 	bl	80004bc <__aeabi_i2d>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4620      	mov	r0, r4
 8001e26:	4629      	mov	r1, r5
 8001e28:	f7fe fbb2 	bl	8000590 <__aeabi_dmul>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	69b9      	ldr	r1, [r7, #24]
 8001e32:	e9c1 2302 	strd	r2, r3, [r1, #8]
			evaScurve->setacceleration = jmax *evaScurve->t* genScurve->dir;
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7fe fb52 	bl	80004e0 <__aeabi_f2d>
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001e42:	f7fe fba5 	bl	8000590 <__aeabi_dmul>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4614      	mov	r4, r2
 8001e4c:	461d      	mov	r5, r3
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e54:	b25b      	sxtb	r3, r3
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fb30 	bl	80004bc <__aeabi_i2d>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4620      	mov	r0, r4
 8001e62:	4629      	mov	r1, r5
 8001e64:	f7fe fb94 	bl	8000590 <__aeabi_dmul>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	69b9      	ldr	r1, [r7, #24]
 8001e6e:	e9c1 2304 	strd	r2, r3, [r1, #16]
			p2 = evaScurve->setposition;
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e78:	4970      	ldr	r1, [pc, #448]	@ (800203c <Trajectory_Evaluated+0x354>)
 8001e7a:	e9c1 2300 	strd	r2, r3, [r1]
			p1 = p2;
 8001e7e:	4b6f      	ldr	r3, [pc, #444]	@ (800203c <Trajectory_Evaluated+0x354>)
 8001e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e84:	496e      	ldr	r1, [pc, #440]	@ (8002040 <Trajectory_Evaluated+0x358>)
 8001e86:	e9c1 2300 	strd	r2, r3, [r1]
			v2 = evaScurve->setvelocity;
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e90:	496c      	ldr	r1, [pc, #432]	@ (8002044 <Trajectory_Evaluated+0x35c>)
 8001e92:	e9c1 2300 	strd	r2, r3, [r1]
			v1 = v2;
 8001e96:	4b6b      	ldr	r3, [pc, #428]	@ (8002044 <Trajectory_Evaluated+0x35c>)
 8001e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9c:	496a      	ldr	r1, [pc, #424]	@ (8002048 <Trajectory_Evaluated+0x360>)
 8001e9e:	e9c1 2300 	strd	r2, r3, [r1]
			a2 = evaScurve->setacceleration;
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001ea8:	4968      	ldr	r1, [pc, #416]	@ (800204c <Trajectory_Evaluated+0x364>)
 8001eaa:	e9c1 2300 	strd	r2, r3, [r1]
			a1 = a2;
 8001eae:	4b67      	ldr	r3, [pc, #412]	@ (800204c <Trajectory_Evaluated+0x364>)
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	4966      	ldr	r1, [pc, #408]	@ (8002050 <Trajectory_Evaluated+0x368>)
 8001eb6:	e9c1 2300 	strd	r2, r3, [r1]
			evaScurve->setvelocity = v6 + a6 * (evaScurve->t - genScurve->t6) + 1.0/2.0 * jmax*genScurve->dir * pow((evaScurve->t - genScurve->t6),2);
			evaScurve->setacceleration = a6 + genScurve->dir *jmax * (evaScurve->t - genScurve->t6);
		}
	}
	else{evaScurve->isFinised = true;}
}
 8001eba:	f000 be23 	b.w	8002b04 <Trajectory_Evaluated+0xe1c>
		else if (genScurve->t1 < evaScurve->t && evaScurve->t <= genScurve->t2){
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001eca:	f7fe fdd3 	bl	8000a74 <__aeabi_dcmplt>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 80cd 	beq.w	8002070 <Trajectory_Evaluated+0x388>
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ee2:	f7fe fdd1 	bl	8000a88 <__aeabi_dcmple>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 80c1 	beq.w	8002070 <Trajectory_Evaluated+0x388>
			evaScurve->setposition =  p1 + v1 * (evaScurve->t - genScurve->t1) + 1/2.0 * a1 * pow((evaScurve->t - genScurve->t1),2.0);
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efa:	f7fe f991 	bl	8000220 <__aeabi_dsub>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4610      	mov	r0, r2
 8001f04:	4619      	mov	r1, r3
 8001f06:	4b50      	ldr	r3, [pc, #320]	@ (8002048 <Trajectory_Evaluated+0x360>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe fb40 	bl	8000590 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	4b49      	ldr	r3, [pc, #292]	@ (8002040 <Trajectory_Evaluated+0x358>)
 8001f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1e:	f7fe f981 	bl	8000224 <__adddf3>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4614      	mov	r4, r2
 8001f28:	461d      	mov	r5, r3
 8001f2a:	4b49      	ldr	r3, [pc, #292]	@ (8002050 <Trajectory_Evaluated+0x368>)
 8001f2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f30:	f04f 0200 	mov.w	r2, #0
 8001f34:	4b40      	ldr	r3, [pc, #256]	@ (8002038 <Trajectory_Evaluated+0x350>)
 8001f36:	f7fe fb2b 	bl	8000590 <__aeabi_dmul>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4690      	mov	r8, r2
 8001f40:	4699      	mov	r9, r3
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4e:	f7fe f967 	bl	8000220 <__aeabi_dsub>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	ec43 2b17 	vmov	d7, r2, r3
 8001f5a:	ed9f 1b35 	vldr	d1, [pc, #212]	@ 8002030 <Trajectory_Evaluated+0x348>
 8001f5e:	eeb0 0a47 	vmov.f32	s0, s14
 8001f62:	eef0 0a67 	vmov.f32	s1, s15
 8001f66:	f00a ffe3 	bl	800cf30 <pow>
 8001f6a:	ec53 2b10 	vmov	r2, r3, d0
 8001f6e:	4640      	mov	r0, r8
 8001f70:	4649      	mov	r1, r9
 8001f72:	f7fe fb0d 	bl	8000590 <__aeabi_dmul>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	4629      	mov	r1, r5
 8001f7e:	f7fe f951 	bl	8000224 <__adddf3>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	69b9      	ldr	r1, [r7, #24]
 8001f88:	e9c1 2300 	strd	r2, r3, [r1]
			evaScurve->setvelocity = v1 + a1*(evaScurve->t- genScurve->t1);
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f98:	f7fe f942 	bl	8000220 <__aeabi_dsub>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4b2a      	ldr	r3, [pc, #168]	@ (8002050 <Trajectory_Evaluated+0x368>)
 8001fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001faa:	f7fe faf1 	bl	8000590 <__aeabi_dmul>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4b24      	ldr	r3, [pc, #144]	@ (8002048 <Trajectory_Evaluated+0x360>)
 8001fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbc:	f7fe f932 	bl	8000224 <__adddf3>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	69b9      	ldr	r1, [r7, #24]
 8001fc6:	e9c1 2302 	strd	r2, r3, [r1, #8]
			evaScurve->setacceleration = a1;
 8001fca:	4b21      	ldr	r3, [pc, #132]	@ (8002050 <Trajectory_Evaluated+0x368>)
 8001fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd0:	69b9      	ldr	r1, [r7, #24]
 8001fd2:	e9c1 2304 	strd	r2, r3, [r1, #16]
			p3 = evaScurve->setposition;
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fdc:	491d      	ldr	r1, [pc, #116]	@ (8002054 <Trajectory_Evaluated+0x36c>)
 8001fde:	e9c1 2300 	strd	r2, r3, [r1]
			p2 = p3;
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8002054 <Trajectory_Evaluated+0x36c>)
 8001fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe8:	4914      	ldr	r1, [pc, #80]	@ (800203c <Trajectory_Evaluated+0x354>)
 8001fea:	e9c1 2300 	strd	r2, r3, [r1]
			v3 = evaScurve->setvelocity;
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ff4:	4918      	ldr	r1, [pc, #96]	@ (8002058 <Trajectory_Evaluated+0x370>)
 8001ff6:	e9c1 2300 	strd	r2, r3, [r1]
			v2 = v3;
 8001ffa:	4b17      	ldr	r3, [pc, #92]	@ (8002058 <Trajectory_Evaluated+0x370>)
 8001ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002000:	4910      	ldr	r1, [pc, #64]	@ (8002044 <Trajectory_Evaluated+0x35c>)
 8002002:	e9c1 2300 	strd	r2, r3, [r1]
			a3 = evaScurve->setacceleration;
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800200c:	4913      	ldr	r1, [pc, #76]	@ (800205c <Trajectory_Evaluated+0x374>)
 800200e:	e9c1 2300 	strd	r2, r3, [r1]
			a2 = a3;
 8002012:	4b12      	ldr	r3, [pc, #72]	@ (800205c <Trajectory_Evaluated+0x374>)
 8002014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002018:	490c      	ldr	r1, [pc, #48]	@ (800204c <Trajectory_Evaluated+0x364>)
 800201a:	e9c1 2300 	strd	r2, r3, [r1]
 800201e:	f000 bd71 	b.w	8002b04 <Trajectory_Evaluated+0xe1c>
 8002022:	bf00      	nop
 8002024:	f3af 8000 	nop.w
 8002028:	00000000 	.word	0x00000000
 800202c:	40080000 	.word	0x40080000
 8002030:	00000000 	.word	0x00000000
 8002034:	40000000 	.word	0x40000000
 8002038:	3fe00000 	.word	0x3fe00000
 800203c:	20000618 	.word	0x20000618
 8002040:	20000610 	.word	0x20000610
 8002044:	20000640 	.word	0x20000640
 8002048:	20000648 	.word	0x20000648
 800204c:	20000650 	.word	0x20000650
 8002050:	20000658 	.word	0x20000658
 8002054:	20000620 	.word	0x20000620
 8002058:	20000660 	.word	0x20000660
 800205c:	20000668 	.word	0x20000668
 8002060:	d2f1a9fc 	.word	0xd2f1a9fc
 8002064:	3f50624d 	.word	0x3f50624d
 8002068:	55555555 	.word	0x55555555
 800206c:	3fc55555 	.word	0x3fc55555
		else if (genScurve->t2 <= evaScurve->t && evaScurve->t <= genScurve->t3){
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800207c:	f7fe fd04 	bl	8000a88 <__aeabi_dcmple>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 819a 	beq.w	80023bc <Trajectory_Evaluated+0x6d4>
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002094:	f7fe fcf8 	bl	8000a88 <__aeabi_dcmple>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 818e 	beq.w	80023bc <Trajectory_Evaluated+0x6d4>
			evaScurve->setposition = p2 + v2 * (evaScurve->t - genScurve->t2) + 1/2.0 * a2 * pow((evaScurve->t - genScurve->t2),2.0) + 1.0/6.0 * - jmax * genScurve->dir * pow((evaScurve->t - genScurve->t2),3.0);
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80020ac:	f7fe f8b8 	bl	8000220 <__aeabi_dsub>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	4610      	mov	r0, r2
 80020b6:	4619      	mov	r1, r3
 80020b8:	4bb3      	ldr	r3, [pc, #716]	@ (8002388 <Trajectory_Evaluated+0x6a0>)
 80020ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020be:	f7fe fa67 	bl	8000590 <__aeabi_dmul>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4610      	mov	r0, r2
 80020c8:	4619      	mov	r1, r3
 80020ca:	4bb0      	ldr	r3, [pc, #704]	@ (800238c <Trajectory_Evaluated+0x6a4>)
 80020cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d0:	f7fe f8a8 	bl	8000224 <__adddf3>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4614      	mov	r4, r2
 80020da:	461d      	mov	r5, r3
 80020dc:	4bac      	ldr	r3, [pc, #688]	@ (8002390 <Trajectory_Evaluated+0x6a8>)
 80020de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	4bab      	ldr	r3, [pc, #684]	@ (8002394 <Trajectory_Evaluated+0x6ac>)
 80020e8:	f7fe fa52 	bl	8000590 <__aeabi_dmul>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4690      	mov	r8, r2
 80020f2:	4699      	mov	r9, r3
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002100:	f7fe f88e 	bl	8000220 <__aeabi_dsub>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	ec43 2b17 	vmov	d7, r2, r3
 800210c:	ed9f 1b98 	vldr	d1, [pc, #608]	@ 8002370 <Trajectory_Evaluated+0x688>
 8002110:	eeb0 0a47 	vmov.f32	s0, s14
 8002114:	eef0 0a67 	vmov.f32	s1, s15
 8002118:	f00a ff0a 	bl	800cf30 <pow>
 800211c:	ec53 2b10 	vmov	r2, r3, d0
 8002120:	4640      	mov	r0, r8
 8002122:	4649      	mov	r1, r9
 8002124:	f7fe fa34 	bl	8000590 <__aeabi_dmul>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	4620      	mov	r0, r4
 800212e:	4629      	mov	r1, r5
 8002130:	f7fe f878 	bl	8000224 <__adddf3>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4614      	mov	r4, r2
 800213a:	461d      	mov	r5, r3
 800213c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002140:	eef1 7a67 	vneg.f32	s15, s15
 8002144:	ee17 3a90 	vmov	r3, s15
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe f9c9 	bl	80004e0 <__aeabi_f2d>
 800214e:	a38a      	add	r3, pc, #552	@ (adr r3, 8002378 <Trajectory_Evaluated+0x690>)
 8002150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002154:	f7fe fa1c 	bl	8000590 <__aeabi_dmul>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4690      	mov	r8, r2
 800215e:	4699      	mov	r9, r3
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002166:	b25b      	sxtb	r3, r3
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe f9a7 	bl	80004bc <__aeabi_i2d>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4640      	mov	r0, r8
 8002174:	4649      	mov	r1, r9
 8002176:	f7fe fa0b 	bl	8000590 <__aeabi_dmul>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4690      	mov	r8, r2
 8002180:	4699      	mov	r9, r3
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800218e:	f7fe f847 	bl	8000220 <__aeabi_dsub>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	ec43 2b17 	vmov	d7, r2, r3
 800219a:	ed9f 1b79 	vldr	d1, [pc, #484]	@ 8002380 <Trajectory_Evaluated+0x698>
 800219e:	eeb0 0a47 	vmov.f32	s0, s14
 80021a2:	eef0 0a67 	vmov.f32	s1, s15
 80021a6:	f00a fec3 	bl	800cf30 <pow>
 80021aa:	ec53 2b10 	vmov	r2, r3, d0
 80021ae:	4640      	mov	r0, r8
 80021b0:	4649      	mov	r1, r9
 80021b2:	f7fe f9ed 	bl	8000590 <__aeabi_dmul>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	4620      	mov	r0, r4
 80021bc:	4629      	mov	r1, r5
 80021be:	f7fe f831 	bl	8000224 <__adddf3>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	69b9      	ldr	r1, [r7, #24]
 80021c8:	e9c1 2300 	strd	r2, r3, [r1]
			evaScurve->setvelocity = v2 + a2 * (evaScurve->t - genScurve->t2) + 1/2.0 * -jmax * genScurve->dir * pow((evaScurve->t - genScurve->t2),2.0);
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80021d8:	f7fe f822 	bl	8000220 <__aeabi_dsub>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	4b6a      	ldr	r3, [pc, #424]	@ (8002390 <Trajectory_Evaluated+0x6a8>)
 80021e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ea:	f7fe f9d1 	bl	8000590 <__aeabi_dmul>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4610      	mov	r0, r2
 80021f4:	4619      	mov	r1, r3
 80021f6:	4b64      	ldr	r3, [pc, #400]	@ (8002388 <Trajectory_Evaluated+0x6a0>)
 80021f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fc:	f7fe f812 	bl	8000224 <__adddf3>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4614      	mov	r4, r2
 8002206:	461d      	mov	r5, r3
 8002208:	edd7 7a01 	vldr	s15, [r7, #4]
 800220c:	eef1 7a67 	vneg.f32	s15, s15
 8002210:	ee17 3a90 	vmov	r3, s15
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe f963 	bl	80004e0 <__aeabi_f2d>
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	4b5d      	ldr	r3, [pc, #372]	@ (8002394 <Trajectory_Evaluated+0x6ac>)
 8002220:	f7fe f9b6 	bl	8000590 <__aeabi_dmul>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4690      	mov	r8, r2
 800222a:	4699      	mov	r9, r3
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002232:	b25b      	sxtb	r3, r3
 8002234:	4618      	mov	r0, r3
 8002236:	f7fe f941 	bl	80004bc <__aeabi_i2d>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	4640      	mov	r0, r8
 8002240:	4649      	mov	r1, r9
 8002242:	f7fe f9a5 	bl	8000590 <__aeabi_dmul>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4690      	mov	r8, r2
 800224c:	4699      	mov	r9, r3
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800225a:	f7fd ffe1 	bl	8000220 <__aeabi_dsub>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	ec43 2b17 	vmov	d7, r2, r3
 8002266:	ed9f 1b42 	vldr	d1, [pc, #264]	@ 8002370 <Trajectory_Evaluated+0x688>
 800226a:	eeb0 0a47 	vmov.f32	s0, s14
 800226e:	eef0 0a67 	vmov.f32	s1, s15
 8002272:	f00a fe5d 	bl	800cf30 <pow>
 8002276:	ec53 2b10 	vmov	r2, r3, d0
 800227a:	4640      	mov	r0, r8
 800227c:	4649      	mov	r1, r9
 800227e:	f7fe f987 	bl	8000590 <__aeabi_dmul>
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	4620      	mov	r0, r4
 8002288:	4629      	mov	r1, r5
 800228a:	f7fd ffcb 	bl	8000224 <__adddf3>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	69b9      	ldr	r1, [r7, #24]
 8002294:	e9c1 2302 	strd	r2, r3, [r1, #8]
			evaScurve->setacceleration = a2 - (jmax * (evaScurve->t - genScurve->t2))*genScurve->dir;
 8002298:	4b3d      	ldr	r3, [pc, #244]	@ (8002390 <Trajectory_Evaluated+0x6a8>)
 800229a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7fe f91e 	bl	80004e0 <__aeabi_f2d>
 80022a4:	4680      	mov	r8, r0
 80022a6:	4689      	mov	r9, r1
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022b4:	f7fd ffb4 	bl	8000220 <__aeabi_dsub>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4640      	mov	r0, r8
 80022be:	4649      	mov	r1, r9
 80022c0:	f7fe f966 	bl	8000590 <__aeabi_dmul>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4690      	mov	r8, r2
 80022ca:	4699      	mov	r9, r3
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022d2:	b25b      	sxtb	r3, r3
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe f8f1 	bl	80004bc <__aeabi_i2d>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	4640      	mov	r0, r8
 80022e0:	4649      	mov	r1, r9
 80022e2:	f7fe f955 	bl	8000590 <__aeabi_dmul>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	4620      	mov	r0, r4
 80022ec:	4629      	mov	r1, r5
 80022ee:	f7fd ff97 	bl	8000220 <__aeabi_dsub>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	69b9      	ldr	r1, [r7, #24]
 80022f8:	e9c1 2304 	strd	r2, r3, [r1, #16]
			p6 = evaScurve->setposition;
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002302:	4925      	ldr	r1, [pc, #148]	@ (8002398 <Trajectory_Evaluated+0x6b0>)
 8002304:	e9c1 2300 	strd	r2, r3, [r1]
			p4 = p6;
 8002308:	4b23      	ldr	r3, [pc, #140]	@ (8002398 <Trajectory_Evaluated+0x6b0>)
 800230a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230e:	4923      	ldr	r1, [pc, #140]	@ (800239c <Trajectory_Evaluated+0x6b4>)
 8002310:	e9c1 2300 	strd	r2, r3, [r1]
			p3 = p4;
 8002314:	4b21      	ldr	r3, [pc, #132]	@ (800239c <Trajectory_Evaluated+0x6b4>)
 8002316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231a:	4921      	ldr	r1, [pc, #132]	@ (80023a0 <Trajectory_Evaluated+0x6b8>)
 800231c:	e9c1 2300 	strd	r2, r3, [r1]
			v6 = evaScurve->setvelocity;
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002326:	491f      	ldr	r1, [pc, #124]	@ (80023a4 <Trajectory_Evaluated+0x6bc>)
 8002328:	e9c1 2300 	strd	r2, r3, [r1]
			v4 = v6;
 800232c:	4b1d      	ldr	r3, [pc, #116]	@ (80023a4 <Trajectory_Evaluated+0x6bc>)
 800232e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002332:	491d      	ldr	r1, [pc, #116]	@ (80023a8 <Trajectory_Evaluated+0x6c0>)
 8002334:	e9c1 2300 	strd	r2, r3, [r1]
			v3 = v4;
 8002338:	4b1b      	ldr	r3, [pc, #108]	@ (80023a8 <Trajectory_Evaluated+0x6c0>)
 800233a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233e:	491b      	ldr	r1, [pc, #108]	@ (80023ac <Trajectory_Evaluated+0x6c4>)
 8002340:	e9c1 2300 	strd	r2, r3, [r1]
			a6 = evaScurve->setacceleration;
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800234a:	4919      	ldr	r1, [pc, #100]	@ (80023b0 <Trajectory_Evaluated+0x6c8>)
 800234c:	e9c1 2300 	strd	r2, r3, [r1]
			a4 = a6;
 8002350:	4b17      	ldr	r3, [pc, #92]	@ (80023b0 <Trajectory_Evaluated+0x6c8>)
 8002352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002356:	4917      	ldr	r1, [pc, #92]	@ (80023b4 <Trajectory_Evaluated+0x6cc>)
 8002358:	e9c1 2300 	strd	r2, r3, [r1]
			a3 = a4;
 800235c:	4b15      	ldr	r3, [pc, #84]	@ (80023b4 <Trajectory_Evaluated+0x6cc>)
 800235e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002362:	4915      	ldr	r1, [pc, #84]	@ (80023b8 <Trajectory_Evaluated+0x6d0>)
 8002364:	e9c1 2300 	strd	r2, r3, [r1]
 8002368:	e3cc      	b.n	8002b04 <Trajectory_Evaluated+0xe1c>
 800236a:	bf00      	nop
 800236c:	f3af 8000 	nop.w
 8002370:	00000000 	.word	0x00000000
 8002374:	40000000 	.word	0x40000000
 8002378:	55555555 	.word	0x55555555
 800237c:	3fc55555 	.word	0x3fc55555
 8002380:	00000000 	.word	0x00000000
 8002384:	40080000 	.word	0x40080000
 8002388:	20000640 	.word	0x20000640
 800238c:	20000618 	.word	0x20000618
 8002390:	20000650 	.word	0x20000650
 8002394:	3fe00000 	.word	0x3fe00000
 8002398:	20000638 	.word	0x20000638
 800239c:	20000628 	.word	0x20000628
 80023a0:	20000620 	.word	0x20000620
 80023a4:	20000670 	.word	0x20000670
 80023a8:	20000678 	.word	0x20000678
 80023ac:	20000660 	.word	0x20000660
 80023b0:	20000680 	.word	0x20000680
 80023b4:	20000688 	.word	0x20000688
 80023b8:	20000668 	.word	0x20000668
		else if (genScurve->t3 < evaScurve->t && evaScurve->t < genScurve->t4){
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023c8:	f7fe fb54 	bl	8000a74 <__aeabi_dcmplt>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d06c      	beq.n	80024ac <Trajectory_Evaluated+0x7c4>
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023de:	f7fe fb49 	bl	8000a74 <__aeabi_dcmplt>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d061      	beq.n	80024ac <Trajectory_Evaluated+0x7c4>
			evaScurve->setposition = p3 + v3 * (evaScurve->t - genScurve->t3);
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80023f4:	f7fd ff14 	bl	8000220 <__aeabi_dsub>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	4610      	mov	r0, r2
 80023fe:	4619      	mov	r1, r3
 8002400:	4b22      	ldr	r3, [pc, #136]	@ (800248c <Trajectory_Evaluated+0x7a4>)
 8002402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002406:	f7fe f8c3 	bl	8000590 <__aeabi_dmul>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	4610      	mov	r0, r2
 8002410:	4619      	mov	r1, r3
 8002412:	4b1f      	ldr	r3, [pc, #124]	@ (8002490 <Trajectory_Evaluated+0x7a8>)
 8002414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002418:	f7fd ff04 	bl	8000224 <__adddf3>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	69b9      	ldr	r1, [r7, #24]
 8002422:	e9c1 2300 	strd	r2, r3, [r1]
			evaScurve->setvelocity = v3;
 8002426:	4b19      	ldr	r3, [pc, #100]	@ (800248c <Trajectory_Evaluated+0x7a4>)
 8002428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242c:	69b9      	ldr	r1, [r7, #24]
 800242e:	e9c1 2302 	strd	r2, r3, [r1, #8]
			evaScurve->setacceleration = 0;
 8002432:	69b9      	ldr	r1, [r7, #24]
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	f04f 0300 	mov.w	r3, #0
 800243c:	e9c1 2304 	strd	r2, r3, [r1, #16]
			p5 = evaScurve->setposition;
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002446:	4913      	ldr	r1, [pc, #76]	@ (8002494 <Trajectory_Evaluated+0x7ac>)
 8002448:	e9c1 2300 	strd	r2, r3, [r1]
			p4 = p5;
 800244c:	4b11      	ldr	r3, [pc, #68]	@ (8002494 <Trajectory_Evaluated+0x7ac>)
 800244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002452:	4911      	ldr	r1, [pc, #68]	@ (8002498 <Trajectory_Evaluated+0x7b0>)
 8002454:	e9c1 2300 	strd	r2, r3, [r1]
			v5 = evaScurve->setvelocity;
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800245e:	490f      	ldr	r1, [pc, #60]	@ (800249c <Trajectory_Evaluated+0x7b4>)
 8002460:	e9c1 2300 	strd	r2, r3, [r1]
			v4 = v5;
 8002464:	4b0d      	ldr	r3, [pc, #52]	@ (800249c <Trajectory_Evaluated+0x7b4>)
 8002466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246a:	490d      	ldr	r1, [pc, #52]	@ (80024a0 <Trajectory_Evaluated+0x7b8>)
 800246c:	e9c1 2300 	strd	r2, r3, [r1]
			a5 = evaScurve->setacceleration;
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002476:	490b      	ldr	r1, [pc, #44]	@ (80024a4 <Trajectory_Evaluated+0x7bc>)
 8002478:	e9c1 2300 	strd	r2, r3, [r1]
			a4 = a5;
 800247c:	4b09      	ldr	r3, [pc, #36]	@ (80024a4 <Trajectory_Evaluated+0x7bc>)
 800247e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002482:	4909      	ldr	r1, [pc, #36]	@ (80024a8 <Trajectory_Evaluated+0x7c0>)
 8002484:	e9c1 2300 	strd	r2, r3, [r1]
 8002488:	e33c      	b.n	8002b04 <Trajectory_Evaluated+0xe1c>
 800248a:	bf00      	nop
 800248c:	20000660 	.word	0x20000660
 8002490:	20000620 	.word	0x20000620
 8002494:	20000630 	.word	0x20000630
 8002498:	20000628 	.word	0x20000628
 800249c:	20000690 	.word	0x20000690
 80024a0:	20000678 	.word	0x20000678
 80024a4:	20000698 	.word	0x20000698
 80024a8:	20000688 	.word	0x20000688
		else if (genScurve->t4 <= evaScurve->t && evaScurve->t <= genScurve->t5){
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80024b8:	f7fe fae6 	bl	8000a88 <__aeabi_dcmple>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 8130 	beq.w	8002724 <Trajectory_Evaluated+0xa3c>
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80024d0:	f7fe fada 	bl	8000a88 <__aeabi_dcmple>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 8124 	beq.w	8002724 <Trajectory_Evaluated+0xa3c>
			evaScurve->setposition = p4 + v4 * (evaScurve->t - genScurve->t4) + (1.0/6.0) * genScurve->dir *- jmax * pow((evaScurve->t - genScurve->t4),3.0);
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80024e8:	f7fd fe9a 	bl	8000220 <__aeabi_dsub>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4610      	mov	r0, r2
 80024f2:	4619      	mov	r1, r3
 80024f4:	4b82      	ldr	r3, [pc, #520]	@ (8002700 <Trajectory_Evaluated+0xa18>)
 80024f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fa:	f7fe f849 	bl	8000590 <__aeabi_dmul>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	4610      	mov	r0, r2
 8002504:	4619      	mov	r1, r3
 8002506:	4b7f      	ldr	r3, [pc, #508]	@ (8002704 <Trajectory_Evaluated+0xa1c>)
 8002508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250c:	f7fd fe8a 	bl	8000224 <__adddf3>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4614      	mov	r4, r2
 8002516:	461d      	mov	r5, r3
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800251e:	b25b      	sxtb	r3, r3
 8002520:	4618      	mov	r0, r3
 8002522:	f7fd ffcb 	bl	80004bc <__aeabi_i2d>
 8002526:	a370      	add	r3, pc, #448	@ (adr r3, 80026e8 <Trajectory_Evaluated+0xa00>)
 8002528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252c:	f7fe f830 	bl	8000590 <__aeabi_dmul>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4690      	mov	r8, r2
 8002536:	4699      	mov	r9, r3
 8002538:	edd7 7a01 	vldr	s15, [r7, #4]
 800253c:	eef1 7a67 	vneg.f32	s15, s15
 8002540:	ee17 3a90 	vmov	r3, s15
 8002544:	4618      	mov	r0, r3
 8002546:	f7fd ffcb 	bl	80004e0 <__aeabi_f2d>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4640      	mov	r0, r8
 8002550:	4649      	mov	r1, r9
 8002552:	f7fe f81d 	bl	8000590 <__aeabi_dmul>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	4690      	mov	r8, r2
 800255c:	4699      	mov	r9, r3
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800256a:	f7fd fe59 	bl	8000220 <__aeabi_dsub>
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	ec43 2b17 	vmov	d7, r2, r3
 8002576:	ed9f 1b5e 	vldr	d1, [pc, #376]	@ 80026f0 <Trajectory_Evaluated+0xa08>
 800257a:	eeb0 0a47 	vmov.f32	s0, s14
 800257e:	eef0 0a67 	vmov.f32	s1, s15
 8002582:	f00a fcd5 	bl	800cf30 <pow>
 8002586:	ec53 2b10 	vmov	r2, r3, d0
 800258a:	4640      	mov	r0, r8
 800258c:	4649      	mov	r1, r9
 800258e:	f7fd ffff 	bl	8000590 <__aeabi_dmul>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4620      	mov	r0, r4
 8002598:	4629      	mov	r1, r5
 800259a:	f7fd fe43 	bl	8000224 <__adddf3>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	69b9      	ldr	r1, [r7, #24]
 80025a4:	e9c1 2300 	strd	r2, r3, [r1]
			evaScurve->setvelocity = v4 + 1.0/2.0 * - jmax * genScurve->dir * pow((evaScurve->t - genScurve->t4),2.0);
 80025a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80025ac:	eef1 7a67 	vneg.f32	s15, s15
 80025b0:	ee17 3a90 	vmov	r3, s15
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fd ff93 	bl	80004e0 <__aeabi_f2d>
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	4b52      	ldr	r3, [pc, #328]	@ (8002708 <Trajectory_Evaluated+0xa20>)
 80025c0:	f7fd ffe6 	bl	8000590 <__aeabi_dmul>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4614      	mov	r4, r2
 80025ca:	461d      	mov	r5, r3
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025d2:	b25b      	sxtb	r3, r3
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fd ff71 	bl	80004bc <__aeabi_i2d>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4620      	mov	r0, r4
 80025e0:	4629      	mov	r1, r5
 80025e2:	f7fd ffd5 	bl	8000590 <__aeabi_dmul>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4614      	mov	r4, r2
 80025ec:	461d      	mov	r5, r3
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80025fa:	f7fd fe11 	bl	8000220 <__aeabi_dsub>
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	ec43 2b17 	vmov	d7, r2, r3
 8002606:	ed9f 1b3c 	vldr	d1, [pc, #240]	@ 80026f8 <Trajectory_Evaluated+0xa10>
 800260a:	eeb0 0a47 	vmov.f32	s0, s14
 800260e:	eef0 0a67 	vmov.f32	s1, s15
 8002612:	f00a fc8d 	bl	800cf30 <pow>
 8002616:	ec53 2b10 	vmov	r2, r3, d0
 800261a:	4620      	mov	r0, r4
 800261c:	4629      	mov	r1, r5
 800261e:	f7fd ffb7 	bl	8000590 <__aeabi_dmul>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4610      	mov	r0, r2
 8002628:	4619      	mov	r1, r3
 800262a:	4b35      	ldr	r3, [pc, #212]	@ (8002700 <Trajectory_Evaluated+0xa18>)
 800262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002630:	f7fd fdf8 	bl	8000224 <__adddf3>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	69b9      	ldr	r1, [r7, #24]
 800263a:	e9c1 2302 	strd	r2, r3, [r1, #8]
			evaScurve->setacceleration = (-jmax * (evaScurve->t - genScurve->t4))*genScurve->dir;
 800263e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002642:	eef1 7a67 	vneg.f32	s15, s15
 8002646:	ee17 3a90 	vmov	r3, s15
 800264a:	4618      	mov	r0, r3
 800264c:	f7fd ff48 	bl	80004e0 <__aeabi_f2d>
 8002650:	4604      	mov	r4, r0
 8002652:	460d      	mov	r5, r1
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002660:	f7fd fdde 	bl	8000220 <__aeabi_dsub>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4620      	mov	r0, r4
 800266a:	4629      	mov	r1, r5
 800266c:	f7fd ff90 	bl	8000590 <__aeabi_dmul>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4614      	mov	r4, r2
 8002676:	461d      	mov	r5, r3
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800267e:	b25b      	sxtb	r3, r3
 8002680:	4618      	mov	r0, r3
 8002682:	f7fd ff1b 	bl	80004bc <__aeabi_i2d>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4620      	mov	r0, r4
 800268c:	4629      	mov	r1, r5
 800268e:	f7fd ff7f 	bl	8000590 <__aeabi_dmul>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	69b9      	ldr	r1, [r7, #24]
 8002698:	e9c1 2304 	strd	r2, r3, [r1, #16]
			p6 = evaScurve->setposition;
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a2:	491a      	ldr	r1, [pc, #104]	@ (800270c <Trajectory_Evaluated+0xa24>)
 80026a4:	e9c1 2300 	strd	r2, r3, [r1]
			p5 = p6;
 80026a8:	4b18      	ldr	r3, [pc, #96]	@ (800270c <Trajectory_Evaluated+0xa24>)
 80026aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ae:	4918      	ldr	r1, [pc, #96]	@ (8002710 <Trajectory_Evaluated+0xa28>)
 80026b0:	e9c1 2300 	strd	r2, r3, [r1]
			v6 = evaScurve->setvelocity;
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80026ba:	4916      	ldr	r1, [pc, #88]	@ (8002714 <Trajectory_Evaluated+0xa2c>)
 80026bc:	e9c1 2300 	strd	r2, r3, [r1]
			v5 = v6;
 80026c0:	4b14      	ldr	r3, [pc, #80]	@ (8002714 <Trajectory_Evaluated+0xa2c>)
 80026c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c6:	4914      	ldr	r1, [pc, #80]	@ (8002718 <Trajectory_Evaluated+0xa30>)
 80026c8:	e9c1 2300 	strd	r2, r3, [r1]
			a6 = evaScurve->setacceleration;
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80026d2:	4912      	ldr	r1, [pc, #72]	@ (800271c <Trajectory_Evaluated+0xa34>)
 80026d4:	e9c1 2300 	strd	r2, r3, [r1]
			a5 = a6;
 80026d8:	4b10      	ldr	r3, [pc, #64]	@ (800271c <Trajectory_Evaluated+0xa34>)
 80026da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026de:	4910      	ldr	r1, [pc, #64]	@ (8002720 <Trajectory_Evaluated+0xa38>)
 80026e0:	e9c1 2300 	strd	r2, r3, [r1]
 80026e4:	e20e      	b.n	8002b04 <Trajectory_Evaluated+0xe1c>
 80026e6:	bf00      	nop
 80026e8:	55555555 	.word	0x55555555
 80026ec:	3fc55555 	.word	0x3fc55555
 80026f0:	00000000 	.word	0x00000000
 80026f4:	40080000 	.word	0x40080000
 80026f8:	00000000 	.word	0x00000000
 80026fc:	40000000 	.word	0x40000000
 8002700:	20000678 	.word	0x20000678
 8002704:	20000628 	.word	0x20000628
 8002708:	3fe00000 	.word	0x3fe00000
 800270c:	20000638 	.word	0x20000638
 8002710:	20000630 	.word	0x20000630
 8002714:	20000670 	.word	0x20000670
 8002718:	20000690 	.word	0x20000690
 800271c:	20000680 	.word	0x20000680
 8002720:	20000698 	.word	0x20000698
		else if (genScurve->t5 <  evaScurve->t &&  evaScurve->t <= genScurve->t6){
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002730:	f7fe f9a0 	bl	8000a74 <__aeabi_dcmplt>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 8093 	beq.w	8002862 <Trajectory_Evaluated+0xb7a>
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002748:	f7fe f99e 	bl	8000a88 <__aeabi_dcmple>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 8087 	beq.w	8002862 <Trajectory_Evaluated+0xb7a>
			evaScurve->setposition = p5 + v5 * (evaScurve->t - genScurve->t5) + 1/2.0 * a5 * pow(( evaScurve->t - genScurve->t5),2.0);
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002760:	f7fd fd5e 	bl	8000220 <__aeabi_dsub>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4610      	mov	r0, r2
 800276a:	4619      	mov	r1, r3
 800276c:	4b4c      	ldr	r3, [pc, #304]	@ (80028a0 <Trajectory_Evaluated+0xbb8>)
 800276e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002772:	f7fd ff0d 	bl	8000590 <__aeabi_dmul>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	4610      	mov	r0, r2
 800277c:	4619      	mov	r1, r3
 800277e:	4b49      	ldr	r3, [pc, #292]	@ (80028a4 <Trajectory_Evaluated+0xbbc>)
 8002780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002784:	f7fd fd4e 	bl	8000224 <__adddf3>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	4614      	mov	r4, r2
 800278e:	461d      	mov	r5, r3
 8002790:	4b45      	ldr	r3, [pc, #276]	@ (80028a8 <Trajectory_Evaluated+0xbc0>)
 8002792:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	4b44      	ldr	r3, [pc, #272]	@ (80028ac <Trajectory_Evaluated+0xbc4>)
 800279c:	f7fd fef8 	bl	8000590 <__aeabi_dmul>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4690      	mov	r8, r2
 80027a6:	4699      	mov	r9, r3
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80027b4:	f7fd fd34 	bl	8000220 <__aeabi_dsub>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	ec43 2b17 	vmov	d7, r2, r3
 80027c0:	ed9f 1b35 	vldr	d1, [pc, #212]	@ 8002898 <Trajectory_Evaluated+0xbb0>
 80027c4:	eeb0 0a47 	vmov.f32	s0, s14
 80027c8:	eef0 0a67 	vmov.f32	s1, s15
 80027cc:	f00a fbb0 	bl	800cf30 <pow>
 80027d0:	ec53 2b10 	vmov	r2, r3, d0
 80027d4:	4640      	mov	r0, r8
 80027d6:	4649      	mov	r1, r9
 80027d8:	f7fd feda 	bl	8000590 <__aeabi_dmul>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4620      	mov	r0, r4
 80027e2:	4629      	mov	r1, r5
 80027e4:	f7fd fd1e 	bl	8000224 <__adddf3>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	69b9      	ldr	r1, [r7, #24]
 80027ee:	e9c1 2300 	strd	r2, r3, [r1]
			evaScurve->setvelocity = v5 + a5 * (evaScurve->t - genScurve->t5);
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80027fe:	f7fd fd0f 	bl	8000220 <__aeabi_dsub>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4610      	mov	r0, r2
 8002808:	4619      	mov	r1, r3
 800280a:	4b27      	ldr	r3, [pc, #156]	@ (80028a8 <Trajectory_Evaluated+0xbc0>)
 800280c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002810:	f7fd febe 	bl	8000590 <__aeabi_dmul>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4610      	mov	r0, r2
 800281a:	4619      	mov	r1, r3
 800281c:	4b20      	ldr	r3, [pc, #128]	@ (80028a0 <Trajectory_Evaluated+0xbb8>)
 800281e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002822:	f7fd fcff 	bl	8000224 <__adddf3>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	69b9      	ldr	r1, [r7, #24]
 800282c:	e9c1 2302 	strd	r2, r3, [r1, #8]
			evaScurve->setacceleration = a5;
 8002830:	4b1d      	ldr	r3, [pc, #116]	@ (80028a8 <Trajectory_Evaluated+0xbc0>)
 8002832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002836:	69b9      	ldr	r1, [r7, #24]
 8002838:	e9c1 2304 	strd	r2, r3, [r1, #16]
			p6 = evaScurve->setposition;
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002842:	491b      	ldr	r1, [pc, #108]	@ (80028b0 <Trajectory_Evaluated+0xbc8>)
 8002844:	e9c1 2300 	strd	r2, r3, [r1]
			v6 = evaScurve->setvelocity;
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800284e:	4919      	ldr	r1, [pc, #100]	@ (80028b4 <Trajectory_Evaluated+0xbcc>)
 8002850:	e9c1 2300 	strd	r2, r3, [r1]
			a6 = evaScurve->setacceleration;
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800285a:	4917      	ldr	r1, [pc, #92]	@ (80028b8 <Trajectory_Evaluated+0xbd0>)
 800285c:	e9c1 2300 	strd	r2, r3, [r1]
 8002860:	e150      	b.n	8002b04 <Trajectory_Evaluated+0xe1c>
		else if (genScurve->t6 <  evaScurve->t &&  evaScurve->t <= genScurve->t7){
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800286e:	f7fe f901 	bl	8000a74 <__aeabi_dcmplt>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d100      	bne.n	800287a <Trajectory_Evaluated+0xb92>
}
 8002878:	e144      	b.n	8002b04 <Trajectory_Evaluated+0xe1c>
		else if (genScurve->t6 <  evaScurve->t &&  evaScurve->t <= genScurve->t7){
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002886:	f7fe f8ff 	bl	8000a88 <__aeabi_dcmple>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d115      	bne.n	80028bc <Trajectory_Evaluated+0xbd4>
}
 8002890:	e138      	b.n	8002b04 <Trajectory_Evaluated+0xe1c>
 8002892:	bf00      	nop
 8002894:	f3af 8000 	nop.w
 8002898:	00000000 	.word	0x00000000
 800289c:	40000000 	.word	0x40000000
 80028a0:	20000690 	.word	0x20000690
 80028a4:	20000630 	.word	0x20000630
 80028a8:	20000698 	.word	0x20000698
 80028ac:	3fe00000 	.word	0x3fe00000
 80028b0:	20000638 	.word	0x20000638
 80028b4:	20000670 	.word	0x20000670
 80028b8:	20000680 	.word	0x20000680
			evaScurve->setposition = p6 + v6 * (evaScurve->t - genScurve->t6) + 1.0/2.0 * a6 * pow((evaScurve->t - genScurve->t6),2) + 1/6.0 * jmax* genScurve->dir * pow((evaScurve->t - genScurve->t6),3);
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80028c8:	f7fd fcaa 	bl	8000220 <__aeabi_dsub>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4610      	mov	r0, r2
 80028d2:	4619      	mov	r1, r3
 80028d4:	4b94      	ldr	r3, [pc, #592]	@ (8002b28 <Trajectory_Evaluated+0xe40>)
 80028d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028da:	f7fd fe59 	bl	8000590 <__aeabi_dmul>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4610      	mov	r0, r2
 80028e4:	4619      	mov	r1, r3
 80028e6:	4b91      	ldr	r3, [pc, #580]	@ (8002b2c <Trajectory_Evaluated+0xe44>)
 80028e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ec:	f7fd fc9a 	bl	8000224 <__adddf3>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4614      	mov	r4, r2
 80028f6:	461d      	mov	r5, r3
 80028f8:	4b8d      	ldr	r3, [pc, #564]	@ (8002b30 <Trajectory_Evaluated+0xe48>)
 80028fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	4b8c      	ldr	r3, [pc, #560]	@ (8002b34 <Trajectory_Evaluated+0xe4c>)
 8002904:	f7fd fe44 	bl	8000590 <__aeabi_dmul>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4690      	mov	r8, r2
 800290e:	4699      	mov	r9, r3
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800291c:	f7fd fc80 	bl	8000220 <__aeabi_dsub>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	ec43 2b17 	vmov	d7, r2, r3
 8002928:	ed9f 1b79 	vldr	d1, [pc, #484]	@ 8002b10 <Trajectory_Evaluated+0xe28>
 800292c:	eeb0 0a47 	vmov.f32	s0, s14
 8002930:	eef0 0a67 	vmov.f32	s1, s15
 8002934:	f00a fafc 	bl	800cf30 <pow>
 8002938:	ec53 2b10 	vmov	r2, r3, d0
 800293c:	4640      	mov	r0, r8
 800293e:	4649      	mov	r1, r9
 8002940:	f7fd fe26 	bl	8000590 <__aeabi_dmul>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4620      	mov	r0, r4
 800294a:	4629      	mov	r1, r5
 800294c:	f7fd fc6a 	bl	8000224 <__adddf3>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4614      	mov	r4, r2
 8002956:	461d      	mov	r5, r3
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7fd fdc1 	bl	80004e0 <__aeabi_f2d>
 800295e:	a36e      	add	r3, pc, #440	@ (adr r3, 8002b18 <Trajectory_Evaluated+0xe30>)
 8002960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002964:	f7fd fe14 	bl	8000590 <__aeabi_dmul>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4690      	mov	r8, r2
 800296e:	4699      	mov	r9, r3
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002976:	b25b      	sxtb	r3, r3
 8002978:	4618      	mov	r0, r3
 800297a:	f7fd fd9f 	bl	80004bc <__aeabi_i2d>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	4640      	mov	r0, r8
 8002984:	4649      	mov	r1, r9
 8002986:	f7fd fe03 	bl	8000590 <__aeabi_dmul>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4690      	mov	r8, r2
 8002990:	4699      	mov	r9, r3
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800299e:	f7fd fc3f 	bl	8000220 <__aeabi_dsub>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	ec43 2b17 	vmov	d7, r2, r3
 80029aa:	ed9f 1b5d 	vldr	d1, [pc, #372]	@ 8002b20 <Trajectory_Evaluated+0xe38>
 80029ae:	eeb0 0a47 	vmov.f32	s0, s14
 80029b2:	eef0 0a67 	vmov.f32	s1, s15
 80029b6:	f00a fabb 	bl	800cf30 <pow>
 80029ba:	ec53 2b10 	vmov	r2, r3, d0
 80029be:	4640      	mov	r0, r8
 80029c0:	4649      	mov	r1, r9
 80029c2:	f7fd fde5 	bl	8000590 <__aeabi_dmul>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	4620      	mov	r0, r4
 80029cc:	4629      	mov	r1, r5
 80029ce:	f7fd fc29 	bl	8000224 <__adddf3>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	69b9      	ldr	r1, [r7, #24]
 80029d8:	e9c1 2300 	strd	r2, r3, [r1]
			evaScurve->setvelocity = v6 + a6 * (evaScurve->t - genScurve->t6) + 1.0/2.0 * jmax*genScurve->dir * pow((evaScurve->t - genScurve->t6),2);
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80029e8:	f7fd fc1a 	bl	8000220 <__aeabi_dsub>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4610      	mov	r0, r2
 80029f2:	4619      	mov	r1, r3
 80029f4:	4b4e      	ldr	r3, [pc, #312]	@ (8002b30 <Trajectory_Evaluated+0xe48>)
 80029f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fa:	f7fd fdc9 	bl	8000590 <__aeabi_dmul>
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	4610      	mov	r0, r2
 8002a04:	4619      	mov	r1, r3
 8002a06:	4b48      	ldr	r3, [pc, #288]	@ (8002b28 <Trajectory_Evaluated+0xe40>)
 8002a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0c:	f7fd fc0a 	bl	8000224 <__adddf3>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4614      	mov	r4, r2
 8002a16:	461d      	mov	r5, r3
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7fd fd61 	bl	80004e0 <__aeabi_f2d>
 8002a1e:	f04f 0200 	mov.w	r2, #0
 8002a22:	4b44      	ldr	r3, [pc, #272]	@ (8002b34 <Trajectory_Evaluated+0xe4c>)
 8002a24:	f7fd fdb4 	bl	8000590 <__aeabi_dmul>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4690      	mov	r8, r2
 8002a2e:	4699      	mov	r9, r3
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a36:	b25b      	sxtb	r3, r3
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fd fd3f 	bl	80004bc <__aeabi_i2d>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	4640      	mov	r0, r8
 8002a44:	4649      	mov	r1, r9
 8002a46:	f7fd fda3 	bl	8000590 <__aeabi_dmul>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	4690      	mov	r8, r2
 8002a50:	4699      	mov	r9, r3
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002a5e:	f7fd fbdf 	bl	8000220 <__aeabi_dsub>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	ec43 2b17 	vmov	d7, r2, r3
 8002a6a:	ed9f 1b29 	vldr	d1, [pc, #164]	@ 8002b10 <Trajectory_Evaluated+0xe28>
 8002a6e:	eeb0 0a47 	vmov.f32	s0, s14
 8002a72:	eef0 0a67 	vmov.f32	s1, s15
 8002a76:	f00a fa5b 	bl	800cf30 <pow>
 8002a7a:	ec53 2b10 	vmov	r2, r3, d0
 8002a7e:	4640      	mov	r0, r8
 8002a80:	4649      	mov	r1, r9
 8002a82:	f7fd fd85 	bl	8000590 <__aeabi_dmul>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	4629      	mov	r1, r5
 8002a8e:	f7fd fbc9 	bl	8000224 <__adddf3>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	69b9      	ldr	r1, [r7, #24]
 8002a98:	e9c1 2302 	strd	r2, r3, [r1, #8]
			evaScurve->setacceleration = a6 + genScurve->dir *jmax * (evaScurve->t - genScurve->t6);
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002aa2:	b25b      	sxtb	r3, r3
 8002aa4:	ee07 3a90 	vmov	s15, r3
 8002aa8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002aac:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ab4:	ee17 0a90 	vmov	r0, s15
 8002ab8:	f7fd fd12 	bl	80004e0 <__aeabi_f2d>
 8002abc:	4604      	mov	r4, r0
 8002abe:	460d      	mov	r5, r1
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002acc:	f7fd fba8 	bl	8000220 <__aeabi_dsub>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	4629      	mov	r1, r5
 8002ad8:	f7fd fd5a 	bl	8000590 <__aeabi_dmul>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4b12      	ldr	r3, [pc, #72]	@ (8002b30 <Trajectory_Evaluated+0xe48>)
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	f7fd fb9b 	bl	8000224 <__adddf3>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	69b9      	ldr	r1, [r7, #24]
 8002af4:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8002af8:	e004      	b.n	8002b04 <Trajectory_Evaluated+0xe1c>
	else{evaScurve->isFinised = true;}
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2020 	strb.w	r2, [r3, #32]
}
 8002b02:	e7ff      	b.n	8002b04 <Trajectory_Evaluated+0xe1c>
 8002b04:	bf00      	nop
 8002b06:	3720      	adds	r7, #32
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b0e:	bf00      	nop
 8002b10:	00000000 	.word	0x00000000
 8002b14:	40000000 	.word	0x40000000
 8002b18:	55555555 	.word	0x55555555
 8002b1c:	3fc55555 	.word	0x3fc55555
 8002b20:	00000000 	.word	0x00000000
 8002b24:	40080000 	.word	0x40080000
 8002b28:	20000670 	.word	0x20000670
 8002b2c:	20000638 	.word	0x20000638
 8002b30:	20000680 	.word	0x20000680
 8002b34:	3fe00000 	.word	0x3fe00000

08002b38 <ADC_init>:
 *      Author: naker
 */

#include "adc.h"

void ADC_init(ADC_HandleTypeDef* hadc, ADC* adc){
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, adc -> adc_buffer, 50);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2232      	movs	r2, #50	@ 0x32
 8002b46:	4619      	mov	r1, r3
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f003 fa3f 	bl	8005fcc <HAL_ADC_Start_DMA>
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <Update_eff>:
}

void Update_eff(EFF* eff, GPIO_TypeDef* GPIO_Pull, uint16_t GPIO_Pin_Pull,
		GPIO_TypeDef* GPIO_Push, uint16_t GPIO_Pin_Push, GPIO_TypeDef* GPIO_Vacuum,
		uint16_t GPIO_Pin_Vacuum)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b084      	sub	sp, #16
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	60f8      	str	r0, [r7, #12]
 8002b5e:	60b9      	str	r1, [r7, #8]
 8002b60:	603b      	str	r3, [r7, #0]
 8002b62:	4613      	mov	r3, r2
 8002b64:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIO_Vacuum, GPIO_Pin_Vacuum, eff -> solenoid_command[0]);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	789a      	ldrb	r2, [r3, #2]
 8002b6a:	8c3b      	ldrh	r3, [r7, #32]
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	69f8      	ldr	r0, [r7, #28]
 8002b70:	f005 fa2e 	bl	8007fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO_Pull, GPIO_Pin_Pull, eff -> solenoid_command[1]);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	78da      	ldrb	r2, [r3, #3]
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	68b8      	ldr	r0, [r7, #8]
 8002b7e:	f005 fa27 	bl	8007fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO_Push, GPIO_Pin_Push, eff -> solenoid_command[2]);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	791a      	ldrb	r2, [r3, #4]
 8002b86:	8b3b      	ldrh	r3, [r7, #24]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	6838      	ldr	r0, [r7, #0]
 8002b8c:	f005 fa20 	bl	8007fd0 <HAL_GPIO_WritePin>
}
 8002b90:	bf00      	nop
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <Update_joy>:
 *      Author: naker
 */

#include "joy.h"

void Update_joy(JOY *joy){
 8002b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
	uint8_t s_1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8002ba2:	2120      	movs	r1, #32
 8002ba4:	4838      	ldr	r0, [pc, #224]	@ (8002c88 <Update_joy+0xf0>)
 8002ba6:	f005 f9fb 	bl	8007fa0 <HAL_GPIO_ReadPin>
 8002baa:	4603      	mov	r3, r0
 8002bac:	73fb      	strb	r3, [r7, #15]
	uint8_t s_2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8002bae:	2120      	movs	r1, #32
 8002bb0:	4836      	ldr	r0, [pc, #216]	@ (8002c8c <Update_joy+0xf4>)
 8002bb2:	f005 f9f5 	bl	8007fa0 <HAL_GPIO_ReadPin>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	73bb      	strb	r3, [r7, #14]
	uint8_t s_3 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4);
 8002bba:	2110      	movs	r1, #16
 8002bbc:	4833      	ldr	r0, [pc, #204]	@ (8002c8c <Update_joy+0xf4>)
 8002bbe:	f005 f9ef 	bl	8007fa0 <HAL_GPIO_ReadPin>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	737b      	strb	r3, [r7, #13]
	uint8_t s_4 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8002bc6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002bca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bce:	f005 f9e7 	bl	8007fa0 <HAL_GPIO_ReadPin>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	733b      	strb	r3, [r7, #12]
	if(!s_1 || !s_2 || !s_3 || !s_4){
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <Update_joy+0x56>
 8002bdc:	7bbb      	ldrb	r3, [r7, #14]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d005      	beq.n	8002bee <Update_joy+0x56>
 8002be2:	7b7b      	ldrb	r3, [r7, #13]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d002      	beq.n	8002bee <Update_joy+0x56>
 8002be8:	7b3b      	ldrb	r3, [r7, #12]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d136      	bne.n	8002c5c <Update_joy+0xc4>
		static uint8_t is_first = 1;
		static uint64_t timestamp = 0;
		if(is_first){
 8002bee:	4b28      	ldr	r3, [pc, #160]	@ (8002c90 <Update_joy+0xf8>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00c      	beq.n	8002c10 <Update_joy+0x78>
			timestamp = HAL_GetTick() + 10;
 8002bf6:	f002 fde1 	bl	80057bc <HAL_GetTick>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	330a      	adds	r3, #10
 8002bfe:	2200      	movs	r2, #0
 8002c00:	469a      	mov	sl, r3
 8002c02:	4693      	mov	fp, r2
 8002c04:	4b23      	ldr	r3, [pc, #140]	@ (8002c94 <Update_joy+0xfc>)
 8002c06:	e9c3 ab00 	strd	sl, fp, [r3]
			is_first = 0;
 8002c0a:	4b21      	ldr	r3, [pc, #132]	@ (8002c90 <Update_joy+0xf8>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() > timestamp){
 8002c10:	f002 fdd4 	bl	80057bc <HAL_GetTick>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2200      	movs	r2, #0
 8002c18:	461c      	mov	r4, r3
 8002c1a:	4615      	mov	r5, r2
 8002c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002c94 <Update_joy+0xfc>)
 8002c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c22:	42a2      	cmp	r2, r4
 8002c24:	41ab      	sbcs	r3, r5
 8002c26:	d229      	bcs.n	8002c7c <Update_joy+0xe4>
			timestamp = HAL_GetTick() + 10;
 8002c28:	f002 fdc8 	bl	80057bc <HAL_GetTick>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	330a      	adds	r3, #10
 8002c30:	2200      	movs	r2, #0
 8002c32:	4698      	mov	r8, r3
 8002c34:	4691      	mov	r9, r2
 8002c36:	4b17      	ldr	r3, [pc, #92]	@ (8002c94 <Update_joy+0xfc>)
 8002c38:	e9c3 8900 	strd	r8, r9, [r3]
			joy -> s_1 = s_1;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	7bfa      	ldrb	r2, [r7, #15]
 8002c40:	701a      	strb	r2, [r3, #0]
			joy -> s_2 = s_2;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	7bba      	ldrb	r2, [r7, #14]
 8002c46:	705a      	strb	r2, [r3, #1]
			joy -> s_3 = s_3;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	7b7a      	ldrb	r2, [r7, #13]
 8002c4c:	709a      	strb	r2, [r3, #2]
			joy -> s_4 = s_4;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	7b3a      	ldrb	r2, [r7, #12]
 8002c52:	70da      	strb	r2, [r3, #3]
			joy -> is_place = 1;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	711a      	strb	r2, [r3, #4]
	if(!s_1 || !s_2 || !s_3 || !s_4){
 8002c5a:	e00f      	b.n	8002c7c <Update_joy+0xe4>
		}
	}else{
		joy -> s_1 = 1;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	701a      	strb	r2, [r3, #0]
		joy -> s_2 = 1;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	705a      	strb	r2, [r3, #1]
		joy -> s_3 = 1;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	709a      	strb	r2, [r3, #2]
		joy -> s_4 = 1;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	70da      	strb	r2, [r3, #3]
		joy -> is_place = 0;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	711a      	strb	r2, [r3, #4]
	}
}
 8002c7a:	e000      	b.n	8002c7e <Update_joy+0xe6>
	if(!s_1 || !s_2 || !s_3 || !s_4){
 8002c7c:	bf00      	nop
}
 8002c7e:	bf00      	nop
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c88:	48000400 	.word	0x48000400
 8002c8c:	48000800 	.word	0x48000800
 8002c90:	20000068 	.word	0x20000068
 8002c94:	200006a0 	.word	0x200006a0

08002c98 <Kalman_Start>:
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
	  filter->Kalman_Speed = filter->X_k[1];
	  return  filter->Kalman_Speed;
}

void Kalman_Start(KalmanFilter* filter){
 8002c98:	b5b0      	push	{r4, r5, r7, lr}
 8002c9a:	b0b4      	sub	sp, #208	@ 0xd0
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
	filter->Q = 0.1f;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a42      	ldr	r2, [pc, #264]	@ (8002dac <Kalman_Start+0x114>)
 8002ca4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = 1.0f;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002cae:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float a[16] = {1.0f, 0.000999981278535715f, -0.000114956304180341f, 7.18067814869762e-06f,
 8002cb2:	4b3f      	ldr	r3, [pc, #252]	@ (8002db0 <Kalman_Start+0x118>)
 8002cb4:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8002cb8:	461d      	mov	r5, r3
 8002cba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cc6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002cca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	                   0.0f, 0.999950617296464f,   -0.229910715302858f, 0.0143220709019020f,
	                   0.0f, 0.0f   ,   1.0f  , 0.0f,
	                   0.0f,-0.00496113160650046f, 0.000571883719539551f, 0.983689934032327f};

	float b[4] = {	1.90888950589463e-07f,
 8002cce:	4b39      	ldr	r3, [pc, #228]	@ (8002db4 <Kalman_Start+0x11c>)
 8002cd0:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8002cd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
						0.000571883719539551f,
						0.0f,
						0.0789912369575374f};

	float c[4] = {0.0f, 1.0f, 0.0f, 0.0f};
 8002cda:	f04f 0300 	mov.w	r3, #0
 8002cde:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ce0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002ce4:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ce6:	f04f 0300 	mov.w	r3, #0
 8002cea:	677b      	str	r3, [r7, #116]	@ 0x74
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	67bb      	str	r3, [r7, #120]	@ 0x78

	float g[4] = {0.0f,
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002cf8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002cfc:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d04:	f04f 0300 	mov.w	r3, #0
 8002d08:	66bb      	str	r3, [r7, #104]	@ 0x68
					  1.0f,
					  0.0f,
					  0.0f};

	float iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8002d0a:	4b2b      	ldr	r3, [pc, #172]	@ (8002db8 <Kalman_Start+0x120>)
 8002d0c:	f107 041c 	add.w	r4, r7, #28
 8002d10:	461d      	mov	r5, r3
 8002d12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d1e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002d22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8002d26:	f107 030c 	add.w	r3, r7, #12
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	605a      	str	r2, [r3, #4]
 8002d30:	609a      	str	r2, [r3, #8]
 8002d32:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d44:	e029      	b.n	8002d9a <Kalman_Start+0x102>
	{
		filter->A[i] = a[i];
 8002d46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	33d0      	adds	r3, #208	@ 0xd0
 8002d4e:	443b      	add	r3, r7
 8002d50:	3b44      	subs	r3, #68	@ 0x44
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d5a:	3314      	adds	r3, #20
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	440b      	add	r3, r1
 8002d60:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8002d62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	33d0      	adds	r3, #208	@ 0xd0
 8002d6a:	443b      	add	r3, r7
 8002d6c:	3bb4      	subs	r3, #180	@ 0xb4
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d76:	3398      	adds	r3, #152	@ 0x98
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d84:	3304      	adds	r3, #4
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8002d90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d94:	3301      	adds	r3, #1
 8002d96:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d9e:	2b0f      	cmp	r3, #15
 8002da0:	ddd1      	ble.n	8002d46 <Kalman_Start+0xae>
	}

	for(i=0;i<4;i++)
 8002da2:	2300      	movs	r3, #0
 8002da4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002da8:	e044      	b.n	8002e34 <Kalman_Start+0x19c>
 8002daa:	bf00      	nop
 8002dac:	3dcccccd 	.word	0x3dcccccd
 8002db0:	0800dea4 	.word	0x0800dea4
 8002db4:	0800dee4 	.word	0x0800dee4
 8002db8:	0800def4 	.word	0x0800def4
	{
		filter->X_k[i] = x_k[i];
 8002dbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	33d0      	adds	r3, #208	@ 0xd0
 8002dc4:	443b      	add	r3, r7
 8002dc6:	3bc4      	subs	r3, #196	@ 0xc4
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	601a      	str	r2, [r3, #0]
		filter->B[i] = b[i];
 8002dd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	33d0      	adds	r3, #208	@ 0xd0
 8002dde:	443b      	add	r3, r7
 8002de0:	3b54      	subs	r3, #84	@ 0x54
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002dea:	3324      	adds	r3, #36	@ 0x24
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8002df2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	33d0      	adds	r3, #208	@ 0xd0
 8002dfa:	443b      	add	r3, r7
 8002dfc:	3b64      	subs	r3, #100	@ 0x64
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e06:	3328      	adds	r3, #40	@ 0x28
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 8002e0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	33d0      	adds	r3, #208	@ 0xd0
 8002e16:	443b      	add	r3, r7
 8002e18:	3b74      	subs	r3, #116	@ 0x74
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e22:	332c      	adds	r3, #44	@ 0x2c
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8002e2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e2e:	3301      	adds	r3, #1
 8002e30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	ddbf      	ble.n	8002dbc <Kalman_Start+0x124>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	2104      	movs	r1, #4
 8002e48:	f00a f828 	bl	800ce9c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3310      	adds	r3, #16
 8002e56:	2204      	movs	r2, #4
 8002e58:	2104      	movs	r1, #4
 8002e5a:	f00a f81f 	bl	800ce9c <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3350      	adds	r3, #80	@ 0x50
 8002e68:	2204      	movs	r2, #4
 8002e6a:	2104      	movs	r1, #4
 8002e6c:	f00a f816 	bl	800ce9c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3390      	adds	r3, #144	@ 0x90
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	2104      	movs	r1, #4
 8002e7e:	f00a f80d 	bl	800ce9c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	33a0      	adds	r3, #160	@ 0xa0
 8002e8c:	2204      	movs	r2, #4
 8002e8e:	2101      	movs	r1, #1
 8002e90:	f00a f804 	bl	800ce9c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	33b0      	adds	r3, #176	@ 0xb0
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	2104      	movs	r1, #4
 8002ea2:	f009 fffb 	bl	800ce9c <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	33c8      	adds	r3, #200	@ 0xc8
 8002eb0:	2204      	movs	r2, #4
 8002eb2:	2104      	movs	r1, #4
 8002eb4:	f009 fff2 	bl	800ce9c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	2104      	movs	r1, #4
 8002ec8:	f009 ffe8 	bl	800ce9c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8002ed8:	2204      	movs	r2, #4
 8002eda:	2101      	movs	r1, #1
 8002edc:	f009 ffde 	bl	800ce9c <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002eec:	2204      	movs	r2, #4
 8002eee:	2104      	movs	r1, #4
 8002ef0:	f009 ffd4 	bl	800ce9c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002f00:	2204      	movs	r2, #4
 8002f02:	2104      	movs	r1, #4
 8002f04:	f009 ffca 	bl	800ce9c <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8002f14:	2201      	movs	r2, #1
 8002f16:	2104      	movs	r1, #4
 8002f18:	f009 ffc0 	bl	800ce9c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8002f28:	2201      	movs	r2, #1
 8002f2a:	2104      	movs	r1, #4
 8002f2c:	f009 ffb6 	bl	800ce9c <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	2101      	movs	r1, #1
 8002f40:	f009 ffac 	bl	800ce9c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8002f50:	2201      	movs	r2, #1
 8002f52:	2101      	movs	r1, #1
 8002f54:	f009 ffa2 	bl	800ce9c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8002f64:	2201      	movs	r2, #1
 8002f66:	2101      	movs	r1, #1
 8002f68:	f009 ff98 	bl	800ce9c <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8002f78:	2201      	movs	r2, #1
 8002f7a:	2104      	movs	r1, #4
 8002f7c:	f009 ff8e 	bl	800ce9c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	2104      	movs	r1, #4
 8002f90:	f009 ff84 	bl	800ce9c <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	f009 ff7a 	bl	800ce9c <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	f009 ff70 	bl	800ce9c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8002fc8:	2201      	movs	r2, #1
 8002fca:	2101      	movs	r1, #1
 8002fcc:	f009 ff66 	bl	800ce9c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8002fdc:	2201      	movs	r2, #1
 8002fde:	2104      	movs	r1, #4
 8002fe0:	f009 ff5c 	bl	800ce9c <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	f009 ff52 	bl	800ce9c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003004:	2204      	movs	r2, #4
 8003006:	2104      	movs	r1, #4
 8003008:	f009 ff48 	bl	800ce9c <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	33c4      	adds	r3, #196	@ 0xc4
 8003016:	2201      	movs	r2, #1
 8003018:	2101      	movs	r1, #1
 800301a:	f009 ff3f 	bl	800ce9c <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 800302a:	2201      	movs	r2, #1
 800302c:	2101      	movs	r1, #1
 800302e:	f009 ff35 	bl	800ce9c <arm_mat_init_f32>
}
 8003032:	bf00      	nop
 8003034:	37d0      	adds	r7, #208	@ 0xd0
 8003036:	46bd      	mov	sp, r7
 8003038:	bdb0      	pop	{r4, r5, r7, pc}
 800303a:	bf00      	nop

0800303c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800303c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003040:	b08b      	sub	sp, #44	@ 0x2c
 8003042:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003044:	f002 fb55 	bl	80056f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003048:	f000 fd86 	bl	8003b58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800304c:	f001 f85a 	bl	8004104 <MX_GPIO_Init>
  MX_DMA_Init();
 8003050:	f001 f816 	bl	8004080 <MX_DMA_Init>
  MX_TIM1_Init();
 8003054:	f000 fe42 	bl	8003cdc <MX_TIM1_Init>
  MX_TIM3_Init();
 8003058:	f000 fef0 	bl	8003e3c <MX_TIM3_Init>
  MX_TIM4_Init();
 800305c:	f000 ff3c 	bl	8003ed8 <MX_TIM4_Init>
  MX_ADC1_Init();
 8003060:	f000 fdc4 	bl	8003bec <MX_ADC1_Init>
  MX_TIM16_Init();
 8003064:	f000 ff8e 	bl	8003f84 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8003068:	f000 ffbc 	bl	8003fe4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Modbus setting
  hmodbus.huart = &huart2;
 800306c:	4b8a      	ldr	r3, [pc, #552]	@ (8003298 <main+0x25c>)
 800306e:	4a8b      	ldr	r2, [pc, #556]	@ (800329c <main+0x260>)
 8003070:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8003072:	4b89      	ldr	r3, [pc, #548]	@ (8003298 <main+0x25c>)
 8003074:	4a8a      	ldr	r2, [pc, #552]	@ (80032a0 <main+0x264>)
 8003076:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8003078:	4a87      	ldr	r2, [pc, #540]	@ (8003298 <main+0x25c>)
 800307a:	2315      	movs	r3, #21
 800307c:	7013      	strb	r3, [r2, #0]
  hmodbus.RegisterSize =200;
 800307e:	4b86      	ldr	r3, [pc, #536]	@ (8003298 <main+0x25c>)
 8003080:	22c8      	movs	r2, #200	@ 0xc8
 8003082:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8003084:	4987      	ldr	r1, [pc, #540]	@ (80032a4 <main+0x268>)
 8003086:	4884      	ldr	r0, [pc, #528]	@ (8003298 <main+0x25c>)
 8003088:	f7fe f9fa 	bl	8001480 <Modbus_init>
  registerFrame[0x00].U16 = 22881; // Set default heart beat to "Ya"
 800308c:	4a85      	ldr	r2, [pc, #532]	@ (80032a4 <main+0x268>)
 800308e:	f645 1361 	movw	r3, #22881	@ 0x5961
 8003092:	8013      	strh	r3, [r2, #0]

  // Update command timer
  HAL_TIM_Base_Start_IT(&main_loop_tim);
 8003094:	4884      	ldr	r0, [pc, #528]	@ (80032a8 <main+0x26c>)
 8003096:	f006 f8cf 	bl	8009238 <HAL_TIM_Base_Start_IT>

  // PWM generator
  HAL_TIM_Base_Start(&pwm_tim);
 800309a:	4884      	ldr	r0, [pc, #528]	@ (80032ac <main+0x270>)
 800309c:	f006 f85c 	bl	8009158 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&pwm_tim, pwm_channel);
 80030a0:	2100      	movs	r1, #0
 80030a2:	4882      	ldr	r0, [pc, #520]	@ (80032ac <main+0x270>)
 80030a4:	f006 f9ae 	bl	8009404 <HAL_TIM_PWM_Start>

  // Encoder reader
  HAL_TIM_Encoder_Start(&encoder_tim, encoder_channel);
 80030a8:	213c      	movs	r1, #60	@ 0x3c
 80030aa:	4881      	ldr	r0, [pc, #516]	@ (80032b0 <main+0x274>)
 80030ac:	f006 fc66 	bl	800997c <HAL_TIM_Encoder_Start>
  QEI_init(&encoder, encoder_ppr, encoder_frequency, encoder_cnt_period);
 80030b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80030b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80030bc:	487d      	ldr	r0, [pc, #500]	@ (80032b4 <main+0x278>)
 80030be:	f001 fbe2 	bl	8004886 <QEI_init>

  // Current reader
  ADC_init(&current_adc, &current_sensor);
 80030c2:	497d      	ldr	r1, [pc, #500]	@ (80032b8 <main+0x27c>)
 80030c4:	487d      	ldr	r0, [pc, #500]	@ (80032bc <main+0x280>)
 80030c6:	f7ff fd37 	bl	8002b38 <ADC_init>

  // Kalman filter
  Kalman_Start(&kalman);
 80030ca:	487d      	ldr	r0, [pc, #500]	@ (80032c0 <main+0x284>)
 80030cc:	f7ff fde4 	bl	8002c98 <Kalman_Start>

  // State initialize
  homing_init(&home);
 80030d0:	487c      	ldr	r0, [pc, #496]	@ (80032c4 <main+0x288>)
 80030d2:	f001 fddd 	bl	8004c90 <homing_init>
  point_init(&point);
 80030d6:	487c      	ldr	r0, [pc, #496]	@ (80032c8 <main+0x28c>)
 80030d8:	f001 fdc9 	bl	8004c6e <point_init>
  emer_init(&emer);
 80030dc:	487b      	ldr	r0, [pc, #492]	@ (80032cc <main+0x290>)
 80030de:	f001 ffac 	bl	800503a <emer_init>


  // PID initialize
  PID_init(&p_pid, p_kp, p_ki, p_kd, 0.005);
 80030e2:	4b7b      	ldr	r3, [pc, #492]	@ (80032d0 <main+0x294>)
 80030e4:	edd3 7a00 	vldr	s15, [r3]
 80030e8:	4b7a      	ldr	r3, [pc, #488]	@ (80032d4 <main+0x298>)
 80030ea:	ed93 7a00 	vldr	s14, [r3]
 80030ee:	4b7a      	ldr	r3, [pc, #488]	@ (80032d8 <main+0x29c>)
 80030f0:	edd3 6a00 	vldr	s13, [r3]
 80030f4:	eddf 1a79 	vldr	s3, [pc, #484]	@ 80032dc <main+0x2a0>
 80030f8:	eeb0 1a66 	vmov.f32	s2, s13
 80030fc:	eef0 0a47 	vmov.f32	s1, s14
 8003100:	eeb0 0a67 	vmov.f32	s0, s15
 8003104:	4876      	ldr	r0, [pc, #472]	@ (80032e0 <main+0x2a4>)
 8003106:	f001 fa41 	bl	800458c <PID_init>
  PID_init(&v_pid, v_kp, v_ki, v_kd, 0.001);
 800310a:	4b76      	ldr	r3, [pc, #472]	@ (80032e4 <main+0x2a8>)
 800310c:	edd3 7a00 	vldr	s15, [r3]
 8003110:	4b75      	ldr	r3, [pc, #468]	@ (80032e8 <main+0x2ac>)
 8003112:	ed93 7a00 	vldr	s14, [r3]
 8003116:	4b75      	ldr	r3, [pc, #468]	@ (80032ec <main+0x2b0>)
 8003118:	edd3 6a00 	vldr	s13, [r3]
 800311c:	eddf 1a74 	vldr	s3, [pc, #464]	@ 80032f0 <main+0x2b4>
 8003120:	eeb0 1a66 	vmov.f32	s2, s13
 8003124:	eef0 0a47 	vmov.f32	s1, s14
 8003128:	eeb0 0a67 	vmov.f32	s0, s15
 800312c:	4871      	ldr	r0, [pc, #452]	@ (80032f4 <main+0x2b8>)
 800312e:	f001 fa2d 	bl	800458c <PID_init>

  //Set point
  setpoint = 0.0;
 8003132:	4b71      	ldr	r3, [pc, #452]	@ (80032f8 <main+0x2bc>)
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	601a      	str	r2, [r3, #0]

  HAL_GPIO_WritePin(emer_light_gpio, emer_light_pin, RESET);
 800313a:	2200      	movs	r2, #0
 800313c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003140:	486e      	ldr	r0, [pc, #440]	@ (80032fc <main+0x2c0>)
 8003142:	f004 ff45 	bl	8007fd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(vacuum_gpio, vacuum_pin, RESET);
 8003146:	2200      	movs	r2, #0
 8003148:	2110      	movs	r1, #16
 800314a:	486d      	ldr	r0, [pc, #436]	@ (8003300 <main+0x2c4>)
 800314c:	f004 ff40 	bl	8007fd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(solenoid_pull_gpio, solenoid_pull_pin, RESET);
 8003150:	2200      	movs	r2, #0
 8003152:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003156:	486a      	ldr	r0, [pc, #424]	@ (8003300 <main+0x2c4>)
 8003158:	f004 ff3a 	bl	8007fd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(solenoid_push_gpio, solenoid_push_pin, RESET);
 800315c:	2200      	movs	r2, #0
 800315e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003162:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003166:	f004 ff33 	bl	8007fd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(controller_error_gpio, controller_error_pin, RESET);
 800316a:	2200      	movs	r2, #0
 800316c:	2102      	movs	r1, #2
 800316e:	4864      	ldr	r0, [pc, #400]	@ (8003300 <main+0x2c4>)
 8003170:	f004 ff2e 	bl	8007fd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motor_error_gpio, motor_error_pin, RESET);
 8003174:	2200      	movs	r2, #0
 8003176:	2104      	movs	r1, #4
 8003178:	4861      	ldr	r0, [pc, #388]	@ (8003300 <main+0x2c4>)
 800317a:	f004 ff29 	bl	8007fd0 <HAL_GPIO_WritePin>
//		  }
//	  }

		// Update modbus
		// Routine
		registerFrame[0x04].U16 = eff.update_actual_status[0x04].U16;	// Gripper Movement Actual Status(0x10)
 800317e:	4b61      	ldr	r3, [pc, #388]	@ (8003304 <main+0x2c8>)
 8003180:	89db      	ldrh	r3, [r3, #14]
 8003182:	4a48      	ldr	r2, [pc, #288]	@ (80032a4 <main+0x268>)
 8003184:	8113      	strh	r3, [r2, #8]
		registerFrame[0x10].U16 = state;							// Z-axis Moving Status(0x10)
 8003186:	4b60      	ldr	r3, [pc, #384]	@ (8003308 <main+0x2cc>)
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	4a46      	ldr	r2, [pc, #280]	@ (80032a4 <main+0x268>)
 800318c:	8413      	strh	r3, [r2, #32]
		registerFrame[0x11].U16 = (uint16_t)(encoder.mm * 10);		// Z-axis Actual Position(0x11)
 800318e:	4b49      	ldr	r3, [pc, #292]	@ (80032b4 <main+0x278>)
 8003190:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003194:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800319c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031a0:	ee17 3a90 	vmov	r3, s15
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	4a3f      	ldr	r2, [pc, #252]	@ (80032a4 <main+0x268>)
 80031a8:	8453      	strh	r3, [r2, #34]	@ 0x22
		registerFrame[0x12].U16 = (int16_t)(encoder.mmps * 10);		// Z-axis Actual Speed (0x12)
 80031aa:	4b42      	ldr	r3, [pc, #264]	@ (80032b4 <main+0x278>)
 80031ac:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80031b0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80031b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031bc:	ee17 3a90 	vmov	r3, s15
 80031c0:	b21b      	sxth	r3, r3
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	4a37      	ldr	r2, [pc, #220]	@ (80032a4 <main+0x268>)
 80031c6:	8493      	strh	r3, [r2, #36]	@ 0x24
		registerFrame[0x13].U16 = (int16_t)(encoder.mmpss * 10);	// Z-axis Acceleration(0x13)
 80031c8:	4b3a      	ldr	r3, [pc, #232]	@ (80032b4 <main+0x278>)
 80031ca:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80031ce:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80031d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031da:	ee17 3a90 	vmov	r3, s15
 80031de:	b21b      	sxth	r3, r3
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	4a30      	ldr	r2, [pc, #192]	@ (80032a4 <main+0x268>)
 80031e4:	84d3      	strh	r3, [r2, #38]	@ 0x26
		registerFrame[0x40].U16 = (int16_t)(x_axis_position * 10);	// X-axis Actual Position(0x40)
 80031e6:	4b49      	ldr	r3, [pc, #292]	@ (800330c <main+0x2d0>)
 80031e8:	edd3 7a00 	vldr	s15, [r3]
 80031ec:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80031f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031f8:	ee17 3a90 	vmov	r3, s15
 80031fc:	b21b      	sxth	r3, r3
 80031fe:	b29b      	uxth	r3, r3
 8003200:	4a28      	ldr	r2, [pc, #160]	@ (80032a4 <main+0x268>)
 8003202:	f8a2 3080 	strh.w	r3, [r2, #128]	@ 0x80
		if(registerFrame[0x00].U16 == 18537){
 8003206:	4b27      	ldr	r3, [pc, #156]	@ (80032a4 <main+0x268>)
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	f644 0269 	movw	r2, #18537	@ 0x4869
 800320e:	4293      	cmp	r3, r2
 8003210:	d103      	bne.n	800321a <main+0x1de>
			registerFrame[0x00].U16 = 22881;
 8003212:	4a24      	ldr	r2, [pc, #144]	@ (80032a4 <main+0x268>)
 8003214:	f645 1361 	movw	r3, #22881	@ 0x5961
 8003218:	8013      	strh	r3, [r2, #0]
		}

		if(mode == WAIT){
 800321a:	4b3d      	ldr	r3, [pc, #244]	@ (8003310 <main+0x2d4>)
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	f040 8084 	bne.w	800332c <main+0x2f0>
			// Update peripheral
			Vacuum_Status(&eff); // Vacuum
 8003224:	4837      	ldr	r0, [pc, #220]	@ (8003304 <main+0x2c8>)
 8003226:	f7fd fe4b 	bl	8000ec0 <Vacuum_Status>
			Gripper_Movement_Status(&eff); // End effector
 800322a:	4836      	ldr	r0, [pc, #216]	@ (8003304 <main+0x2c8>)
 800322c:	f7fd fe74 	bl	8000f18 <Gripper_Movement_Status>
			// End effector update
			Update_eff(&eff, solenoid_pull_gpio, solenoid_pull_pin, solenoid_push_gpio, solenoid_push_pin, vacuum_gpio, vacuum_pin);
 8003230:	2310      	movs	r3, #16
 8003232:	9302      	str	r3, [sp, #8]
 8003234:	4b32      	ldr	r3, [pc, #200]	@ (8003300 <main+0x2c4>)
 8003236:	9301      	str	r3, [sp, #4]
 8003238:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003242:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003246:	492e      	ldr	r1, [pc, #184]	@ (8003300 <main+0x2c4>)
 8003248:	482e      	ldr	r0, [pc, #184]	@ (8003304 <main+0x2c8>)
 800324a:	f7ff fc84 	bl	8002b56 <Update_eff>

			//  homing command from Homing button and Base system Check command
			if(home.homing_command == 0){
 800324e:	4b1d      	ldr	r3, [pc, #116]	@ (80032c4 <main+0x288>)
 8003250:	789b      	ldrb	r3, [r3, #2]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d15e      	bne.n	8003314 <main+0x2d8>
				Set_Home(); // Refresh homing command from base system
 8003256:	f7fd ff11 	bl	800107c <Set_Home>
				if(state == 0b0010){
 800325a:	4b2b      	ldr	r3, [pc, #172]	@ (8003308 <main+0x2cc>)
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d10c      	bne.n	800327c <main+0x240>
					// Have command from base system
					mode = HOMING;
 8003262:	4a2b      	ldr	r2, [pc, #172]	@ (8003310 <main+0x2d4>)
 8003264:	2302      	movs	r3, #2
 8003266:	8013      	strh	r3, [r2, #0]
					home.homing_command = 1;
 8003268:	4a16      	ldr	r2, [pc, #88]	@ (80032c4 <main+0x288>)
 800326a:	2301      	movs	r3, #1
 800326c:	7093      	strb	r3, [r2, #2]
					registerFrame[0x01].U16 = 0b0000; // Reset data of base system status
 800326e:	4a0d      	ldr	r2, [pc, #52]	@ (80032a4 <main+0x268>)
 8003270:	2300      	movs	r3, #0
 8003272:	8053      	strh	r3, [r2, #2]
					registerFrame[0x10].U16 = 0b0010; // Set data of moving status to Home
 8003274:	4a0b      	ldr	r2, [pc, #44]	@ (80032a4 <main+0x268>)
 8003276:	2302      	movs	r3, #2
 8003278:	8413      	strh	r3, [r2, #32]
 800327a:	e057      	b.n	800332c <main+0x2f0>
				}
				else if(HAL_GPIO_ReadPin(home_gpio, home_pin) == 1){
 800327c:	2140      	movs	r1, #64	@ 0x40
 800327e:	481f      	ldr	r0, [pc, #124]	@ (80032fc <main+0x2c0>)
 8003280:	f004 fe8e 	bl	8007fa0 <HAL_GPIO_ReadPin>
 8003284:	4603      	mov	r3, r0
 8003286:	2b01      	cmp	r3, #1
 8003288:	d150      	bne.n	800332c <main+0x2f0>
					// Have command from home switch
					mode = HOMING;
 800328a:	4a21      	ldr	r2, [pc, #132]	@ (8003310 <main+0x2d4>)
 800328c:	2302      	movs	r3, #2
 800328e:	8013      	strh	r3, [r2, #0]
					home.homing_command = 1;
 8003290:	4a0c      	ldr	r2, [pc, #48]	@ (80032c4 <main+0x288>)
 8003292:	2301      	movs	r3, #1
 8003294:	7093      	strb	r3, [r2, #2]
 8003296:	e049      	b.n	800332c <main+0x2f0>
 8003298:	20000134 	.word	0x20000134
 800329c:	20000b04 	.word	0x20000b04
 80032a0:	200009d8 	.word	0x200009d8
 80032a4:	20000cec 	.word	0x20000cec
 80032a8:	20000840 	.word	0x20000840
 80032ac:	20000774 	.word	0x20000774
 80032b0:	2000090c 	.word	0x2000090c
 80032b4:	200010f8 	.word	0x200010f8
 80032b8:	20001024 	.word	0x20001024
 80032bc:	200006a8 	.word	0x200006a8
 80032c0:	200011b0 	.word	0x200011b0
 80032c4:	20000cd0 	.word	0x20000cd0
 80032c8:	20000cc8 	.word	0x20000cc8
 80032cc:	20000ce8 	.word	0x20000ce8
 80032d0:	20000074 	.word	0x20000074
 80032d4:	2000119c 	.word	0x2000119c
 80032d8:	200011a0 	.word	0x200011a0
 80032dc:	3ba3d70a 	.word	0x3ba3d70a
 80032e0:	2000117c 	.word	0x2000117c
 80032e4:	2000006c 	.word	0x2000006c
 80032e8:	20000070 	.word	0x20000070
 80032ec:	20001170 	.word	0x20001170
 80032f0:	3a83126f 	.word	0x3a83126f
 80032f4:	20001150 	.word	0x20001150
 80032f8:	20000cc0 	.word	0x20000cc0
 80032fc:	48000800 	.word	0x48000800
 8003300:	48000400 	.word	0x48000400
 8003304:	20000e7c 	.word	0x20000e7c
 8003308:	2000012e 	.word	0x2000012e
 800330c:	20001530 	.word	0x20001530
 8003310:	20000cc6 	.word	0x20000cc6
//					registerFrame[0x10].U16 = 0b0010; // Set data of moving status to Home
					}
			}
			else{
				// Nothing happen
				pwm_signal = 0;
 8003314:	4b9e      	ldr	r3, [pc, #632]	@ (8003590 <main+0x554>)
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
				Update_pwm(&pwm_tim, pwm_channel, dir_gpio, dir_pin, pwm_signal); // Update main PWM signal
 800331a:	4b9d      	ldr	r3, [pc, #628]	@ (8003590 <main+0x554>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	2302      	movs	r3, #2
 8003322:	4a9c      	ldr	r2, [pc, #624]	@ (8003594 <main+0x558>)
 8003324:	2100      	movs	r1, #0
 8003326:	489c      	ldr	r0, [pc, #624]	@ (8003598 <main+0x55c>)
 8003328:	f001 fa16 	bl	8004758 <Update_pwm>
			}
		}
		if(mode == RUNNING){
 800332c:	4b9b      	ldr	r3, [pc, #620]	@ (800359c <main+0x560>)
 800332e:	881b      	ldrh	r3, [r3, #0]
 8003330:	2b01      	cmp	r3, #1
 8003332:	f040 83a1 	bne.w	8003a78 <main+0xa3c>
			if(testing == 1){
 8003336:	4b9a      	ldr	r3, [pc, #616]	@ (80035a0 <main+0x564>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d14f      	bne.n	80033de <main+0x3a2>
				sensor[0] = __HAL_TIM_GET_COUNTER(&encoder_tim); // Encoder
 800333e:	4b99      	ldr	r3, [pc, #612]	@ (80035a4 <main+0x568>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003344:	2200      	movs	r2, #0
 8003346:	4698      	mov	r8, r3
 8003348:	4691      	mov	r9, r2
 800334a:	4b97      	ldr	r3, [pc, #604]	@ (80035a8 <main+0x56c>)
 800334c:	e9c3 8900 	strd	r8, r9, [r3]
				sensor[1] = HAL_GPIO_ReadPin(proximity_gpio, proximity_pin); // Proximity
 8003350:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003354:	4895      	ldr	r0, [pc, #596]	@ (80035ac <main+0x570>)
 8003356:	f004 fe23 	bl	8007fa0 <HAL_GPIO_ReadPin>
 800335a:	4603      	mov	r3, r0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2200      	movs	r2, #0
 8003360:	469a      	mov	sl, r3
 8003362:	4693      	mov	fp, r2
 8003364:	4b90      	ldr	r3, [pc, #576]	@ (80035a8 <main+0x56c>)
 8003366:	e9c3 ab02 	strd	sl, fp, [r3, #8]
				sensor[2] = HAL_GPIO_ReadPin(reed_pull_gpio, reed_pull_pin); // Reed switch pull
 800336a:	2180      	movs	r1, #128	@ 0x80
 800336c:	4889      	ldr	r0, [pc, #548]	@ (8003594 <main+0x558>)
 800336e:	f004 fe17 	bl	8007fa0 <HAL_GPIO_ReadPin>
 8003372:	4603      	mov	r3, r0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2200      	movs	r2, #0
 8003378:	461d      	mov	r5, r3
 800337a:	4616      	mov	r6, r2
 800337c:	4b8a      	ldr	r3, [pc, #552]	@ (80035a8 <main+0x56c>)
 800337e:	e9c3 5604 	strd	r5, r6, [r3, #16]
				sensor[3] = HAL_GPIO_ReadPin(reed_push_gpio, reed_push_pin); // Reed switch push
 8003382:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003386:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800338a:	f004 fe09 	bl	8007fa0 <HAL_GPIO_ReadPin>
 800338e:	4603      	mov	r3, r0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2200      	movs	r2, #0
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	617a      	str	r2, [r7, #20]
 8003398:	4b83      	ldr	r3, [pc, #524]	@ (80035a8 <main+0x56c>)
 800339a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800339e:	e9c3 1206 	strd	r1, r2, [r3, #24]
				sensor[4] = HAL_GPIO_ReadPin(emer_gpio, emer_pin); // Emergency button
 80033a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80033a6:	4881      	ldr	r0, [pc, #516]	@ (80035ac <main+0x570>)
 80033a8:	f004 fdfa 	bl	8007fa0 <HAL_GPIO_ReadPin>
 80033ac:	4603      	mov	r3, r0
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2200      	movs	r2, #0
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	60fa      	str	r2, [r7, #12]
 80033b6:	4b7c      	ldr	r3, [pc, #496]	@ (80035a8 <main+0x56c>)
 80033b8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80033bc:	e9c3 1208 	strd	r1, r2, [r3, #32]
				sensor[5] = HAL_GPIO_ReadPin(home_gpio, home_pin); // Home button
 80033c0:	2140      	movs	r1, #64	@ 0x40
 80033c2:	4874      	ldr	r0, [pc, #464]	@ (8003594 <main+0x558>)
 80033c4:	f004 fdec 	bl	8007fa0 <HAL_GPIO_ReadPin>
 80033c8:	4603      	mov	r3, r0
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2200      	movs	r2, #0
 80033ce:	603b      	str	r3, [r7, #0]
 80033d0:	607a      	str	r2, [r7, #4]
 80033d2:	4b75      	ldr	r3, [pc, #468]	@ (80035a8 <main+0x56c>)
 80033d4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80033d8:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
 80033dc:	e2c6      	b.n	800396c <main+0x930>
			}
			else if(testing == 0){
 80033de:	4b70      	ldr	r3, [pc, #448]	@ (80035a0 <main+0x564>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f040 82c2 	bne.w	800396c <main+0x930>
				// Check command from base system status
				// Go point command from base system
				if(Run_Point_Mode() == 1){
 80033e8:	f7fd fe2c 	bl	8001044 <Run_Point_Mode>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d10d      	bne.n	800340e <main+0x3d2>
					setpoint = Set_Goal_Point();
 80033f2:	f7fd fe1b 	bl	800102c <Set_Goal_Point>
 80033f6:	4603      	mov	r3, r0
 80033f8:	ee07 3a90 	vmov	s15, r3
 80033fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003400:	4b6b      	ldr	r3, [pc, #428]	@ (80035b0 <main+0x574>)
 8003402:	edc3 7a00 	vstr	s15, [r3]
					ready = 1;
 8003406:	4a6b      	ldr	r2, [pc, #428]	@ (80035b4 <main+0x578>)
 8003408:	2301      	movs	r3, #1
 800340a:	7013      	strb	r3, [r2, #0]
 800340c:	e038      	b.n	8003480 <main+0x444>
				}
				// Set shelves command from base system
				else if(Set_Shelves() == 1){
 800340e:	f7fd fde5 	bl	8000fdc <Set_Shelves>
 8003412:	4603      	mov	r3, r0
 8003414:	2b01      	cmp	r3, #1
 8003416:	d112      	bne.n	800343e <main+0x402>
					joy.shelves_position[0] = 0;
 8003418:	4a67      	ldr	r2, [pc, #412]	@ (80035b8 <main+0x57c>)
 800341a:	2300      	movs	r3, #0
 800341c:	80d3      	strh	r3, [r2, #6]
					joy.shelves_position[1] = 0;
 800341e:	4a66      	ldr	r2, [pc, #408]	@ (80035b8 <main+0x57c>)
 8003420:	2300      	movs	r3, #0
 8003422:	8113      	strh	r3, [r2, #8]
					joy.shelves_position[2] = 0;
 8003424:	4a64      	ldr	r2, [pc, #400]	@ (80035b8 <main+0x57c>)
 8003426:	2300      	movs	r3, #0
 8003428:	8153      	strh	r3, [r2, #10]
					joy.shelves_position[3] = 0;
 800342a:	4a63      	ldr	r2, [pc, #396]	@ (80035b8 <main+0x57c>)
 800342c:	2300      	movs	r3, #0
 800342e:	8193      	strh	r3, [r2, #12]
					joy.shelves_position[4] = 0;
 8003430:	4a61      	ldr	r2, [pc, #388]	@ (80035b8 <main+0x57c>)
 8003432:	2300      	movs	r3, #0
 8003434:	81d3      	strh	r3, [r2, #14]
					ready = 1;
 8003436:	4a5f      	ldr	r2, [pc, #380]	@ (80035b4 <main+0x578>)
 8003438:	2301      	movs	r3, #1
 800343a:	7013      	strb	r3, [r2, #0]
 800343c:	e020      	b.n	8003480 <main+0x444>
				}
				// Run jog mode from base system
				else if(Run_Jog_Mode() == 1){
 800343e:	f7fd ffc3 	bl	80013c8 <Run_Jog_Mode>
 8003442:	4603      	mov	r3, r0
 8003444:	2b01      	cmp	r3, #1
 8003446:	d11b      	bne.n	8003480 <main+0x444>
					SetPick_PlaceOrder();
 8003448:	f7fd fe34 	bl	80010b4 <SetPick_PlaceOrder>
					jog_status[0] = 1; // Go pick first
 800344c:	4a5b      	ldr	r2, [pc, #364]	@ (80035bc <main+0x580>)
 800344e:	2301      	movs	r3, #1
 8003450:	7013      	strb	r3, [r2, #0]
					jog_status[1] = 0;
 8003452:	4a5a      	ldr	r2, [pc, #360]	@ (80035bc <main+0x580>)
 8003454:	2300      	movs	r3, #0
 8003456:	7053      	strb	r3, [r2, #1]
					state = 4;
 8003458:	4a59      	ldr	r2, [pc, #356]	@ (80035c0 <main+0x584>)
 800345a:	2304      	movs	r3, #4
 800345c:	8013      	strh	r3, [r2, #0]
					strcpy(Jogmode, "Go to Pick...");
 800345e:	4b59      	ldr	r3, [pc, #356]	@ (80035c4 <main+0x588>)
 8003460:	4a59      	ldr	r2, [pc, #356]	@ (80035c8 <main+0x58c>)
 8003462:	461c      	mov	r4, r3
 8003464:	4613      	mov	r3, r2
 8003466:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003468:	6020      	str	r0, [r4, #0]
 800346a:	6061      	str	r1, [r4, #4]
 800346c:	60a2      	str	r2, [r4, #8]
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	81a3      	strh	r3, [r4, #12]
					registerFrame[0x10].U16 = state;
 8003472:	4b53      	ldr	r3, [pc, #332]	@ (80035c0 <main+0x584>)
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	4a55      	ldr	r2, [pc, #340]	@ (80035cc <main+0x590>)
 8003478:	8413      	strh	r3, [r2, #32]
					ready = 1;
 800347a:	4a4e      	ldr	r2, [pc, #312]	@ (80035b4 <main+0x578>)
 800347c:	2301      	movs	r3, #1
 800347e:	7013      	strb	r3, [r2, #0]
				}

				// Check state from z moving status
				// Set shelve
				if(state == 1){
 8003480:	4b4f      	ldr	r3, [pc, #316]	@ (80035c0 <main+0x584>)
 8003482:	881b      	ldrh	r3, [r3, #0]
 8003484:	2b01      	cmp	r3, #1
 8003486:	f040 811b 	bne.w	80036c0 <main+0x684>
					if(ready == 1){
 800348a:	4b4a      	ldr	r3, [pc, #296]	@ (80035b4 <main+0x578>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	2b01      	cmp	r3, #1
 8003490:	f040 826c 	bne.w	800396c <main+0x930>
						static uint8_t i = 0;
						// Update joy stick command
						Update_joy(&joy);
 8003494:	4848      	ldr	r0, [pc, #288]	@ (80035b8 <main+0x57c>)
 8003496:	f7ff fb7f 	bl	8002b98 <Update_joy>
						if(i > 5){
 800349a:	4b4d      	ldr	r3, [pc, #308]	@ (80035d0 <main+0x594>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b05      	cmp	r3, #5
 80034a0:	d926      	bls.n	80034f0 <main+0x4b4>
							registerFrame[0x23].U16 = joy.shelves_position[0];  //1st Shelve Position
 80034a2:	4b45      	ldr	r3, [pc, #276]	@ (80035b8 <main+0x57c>)
 80034a4:	88db      	ldrh	r3, [r3, #6]
 80034a6:	4a49      	ldr	r2, [pc, #292]	@ (80035cc <main+0x590>)
 80034a8:	f8a2 3046 	strh.w	r3, [r2, #70]	@ 0x46
							registerFrame[0x24].U16 = joy.shelves_position[1];  //2nd Shelve Position
 80034ac:	4b42      	ldr	r3, [pc, #264]	@ (80035b8 <main+0x57c>)
 80034ae:	891b      	ldrh	r3, [r3, #8]
 80034b0:	4a46      	ldr	r2, [pc, #280]	@ (80035cc <main+0x590>)
 80034b2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
							registerFrame[0x25].U16 = joy.shelves_position[2];  //3rd Shelve Position
 80034b6:	4b40      	ldr	r3, [pc, #256]	@ (80035b8 <main+0x57c>)
 80034b8:	895b      	ldrh	r3, [r3, #10]
 80034ba:	4a44      	ldr	r2, [pc, #272]	@ (80035cc <main+0x590>)
 80034bc:	f8a2 304a 	strh.w	r3, [r2, #74]	@ 0x4a
							registerFrame[0x26].U16 = joy.shelves_position[3];  //4th Shelve Position
 80034c0:	4b3d      	ldr	r3, [pc, #244]	@ (80035b8 <main+0x57c>)
 80034c2:	899b      	ldrh	r3, [r3, #12]
 80034c4:	4a41      	ldr	r2, [pc, #260]	@ (80035cc <main+0x590>)
 80034c6:	f8a2 304c 	strh.w	r3, [r2, #76]	@ 0x4c
							registerFrame[0x27].U16 = joy.shelves_position[4];  //5th Shelve Position
 80034ca:	4b3b      	ldr	r3, [pc, #236]	@ (80035b8 <main+0x57c>)
 80034cc:	89db      	ldrh	r3, [r3, #14]
 80034ce:	4a3f      	ldr	r2, [pc, #252]	@ (80035cc <main+0x590>)
 80034d0:	f8a2 304e 	strh.w	r3, [r2, #78]	@ 0x4e
							state = 0b0000;
 80034d4:	4a3a      	ldr	r2, [pc, #232]	@ (80035c0 <main+0x584>)
 80034d6:	2300      	movs	r3, #0
 80034d8:	8013      	strh	r3, [r2, #0]
							registerFrame[0x10].U16 = state;
 80034da:	4b39      	ldr	r3, [pc, #228]	@ (80035c0 <main+0x584>)
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	4a3b      	ldr	r2, [pc, #236]	@ (80035cc <main+0x590>)
 80034e0:	8413      	strh	r3, [r2, #32]
							ready = 0;
 80034e2:	4a34      	ldr	r2, [pc, #208]	@ (80035b4 <main+0x578>)
 80034e4:	2300      	movs	r3, #0
 80034e6:	7013      	strb	r3, [r2, #0]
							i = 0;
 80034e8:	4a39      	ldr	r2, [pc, #228]	@ (80035d0 <main+0x594>)
 80034ea:	2300      	movs	r3, #0
 80034ec:	7013      	strb	r3, [r2, #0]
 80034ee:	e23d      	b.n	800396c <main+0x930>
						}
						else if (!joy.s_1 && joy.s_2 && joy.s_3 && joy.s_4){
 80034f0:	4b31      	ldr	r3, [pc, #196]	@ (80035b8 <main+0x57c>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d12f      	bne.n	8003558 <main+0x51c>
 80034f8:	4b2f      	ldr	r3, [pc, #188]	@ (80035b8 <main+0x57c>)
 80034fa:	785b      	ldrb	r3, [r3, #1]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d02b      	beq.n	8003558 <main+0x51c>
 8003500:	4b2d      	ldr	r3, [pc, #180]	@ (80035b8 <main+0x57c>)
 8003502:	789b      	ldrb	r3, [r3, #2]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d027      	beq.n	8003558 <main+0x51c>
 8003508:	4b2b      	ldr	r3, [pc, #172]	@ (80035b8 <main+0x57c>)
 800350a:	78db      	ldrb	r3, [r3, #3]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d023      	beq.n	8003558 <main+0x51c>
							if(joy.is_place == 1){
 8003510:	4b29      	ldr	r3, [pc, #164]	@ (80035b8 <main+0x57c>)
 8003512:	791b      	ldrb	r3, [r3, #4]
 8003514:	2b01      	cmp	r3, #1
 8003516:	f040 8226 	bne.w	8003966 <main+0x92a>
								if(joy.is_place == 0){
 800351a:	4b27      	ldr	r3, [pc, #156]	@ (80035b8 <main+0x57c>)
 800351c:	791b      	ldrb	r3, [r3, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	f040 8221 	bne.w	8003966 <main+0x92a>
									setpoint = 20.0;
 8003524:	4b22      	ldr	r3, [pc, #136]	@ (80035b0 <main+0x574>)
 8003526:	4a2b      	ldr	r2, [pc, #172]	@ (80035d4 <main+0x598>)
 8003528:	601a      	str	r2, [r3, #0]
									initial_position = encoder.mm;
 800352a:	4b2b      	ldr	r3, [pc, #172]	@ (80035d8 <main+0x59c>)
 800352c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800352e:	4a2b      	ldr	r2, [pc, #172]	@ (80035dc <main+0x5a0>)
 8003530:	6013      	str	r3, [r2, #0]
									target_position = initial_position + setpoint;
 8003532:	4b2a      	ldr	r3, [pc, #168]	@ (80035dc <main+0x5a0>)
 8003534:	ed93 7a00 	vldr	s14, [r3]
 8003538:	4b1d      	ldr	r3, [pc, #116]	@ (80035b0 <main+0x574>)
 800353a:	edd3 7a00 	vldr	s15, [r3]
 800353e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003542:	4b27      	ldr	r3, [pc, #156]	@ (80035e0 <main+0x5a4>)
 8003544:	edc3 7a00 	vstr	s15, [r3]
									evaScurveData.t = 0;
 8003548:	4926      	ldr	r1, [pc, #152]	@ (80035e4 <main+0x5a8>)
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	e9c1 2306 	strd	r2, r3, [r1, #24]
							if(joy.is_place == 1){
 8003556:	e206      	b.n	8003966 <main+0x92a>
								}
							}
						}
						else if (joy.s_1 && !joy.s_2 && joy.s_3 && joy.s_4){
 8003558:	4b17      	ldr	r3, [pc, #92]	@ (80035b8 <main+0x57c>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d043      	beq.n	80035e8 <main+0x5ac>
 8003560:	4b15      	ldr	r3, [pc, #84]	@ (80035b8 <main+0x57c>)
 8003562:	785b      	ldrb	r3, [r3, #1]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d13f      	bne.n	80035e8 <main+0x5ac>
 8003568:	4b13      	ldr	r3, [pc, #76]	@ (80035b8 <main+0x57c>)
 800356a:	789b      	ldrb	r3, [r3, #2]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d03b      	beq.n	80035e8 <main+0x5ac>
 8003570:	4b11      	ldr	r3, [pc, #68]	@ (80035b8 <main+0x57c>)
 8003572:	78db      	ldrb	r3, [r3, #3]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d037      	beq.n	80035e8 <main+0x5ac>
							// switch 2 has pushed
							setpoint -= 10; // Move down 10 mm.
 8003578:	4b0d      	ldr	r3, [pc, #52]	@ (80035b0 <main+0x574>)
 800357a:	edd3 7a00 	vldr	s15, [r3]
 800357e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003582:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003586:	4b0a      	ldr	r3, [pc, #40]	@ (80035b0 <main+0x574>)
 8003588:	edc3 7a00 	vstr	s15, [r3]
 800358c:	e1ee      	b.n	800396c <main+0x930>
 800358e:	bf00      	nop
 8003590:	200010f0 	.word	0x200010f0
 8003594:	48000800 	.word	0x48000800
 8003598:	20000774 	.word	0x20000774
 800359c:	20000cc6 	.word	0x20000cc6
 80035a0:	2000006a 	.word	0x2000006a
 80035a4:	2000090c 	.word	0x2000090c
 80035a8:	20000c90 	.word	0x20000c90
 80035ac:	48000400 	.word	0x48000400
 80035b0:	20000cc0 	.word	0x20000cc0
 80035b4:	20000069 	.word	0x20000069
 80035b8:	20001014 	.word	0x20001014
 80035bc:	20000cc4 	.word	0x20000cc4
 80035c0:	2000012e 	.word	0x2000012e
 80035c4:	20000040 	.word	0x20000040
 80035c8:	0800df34 	.word	0x0800df34
 80035cc:	20000cec 	.word	0x20000cec
 80035d0:	200015c0 	.word	0x200015c0
 80035d4:	41a00000 	.word	0x41a00000
 80035d8:	200010f8 	.word	0x200010f8
 80035dc:	200015a8 	.word	0x200015a8
 80035e0:	20000078 	.word	0x20000078
 80035e4:	20001580 	.word	0x20001580
						}
						else if (joy.s_1 && joy.s_2 && !joy.s_3 && joy.s_4){
 80035e8:	4b96      	ldr	r3, [pc, #600]	@ (8003844 <main+0x808>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d02f      	beq.n	8003650 <main+0x614>
 80035f0:	4b94      	ldr	r3, [pc, #592]	@ (8003844 <main+0x808>)
 80035f2:	785b      	ldrb	r3, [r3, #1]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d02b      	beq.n	8003650 <main+0x614>
 80035f8:	4b92      	ldr	r3, [pc, #584]	@ (8003844 <main+0x808>)
 80035fa:	789b      	ldrb	r3, [r3, #2]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d127      	bne.n	8003650 <main+0x614>
 8003600:	4b90      	ldr	r3, [pc, #576]	@ (8003844 <main+0x808>)
 8003602:	78db      	ldrb	r3, [r3, #3]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d023      	beq.n	8003650 <main+0x614>
							// switch 3 has pushed
							// save data for base system
							if(joy.is_place == 1){
 8003608:	4b8e      	ldr	r3, [pc, #568]	@ (8003844 <main+0x808>)
 800360a:	791b      	ldrb	r3, [r3, #4]
 800360c:	2b01      	cmp	r3, #1
 800360e:	f040 81ac 	bne.w	800396a <main+0x92e>
								if(joy.is_place == 0){
 8003612:	4b8c      	ldr	r3, [pc, #560]	@ (8003844 <main+0x808>)
 8003614:	791b      	ldrb	r3, [r3, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	f040 81a7 	bne.w	800396a <main+0x92e>
									joy.shelves_position[i] = (uint16_t)(encoder.mm * 10);
 800361c:	4b8a      	ldr	r3, [pc, #552]	@ (8003848 <main+0x80c>)
 800361e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003622:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003626:	ee67 7a87 	vmul.f32	s15, s15, s14
 800362a:	4b88      	ldr	r3, [pc, #544]	@ (800384c <main+0x810>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003632:	ee17 2a90 	vmov	r2, s15
 8003636:	b291      	uxth	r1, r2
 8003638:	4a82      	ldr	r2, [pc, #520]	@ (8003844 <main+0x808>)
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	4413      	add	r3, r2
 800363e:	460a      	mov	r2, r1
 8003640:	80da      	strh	r2, [r3, #6]
									i++;
 8003642:	4b82      	ldr	r3, [pc, #520]	@ (800384c <main+0x810>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	3301      	adds	r3, #1
 8003648:	b2db      	uxtb	r3, r3
 800364a:	4a80      	ldr	r2, [pc, #512]	@ (800384c <main+0x810>)
 800364c:	7013      	strb	r3, [r2, #0]
							if(joy.is_place == 1){
 800364e:	e18c      	b.n	800396a <main+0x92e>
								}
							}
						}
						else if (joy.s_1 && joy.s_2 && joy.s_3 && !joy.s_4){
 8003650:	4b7c      	ldr	r3, [pc, #496]	@ (8003844 <main+0x808>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 8189 	beq.w	800396c <main+0x930>
 800365a:	4b7a      	ldr	r3, [pc, #488]	@ (8003844 <main+0x808>)
 800365c:	785b      	ldrb	r3, [r3, #1]
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 8184 	beq.w	800396c <main+0x930>
 8003664:	4b77      	ldr	r3, [pc, #476]	@ (8003844 <main+0x808>)
 8003666:	789b      	ldrb	r3, [r3, #2]
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 817f 	beq.w	800396c <main+0x930>
 800366e:	4b75      	ldr	r3, [pc, #468]	@ (8003844 <main+0x808>)
 8003670:	78db      	ldrb	r3, [r3, #3]
 8003672:	2b00      	cmp	r3, #0
 8003674:	f040 817a 	bne.w	800396c <main+0x930>
							// switch 4 has pushed
							if(joy.is_place == 1){
 8003678:	4b72      	ldr	r3, [pc, #456]	@ (8003844 <main+0x808>)
 800367a:	791b      	ldrb	r3, [r3, #4]
 800367c:	2b01      	cmp	r3, #1
 800367e:	f040 8175 	bne.w	800396c <main+0x930>
								if(joy.is_place == 0){
 8003682:	4b70      	ldr	r3, [pc, #448]	@ (8003844 <main+0x808>)
 8003684:	791b      	ldrb	r3, [r3, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	f040 8170 	bne.w	800396c <main+0x930>
									setpoint = -20.0;
 800368c:	4b70      	ldr	r3, [pc, #448]	@ (8003850 <main+0x814>)
 800368e:	4a71      	ldr	r2, [pc, #452]	@ (8003854 <main+0x818>)
 8003690:	601a      	str	r2, [r3, #0]
									initial_position = encoder.mm;
 8003692:	4b6d      	ldr	r3, [pc, #436]	@ (8003848 <main+0x80c>)
 8003694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003696:	4a70      	ldr	r2, [pc, #448]	@ (8003858 <main+0x81c>)
 8003698:	6013      	str	r3, [r2, #0]
									target_position = initial_position + setpoint;
 800369a:	4b6f      	ldr	r3, [pc, #444]	@ (8003858 <main+0x81c>)
 800369c:	ed93 7a00 	vldr	s14, [r3]
 80036a0:	4b6b      	ldr	r3, [pc, #428]	@ (8003850 <main+0x814>)
 80036a2:	edd3 7a00 	vldr	s15, [r3]
 80036a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036aa:	4b6c      	ldr	r3, [pc, #432]	@ (800385c <main+0x820>)
 80036ac:	edc3 7a00 	vstr	s15, [r3]
									evaScurveData.t = 0;
 80036b0:	496b      	ldr	r1, [pc, #428]	@ (8003860 <main+0x824>)
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80036be:	e155      	b.n	800396c <main+0x930>
							}
						}
					}
				}
				// Go pick
				else if(state == 4){
 80036c0:	4b68      	ldr	r3, [pc, #416]	@ (8003864 <main+0x828>)
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d179      	bne.n	80037bc <main+0x780>
					if(ready == 1){
 80036c8:	4b67      	ldr	r3, [pc, #412]	@ (8003868 <main+0x82c>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d130      	bne.n	8003732 <main+0x6f6>
						static uint8_t j = 0;
						if(j > 4){
 80036d0:	4b66      	ldr	r3, [pc, #408]	@ (800386c <main+0x830>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d902      	bls.n	80036de <main+0x6a2>
							j = 0;
 80036d8:	4a64      	ldr	r2, [pc, #400]	@ (800386c <main+0x830>)
 80036da:	2300      	movs	r3, #0
 80036dc:	7013      	strb	r3, [r2, #0]
						}

						// Set up trajectory
						initial_position = encoder.mm;
 80036de:	4b5a      	ldr	r3, [pc, #360]	@ (8003848 <main+0x80c>)
 80036e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e2:	4a5d      	ldr	r2, [pc, #372]	@ (8003858 <main+0x81c>)
 80036e4:	6013      	str	r3, [r2, #0]
						target_position = (float)(joy.shelves_position[Pick[j]]) / 10.0;
 80036e6:	4b61      	ldr	r3, [pc, #388]	@ (800386c <main+0x830>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	4b60      	ldr	r3, [pc, #384]	@ (8003870 <main+0x834>)
 80036ee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80036f2:	4a54      	ldr	r2, [pc, #336]	@ (8003844 <main+0x808>)
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	4413      	add	r3, r2
 80036f8:	88db      	ldrh	r3, [r3, #6]
 80036fa:	ee07 3a90 	vmov	s15, r3
 80036fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003702:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003706:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800370a:	4b54      	ldr	r3, [pc, #336]	@ (800385c <main+0x820>)
 800370c:	edc3 7a00 	vstr	s15, [r3]
						evaScurveData.t = 0;
 8003710:	4953      	ldr	r1, [pc, #332]	@ (8003860 <main+0x824>)
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	e9c1 2306 	strd	r2, r3, [r1, #24]
						ready = 0;
 800371e:	4a52      	ldr	r2, [pc, #328]	@ (8003868 <main+0x82c>)
 8003720:	2300      	movs	r3, #0
 8003722:	7013      	strb	r3, [r2, #0]
						j++;
 8003724:	4b51      	ldr	r3, [pc, #324]	@ (800386c <main+0x830>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	3301      	adds	r3, #1
 800372a:	b2db      	uxtb	r3, r3
 800372c:	4a4f      	ldr	r2, [pc, #316]	@ (800386c <main+0x830>)
 800372e:	7013      	strb	r3, [r2, #0]
 8003730:	e11c      	b.n	800396c <main+0x930>
					}
					else if(ready == 0){
 8003732:	4b4d      	ldr	r3, [pc, #308]	@ (8003868 <main+0x82c>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	f040 8118 	bne.w	800396c <main+0x930>
						if(evaScurveData.isFinised == true){
 800373c:	4b48      	ldr	r3, [pc, #288]	@ (8003860 <main+0x824>)
 800373e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 8111 	beq.w	800396c <main+0x930>
							if((eff.actual_status[0] == 1) && (eff.actual_status[1] == 0)){
 800374a:	4b4a      	ldr	r3, [pc, #296]	@ (8003874 <main+0x838>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d10c      	bne.n	800376c <main+0x730>
 8003752:	4b48      	ldr	r3, [pc, #288]	@ (8003874 <main+0x838>)
 8003754:	785b      	ldrb	r3, [r3, #1]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d108      	bne.n	800376c <main+0x730>
								// End effector is pull
								eff.solenoid_command[0] = 1;
 800375a:	4a46      	ldr	r2, [pc, #280]	@ (8003874 <main+0x838>)
 800375c:	2301      	movs	r3, #1
 800375e:	7093      	strb	r3, [r2, #2]
								eff.solenoid_command[1] = 1; // Push forward
 8003760:	4a44      	ldr	r2, [pc, #272]	@ (8003874 <main+0x838>)
 8003762:	2301      	movs	r3, #1
 8003764:	70d3      	strb	r3, [r2, #3]
								eff.solenoid_command[2] = 0;
 8003766:	4a43      	ldr	r2, [pc, #268]	@ (8003874 <main+0x838>)
 8003768:	2300      	movs	r3, #0
 800376a:	7113      	strb	r3, [r2, #4]
							}
							if((eff.actual_status[0] == 0) && (eff.actual_status[1] == 1)){
 800376c:	4b41      	ldr	r3, [pc, #260]	@ (8003874 <main+0x838>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d112      	bne.n	800379a <main+0x75e>
 8003774:	4b3f      	ldr	r3, [pc, #252]	@ (8003874 <main+0x838>)
 8003776:	785b      	ldrb	r3, [r3, #1]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d10e      	bne.n	800379a <main+0x75e>
								// End effector is push
								eff.solenoid_command[0] = 1;
 800377c:	4a3d      	ldr	r2, [pc, #244]	@ (8003874 <main+0x838>)
 800377e:	2301      	movs	r3, #1
 8003780:	7093      	strb	r3, [r2, #2]
								eff.solenoid_command[1] = 0;
 8003782:	4a3c      	ldr	r2, [pc, #240]	@ (8003874 <main+0x838>)
 8003784:	2300      	movs	r3, #0
 8003786:	70d3      	strb	r3, [r2, #3]
								eff.solenoid_command[2] = 1; // Pull back
 8003788:	4a3a      	ldr	r2, [pc, #232]	@ (8003874 <main+0x838>)
 800378a:	2301      	movs	r3, #1
 800378c:	7113      	strb	r3, [r2, #4]
								ready = 1;
 800378e:	4a36      	ldr	r2, [pc, #216]	@ (8003868 <main+0x82c>)
 8003790:	2301      	movs	r3, #1
 8003792:	7013      	strb	r3, [r2, #0]
								state = 8; // Then go place
 8003794:	4a33      	ldr	r2, [pc, #204]	@ (8003864 <main+0x828>)
 8003796:	2308      	movs	r3, #8
 8003798:	8013      	strh	r3, [r2, #0]
							}
							if((ready == 1) && (state == 8)){
 800379a:	4b33      	ldr	r3, [pc, #204]	@ (8003868 <main+0x82c>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	f040 80e4 	bne.w	800396c <main+0x930>
 80037a4:	4b2f      	ldr	r3, [pc, #188]	@ (8003864 <main+0x828>)
 80037a6:	881b      	ldrh	r3, [r3, #0]
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	f040 80df 	bne.w	800396c <main+0x930>
								// Deactivate solenoid valve
								eff.solenoid_command[1] = 0;
 80037ae:	4a31      	ldr	r2, [pc, #196]	@ (8003874 <main+0x838>)
 80037b0:	2300      	movs	r3, #0
 80037b2:	70d3      	strb	r3, [r2, #3]
								eff.solenoid_command[2] = 0;
 80037b4:	4a2f      	ldr	r2, [pc, #188]	@ (8003874 <main+0x838>)
 80037b6:	2300      	movs	r3, #0
 80037b8:	7113      	strb	r3, [r2, #4]
 80037ba:	e0d7      	b.n	800396c <main+0x930>
							}
						}
					}
				}
				// Go place
				else if(state == 8){
 80037bc:	4b29      	ldr	r3, [pc, #164]	@ (8003864 <main+0x828>)
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	f040 80a3 	bne.w	800390c <main+0x8d0>
					if(ready == 1){
 80037c6:	4b28      	ldr	r3, [pc, #160]	@ (8003868 <main+0x82c>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d15a      	bne.n	8003884 <main+0x848>
						static uint8_t k = 0;
						if(k > 4){
 80037ce:	4b2a      	ldr	r3, [pc, #168]	@ (8003878 <main+0x83c>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d90c      	bls.n	80037f0 <main+0x7b4>
							k = 0;
 80037d6:	4a28      	ldr	r2, [pc, #160]	@ (8003878 <main+0x83c>)
 80037d8:	2300      	movs	r3, #0
 80037da:	7013      	strb	r3, [r2, #0]
							state = 0b0000;
 80037dc:	4a21      	ldr	r2, [pc, #132]	@ (8003864 <main+0x828>)
 80037de:	2300      	movs	r3, #0
 80037e0:	8013      	strh	r3, [r2, #0]
							registerFrame[0x10].U16 = state;
 80037e2:	4b20      	ldr	r3, [pc, #128]	@ (8003864 <main+0x828>)
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	4a25      	ldr	r2, [pc, #148]	@ (800387c <main+0x840>)
 80037e8:	8413      	strh	r3, [r2, #32]
							ready = 0;
 80037ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003868 <main+0x82c>)
 80037ec:	2300      	movs	r3, #0
 80037ee:	7013      	strb	r3, [r2, #0]
						}

						// Set up trajectory
						initial_position = encoder.mm;
 80037f0:	4b15      	ldr	r3, [pc, #84]	@ (8003848 <main+0x80c>)
 80037f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f4:	4a18      	ldr	r2, [pc, #96]	@ (8003858 <main+0x81c>)
 80037f6:	6013      	str	r3, [r2, #0]
						target_position = (float)(joy.shelves_position[Place[k]]) / 10.0;
 80037f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003878 <main+0x83c>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	4b20      	ldr	r3, [pc, #128]	@ (8003880 <main+0x844>)
 8003800:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003804:	4a0f      	ldr	r2, [pc, #60]	@ (8003844 <main+0x808>)
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	4413      	add	r3, r2
 800380a:	88db      	ldrh	r3, [r3, #6]
 800380c:	ee07 3a90 	vmov	s15, r3
 8003810:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003814:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003818:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800381c:	4b0f      	ldr	r3, [pc, #60]	@ (800385c <main+0x820>)
 800381e:	edc3 7a00 	vstr	s15, [r3]
						evaScurveData.t = 0;
 8003822:	490f      	ldr	r1, [pc, #60]	@ (8003860 <main+0x824>)
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	e9c1 2306 	strd	r2, r3, [r1, #24]
						ready = 0;
 8003830:	4a0d      	ldr	r2, [pc, #52]	@ (8003868 <main+0x82c>)
 8003832:	2300      	movs	r3, #0
 8003834:	7013      	strb	r3, [r2, #0]
						k++;
 8003836:	4b10      	ldr	r3, [pc, #64]	@ (8003878 <main+0x83c>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	3301      	adds	r3, #1
 800383c:	b2db      	uxtb	r3, r3
 800383e:	4a0e      	ldr	r2, [pc, #56]	@ (8003878 <main+0x83c>)
 8003840:	7013      	strb	r3, [r2, #0]
 8003842:	e093      	b.n	800396c <main+0x930>
 8003844:	20001014 	.word	0x20001014
 8003848:	200010f8 	.word	0x200010f8
 800384c:	200015c0 	.word	0x200015c0
 8003850:	20000cc0 	.word	0x20000cc0
 8003854:	c1a00000 	.word	0xc1a00000
 8003858:	200015a8 	.word	0x200015a8
 800385c:	20000078 	.word	0x20000078
 8003860:	20001580 	.word	0x20001580
 8003864:	2000012e 	.word	0x2000012e
 8003868:	20000069 	.word	0x20000069
 800386c:	200015c1 	.word	0x200015c1
 8003870:	20000114 	.word	0x20000114
 8003874:	20000e7c 	.word	0x20000e7c
 8003878:	200015c2 	.word	0x200015c2
 800387c:	20000cec 	.word	0x20000cec
 8003880:	20000120 	.word	0x20000120
					}
					else if(ready == 0){
 8003884:	4b9a      	ldr	r3, [pc, #616]	@ (8003af0 <main+0xab4>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d16f      	bne.n	800396c <main+0x930>
						if(evaScurveData.isFinised == true){
 800388c:	4b99      	ldr	r3, [pc, #612]	@ (8003af4 <main+0xab8>)
 800388e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d069      	beq.n	800396c <main+0x930>
							if((eff.actual_status[0] == 1) && (eff.actual_status[1] == 0)){
 8003898:	4b97      	ldr	r3, [pc, #604]	@ (8003af8 <main+0xabc>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d10c      	bne.n	80038ba <main+0x87e>
 80038a0:	4b95      	ldr	r3, [pc, #596]	@ (8003af8 <main+0xabc>)
 80038a2:	785b      	ldrb	r3, [r3, #1]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d108      	bne.n	80038ba <main+0x87e>
								// End effector is pull
								eff.solenoid_command[0] = 1;
 80038a8:	4a93      	ldr	r2, [pc, #588]	@ (8003af8 <main+0xabc>)
 80038aa:	2301      	movs	r3, #1
 80038ac:	7093      	strb	r3, [r2, #2]
								eff.solenoid_command[1] = 1; // Push forward
 80038ae:	4a92      	ldr	r2, [pc, #584]	@ (8003af8 <main+0xabc>)
 80038b0:	2301      	movs	r3, #1
 80038b2:	70d3      	strb	r3, [r2, #3]
								eff.solenoid_command[2] = 0;
 80038b4:	4a90      	ldr	r2, [pc, #576]	@ (8003af8 <main+0xabc>)
 80038b6:	2300      	movs	r3, #0
 80038b8:	7113      	strb	r3, [r2, #4]
							}
							if((eff.actual_status[0] == 0) && (eff.actual_status[1] == 1)){
 80038ba:	4b8f      	ldr	r3, [pc, #572]	@ (8003af8 <main+0xabc>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d112      	bne.n	80038e8 <main+0x8ac>
 80038c2:	4b8d      	ldr	r3, [pc, #564]	@ (8003af8 <main+0xabc>)
 80038c4:	785b      	ldrb	r3, [r3, #1]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d10e      	bne.n	80038e8 <main+0x8ac>
								// End effector is push
								eff.solenoid_command[0] = 0;
 80038ca:	4a8b      	ldr	r2, [pc, #556]	@ (8003af8 <main+0xabc>)
 80038cc:	2300      	movs	r3, #0
 80038ce:	7093      	strb	r3, [r2, #2]
								eff.solenoid_command[1] = 0;
 80038d0:	4a89      	ldr	r2, [pc, #548]	@ (8003af8 <main+0xabc>)
 80038d2:	2300      	movs	r3, #0
 80038d4:	70d3      	strb	r3, [r2, #3]
								eff.solenoid_command[2] = 1; // Pull back
 80038d6:	4a88      	ldr	r2, [pc, #544]	@ (8003af8 <main+0xabc>)
 80038d8:	2301      	movs	r3, #1
 80038da:	7113      	strb	r3, [r2, #4]
								ready = 1;
 80038dc:	4a84      	ldr	r2, [pc, #528]	@ (8003af0 <main+0xab4>)
 80038de:	2301      	movs	r3, #1
 80038e0:	7013      	strb	r3, [r2, #0]
								state = 4; // Then go place
 80038e2:	4a86      	ldr	r2, [pc, #536]	@ (8003afc <main+0xac0>)
 80038e4:	2304      	movs	r3, #4
 80038e6:	8013      	strh	r3, [r2, #0]
							}
							if((ready == 1) && (state == 4)){
 80038e8:	4b81      	ldr	r3, [pc, #516]	@ (8003af0 <main+0xab4>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d13d      	bne.n	800396c <main+0x930>
 80038f0:	4b82      	ldr	r3, [pc, #520]	@ (8003afc <main+0xac0>)
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d139      	bne.n	800396c <main+0x930>
								// Deactivate solenoid valve
								eff.solenoid_command[0] = 0;
 80038f8:	4a7f      	ldr	r2, [pc, #508]	@ (8003af8 <main+0xabc>)
 80038fa:	2300      	movs	r3, #0
 80038fc:	7093      	strb	r3, [r2, #2]
								eff.solenoid_command[1] = 0;
 80038fe:	4a7e      	ldr	r2, [pc, #504]	@ (8003af8 <main+0xabc>)
 8003900:	2300      	movs	r3, #0
 8003902:	70d3      	strb	r3, [r2, #3]
								eff.solenoid_command[2] = 0;
 8003904:	4a7c      	ldr	r2, [pc, #496]	@ (8003af8 <main+0xabc>)
 8003906:	2300      	movs	r3, #0
 8003908:	7113      	strb	r3, [r2, #4]
 800390a:	e02f      	b.n	800396c <main+0x930>
							}
						}
					}
				}
				// Run point mode
				else if(state == 16){
 800390c:	4b7b      	ldr	r3, [pc, #492]	@ (8003afc <main+0xac0>)
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	2b10      	cmp	r3, #16
 8003912:	d12b      	bne.n	800396c <main+0x930>
					if(ready == 1){
 8003914:	4b76      	ldr	r3, [pc, #472]	@ (8003af0 <main+0xab4>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d112      	bne.n	8003942 <main+0x906>
						initial_position = encoder.mm;
 800391c:	4b78      	ldr	r3, [pc, #480]	@ (8003b00 <main+0xac4>)
 800391e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003920:	4a78      	ldr	r2, [pc, #480]	@ (8003b04 <main+0xac8>)
 8003922:	6013      	str	r3, [r2, #0]
						target_position = setpoint;
 8003924:	4b78      	ldr	r3, [pc, #480]	@ (8003b08 <main+0xacc>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a78      	ldr	r2, [pc, #480]	@ (8003b0c <main+0xad0>)
 800392a:	6013      	str	r3, [r2, #0]
						evaScurveData.t = 0;
 800392c:	4971      	ldr	r1, [pc, #452]	@ (8003af4 <main+0xab8>)
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	e9c1 2306 	strd	r2, r3, [r1, #24]
						ready = 0;
 800393a:	4a6d      	ldr	r2, [pc, #436]	@ (8003af0 <main+0xab4>)
 800393c:	2300      	movs	r3, #0
 800393e:	7013      	strb	r3, [r2, #0]
 8003940:	e014      	b.n	800396c <main+0x930>
					}
					else if((evaScurveData.isFinised == true) && (ready == 0)){
 8003942:	4b6c      	ldr	r3, [pc, #432]	@ (8003af4 <main+0xab8>)
 8003944:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00e      	beq.n	800396c <main+0x930>
 800394e:	4b68      	ldr	r3, [pc, #416]	@ (8003af0 <main+0xab4>)
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10a      	bne.n	800396c <main+0x930>
						state = 0b0000;
 8003956:	4a69      	ldr	r2, [pc, #420]	@ (8003afc <main+0xac0>)
 8003958:	2300      	movs	r3, #0
 800395a:	8013      	strh	r3, [r2, #0]
						registerFrame[0x10].U16 = state;
 800395c:	4b67      	ldr	r3, [pc, #412]	@ (8003afc <main+0xac0>)
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	4a6b      	ldr	r2, [pc, #428]	@ (8003b10 <main+0xad4>)
 8003962:	8413      	strh	r3, [r2, #32]
 8003964:	e002      	b.n	800396c <main+0x930>
							if(joy.is_place == 1){
 8003966:	bf00      	nop
 8003968:	e000      	b.n	800396c <main+0x930>
							if(joy.is_place == 1){
 800396a:	bf00      	nop
					}
				}
			}

			// Main controller loop
			if(is_update_encoder == 1){
 800396c:	4b69      	ldr	r3, [pc, #420]	@ (8003b14 <main+0xad8>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b01      	cmp	r3, #1
 8003972:	f040 8081 	bne.w	8003a78 <main+0xa3c>
				Update_qei(&encoder, &htim4);
 8003976:	4968      	ldr	r1, [pc, #416]	@ (8003b18 <main+0xadc>)
 8003978:	4861      	ldr	r0, [pc, #388]	@ (8003b00 <main+0xac4>)
 800397a:	f000 ffdd 	bl	8004938 <Update_qei>
//				kalman_velocity = SteadyStateKalmanFilter(&kalman, ((float)pwm_signal * 24.0)/65535.0, encoder.radps / 2.0);
//				kalman_velocity_z = kalman_velocity * 2.0 * 16.0 / (2.0 * M_PI);
				Trajectory_Generator(&genScurveData, initial_position, target_position, max_velocity, max_acceleration, max_jerk);
 800397e:	4b61      	ldr	r3, [pc, #388]	@ (8003b04 <main+0xac8>)
 8003980:	edd3 7a00 	vldr	s15, [r3]
 8003984:	4b61      	ldr	r3, [pc, #388]	@ (8003b0c <main+0xad0>)
 8003986:	ed93 7a00 	vldr	s14, [r3]
 800398a:	4b64      	ldr	r3, [pc, #400]	@ (8003b1c <main+0xae0>)
 800398c:	edd3 6a00 	vldr	s13, [r3]
 8003990:	4b63      	ldr	r3, [pc, #396]	@ (8003b20 <main+0xae4>)
 8003992:	ed93 6a00 	vldr	s12, [r3]
 8003996:	4b63      	ldr	r3, [pc, #396]	@ (8003b24 <main+0xae8>)
 8003998:	edd3 5a00 	vldr	s11, [r3]
 800399c:	eeb0 2a65 	vmov.f32	s4, s11
 80039a0:	eef0 1a46 	vmov.f32	s3, s12
 80039a4:	eeb0 1a66 	vmov.f32	s2, s13
 80039a8:	eef0 0a47 	vmov.f32	s1, s14
 80039ac:	eeb0 0a67 	vmov.f32	s0, s15
 80039b0:	485d      	ldr	r0, [pc, #372]	@ (8003b28 <main+0xaec>)
 80039b2:	f7fd fdbd 	bl	8001530 <Trajectory_Generator>
				Trajectory_Evaluated(&genScurveData, &evaScurveData, initial_position, target_position, max_velocity, max_acceleration, max_jerk);
 80039b6:	4b53      	ldr	r3, [pc, #332]	@ (8003b04 <main+0xac8>)
 80039b8:	edd3 7a00 	vldr	s15, [r3]
 80039bc:	4b53      	ldr	r3, [pc, #332]	@ (8003b0c <main+0xad0>)
 80039be:	ed93 7a00 	vldr	s14, [r3]
 80039c2:	4b56      	ldr	r3, [pc, #344]	@ (8003b1c <main+0xae0>)
 80039c4:	edd3 6a00 	vldr	s13, [r3]
 80039c8:	4b55      	ldr	r3, [pc, #340]	@ (8003b20 <main+0xae4>)
 80039ca:	ed93 6a00 	vldr	s12, [r3]
 80039ce:	4b55      	ldr	r3, [pc, #340]	@ (8003b24 <main+0xae8>)
 80039d0:	edd3 5a00 	vldr	s11, [r3]
 80039d4:	eeb0 2a65 	vmov.f32	s4, s11
 80039d8:	eef0 1a46 	vmov.f32	s3, s12
 80039dc:	eeb0 1a66 	vmov.f32	s2, s13
 80039e0:	eef0 0a47 	vmov.f32	s1, s14
 80039e4:	eeb0 0a67 	vmov.f32	s0, s15
 80039e8:	4942      	ldr	r1, [pc, #264]	@ (8003af4 <main+0xab8>)
 80039ea:	484f      	ldr	r0, [pc, #316]	@ (8003b28 <main+0xaec>)
 80039ec:	f7fe f97c 	bl	8001ce8 <Trajectory_Evaluated>
				setpoint_pos = evaScurveData.setposition;
 80039f0:	4b40      	ldr	r3, [pc, #256]	@ (8003af4 <main+0xab8>)
 80039f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f6:	494d      	ldr	r1, [pc, #308]	@ (8003b2c <main+0xaf0>)
 80039f8:	e9c1 2300 	strd	r2, r3, [r1]
				setpoint_vel = evaScurveData.setvelocity;
 80039fc:	4b3d      	ldr	r3, [pc, #244]	@ (8003af4 <main+0xab8>)
 80039fe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003a02:	494b      	ldr	r1, [pc, #300]	@ (8003b30 <main+0xaf4>)
 8003a04:	e9c1 2300 	strd	r2, r3, [r1]
				if(start_position_control == 1){
 8003a08:	4b4a      	ldr	r3, [pc, #296]	@ (8003b34 <main+0xaf8>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d10e      	bne.n	8003a2e <main+0x9f2>
					Update_position_control(setpoint_pos);
 8003a10:	4b46      	ldr	r3, [pc, #280]	@ (8003b2c <main+0xaf0>)
 8003a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a16:	4610      	mov	r0, r2
 8003a18:	4619      	mov	r1, r3
 8003a1a:	f7fd f889 	bl	8000b30 <__aeabi_d2f>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	ee00 3a10 	vmov	s0, r3
 8003a24:	f000 fd78 	bl	8004518 <Update_position_control>
					start_position_control = 0;
 8003a28:	4a42      	ldr	r2, [pc, #264]	@ (8003b34 <main+0xaf8>)
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	7013      	strb	r3, [r2, #0]
				}
				Update_velocity_control(setpoint_vel + p_output);
 8003a2e:	4b42      	ldr	r3, [pc, #264]	@ (8003b38 <main+0xafc>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fc fd42 	bl	80004bc <__aeabi_i2d>
 8003a38:	4b3d      	ldr	r3, [pc, #244]	@ (8003b30 <main+0xaf4>)
 8003a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3e:	f7fc fbf1 	bl	8000224 <__adddf3>
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	4610      	mov	r0, r2
 8003a48:	4619      	mov	r1, r3
 8003a4a:	f7fd f871 	bl	8000b30 <__aeabi_d2f>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	ee00 3a10 	vmov	s0, r3
 8003a54:	f000 fd2e 	bl	80044b4 <Update_velocity_control>
				pwm_signal = v_output;
 8003a58:	4b38      	ldr	r3, [pc, #224]	@ (8003b3c <main+0xb00>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a38      	ldr	r2, [pc, #224]	@ (8003b40 <main+0xb04>)
 8003a5e:	6013      	str	r3, [r2, #0]
				Update_pwm(&pwm_tim, pwm_channel, dir_gpio, dir_pin, pwm_signal); // Update main PWM signal
 8003a60:	4b37      	ldr	r3, [pc, #220]	@ (8003b40 <main+0xb04>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	2302      	movs	r3, #2
 8003a68:	4a36      	ldr	r2, [pc, #216]	@ (8003b44 <main+0xb08>)
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	4836      	ldr	r0, [pc, #216]	@ (8003b48 <main+0xb0c>)
 8003a6e:	f000 fe73 	bl	8004758 <Update_pwm>
				is_update_encoder = 0;
 8003a72:	4a28      	ldr	r2, [pc, #160]	@ (8003b14 <main+0xad8>)
 8003a74:	2300      	movs	r3, #0
 8003a76:	7013      	strb	r3, [r2, #0]
			}
		}
		if(mode == HOMING){
 8003a78:	4b34      	ldr	r3, [pc, #208]	@ (8003b4c <main+0xb10>)
 8003a7a:	881b      	ldrh	r3, [r3, #0]
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d11e      	bne.n	8003abe <main+0xa82>
			if(home.is_home == 1){
 8003a80:	4b33      	ldr	r3, [pc, #204]	@ (8003b50 <main+0xb14>)
 8003a82:	78db      	ldrb	r3, [r3, #3]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d11a      	bne.n	8003abe <main+0xa82>
				// Finish homing state
				Reset_qei(&encoder); // Reset encoder data
 8003a88:	481d      	ldr	r0, [pc, #116]	@ (8003b00 <main+0xac4>)
 8003a8a:	f001 f88f 	bl	8004bac <Reset_qei>
				registerFrame[0x10].U16 = 0b0000; // Reset data of moving status
 8003a8e:	4a20      	ldr	r2, [pc, #128]	@ (8003b10 <main+0xad4>)
 8003a90:	2300      	movs	r3, #0
 8003a92:	8413      	strh	r3, [r2, #32]
				home.is_home = 0;
 8003a94:	4a2e      	ldr	r2, [pc, #184]	@ (8003b50 <main+0xb14>)
 8003a96:	2300      	movs	r3, #0
 8003a98:	70d3      	strb	r3, [r2, #3]
				// Trajectory setup for hold position
				initial_position = 0;
 8003a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8003b04 <main+0xac8>)
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]
				target_position = 0;
 8003aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8003b0c <main+0xad0>)
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]
				evaScurveData.t = 0;
 8003aaa:	4912      	ldr	r1, [pc, #72]	@ (8003af4 <main+0xab8>)
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	e9c1 2306 	strd	r2, r3, [r1, #24]
				// Change Mode
				mode = RUNNING;
 8003ab8:	4a24      	ldr	r2, [pc, #144]	@ (8003b4c <main+0xb10>)
 8003aba:	2301      	movs	r3, #1
 8003abc:	8013      	strh	r3, [r2, #0]
			}
		}
		if(mode == EMERGENCY){
 8003abe:	4b23      	ldr	r3, [pc, #140]	@ (8003b4c <main+0xb10>)
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	f47f ab5b 	bne.w	800317e <main+0x142>
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1){
 8003ac8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003acc:	4821      	ldr	r0, [pc, #132]	@ (8003b54 <main+0xb18>)
 8003ace:	f004 fa67 	bl	8007fa0 <HAL_GPIO_ReadPin>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	f47f ab52 	bne.w	800317e <main+0x142>
				HAL_GPIO_WritePin(emer_light_gpio, emer_light_pin, RESET);
 8003ada:	2200      	movs	r2, #0
 8003adc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003ae0:	4818      	ldr	r0, [pc, #96]	@ (8003b44 <main+0xb08>)
 8003ae2:	f004 fa75 	bl	8007fd0 <HAL_GPIO_WritePin>
				mode = WAIT;
 8003ae6:	4a19      	ldr	r2, [pc, #100]	@ (8003b4c <main+0xb10>)
 8003ae8:	2300      	movs	r3, #0
 8003aea:	8013      	strh	r3, [r2, #0]
		registerFrame[0x04].U16 = eff.update_actual_status[0x04].U16;	// Gripper Movement Actual Status(0x10)
 8003aec:	f7ff bb47 	b.w	800317e <main+0x142>
 8003af0:	20000069 	.word	0x20000069
 8003af4:	20001580 	.word	0x20001580
 8003af8:	20000e7c 	.word	0x20000e7c
 8003afc:	2000012e 	.word	0x2000012e
 8003b00:	200010f8 	.word	0x200010f8
 8003b04:	200015a8 	.word	0x200015a8
 8003b08:	20000cc0 	.word	0x20000cc0
 8003b0c:	20000078 	.word	0x20000078
 8003b10:	20000cec 	.word	0x20000cec
 8003b14:	200010f4 	.word	0x200010f4
 8003b18:	2000090c 	.word	0x2000090c
 8003b1c:	2000007c 	.word	0x2000007c
 8003b20:	20000080 	.word	0x20000080
 8003b24:	20000084 	.word	0x20000084
 8003b28:	20001538 	.word	0x20001538
 8003b2c:	200015b0 	.word	0x200015b0
 8003b30:	200015b8 	.word	0x200015b8
 8003b34:	200011ac 	.word	0x200011ac
 8003b38:	200011a8 	.word	0x200011a8
 8003b3c:	20001178 	.word	0x20001178
 8003b40:	200010f0 	.word	0x200010f0
 8003b44:	48000800 	.word	0x48000800
 8003b48:	20000774 	.word	0x20000774
 8003b4c:	20000cc6 	.word	0x20000cc6
 8003b50:	20000cd0 	.word	0x20000cd0
 8003b54:	48000400 	.word	0x48000400

08003b58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b094      	sub	sp, #80	@ 0x50
 8003b5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b5e:	f107 0318 	add.w	r3, r7, #24
 8003b62:	2238      	movs	r2, #56	@ 0x38
 8003b64:	2100      	movs	r1, #0
 8003b66:	4618      	mov	r0, r3
 8003b68:	f009 f9b0 	bl	800cecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b6c:	1d3b      	adds	r3, r7, #4
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	605a      	str	r2, [r3, #4]
 8003b74:	609a      	str	r2, [r3, #8]
 8003b76:	60da      	str	r2, [r3, #12]
 8003b78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	f004 fa58 	bl	8008030 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003b80:	2301      	movs	r3, #1
 8003b82:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b88:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8003b92:	2306      	movs	r3, #6
 8003b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003b96:	2355      	movs	r3, #85	@ 0x55
 8003b98:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ba6:	f107 0318 	add.w	r3, r7, #24
 8003baa:	4618      	mov	r0, r3
 8003bac:	f004 faf4 	bl	8008198 <HAL_RCC_OscConfig>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <SystemClock_Config+0x62>
  {
    Error_Handler();
 8003bb6:	f000 fce3 	bl	8004580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bba:	230f      	movs	r3, #15
 8003bbc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003bce:	1d3b      	adds	r3, r7, #4
 8003bd0:	2104      	movs	r1, #4
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f004 fdf2 	bl	80087bc <HAL_RCC_ClockConfig>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8003bde:	f000 fccf 	bl	8004580 <Error_Handler>
  }
}
 8003be2:	bf00      	nop
 8003be4:	3750      	adds	r7, #80	@ 0x50
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08c      	sub	sp, #48	@ 0x30
 8003bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003bf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	605a      	str	r2, [r3, #4]
 8003bfc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003bfe:	1d3b      	adds	r3, r7, #4
 8003c00:	2220      	movs	r2, #32
 8003c02:	2100      	movs	r1, #0
 8003c04:	4618      	mov	r0, r3
 8003c06:	f009 f961 	bl	800cecc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003c0a:	4b32      	ldr	r3, [pc, #200]	@ (8003cd4 <MX_ADC1_Init+0xe8>)
 8003c0c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003c10:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003c12:	4b30      	ldr	r3, [pc, #192]	@ (8003cd4 <MX_ADC1_Init+0xe8>)
 8003c14:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003c18:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003c1a:	4b2e      	ldr	r3, [pc, #184]	@ (8003cd4 <MX_ADC1_Init+0xe8>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c20:	4b2c      	ldr	r3, [pc, #176]	@ (8003cd4 <MX_ADC1_Init+0xe8>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8003c26:	4b2b      	ldr	r3, [pc, #172]	@ (8003cd4 <MX_ADC1_Init+0xe8>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003c2c:	4b29      	ldr	r3, [pc, #164]	@ (8003cd4 <MX_ADC1_Init+0xe8>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003c32:	4b28      	ldr	r3, [pc, #160]	@ (8003cd4 <MX_ADC1_Init+0xe8>)
 8003c34:	2204      	movs	r2, #4
 8003c36:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003c38:	4b26      	ldr	r3, [pc, #152]	@ (8003cd4 <MX_ADC1_Init+0xe8>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003c3e:	4b25      	ldr	r3, [pc, #148]	@ (8003cd4 <MX_ADC1_Init+0xe8>)
 8003c40:	2201      	movs	r2, #1
 8003c42:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8003c44:	4b23      	ldr	r3, [pc, #140]	@ (8003cd4 <MX_ADC1_Init+0xe8>)
 8003c46:	2201      	movs	r2, #1
 8003c48:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003c4a:	4b22      	ldr	r3, [pc, #136]	@ (8003cd4 <MX_ADC1_Init+0xe8>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c52:	4b20      	ldr	r3, [pc, #128]	@ (8003cd4 <MX_ADC1_Init+0xe8>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c58:	4b1e      	ldr	r3, [pc, #120]	@ (8003cd4 <MX_ADC1_Init+0xe8>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8003cd4 <MX_ADC1_Init+0xe8>)
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003c66:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd4 <MX_ADC1_Init+0xe8>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003c6c:	4b19      	ldr	r3, [pc, #100]	@ (8003cd4 <MX_ADC1_Init+0xe8>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003c74:	4817      	ldr	r0, [pc, #92]	@ (8003cd4 <MX_ADC1_Init+0xe8>)
 8003c76:	f001 ffed 	bl	8005c54 <HAL_ADC_Init>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8003c80:	f000 fc7e 	bl	8004580 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003c84:	2300      	movs	r3, #0
 8003c86:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003c88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4811      	ldr	r0, [pc, #68]	@ (8003cd4 <MX_ADC1_Init+0xe8>)
 8003c90:	f003 faba 	bl	8007208 <HAL_ADCEx_MultiModeConfigChannel>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8003c9a:	f000 fc71 	bl	8004580 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8003cd8 <MX_ADC1_Init+0xec>)
 8003ca0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003ca2:	2306      	movs	r3, #6
 8003ca4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003caa:	237f      	movs	r3, #127	@ 0x7f
 8003cac:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003cae:	2304      	movs	r3, #4
 8003cb0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003cb6:	1d3b      	adds	r3, r7, #4
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4806      	ldr	r0, [pc, #24]	@ (8003cd4 <MX_ADC1_Init+0xe8>)
 8003cbc:	f002 fce2 	bl	8006684 <HAL_ADC_ConfigChannel>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8003cc6:	f000 fc5b 	bl	8004580 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003cca:	bf00      	nop
 8003ccc:	3730      	adds	r7, #48	@ 0x30
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	200006a8 	.word	0x200006a8
 8003cd8:	04300002 	.word	0x04300002

08003cdc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b09c      	sub	sp, #112	@ 0x70
 8003ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ce2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	605a      	str	r2, [r3, #4]
 8003cec:	609a      	str	r2, [r3, #8]
 8003cee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cf0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	605a      	str	r2, [r3, #4]
 8003cfa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003cfc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	605a      	str	r2, [r3, #4]
 8003d06:	609a      	str	r2, [r3, #8]
 8003d08:	60da      	str	r2, [r3, #12]
 8003d0a:	611a      	str	r2, [r3, #16]
 8003d0c:	615a      	str	r2, [r3, #20]
 8003d0e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003d10:	1d3b      	adds	r3, r7, #4
 8003d12:	2234      	movs	r2, #52	@ 0x34
 8003d14:	2100      	movs	r1, #0
 8003d16:	4618      	mov	r0, r3
 8003d18:	f009 f8d8 	bl	800cecc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003d1c:	4b45      	ldr	r3, [pc, #276]	@ (8003e34 <MX_TIM1_Init+0x158>)
 8003d1e:	4a46      	ldr	r2, [pc, #280]	@ (8003e38 <MX_TIM1_Init+0x15c>)
 8003d20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 8003d22:	4b44      	ldr	r3, [pc, #272]	@ (8003e34 <MX_TIM1_Init+0x158>)
 8003d24:	2203      	movs	r2, #3
 8003d26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d28:	4b42      	ldr	r3, [pc, #264]	@ (8003e34 <MX_TIM1_Init+0x158>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003d2e:	4b41      	ldr	r3, [pc, #260]	@ (8003e34 <MX_TIM1_Init+0x158>)
 8003d30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d36:	4b3f      	ldr	r3, [pc, #252]	@ (8003e34 <MX_TIM1_Init+0x158>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003d3c:	4b3d      	ldr	r3, [pc, #244]	@ (8003e34 <MX_TIM1_Init+0x158>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d42:	4b3c      	ldr	r3, [pc, #240]	@ (8003e34 <MX_TIM1_Init+0x158>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003d48:	483a      	ldr	r0, [pc, #232]	@ (8003e34 <MX_TIM1_Init+0x158>)
 8003d4a:	f005 f9a1 	bl	8009090 <HAL_TIM_Base_Init>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003d54:	f000 fc14 	bl	8004580 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d5c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003d5e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003d62:	4619      	mov	r1, r3
 8003d64:	4833      	ldr	r0, [pc, #204]	@ (8003e34 <MX_TIM1_Init+0x158>)
 8003d66:	f006 f925 	bl	8009fb4 <HAL_TIM_ConfigClockSource>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003d70:	f000 fc06 	bl	8004580 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003d74:	482f      	ldr	r0, [pc, #188]	@ (8003e34 <MX_TIM1_Init+0x158>)
 8003d76:	f005 fad7 	bl	8009328 <HAL_TIM_PWM_Init>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003d80:	f000 fbfe 	bl	8004580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d84:	2300      	movs	r3, #0
 8003d86:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003d90:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003d94:	4619      	mov	r1, r3
 8003d96:	4827      	ldr	r0, [pc, #156]	@ (8003e34 <MX_TIM1_Init+0x158>)
 8003d98:	f007 f8f2 	bl	800af80 <HAL_TIMEx_MasterConfigSynchronization>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003da2:	f000 fbed 	bl	8004580 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003da6:	2360      	movs	r3, #96	@ 0x60
 8003da8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003daa:	2300      	movs	r3, #0
 8003dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003dae:	2300      	movs	r3, #0
 8003db0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003db2:	2300      	movs	r3, #0
 8003db4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003db6:	2304      	movs	r3, #4
 8003db8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003dc2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	4619      	mov	r1, r3
 8003dca:	481a      	ldr	r0, [pc, #104]	@ (8003e34 <MX_TIM1_Init+0x158>)
 8003dcc:	f005 ffde 	bl	8009d8c <HAL_TIM_PWM_ConfigChannel>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8003dd6:	f000 fbd3 	bl	8004580 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003dde:	2300      	movs	r3, #0
 8003de0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003de6:	2300      	movs	r3, #0
 8003de8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003dee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003df2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003df4:	2300      	movs	r3, #0
 8003df6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003e00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e04:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003e06:	2300      	movs	r3, #0
 8003e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003e12:	1d3b      	adds	r3, r7, #4
 8003e14:	4619      	mov	r1, r3
 8003e16:	4807      	ldr	r0, [pc, #28]	@ (8003e34 <MX_TIM1_Init+0x158>)
 8003e18:	f007 f948 	bl	800b0ac <HAL_TIMEx_ConfigBreakDeadTime>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8003e22:	f000 fbad 	bl	8004580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003e26:	4803      	ldr	r0, [pc, #12]	@ (8003e34 <MX_TIM1_Init+0x158>)
 8003e28:	f001 fa9a 	bl	8005360 <HAL_TIM_MspPostInit>

}
 8003e2c:	bf00      	nop
 8003e2e:	3770      	adds	r7, #112	@ 0x70
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	20000774 	.word	0x20000774
 8003e38:	40012c00 	.word	0x40012c00

08003e3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e42:	f107 0310 	add.w	r3, r7, #16
 8003e46:	2200      	movs	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	605a      	str	r2, [r3, #4]
 8003e4c:	609a      	str	r2, [r3, #8]
 8003e4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e50:	1d3b      	adds	r3, r7, #4
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	605a      	str	r2, [r3, #4]
 8003e58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed0 <MX_TIM3_Init+0x94>)
 8003e5c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ed4 <MX_TIM3_Init+0x98>)
 8003e5e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8003e60:	4b1b      	ldr	r3, [pc, #108]	@ (8003ed0 <MX_TIM3_Init+0x94>)
 8003e62:	22a9      	movs	r2, #169	@ 0xa9
 8003e64:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e66:	4b1a      	ldr	r3, [pc, #104]	@ (8003ed0 <MX_TIM3_Init+0x94>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8003e6c:	4b18      	ldr	r3, [pc, #96]	@ (8003ed0 <MX_TIM3_Init+0x94>)
 8003e6e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003e72:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e74:	4b16      	ldr	r3, [pc, #88]	@ (8003ed0 <MX_TIM3_Init+0x94>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e7a:	4b15      	ldr	r3, [pc, #84]	@ (8003ed0 <MX_TIM3_Init+0x94>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003e80:	4813      	ldr	r0, [pc, #76]	@ (8003ed0 <MX_TIM3_Init+0x94>)
 8003e82:	f005 f905 	bl	8009090 <HAL_TIM_Base_Init>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003e8c:	f000 fb78 	bl	8004580 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003e96:	f107 0310 	add.w	r3, r7, #16
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	480c      	ldr	r0, [pc, #48]	@ (8003ed0 <MX_TIM3_Init+0x94>)
 8003e9e:	f006 f889 	bl	8009fb4 <HAL_TIM_ConfigClockSource>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003ea8:	f000 fb6a 	bl	8004580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eac:	2300      	movs	r3, #0
 8003eae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003eb4:	1d3b      	adds	r3, r7, #4
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4805      	ldr	r0, [pc, #20]	@ (8003ed0 <MX_TIM3_Init+0x94>)
 8003eba:	f007 f861 	bl	800af80 <HAL_TIMEx_MasterConfigSynchronization>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003ec4:	f000 fb5c 	bl	8004580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003ec8:	bf00      	nop
 8003eca:	3720      	adds	r7, #32
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	20000840 	.word	0x20000840
 8003ed4:	40000400 	.word	0x40000400

08003ed8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08c      	sub	sp, #48	@ 0x30
 8003edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003ede:	f107 030c 	add.w	r3, r7, #12
 8003ee2:	2224      	movs	r2, #36	@ 0x24
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f008 fff0 	bl	800cecc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003eec:	463b      	mov	r3, r7
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	605a      	str	r2, [r3, #4]
 8003ef4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003ef6:	4b21      	ldr	r3, [pc, #132]	@ (8003f7c <MX_TIM4_Init+0xa4>)
 8003ef8:	4a21      	ldr	r2, [pc, #132]	@ (8003f80 <MX_TIM4_Init+0xa8>)
 8003efa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003efc:	4b1f      	ldr	r3, [pc, #124]	@ (8003f7c <MX_TIM4_Init+0xa4>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f02:	4b1e      	ldr	r3, [pc, #120]	@ (8003f7c <MX_TIM4_Init+0xa4>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003f08:	4b1c      	ldr	r3, [pc, #112]	@ (8003f7c <MX_TIM4_Init+0xa4>)
 8003f0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f0e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f10:	4b1a      	ldr	r3, [pc, #104]	@ (8003f7c <MX_TIM4_Init+0xa4>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f16:	4b19      	ldr	r3, [pc, #100]	@ (8003f7c <MX_TIM4_Init+0xa4>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f20:	2300      	movs	r3, #0
 8003f22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f24:	2301      	movs	r3, #1
 8003f26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f30:	2300      	movs	r3, #0
 8003f32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f34:	2301      	movs	r3, #1
 8003f36:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 2;
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003f40:	f107 030c 	add.w	r3, r7, #12
 8003f44:	4619      	mov	r1, r3
 8003f46:	480d      	ldr	r0, [pc, #52]	@ (8003f7c <MX_TIM4_Init+0xa4>)
 8003f48:	f005 fc64 	bl	8009814 <HAL_TIM_Encoder_Init>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003f52:	f000 fb15 	bl	8004580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f56:	2300      	movs	r3, #0
 8003f58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003f5e:	463b      	mov	r3, r7
 8003f60:	4619      	mov	r1, r3
 8003f62:	4806      	ldr	r0, [pc, #24]	@ (8003f7c <MX_TIM4_Init+0xa4>)
 8003f64:	f007 f80c 	bl	800af80 <HAL_TIMEx_MasterConfigSynchronization>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8003f6e:	f000 fb07 	bl	8004580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003f72:	bf00      	nop
 8003f74:	3730      	adds	r7, #48	@ 0x30
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	2000090c 	.word	0x2000090c
 8003f80:	40000800 	.word	0x40000800

08003f84 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003f88:	4b14      	ldr	r3, [pc, #80]	@ (8003fdc <MX_TIM16_Init+0x58>)
 8003f8a:	4a15      	ldr	r2, [pc, #84]	@ (8003fe0 <MX_TIM16_Init+0x5c>)
 8003f8c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8003f8e:	4b13      	ldr	r3, [pc, #76]	@ (8003fdc <MX_TIM16_Init+0x58>)
 8003f90:	22a9      	movs	r2, #169	@ 0xa9
 8003f92:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f94:	4b11      	ldr	r3, [pc, #68]	@ (8003fdc <MX_TIM16_Init+0x58>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8003f9a:	4b10      	ldr	r3, [pc, #64]	@ (8003fdc <MX_TIM16_Init+0x58>)
 8003f9c:	f240 4279 	movw	r2, #1145	@ 0x479
 8003fa0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8003fdc <MX_TIM16_Init+0x58>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8003fdc <MX_TIM16_Init+0x58>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fae:	4b0b      	ldr	r3, [pc, #44]	@ (8003fdc <MX_TIM16_Init+0x58>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003fb4:	4809      	ldr	r0, [pc, #36]	@ (8003fdc <MX_TIM16_Init+0x58>)
 8003fb6:	f005 f86b 	bl	8009090 <HAL_TIM_Base_Init>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003fc0:	f000 fade 	bl	8004580 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8003fc4:	2108      	movs	r1, #8
 8003fc6:	4805      	ldr	r0, [pc, #20]	@ (8003fdc <MX_TIM16_Init+0x58>)
 8003fc8:	f005 fb2e 	bl	8009628 <HAL_TIM_OnePulse_Init>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8003fd2:	f000 fad5 	bl	8004580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003fd6:	bf00      	nop
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	200009d8 	.word	0x200009d8
 8003fe0:	40014400 	.word	0x40014400

08003fe4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003fe8:	4b23      	ldr	r3, [pc, #140]	@ (8004078 <MX_USART2_UART_Init+0x94>)
 8003fea:	4a24      	ldr	r2, [pc, #144]	@ (800407c <MX_USART2_UART_Init+0x98>)
 8003fec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8003fee:	4b22      	ldr	r3, [pc, #136]	@ (8004078 <MX_USART2_UART_Init+0x94>)
 8003ff0:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003ff4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003ff6:	4b20      	ldr	r3, [pc, #128]	@ (8004078 <MX_USART2_UART_Init+0x94>)
 8003ff8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003ffc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8004078 <MX_USART2_UART_Init+0x94>)
 8004000:	2200      	movs	r2, #0
 8004002:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8004004:	4b1c      	ldr	r3, [pc, #112]	@ (8004078 <MX_USART2_UART_Init+0x94>)
 8004006:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800400a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800400c:	4b1a      	ldr	r3, [pc, #104]	@ (8004078 <MX_USART2_UART_Init+0x94>)
 800400e:	220c      	movs	r2, #12
 8004010:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004012:	4b19      	ldr	r3, [pc, #100]	@ (8004078 <MX_USART2_UART_Init+0x94>)
 8004014:	2200      	movs	r2, #0
 8004016:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004018:	4b17      	ldr	r3, [pc, #92]	@ (8004078 <MX_USART2_UART_Init+0x94>)
 800401a:	2200      	movs	r2, #0
 800401c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800401e:	4b16      	ldr	r3, [pc, #88]	@ (8004078 <MX_USART2_UART_Init+0x94>)
 8004020:	2200      	movs	r2, #0
 8004022:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004024:	4b14      	ldr	r3, [pc, #80]	@ (8004078 <MX_USART2_UART_Init+0x94>)
 8004026:	2200      	movs	r2, #0
 8004028:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800402a:	4b13      	ldr	r3, [pc, #76]	@ (8004078 <MX_USART2_UART_Init+0x94>)
 800402c:	2200      	movs	r2, #0
 800402e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004030:	4811      	ldr	r0, [pc, #68]	@ (8004078 <MX_USART2_UART_Init+0x94>)
 8004032:	f007 f91f 	bl	800b274 <HAL_UART_Init>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 800403c:	f000 faa0 	bl	8004580 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004040:	2100      	movs	r1, #0
 8004042:	480d      	ldr	r0, [pc, #52]	@ (8004078 <MX_USART2_UART_Init+0x94>)
 8004044:	f008 fe60 	bl	800cd08 <HAL_UARTEx_SetTxFifoThreshold>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800404e:	f000 fa97 	bl	8004580 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004052:	2100      	movs	r1, #0
 8004054:	4808      	ldr	r0, [pc, #32]	@ (8004078 <MX_USART2_UART_Init+0x94>)
 8004056:	f008 fe95 	bl	800cd84 <HAL_UARTEx_SetRxFifoThreshold>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8004060:	f000 fa8e 	bl	8004580 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004064:	4804      	ldr	r0, [pc, #16]	@ (8004078 <MX_USART2_UART_Init+0x94>)
 8004066:	f008 fe16 	bl	800cc96 <HAL_UARTEx_DisableFifoMode>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8004070:	f000 fa86 	bl	8004580 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004074:	bf00      	nop
 8004076:	bd80      	pop	{r7, pc}
 8004078:	20000b04 	.word	0x20000b04
 800407c:	40004400 	.word	0x40004400

08004080 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004086:	4b1e      	ldr	r3, [pc, #120]	@ (8004100 <MX_DMA_Init+0x80>)
 8004088:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800408a:	4a1d      	ldr	r2, [pc, #116]	@ (8004100 <MX_DMA_Init+0x80>)
 800408c:	f043 0304 	orr.w	r3, r3, #4
 8004090:	6493      	str	r3, [r2, #72]	@ 0x48
 8004092:	4b1b      	ldr	r3, [pc, #108]	@ (8004100 <MX_DMA_Init+0x80>)
 8004094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004096:	f003 0304 	and.w	r3, r3, #4
 800409a:	607b      	str	r3, [r7, #4]
 800409c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800409e:	4b18      	ldr	r3, [pc, #96]	@ (8004100 <MX_DMA_Init+0x80>)
 80040a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040a2:	4a17      	ldr	r2, [pc, #92]	@ (8004100 <MX_DMA_Init+0x80>)
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	6493      	str	r3, [r2, #72]	@ 0x48
 80040aa:	4b15      	ldr	r3, [pc, #84]	@ (8004100 <MX_DMA_Init+0x80>)
 80040ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	603b      	str	r3, [r7, #0]
 80040b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80040b6:	2200      	movs	r2, #0
 80040b8:	2100      	movs	r1, #0
 80040ba:	200b      	movs	r0, #11
 80040bc:	f003 fa87 	bl	80075ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80040c0:	200b      	movs	r0, #11
 80040c2:	f003 fa9e 	bl	8007602 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80040c6:	2200      	movs	r2, #0
 80040c8:	2100      	movs	r1, #0
 80040ca:	200c      	movs	r0, #12
 80040cc:	f003 fa7f 	bl	80075ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80040d0:	200c      	movs	r0, #12
 80040d2:	f003 fa96 	bl	8007602 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80040d6:	2200      	movs	r2, #0
 80040d8:	2100      	movs	r1, #0
 80040da:	200d      	movs	r0, #13
 80040dc:	f003 fa77 	bl	80075ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80040e0:	200d      	movs	r0, #13
 80040e2:	f003 fa8e 	bl	8007602 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80040e6:	2200      	movs	r2, #0
 80040e8:	2100      	movs	r1, #0
 80040ea:	200e      	movs	r0, #14
 80040ec:	f003 fa6f 	bl	80075ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80040f0:	200e      	movs	r0, #14
 80040f2:	f003 fa86 	bl	8007602 <HAL_NVIC_EnableIRQ>

}
 80040f6:	bf00      	nop
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	40021000 	.word	0x40021000

08004104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b08a      	sub	sp, #40	@ 0x28
 8004108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800410a:	f107 0314 	add.w	r3, r7, #20
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	605a      	str	r2, [r3, #4]
 8004114:	609a      	str	r2, [r3, #8]
 8004116:	60da      	str	r2, [r3, #12]
 8004118:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800411a:	4b67      	ldr	r3, [pc, #412]	@ (80042b8 <MX_GPIO_Init+0x1b4>)
 800411c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800411e:	4a66      	ldr	r2, [pc, #408]	@ (80042b8 <MX_GPIO_Init+0x1b4>)
 8004120:	f043 0304 	orr.w	r3, r3, #4
 8004124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004126:	4b64      	ldr	r3, [pc, #400]	@ (80042b8 <MX_GPIO_Init+0x1b4>)
 8004128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	613b      	str	r3, [r7, #16]
 8004130:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004132:	4b61      	ldr	r3, [pc, #388]	@ (80042b8 <MX_GPIO_Init+0x1b4>)
 8004134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004136:	4a60      	ldr	r2, [pc, #384]	@ (80042b8 <MX_GPIO_Init+0x1b4>)
 8004138:	f043 0320 	orr.w	r3, r3, #32
 800413c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800413e:	4b5e      	ldr	r3, [pc, #376]	@ (80042b8 <MX_GPIO_Init+0x1b4>)
 8004140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004142:	f003 0320 	and.w	r3, r3, #32
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800414a:	4b5b      	ldr	r3, [pc, #364]	@ (80042b8 <MX_GPIO_Init+0x1b4>)
 800414c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800414e:	4a5a      	ldr	r2, [pc, #360]	@ (80042b8 <MX_GPIO_Init+0x1b4>)
 8004150:	f043 0301 	orr.w	r3, r3, #1
 8004154:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004156:	4b58      	ldr	r3, [pc, #352]	@ (80042b8 <MX_GPIO_Init+0x1b4>)
 8004158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	60bb      	str	r3, [r7, #8]
 8004160:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004162:	4b55      	ldr	r3, [pc, #340]	@ (80042b8 <MX_GPIO_Init+0x1b4>)
 8004164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004166:	4a54      	ldr	r2, [pc, #336]	@ (80042b8 <MX_GPIO_Init+0x1b4>)
 8004168:	f043 0302 	orr.w	r3, r3, #2
 800416c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800416e:	4b52      	ldr	r3, [pc, #328]	@ (80042b8 <MX_GPIO_Init+0x1b4>)
 8004170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	607b      	str	r3, [r7, #4]
 8004178:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Direaction_motor_Pin|Emergency_light_Pin, GPIO_PIN_RESET);
 800417a:	2200      	movs	r2, #0
 800417c:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8004180:	484e      	ldr	r0, [pc, #312]	@ (80042bc <MX_GPIO_Init+0x1b8>)
 8004182:	f003 ff25 	bl	8007fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Solenoid_valve_push_Pin, GPIO_PIN_RESET);
 8004186:	2200      	movs	r2, #0
 8004188:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800418c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004190:	f003 ff1e 	bl	8007fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin, GPIO_PIN_RESET);
 8004194:	2200      	movs	r2, #0
 8004196:	f240 4116 	movw	r1, #1046	@ 0x416
 800419a:	4849      	ldr	r0, [pc, #292]	@ (80042c0 <MX_GPIO_Init+0x1bc>)
 800419c:	f003 ff18 	bl	8007fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80041a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80041a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80041a6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80041aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ac:	2300      	movs	r3, #0
 80041ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80041b0:	f107 0314 	add.w	r3, r7, #20
 80041b4:	4619      	mov	r1, r3
 80041b6:	4841      	ldr	r0, [pc, #260]	@ (80042bc <MX_GPIO_Init+0x1b8>)
 80041b8:	f003 fd70 	bl	8007c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : Direaction_motor_Pin */
  GPIO_InitStruct.Pin = Direaction_motor_Pin;
 80041bc:	2302      	movs	r3, #2
 80041be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041c0:	2301      	movs	r3, #1
 80041c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041c8:	2303      	movs	r3, #3
 80041ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direaction_motor_GPIO_Port, &GPIO_InitStruct);
 80041cc:	f107 0314 	add.w	r3, r7, #20
 80041d0:	4619      	mov	r1, r3
 80041d2:	483a      	ldr	r0, [pc, #232]	@ (80042bc <MX_GPIO_Init+0x1b8>)
 80041d4:	f003 fd62 	bl	8007c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Solenoid_valve_push_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Solenoid_valve_push_Pin;
 80041d8:	f44f 7390 	mov.w	r3, #288	@ 0x120
 80041dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041de:	2301      	movs	r3, #1
 80041e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041e6:	2300      	movs	r3, #0
 80041e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041ea:	f107 0314 	add.w	r3, r7, #20
 80041ee:	4619      	mov	r1, r3
 80041f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80041f4:	f003 fd52 	bl	8007c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : joy_switch_3_Pin joy_switch_4_Pin Set_home_Pin Reed_switch_pull_Pin */
  GPIO_InitStruct.Pin = joy_switch_3_Pin|joy_switch_4_Pin|Set_home_Pin|Reed_switch_pull_Pin;
 80041f8:	23f0      	movs	r3, #240	@ 0xf0
 80041fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041fc:	2300      	movs	r3, #0
 80041fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004200:	2300      	movs	r3, #0
 8004202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004204:	f107 0314 	add.w	r3, r7, #20
 8004208:	4619      	mov	r1, r3
 800420a:	482c      	ldr	r0, [pc, #176]	@ (80042bc <MX_GPIO_Init+0x1b8>)
 800420c:	f003 fd46 	bl	8007c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : Pilot_controller_error_Pin Pilot_motor_error_Pin Solenoid_valve_pull_Pin Solenoid_valve_vacuum_Pin */
  GPIO_InitStruct.Pin = Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin;
 8004210:	f240 4316 	movw	r3, #1046	@ 0x416
 8004214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004216:	2301      	movs	r3, #1
 8004218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421a:	2300      	movs	r3, #0
 800421c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800421e:	2300      	movs	r3, #0
 8004220:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004222:	f107 0314 	add.w	r3, r7, #20
 8004226:	4619      	mov	r1, r3
 8004228:	4825      	ldr	r0, [pc, #148]	@ (80042c0 <MX_GPIO_Init+0x1bc>)
 800422a:	f003 fd37 	bl	8007c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : Proximity_Pin joy_switch_1_Pin */
  GPIO_InitStruct.Pin = Proximity_Pin|joy_switch_1_Pin;
 800422e:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8004232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004234:	2300      	movs	r3, #0
 8004236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004238:	2300      	movs	r3, #0
 800423a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800423c:	f107 0314 	add.w	r3, r7, #20
 8004240:	4619      	mov	r1, r3
 8004242:	481f      	ldr	r0, [pc, #124]	@ (80042c0 <MX_GPIO_Init+0x1bc>)
 8004244:	f003 fd2a 	bl	8007c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_switch_Pin */
  GPIO_InitStruct.Pin = Emergency_switch_Pin;
 8004248:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800424c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800424e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004254:	2300      	movs	r3, #0
 8004256:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_switch_GPIO_Port, &GPIO_InitStruct);
 8004258:	f107 0314 	add.w	r3, r7, #20
 800425c:	4619      	mov	r1, r3
 800425e:	4818      	ldr	r0, [pc, #96]	@ (80042c0 <MX_GPIO_Init+0x1bc>)
 8004260:	f003 fd1c 	bl	8007c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_light_Pin */
  GPIO_InitStruct.Pin = Emergency_light_Pin;
 8004264:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800426a:	2301      	movs	r3, #1
 800426c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426e:	2300      	movs	r3, #0
 8004270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004272:	2300      	movs	r3, #0
 8004274:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Emergency_light_GPIO_Port, &GPIO_InitStruct);
 8004276:	f107 0314 	add.w	r3, r7, #20
 800427a:	4619      	mov	r1, r3
 800427c:	480f      	ldr	r0, [pc, #60]	@ (80042bc <MX_GPIO_Init+0x1b8>)
 800427e:	f003 fd0d 	bl	8007c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : Reed_switch_push_Pin joy_switch_2_Pin */
  GPIO_InitStruct.Pin = Reed_switch_push_Pin|joy_switch_2_Pin;
 8004282:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004288:	2300      	movs	r3, #0
 800428a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800428c:	2300      	movs	r3, #0
 800428e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004290:	f107 0314 	add.w	r3, r7, #20
 8004294:	4619      	mov	r1, r3
 8004296:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800429a:	f003 fcff 	bl	8007c9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800429e:	2200      	movs	r2, #0
 80042a0:	2100      	movs	r1, #0
 80042a2:	2028      	movs	r0, #40	@ 0x28
 80042a4:	f003 f993 	bl	80075ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80042a8:	2028      	movs	r0, #40	@ 0x28
 80042aa:	f003 f9aa 	bl	8007602 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80042ae:	bf00      	nop
 80042b0:	3728      	adds	r7, #40	@ 0x28
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40021000 	.word	0x40021000
 80042bc:	48000800 	.word	0x48000800
 80042c0:	48000400 	.word	0x48000400

080042c4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Main timer interrupt for run program with accuracy time
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af02      	add	r7, sp, #8
 80042ca:	6078      	str	r0, [r7, #4]
	// Run with 1000 Hz
	if(htim == &htim3){
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a1f      	ldr	r2, [pc, #124]	@ (800434c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d137      	bne.n	8004344 <HAL_TIM_PeriodElapsedCallback+0x80>
		// Update encoder
		if(is_update_encoder == 0){
 80042d4:	4b1e      	ldr	r3, [pc, #120]	@ (8004350 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d102      	bne.n	80042e2 <HAL_TIM_PeriodElapsedCallback+0x1e>
			is_update_encoder = 1;
 80042dc:	4b1c      	ldr	r3, [pc, #112]	@ (8004350 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80042de:	2201      	movs	r2, #1
 80042e0:	701a      	strb	r2, [r3, #0]
		}
		if(mode == RUNNING){
 80042e2:	4b1c      	ldr	r3, [pc, #112]	@ (8004354 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d113      	bne.n	8004312 <HAL_TIM_PeriodElapsedCallback+0x4e>
			static uint8_t timestamp = 0;
			if(start_position_control == 0 && timestamp == 8){
 80042ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004358 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d109      	bne.n	8004306 <HAL_TIM_PeriodElapsedCallback+0x42>
 80042f2:	4b1a      	ldr	r3, [pc, #104]	@ (800435c <HAL_TIM_PeriodElapsedCallback+0x98>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d105      	bne.n	8004306 <HAL_TIM_PeriodElapsedCallback+0x42>
				start_position_control = 1;
 80042fa:	4b17      	ldr	r3, [pc, #92]	@ (8004358 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80042fc:	2201      	movs	r2, #1
 80042fe:	701a      	strb	r2, [r3, #0]
				timestamp = 0;
 8004300:	4b16      	ldr	r3, [pc, #88]	@ (800435c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004302:	2200      	movs	r2, #0
 8004304:	701a      	strb	r2, [r3, #0]
			}
			timestamp++;
 8004306:	4b15      	ldr	r3, [pc, #84]	@ (800435c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	3301      	adds	r3, #1
 800430c:	b2da      	uxtb	r2, r3
 800430e:	4b13      	ldr	r3, [pc, #76]	@ (800435c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004310:	701a      	strb	r2, [r3, #0]
		}
		if(mode == HOMING){
 8004312:	4b10      	ldr	r3, [pc, #64]	@ (8004354 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	2b02      	cmp	r3, #2
 8004318:	d114      	bne.n	8004344 <HAL_TIM_PeriodElapsedCallback+0x80>
			// Homing state
			homing(&home, GPIOB, GPIO_PIN_12); // Homing function
 800431a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800431e:	4910      	ldr	r1, [pc, #64]	@ (8004360 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8004320:	4810      	ldr	r0, [pc, #64]	@ (8004364 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004322:	f000 fcd8 	bl	8004cd6 <homing>
			pwm_signal = home.pwm;
 8004326:	4b0f      	ldr	r3, [pc, #60]	@ (8004364 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004328:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800432c:	461a      	mov	r2, r3
 800432e:	4b0e      	ldr	r3, [pc, #56]	@ (8004368 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004330:	601a      	str	r2, [r3, #0]
			Update_pwm(&pwm_tim, pwm_channel, dir_gpio, dir_pin, pwm_signal); // Update main PWM signal
 8004332:	4b0d      	ldr	r3, [pc, #52]	@ (8004368 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	2302      	movs	r3, #2
 800433a:	4a0c      	ldr	r2, [pc, #48]	@ (800436c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800433c:	2100      	movs	r1, #0
 800433e:	480c      	ldr	r0, [pc, #48]	@ (8004370 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004340:	f000 fa0a 	bl	8004758 <Update_pwm>
		}
	}
}
 8004344:	bf00      	nop
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	20000840 	.word	0x20000840
 8004350:	200010f4 	.word	0x200010f4
 8004354:	20000cc6 	.word	0x20000cc6
 8004358:	200011ac 	.word	0x200011ac
 800435c:	200015c3 	.word	0x200015c3
 8004360:	48000400 	.word	0x48000400
 8004364:	20000cd0 	.word	0x20000cd0
 8004368:	200010f0 	.word	0x200010f0
 800436c:	48000800 	.word	0x48000800
 8004370:	20000774 	.word	0x20000774

08004374 <HAL_GPIO_EXTI_Callback>:
// GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af02      	add	r7, sp, #8
 800437a:	4603      	mov	r3, r0
 800437c:	80fb      	strh	r3, [r7, #6]
	// Activate and Deactivate testing mode
	if(GPIO_Pin == GPIO_PIN_13){
 800437e:	88fb      	ldrh	r3, [r7, #6]
 8004380:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004384:	d149      	bne.n	800441a <HAL_GPIO_EXTI_Callback+0xa6>
		static uint8_t test = 0;
		if(test == 0){
 8004386:	4b3c      	ldr	r3, [pc, #240]	@ (8004478 <HAL_GPIO_EXTI_Callback+0x104>)
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d11f      	bne.n	80043ce <HAL_GPIO_EXTI_Callback+0x5a>
			target_position = 500.0;
 800438e:	4b3b      	ldr	r3, [pc, #236]	@ (800447c <HAL_GPIO_EXTI_Callback+0x108>)
 8004390:	4a3b      	ldr	r2, [pc, #236]	@ (8004480 <HAL_GPIO_EXTI_Callback+0x10c>)
 8004392:	601a      	str	r2, [r3, #0]
			initial_position = 0.0;
 8004394:	4b3b      	ldr	r3, [pc, #236]	@ (8004484 <HAL_GPIO_EXTI_Callback+0x110>)
 8004396:	f04f 0200 	mov.w	r2, #0
 800439a:	601a      	str	r2, [r3, #0]
			evaScurveData.t = 0;
 800439c:	493a      	ldr	r1, [pc, #232]	@ (8004488 <HAL_GPIO_EXTI_Callback+0x114>)
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	f04f 0300 	mov.w	r3, #0
 80043a6:	e9c1 2306 	strd	r2, r3, [r1, #24]
			setpoint_pos = 0.0;
 80043aa:	4938      	ldr	r1, [pc, #224]	@ (800448c <HAL_GPIO_EXTI_Callback+0x118>)
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	f04f 0300 	mov.w	r3, #0
 80043b4:	e9c1 2300 	strd	r2, r3, [r1]
			setpoint_vel = 0.0;
 80043b8:	4935      	ldr	r1, [pc, #212]	@ (8004490 <HAL_GPIO_EXTI_Callback+0x11c>)
 80043ba:	f04f 0200 	mov.w	r2, #0
 80043be:	f04f 0300 	mov.w	r3, #0
 80043c2:	e9c1 2300 	strd	r2, r3, [r1]
			test = 1;
 80043c6:	4b2c      	ldr	r3, [pc, #176]	@ (8004478 <HAL_GPIO_EXTI_Callback+0x104>)
 80043c8:	2201      	movs	r2, #1
 80043ca:	701a      	strb	r2, [r3, #0]
 80043cc:	e022      	b.n	8004414 <HAL_GPIO_EXTI_Callback+0xa0>
//			testing = 1;
		}
		else if(test == 1){
 80043ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004478 <HAL_GPIO_EXTI_Callback+0x104>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d11e      	bne.n	8004414 <HAL_GPIO_EXTI_Callback+0xa0>
			initial_position = 500.0;
 80043d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004484 <HAL_GPIO_EXTI_Callback+0x110>)
 80043d8:	4a29      	ldr	r2, [pc, #164]	@ (8004480 <HAL_GPIO_EXTI_Callback+0x10c>)
 80043da:	601a      	str	r2, [r3, #0]
			target_position = 0.0;
 80043dc:	4b27      	ldr	r3, [pc, #156]	@ (800447c <HAL_GPIO_EXTI_Callback+0x108>)
 80043de:	f04f 0200 	mov.w	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]
			evaScurveData.t = 0;
 80043e4:	4928      	ldr	r1, [pc, #160]	@ (8004488 <HAL_GPIO_EXTI_Callback+0x114>)
 80043e6:	f04f 0200 	mov.w	r2, #0
 80043ea:	f04f 0300 	mov.w	r3, #0
 80043ee:	e9c1 2306 	strd	r2, r3, [r1, #24]
			setpoint_pos = 0.0;
 80043f2:	4926      	ldr	r1, [pc, #152]	@ (800448c <HAL_GPIO_EXTI_Callback+0x118>)
 80043f4:	f04f 0200 	mov.w	r2, #0
 80043f8:	f04f 0300 	mov.w	r3, #0
 80043fc:	e9c1 2300 	strd	r2, r3, [r1]
			setpoint_vel = 0.0;
 8004400:	4923      	ldr	r1, [pc, #140]	@ (8004490 <HAL_GPIO_EXTI_Callback+0x11c>)
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	f04f 0300 	mov.w	r3, #0
 800440a:	e9c1 2300 	strd	r2, r3, [r1]
			test = 0;
 800440e:	4b1a      	ldr	r3, [pc, #104]	@ (8004478 <HAL_GPIO_EXTI_Callback+0x104>)
 8004410:	2200      	movs	r2, #0
 8004412:	701a      	strb	r2, [r3, #0]
//			testing = 0;
		}
		mode = RUNNING;
 8004414:	4b1f      	ldr	r3, [pc, #124]	@ (8004494 <HAL_GPIO_EXTI_Callback+0x120>)
 8004416:	2201      	movs	r2, #1
 8004418:	801a      	strh	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_15){
 800441a:	88fb      	ldrh	r3, [r7, #6]
 800441c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004420:	d126      	bne.n	8004470 <HAL_GPIO_EXTI_Callback+0xfc>
		// Emergency switch interrupted
		if(HAL_GPIO_ReadPin(emer_gpio, emer_pin) == 0){
 8004422:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004426:	481c      	ldr	r0, [pc, #112]	@ (8004498 <HAL_GPIO_EXTI_Callback+0x124>)
 8004428:	f003 fdba 	bl	8007fa0 <HAL_GPIO_ReadPin>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d11e      	bne.n	8004470 <HAL_GPIO_EXTI_Callback+0xfc>
			Reset_homing(&home);
 8004432:	481a      	ldr	r0, [pc, #104]	@ (800449c <HAL_GPIO_EXTI_Callback+0x128>)
 8004434:	f000 fde1 	bl	8004ffa <Reset_homing>
			setpoint = 0.0;
 8004438:	4b19      	ldr	r3, [pc, #100]	@ (80044a0 <HAL_GPIO_EXTI_Callback+0x12c>)
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	601a      	str	r2, [r3, #0]
			v_e = 0.0;
 8004440:	4b18      	ldr	r3, [pc, #96]	@ (80044a4 <HAL_GPIO_EXTI_Callback+0x130>)
 8004442:	f04f 0200 	mov.w	r2, #0
 8004446:	601a      	str	r2, [r3, #0]
			v_output = 0;
 8004448:	4b17      	ldr	r3, [pc, #92]	@ (80044a8 <HAL_GPIO_EXTI_Callback+0x134>)
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]
			// Stop motor
			Update_pwm(&pwm_tim, pwm_channel, dir_gpio, dir_pin, 0);
 800444e:	2300      	movs	r3, #0
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	2302      	movs	r3, #2
 8004454:	4a15      	ldr	r2, [pc, #84]	@ (80044ac <HAL_GPIO_EXTI_Callback+0x138>)
 8004456:	2100      	movs	r1, #0
 8004458:	4815      	ldr	r0, [pc, #84]	@ (80044b0 <HAL_GPIO_EXTI_Callback+0x13c>)
 800445a:	f000 f97d 	bl	8004758 <Update_pwm>
			// Emergency light enable
			HAL_GPIO_WritePin(emer_light_gpio, emer_light_pin, SET);
 800445e:	2201      	movs	r2, #1
 8004460:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004464:	4811      	ldr	r0, [pc, #68]	@ (80044ac <HAL_GPIO_EXTI_Callback+0x138>)
 8004466:	f003 fdb3 	bl	8007fd0 <HAL_GPIO_WritePin>
	//		emer.emer_state = 1;
			mode = EMERGENCY;
 800446a:	4b0a      	ldr	r3, [pc, #40]	@ (8004494 <HAL_GPIO_EXTI_Callback+0x120>)
 800446c:	2203      	movs	r2, #3
 800446e:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8004470:	bf00      	nop
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	200015c4 	.word	0x200015c4
 800447c:	20000078 	.word	0x20000078
 8004480:	43fa0000 	.word	0x43fa0000
 8004484:	200015a8 	.word	0x200015a8
 8004488:	20001580 	.word	0x20001580
 800448c:	200015b0 	.word	0x200015b0
 8004490:	200015b8 	.word	0x200015b8
 8004494:	20000cc6 	.word	0x20000cc6
 8004498:	48000400 	.word	0x48000400
 800449c:	20000cd0 	.word	0x20000cd0
 80044a0:	20000cc0 	.word	0x20000cc0
 80044a4:	20001174 	.word	0x20001174
 80044a8:	20001178 	.word	0x20001178
 80044ac:	48000800 	.word	0x48000800
 80044b0:	20000774 	.word	0x20000774

080044b4 <Update_velocity_control>:
// Torque control update
void Update_torque_control(float s){

}
// Velocity control update
void Update_velocity_control(float s){
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	ed87 0a01 	vstr	s0, [r7, #4]
	// input is millimeter unit
	v_e = s - encoder.mmps;
 80044be:	4b11      	ldr	r3, [pc, #68]	@ (8004504 <Update_velocity_control+0x50>)
 80044c0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80044c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80044c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004508 <Update_velocity_control+0x54>)
 80044ce:	edc3 7a00 	vstr	s15, [r3]
	v_output = (int32_t)(Update_pid(&v_pid, v_e, 65535.0, 65535.0));
 80044d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004508 <Update_velocity_control+0x54>)
 80044d4:	edd3 7a00 	vldr	s15, [r3]
 80044d8:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 800450c <Update_velocity_control+0x58>
 80044dc:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 800450c <Update_velocity_control+0x58>
 80044e0:	eeb0 0a67 	vmov.f32	s0, s15
 80044e4:	480a      	ldr	r0, [pc, #40]	@ (8004510 <Update_velocity_control+0x5c>)
 80044e6:	f000 f87f 	bl	80045e8 <Update_pid>
 80044ea:	eef0 7a40 	vmov.f32	s15, s0
 80044ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044f2:	ee17 2a90 	vmov	r2, s15
 80044f6:	4b07      	ldr	r3, [pc, #28]	@ (8004514 <Update_velocity_control+0x60>)
 80044f8:	601a      	str	r2, [r3, #0]
}
 80044fa:	bf00      	nop
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	200010f8 	.word	0x200010f8
 8004508:	20001174 	.word	0x20001174
 800450c:	477fff00 	.word	0x477fff00
 8004510:	20001150 	.word	0x20001150
 8004514:	20001178 	.word	0x20001178

08004518 <Update_position_control>:
// Position control update
void Update_position_control(float s){
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	ed87 0a01 	vstr	s0, [r7, #4]
	//input is pulse unit
	p_e = s - Get_mm(&encoder);
 8004522:	4812      	ldr	r0, [pc, #72]	@ (800456c <Update_position_control+0x54>)
 8004524:	f000 fb94 	bl	8004c50 <Get_mm>
 8004528:	eeb0 7a40 	vmov.f32	s14, s0
 800452c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004530:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004534:	4b0e      	ldr	r3, [pc, #56]	@ (8004570 <Update_position_control+0x58>)
 8004536:	edc3 7a00 	vstr	s15, [r3]
	p_output = Update_pid(&p_pid, p_e, 1000.0, 1000.0);
 800453a:	4b0d      	ldr	r3, [pc, #52]	@ (8004570 <Update_position_control+0x58>)
 800453c:	edd3 7a00 	vldr	s15, [r3]
 8004540:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 8004574 <Update_position_control+0x5c>
 8004544:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 8004574 <Update_position_control+0x5c>
 8004548:	eeb0 0a67 	vmov.f32	s0, s15
 800454c:	480a      	ldr	r0, [pc, #40]	@ (8004578 <Update_position_control+0x60>)
 800454e:	f000 f84b 	bl	80045e8 <Update_pid>
 8004552:	eef0 7a40 	vmov.f32	s15, s0
 8004556:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800455a:	ee17 2a90 	vmov	r2, s15
 800455e:	4b07      	ldr	r3, [pc, #28]	@ (800457c <Update_position_control+0x64>)
 8004560:	601a      	str	r2, [r3, #0]
}
 8004562:	bf00      	nop
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	200010f8 	.word	0x200010f8
 8004570:	200011a4 	.word	0x200011a4
 8004574:	447a0000 	.word	0x447a0000
 8004578:	2000117c 	.word	0x2000117c
 800457c:	200011a8 	.word	0x200011a8

08004580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004584:	b672      	cpsid	i
}
 8004586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004588:	bf00      	nop
 800458a:	e7fd      	b.n	8004588 <Error_Handler+0x8>

0800458c <PID_init>:
 *  Created on: Apr 26, 2024
 *      Author: naker
 */
#include "pid.h"

void PID_init(PID* pid, float _kp,  float _ki, float _kd, float _sampt){
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	6178      	str	r0, [r7, #20]
 8004594:	ed87 0a04 	vstr	s0, [r7, #16]
 8004598:	edc7 0a03 	vstr	s1, [r7, #12]
 800459c:	ed87 1a02 	vstr	s2, [r7, #8]
 80045a0:	edc7 1a01 	vstr	s3, [r7, #4]
	pid -> kp = _kp;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	601a      	str	r2, [r3, #0]
	pid -> ki = _ki;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	605a      	str	r2, [r3, #4]
	pid -> kd = _kd;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	609a      	str	r2, [r3, #8]
	pid -> sampt = _sampt;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	60da      	str	r2, [r3, #12]
	pid -> y_n = 0.0;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f04f 0200 	mov.w	r2, #0
 80045c2:	611a      	str	r2, [r3, #16]
	pid -> e_n = 0.0;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	615a      	str	r2, [r3, #20]
	pid -> e_n_1 = 0.0;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f04f 0200 	mov.w	r2, #0
 80045d2:	619a      	str	r2, [r3, #24]
	pid -> e_n_2 = 0.0;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f04f 0200 	mov.w	r2, #0
 80045da:	61da      	str	r2, [r3, #28]
}
 80045dc:	bf00      	nop
 80045de:	371c      	adds	r7, #28
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <Update_pid>:
float Update_pid(PID *pid, float error, float pid_sat, float plant_sat) {
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80045f4:	edc7 0a01 	vstr	s1, [r7, #4]
 80045f8:	ed87 1a00 	vstr	s2, [r7]
//	// Update value
//	i_term_1 = i_term;
//	d_term_1 = d_term;
//	e_n_1 = e_n;

	float e_n = error; // error[n]
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	617b      	str	r3, [r7, #20]

	if(!(((pid -> y_n >= pid_sat) && e_n > 0) || ((pid -> y_n <= -(pid_sat)) && e_n < 0 ))){
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	edd3 7a04 	vldr	s15, [r3, #16]
 8004606:	ed97 7a01 	vldr	s14, [r7, #4]
 800460a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800460e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004612:	bf94      	ite	ls
 8004614:	2301      	movls	r3, #1
 8004616:	2300      	movhi	r3, #0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	f083 0301 	eor.w	r3, r3, #1
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10e      	bne.n	8004642 <Update_pid+0x5a>
 8004624:	edd7 7a05 	vldr	s15, [r7, #20]
 8004628:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800462c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004630:	bfcc      	ite	gt
 8004632:	2301      	movgt	r3, #1
 8004634:	2300      	movle	r3, #0
 8004636:	b2db      	uxtb	r3, r3
 8004638:	f083 0301 	eor.w	r3, r3, #1
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d056      	beq.n	80046f0 <Update_pid+0x108>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	ed93 7a04 	vldr	s14, [r3, #16]
 8004648:	edd7 7a01 	vldr	s15, [r7, #4]
 800464c:	eef1 7a67 	vneg.f32	s15, s15
 8004650:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004658:	bf94      	ite	ls
 800465a:	2301      	movls	r3, #1
 800465c:	2300      	movhi	r3, #0
 800465e:	b2db      	uxtb	r3, r3
 8004660:	f083 0301 	eor.w	r3, r3, #1
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10e      	bne.n	8004688 <Update_pid+0xa0>
 800466a:	edd7 7a05 	vldr	s15, [r7, #20]
 800466e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004676:	bf4c      	ite	mi
 8004678:	2301      	movmi	r3, #1
 800467a:	2300      	movpl	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	f083 0301 	eor.w	r3, r3, #1
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d033      	beq.n	80046f0 <Update_pid+0x108>
		pid -> y_n += ((pid -> kp + pid -> ki + pid -> kd) * e_n)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	ed93 7a04 	vldr	s14, [r3, #16]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	edd3 6a00 	vldr	s13, [r3]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	edd3 7a01 	vldr	s15, [r3, #4]
 800469a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80046a4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80046a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80046ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
						- ((pid -> kp + (2 * pid -> kd)) * pid -> e_n_1)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	ed93 6a00 	vldr	s12, [r3]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80046bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80046c0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	edd3 7a06 	vldr	s15, [r3, #24]
 80046ca:	ee66 7a27 	vmul.f32	s15, s12, s15
 80046ce:	ee76 6ae7 	vsub.f32	s13, s13, s15
						+ (pid -> kd * pid -> e_n_2);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	ed93 6a02 	vldr	s12, [r3, #8]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	edd3 7a07 	vldr	s15, [r3, #28]
 80046de:	ee66 7a27 	vmul.f32	s15, s12, s15
 80046e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
		pid -> y_n += ((pid -> kp + pid -> ki + pid -> kd) * e_n)
 80046e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	edc3 7a04 	vstr	s15, [r3, #16]
	}
	if(pid -> y_n >= pid_sat){
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	edd3 7a04 	vldr	s15, [r3, #16]
 80046f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80046fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004702:	d803      	bhi.n	800470c <Update_pid+0x124>
		pid -> y_n = pid_sat;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	611a      	str	r2, [r3, #16]
 800470a:	e012      	b.n	8004732 <Update_pid+0x14a>

	}else if(pid -> y_n < -pid_sat){
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	ed93 7a04 	vldr	s14, [r3, #16]
 8004712:	edd7 7a01 	vldr	s15, [r7, #4]
 8004716:	eef1 7a67 	vneg.f32	s15, s15
 800471a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800471e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004722:	d506      	bpl.n	8004732 <Update_pid+0x14a>
		pid -> y_n = -pid_sat;
 8004724:	edd7 7a01 	vldr	s15, [r7, #4]
 8004728:	eef1 7a67 	vneg.f32	s15, s15
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	edc3 7a04 	vstr	s15, [r3, #16]
	}

	pid -> e_n_2 = pid -> e_n_1;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	699a      	ldr	r2, [r3, #24]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	61da      	str	r2, [r3, #28]
	pid -> e_n_1 = pid -> e_n;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	695a      	ldr	r2, [r3, #20]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	619a      	str	r2, [r3, #24]

	return pid -> y_n;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	ee07 3a90 	vmov	s15, r3
}
 800474a:	eeb0 0a67 	vmov.f32	s0, s15
 800474e:	371c      	adds	r7, #28
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <Update_pwm>:
 *      Author: naker
 */

#include "pwm.h"

void Update_pwm(TIM_HandleTypeDef* htim, uint16_t htim_channel,GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, int32_t pwm_signal) {
 8004758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800475c:	b08b      	sub	sp, #44	@ 0x2c
 800475e:	af00      	add	r7, sp, #0
 8004760:	6278      	str	r0, [r7, #36]	@ 0x24
 8004762:	61fa      	str	r2, [r7, #28]
 8004764:	461a      	mov	r2, r3
 8004766:	460b      	mov	r3, r1
 8004768:	847b      	strh	r3, [r7, #34]	@ 0x22
 800476a:	4613      	mov	r3, r2
 800476c:	843b      	strh	r3, [r7, #32]
	__HAL_TIM_SET_COMPARE(htim, htim_channel, fabs(pwm_signal));
 800476e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004770:	2b00      	cmp	r3, #0
 8004772:	d111      	bne.n	8004798 <Update_pwm+0x40>
 8004774:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8004776:	f7fb fea1 	bl	80004bc <__aeabi_i2d>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	613a      	str	r2, [r7, #16]
 8004780:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004784:	617b      	str	r3, [r7, #20]
 8004786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004788:	681c      	ldr	r4, [r3, #0]
 800478a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800478e:	f7fc f9af 	bl	8000af0 <__aeabi_d2uiz>
 8004792:	4603      	mov	r3, r0
 8004794:	6363      	str	r3, [r4, #52]	@ 0x34
 8004796:	e061      	b.n	800485c <Update_pwm+0x104>
 8004798:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800479a:	2b04      	cmp	r3, #4
 800479c:	d111      	bne.n	80047c2 <Update_pwm+0x6a>
 800479e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80047a0:	f7fb fe8c 	bl	80004bc <__aeabi_i2d>
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	60ba      	str	r2, [r7, #8]
 80047aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b2:	681c      	ldr	r4, [r3, #0]
 80047b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047b8:	f7fc f99a 	bl	8000af0 <__aeabi_d2uiz>
 80047bc:	4603      	mov	r3, r0
 80047be:	63a3      	str	r3, [r4, #56]	@ 0x38
 80047c0:	e04c      	b.n	800485c <Update_pwm+0x104>
 80047c2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d111      	bne.n	80047ec <Update_pwm+0x94>
 80047c8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80047ca:	f7fb fe77 	bl	80004bc <__aeabi_i2d>
 80047ce:	4602      	mov	r2, r0
 80047d0:	460b      	mov	r3, r1
 80047d2:	603a      	str	r2, [r7, #0]
 80047d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80047d8:	607b      	str	r3, [r7, #4]
 80047da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047dc:	681c      	ldr	r4, [r3, #0]
 80047de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047e2:	f7fc f985 	bl	8000af0 <__aeabi_d2uiz>
 80047e6:	4603      	mov	r3, r0
 80047e8:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80047ea:	e037      	b.n	800485c <Update_pwm+0x104>
 80047ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80047ee:	2b0c      	cmp	r3, #12
 80047f0:	d110      	bne.n	8004814 <Update_pwm+0xbc>
 80047f2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80047f4:	f7fb fe62 	bl	80004bc <__aeabi_i2d>
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	4615      	mov	r5, r2
 80047fe:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	681c      	ldr	r4, [r3, #0]
 8004806:	4628      	mov	r0, r5
 8004808:	4631      	mov	r1, r6
 800480a:	f7fc f971 	bl	8000af0 <__aeabi_d2uiz>
 800480e:	4603      	mov	r3, r0
 8004810:	6423      	str	r3, [r4, #64]	@ 0x40
 8004812:	e023      	b.n	800485c <Update_pwm+0x104>
 8004814:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004816:	2b10      	cmp	r3, #16
 8004818:	d110      	bne.n	800483c <Update_pwm+0xe4>
 800481a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800481c:	f7fb fe4e 	bl	80004bc <__aeabi_i2d>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4692      	mov	sl, r2
 8004826:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 800482a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482c:	681c      	ldr	r4, [r3, #0]
 800482e:	4650      	mov	r0, sl
 8004830:	4659      	mov	r1, fp
 8004832:	f7fc f95d 	bl	8000af0 <__aeabi_d2uiz>
 8004836:	4603      	mov	r3, r0
 8004838:	64a3      	str	r3, [r4, #72]	@ 0x48
 800483a:	e00f      	b.n	800485c <Update_pwm+0x104>
 800483c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800483e:	f7fb fe3d 	bl	80004bc <__aeabi_i2d>
 8004842:	4602      	mov	r2, r0
 8004844:	460b      	mov	r3, r1
 8004846:	4690      	mov	r8, r2
 8004848:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800484c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484e:	681c      	ldr	r4, [r3, #0]
 8004850:	4640      	mov	r0, r8
 8004852:	4649      	mov	r1, r9
 8004854:	f7fc f94c 	bl	8000af0 <__aeabi_d2uiz>
 8004858:	4603      	mov	r3, r0
 800485a:	64e3      	str	r3, [r4, #76]	@ 0x4c
	if (pwm_signal < 0) {
 800485c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800485e:	2b00      	cmp	r3, #0
 8004860:	da06      	bge.n	8004870 <Update_pwm+0x118>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, RESET);
 8004862:	8c3b      	ldrh	r3, [r7, #32]
 8004864:	2200      	movs	r2, #0
 8004866:	4619      	mov	r1, r3
 8004868:	69f8      	ldr	r0, [r7, #28]
 800486a:	f003 fbb1 	bl	8007fd0 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
	}
}
 800486e:	e005      	b.n	800487c <Update_pwm+0x124>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
 8004870:	8c3b      	ldrh	r3, [r7, #32]
 8004872:	2201      	movs	r2, #1
 8004874:	4619      	mov	r1, r3
 8004876:	69f8      	ldr	r0, [r7, #28]
 8004878:	f003 fbaa 	bl	8007fd0 <HAL_GPIO_WritePin>
}
 800487c:	bf00      	nop
 800487e:	372c      	adds	r7, #44	@ 0x2c
 8004880:	46bd      	mov	sp, r7
 8004882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004886 <QEI_init>:
 *  Created on: Apr 24, 2024
 *      Author: naker
 */
#include "qei.h"

void QEI_init(QEI* qei, int32_t ppr, int32_t freq, int32_t period){
 8004886:	b480      	push	{r7}
 8004888:	b085      	sub	sp, #20
 800488a:	af00      	add	r7, sp, #0
 800488c:	60f8      	str	r0, [r7, #12]
 800488e:	60b9      	str	r1, [r7, #8]
 8004890:	607a      	str	r2, [r7, #4]
 8004892:	603b      	str	r3, [r7, #0]
	qei -> ppr = ppr;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	601a      	str	r2, [r3, #0]
	qei -> freq = freq;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	605a      	str	r2, [r3, #4]
	qei -> period = period;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	609a      	str	r2, [r3, #8]
	qei -> counter_value[NEW] = 0;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 80048b8:	68f9      	ldr	r1, [r7, #12]
 80048ba:	f04f 0200 	mov.w	r2, #0
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0.0;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0.0;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	621a      	str	r2, [r3, #32]
	qei -> mm = 0.0;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	629a      	str	r2, [r3, #40]	@ 0x28
	qei -> pps = 0.0;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	62da      	str	r2, [r3, #44]	@ 0x2c
	qei -> rpm = 0.0;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f04f 0200 	mov.w	r2, #0
 80048ec:	631a      	str	r2, [r3, #48]	@ 0x30
	qei -> radps = 0.0;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	635a      	str	r2, [r3, #52]	@ 0x34
	qei -> mmps = 0.0;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> radpss = 0.0;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f04f 0200 	mov.w	r2, #0
 8004904:	64da      	str	r2, [r3, #76]	@ 0x4c
	qei -> rpms = 0.0;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	651a      	str	r2, [r3, #80]	@ 0x50
	qei -> mmpss = 0.0;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	655a      	str	r2, [r3, #84]	@ 0x54
	qei -> velocity_value[NEW] = 0;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f04f 0200 	mov.w	r2, #0
 800491c:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> velocity_value[OLD] = 0;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	641a      	str	r2, [r3, #64]	@ 0x40

}
 8004926:	bf00      	nop
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	0000      	movs	r0, r0
 8004934:	0000      	movs	r0, r0
	...

08004938 <Update_qei>:

void Update_qei(QEI* qei, TIM_HandleTypeDef* htim){
 8004938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800493c:	b082      	sub	sp, #8
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	6039      	str	r1, [r7, #0]
	// Update counter
	qei -> counter_value[NEW] = __HAL_TIM_GET_COUNTER(htim);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	60da      	str	r2, [r3, #12]
	// Update difference of counter's value = NEW - OLD
	qei -> diff_counter_value = qei -> counter_value[NEW] - qei -> counter_value[OLD];
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68da      	ldr	r2, [r3, #12]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	461a      	mov	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	615a      	str	r2, [r3, #20]
	if(qei -> diff_counter_value > qei -> period / 2){
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695a      	ldr	r2, [r3, #20]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	0fd9      	lsrs	r1, r3, #31
 8004968:	440b      	add	r3, r1
 800496a:	105b      	asrs	r3, r3, #1
 800496c:	429a      	cmp	r2, r3
 800496e:	dd06      	ble.n	800497e <Update_qei+0x46>
		qei -> diff_counter_value -= qei -> period;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	695a      	ldr	r2, [r3, #20]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	1ad2      	subs	r2, r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	615a      	str	r2, [r3, #20]
	}
	// over flow problem
	if(qei -> diff_counter_value < -(qei -> period) / 2){
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	695a      	ldr	r2, [r3, #20]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	425b      	negs	r3, r3
 8004988:	0fd9      	lsrs	r1, r3, #31
 800498a:	440b      	add	r3, r1
 800498c:	105b      	asrs	r3, r3, #1
 800498e:	429a      	cmp	r2, r3
 8004990:	da06      	bge.n	80049a0 <Update_qei+0x68>
		qei -> diff_counter_value += qei -> period;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	695a      	ldr	r2, [r3, #20]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	441a      	add	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	615a      	str	r2, [r3, #20]
	}
	// Update velocity at difference unit
	qei -> pps = (float32_t)qei -> diff_counter_value * (float32_t)(qei -> freq);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	ee07 3a90 	vmov	s15, r3
 80049a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	ee07 3a90 	vmov	s15, r3
 80049b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	qei -> radps = qei -> pps * 2.0 * M_PI / (float)(qei -> ppr);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fb fd8a 	bl	80004e0 <__aeabi_f2d>
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	f7fb fc28 	bl	8000224 <__adddf3>
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4610      	mov	r0, r2
 80049da:	4619      	mov	r1, r3
 80049dc:	a371      	add	r3, pc, #452	@ (adr r3, 8004ba4 <Update_qei+0x26c>)
 80049de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e2:	f7fb fdd5 	bl	8000590 <__aeabi_dmul>
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	4692      	mov	sl, r2
 80049ec:	469b      	mov	fp, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	ee07 3a90 	vmov	s15, r3
 80049f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049fa:	ee17 0a90 	vmov	r0, s15
 80049fe:	f7fb fd6f 	bl	80004e0 <__aeabi_f2d>
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	4650      	mov	r0, sl
 8004a08:	4659      	mov	r1, fp
 8004a0a:	f7fb feeb 	bl	80007e4 <__aeabi_ddiv>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	460b      	mov	r3, r1
 8004a12:	4610      	mov	r0, r2
 8004a14:	4619      	mov	r1, r3
 8004a16:	f7fc f88b 	bl	8000b30 <__aeabi_d2f>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	635a      	str	r2, [r3, #52]	@ 0x34
//	qei -> rpm = qei -> pps * 60.0 / (float)(qei -> ppr) ;
	qei -> mmps = qei -> pps * 16.0 / (float32_t)(qei -> ppr);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fb fd5b 	bl	80004e0 <__aeabi_f2d>
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	4b5c      	ldr	r3, [pc, #368]	@ (8004ba0 <Update_qei+0x268>)
 8004a30:	f7fb fdae 	bl	8000590 <__aeabi_dmul>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4692      	mov	sl, r2
 8004a3a:	469b      	mov	fp, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	ee07 3a90 	vmov	s15, r3
 8004a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a48:	ee17 0a90 	vmov	r0, s15
 8004a4c:	f7fb fd48 	bl	80004e0 <__aeabi_f2d>
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4650      	mov	r0, sl
 8004a56:	4659      	mov	r1, fp
 8004a58:	f7fb fec4 	bl	80007e4 <__aeabi_ddiv>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4610      	mov	r0, r2
 8004a62:	4619      	mov	r1, r3
 8004a64:	f7fc f864 	bl	8000b30 <__aeabi_d2f>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	639a      	str	r2, [r3, #56]	@ 0x38

	// Update position at difference unit
	qei -> pulse += qei -> diff_counter_value;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	6949      	ldr	r1, [r1, #20]
 8004a78:	17c8      	asrs	r0, r1, #31
 8004a7a:	460c      	mov	r4, r1
 8004a7c:	4605      	mov	r5, r0
 8004a7e:	eb12 0804 	adds.w	r8, r2, r4
 8004a82:	eb43 0905 	adc.w	r9, r3, r5
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	e9c3 8906 	strd	r8, r9, [r3, #24]
//	qei -> rad += (float)qei -> diff_counter_value * 2.0 * M_PI / (float)(qei -> ppr);
//	qei -> rev += (float)qei -> diff_counter_value / (float)(qei -> ppr);
	qei -> mm += (float32_t)qei -> diff_counter_value * 16.0 / (float32_t)(qei -> ppr); // for lead 16 mm.
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fb fd25 	bl	80004e0 <__aeabi_f2d>
 8004a96:	4604      	mov	r4, r0
 8004a98:	460d      	mov	r5, r1
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	ee07 3a90 	vmov	s15, r3
 8004aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004aa6:	ee17 0a90 	vmov	r0, s15
 8004aaa:	f7fb fd19 	bl	80004e0 <__aeabi_f2d>
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	4b3b      	ldr	r3, [pc, #236]	@ (8004ba0 <Update_qei+0x268>)
 8004ab4:	f7fb fd6c 	bl	8000590 <__aeabi_dmul>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	4690      	mov	r8, r2
 8004abe:	4699      	mov	r9, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	ee07 3a90 	vmov	s15, r3
 8004ac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004acc:	ee17 0a90 	vmov	r0, s15
 8004ad0:	f7fb fd06 	bl	80004e0 <__aeabi_f2d>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4640      	mov	r0, r8
 8004ada:	4649      	mov	r1, r9
 8004adc:	f7fb fe82 	bl	80007e4 <__aeabi_ddiv>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	f7fb fb9c 	bl	8000224 <__adddf3>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	4610      	mov	r0, r2
 8004af2:	4619      	mov	r1, r3
 8004af4:	f7fc f81c 	bl	8000b30 <__aeabi_d2f>
 8004af8:	4602      	mov	r2, r0
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	629a      	str	r2, [r3, #40]	@ 0x28

	// Update acceleration
	qei -> velocity_value[NEW] = qei -> pps;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> diff_velocity_value = qei -> velocity_value[NEW] - qei -> velocity_value[OLD];
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004b12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	qei -> ppss = qei -> diff_velocity_value * (float32_t)(qei -> freq);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	ee07 3a90 	vmov	s15, r3
 8004b2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
//	qei -> radpss = qei -> ppss * 2.0 * M_PI / (float)(qei -> ppr);
//	qei -> rpms = qei -> ppss * 60.0 / (float)(qei -> ppr);
	qei -> mmpss = qei -> ppss * 16.0 / (float32_t)(qei -> ppr); // Acceleration in mm/s^2
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fb fccf 	bl	80004e0 <__aeabi_f2d>
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	4b16      	ldr	r3, [pc, #88]	@ (8004ba0 <Update_qei+0x268>)
 8004b48:	f7fb fd22 	bl	8000590 <__aeabi_dmul>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4614      	mov	r4, r2
 8004b52:	461d      	mov	r5, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	ee07 3a90 	vmov	s15, r3
 8004b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b60:	ee17 0a90 	vmov	r0, s15
 8004b64:	f7fb fcbc 	bl	80004e0 <__aeabi_f2d>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	4629      	mov	r1, r5
 8004b70:	f7fb fe38 	bl	80007e4 <__aeabi_ddiv>
 8004b74:	4602      	mov	r2, r0
 8004b76:	460b      	mov	r3, r1
 8004b78:	4610      	mov	r0, r2
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	f7fb ffd8 	bl	8000b30 <__aeabi_d2f>
 8004b80:	4602      	mov	r2, r0
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	655a      	str	r2, [r3, #84]	@ 0x54

	// Update OLD value
	qei -> counter_value[OLD] = qei -> counter_value[NEW];
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	611a      	str	r2, [r3, #16]
	qei -> velocity_value[OLD] = qei -> velocity_value[NEW];
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	641a      	str	r2, [r3, #64]	@ 0x40

}
 8004b96:	bf00      	nop
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ba0:	40300000 	.word	0x40300000
 8004ba4:	54442d18 	.word	0x54442d18
 8004ba8:	400921fb 	.word	0x400921fb

08004bac <Reset_qei>:

void Reset_qei(QEI* qei){
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
	qei -> counter_value[NEW] = 0;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 8004bc6:	6879      	ldr	r1, [r7, #4]
 8004bc8:	f04f 0200 	mov.w	r2, #0
 8004bcc:	f04f 0300 	mov.w	r3, #0
 8004bd0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0.0;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f04f 0200 	mov.w	r2, #0
 8004bda:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0.0;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f04f 0200 	mov.w	r2, #0
 8004be2:	621a      	str	r2, [r3, #32]
	qei -> mm = 0.0;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	629a      	str	r2, [r3, #40]	@ 0x28
	qei -> pps = 0.0;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
	qei -> rpm = 0.0;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f04f 0200 	mov.w	r2, #0
 8004bfa:	631a      	str	r2, [r3, #48]	@ 0x30
	qei -> radps = 0.0;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	635a      	str	r2, [r3, #52]	@ 0x34
	qei -> mmps = 0.0;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> ppss = 0;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f04f 0200 	mov.w	r2, #0
 8004c12:	649a      	str	r2, [r3, #72]	@ 0x48
	qei -> rpms = 0.0;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f04f 0200 	mov.w	r2, #0
 8004c1a:	651a      	str	r2, [r3, #80]	@ 0x50
	qei -> radpss = 0.0;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f04f 0200 	mov.w	r2, #0
 8004c22:	64da      	str	r2, [r3, #76]	@ 0x4c
	qei -> mmpss = 0.0;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f04f 0200 	mov.w	r2, #0
 8004c2a:	655a      	str	r2, [r3, #84]	@ 0x54
	qei -> velocity_value[NEW] = 0;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f04f 0200 	mov.w	r2, #0
 8004c32:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> velocity_value[OLD] = 0;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	641a      	str	r2, [r3, #64]	@ 0x40
	qei -> diff_velocity_value = 0;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f04f 0200 	mov.w	r2, #0
 8004c42:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <Get_mm>:

float32_t Get_mmps(QEI* qei){
	return qei -> mmps;
}
float32_t Get_mm(QEI* qei){
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
	return qei -> mm;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c5c:	ee07 3a90 	vmov	s15, r3
}
 8004c60:	eeb0 0a67 	vmov.f32	s0, s15
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <point_init>:
 *  Created on: May 3, 2024
 *      Author: naker
 */
#include "state.h"

void point_init(POINT* point){
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
	point -> goal = 0.0;
 8004c76:	6879      	ldr	r1, [r7, #4]
 8004c78:	f04f 0200 	mov.w	r2, #0
 8004c7c:	f04f 0300 	mov.w	r3, #0
 8004c80:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <homing_init>:



void homing_init(HOME* home){
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
	home -> homing_command = 0;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	709a      	strb	r2, [r3, #2]
	home -> homing_state[0] = 0;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	701a      	strb	r2, [r3, #0]
	home -> homing_state[1] = 0;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	705a      	strb	r2, [r3, #1]
	home -> is_home = 0;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	70da      	strb	r2, [r3, #3]
	home -> homing_first = 0;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	711a      	strb	r2, [r3, #4]
	home -> homing_ts = 0;
 8004cb6:	6879      	ldr	r1, [r7, #4]
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	home -> pwm = 0;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	821a      	strh	r2, [r3, #16]
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <homing>:
void homing(HOME* home, GPIO_TypeDef* GPIO_Prox, uint16_t GPIO_Pin_Prox)
{
 8004cd6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6178      	str	r0, [r7, #20]
 8004ce0:	6139      	str	r1, [r7, #16]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	81fb      	strh	r3, [r7, #14]
	// If we have homing command
	if(home -> homing_command == 1){
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	789b      	ldrb	r3, [r3, #2]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	f040 817e 	bne.w	8004fec <homing+0x316>
		if(home -> homing_state[0] == 0){
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d121      	bne.n	8004d3c <homing+0x66>
			// Homing state selection
			// Robot is not home but proximity is detecting
			if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && home -> is_home == 0){
 8004cf8:	89fb      	ldrh	r3, [r7, #14]
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	6938      	ldr	r0, [r7, #16]
 8004cfe:	f003 f94f 	bl	8007fa0 <HAL_GPIO_ReadPin>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d107      	bne.n	8004d18 <homing+0x42>
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	78db      	ldrb	r3, [r3, #3]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d103      	bne.n	8004d18 <homing+0x42>
				home -> homing_state[1] = 2;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	2202      	movs	r2, #2
 8004d14:	705a      	strb	r2, [r3, #1]
 8004d16:	e00e      	b.n	8004d36 <homing+0x60>
			}
			// Robot is not home and proximity isn't detecting
			else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && home -> is_home == 0){
 8004d18:	89fb      	ldrh	r3, [r7, #14]
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	6938      	ldr	r0, [r7, #16]
 8004d1e:	f003 f93f 	bl	8007fa0 <HAL_GPIO_ReadPin>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d106      	bne.n	8004d36 <homing+0x60>
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	78db      	ldrb	r3, [r3, #3]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d102      	bne.n	8004d36 <homing+0x60>
				home -> homing_state[1] = 3;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	2203      	movs	r2, #3
 8004d34:	705a      	strb	r2, [r3, #1]
			}
			// Set homing state
			home -> homing_state[0] = 1;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	701a      	strb	r2, [r3, #0]
		}
		if(home -> homing_state[0] == 1){
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	f040 8156 	bne.w	8004ff2 <homing+0x31c>
			// Homing
			if(home -> homing_state[1] == 2){
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	785b      	ldrb	r3, [r3, #1]
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d17a      	bne.n	8004e44 <homing+0x16e>
//				home -> state_check += 10;
				if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1 && home -> homing_ts > 2000){
 8004d4e:	89fb      	ldrh	r3, [r7, #14]
 8004d50:	4619      	mov	r1, r3
 8004d52:	6938      	ldr	r0, [r7, #16]
 8004d54:	f003 f924 	bl	8007fa0 <HAL_GPIO_ReadPin>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d11f      	bne.n	8004d9e <homing+0xc8>
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004d64:	f240 71d1 	movw	r1, #2001	@ 0x7d1
 8004d68:	428a      	cmp	r2, r1
 8004d6a:	f173 0300 	sbcs.w	r3, r3, #0
 8004d6e:	d316      	bcc.n	8004d9e <homing+0xc8>
					// Stop when proximity was detected
					home -> pwm = 0;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	2200      	movs	r2, #0
 8004d74:	821a      	strh	r2, [r3, #16]
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0);
					// Reset homing state and other
					home -> homing_ts = 0;
 8004d76:	6979      	ldr	r1, [r7, #20]
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	e9c1 2302 	strd	r2, r3, [r1, #8]
					home -> homing_state[0] = 0;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	2200      	movs	r2, #0
 8004d88:	701a      	strb	r2, [r3, #0]
					home -> homing_state[1] = 0;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	705a      	strb	r2, [r3, #1]
					home -> homing_command = 0;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	2200      	movs	r2, #0
 8004d94:	709a      	strb	r2, [r3, #2]
					home -> is_home = 1;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	70da      	strb	r2, [r3, #3]
					return;
 8004d9c:	e129      	b.n	8004ff2 <homing+0x31c>
				}else if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1 && home -> homing_ts >= 0 && home -> homing_ts < 1000){
 8004d9e:	89fb      	ldrh	r3, [r7, #14]
 8004da0:	4619      	mov	r1, r3
 8004da2:	6938      	ldr	r0, [r7, #16]
 8004da4:	f003 f8fc 	bl	8007fa0 <HAL_GPIO_ReadPin>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d10c      	bne.n	8004dc8 <homing+0xf2>
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004db4:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8004db8:	f173 0300 	sbcs.w	r3, r3, #0
 8004dbc:	d204      	bcs.n	8004dc8 <homing+0xf2>
					// Move upper
					home -> pwm = 16000;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8004dc4:	821a      	strh	r2, [r3, #16]
 8004dc6:	e02f      	b.n	8004e28 <homing+0x152>
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 200);
				}else if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0 && home -> homing_ts >= 1000 && home -> homing_ts < 2000){ // wait 1.0 secs
 8004dc8:	89fb      	ldrh	r3, [r7, #14]
 8004dca:	4619      	mov	r1, r3
 8004dcc:	6938      	ldr	r0, [r7, #16]
 8004dce:	f003 f8e7 	bl	8007fa0 <HAL_GPIO_ReadPin>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d113      	bne.n	8004e00 <homing+0x12a>
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004dde:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8004de2:	f173 0300 	sbcs.w	r3, r3, #0
 8004de6:	d30b      	bcc.n	8004e00 <homing+0x12a>
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004dee:	f5b2 6ffa 	cmp.w	r2, #2000	@ 0x7d0
 8004df2:	f173 0300 	sbcs.w	r3, r3, #0
 8004df6:	d203      	bcs.n	8004e00 <homing+0x12a>
					// Stop
					home -> pwm = 0;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	821a      	strh	r2, [r3, #16]
 8004dfe:	e013      	b.n	8004e28 <homing+0x152>
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0);
				}else if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0 && home -> homing_ts >= 2000){ // wait 1.25 secs
 8004e00:	89fb      	ldrh	r3, [r7, #14]
 8004e02:	4619      	mov	r1, r3
 8004e04:	6938      	ldr	r0, [r7, #16]
 8004e06:	f003 f8cb 	bl	8007fa0 <HAL_GPIO_ReadPin>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10b      	bne.n	8004e28 <homing+0x152>
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004e16:	f5b2 6ffa 	cmp.w	r2, #2000	@ 0x7d0
 8004e1a:	f173 0300 	sbcs.w	r3, r3, #0
 8004e1e:	d303      	bcc.n	8004e28 <homing+0x152>
					// Move lower
					home -> pwm = -10000;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f64d 02f0 	movw	r2, #55536	@ 0xd8f0
 8004e26:	821a      	strh	r2, [r3, #16]
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, -120);
				}
				home -> homing_ts++;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004e2e:	1c51      	adds	r1, r2, #1
 8004e30:	6039      	str	r1, [r7, #0]
 8004e32:	f143 0300 	adc.w	r3, r3, #0
 8004e36:	607b      	str	r3, [r7, #4]
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004e3e:	e9c3 1202 	strd	r1, r2, [r3, #8]
 8004e42:	e0d6      	b.n	8004ff2 <homing+0x31c>
			}
			else if(home -> homing_state[1] == 3){
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	785b      	ldrb	r3, [r3, #1]
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	f040 80d2 	bne.w	8004ff2 <homing+0x31c>
				if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && (home -> homing_first == 1)){
 8004e4e:	89fb      	ldrh	r3, [r7, #14]
 8004e50:	4619      	mov	r1, r3
 8004e52:	6938      	ldr	r0, [r7, #16]
 8004e54:	f003 f8a4 	bl	8007fa0 <HAL_GPIO_ReadPin>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d11d      	bne.n	8004e9a <homing+0x1c4>
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	791b      	ldrb	r3, [r3, #4]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d119      	bne.n	8004e9a <homing+0x1c4>
					// Stop when proximity was detected
					home -> pwm = 0;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	821a      	strh	r2, [r3, #16]
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0);
					// Reset homing state and other
					home -> homing_ts = 0;
 8004e6c:	6979      	ldr	r1, [r7, #20]
 8004e6e:	f04f 0200 	mov.w	r2, #0
 8004e72:	f04f 0300 	mov.w	r3, #0
 8004e76:	e9c1 2302 	strd	r2, r3, [r1, #8]
					home -> homing_first = 0;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	711a      	strb	r2, [r3, #4]
					home -> homing_state[0] = 0;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	2200      	movs	r2, #0
 8004e84:	701a      	strb	r2, [r3, #0]
					home -> homing_state[1] = 0;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	705a      	strb	r2, [r3, #1]
					home -> homing_command = 0;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	709a      	strb	r2, [r3, #2]
					home -> is_home = 1;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	2201      	movs	r2, #1
 8004e96:	70da      	strb	r2, [r3, #3]
					return;
 8004e98:	e0ab      	b.n	8004ff2 <homing+0x31c>
				}else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && (home -> homing_first == 0)){
 8004e9a:	89fb      	ldrh	r3, [r7, #14]
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	6938      	ldr	r0, [r7, #16]
 8004ea0:	f003 f87e 	bl	8007fa0 <HAL_GPIO_ReadPin>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d12b      	bne.n	8004f02 <homing+0x22c>
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	791b      	ldrb	r3, [r3, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d127      	bne.n	8004f02 <homing+0x22c>
					// Stop when proximity was detected
					if(home -> homing_ts == 0){
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	d102      	bne.n	8004ec2 <homing+0x1ec>
						home -> pwm = 0;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	821a      	strh	r2, [r3, #16]
//						Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0);
					}
					home -> homing_ts++;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004ec8:	f112 0a01 	adds.w	sl, r2, #1
 8004ecc:	f143 0b00 	adc.w	fp, r3, #0
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	e9c3 ab02 	strd	sl, fp, [r3, #8]
					if(home -> homing_ts >= 1000 && home -> homing_ts < 2000){ // wait 0.25 secs
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004edc:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8004ee0:	f173 0300 	sbcs.w	r3, r3, #0
 8004ee4:	f0c0 8084 	bcc.w	8004ff0 <homing+0x31a>
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004eee:	f5b2 6ffa 	cmp.w	r2, #2000	@ 0x7d0
 8004ef2:	f173 0300 	sbcs.w	r3, r3, #0
 8004ef6:	d27b      	bcs.n	8004ff0 <homing+0x31a>
						 // Move upper
						home -> pwm = 16000;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8004efe:	821a      	strh	r2, [r3, #16]
					if(home -> homing_ts >= 1000 && home -> homing_ts < 2000){ // wait 0.25 secs
 8004f00:	e076      	b.n	8004ff0 <homing+0x31a>
//						Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 200);
					}
				}else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && (home -> homing_first == 1) && home -> homing_ts >= 2000 && home -> homing_ts < 3000){ // wait 0.5 secs
 8004f02:	89fb      	ldrh	r3, [r7, #14]
 8004f04:	4619      	mov	r1, r3
 8004f06:	6938      	ldr	r0, [r7, #16]
 8004f08:	f003 f84a 	bl	8007fa0 <HAL_GPIO_ReadPin>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d122      	bne.n	8004f58 <homing+0x282>
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	791b      	ldrb	r3, [r3, #4]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d11e      	bne.n	8004f58 <homing+0x282>
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004f20:	f5b2 6ffa 	cmp.w	r2, #2000	@ 0x7d0
 8004f24:	f173 0300 	sbcs.w	r3, r3, #0
 8004f28:	d316      	bcc.n	8004f58 <homing+0x282>
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004f30:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8004f34:	428a      	cmp	r2, r1
 8004f36:	f173 0300 	sbcs.w	r3, r3, #0
 8004f3a:	d20d      	bcs.n	8004f58 <homing+0x282>
					// Stop
					home -> pwm = 0;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	821a      	strh	r2, [r3, #16]
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0);
					home -> homing_ts++;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004f48:	f112 0801 	adds.w	r8, r2, #1
 8004f4c:	f143 0900 	adc.w	r9, r3, #0
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8004f56:	e04c      	b.n	8004ff2 <homing+0x31c>
				}else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && (home -> homing_first == 1) && home -> homing_ts >= 3000){ // wait 1.25 secs
 8004f58:	89fb      	ldrh	r3, [r7, #14]
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	6938      	ldr	r0, [r7, #16]
 8004f5e:	f003 f81f 	bl	8007fa0 <HAL_GPIO_ReadPin>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d111      	bne.n	8004f8c <homing+0x2b6>
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	791b      	ldrb	r3, [r3, #4]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d10d      	bne.n	8004f8c <homing+0x2b6>
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004f76:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8004f7a:	428a      	cmp	r2, r1
 8004f7c:	f173 0300 	sbcs.w	r3, r3, #0
 8004f80:	d304      	bcc.n	8004f8c <homing+0x2b6>
					// Move lower
					home -> pwm = -10000;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f64d 02f0 	movw	r2, #55536	@ 0xd8f0
 8004f88:	821a      	strh	r2, [r3, #16]
 8004f8a:	e032      	b.n	8004ff2 <homing+0x31c>
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, -120);
				}else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && (home -> homing_first == 1)){
 8004f8c:	89fb      	ldrh	r3, [r7, #14]
 8004f8e:	4619      	mov	r1, r3
 8004f90:	6938      	ldr	r0, [r7, #16]
 8004f92:	f003 f805 	bl	8007fa0 <HAL_GPIO_ReadPin>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10d      	bne.n	8004fb8 <homing+0x2e2>
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	791b      	ldrb	r3, [r3, #4]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d109      	bne.n	8004fb8 <homing+0x2e2>
					home -> homing_ts++;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004faa:	1c54      	adds	r4, r2, #1
 8004fac:	f143 0500 	adc.w	r5, r3, #0
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	e9c3 4502 	strd	r4, r5, [r3, #8]
 8004fb6:	e01c      	b.n	8004ff2 <homing+0x31c>
				}else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && (home -> homing_first == 0) && home -> homing_ts == 0){
 8004fb8:	89fb      	ldrh	r3, [r7, #14]
 8004fba:	4619      	mov	r1, r3
 8004fbc:	6938      	ldr	r0, [r7, #16]
 8004fbe:	f002 ffef 	bl	8007fa0 <HAL_GPIO_ReadPin>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10d      	bne.n	8004fe4 <homing+0x30e>
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	791b      	ldrb	r3, [r3, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d109      	bne.n	8004fe4 <homing+0x30e>
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	d104      	bne.n	8004fe4 <homing+0x30e>
					home -> pwm = -10000;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f64d 02f0 	movw	r2, #55536	@ 0xd8f0
 8004fe0:	821a      	strh	r2, [r3, #16]
 8004fe2:	e006      	b.n	8004ff2 <homing+0x31c>
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, -120); // Move lower
				}else{
					home -> homing_first = 1;
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	711a      	strb	r2, [r3, #4]
 8004fea:	e002      	b.n	8004ff2 <homing+0x31c>
			}
		}
	}
	// Nothing happen
	else{
		return;
 8004fec:	bf00      	nop
 8004fee:	e000      	b.n	8004ff2 <homing+0x31c>
					if(home -> homing_ts >= 1000 && home -> homing_ts < 2000){ // wait 0.25 secs
 8004ff0:	bf00      	nop
	}
}
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004ffa <Reset_homing>:
void Reset_homing(HOME* home){
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
	home -> homing_command = 0;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	709a      	strb	r2, [r3, #2]
	home -> homing_first = 0;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	711a      	strb	r2, [r3, #4]
	home -> homing_ts = 0;
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	f04f 0300 	mov.w	r3, #0
 8005018:	e9c1 2302 	strd	r2, r3, [r1, #8]
	home -> is_home = 0;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	70da      	strb	r2, [r3, #3]
	home -> pwm = 0;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	821a      	strh	r2, [r3, #16]
	home -> state_check = 0;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	715a      	strb	r2, [r3, #5]
}
 800502e:	bf00      	nop
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <emer_init>:

void emer_init(EMER* emer){
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
	emer -> emer_state = 0;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	701a      	strb	r2, [r3, #0]
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800505a:	4b0f      	ldr	r3, [pc, #60]	@ (8005098 <HAL_MspInit+0x44>)
 800505c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800505e:	4a0e      	ldr	r2, [pc, #56]	@ (8005098 <HAL_MspInit+0x44>)
 8005060:	f043 0301 	orr.w	r3, r3, #1
 8005064:	6613      	str	r3, [r2, #96]	@ 0x60
 8005066:	4b0c      	ldr	r3, [pc, #48]	@ (8005098 <HAL_MspInit+0x44>)
 8005068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	607b      	str	r3, [r7, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005072:	4b09      	ldr	r3, [pc, #36]	@ (8005098 <HAL_MspInit+0x44>)
 8005074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005076:	4a08      	ldr	r2, [pc, #32]	@ (8005098 <HAL_MspInit+0x44>)
 8005078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800507c:	6593      	str	r3, [r2, #88]	@ 0x58
 800507e:	4b06      	ldr	r3, [pc, #24]	@ (8005098 <HAL_MspInit+0x44>)
 8005080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005086:	603b      	str	r3, [r7, #0]
 8005088:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800508a:	f003 f875 	bl	8008178 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800508e:	bf00      	nop
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	40021000 	.word	0x40021000

0800509c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b09e      	sub	sp, #120	@ 0x78
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	605a      	str	r2, [r3, #4]
 80050ae:	609a      	str	r2, [r3, #8]
 80050b0:	60da      	str	r2, [r3, #12]
 80050b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80050b4:	f107 0310 	add.w	r3, r7, #16
 80050b8:	2254      	movs	r2, #84	@ 0x54
 80050ba:	2100      	movs	r1, #0
 80050bc:	4618      	mov	r0, r3
 80050be:	f007 ff05 	bl	800cecc <memset>
  if(hadc->Instance==ADC1)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050ca:	d167      	bne.n	800519c <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80050cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050d0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80050d2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80050d6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80050d8:	f107 0310 	add.w	r3, r7, #16
 80050dc:	4618      	mov	r0, r3
 80050de:	f003 fd89 	bl	8008bf4 <HAL_RCCEx_PeriphCLKConfig>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80050e8:	f7ff fa4a 	bl	8004580 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80050ec:	4b2d      	ldr	r3, [pc, #180]	@ (80051a4 <HAL_ADC_MspInit+0x108>)
 80050ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050f0:	4a2c      	ldr	r2, [pc, #176]	@ (80051a4 <HAL_ADC_MspInit+0x108>)
 80050f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80050f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050f8:	4b2a      	ldr	r3, [pc, #168]	@ (80051a4 <HAL_ADC_MspInit+0x108>)
 80050fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005104:	4b27      	ldr	r3, [pc, #156]	@ (80051a4 <HAL_ADC_MspInit+0x108>)
 8005106:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005108:	4a26      	ldr	r2, [pc, #152]	@ (80051a4 <HAL_ADC_MspInit+0x108>)
 800510a:	f043 0301 	orr.w	r3, r3, #1
 800510e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005110:	4b24      	ldr	r3, [pc, #144]	@ (80051a4 <HAL_ADC_MspInit+0x108>)
 8005112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	60bb      	str	r3, [r7, #8]
 800511a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Current_sensor_Pin;
 800511c:	2301      	movs	r3, #1
 800511e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005120:	2303      	movs	r3, #3
 8005122:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005124:	2300      	movs	r3, #0
 8005126:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Current_sensor_GPIO_Port, &GPIO_InitStruct);
 8005128:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800512c:	4619      	mov	r1, r3
 800512e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005132:	f002 fdb3 	bl	8007c9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8005136:	4b1c      	ldr	r3, [pc, #112]	@ (80051a8 <HAL_ADC_MspInit+0x10c>)
 8005138:	4a1c      	ldr	r2, [pc, #112]	@ (80051ac <HAL_ADC_MspInit+0x110>)
 800513a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800513c:	4b1a      	ldr	r3, [pc, #104]	@ (80051a8 <HAL_ADC_MspInit+0x10c>)
 800513e:	2205      	movs	r2, #5
 8005140:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005142:	4b19      	ldr	r3, [pc, #100]	@ (80051a8 <HAL_ADC_MspInit+0x10c>)
 8005144:	2200      	movs	r2, #0
 8005146:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005148:	4b17      	ldr	r3, [pc, #92]	@ (80051a8 <HAL_ADC_MspInit+0x10c>)
 800514a:	2200      	movs	r2, #0
 800514c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800514e:	4b16      	ldr	r3, [pc, #88]	@ (80051a8 <HAL_ADC_MspInit+0x10c>)
 8005150:	2280      	movs	r2, #128	@ 0x80
 8005152:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005154:	4b14      	ldr	r3, [pc, #80]	@ (80051a8 <HAL_ADC_MspInit+0x10c>)
 8005156:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800515a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800515c:	4b12      	ldr	r3, [pc, #72]	@ (80051a8 <HAL_ADC_MspInit+0x10c>)
 800515e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005162:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005164:	4b10      	ldr	r3, [pc, #64]	@ (80051a8 <HAL_ADC_MspInit+0x10c>)
 8005166:	2220      	movs	r2, #32
 8005168:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800516a:	4b0f      	ldr	r3, [pc, #60]	@ (80051a8 <HAL_ADC_MspInit+0x10c>)
 800516c:	2200      	movs	r2, #0
 800516e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005170:	480d      	ldr	r0, [pc, #52]	@ (80051a8 <HAL_ADC_MspInit+0x10c>)
 8005172:	f002 fa61 	bl	8007638 <HAL_DMA_Init>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800517c:	f7ff fa00 	bl	8004580 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a09      	ldr	r2, [pc, #36]	@ (80051a8 <HAL_ADC_MspInit+0x10c>)
 8005184:	655a      	str	r2, [r3, #84]	@ 0x54
 8005186:	4a08      	ldr	r2, [pc, #32]	@ (80051a8 <HAL_ADC_MspInit+0x10c>)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800518c:	2200      	movs	r2, #0
 800518e:	2100      	movs	r1, #0
 8005190:	2012      	movs	r0, #18
 8005192:	f002 fa1c 	bl	80075ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005196:	2012      	movs	r0, #18
 8005198:	f002 fa33 	bl	8007602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800519c:	bf00      	nop
 800519e:	3778      	adds	r7, #120	@ 0x78
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40021000 	.word	0x40021000
 80051a8:	20000714 	.word	0x20000714
 80051ac:	40020008 	.word	0x40020008

080051b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a3c      	ldr	r2, [pc, #240]	@ (80052b0 <HAL_TIM_Base_MspInit+0x100>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d13f      	bne.n	8005242 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80051c2:	4b3c      	ldr	r3, [pc, #240]	@ (80052b4 <HAL_TIM_Base_MspInit+0x104>)
 80051c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051c6:	4a3b      	ldr	r2, [pc, #236]	@ (80052b4 <HAL_TIM_Base_MspInit+0x104>)
 80051c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80051cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80051ce:	4b39      	ldr	r3, [pc, #228]	@ (80052b4 <HAL_TIM_Base_MspInit+0x104>)
 80051d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel4;
 80051da:	4b37      	ldr	r3, [pc, #220]	@ (80052b8 <HAL_TIM_Base_MspInit+0x108>)
 80051dc:	4a37      	ldr	r2, [pc, #220]	@ (80052bc <HAL_TIM_Base_MspInit+0x10c>)
 80051de:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 80051e0:	4b35      	ldr	r3, [pc, #212]	@ (80052b8 <HAL_TIM_Base_MspInit+0x108>)
 80051e2:	222a      	movs	r2, #42	@ 0x2a
 80051e4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80051e6:	4b34      	ldr	r3, [pc, #208]	@ (80052b8 <HAL_TIM_Base_MspInit+0x108>)
 80051e8:	2210      	movs	r2, #16
 80051ea:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80051ec:	4b32      	ldr	r3, [pc, #200]	@ (80052b8 <HAL_TIM_Base_MspInit+0x108>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80051f2:	4b31      	ldr	r3, [pc, #196]	@ (80052b8 <HAL_TIM_Base_MspInit+0x108>)
 80051f4:	2280      	movs	r2, #128	@ 0x80
 80051f6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80051f8:	4b2f      	ldr	r3, [pc, #188]	@ (80052b8 <HAL_TIM_Base_MspInit+0x108>)
 80051fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80051fe:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005200:	4b2d      	ldr	r3, [pc, #180]	@ (80052b8 <HAL_TIM_Base_MspInit+0x108>)
 8005202:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005206:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8005208:	4b2b      	ldr	r3, [pc, #172]	@ (80052b8 <HAL_TIM_Base_MspInit+0x108>)
 800520a:	2200      	movs	r2, #0
 800520c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800520e:	4b2a      	ldr	r3, [pc, #168]	@ (80052b8 <HAL_TIM_Base_MspInit+0x108>)
 8005210:	2200      	movs	r2, #0
 8005212:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8005214:	4828      	ldr	r0, [pc, #160]	@ (80052b8 <HAL_TIM_Base_MspInit+0x108>)
 8005216:	f002 fa0f 	bl	8007638 <HAL_DMA_Init>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8005220:	f7ff f9ae 	bl	8004580 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a24      	ldr	r2, [pc, #144]	@ (80052b8 <HAL_TIM_Base_MspInit+0x108>)
 8005228:	625a      	str	r2, [r3, #36]	@ 0x24
 800522a:	4a23      	ldr	r2, [pc, #140]	@ (80052b8 <HAL_TIM_Base_MspInit+0x108>)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005230:	2200      	movs	r2, #0
 8005232:	2100      	movs	r1, #0
 8005234:	2019      	movs	r0, #25
 8005236:	f002 f9ca 	bl	80075ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800523a:	2019      	movs	r0, #25
 800523c:	f002 f9e1 	bl	8007602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8005240:	e032      	b.n	80052a8 <HAL_TIM_Base_MspInit+0xf8>
  else if(htim_base->Instance==TIM3)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a1e      	ldr	r2, [pc, #120]	@ (80052c0 <HAL_TIM_Base_MspInit+0x110>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d114      	bne.n	8005276 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800524c:	4b19      	ldr	r3, [pc, #100]	@ (80052b4 <HAL_TIM_Base_MspInit+0x104>)
 800524e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005250:	4a18      	ldr	r2, [pc, #96]	@ (80052b4 <HAL_TIM_Base_MspInit+0x104>)
 8005252:	f043 0302 	orr.w	r3, r3, #2
 8005256:	6593      	str	r3, [r2, #88]	@ 0x58
 8005258:	4b16      	ldr	r3, [pc, #88]	@ (80052b4 <HAL_TIM_Base_MspInit+0x104>)
 800525a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	613b      	str	r3, [r7, #16]
 8005262:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005264:	2200      	movs	r2, #0
 8005266:	2100      	movs	r1, #0
 8005268:	201d      	movs	r0, #29
 800526a:	f002 f9b0 	bl	80075ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800526e:	201d      	movs	r0, #29
 8005270:	f002 f9c7 	bl	8007602 <HAL_NVIC_EnableIRQ>
}
 8005274:	e018      	b.n	80052a8 <HAL_TIM_Base_MspInit+0xf8>
  else if(htim_base->Instance==TIM16)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a12      	ldr	r2, [pc, #72]	@ (80052c4 <HAL_TIM_Base_MspInit+0x114>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d113      	bne.n	80052a8 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005280:	4b0c      	ldr	r3, [pc, #48]	@ (80052b4 <HAL_TIM_Base_MspInit+0x104>)
 8005282:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005284:	4a0b      	ldr	r2, [pc, #44]	@ (80052b4 <HAL_TIM_Base_MspInit+0x104>)
 8005286:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800528a:	6613      	str	r3, [r2, #96]	@ 0x60
 800528c:	4b09      	ldr	r3, [pc, #36]	@ (80052b4 <HAL_TIM_Base_MspInit+0x104>)
 800528e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005294:	60fb      	str	r3, [r7, #12]
 8005296:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005298:	2200      	movs	r2, #0
 800529a:	2100      	movs	r1, #0
 800529c:	2019      	movs	r0, #25
 800529e:	f002 f996 	bl	80075ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80052a2:	2019      	movs	r0, #25
 80052a4:	f002 f9ad 	bl	8007602 <HAL_NVIC_EnableIRQ>
}
 80052a8:	bf00      	nop
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	40012c00 	.word	0x40012c00
 80052b4:	40021000 	.word	0x40021000
 80052b8:	20000aa4 	.word	0x20000aa4
 80052bc:	40020044 	.word	0x40020044
 80052c0:	40000400 	.word	0x40000400
 80052c4:	40014400 	.word	0x40014400

080052c8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b08a      	sub	sp, #40	@ 0x28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052d0:	f107 0314 	add.w	r3, r7, #20
 80052d4:	2200      	movs	r2, #0
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	605a      	str	r2, [r3, #4]
 80052da:	609a      	str	r2, [r3, #8]
 80052dc:	60da      	str	r2, [r3, #12]
 80052de:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005358 <HAL_TIM_Encoder_MspInit+0x90>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d131      	bne.n	800534e <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80052ea:	4b1c      	ldr	r3, [pc, #112]	@ (800535c <HAL_TIM_Encoder_MspInit+0x94>)
 80052ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ee:	4a1b      	ldr	r2, [pc, #108]	@ (800535c <HAL_TIM_Encoder_MspInit+0x94>)
 80052f0:	f043 0304 	orr.w	r3, r3, #4
 80052f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80052f6:	4b19      	ldr	r3, [pc, #100]	@ (800535c <HAL_TIM_Encoder_MspInit+0x94>)
 80052f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052fa:	f003 0304 	and.w	r3, r3, #4
 80052fe:	613b      	str	r3, [r7, #16]
 8005300:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005302:	4b16      	ldr	r3, [pc, #88]	@ (800535c <HAL_TIM_Encoder_MspInit+0x94>)
 8005304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005306:	4a15      	ldr	r2, [pc, #84]	@ (800535c <HAL_TIM_Encoder_MspInit+0x94>)
 8005308:	f043 0301 	orr.w	r3, r3, #1
 800530c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800530e:	4b13      	ldr	r3, [pc, #76]	@ (800535c <HAL_TIM_Encoder_MspInit+0x94>)
 8005310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
 800531a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800531e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005320:	2302      	movs	r3, #2
 8005322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005324:	2300      	movs	r3, #0
 8005326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005328:	2300      	movs	r3, #0
 800532a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800532c:	230a      	movs	r3, #10
 800532e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005330:	f107 0314 	add.w	r3, r7, #20
 8005334:	4619      	mov	r1, r3
 8005336:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800533a:	f002 fcaf 	bl	8007c9c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800533e:	2200      	movs	r2, #0
 8005340:	2100      	movs	r1, #0
 8005342:	201e      	movs	r0, #30
 8005344:	f002 f943 	bl	80075ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005348:	201e      	movs	r0, #30
 800534a:	f002 f95a 	bl	8007602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800534e:	bf00      	nop
 8005350:	3728      	adds	r7, #40	@ 0x28
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	40000800 	.word	0x40000800
 800535c:	40021000 	.word	0x40021000

08005360 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b088      	sub	sp, #32
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005368:	f107 030c 	add.w	r3, r7, #12
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	605a      	str	r2, [r3, #4]
 8005372:	609a      	str	r2, [r3, #8]
 8005374:	60da      	str	r2, [r3, #12]
 8005376:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a11      	ldr	r2, [pc, #68]	@ (80053c4 <HAL_TIM_MspPostInit+0x64>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d11b      	bne.n	80053ba <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005382:	4b11      	ldr	r3, [pc, #68]	@ (80053c8 <HAL_TIM_MspPostInit+0x68>)
 8005384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005386:	4a10      	ldr	r2, [pc, #64]	@ (80053c8 <HAL_TIM_MspPostInit+0x68>)
 8005388:	f043 0304 	orr.w	r3, r3, #4
 800538c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800538e:	4b0e      	ldr	r3, [pc, #56]	@ (80053c8 <HAL_TIM_MspPostInit+0x68>)
 8005390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005392:	f003 0304 	and.w	r3, r3, #4
 8005396:	60bb      	str	r3, [r7, #8]
 8005398:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_signal_Pin;
 800539a:	2301      	movs	r3, #1
 800539c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800539e:	2302      	movs	r3, #2
 80053a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a2:	2300      	movs	r3, #0
 80053a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053a6:	2300      	movs	r3, #0
 80053a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80053aa:	2302      	movs	r3, #2
 80053ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_signal_GPIO_Port, &GPIO_InitStruct);
 80053ae:	f107 030c 	add.w	r3, r7, #12
 80053b2:	4619      	mov	r1, r3
 80053b4:	4805      	ldr	r0, [pc, #20]	@ (80053cc <HAL_TIM_MspPostInit+0x6c>)
 80053b6:	f002 fc71 	bl	8007c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80053ba:	bf00      	nop
 80053bc:	3720      	adds	r7, #32
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	40012c00 	.word	0x40012c00
 80053c8:	40021000 	.word	0x40021000
 80053cc:	48000800 	.word	0x48000800

080053d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b09e      	sub	sp, #120	@ 0x78
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053d8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80053dc:	2200      	movs	r2, #0
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	605a      	str	r2, [r3, #4]
 80053e2:	609a      	str	r2, [r3, #8]
 80053e4:	60da      	str	r2, [r3, #12]
 80053e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80053e8:	f107 0310 	add.w	r3, r7, #16
 80053ec:	2254      	movs	r2, #84	@ 0x54
 80053ee:	2100      	movs	r1, #0
 80053f0:	4618      	mov	r0, r3
 80053f2:	f007 fd6b 	bl	800cecc <memset>
  if(huart->Instance==USART2)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a4d      	ldr	r2, [pc, #308]	@ (8005530 <HAL_UART_MspInit+0x160>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	f040 8092 	bne.w	8005526 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005402:	2302      	movs	r3, #2
 8005404:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005406:	2300      	movs	r3, #0
 8005408:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800540a:	f107 0310 	add.w	r3, r7, #16
 800540e:	4618      	mov	r0, r3
 8005410:	f003 fbf0 	bl	8008bf4 <HAL_RCCEx_PeriphCLKConfig>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800541a:	f7ff f8b1 	bl	8004580 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800541e:	4b45      	ldr	r3, [pc, #276]	@ (8005534 <HAL_UART_MspInit+0x164>)
 8005420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005422:	4a44      	ldr	r2, [pc, #272]	@ (8005534 <HAL_UART_MspInit+0x164>)
 8005424:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005428:	6593      	str	r3, [r2, #88]	@ 0x58
 800542a:	4b42      	ldr	r3, [pc, #264]	@ (8005534 <HAL_UART_MspInit+0x164>)
 800542c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800542e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005436:	4b3f      	ldr	r3, [pc, #252]	@ (8005534 <HAL_UART_MspInit+0x164>)
 8005438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800543a:	4a3e      	ldr	r2, [pc, #248]	@ (8005534 <HAL_UART_MspInit+0x164>)
 800543c:	f043 0301 	orr.w	r3, r3, #1
 8005440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005442:	4b3c      	ldr	r3, [pc, #240]	@ (8005534 <HAL_UART_MspInit+0x164>)
 8005444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	60bb      	str	r3, [r7, #8]
 800544c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800544e:	230c      	movs	r3, #12
 8005450:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005452:	2302      	movs	r3, #2
 8005454:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005456:	2300      	movs	r3, #0
 8005458:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800545a:	2300      	movs	r3, #0
 800545c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800545e:	2307      	movs	r3, #7
 8005460:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005462:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005466:	4619      	mov	r1, r3
 8005468:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800546c:	f002 fc16 	bl	8007c9c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8005470:	4b31      	ldr	r3, [pc, #196]	@ (8005538 <HAL_UART_MspInit+0x168>)
 8005472:	4a32      	ldr	r2, [pc, #200]	@ (800553c <HAL_UART_MspInit+0x16c>)
 8005474:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005476:	4b30      	ldr	r3, [pc, #192]	@ (8005538 <HAL_UART_MspInit+0x168>)
 8005478:	221a      	movs	r2, #26
 800547a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800547c:	4b2e      	ldr	r3, [pc, #184]	@ (8005538 <HAL_UART_MspInit+0x168>)
 800547e:	2200      	movs	r2, #0
 8005480:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005482:	4b2d      	ldr	r3, [pc, #180]	@ (8005538 <HAL_UART_MspInit+0x168>)
 8005484:	2200      	movs	r2, #0
 8005486:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005488:	4b2b      	ldr	r3, [pc, #172]	@ (8005538 <HAL_UART_MspInit+0x168>)
 800548a:	2280      	movs	r2, #128	@ 0x80
 800548c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800548e:	4b2a      	ldr	r3, [pc, #168]	@ (8005538 <HAL_UART_MspInit+0x168>)
 8005490:	2200      	movs	r2, #0
 8005492:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005494:	4b28      	ldr	r3, [pc, #160]	@ (8005538 <HAL_UART_MspInit+0x168>)
 8005496:	2200      	movs	r2, #0
 8005498:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800549a:	4b27      	ldr	r3, [pc, #156]	@ (8005538 <HAL_UART_MspInit+0x168>)
 800549c:	2200      	movs	r2, #0
 800549e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80054a0:	4b25      	ldr	r3, [pc, #148]	@ (8005538 <HAL_UART_MspInit+0x168>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80054a6:	4824      	ldr	r0, [pc, #144]	@ (8005538 <HAL_UART_MspInit+0x168>)
 80054a8:	f002 f8c6 	bl	8007638 <HAL_DMA_Init>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80054b2:	f7ff f865 	bl	8004580 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a1f      	ldr	r2, [pc, #124]	@ (8005538 <HAL_UART_MspInit+0x168>)
 80054ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80054be:	4a1e      	ldr	r2, [pc, #120]	@ (8005538 <HAL_UART_MspInit+0x168>)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 80054c4:	4b1e      	ldr	r3, [pc, #120]	@ (8005540 <HAL_UART_MspInit+0x170>)
 80054c6:	4a1f      	ldr	r2, [pc, #124]	@ (8005544 <HAL_UART_MspInit+0x174>)
 80054c8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80054ca:	4b1d      	ldr	r3, [pc, #116]	@ (8005540 <HAL_UART_MspInit+0x170>)
 80054cc:	221b      	movs	r2, #27
 80054ce:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80054d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005540 <HAL_UART_MspInit+0x170>)
 80054d2:	2210      	movs	r2, #16
 80054d4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80054d6:	4b1a      	ldr	r3, [pc, #104]	@ (8005540 <HAL_UART_MspInit+0x170>)
 80054d8:	2200      	movs	r2, #0
 80054da:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80054dc:	4b18      	ldr	r3, [pc, #96]	@ (8005540 <HAL_UART_MspInit+0x170>)
 80054de:	2280      	movs	r2, #128	@ 0x80
 80054e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80054e2:	4b17      	ldr	r3, [pc, #92]	@ (8005540 <HAL_UART_MspInit+0x170>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80054e8:	4b15      	ldr	r3, [pc, #84]	@ (8005540 <HAL_UART_MspInit+0x170>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80054ee:	4b14      	ldr	r3, [pc, #80]	@ (8005540 <HAL_UART_MspInit+0x170>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80054f4:	4b12      	ldr	r3, [pc, #72]	@ (8005540 <HAL_UART_MspInit+0x170>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80054fa:	4811      	ldr	r0, [pc, #68]	@ (8005540 <HAL_UART_MspInit+0x170>)
 80054fc:	f002 f89c 	bl	8007638 <HAL_DMA_Init>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8005506:	f7ff f83b 	bl	8004580 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a0c      	ldr	r2, [pc, #48]	@ (8005540 <HAL_UART_MspInit+0x170>)
 800550e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005510:	4a0b      	ldr	r2, [pc, #44]	@ (8005540 <HAL_UART_MspInit+0x170>)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005516:	2200      	movs	r2, #0
 8005518:	2100      	movs	r1, #0
 800551a:	2026      	movs	r0, #38	@ 0x26
 800551c:	f002 f857 	bl	80075ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005520:	2026      	movs	r0, #38	@ 0x26
 8005522:	f002 f86e 	bl	8007602 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005526:	bf00      	nop
 8005528:	3778      	adds	r7, #120	@ 0x78
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	40004400 	.word	0x40004400
 8005534:	40021000 	.word	0x40021000
 8005538:	20000bd0 	.word	0x20000bd0
 800553c:	4002001c 	.word	0x4002001c
 8005540:	20000c30 	.word	0x20000c30
 8005544:	40020030 	.word	0x40020030

08005548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800554c:	bf00      	nop
 800554e:	e7fd      	b.n	800554c <NMI_Handler+0x4>

08005550 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005554:	bf00      	nop
 8005556:	e7fd      	b.n	8005554 <HardFault_Handler+0x4>

08005558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800555c:	bf00      	nop
 800555e:	e7fd      	b.n	800555c <MemManage_Handler+0x4>

08005560 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005564:	bf00      	nop
 8005566:	e7fd      	b.n	8005564 <BusFault_Handler+0x4>

08005568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800556c:	bf00      	nop
 800556e:	e7fd      	b.n	800556c <UsageFault_Handler+0x4>

08005570 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005574:	bf00      	nop
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800557e:	b480      	push	{r7}
 8005580:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005582:	bf00      	nop
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005590:	bf00      	nop
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800559e:	f000 f8fb 	bl	8005798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055a2:	bf00      	nop
 80055a4:	bd80      	pop	{r7, pc}
	...

080055a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80055ac:	4802      	ldr	r0, [pc, #8]	@ (80055b8 <DMA1_Channel1_IRQHandler+0x10>)
 80055ae:	f002 fa26 	bl	80079fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80055b2:	bf00      	nop
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	20000714 	.word	0x20000714

080055bc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80055c0:	4802      	ldr	r0, [pc, #8]	@ (80055cc <DMA1_Channel2_IRQHandler+0x10>)
 80055c2:	f002 fa1c 	bl	80079fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80055c6:	bf00      	nop
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	20000bd0 	.word	0x20000bd0

080055d0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80055d4:	4802      	ldr	r0, [pc, #8]	@ (80055e0 <DMA1_Channel3_IRQHandler+0x10>)
 80055d6:	f002 fa12 	bl	80079fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80055da:	bf00      	nop
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20000c30 	.word	0x20000c30

080055e4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80055e8:	4802      	ldr	r0, [pc, #8]	@ (80055f4 <DMA1_Channel4_IRQHandler+0x10>)
 80055ea:	f002 fa08 	bl	80079fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80055ee:	bf00      	nop
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	20000aa4 	.word	0x20000aa4

080055f8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80055fc:	4802      	ldr	r0, [pc, #8]	@ (8005608 <ADC1_2_IRQHandler+0x10>)
 80055fe:	f000 fdb9 	bl	8006174 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8005602:	bf00      	nop
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	200006a8 	.word	0x200006a8

0800560c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005610:	4803      	ldr	r0, [pc, #12]	@ (8005620 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8005612:	f004 fa41 	bl	8009a98 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8005616:	4803      	ldr	r0, [pc, #12]	@ (8005624 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005618:	f004 fa3e 	bl	8009a98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800561c:	bf00      	nop
 800561e:	bd80      	pop	{r7, pc}
 8005620:	20000774 	.word	0x20000774
 8005624:	200009d8 	.word	0x200009d8

08005628 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800562c:	4802      	ldr	r0, [pc, #8]	@ (8005638 <TIM3_IRQHandler+0x10>)
 800562e:	f004 fa33 	bl	8009a98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005632:	bf00      	nop
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	20000840 	.word	0x20000840

0800563c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005640:	4802      	ldr	r0, [pc, #8]	@ (800564c <TIM4_IRQHandler+0x10>)
 8005642:	f004 fa29 	bl	8009a98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005646:	bf00      	nop
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	2000090c 	.word	0x2000090c

08005650 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005654:	4802      	ldr	r0, [pc, #8]	@ (8005660 <USART2_IRQHandler+0x10>)
 8005656:	f005 ff73 	bl	800b540 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800565a:	bf00      	nop
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	20000b04 	.word	0x20000b04

08005664 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8005668:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800566c:	f002 fcc8 	bl	8008000 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_switch_Pin);
 8005670:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005674:	f002 fcc4 	bl	8008000 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005678:	bf00      	nop
 800567a:	bd80      	pop	{r7, pc}

0800567c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800567c:	b480      	push	{r7}
 800567e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005680:	4b06      	ldr	r3, [pc, #24]	@ (800569c <SystemInit+0x20>)
 8005682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005686:	4a05      	ldr	r2, [pc, #20]	@ (800569c <SystemInit+0x20>)
 8005688:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800568c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005690:	bf00      	nop
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	e000ed00 	.word	0xe000ed00

080056a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80056a0:	480d      	ldr	r0, [pc, #52]	@ (80056d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80056a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80056a4:	f7ff ffea 	bl	800567c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80056a8:	480c      	ldr	r0, [pc, #48]	@ (80056dc <LoopForever+0x6>)
  ldr r1, =_edata
 80056aa:	490d      	ldr	r1, [pc, #52]	@ (80056e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80056ac:	4a0d      	ldr	r2, [pc, #52]	@ (80056e4 <LoopForever+0xe>)
  movs r3, #0
 80056ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80056b0:	e002      	b.n	80056b8 <LoopCopyDataInit>

080056b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80056b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80056b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80056b6:	3304      	adds	r3, #4

080056b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80056b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80056ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80056bc:	d3f9      	bcc.n	80056b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80056be:	4a0a      	ldr	r2, [pc, #40]	@ (80056e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80056c0:	4c0a      	ldr	r4, [pc, #40]	@ (80056ec <LoopForever+0x16>)
  movs r3, #0
 80056c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80056c4:	e001      	b.n	80056ca <LoopFillZerobss>

080056c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80056c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80056c8:	3204      	adds	r2, #4

080056ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80056ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80056cc:	d3fb      	bcc.n	80056c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80056ce:	f007 fc0b 	bl	800cee8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80056d2:	f7fd fcb3 	bl	800303c <main>

080056d6 <LoopForever>:

LoopForever:
    b LoopForever
 80056d6:	e7fe      	b.n	80056d6 <LoopForever>
  ldr   r0, =_estack
 80056d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80056dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80056e0:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 80056e4:	0800dfc8 	.word	0x0800dfc8
  ldr r2, =_sbss
 80056e8:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 80056ec:	20001704 	.word	0x20001704

080056f0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80056f0:	e7fe      	b.n	80056f0 <ADC3_IRQHandler>

080056f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b082      	sub	sp, #8
 80056f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80056f8:	2300      	movs	r3, #0
 80056fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80056fc:	2003      	movs	r0, #3
 80056fe:	f001 ff5b 	bl	80075b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005702:	2000      	movs	r0, #0
 8005704:	f000 f80e 	bl	8005724 <HAL_InitTick>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d002      	beq.n	8005714 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	71fb      	strb	r3, [r7, #7]
 8005712:	e001      	b.n	8005718 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005714:	f7ff fc9e 	bl	8005054 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005718:	79fb      	ldrb	r3, [r7, #7]

}
 800571a:	4618      	mov	r0, r3
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
	...

08005724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800572c:	2300      	movs	r3, #0
 800572e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005730:	4b16      	ldr	r3, [pc, #88]	@ (800578c <HAL_InitTick+0x68>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d022      	beq.n	800577e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005738:	4b15      	ldr	r3, [pc, #84]	@ (8005790 <HAL_InitTick+0x6c>)
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	4b13      	ldr	r3, [pc, #76]	@ (800578c <HAL_InitTick+0x68>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005744:	fbb1 f3f3 	udiv	r3, r1, r3
 8005748:	fbb2 f3f3 	udiv	r3, r2, r3
 800574c:	4618      	mov	r0, r3
 800574e:	f001 ff66 	bl	800761e <HAL_SYSTICK_Config>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10f      	bne.n	8005778 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b0f      	cmp	r3, #15
 800575c:	d809      	bhi.n	8005772 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800575e:	2200      	movs	r2, #0
 8005760:	6879      	ldr	r1, [r7, #4]
 8005762:	f04f 30ff 	mov.w	r0, #4294967295
 8005766:	f001 ff32 	bl	80075ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800576a:	4a0a      	ldr	r2, [pc, #40]	@ (8005794 <HAL_InitTick+0x70>)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6013      	str	r3, [r2, #0]
 8005770:	e007      	b.n	8005782 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	73fb      	strb	r3, [r7, #15]
 8005776:	e004      	b.n	8005782 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	73fb      	strb	r3, [r7, #15]
 800577c:	e001      	b.n	8005782 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005782:	7bfb      	ldrb	r3, [r7, #15]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	20000090 	.word	0x20000090
 8005790:	20000088 	.word	0x20000088
 8005794:	2000008c 	.word	0x2000008c

08005798 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005798:	b480      	push	{r7}
 800579a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800579c:	4b05      	ldr	r3, [pc, #20]	@ (80057b4 <HAL_IncTick+0x1c>)
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	4b05      	ldr	r3, [pc, #20]	@ (80057b8 <HAL_IncTick+0x20>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4413      	add	r3, r2
 80057a6:	4a03      	ldr	r2, [pc, #12]	@ (80057b4 <HAL_IncTick+0x1c>)
 80057a8:	6013      	str	r3, [r2, #0]
}
 80057aa:	bf00      	nop
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	200015c8 	.word	0x200015c8
 80057b8:	20000090 	.word	0x20000090

080057bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80057bc:	b480      	push	{r7}
 80057be:	af00      	add	r7, sp, #0
  return uwTick;
 80057c0:	4b03      	ldr	r3, [pc, #12]	@ (80057d0 <HAL_GetTick+0x14>)
 80057c2:	681b      	ldr	r3, [r3, #0]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	200015c8 	.word	0x200015c8

080057d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	431a      	orrs	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	609a      	str	r2, [r3, #8]
}
 80057ee:	bf00      	nop
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
 8005802:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	431a      	orrs	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	609a      	str	r2, [r3, #8]
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005830:	4618      	mov	r0, r3
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800583c:	b480      	push	{r7}
 800583e:	b087      	sub	sp, #28
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
 8005848:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	3360      	adds	r3, #96	@ 0x60
 800584e:	461a      	mov	r2, r3
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	4b08      	ldr	r3, [pc, #32]	@ (8005880 <LL_ADC_SetOffset+0x44>)
 800585e:	4013      	ands	r3, r2
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	4313      	orrs	r3, r2
 800586c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005874:	bf00      	nop
 8005876:	371c      	adds	r7, #28
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr
 8005880:	03fff000 	.word	0x03fff000

08005884 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3360      	adds	r3, #96	@ 0x60
 8005892:	461a      	mov	r2, r3
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b087      	sub	sp, #28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3360      	adds	r3, #96	@ 0x60
 80058c0:	461a      	mov	r2, r3
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	431a      	orrs	r2, r3
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80058da:	bf00      	nop
 80058dc:	371c      	adds	r7, #28
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b087      	sub	sp, #28
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	60f8      	str	r0, [r7, #12]
 80058ee:	60b9      	str	r1, [r7, #8]
 80058f0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	3360      	adds	r3, #96	@ 0x60
 80058f6:	461a      	mov	r2, r3
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	431a      	orrs	r2, r3
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005910:	bf00      	nop
 8005912:	371c      	adds	r7, #28
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800591c:	b480      	push	{r7}
 800591e:	b087      	sub	sp, #28
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	3360      	adds	r3, #96	@ 0x60
 800592c:	461a      	mov	r2, r3
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	431a      	orrs	r2, r3
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005946:	bf00      	nop
 8005948:	371c      	adds	r7, #28
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005952:	b480      	push	{r7}
 8005954:	b083      	sub	sp, #12
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
 800595a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	431a      	orrs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	615a      	str	r2, [r3, #20]
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800598c:	2301      	movs	r3, #1
 800598e:	e000      	b.n	8005992 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800599e:	b480      	push	{r7}
 80059a0:	b087      	sub	sp, #28
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	3330      	adds	r3, #48	@ 0x30
 80059ae:	461a      	mov	r2, r3
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	0a1b      	lsrs	r3, r3, #8
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	f003 030c 	and.w	r3, r3, #12
 80059ba:	4413      	add	r3, r2
 80059bc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	f003 031f 	and.w	r3, r3, #31
 80059c8:	211f      	movs	r1, #31
 80059ca:	fa01 f303 	lsl.w	r3, r1, r3
 80059ce:	43db      	mvns	r3, r3
 80059d0:	401a      	ands	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	0e9b      	lsrs	r3, r3, #26
 80059d6:	f003 011f 	and.w	r1, r3, #31
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	f003 031f 	and.w	r3, r3, #31
 80059e0:	fa01 f303 	lsl.w	r3, r1, r3
 80059e4:	431a      	orrs	r2, r3
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80059ea:	bf00      	nop
 80059ec:	371c      	adds	r7, #28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b083      	sub	sp, #12
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a02:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e000      	b.n	8005a10 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b087      	sub	sp, #28
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	3314      	adds	r3, #20
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	0e5b      	lsrs	r3, r3, #25
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	4413      	add	r3, r2
 8005a3a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	0d1b      	lsrs	r3, r3, #20
 8005a44:	f003 031f 	and.w	r3, r3, #31
 8005a48:	2107      	movs	r1, #7
 8005a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4e:	43db      	mvns	r3, r3
 8005a50:	401a      	ands	r2, r3
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	0d1b      	lsrs	r3, r3, #20
 8005a56:	f003 031f 	and.w	r3, r3, #31
 8005a5a:	6879      	ldr	r1, [r7, #4]
 8005a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a60:	431a      	orrs	r2, r3
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005a66:	bf00      	nop
 8005a68:	371c      	adds	r7, #28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
	...

08005a74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a8c:	43db      	mvns	r3, r3
 8005a8e:	401a      	ands	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f003 0318 	and.w	r3, r3, #24
 8005a96:	4908      	ldr	r1, [pc, #32]	@ (8005ab8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005a98:	40d9      	lsrs	r1, r3
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	400b      	ands	r3, r1
 8005a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005aaa:	bf00      	nop
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	0007ffff 	.word	0x0007ffff

08005abc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f003 031f 	and.w	r3, r3, #31
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005b04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	6093      	str	r3, [r2, #8]
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b2c:	d101      	bne.n	8005b32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e000      	b.n	8005b34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005b50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005b54:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005b5c:	bf00      	nop
 8005b5e:	370c      	adds	r7, #12
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b7c:	d101      	bne.n	8005b82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e000      	b.n	8005b84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ba0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005ba4:	f043 0201 	orr.w	r2, r3, #1
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d101      	bne.n	8005bd0 <LL_ADC_IsEnabled+0x18>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e000      	b.n	8005bd2 <LL_ADC_IsEnabled+0x1a>
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b083      	sub	sp, #12
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005bee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005bf2:	f043 0204 	orr.w	r2, r3, #4
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	d101      	bne.n	8005c1e <LL_ADC_REG_IsConversionOngoing+0x18>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e000      	b.n	8005c20 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f003 0308 	and.w	r3, r3, #8
 8005c3c:	2b08      	cmp	r3, #8
 8005c3e:	d101      	bne.n	8005c44 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005c40:	2301      	movs	r3, #1
 8005c42:	e000      	b.n	8005c46 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
	...

08005c54 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005c54:	b590      	push	{r4, r7, lr}
 8005c56:	b089      	sub	sp, #36	@ 0x24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005c60:	2300      	movs	r3, #0
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e1a9      	b.n	8005fc2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d109      	bne.n	8005c90 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7ff fa0d 	bl	800509c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7ff ff3f 	bl	8005b18 <LL_ADC_IsDeepPowerDownEnabled>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d004      	beq.n	8005caa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7ff ff25 	bl	8005af4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7ff ff5a 	bl	8005b68 <LL_ADC_IsInternalRegulatorEnabled>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d115      	bne.n	8005ce6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7ff ff3e 	bl	8005b40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005cc4:	4b9c      	ldr	r3, [pc, #624]	@ (8005f38 <HAL_ADC_Init+0x2e4>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	099b      	lsrs	r3, r3, #6
 8005cca:	4a9c      	ldr	r2, [pc, #624]	@ (8005f3c <HAL_ADC_Init+0x2e8>)
 8005ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd0:	099b      	lsrs	r3, r3, #6
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	005b      	lsls	r3, r3, #1
 8005cd6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005cd8:	e002      	b.n	8005ce0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1f9      	bne.n	8005cda <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7ff ff3c 	bl	8005b68 <LL_ADC_IsInternalRegulatorEnabled>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10d      	bne.n	8005d12 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cfa:	f043 0210 	orr.w	r2, r3, #16
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d06:	f043 0201 	orr.w	r2, r3, #1
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7ff ff75 	bl	8005c06 <LL_ADC_REG_IsConversionOngoing>
 8005d1c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d22:	f003 0310 	and.w	r3, r3, #16
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f040 8142 	bne.w	8005fb0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f040 813e 	bne.w	8005fb0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d38:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005d3c:	f043 0202 	orr.w	r2, r3, #2
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7ff ff35 	bl	8005bb8 <LL_ADC_IsEnabled>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d141      	bne.n	8005dd8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d5c:	d004      	beq.n	8005d68 <HAL_ADC_Init+0x114>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a77      	ldr	r2, [pc, #476]	@ (8005f40 <HAL_ADC_Init+0x2ec>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d10f      	bne.n	8005d88 <HAL_ADC_Init+0x134>
 8005d68:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005d6c:	f7ff ff24 	bl	8005bb8 <LL_ADC_IsEnabled>
 8005d70:	4604      	mov	r4, r0
 8005d72:	4873      	ldr	r0, [pc, #460]	@ (8005f40 <HAL_ADC_Init+0x2ec>)
 8005d74:	f7ff ff20 	bl	8005bb8 <LL_ADC_IsEnabled>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	4323      	orrs	r3, r4
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	bf0c      	ite	eq
 8005d80:	2301      	moveq	r3, #1
 8005d82:	2300      	movne	r3, #0
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	e012      	b.n	8005dae <HAL_ADC_Init+0x15a>
 8005d88:	486e      	ldr	r0, [pc, #440]	@ (8005f44 <HAL_ADC_Init+0x2f0>)
 8005d8a:	f7ff ff15 	bl	8005bb8 <LL_ADC_IsEnabled>
 8005d8e:	4604      	mov	r4, r0
 8005d90:	486d      	ldr	r0, [pc, #436]	@ (8005f48 <HAL_ADC_Init+0x2f4>)
 8005d92:	f7ff ff11 	bl	8005bb8 <LL_ADC_IsEnabled>
 8005d96:	4603      	mov	r3, r0
 8005d98:	431c      	orrs	r4, r3
 8005d9a:	486c      	ldr	r0, [pc, #432]	@ (8005f4c <HAL_ADC_Init+0x2f8>)
 8005d9c:	f7ff ff0c 	bl	8005bb8 <LL_ADC_IsEnabled>
 8005da0:	4603      	mov	r3, r0
 8005da2:	4323      	orrs	r3, r4
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	bf0c      	ite	eq
 8005da8:	2301      	moveq	r3, #1
 8005daa:	2300      	movne	r3, #0
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d012      	beq.n	8005dd8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005dba:	d004      	beq.n	8005dc6 <HAL_ADC_Init+0x172>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a5f      	ldr	r2, [pc, #380]	@ (8005f40 <HAL_ADC_Init+0x2ec>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d101      	bne.n	8005dca <HAL_ADC_Init+0x176>
 8005dc6:	4a62      	ldr	r2, [pc, #392]	@ (8005f50 <HAL_ADC_Init+0x2fc>)
 8005dc8:	e000      	b.n	8005dcc <HAL_ADC_Init+0x178>
 8005dca:	4a62      	ldr	r2, [pc, #392]	@ (8005f54 <HAL_ADC_Init+0x300>)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	4610      	mov	r0, r2
 8005dd4:	f7ff fcfe 	bl	80057d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	7f5b      	ldrb	r3, [r3, #29]
 8005ddc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005de2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005de8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005dee:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005df6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d106      	bne.n	8005e14 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	045b      	lsls	r3, r3, #17
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d009      	beq.n	8005e30 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e20:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e28:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68da      	ldr	r2, [r3, #12]
 8005e36:	4b48      	ldr	r3, [pc, #288]	@ (8005f58 <HAL_ADC_Init+0x304>)
 8005e38:	4013      	ands	r3, r2
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	6812      	ldr	r2, [r2, #0]
 8005e3e:	69b9      	ldr	r1, [r7, #24]
 8005e40:	430b      	orrs	r3, r1
 8005e42:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	430a      	orrs	r2, r1
 8005e58:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7ff fee4 	bl	8005c2c <LL_ADC_INJ_IsConversionOngoing>
 8005e64:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d17f      	bne.n	8005f6c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d17c      	bne.n	8005f6c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005e76:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005e7e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005e80:	4313      	orrs	r3, r2
 8005e82:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e8e:	f023 0302 	bic.w	r3, r3, #2
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	6812      	ldr	r2, [r2, #0]
 8005e96:	69b9      	ldr	r1, [r7, #24]
 8005e98:	430b      	orrs	r3, r1
 8005e9a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d017      	beq.n	8005ed4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	691a      	ldr	r2, [r3, #16]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005eb2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005ebc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005ec0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	6911      	ldr	r1, [r2, #16]
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	6812      	ldr	r2, [r2, #0]
 8005ecc:	430b      	orrs	r3, r1
 8005ece:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005ed2:	e013      	b.n	8005efc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	691a      	ldr	r2, [r3, #16]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005ee2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	6812      	ldr	r2, [r2, #0]
 8005ef0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005ef4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005ef8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d12a      	bne.n	8005f5c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005f10:	f023 0304 	bic.w	r3, r3, #4
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005f1c:	4311      	orrs	r1, r2
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005f22:	4311      	orrs	r1, r2
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f042 0201 	orr.w	r2, r2, #1
 8005f34:	611a      	str	r2, [r3, #16]
 8005f36:	e019      	b.n	8005f6c <HAL_ADC_Init+0x318>
 8005f38:	20000088 	.word	0x20000088
 8005f3c:	053e2d63 	.word	0x053e2d63
 8005f40:	50000100 	.word	0x50000100
 8005f44:	50000400 	.word	0x50000400
 8005f48:	50000500 	.word	0x50000500
 8005f4c:	50000600 	.word	0x50000600
 8005f50:	50000300 	.word	0x50000300
 8005f54:	50000700 	.word	0x50000700
 8005f58:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	691a      	ldr	r2, [r3, #16]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f022 0201 	bic.w	r2, r2, #1
 8005f6a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d10c      	bne.n	8005f8e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f7a:	f023 010f 	bic.w	r1, r3, #15
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	1e5a      	subs	r2, r3, #1
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f8c:	e007      	b.n	8005f9e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 020f 	bic.w	r2, r2, #15
 8005f9c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fa2:	f023 0303 	bic.w	r3, r3, #3
 8005fa6:	f043 0201 	orr.w	r2, r3, #1
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005fae:	e007      	b.n	8005fc0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fb4:	f043 0210 	orr.w	r2, r3, #16
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005fc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3724      	adds	r7, #36	@ 0x24
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd90      	pop	{r4, r7, pc}
 8005fca:	bf00      	nop

08005fcc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fe0:	d004      	beq.n	8005fec <HAL_ADC_Start_DMA+0x20>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a5a      	ldr	r2, [pc, #360]	@ (8006150 <HAL_ADC_Start_DMA+0x184>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d101      	bne.n	8005ff0 <HAL_ADC_Start_DMA+0x24>
 8005fec:	4b59      	ldr	r3, [pc, #356]	@ (8006154 <HAL_ADC_Start_DMA+0x188>)
 8005fee:	e000      	b.n	8005ff2 <HAL_ADC_Start_DMA+0x26>
 8005ff0:	4b59      	ldr	r3, [pc, #356]	@ (8006158 <HAL_ADC_Start_DMA+0x18c>)
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7ff fd62 	bl	8005abc <LL_ADC_GetMultimode>
 8005ff8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7ff fe01 	bl	8005c06 <LL_ADC_REG_IsConversionOngoing>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	f040 809b 	bne.w	8006142 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006012:	2b01      	cmp	r3, #1
 8006014:	d101      	bne.n	800601a <HAL_ADC_Start_DMA+0x4e>
 8006016:	2302      	movs	r3, #2
 8006018:	e096      	b.n	8006148 <HAL_ADC_Start_DMA+0x17c>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a4d      	ldr	r2, [pc, #308]	@ (800615c <HAL_ADC_Start_DMA+0x190>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d008      	beq.n	800603e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d005      	beq.n	800603e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	2b05      	cmp	r3, #5
 8006036:	d002      	beq.n	800603e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	2b09      	cmp	r3, #9
 800603c:	d17a      	bne.n	8006134 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f000 ff60 	bl	8006f04 <ADC_Enable>
 8006044:	4603      	mov	r3, r0
 8006046:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006048:	7dfb      	ldrb	r3, [r7, #23]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d16d      	bne.n	800612a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006052:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006056:	f023 0301 	bic.w	r3, r3, #1
 800605a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a3a      	ldr	r2, [pc, #232]	@ (8006150 <HAL_ADC_Start_DMA+0x184>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d009      	beq.n	8006080 <HAL_ADC_Start_DMA+0xb4>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a3b      	ldr	r2, [pc, #236]	@ (8006160 <HAL_ADC_Start_DMA+0x194>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d002      	beq.n	800607c <HAL_ADC_Start_DMA+0xb0>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	e003      	b.n	8006084 <HAL_ADC_Start_DMA+0xb8>
 800607c:	4b39      	ldr	r3, [pc, #228]	@ (8006164 <HAL_ADC_Start_DMA+0x198>)
 800607e:	e001      	b.n	8006084 <HAL_ADC_Start_DMA+0xb8>
 8006080:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	6812      	ldr	r2, [r2, #0]
 8006088:	4293      	cmp	r3, r2
 800608a:	d002      	beq.n	8006092 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d105      	bne.n	800609e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006096:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d006      	beq.n	80060b8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060ae:	f023 0206 	bic.w	r2, r3, #6
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	661a      	str	r2, [r3, #96]	@ 0x60
 80060b6:	e002      	b.n	80060be <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060c2:	4a29      	ldr	r2, [pc, #164]	@ (8006168 <HAL_ADC_Start_DMA+0x19c>)
 80060c4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ca:	4a28      	ldr	r2, [pc, #160]	@ (800616c <HAL_ADC_Start_DMA+0x1a0>)
 80060cc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060d2:	4a27      	ldr	r2, [pc, #156]	@ (8006170 <HAL_ADC_Start_DMA+0x1a4>)
 80060d4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	221c      	movs	r2, #28
 80060dc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f042 0210 	orr.w	r2, r2, #16
 80060f4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68da      	ldr	r2, [r3, #12]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f042 0201 	orr.w	r2, r2, #1
 8006104:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	3340      	adds	r3, #64	@ 0x40
 8006110:	4619      	mov	r1, r3
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f001 fb37 	bl	8007788 <HAL_DMA_Start_IT>
 800611a:	4603      	mov	r3, r0
 800611c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4618      	mov	r0, r3
 8006124:	f7ff fd5b 	bl	8005bde <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006128:	e00d      	b.n	8006146 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8006132:	e008      	b.n	8006146 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8006140:	e001      	b.n	8006146 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006142:	2302      	movs	r3, #2
 8006144:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006146:	7dfb      	ldrb	r3, [r7, #23]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3718      	adds	r7, #24
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	50000100 	.word	0x50000100
 8006154:	50000300 	.word	0x50000300
 8006158:	50000700 	.word	0x50000700
 800615c:	50000600 	.word	0x50000600
 8006160:	50000500 	.word	0x50000500
 8006164:	50000400 	.word	0x50000400
 8006168:	08007031 	.word	0x08007031
 800616c:	08007109 	.word	0x08007109
 8006170:	08007125 	.word	0x08007125

08006174 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08a      	sub	sp, #40	@ 0x28
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800617c:	2300      	movs	r3, #0
 800617e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006198:	d004      	beq.n	80061a4 <HAL_ADC_IRQHandler+0x30>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a8e      	ldr	r2, [pc, #568]	@ (80063d8 <HAL_ADC_IRQHandler+0x264>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d101      	bne.n	80061a8 <HAL_ADC_IRQHandler+0x34>
 80061a4:	4b8d      	ldr	r3, [pc, #564]	@ (80063dc <HAL_ADC_IRQHandler+0x268>)
 80061a6:	e000      	b.n	80061aa <HAL_ADC_IRQHandler+0x36>
 80061a8:	4b8d      	ldr	r3, [pc, #564]	@ (80063e0 <HAL_ADC_IRQHandler+0x26c>)
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7ff fc86 	bl	8005abc <LL_ADC_GetMultimode>
 80061b0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	f003 0302 	and.w	r3, r3, #2
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d017      	beq.n	80061ec <HAL_ADC_IRQHandler+0x78>
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	f003 0302 	and.w	r3, r3, #2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d012      	beq.n	80061ec <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061ca:	f003 0310 	and.w	r3, r3, #16
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d105      	bne.n	80061de <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061d6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f001 f808 	bl	80071f4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2202      	movs	r2, #2
 80061ea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	f003 0304 	and.w	r3, r3, #4
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d004      	beq.n	8006200 <HAL_ADC_IRQHandler+0x8c>
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	f003 0304 	and.w	r3, r3, #4
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10b      	bne.n	8006218 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 8094 	beq.w	8006334 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	f003 0308 	and.w	r3, r3, #8
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 808e 	beq.w	8006334 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800621c:	f003 0310 	and.w	r3, r3, #16
 8006220:	2b00      	cmp	r3, #0
 8006222:	d105      	bne.n	8006230 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006228:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4618      	mov	r0, r3
 8006236:	f7ff fb9f 	bl	8005978 <LL_ADC_REG_IsTriggerSourceSWStart>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d072      	beq.n	8006326 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a64      	ldr	r2, [pc, #400]	@ (80063d8 <HAL_ADC_IRQHandler+0x264>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d009      	beq.n	800625e <HAL_ADC_IRQHandler+0xea>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a65      	ldr	r2, [pc, #404]	@ (80063e4 <HAL_ADC_IRQHandler+0x270>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d002      	beq.n	800625a <HAL_ADC_IRQHandler+0xe6>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	e003      	b.n	8006262 <HAL_ADC_IRQHandler+0xee>
 800625a:	4b63      	ldr	r3, [pc, #396]	@ (80063e8 <HAL_ADC_IRQHandler+0x274>)
 800625c:	e001      	b.n	8006262 <HAL_ADC_IRQHandler+0xee>
 800625e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6812      	ldr	r2, [r2, #0]
 8006266:	4293      	cmp	r3, r2
 8006268:	d008      	beq.n	800627c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d005      	beq.n	800627c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	2b05      	cmp	r3, #5
 8006274:	d002      	beq.n	800627c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	2b09      	cmp	r3, #9
 800627a:	d104      	bne.n	8006286 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	623b      	str	r3, [r7, #32]
 8006284:	e014      	b.n	80062b0 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a53      	ldr	r2, [pc, #332]	@ (80063d8 <HAL_ADC_IRQHandler+0x264>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d009      	beq.n	80062a4 <HAL_ADC_IRQHandler+0x130>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a53      	ldr	r2, [pc, #332]	@ (80063e4 <HAL_ADC_IRQHandler+0x270>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d002      	beq.n	80062a0 <HAL_ADC_IRQHandler+0x12c>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	e003      	b.n	80062a8 <HAL_ADC_IRQHandler+0x134>
 80062a0:	4b51      	ldr	r3, [pc, #324]	@ (80063e8 <HAL_ADC_IRQHandler+0x274>)
 80062a2:	e001      	b.n	80062a8 <HAL_ADC_IRQHandler+0x134>
 80062a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80062a8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d135      	bne.n	8006326 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0308 	and.w	r3, r3, #8
 80062c4:	2b08      	cmp	r3, #8
 80062c6:	d12e      	bne.n	8006326 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7ff fc9a 	bl	8005c06 <LL_ADC_REG_IsConversionOngoing>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d11a      	bne.n	800630e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 020c 	bic.w	r2, r2, #12
 80062e6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d112      	bne.n	8006326 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006304:	f043 0201 	orr.w	r2, r3, #1
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800630c:	e00b      	b.n	8006326 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006312:	f043 0210 	orr.w	r2, r3, #16
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800631e:	f043 0201 	orr.w	r2, r3, #1
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f984 	bl	8006634 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	220c      	movs	r2, #12
 8006332:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	f003 0320 	and.w	r3, r3, #32
 800633a:	2b00      	cmp	r3, #0
 800633c:	d004      	beq.n	8006348 <HAL_ADC_IRQHandler+0x1d4>
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	f003 0320 	and.w	r3, r3, #32
 8006344:	2b00      	cmp	r3, #0
 8006346:	d10b      	bne.n	8006360 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 80b3 	beq.w	80064ba <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800635a:	2b00      	cmp	r3, #0
 800635c:	f000 80ad 	beq.w	80064ba <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006364:	f003 0310 	and.w	r3, r3, #16
 8006368:	2b00      	cmp	r3, #0
 800636a:	d105      	bne.n	8006378 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006370:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4618      	mov	r0, r3
 800637e:	f7ff fb3a 	bl	80059f6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8006382:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4618      	mov	r0, r3
 800638a:	f7ff faf5 	bl	8005978 <LL_ADC_REG_IsTriggerSourceSWStart>
 800638e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a10      	ldr	r2, [pc, #64]	@ (80063d8 <HAL_ADC_IRQHandler+0x264>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d009      	beq.n	80063ae <HAL_ADC_IRQHandler+0x23a>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a11      	ldr	r2, [pc, #68]	@ (80063e4 <HAL_ADC_IRQHandler+0x270>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d002      	beq.n	80063aa <HAL_ADC_IRQHandler+0x236>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	e003      	b.n	80063b2 <HAL_ADC_IRQHandler+0x23e>
 80063aa:	4b0f      	ldr	r3, [pc, #60]	@ (80063e8 <HAL_ADC_IRQHandler+0x274>)
 80063ac:	e001      	b.n	80063b2 <HAL_ADC_IRQHandler+0x23e>
 80063ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	6812      	ldr	r2, [r2, #0]
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d008      	beq.n	80063cc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d005      	beq.n	80063cc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2b06      	cmp	r3, #6
 80063c4:	d002      	beq.n	80063cc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	2b07      	cmp	r3, #7
 80063ca:	d10f      	bne.n	80063ec <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	623b      	str	r3, [r7, #32]
 80063d4:	e01f      	b.n	8006416 <HAL_ADC_IRQHandler+0x2a2>
 80063d6:	bf00      	nop
 80063d8:	50000100 	.word	0x50000100
 80063dc:	50000300 	.word	0x50000300
 80063e0:	50000700 	.word	0x50000700
 80063e4:	50000500 	.word	0x50000500
 80063e8:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a8b      	ldr	r2, [pc, #556]	@ (8006620 <HAL_ADC_IRQHandler+0x4ac>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d009      	beq.n	800640a <HAL_ADC_IRQHandler+0x296>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a8a      	ldr	r2, [pc, #552]	@ (8006624 <HAL_ADC_IRQHandler+0x4b0>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d002      	beq.n	8006406 <HAL_ADC_IRQHandler+0x292>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	e003      	b.n	800640e <HAL_ADC_IRQHandler+0x29a>
 8006406:	4b88      	ldr	r3, [pc, #544]	@ (8006628 <HAL_ADC_IRQHandler+0x4b4>)
 8006408:	e001      	b.n	800640e <HAL_ADC_IRQHandler+0x29a>
 800640a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800640e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d047      	beq.n	80064ac <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d007      	beq.n	8006436 <HAL_ADC_IRQHandler+0x2c2>
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d03f      	beq.n	80064ac <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800642c:	6a3b      	ldr	r3, [r7, #32]
 800642e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006432:	2b00      	cmp	r3, #0
 8006434:	d13a      	bne.n	80064ac <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006440:	2b40      	cmp	r3, #64	@ 0x40
 8006442:	d133      	bne.n	80064ac <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006444:	6a3b      	ldr	r3, [r7, #32]
 8006446:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d12e      	bne.n	80064ac <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4618      	mov	r0, r3
 8006454:	f7ff fbea 	bl	8005c2c <LL_ADC_INJ_IsConversionOngoing>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d11a      	bne.n	8006494 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800646c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006472:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800647e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006482:	2b00      	cmp	r3, #0
 8006484:	d112      	bne.n	80064ac <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800648a:	f043 0201 	orr.w	r2, r3, #1
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006492:	e00b      	b.n	80064ac <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006498:	f043 0210 	orr.w	r2, r3, #16
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064a4:	f043 0201 	orr.w	r2, r3, #1
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fe79 	bl	80071a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2260      	movs	r2, #96	@ 0x60
 80064b8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d011      	beq.n	80064e8 <HAL_ADC_IRQHandler+0x374>
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00c      	beq.n	80064e8 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064d2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f8be 	bl	800665c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2280      	movs	r2, #128	@ 0x80
 80064e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d012      	beq.n	8006518 <HAL_ADC_IRQHandler+0x3a4>
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00d      	beq.n	8006518 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006500:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 fe5f 	bl	80071cc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006516:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800651e:	2b00      	cmp	r3, #0
 8006520:	d012      	beq.n	8006548 <HAL_ADC_IRQHandler+0x3d4>
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00d      	beq.n	8006548 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006530:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fe51 	bl	80071e0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006546:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	f003 0310 	and.w	r3, r3, #16
 800654e:	2b00      	cmp	r3, #0
 8006550:	d043      	beq.n	80065da <HAL_ADC_IRQHandler+0x466>
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	f003 0310 	and.w	r3, r3, #16
 8006558:	2b00      	cmp	r3, #0
 800655a:	d03e      	beq.n	80065da <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006560:	2b00      	cmp	r3, #0
 8006562:	d102      	bne.n	800656a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8006564:	2301      	movs	r3, #1
 8006566:	627b      	str	r3, [r7, #36]	@ 0x24
 8006568:	e021      	b.n	80065ae <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d015      	beq.n	800659c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006578:	d004      	beq.n	8006584 <HAL_ADC_IRQHandler+0x410>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a28      	ldr	r2, [pc, #160]	@ (8006620 <HAL_ADC_IRQHandler+0x4ac>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d101      	bne.n	8006588 <HAL_ADC_IRQHandler+0x414>
 8006584:	4b29      	ldr	r3, [pc, #164]	@ (800662c <HAL_ADC_IRQHandler+0x4b8>)
 8006586:	e000      	b.n	800658a <HAL_ADC_IRQHandler+0x416>
 8006588:	4b29      	ldr	r3, [pc, #164]	@ (8006630 <HAL_ADC_IRQHandler+0x4bc>)
 800658a:	4618      	mov	r0, r3
 800658c:	f7ff faa4 	bl	8005ad8 <LL_ADC_GetMultiDMATransfer>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00b      	beq.n	80065ae <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8006596:	2301      	movs	r3, #1
 8006598:	627b      	str	r3, [r7, #36]	@ 0x24
 800659a:	e008      	b.n	80065ae <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80065aa:	2301      	movs	r3, #1
 80065ac:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80065ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d10e      	bne.n	80065d2 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065b8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065c4:	f043 0202 	orr.w	r2, r3, #2
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f84f 	bl	8006670 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2210      	movs	r2, #16
 80065d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d018      	beq.n	8006616 <HAL_ADC_IRQHandler+0x4a2>
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d013      	beq.n	8006616 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065f2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065fe:	f043 0208 	orr.w	r2, r3, #8
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800660e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 fdd1 	bl	80071b8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8006616:	bf00      	nop
 8006618:	3728      	adds	r7, #40	@ 0x28
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	50000100 	.word	0x50000100
 8006624:	50000500 	.word	0x50000500
 8006628:	50000400 	.word	0x50000400
 800662c:	50000300 	.word	0x50000300
 8006630:	50000700 	.word	0x50000700

08006634 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b0b6      	sub	sp, #216	@ 0xd8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800668e:	2300      	movs	r3, #0
 8006690:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006694:	2300      	movs	r3, #0
 8006696:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d102      	bne.n	80066a8 <HAL_ADC_ConfigChannel+0x24>
 80066a2:	2302      	movs	r3, #2
 80066a4:	f000 bc13 	b.w	8006ece <HAL_ADC_ConfigChannel+0x84a>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7ff faa6 	bl	8005c06 <LL_ADC_REG_IsConversionOngoing>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f040 83f3 	bne.w	8006ea8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6818      	ldr	r0, [r3, #0]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	6859      	ldr	r1, [r3, #4]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	461a      	mov	r2, r3
 80066d0:	f7ff f965 	bl	800599e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4618      	mov	r0, r3
 80066da:	f7ff fa94 	bl	8005c06 <LL_ADC_REG_IsConversionOngoing>
 80066de:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7ff faa0 	bl	8005c2c <LL_ADC_INJ_IsConversionOngoing>
 80066ec:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80066f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f040 81d9 	bne.w	8006aac <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80066fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80066fe:	2b00      	cmp	r3, #0
 8006700:	f040 81d4 	bne.w	8006aac <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800670c:	d10f      	bne.n	800672e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6818      	ldr	r0, [r3, #0]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2200      	movs	r2, #0
 8006718:	4619      	mov	r1, r3
 800671a:	f7ff f97f 	bl	8005a1c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006726:	4618      	mov	r0, r3
 8006728:	f7ff f913 	bl	8005952 <LL_ADC_SetSamplingTimeCommonConfig>
 800672c:	e00e      	b.n	800674c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6818      	ldr	r0, [r3, #0]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	6819      	ldr	r1, [r3, #0]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	461a      	mov	r2, r3
 800673c:	f7ff f96e 	bl	8005a1c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2100      	movs	r1, #0
 8006746:	4618      	mov	r0, r3
 8006748:	f7ff f903 	bl	8005952 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	695a      	ldr	r2, [r3, #20]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	08db      	lsrs	r3, r3, #3
 8006758:	f003 0303 	and.w	r3, r3, #3
 800675c:	005b      	lsls	r3, r3, #1
 800675e:	fa02 f303 	lsl.w	r3, r2, r3
 8006762:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	2b04      	cmp	r3, #4
 800676c:	d022      	beq.n	80067b4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6818      	ldr	r0, [r3, #0]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	6919      	ldr	r1, [r3, #16]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800677e:	f7ff f85d 	bl	800583c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6818      	ldr	r0, [r3, #0]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	6919      	ldr	r1, [r3, #16]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	461a      	mov	r2, r3
 8006790:	f7ff f8a9 	bl	80058e6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6818      	ldr	r0, [r3, #0]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d102      	bne.n	80067aa <HAL_ADC_ConfigChannel+0x126>
 80067a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80067a8:	e000      	b.n	80067ac <HAL_ADC_ConfigChannel+0x128>
 80067aa:	2300      	movs	r3, #0
 80067ac:	461a      	mov	r2, r3
 80067ae:	f7ff f8b5 	bl	800591c <LL_ADC_SetOffsetSaturation>
 80067b2:	e17b      	b.n	8006aac <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2100      	movs	r1, #0
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7ff f862 	bl	8005884 <LL_ADC_GetOffsetChannel>
 80067c0:	4603      	mov	r3, r0
 80067c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10a      	bne.n	80067e0 <HAL_ADC_ConfigChannel+0x15c>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2100      	movs	r1, #0
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7ff f857 	bl	8005884 <LL_ADC_GetOffsetChannel>
 80067d6:	4603      	mov	r3, r0
 80067d8:	0e9b      	lsrs	r3, r3, #26
 80067da:	f003 021f 	and.w	r2, r3, #31
 80067de:	e01e      	b.n	800681e <HAL_ADC_ConfigChannel+0x19a>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2100      	movs	r1, #0
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7ff f84c 	bl	8005884 <LL_ADC_GetOffsetChannel>
 80067ec:	4603      	mov	r3, r0
 80067ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80067f6:	fa93 f3a3 	rbit	r3, r3
 80067fa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80067fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006802:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006806:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800680e:	2320      	movs	r3, #32
 8006810:	e004      	b.n	800681c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8006812:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006816:	fab3 f383 	clz	r3, r3
 800681a:	b2db      	uxtb	r3, r3
 800681c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006826:	2b00      	cmp	r3, #0
 8006828:	d105      	bne.n	8006836 <HAL_ADC_ConfigChannel+0x1b2>
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	0e9b      	lsrs	r3, r3, #26
 8006830:	f003 031f 	and.w	r3, r3, #31
 8006834:	e018      	b.n	8006868 <HAL_ADC_ConfigChannel+0x1e4>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800683e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006842:	fa93 f3a3 	rbit	r3, r3
 8006846:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800684a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800684e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8006852:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800685a:	2320      	movs	r3, #32
 800685c:	e004      	b.n	8006868 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800685e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006862:	fab3 f383 	clz	r3, r3
 8006866:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006868:	429a      	cmp	r2, r3
 800686a:	d106      	bne.n	800687a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2200      	movs	r2, #0
 8006872:	2100      	movs	r1, #0
 8006874:	4618      	mov	r0, r3
 8006876:	f7ff f81b 	bl	80058b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2101      	movs	r1, #1
 8006880:	4618      	mov	r0, r3
 8006882:	f7fe ffff 	bl	8005884 <LL_ADC_GetOffsetChannel>
 8006886:	4603      	mov	r3, r0
 8006888:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10a      	bne.n	80068a6 <HAL_ADC_ConfigChannel+0x222>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2101      	movs	r1, #1
 8006896:	4618      	mov	r0, r3
 8006898:	f7fe fff4 	bl	8005884 <LL_ADC_GetOffsetChannel>
 800689c:	4603      	mov	r3, r0
 800689e:	0e9b      	lsrs	r3, r3, #26
 80068a0:	f003 021f 	and.w	r2, r3, #31
 80068a4:	e01e      	b.n	80068e4 <HAL_ADC_ConfigChannel+0x260>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2101      	movs	r1, #1
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7fe ffe9 	bl	8005884 <LL_ADC_GetOffsetChannel>
 80068b2:	4603      	mov	r3, r0
 80068b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80068bc:	fa93 f3a3 	rbit	r3, r3
 80068c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80068c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80068c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80068cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d101      	bne.n	80068d8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80068d4:	2320      	movs	r3, #32
 80068d6:	e004      	b.n	80068e2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80068d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80068dc:	fab3 f383 	clz	r3, r3
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d105      	bne.n	80068fc <HAL_ADC_ConfigChannel+0x278>
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	0e9b      	lsrs	r3, r3, #26
 80068f6:	f003 031f 	and.w	r3, r3, #31
 80068fa:	e018      	b.n	800692e <HAL_ADC_ConfigChannel+0x2aa>
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006904:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006908:	fa93 f3a3 	rbit	r3, r3
 800690c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8006910:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006914:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8006918:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8006920:	2320      	movs	r3, #32
 8006922:	e004      	b.n	800692e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8006924:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006928:	fab3 f383 	clz	r3, r3
 800692c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800692e:	429a      	cmp	r2, r3
 8006930:	d106      	bne.n	8006940 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2200      	movs	r2, #0
 8006938:	2101      	movs	r1, #1
 800693a:	4618      	mov	r0, r3
 800693c:	f7fe ffb8 	bl	80058b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2102      	movs	r1, #2
 8006946:	4618      	mov	r0, r3
 8006948:	f7fe ff9c 	bl	8005884 <LL_ADC_GetOffsetChannel>
 800694c:	4603      	mov	r3, r0
 800694e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10a      	bne.n	800696c <HAL_ADC_ConfigChannel+0x2e8>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2102      	movs	r1, #2
 800695c:	4618      	mov	r0, r3
 800695e:	f7fe ff91 	bl	8005884 <LL_ADC_GetOffsetChannel>
 8006962:	4603      	mov	r3, r0
 8006964:	0e9b      	lsrs	r3, r3, #26
 8006966:	f003 021f 	and.w	r2, r3, #31
 800696a:	e01e      	b.n	80069aa <HAL_ADC_ConfigChannel+0x326>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2102      	movs	r1, #2
 8006972:	4618      	mov	r0, r3
 8006974:	f7fe ff86 	bl	8005884 <LL_ADC_GetOffsetChannel>
 8006978:	4603      	mov	r3, r0
 800697a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800697e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006982:	fa93 f3a3 	rbit	r3, r3
 8006986:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800698a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800698e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8006992:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006996:	2b00      	cmp	r3, #0
 8006998:	d101      	bne.n	800699e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800699a:	2320      	movs	r3, #32
 800699c:	e004      	b.n	80069a8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800699e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80069a2:	fab3 f383 	clz	r3, r3
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d105      	bne.n	80069c2 <HAL_ADC_ConfigChannel+0x33e>
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	0e9b      	lsrs	r3, r3, #26
 80069bc:	f003 031f 	and.w	r3, r3, #31
 80069c0:	e016      	b.n	80069f0 <HAL_ADC_ConfigChannel+0x36c>
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80069ce:	fa93 f3a3 	rbit	r3, r3
 80069d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80069d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80069d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80069da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80069e2:	2320      	movs	r3, #32
 80069e4:	e004      	b.n	80069f0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80069e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80069ea:	fab3 f383 	clz	r3, r3
 80069ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d106      	bne.n	8006a02 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2200      	movs	r2, #0
 80069fa:	2102      	movs	r1, #2
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7fe ff57 	bl	80058b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2103      	movs	r1, #3
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fe ff3b 	bl	8005884 <LL_ADC_GetOffsetChannel>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10a      	bne.n	8006a2e <HAL_ADC_ConfigChannel+0x3aa>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2103      	movs	r1, #3
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fe ff30 	bl	8005884 <LL_ADC_GetOffsetChannel>
 8006a24:	4603      	mov	r3, r0
 8006a26:	0e9b      	lsrs	r3, r3, #26
 8006a28:	f003 021f 	and.w	r2, r3, #31
 8006a2c:	e017      	b.n	8006a5e <HAL_ADC_ConfigChannel+0x3da>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2103      	movs	r1, #3
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7fe ff25 	bl	8005884 <LL_ADC_GetOffsetChannel>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a40:	fa93 f3a3 	rbit	r3, r3
 8006a44:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8006a46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a48:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8006a4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d101      	bne.n	8006a54 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006a50:	2320      	movs	r3, #32
 8006a52:	e003      	b.n	8006a5c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006a54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a56:	fab3 f383 	clz	r3, r3
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d105      	bne.n	8006a76 <HAL_ADC_ConfigChannel+0x3f2>
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	0e9b      	lsrs	r3, r3, #26
 8006a70:	f003 031f 	and.w	r3, r3, #31
 8006a74:	e011      	b.n	8006a9a <HAL_ADC_ConfigChannel+0x416>
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a7e:	fa93 f3a3 	rbit	r3, r3
 8006a82:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8006a84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a86:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8006a88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d101      	bne.n	8006a92 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8006a8e:	2320      	movs	r3, #32
 8006a90:	e003      	b.n	8006a9a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8006a92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a94:	fab3 f383 	clz	r3, r3
 8006a98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d106      	bne.n	8006aac <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	2103      	movs	r1, #3
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fe ff02 	bl	80058b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7ff f881 	bl	8005bb8 <LL_ADC_IsEnabled>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f040 813d 	bne.w	8006d38 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6818      	ldr	r0, [r3, #0]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	6819      	ldr	r1, [r3, #0]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	461a      	mov	r2, r3
 8006acc:	f7fe ffd2 	bl	8005a74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	4aa2      	ldr	r2, [pc, #648]	@ (8006d60 <HAL_ADC_ConfigChannel+0x6dc>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	f040 812e 	bne.w	8006d38 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10b      	bne.n	8006b04 <HAL_ADC_ConfigChannel+0x480>
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	0e9b      	lsrs	r3, r3, #26
 8006af2:	3301      	adds	r3, #1
 8006af4:	f003 031f 	and.w	r3, r3, #31
 8006af8:	2b09      	cmp	r3, #9
 8006afa:	bf94      	ite	ls
 8006afc:	2301      	movls	r3, #1
 8006afe:	2300      	movhi	r3, #0
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	e019      	b.n	8006b38 <HAL_ADC_ConfigChannel+0x4b4>
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b0c:	fa93 f3a3 	rbit	r3, r3
 8006b10:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8006b12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b14:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8006b16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d101      	bne.n	8006b20 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8006b1c:	2320      	movs	r3, #32
 8006b1e:	e003      	b.n	8006b28 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8006b20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b22:	fab3 f383 	clz	r3, r3
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	3301      	adds	r3, #1
 8006b2a:	f003 031f 	and.w	r3, r3, #31
 8006b2e:	2b09      	cmp	r3, #9
 8006b30:	bf94      	ite	ls
 8006b32:	2301      	movls	r3, #1
 8006b34:	2300      	movhi	r3, #0
 8006b36:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d079      	beq.n	8006c30 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d107      	bne.n	8006b58 <HAL_ADC_ConfigChannel+0x4d4>
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	0e9b      	lsrs	r3, r3, #26
 8006b4e:	3301      	adds	r3, #1
 8006b50:	069b      	lsls	r3, r3, #26
 8006b52:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006b56:	e015      	b.n	8006b84 <HAL_ADC_ConfigChannel+0x500>
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b60:	fa93 f3a3 	rbit	r3, r3
 8006b64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006b66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b68:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8006b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006b70:	2320      	movs	r3, #32
 8006b72:	e003      	b.n	8006b7c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006b74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b76:	fab3 f383 	clz	r3, r3
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	069b      	lsls	r3, r3, #26
 8006b80:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d109      	bne.n	8006ba4 <HAL_ADC_ConfigChannel+0x520>
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	0e9b      	lsrs	r3, r3, #26
 8006b96:	3301      	adds	r3, #1
 8006b98:	f003 031f 	and.w	r3, r3, #31
 8006b9c:	2101      	movs	r1, #1
 8006b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006ba2:	e017      	b.n	8006bd4 <HAL_ADC_ConfigChannel+0x550>
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006baa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bac:	fa93 f3a3 	rbit	r3, r3
 8006bb0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8006bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8006bb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d101      	bne.n	8006bc0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8006bbc:	2320      	movs	r3, #32
 8006bbe:	e003      	b.n	8006bc8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006bc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bc2:	fab3 f383 	clz	r3, r3
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	3301      	adds	r3, #1
 8006bca:	f003 031f 	and.w	r3, r3, #31
 8006bce:	2101      	movs	r1, #1
 8006bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd4:	ea42 0103 	orr.w	r1, r2, r3
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10a      	bne.n	8006bfa <HAL_ADC_ConfigChannel+0x576>
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	0e9b      	lsrs	r3, r3, #26
 8006bea:	3301      	adds	r3, #1
 8006bec:	f003 021f 	and.w	r2, r3, #31
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	005b      	lsls	r3, r3, #1
 8006bf4:	4413      	add	r3, r2
 8006bf6:	051b      	lsls	r3, r3, #20
 8006bf8:	e018      	b.n	8006c2c <HAL_ADC_ConfigChannel+0x5a8>
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c02:	fa93 f3a3 	rbit	r3, r3
 8006c06:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8006c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8006c12:	2320      	movs	r3, #32
 8006c14:	e003      	b.n	8006c1e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8006c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c18:	fab3 f383 	clz	r3, r3
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	3301      	adds	r3, #1
 8006c20:	f003 021f 	and.w	r2, r3, #31
 8006c24:	4613      	mov	r3, r2
 8006c26:	005b      	lsls	r3, r3, #1
 8006c28:	4413      	add	r3, r2
 8006c2a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c2c:	430b      	orrs	r3, r1
 8006c2e:	e07e      	b.n	8006d2e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d107      	bne.n	8006c4c <HAL_ADC_ConfigChannel+0x5c8>
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	0e9b      	lsrs	r3, r3, #26
 8006c42:	3301      	adds	r3, #1
 8006c44:	069b      	lsls	r3, r3, #26
 8006c46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006c4a:	e015      	b.n	8006c78 <HAL_ADC_ConfigChannel+0x5f4>
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c54:	fa93 f3a3 	rbit	r3, r3
 8006c58:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8006c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c5c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8006c64:	2320      	movs	r3, #32
 8006c66:	e003      	b.n	8006c70 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6a:	fab3 f383 	clz	r3, r3
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	3301      	adds	r3, #1
 8006c72:	069b      	lsls	r3, r3, #26
 8006c74:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d109      	bne.n	8006c98 <HAL_ADC_ConfigChannel+0x614>
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	0e9b      	lsrs	r3, r3, #26
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	f003 031f 	and.w	r3, r3, #31
 8006c90:	2101      	movs	r1, #1
 8006c92:	fa01 f303 	lsl.w	r3, r1, r3
 8006c96:	e017      	b.n	8006cc8 <HAL_ADC_ConfigChannel+0x644>
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c9e:	6a3b      	ldr	r3, [r7, #32]
 8006ca0:	fa93 f3a3 	rbit	r3, r3
 8006ca4:	61fb      	str	r3, [r7, #28]
  return result;
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d101      	bne.n	8006cb4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8006cb0:	2320      	movs	r3, #32
 8006cb2:	e003      	b.n	8006cbc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb6:	fab3 f383 	clz	r3, r3
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	f003 031f 	and.w	r3, r3, #31
 8006cc2:	2101      	movs	r1, #1
 8006cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc8:	ea42 0103 	orr.w	r1, r2, r3
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10d      	bne.n	8006cf4 <HAL_ADC_ConfigChannel+0x670>
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	0e9b      	lsrs	r3, r3, #26
 8006cde:	3301      	adds	r3, #1
 8006ce0:	f003 021f 	and.w	r2, r3, #31
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	005b      	lsls	r3, r3, #1
 8006ce8:	4413      	add	r3, r2
 8006cea:	3b1e      	subs	r3, #30
 8006cec:	051b      	lsls	r3, r3, #20
 8006cee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006cf2:	e01b      	b.n	8006d2c <HAL_ADC_ConfigChannel+0x6a8>
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	fa93 f3a3 	rbit	r3, r3
 8006d00:	613b      	str	r3, [r7, #16]
  return result;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d101      	bne.n	8006d10 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8006d0c:	2320      	movs	r3, #32
 8006d0e:	e003      	b.n	8006d18 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	fab3 f383 	clz	r3, r3
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	3301      	adds	r3, #1
 8006d1a:	f003 021f 	and.w	r2, r3, #31
 8006d1e:	4613      	mov	r3, r2
 8006d20:	005b      	lsls	r3, r3, #1
 8006d22:	4413      	add	r3, r2
 8006d24:	3b1e      	subs	r3, #30
 8006d26:	051b      	lsls	r3, r3, #20
 8006d28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006d2c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006d32:	4619      	mov	r1, r3
 8006d34:	f7fe fe72 	bl	8005a1c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	4b09      	ldr	r3, [pc, #36]	@ (8006d64 <HAL_ADC_ConfigChannel+0x6e0>)
 8006d3e:	4013      	ands	r3, r2
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 80be 	beq.w	8006ec2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d4e:	d004      	beq.n	8006d5a <HAL_ADC_ConfigChannel+0x6d6>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a04      	ldr	r2, [pc, #16]	@ (8006d68 <HAL_ADC_ConfigChannel+0x6e4>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d10a      	bne.n	8006d70 <HAL_ADC_ConfigChannel+0x6ec>
 8006d5a:	4b04      	ldr	r3, [pc, #16]	@ (8006d6c <HAL_ADC_ConfigChannel+0x6e8>)
 8006d5c:	e009      	b.n	8006d72 <HAL_ADC_ConfigChannel+0x6ee>
 8006d5e:	bf00      	nop
 8006d60:	407f0000 	.word	0x407f0000
 8006d64:	80080000 	.word	0x80080000
 8006d68:	50000100 	.word	0x50000100
 8006d6c:	50000300 	.word	0x50000300
 8006d70:	4b59      	ldr	r3, [pc, #356]	@ (8006ed8 <HAL_ADC_ConfigChannel+0x854>)
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fe fd54 	bl	8005820 <LL_ADC_GetCommonPathInternalCh>
 8006d78:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a56      	ldr	r2, [pc, #344]	@ (8006edc <HAL_ADC_ConfigChannel+0x858>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d004      	beq.n	8006d90 <HAL_ADC_ConfigChannel+0x70c>
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a55      	ldr	r2, [pc, #340]	@ (8006ee0 <HAL_ADC_ConfigChannel+0x85c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d13a      	bne.n	8006e06 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006d90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006d94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d134      	bne.n	8006e06 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006da4:	d005      	beq.n	8006db2 <HAL_ADC_ConfigChannel+0x72e>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a4e      	ldr	r2, [pc, #312]	@ (8006ee4 <HAL_ADC_ConfigChannel+0x860>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	f040 8085 	bne.w	8006ebc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006dba:	d004      	beq.n	8006dc6 <HAL_ADC_ConfigChannel+0x742>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a49      	ldr	r2, [pc, #292]	@ (8006ee8 <HAL_ADC_ConfigChannel+0x864>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d101      	bne.n	8006dca <HAL_ADC_ConfigChannel+0x746>
 8006dc6:	4a49      	ldr	r2, [pc, #292]	@ (8006eec <HAL_ADC_ConfigChannel+0x868>)
 8006dc8:	e000      	b.n	8006dcc <HAL_ADC_ConfigChannel+0x748>
 8006dca:	4a43      	ldr	r2, [pc, #268]	@ (8006ed8 <HAL_ADC_ConfigChannel+0x854>)
 8006dcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006dd0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	4610      	mov	r0, r2
 8006dd8:	f7fe fd0f 	bl	80057fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006ddc:	4b44      	ldr	r3, [pc, #272]	@ (8006ef0 <HAL_ADC_ConfigChannel+0x86c>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	099b      	lsrs	r3, r3, #6
 8006de2:	4a44      	ldr	r2, [pc, #272]	@ (8006ef4 <HAL_ADC_ConfigChannel+0x870>)
 8006de4:	fba2 2303 	umull	r2, r3, r2, r3
 8006de8:	099b      	lsrs	r3, r3, #6
 8006dea:	1c5a      	adds	r2, r3, #1
 8006dec:	4613      	mov	r3, r2
 8006dee:	005b      	lsls	r3, r3, #1
 8006df0:	4413      	add	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006df6:	e002      	b.n	8006dfe <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1f9      	bne.n	8006df8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006e04:	e05a      	b.n	8006ebc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a3b      	ldr	r2, [pc, #236]	@ (8006ef8 <HAL_ADC_ConfigChannel+0x874>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d125      	bne.n	8006e5c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006e10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006e14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d11f      	bne.n	8006e5c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a31      	ldr	r2, [pc, #196]	@ (8006ee8 <HAL_ADC_ConfigChannel+0x864>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d104      	bne.n	8006e30 <HAL_ADC_ConfigChannel+0x7ac>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a34      	ldr	r2, [pc, #208]	@ (8006efc <HAL_ADC_ConfigChannel+0x878>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d047      	beq.n	8006ec0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e38:	d004      	beq.n	8006e44 <HAL_ADC_ConfigChannel+0x7c0>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a2a      	ldr	r2, [pc, #168]	@ (8006ee8 <HAL_ADC_ConfigChannel+0x864>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d101      	bne.n	8006e48 <HAL_ADC_ConfigChannel+0x7c4>
 8006e44:	4a29      	ldr	r2, [pc, #164]	@ (8006eec <HAL_ADC_ConfigChannel+0x868>)
 8006e46:	e000      	b.n	8006e4a <HAL_ADC_ConfigChannel+0x7c6>
 8006e48:	4a23      	ldr	r2, [pc, #140]	@ (8006ed8 <HAL_ADC_ConfigChannel+0x854>)
 8006e4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006e4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e52:	4619      	mov	r1, r3
 8006e54:	4610      	mov	r0, r2
 8006e56:	f7fe fcd0 	bl	80057fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006e5a:	e031      	b.n	8006ec0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a27      	ldr	r2, [pc, #156]	@ (8006f00 <HAL_ADC_ConfigChannel+0x87c>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d12d      	bne.n	8006ec2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006e66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d127      	bne.n	8006ec2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a1c      	ldr	r2, [pc, #112]	@ (8006ee8 <HAL_ADC_ConfigChannel+0x864>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d022      	beq.n	8006ec2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e84:	d004      	beq.n	8006e90 <HAL_ADC_ConfigChannel+0x80c>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a17      	ldr	r2, [pc, #92]	@ (8006ee8 <HAL_ADC_ConfigChannel+0x864>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d101      	bne.n	8006e94 <HAL_ADC_ConfigChannel+0x810>
 8006e90:	4a16      	ldr	r2, [pc, #88]	@ (8006eec <HAL_ADC_ConfigChannel+0x868>)
 8006e92:	e000      	b.n	8006e96 <HAL_ADC_ConfigChannel+0x812>
 8006e94:	4a10      	ldr	r2, [pc, #64]	@ (8006ed8 <HAL_ADC_ConfigChannel+0x854>)
 8006e96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006e9a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	4610      	mov	r0, r2
 8006ea2:	f7fe fcaa 	bl	80057fa <LL_ADC_SetCommonPathInternalCh>
 8006ea6:	e00c      	b.n	8006ec2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eac:	f043 0220 	orr.w	r2, r3, #32
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8006eba:	e002      	b.n	8006ec2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006ebc:	bf00      	nop
 8006ebe:	e000      	b.n	8006ec2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006ec0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006eca:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	37d8      	adds	r7, #216	@ 0xd8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	50000700 	.word	0x50000700
 8006edc:	c3210000 	.word	0xc3210000
 8006ee0:	90c00010 	.word	0x90c00010
 8006ee4:	50000600 	.word	0x50000600
 8006ee8:	50000100 	.word	0x50000100
 8006eec:	50000300 	.word	0x50000300
 8006ef0:	20000088 	.word	0x20000088
 8006ef4:	053e2d63 	.word	0x053e2d63
 8006ef8:	c7520000 	.word	0xc7520000
 8006efc:	50000500 	.word	0x50000500
 8006f00:	cb840000 	.word	0xcb840000

08006f04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7fe fe4f 	bl	8005bb8 <LL_ADC_IsEnabled>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d176      	bne.n	800700e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689a      	ldr	r2, [r3, #8]
 8006f26:	4b3c      	ldr	r3, [pc, #240]	@ (8007018 <ADC_Enable+0x114>)
 8006f28:	4013      	ands	r3, r2
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00d      	beq.n	8006f4a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f32:	f043 0210 	orr.w	r2, r3, #16
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f3e:	f043 0201 	orr.w	r2, r3, #1
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e062      	b.n	8007010 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7fe fe1e 	bl	8005b90 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f5c:	d004      	beq.n	8006f68 <ADC_Enable+0x64>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a2e      	ldr	r2, [pc, #184]	@ (800701c <ADC_Enable+0x118>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d101      	bne.n	8006f6c <ADC_Enable+0x68>
 8006f68:	4b2d      	ldr	r3, [pc, #180]	@ (8007020 <ADC_Enable+0x11c>)
 8006f6a:	e000      	b.n	8006f6e <ADC_Enable+0x6a>
 8006f6c:	4b2d      	ldr	r3, [pc, #180]	@ (8007024 <ADC_Enable+0x120>)
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7fe fc56 	bl	8005820 <LL_ADC_GetCommonPathInternalCh>
 8006f74:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006f76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d013      	beq.n	8006fa6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006f7e:	4b2a      	ldr	r3, [pc, #168]	@ (8007028 <ADC_Enable+0x124>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	099b      	lsrs	r3, r3, #6
 8006f84:	4a29      	ldr	r2, [pc, #164]	@ (800702c <ADC_Enable+0x128>)
 8006f86:	fba2 2303 	umull	r2, r3, r2, r3
 8006f8a:	099b      	lsrs	r3, r3, #6
 8006f8c:	1c5a      	adds	r2, r3, #1
 8006f8e:	4613      	mov	r3, r2
 8006f90:	005b      	lsls	r3, r3, #1
 8006f92:	4413      	add	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006f98:	e002      	b.n	8006fa0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1f9      	bne.n	8006f9a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006fa6:	f7fe fc09 	bl	80057bc <HAL_GetTick>
 8006faa:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006fac:	e028      	b.n	8007000 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7fe fe00 	bl	8005bb8 <LL_ADC_IsEnabled>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d104      	bne.n	8006fc8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7fe fde4 	bl	8005b90 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006fc8:	f7fe fbf8 	bl	80057bc <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d914      	bls.n	8007000 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d00d      	beq.n	8007000 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fe8:	f043 0210 	orr.w	r2, r3, #16
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ff4:	f043 0201 	orr.w	r2, r3, #1
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e007      	b.n	8007010 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	2b01      	cmp	r3, #1
 800700c:	d1cf      	bne.n	8006fae <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	8000003f 	.word	0x8000003f
 800701c:	50000100 	.word	0x50000100
 8007020:	50000300 	.word	0x50000300
 8007024:	50000700 	.word	0x50000700
 8007028:	20000088 	.word	0x20000088
 800702c:	053e2d63 	.word	0x053e2d63

08007030 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007042:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007046:	2b00      	cmp	r3, #0
 8007048:	d14b      	bne.n	80070e2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800704e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0308 	and.w	r3, r3, #8
 8007060:	2b00      	cmp	r3, #0
 8007062:	d021      	beq.n	80070a8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4618      	mov	r0, r3
 800706a:	f7fe fc85 	bl	8005978 <LL_ADC_REG_IsTriggerSourceSWStart>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d032      	beq.n	80070da <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d12b      	bne.n	80070da <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007086:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007092:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d11f      	bne.n	80070da <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800709e:	f043 0201 	orr.w	r2, r3, #1
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80070a6:	e018      	b.n	80070da <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	f003 0302 	and.w	r3, r3, #2
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d111      	bne.n	80070da <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070ba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d105      	bne.n	80070da <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070d2:	f043 0201 	orr.w	r2, r3, #1
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f7ff faaa 	bl	8006634 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80070e0:	e00e      	b.n	8007100 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070e6:	f003 0310 	and.w	r3, r3, #16
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d003      	beq.n	80070f6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f7ff fabe 	bl	8006670 <HAL_ADC_ErrorCallback>
}
 80070f4:	e004      	b.n	8007100 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	4798      	blx	r3
}
 8007100:	bf00      	nop
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007114:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f7ff fa96 	bl	8006648 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800711c:	bf00      	nop
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007130:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007136:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007142:	f043 0204 	orr.w	r2, r3, #4
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f7ff fa90 	bl	8006670 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007150:	bf00      	nop
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <LL_ADC_IsEnabled>:
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	f003 0301 	and.w	r3, r3, #1
 8007168:	2b01      	cmp	r3, #1
 800716a:	d101      	bne.n	8007170 <LL_ADC_IsEnabled+0x18>
 800716c:	2301      	movs	r3, #1
 800716e:	e000      	b.n	8007172 <LL_ADC_IsEnabled+0x1a>
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <LL_ADC_REG_IsConversionOngoing>:
{
 800717e:	b480      	push	{r7}
 8007180:	b083      	sub	sp, #12
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f003 0304 	and.w	r3, r3, #4
 800718e:	2b04      	cmp	r3, #4
 8007190:	d101      	bne.n	8007196 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007192:	2301      	movs	r3, #1
 8007194:	e000      	b.n	8007198 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8007208:	b590      	push	{r4, r7, lr}
 800720a:	b0a1      	sub	sp, #132	@ 0x84
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007212:	2300      	movs	r3, #0
 8007214:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800721e:	2b01      	cmp	r3, #1
 8007220:	d101      	bne.n	8007226 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007222:	2302      	movs	r3, #2
 8007224:	e0e7      	b.n	80073f6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800722e:	2300      	movs	r3, #0
 8007230:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8007232:	2300      	movs	r3, #0
 8007234:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800723e:	d102      	bne.n	8007246 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007240:	4b6f      	ldr	r3, [pc, #444]	@ (8007400 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007242:	60bb      	str	r3, [r7, #8]
 8007244:	e009      	b.n	800725a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a6e      	ldr	r2, [pc, #440]	@ (8007404 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d102      	bne.n	8007256 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8007250:	4b6d      	ldr	r3, [pc, #436]	@ (8007408 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007252:	60bb      	str	r3, [r7, #8]
 8007254:	e001      	b.n	800725a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007256:	2300      	movs	r3, #0
 8007258:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10b      	bne.n	8007278 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007264:	f043 0220 	orr.w	r2, r3, #32
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e0be      	b.n	80073f6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	4618      	mov	r0, r3
 800727c:	f7ff ff7f 	bl	800717e <LL_ADC_REG_IsConversionOngoing>
 8007280:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4618      	mov	r0, r3
 8007288:	f7ff ff79 	bl	800717e <LL_ADC_REG_IsConversionOngoing>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	f040 80a0 	bne.w	80073d4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8007294:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007296:	2b00      	cmp	r3, #0
 8007298:	f040 809c 	bne.w	80073d4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072a4:	d004      	beq.n	80072b0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a55      	ldr	r2, [pc, #340]	@ (8007400 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d101      	bne.n	80072b4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80072b0:	4b56      	ldr	r3, [pc, #344]	@ (800740c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80072b2:	e000      	b.n	80072b6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80072b4:	4b56      	ldr	r3, [pc, #344]	@ (8007410 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80072b6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d04b      	beq.n	8007358 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80072c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	6859      	ldr	r1, [r3, #4]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80072d2:	035b      	lsls	r3, r3, #13
 80072d4:	430b      	orrs	r3, r1
 80072d6:	431a      	orrs	r2, r3
 80072d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80072da:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072e4:	d004      	beq.n	80072f0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a45      	ldr	r2, [pc, #276]	@ (8007400 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d10f      	bne.n	8007310 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80072f0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80072f4:	f7ff ff30 	bl	8007158 <LL_ADC_IsEnabled>
 80072f8:	4604      	mov	r4, r0
 80072fa:	4841      	ldr	r0, [pc, #260]	@ (8007400 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80072fc:	f7ff ff2c 	bl	8007158 <LL_ADC_IsEnabled>
 8007300:	4603      	mov	r3, r0
 8007302:	4323      	orrs	r3, r4
 8007304:	2b00      	cmp	r3, #0
 8007306:	bf0c      	ite	eq
 8007308:	2301      	moveq	r3, #1
 800730a:	2300      	movne	r3, #0
 800730c:	b2db      	uxtb	r3, r3
 800730e:	e012      	b.n	8007336 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8007310:	483c      	ldr	r0, [pc, #240]	@ (8007404 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007312:	f7ff ff21 	bl	8007158 <LL_ADC_IsEnabled>
 8007316:	4604      	mov	r4, r0
 8007318:	483b      	ldr	r0, [pc, #236]	@ (8007408 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800731a:	f7ff ff1d 	bl	8007158 <LL_ADC_IsEnabled>
 800731e:	4603      	mov	r3, r0
 8007320:	431c      	orrs	r4, r3
 8007322:	483c      	ldr	r0, [pc, #240]	@ (8007414 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007324:	f7ff ff18 	bl	8007158 <LL_ADC_IsEnabled>
 8007328:	4603      	mov	r3, r0
 800732a:	4323      	orrs	r3, r4
 800732c:	2b00      	cmp	r3, #0
 800732e:	bf0c      	ite	eq
 8007330:	2301      	moveq	r3, #1
 8007332:	2300      	movne	r3, #0
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b00      	cmp	r3, #0
 8007338:	d056      	beq.n	80073e8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800733a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007342:	f023 030f 	bic.w	r3, r3, #15
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	6811      	ldr	r1, [r2, #0]
 800734a:	683a      	ldr	r2, [r7, #0]
 800734c:	6892      	ldr	r2, [r2, #8]
 800734e:	430a      	orrs	r2, r1
 8007350:	431a      	orrs	r2, r3
 8007352:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007354:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007356:	e047      	b.n	80073e8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007358:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007360:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007362:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800736c:	d004      	beq.n	8007378 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a23      	ldr	r2, [pc, #140]	@ (8007400 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d10f      	bne.n	8007398 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8007378:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800737c:	f7ff feec 	bl	8007158 <LL_ADC_IsEnabled>
 8007380:	4604      	mov	r4, r0
 8007382:	481f      	ldr	r0, [pc, #124]	@ (8007400 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007384:	f7ff fee8 	bl	8007158 <LL_ADC_IsEnabled>
 8007388:	4603      	mov	r3, r0
 800738a:	4323      	orrs	r3, r4
 800738c:	2b00      	cmp	r3, #0
 800738e:	bf0c      	ite	eq
 8007390:	2301      	moveq	r3, #1
 8007392:	2300      	movne	r3, #0
 8007394:	b2db      	uxtb	r3, r3
 8007396:	e012      	b.n	80073be <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8007398:	481a      	ldr	r0, [pc, #104]	@ (8007404 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800739a:	f7ff fedd 	bl	8007158 <LL_ADC_IsEnabled>
 800739e:	4604      	mov	r4, r0
 80073a0:	4819      	ldr	r0, [pc, #100]	@ (8007408 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80073a2:	f7ff fed9 	bl	8007158 <LL_ADC_IsEnabled>
 80073a6:	4603      	mov	r3, r0
 80073a8:	431c      	orrs	r4, r3
 80073aa:	481a      	ldr	r0, [pc, #104]	@ (8007414 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80073ac:	f7ff fed4 	bl	8007158 <LL_ADC_IsEnabled>
 80073b0:	4603      	mov	r3, r0
 80073b2:	4323      	orrs	r3, r4
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	bf0c      	ite	eq
 80073b8:	2301      	moveq	r3, #1
 80073ba:	2300      	movne	r3, #0
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d012      	beq.n	80073e8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80073c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80073ca:	f023 030f 	bic.w	r3, r3, #15
 80073ce:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80073d0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80073d2:	e009      	b.n	80073e8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073d8:	f043 0220 	orr.w	r2, r3, #32
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80073e6:	e000      	b.n	80073ea <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80073e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80073f2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3784      	adds	r7, #132	@ 0x84
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd90      	pop	{r4, r7, pc}
 80073fe:	bf00      	nop
 8007400:	50000100 	.word	0x50000100
 8007404:	50000400 	.word	0x50000400
 8007408:	50000500 	.word	0x50000500
 800740c:	50000300 	.word	0x50000300
 8007410:	50000700 	.word	0x50000700
 8007414:	50000600 	.word	0x50000600

08007418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f003 0307 	and.w	r3, r3, #7
 8007426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007428:	4b0c      	ldr	r3, [pc, #48]	@ (800745c <__NVIC_SetPriorityGrouping+0x44>)
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007434:	4013      	ands	r3, r2
 8007436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007440:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007444:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800744a:	4a04      	ldr	r2, [pc, #16]	@ (800745c <__NVIC_SetPriorityGrouping+0x44>)
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	60d3      	str	r3, [r2, #12]
}
 8007450:	bf00      	nop
 8007452:	3714      	adds	r7, #20
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr
 800745c:	e000ed00 	.word	0xe000ed00

08007460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007460:	b480      	push	{r7}
 8007462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007464:	4b04      	ldr	r3, [pc, #16]	@ (8007478 <__NVIC_GetPriorityGrouping+0x18>)
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	0a1b      	lsrs	r3, r3, #8
 800746a:	f003 0307 	and.w	r3, r3, #7
}
 800746e:	4618      	mov	r0, r3
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr
 8007478:	e000ed00 	.word	0xe000ed00

0800747c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	4603      	mov	r3, r0
 8007484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800748a:	2b00      	cmp	r3, #0
 800748c:	db0b      	blt.n	80074a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800748e:	79fb      	ldrb	r3, [r7, #7]
 8007490:	f003 021f 	and.w	r2, r3, #31
 8007494:	4907      	ldr	r1, [pc, #28]	@ (80074b4 <__NVIC_EnableIRQ+0x38>)
 8007496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800749a:	095b      	lsrs	r3, r3, #5
 800749c:	2001      	movs	r0, #1
 800749e:	fa00 f202 	lsl.w	r2, r0, r2
 80074a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80074a6:	bf00      	nop
 80074a8:	370c      	adds	r7, #12
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	e000e100 	.word	0xe000e100

080074b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	4603      	mov	r3, r0
 80074c0:	6039      	str	r1, [r7, #0]
 80074c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	db0a      	blt.n	80074e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	b2da      	uxtb	r2, r3
 80074d0:	490c      	ldr	r1, [pc, #48]	@ (8007504 <__NVIC_SetPriority+0x4c>)
 80074d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074d6:	0112      	lsls	r2, r2, #4
 80074d8:	b2d2      	uxtb	r2, r2
 80074da:	440b      	add	r3, r1
 80074dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80074e0:	e00a      	b.n	80074f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	4908      	ldr	r1, [pc, #32]	@ (8007508 <__NVIC_SetPriority+0x50>)
 80074e8:	79fb      	ldrb	r3, [r7, #7]
 80074ea:	f003 030f 	and.w	r3, r3, #15
 80074ee:	3b04      	subs	r3, #4
 80074f0:	0112      	lsls	r2, r2, #4
 80074f2:	b2d2      	uxtb	r2, r2
 80074f4:	440b      	add	r3, r1
 80074f6:	761a      	strb	r2, [r3, #24]
}
 80074f8:	bf00      	nop
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr
 8007504:	e000e100 	.word	0xe000e100
 8007508:	e000ed00 	.word	0xe000ed00

0800750c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800750c:	b480      	push	{r7}
 800750e:	b089      	sub	sp, #36	@ 0x24
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f003 0307 	and.w	r3, r3, #7
 800751e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	f1c3 0307 	rsb	r3, r3, #7
 8007526:	2b04      	cmp	r3, #4
 8007528:	bf28      	it	cs
 800752a:	2304      	movcs	r3, #4
 800752c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	3304      	adds	r3, #4
 8007532:	2b06      	cmp	r3, #6
 8007534:	d902      	bls.n	800753c <NVIC_EncodePriority+0x30>
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	3b03      	subs	r3, #3
 800753a:	e000      	b.n	800753e <NVIC_EncodePriority+0x32>
 800753c:	2300      	movs	r3, #0
 800753e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007540:	f04f 32ff 	mov.w	r2, #4294967295
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	fa02 f303 	lsl.w	r3, r2, r3
 800754a:	43da      	mvns	r2, r3
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	401a      	ands	r2, r3
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007554:	f04f 31ff 	mov.w	r1, #4294967295
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	fa01 f303 	lsl.w	r3, r1, r3
 800755e:	43d9      	mvns	r1, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007564:	4313      	orrs	r3, r2
         );
}
 8007566:	4618      	mov	r0, r3
 8007568:	3724      	adds	r7, #36	@ 0x24
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
	...

08007574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	3b01      	subs	r3, #1
 8007580:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007584:	d301      	bcc.n	800758a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007586:	2301      	movs	r3, #1
 8007588:	e00f      	b.n	80075aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800758a:	4a0a      	ldr	r2, [pc, #40]	@ (80075b4 <SysTick_Config+0x40>)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	3b01      	subs	r3, #1
 8007590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007592:	210f      	movs	r1, #15
 8007594:	f04f 30ff 	mov.w	r0, #4294967295
 8007598:	f7ff ff8e 	bl	80074b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800759c:	4b05      	ldr	r3, [pc, #20]	@ (80075b4 <SysTick_Config+0x40>)
 800759e:	2200      	movs	r2, #0
 80075a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80075a2:	4b04      	ldr	r3, [pc, #16]	@ (80075b4 <SysTick_Config+0x40>)
 80075a4:	2207      	movs	r2, #7
 80075a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	e000e010 	.word	0xe000e010

080075b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7ff ff29 	bl	8007418 <__NVIC_SetPriorityGrouping>
}
 80075c6:	bf00      	nop
 80075c8:	3708      	adds	r7, #8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b086      	sub	sp, #24
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	4603      	mov	r3, r0
 80075d6:	60b9      	str	r1, [r7, #8]
 80075d8:	607a      	str	r2, [r7, #4]
 80075da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80075dc:	f7ff ff40 	bl	8007460 <__NVIC_GetPriorityGrouping>
 80075e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	68b9      	ldr	r1, [r7, #8]
 80075e6:	6978      	ldr	r0, [r7, #20]
 80075e8:	f7ff ff90 	bl	800750c <NVIC_EncodePriority>
 80075ec:	4602      	mov	r2, r0
 80075ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075f2:	4611      	mov	r1, r2
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7ff ff5f 	bl	80074b8 <__NVIC_SetPriority>
}
 80075fa:	bf00      	nop
 80075fc:	3718      	adds	r7, #24
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b082      	sub	sp, #8
 8007606:	af00      	add	r7, sp, #0
 8007608:	4603      	mov	r3, r0
 800760a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800760c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007610:	4618      	mov	r0, r3
 8007612:	f7ff ff33 	bl	800747c <__NVIC_EnableIRQ>
}
 8007616:	bf00      	nop
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b082      	sub	sp, #8
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f7ff ffa4 	bl	8007574 <SysTick_Config>
 800762c:	4603      	mov	r3, r0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
	...

08007638 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d101      	bne.n	800764a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e08d      	b.n	8007766 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	461a      	mov	r2, r3
 8007650:	4b47      	ldr	r3, [pc, #284]	@ (8007770 <HAL_DMA_Init+0x138>)
 8007652:	429a      	cmp	r2, r3
 8007654:	d80f      	bhi.n	8007676 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	461a      	mov	r2, r3
 800765c:	4b45      	ldr	r3, [pc, #276]	@ (8007774 <HAL_DMA_Init+0x13c>)
 800765e:	4413      	add	r3, r2
 8007660:	4a45      	ldr	r2, [pc, #276]	@ (8007778 <HAL_DMA_Init+0x140>)
 8007662:	fba2 2303 	umull	r2, r3, r2, r3
 8007666:	091b      	lsrs	r3, r3, #4
 8007668:	009a      	lsls	r2, r3, #2
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a42      	ldr	r2, [pc, #264]	@ (800777c <HAL_DMA_Init+0x144>)
 8007672:	641a      	str	r2, [r3, #64]	@ 0x40
 8007674:	e00e      	b.n	8007694 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	461a      	mov	r2, r3
 800767c:	4b40      	ldr	r3, [pc, #256]	@ (8007780 <HAL_DMA_Init+0x148>)
 800767e:	4413      	add	r3, r2
 8007680:	4a3d      	ldr	r2, [pc, #244]	@ (8007778 <HAL_DMA_Init+0x140>)
 8007682:	fba2 2303 	umull	r2, r3, r2, r3
 8007686:	091b      	lsrs	r3, r3, #4
 8007688:	009a      	lsls	r2, r3, #2
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a3c      	ldr	r2, [pc, #240]	@ (8007784 <HAL_DMA_Init+0x14c>)
 8007692:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2202      	movs	r2, #2
 8007698:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80076aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80076b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	699b      	ldr	r3, [r3, #24]
 80076ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	4313      	orrs	r3, r2
 80076dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fa76 	bl	8007bd8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076f4:	d102      	bne.n	80076fc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685a      	ldr	r2, [r3, #4]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007704:	b2d2      	uxtb	r2, r2
 8007706:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007710:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d010      	beq.n	800773c <HAL_DMA_Init+0x104>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	2b04      	cmp	r3, #4
 8007720:	d80c      	bhi.n	800773c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fa96 	bl	8007c54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800772c:	2200      	movs	r2, #0
 800772e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007738:	605a      	str	r2, [r3, #4]
 800773a:	e008      	b.n	800774e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	40020407 	.word	0x40020407
 8007774:	bffdfff8 	.word	0xbffdfff8
 8007778:	cccccccd 	.word	0xcccccccd
 800777c:	40020000 	.word	0x40020000
 8007780:	bffdfbf8 	.word	0xbffdfbf8
 8007784:	40020400 	.word	0x40020400

08007788 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
 8007794:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d101      	bne.n	80077a8 <HAL_DMA_Start_IT+0x20>
 80077a4:	2302      	movs	r3, #2
 80077a6:	e066      	b.n	8007876 <HAL_DMA_Start_IT+0xee>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d155      	bne.n	8007868 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2202      	movs	r2, #2
 80077c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f022 0201 	bic.w	r2, r2, #1
 80077d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	68b9      	ldr	r1, [r7, #8]
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f000 f9bb 	bl	8007b5c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d008      	beq.n	8007800 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f042 020e 	orr.w	r2, r2, #14
 80077fc:	601a      	str	r2, [r3, #0]
 80077fe:	e00f      	b.n	8007820 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 0204 	bic.w	r2, r2, #4
 800780e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f042 020a 	orr.w	r2, r2, #10
 800781e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d007      	beq.n	800783e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007838:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800783c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007842:	2b00      	cmp	r3, #0
 8007844:	d007      	beq.n	8007856 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007850:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007854:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f042 0201 	orr.w	r2, r2, #1
 8007864:	601a      	str	r2, [r3, #0]
 8007866:	e005      	b.n	8007874 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007870:	2302      	movs	r3, #2
 8007872:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007874:	7dfb      	ldrb	r3, [r7, #23]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3718      	adds	r7, #24
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800787e:	b480      	push	{r7}
 8007880:	b085      	sub	sp, #20
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007886:	2300      	movs	r3, #0
 8007888:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007890:	b2db      	uxtb	r3, r3
 8007892:	2b02      	cmp	r3, #2
 8007894:	d005      	beq.n	80078a2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2204      	movs	r2, #4
 800789a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	73fb      	strb	r3, [r7, #15]
 80078a0:	e037      	b.n	8007912 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f022 020e 	bic.w	r2, r2, #14
 80078b0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80078c0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f022 0201 	bic.w	r2, r2, #1
 80078d0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078d6:	f003 021f 	and.w	r2, r3, #31
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078de:	2101      	movs	r1, #1
 80078e0:	fa01 f202 	lsl.w	r2, r1, r2
 80078e4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80078ee:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00c      	beq.n	8007912 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007902:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007906:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007910:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2201      	movs	r2, #1
 8007916:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8007922:	7bfb      	ldrb	r3, [r7, #15]
}
 8007924:	4618      	mov	r0, r3
 8007926:	3714      	adds	r7, #20
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007938:	2300      	movs	r3, #0
 800793a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007942:	b2db      	uxtb	r3, r3
 8007944:	2b02      	cmp	r3, #2
 8007946:	d00d      	beq.n	8007964 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2204      	movs	r2, #4
 800794c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	73fb      	strb	r3, [r7, #15]
 8007962:	e047      	b.n	80079f4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f022 020e 	bic.w	r2, r2, #14
 8007972:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f022 0201 	bic.w	r2, r2, #1
 8007982:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800798e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007992:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007998:	f003 021f 	and.w	r2, r3, #31
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a0:	2101      	movs	r1, #1
 80079a2:	fa01 f202 	lsl.w	r2, r1, r2
 80079a6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80079b0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00c      	beq.n	80079d4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80079c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80079d2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d003      	beq.n	80079f4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	4798      	blx	r3
    }
  }
  return status;
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b084      	sub	sp, #16
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a1a:	f003 031f 	and.w	r3, r3, #31
 8007a1e:	2204      	movs	r2, #4
 8007a20:	409a      	lsls	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	4013      	ands	r3, r2
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d026      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x7a>
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	f003 0304 	and.w	r3, r3, #4
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d021      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 0320 	and.w	r3, r3, #32
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d107      	bne.n	8007a52 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f022 0204 	bic.w	r2, r2, #4
 8007a50:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a56:	f003 021f 	and.w	r2, r3, #31
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a5e:	2104      	movs	r1, #4
 8007a60:	fa01 f202 	lsl.w	r2, r1, r2
 8007a64:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d071      	beq.n	8007b52 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007a76:	e06c      	b.n	8007b52 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a7c:	f003 031f 	and.w	r3, r3, #31
 8007a80:	2202      	movs	r2, #2
 8007a82:	409a      	lsls	r2, r3
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	4013      	ands	r3, r2
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d02e      	beq.n	8007aea <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	f003 0302 	and.w	r3, r3, #2
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d029      	beq.n	8007aea <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0320 	and.w	r3, r3, #32
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10b      	bne.n	8007abc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f022 020a 	bic.w	r2, r2, #10
 8007ab2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ac0:	f003 021f 	and.w	r2, r3, #31
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ac8:	2102      	movs	r1, #2
 8007aca:	fa01 f202 	lsl.w	r2, r1, r2
 8007ace:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d038      	beq.n	8007b52 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007ae8:	e033      	b.n	8007b52 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aee:	f003 031f 	and.w	r3, r3, #31
 8007af2:	2208      	movs	r2, #8
 8007af4:	409a      	lsls	r2, r3
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	4013      	ands	r3, r2
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d02a      	beq.n	8007b54 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	f003 0308 	and.w	r3, r3, #8
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d025      	beq.n	8007b54 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f022 020e 	bic.w	r2, r2, #14
 8007b16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b1c:	f003 021f 	and.w	r2, r3, #31
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b24:	2101      	movs	r1, #1
 8007b26:	fa01 f202 	lsl.w	r2, r1, r2
 8007b2a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d004      	beq.n	8007b54 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007b52:	bf00      	nop
 8007b54:	bf00      	nop
}
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b085      	sub	sp, #20
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
 8007b68:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007b72:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d004      	beq.n	8007b86 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007b84:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b8a:	f003 021f 	and.w	r2, r3, #31
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b92:	2101      	movs	r1, #1
 8007b94:	fa01 f202 	lsl.w	r2, r1, r2
 8007b98:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	2b10      	cmp	r3, #16
 8007ba8:	d108      	bne.n	8007bbc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68ba      	ldr	r2, [r7, #8]
 8007bb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007bba:	e007      	b.n	8007bcc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68ba      	ldr	r2, [r7, #8]
 8007bc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	60da      	str	r2, [r3, #12]
}
 8007bcc:	bf00      	nop
 8007bce:	3714      	adds	r7, #20
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b087      	sub	sp, #28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	461a      	mov	r2, r3
 8007be6:	4b16      	ldr	r3, [pc, #88]	@ (8007c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d802      	bhi.n	8007bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007bec:	4b15      	ldr	r3, [pc, #84]	@ (8007c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007bee:	617b      	str	r3, [r7, #20]
 8007bf0:	e001      	b.n	8007bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8007bf2:	4b15      	ldr	r3, [pc, #84]	@ (8007c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007bf4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	3b08      	subs	r3, #8
 8007c02:	4a12      	ldr	r2, [pc, #72]	@ (8007c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007c04:	fba2 2303 	umull	r2, r3, r2, r3
 8007c08:	091b      	lsrs	r3, r3, #4
 8007c0a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c10:	089b      	lsrs	r3, r3, #2
 8007c12:	009a      	lsls	r2, r3, #2
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	4413      	add	r3, r2
 8007c18:	461a      	mov	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a0b      	ldr	r2, [pc, #44]	@ (8007c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007c22:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f003 031f 	and.w	r3, r3, #31
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	409a      	lsls	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007c32:	bf00      	nop
 8007c34:	371c      	adds	r7, #28
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	40020407 	.word	0x40020407
 8007c44:	40020800 	.word	0x40020800
 8007c48:	40020820 	.word	0x40020820
 8007c4c:	cccccccd 	.word	0xcccccccd
 8007c50:	40020880 	.word	0x40020880

08007c54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	4b0b      	ldr	r3, [pc, #44]	@ (8007c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007c68:	4413      	add	r3, r2
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a08      	ldr	r2, [pc, #32]	@ (8007c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007c76:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	f003 031f 	and.w	r3, r3, #31
 8007c80:	2201      	movs	r2, #1
 8007c82:	409a      	lsls	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007c88:	bf00      	nop
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr
 8007c94:	1000823f 	.word	0x1000823f
 8007c98:	40020940 	.word	0x40020940

08007c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b087      	sub	sp, #28
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007caa:	e15a      	b.n	8007f62 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8007cb8:	4013      	ands	r3, r2
 8007cba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f000 814c 	beq.w	8007f5c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f003 0303 	and.w	r3, r3, #3
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d005      	beq.n	8007cdc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d130      	bne.n	8007d3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	005b      	lsls	r3, r3, #1
 8007ce6:	2203      	movs	r2, #3
 8007ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cec:	43db      	mvns	r3, r3
 8007cee:	693a      	ldr	r2, [r7, #16]
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	68da      	ldr	r2, [r3, #12]
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	005b      	lsls	r3, r3, #1
 8007cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007d00:	693a      	ldr	r2, [r7, #16]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	693a      	ldr	r2, [r7, #16]
 8007d0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d12:	2201      	movs	r2, #1
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	fa02 f303 	lsl.w	r3, r2, r3
 8007d1a:	43db      	mvns	r3, r3
 8007d1c:	693a      	ldr	r2, [r7, #16]
 8007d1e:	4013      	ands	r3, r2
 8007d20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	091b      	lsrs	r3, r3, #4
 8007d28:	f003 0201 	and.w	r2, r3, #1
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d32:	693a      	ldr	r2, [r7, #16]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	693a      	ldr	r2, [r7, #16]
 8007d3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f003 0303 	and.w	r3, r3, #3
 8007d46:	2b03      	cmp	r3, #3
 8007d48:	d017      	beq.n	8007d7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	005b      	lsls	r3, r3, #1
 8007d54:	2203      	movs	r2, #3
 8007d56:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5a:	43db      	mvns	r3, r3
 8007d5c:	693a      	ldr	r2, [r7, #16]
 8007d5e:	4013      	ands	r3, r2
 8007d60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	689a      	ldr	r2, [r3, #8]
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	005b      	lsls	r3, r3, #1
 8007d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	f003 0303 	and.w	r3, r3, #3
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d123      	bne.n	8007dce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	08da      	lsrs	r2, r3, #3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	3208      	adds	r2, #8
 8007d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	f003 0307 	and.w	r3, r3, #7
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	220f      	movs	r2, #15
 8007d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007da2:	43db      	mvns	r3, r3
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	4013      	ands	r3, r2
 8007da8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	691a      	ldr	r2, [r3, #16]
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	f003 0307 	and.w	r3, r3, #7
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dba:	693a      	ldr	r2, [r7, #16]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	08da      	lsrs	r2, r3, #3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	3208      	adds	r2, #8
 8007dc8:	6939      	ldr	r1, [r7, #16]
 8007dca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	005b      	lsls	r3, r3, #1
 8007dd8:	2203      	movs	r2, #3
 8007dda:	fa02 f303 	lsl.w	r3, r2, r3
 8007dde:	43db      	mvns	r3, r3
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	4013      	ands	r3, r2
 8007de4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	f003 0203 	and.w	r2, r3, #3
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	005b      	lsls	r3, r3, #1
 8007df2:	fa02 f303 	lsl.w	r3, r2, r3
 8007df6:	693a      	ldr	r2, [r7, #16]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	f000 80a6 	beq.w	8007f5c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e10:	4b5b      	ldr	r3, [pc, #364]	@ (8007f80 <HAL_GPIO_Init+0x2e4>)
 8007e12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e14:	4a5a      	ldr	r2, [pc, #360]	@ (8007f80 <HAL_GPIO_Init+0x2e4>)
 8007e16:	f043 0301 	orr.w	r3, r3, #1
 8007e1a:	6613      	str	r3, [r2, #96]	@ 0x60
 8007e1c:	4b58      	ldr	r3, [pc, #352]	@ (8007f80 <HAL_GPIO_Init+0x2e4>)
 8007e1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e20:	f003 0301 	and.w	r3, r3, #1
 8007e24:	60bb      	str	r3, [r7, #8]
 8007e26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e28:	4a56      	ldr	r2, [pc, #344]	@ (8007f84 <HAL_GPIO_Init+0x2e8>)
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	089b      	lsrs	r3, r3, #2
 8007e2e:	3302      	adds	r3, #2
 8007e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f003 0303 	and.w	r3, r3, #3
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	220f      	movs	r2, #15
 8007e40:	fa02 f303 	lsl.w	r3, r2, r3
 8007e44:	43db      	mvns	r3, r3
 8007e46:	693a      	ldr	r2, [r7, #16]
 8007e48:	4013      	ands	r3, r2
 8007e4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007e52:	d01f      	beq.n	8007e94 <HAL_GPIO_Init+0x1f8>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a4c      	ldr	r2, [pc, #304]	@ (8007f88 <HAL_GPIO_Init+0x2ec>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d019      	beq.n	8007e90 <HAL_GPIO_Init+0x1f4>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a4b      	ldr	r2, [pc, #300]	@ (8007f8c <HAL_GPIO_Init+0x2f0>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d013      	beq.n	8007e8c <HAL_GPIO_Init+0x1f0>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a4a      	ldr	r2, [pc, #296]	@ (8007f90 <HAL_GPIO_Init+0x2f4>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d00d      	beq.n	8007e88 <HAL_GPIO_Init+0x1ec>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a49      	ldr	r2, [pc, #292]	@ (8007f94 <HAL_GPIO_Init+0x2f8>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d007      	beq.n	8007e84 <HAL_GPIO_Init+0x1e8>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a48      	ldr	r2, [pc, #288]	@ (8007f98 <HAL_GPIO_Init+0x2fc>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d101      	bne.n	8007e80 <HAL_GPIO_Init+0x1e4>
 8007e7c:	2305      	movs	r3, #5
 8007e7e:	e00a      	b.n	8007e96 <HAL_GPIO_Init+0x1fa>
 8007e80:	2306      	movs	r3, #6
 8007e82:	e008      	b.n	8007e96 <HAL_GPIO_Init+0x1fa>
 8007e84:	2304      	movs	r3, #4
 8007e86:	e006      	b.n	8007e96 <HAL_GPIO_Init+0x1fa>
 8007e88:	2303      	movs	r3, #3
 8007e8a:	e004      	b.n	8007e96 <HAL_GPIO_Init+0x1fa>
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	e002      	b.n	8007e96 <HAL_GPIO_Init+0x1fa>
 8007e90:	2301      	movs	r3, #1
 8007e92:	e000      	b.n	8007e96 <HAL_GPIO_Init+0x1fa>
 8007e94:	2300      	movs	r3, #0
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	f002 0203 	and.w	r2, r2, #3
 8007e9c:	0092      	lsls	r2, r2, #2
 8007e9e:	4093      	lsls	r3, r2
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ea6:	4937      	ldr	r1, [pc, #220]	@ (8007f84 <HAL_GPIO_Init+0x2e8>)
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	089b      	lsrs	r3, r3, #2
 8007eac:	3302      	adds	r3, #2
 8007eae:	693a      	ldr	r2, [r7, #16]
 8007eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007eb4:	4b39      	ldr	r3, [pc, #228]	@ (8007f9c <HAL_GPIO_Init+0x300>)
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	43db      	mvns	r3, r3
 8007ebe:	693a      	ldr	r2, [r7, #16]
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d003      	beq.n	8007ed8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007ed8:	4a30      	ldr	r2, [pc, #192]	@ (8007f9c <HAL_GPIO_Init+0x300>)
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007ede:	4b2f      	ldr	r3, [pc, #188]	@ (8007f9c <HAL_GPIO_Init+0x300>)
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	43db      	mvns	r3, r3
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	4013      	ands	r3, r2
 8007eec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d003      	beq.n	8007f02 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007efa:	693a      	ldr	r2, [r7, #16]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007f02:	4a26      	ldr	r2, [pc, #152]	@ (8007f9c <HAL_GPIO_Init+0x300>)
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007f08:	4b24      	ldr	r3, [pc, #144]	@ (8007f9c <HAL_GPIO_Init+0x300>)
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	43db      	mvns	r3, r3
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	4013      	ands	r3, r2
 8007f16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d003      	beq.n	8007f2c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007f24:	693a      	ldr	r2, [r7, #16]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007f2c:	4a1b      	ldr	r2, [pc, #108]	@ (8007f9c <HAL_GPIO_Init+0x300>)
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007f32:	4b1a      	ldr	r3, [pc, #104]	@ (8007f9c <HAL_GPIO_Init+0x300>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	43db      	mvns	r3, r3
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	4013      	ands	r3, r2
 8007f40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d003      	beq.n	8007f56 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007f56:	4a11      	ldr	r2, [pc, #68]	@ (8007f9c <HAL_GPIO_Init+0x300>)
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	fa22 f303 	lsr.w	r3, r2, r3
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f47f ae9d 	bne.w	8007cac <HAL_GPIO_Init+0x10>
  }
}
 8007f72:	bf00      	nop
 8007f74:	bf00      	nop
 8007f76:	371c      	adds	r7, #28
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr
 8007f80:	40021000 	.word	0x40021000
 8007f84:	40010000 	.word	0x40010000
 8007f88:	48000400 	.word	0x48000400
 8007f8c:	48000800 	.word	0x48000800
 8007f90:	48000c00 	.word	0x48000c00
 8007f94:	48001000 	.word	0x48001000
 8007f98:	48001400 	.word	0x48001400
 8007f9c:	40010400 	.word	0x40010400

08007fa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	460b      	mov	r3, r1
 8007faa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	691a      	ldr	r2, [r3, #16]
 8007fb0:	887b      	ldrh	r3, [r7, #2]
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d002      	beq.n	8007fbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	73fb      	strb	r3, [r7, #15]
 8007fbc:	e001      	b.n	8007fc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3714      	adds	r7, #20
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	460b      	mov	r3, r1
 8007fda:	807b      	strh	r3, [r7, #2]
 8007fdc:	4613      	mov	r3, r2
 8007fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007fe0:	787b      	ldrb	r3, [r7, #1]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d003      	beq.n	8007fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007fe6:	887a      	ldrh	r2, [r7, #2]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007fec:	e002      	b.n	8007ff4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007fee:	887a      	ldrh	r2, [r7, #2]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	4603      	mov	r3, r0
 8008008:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800800a:	4b08      	ldr	r3, [pc, #32]	@ (800802c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800800c:	695a      	ldr	r2, [r3, #20]
 800800e:	88fb      	ldrh	r3, [r7, #6]
 8008010:	4013      	ands	r3, r2
 8008012:	2b00      	cmp	r3, #0
 8008014:	d006      	beq.n	8008024 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008016:	4a05      	ldr	r2, [pc, #20]	@ (800802c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008018:	88fb      	ldrh	r3, [r7, #6]
 800801a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800801c:	88fb      	ldrh	r3, [r7, #6]
 800801e:	4618      	mov	r0, r3
 8008020:	f7fc f9a8 	bl	8004374 <HAL_GPIO_EXTI_Callback>
  }
}
 8008024:	bf00      	nop
 8008026:	3708      	adds	r7, #8
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}
 800802c:	40010400 	.word	0x40010400

08008030 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008030:	b480      	push	{r7}
 8008032:	b085      	sub	sp, #20
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d141      	bne.n	80080c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800803e:	4b4b      	ldr	r3, [pc, #300]	@ (800816c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800804a:	d131      	bne.n	80080b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800804c:	4b47      	ldr	r3, [pc, #284]	@ (800816c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800804e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008052:	4a46      	ldr	r2, [pc, #280]	@ (800816c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008054:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008058:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800805c:	4b43      	ldr	r3, [pc, #268]	@ (800816c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008064:	4a41      	ldr	r2, [pc, #260]	@ (800816c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008066:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800806a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800806c:	4b40      	ldr	r3, [pc, #256]	@ (8008170 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2232      	movs	r2, #50	@ 0x32
 8008072:	fb02 f303 	mul.w	r3, r2, r3
 8008076:	4a3f      	ldr	r2, [pc, #252]	@ (8008174 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008078:	fba2 2303 	umull	r2, r3, r2, r3
 800807c:	0c9b      	lsrs	r3, r3, #18
 800807e:	3301      	adds	r3, #1
 8008080:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008082:	e002      	b.n	800808a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	3b01      	subs	r3, #1
 8008088:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800808a:	4b38      	ldr	r3, [pc, #224]	@ (800816c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008092:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008096:	d102      	bne.n	800809e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1f2      	bne.n	8008084 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800809e:	4b33      	ldr	r3, [pc, #204]	@ (800816c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080a0:	695b      	ldr	r3, [r3, #20]
 80080a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080aa:	d158      	bne.n	800815e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e057      	b.n	8008160 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80080b0:	4b2e      	ldr	r3, [pc, #184]	@ (800816c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080b6:	4a2d      	ldr	r2, [pc, #180]	@ (800816c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80080c0:	e04d      	b.n	800815e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080c8:	d141      	bne.n	800814e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80080ca:	4b28      	ldr	r3, [pc, #160]	@ (800816c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80080d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080d6:	d131      	bne.n	800813c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80080d8:	4b24      	ldr	r3, [pc, #144]	@ (800816c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080de:	4a23      	ldr	r2, [pc, #140]	@ (800816c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80080e8:	4b20      	ldr	r3, [pc, #128]	@ (800816c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80080f0:	4a1e      	ldr	r2, [pc, #120]	@ (800816c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80080f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80080f8:	4b1d      	ldr	r3, [pc, #116]	@ (8008170 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2232      	movs	r2, #50	@ 0x32
 80080fe:	fb02 f303 	mul.w	r3, r2, r3
 8008102:	4a1c      	ldr	r2, [pc, #112]	@ (8008174 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008104:	fba2 2303 	umull	r2, r3, r2, r3
 8008108:	0c9b      	lsrs	r3, r3, #18
 800810a:	3301      	adds	r3, #1
 800810c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800810e:	e002      	b.n	8008116 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	3b01      	subs	r3, #1
 8008114:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008116:	4b15      	ldr	r3, [pc, #84]	@ (800816c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008118:	695b      	ldr	r3, [r3, #20]
 800811a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800811e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008122:	d102      	bne.n	800812a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1f2      	bne.n	8008110 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800812a:	4b10      	ldr	r3, [pc, #64]	@ (800816c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008132:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008136:	d112      	bne.n	800815e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008138:	2303      	movs	r3, #3
 800813a:	e011      	b.n	8008160 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800813c:	4b0b      	ldr	r3, [pc, #44]	@ (800816c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800813e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008142:	4a0a      	ldr	r2, [pc, #40]	@ (800816c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008144:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008148:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800814c:	e007      	b.n	800815e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800814e:	4b07      	ldr	r3, [pc, #28]	@ (800816c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008156:	4a05      	ldr	r2, [pc, #20]	@ (800816c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008158:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800815c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3714      	adds	r7, #20
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr
 800816c:	40007000 	.word	0x40007000
 8008170:	20000088 	.word	0x20000088
 8008174:	431bde83 	.word	0x431bde83

08008178 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008178:	b480      	push	{r7}
 800817a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800817c:	4b05      	ldr	r3, [pc, #20]	@ (8008194 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	4a04      	ldr	r2, [pc, #16]	@ (8008194 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008182:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008186:	6093      	str	r3, [r2, #8]
}
 8008188:	bf00      	nop
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	40007000 	.word	0x40007000

08008198 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b088      	sub	sp, #32
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d101      	bne.n	80081aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	e2fe      	b.n	80087a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0301 	and.w	r3, r3, #1
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d075      	beq.n	80082a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081b6:	4b97      	ldr	r3, [pc, #604]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f003 030c 	and.w	r3, r3, #12
 80081be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80081c0:	4b94      	ldr	r3, [pc, #592]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	f003 0303 	and.w	r3, r3, #3
 80081c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	2b0c      	cmp	r3, #12
 80081ce:	d102      	bne.n	80081d6 <HAL_RCC_OscConfig+0x3e>
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	2b03      	cmp	r3, #3
 80081d4:	d002      	beq.n	80081dc <HAL_RCC_OscConfig+0x44>
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	2b08      	cmp	r3, #8
 80081da:	d10b      	bne.n	80081f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081dc:	4b8d      	ldr	r3, [pc, #564]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d05b      	beq.n	80082a0 <HAL_RCC_OscConfig+0x108>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d157      	bne.n	80082a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e2d9      	b.n	80087a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081fc:	d106      	bne.n	800820c <HAL_RCC_OscConfig+0x74>
 80081fe:	4b85      	ldr	r3, [pc, #532]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a84      	ldr	r2, [pc, #528]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 8008204:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008208:	6013      	str	r3, [r2, #0]
 800820a:	e01d      	b.n	8008248 <HAL_RCC_OscConfig+0xb0>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008214:	d10c      	bne.n	8008230 <HAL_RCC_OscConfig+0x98>
 8008216:	4b7f      	ldr	r3, [pc, #508]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a7e      	ldr	r2, [pc, #504]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 800821c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008220:	6013      	str	r3, [r2, #0]
 8008222:	4b7c      	ldr	r3, [pc, #496]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a7b      	ldr	r2, [pc, #492]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 8008228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	e00b      	b.n	8008248 <HAL_RCC_OscConfig+0xb0>
 8008230:	4b78      	ldr	r3, [pc, #480]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a77      	ldr	r2, [pc, #476]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 8008236:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800823a:	6013      	str	r3, [r2, #0]
 800823c:	4b75      	ldr	r3, [pc, #468]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a74      	ldr	r2, [pc, #464]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 8008242:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008246:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d013      	beq.n	8008278 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008250:	f7fd fab4 	bl	80057bc <HAL_GetTick>
 8008254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008256:	e008      	b.n	800826a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008258:	f7fd fab0 	bl	80057bc <HAL_GetTick>
 800825c:	4602      	mov	r2, r0
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	2b64      	cmp	r3, #100	@ 0x64
 8008264:	d901      	bls.n	800826a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008266:	2303      	movs	r3, #3
 8008268:	e29e      	b.n	80087a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800826a:	4b6a      	ldr	r3, [pc, #424]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008272:	2b00      	cmp	r3, #0
 8008274:	d0f0      	beq.n	8008258 <HAL_RCC_OscConfig+0xc0>
 8008276:	e014      	b.n	80082a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008278:	f7fd faa0 	bl	80057bc <HAL_GetTick>
 800827c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800827e:	e008      	b.n	8008292 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008280:	f7fd fa9c 	bl	80057bc <HAL_GetTick>
 8008284:	4602      	mov	r2, r0
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	2b64      	cmp	r3, #100	@ 0x64
 800828c:	d901      	bls.n	8008292 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800828e:	2303      	movs	r3, #3
 8008290:	e28a      	b.n	80087a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008292:	4b60      	ldr	r3, [pc, #384]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1f0      	bne.n	8008280 <HAL_RCC_OscConfig+0xe8>
 800829e:	e000      	b.n	80082a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 0302 	and.w	r3, r3, #2
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d075      	beq.n	800839a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082ae:	4b59      	ldr	r3, [pc, #356]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	f003 030c 	and.w	r3, r3, #12
 80082b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80082b8:	4b56      	ldr	r3, [pc, #344]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	f003 0303 	and.w	r3, r3, #3
 80082c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	2b0c      	cmp	r3, #12
 80082c6:	d102      	bne.n	80082ce <HAL_RCC_OscConfig+0x136>
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d002      	beq.n	80082d4 <HAL_RCC_OscConfig+0x13c>
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	2b04      	cmp	r3, #4
 80082d2:	d11f      	bne.n	8008314 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80082d4:	4b4f      	ldr	r3, [pc, #316]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d005      	beq.n	80082ec <HAL_RCC_OscConfig+0x154>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d101      	bne.n	80082ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e25d      	b.n	80087a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082ec:	4b49      	ldr	r3, [pc, #292]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	061b      	lsls	r3, r3, #24
 80082fa:	4946      	ldr	r1, [pc, #280]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 80082fc:	4313      	orrs	r3, r2
 80082fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008300:	4b45      	ldr	r3, [pc, #276]	@ (8008418 <HAL_RCC_OscConfig+0x280>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4618      	mov	r0, r3
 8008306:	f7fd fa0d 	bl	8005724 <HAL_InitTick>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d043      	beq.n	8008398 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e249      	b.n	80087a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d023      	beq.n	8008364 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800831c:	4b3d      	ldr	r3, [pc, #244]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a3c      	ldr	r2, [pc, #240]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 8008322:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008328:	f7fd fa48 	bl	80057bc <HAL_GetTick>
 800832c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800832e:	e008      	b.n	8008342 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008330:	f7fd fa44 	bl	80057bc <HAL_GetTick>
 8008334:	4602      	mov	r2, r0
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	1ad3      	subs	r3, r2, r3
 800833a:	2b02      	cmp	r3, #2
 800833c:	d901      	bls.n	8008342 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800833e:	2303      	movs	r3, #3
 8008340:	e232      	b.n	80087a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008342:	4b34      	ldr	r3, [pc, #208]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800834a:	2b00      	cmp	r3, #0
 800834c:	d0f0      	beq.n	8008330 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800834e:	4b31      	ldr	r3, [pc, #196]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	061b      	lsls	r3, r3, #24
 800835c:	492d      	ldr	r1, [pc, #180]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 800835e:	4313      	orrs	r3, r2
 8008360:	604b      	str	r3, [r1, #4]
 8008362:	e01a      	b.n	800839a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008364:	4b2b      	ldr	r3, [pc, #172]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a2a      	ldr	r2, [pc, #168]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 800836a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800836e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008370:	f7fd fa24 	bl	80057bc <HAL_GetTick>
 8008374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008376:	e008      	b.n	800838a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008378:	f7fd fa20 	bl	80057bc <HAL_GetTick>
 800837c:	4602      	mov	r2, r0
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	2b02      	cmp	r3, #2
 8008384:	d901      	bls.n	800838a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008386:	2303      	movs	r3, #3
 8008388:	e20e      	b.n	80087a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800838a:	4b22      	ldr	r3, [pc, #136]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1f0      	bne.n	8008378 <HAL_RCC_OscConfig+0x1e0>
 8008396:	e000      	b.n	800839a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008398:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f003 0308 	and.w	r3, r3, #8
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d041      	beq.n	800842a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	695b      	ldr	r3, [r3, #20]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d01c      	beq.n	80083e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80083ae:	4b19      	ldr	r3, [pc, #100]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 80083b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083b4:	4a17      	ldr	r2, [pc, #92]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 80083b6:	f043 0301 	orr.w	r3, r3, #1
 80083ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083be:	f7fd f9fd 	bl	80057bc <HAL_GetTick>
 80083c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80083c4:	e008      	b.n	80083d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80083c6:	f7fd f9f9 	bl	80057bc <HAL_GetTick>
 80083ca:	4602      	mov	r2, r0
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	1ad3      	subs	r3, r2, r3
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d901      	bls.n	80083d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80083d4:	2303      	movs	r3, #3
 80083d6:	e1e7      	b.n	80087a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80083d8:	4b0e      	ldr	r3, [pc, #56]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 80083da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083de:	f003 0302 	and.w	r3, r3, #2
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d0ef      	beq.n	80083c6 <HAL_RCC_OscConfig+0x22e>
 80083e6:	e020      	b.n	800842a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80083e8:	4b0a      	ldr	r3, [pc, #40]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 80083ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083ee:	4a09      	ldr	r2, [pc, #36]	@ (8008414 <HAL_RCC_OscConfig+0x27c>)
 80083f0:	f023 0301 	bic.w	r3, r3, #1
 80083f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083f8:	f7fd f9e0 	bl	80057bc <HAL_GetTick>
 80083fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80083fe:	e00d      	b.n	800841c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008400:	f7fd f9dc 	bl	80057bc <HAL_GetTick>
 8008404:	4602      	mov	r2, r0
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	2b02      	cmp	r3, #2
 800840c:	d906      	bls.n	800841c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800840e:	2303      	movs	r3, #3
 8008410:	e1ca      	b.n	80087a8 <HAL_RCC_OscConfig+0x610>
 8008412:	bf00      	nop
 8008414:	40021000 	.word	0x40021000
 8008418:	2000008c 	.word	0x2000008c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800841c:	4b8c      	ldr	r3, [pc, #560]	@ (8008650 <HAL_RCC_OscConfig+0x4b8>)
 800841e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008422:	f003 0302 	and.w	r3, r3, #2
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1ea      	bne.n	8008400 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 0304 	and.w	r3, r3, #4
 8008432:	2b00      	cmp	r3, #0
 8008434:	f000 80a6 	beq.w	8008584 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008438:	2300      	movs	r3, #0
 800843a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800843c:	4b84      	ldr	r3, [pc, #528]	@ (8008650 <HAL_RCC_OscConfig+0x4b8>)
 800843e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d101      	bne.n	800844c <HAL_RCC_OscConfig+0x2b4>
 8008448:	2301      	movs	r3, #1
 800844a:	e000      	b.n	800844e <HAL_RCC_OscConfig+0x2b6>
 800844c:	2300      	movs	r3, #0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00d      	beq.n	800846e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008452:	4b7f      	ldr	r3, [pc, #508]	@ (8008650 <HAL_RCC_OscConfig+0x4b8>)
 8008454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008456:	4a7e      	ldr	r2, [pc, #504]	@ (8008650 <HAL_RCC_OscConfig+0x4b8>)
 8008458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800845c:	6593      	str	r3, [r2, #88]	@ 0x58
 800845e:	4b7c      	ldr	r3, [pc, #496]	@ (8008650 <HAL_RCC_OscConfig+0x4b8>)
 8008460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008466:	60fb      	str	r3, [r7, #12]
 8008468:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800846a:	2301      	movs	r3, #1
 800846c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800846e:	4b79      	ldr	r3, [pc, #484]	@ (8008654 <HAL_RCC_OscConfig+0x4bc>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008476:	2b00      	cmp	r3, #0
 8008478:	d118      	bne.n	80084ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800847a:	4b76      	ldr	r3, [pc, #472]	@ (8008654 <HAL_RCC_OscConfig+0x4bc>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a75      	ldr	r2, [pc, #468]	@ (8008654 <HAL_RCC_OscConfig+0x4bc>)
 8008480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008486:	f7fd f999 	bl	80057bc <HAL_GetTick>
 800848a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800848c:	e008      	b.n	80084a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800848e:	f7fd f995 	bl	80057bc <HAL_GetTick>
 8008492:	4602      	mov	r2, r0
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	1ad3      	subs	r3, r2, r3
 8008498:	2b02      	cmp	r3, #2
 800849a:	d901      	bls.n	80084a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800849c:	2303      	movs	r3, #3
 800849e:	e183      	b.n	80087a8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80084a0:	4b6c      	ldr	r3, [pc, #432]	@ (8008654 <HAL_RCC_OscConfig+0x4bc>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d0f0      	beq.n	800848e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d108      	bne.n	80084c6 <HAL_RCC_OscConfig+0x32e>
 80084b4:	4b66      	ldr	r3, [pc, #408]	@ (8008650 <HAL_RCC_OscConfig+0x4b8>)
 80084b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084ba:	4a65      	ldr	r2, [pc, #404]	@ (8008650 <HAL_RCC_OscConfig+0x4b8>)
 80084bc:	f043 0301 	orr.w	r3, r3, #1
 80084c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80084c4:	e024      	b.n	8008510 <HAL_RCC_OscConfig+0x378>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	2b05      	cmp	r3, #5
 80084cc:	d110      	bne.n	80084f0 <HAL_RCC_OscConfig+0x358>
 80084ce:	4b60      	ldr	r3, [pc, #384]	@ (8008650 <HAL_RCC_OscConfig+0x4b8>)
 80084d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084d4:	4a5e      	ldr	r2, [pc, #376]	@ (8008650 <HAL_RCC_OscConfig+0x4b8>)
 80084d6:	f043 0304 	orr.w	r3, r3, #4
 80084da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80084de:	4b5c      	ldr	r3, [pc, #368]	@ (8008650 <HAL_RCC_OscConfig+0x4b8>)
 80084e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084e4:	4a5a      	ldr	r2, [pc, #360]	@ (8008650 <HAL_RCC_OscConfig+0x4b8>)
 80084e6:	f043 0301 	orr.w	r3, r3, #1
 80084ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80084ee:	e00f      	b.n	8008510 <HAL_RCC_OscConfig+0x378>
 80084f0:	4b57      	ldr	r3, [pc, #348]	@ (8008650 <HAL_RCC_OscConfig+0x4b8>)
 80084f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084f6:	4a56      	ldr	r2, [pc, #344]	@ (8008650 <HAL_RCC_OscConfig+0x4b8>)
 80084f8:	f023 0301 	bic.w	r3, r3, #1
 80084fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008500:	4b53      	ldr	r3, [pc, #332]	@ (8008650 <HAL_RCC_OscConfig+0x4b8>)
 8008502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008506:	4a52      	ldr	r2, [pc, #328]	@ (8008650 <HAL_RCC_OscConfig+0x4b8>)
 8008508:	f023 0304 	bic.w	r3, r3, #4
 800850c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d016      	beq.n	8008546 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008518:	f7fd f950 	bl	80057bc <HAL_GetTick>
 800851c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800851e:	e00a      	b.n	8008536 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008520:	f7fd f94c 	bl	80057bc <HAL_GetTick>
 8008524:	4602      	mov	r2, r0
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	1ad3      	subs	r3, r2, r3
 800852a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800852e:	4293      	cmp	r3, r2
 8008530:	d901      	bls.n	8008536 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008532:	2303      	movs	r3, #3
 8008534:	e138      	b.n	80087a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008536:	4b46      	ldr	r3, [pc, #280]	@ (8008650 <HAL_RCC_OscConfig+0x4b8>)
 8008538:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800853c:	f003 0302 	and.w	r3, r3, #2
 8008540:	2b00      	cmp	r3, #0
 8008542:	d0ed      	beq.n	8008520 <HAL_RCC_OscConfig+0x388>
 8008544:	e015      	b.n	8008572 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008546:	f7fd f939 	bl	80057bc <HAL_GetTick>
 800854a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800854c:	e00a      	b.n	8008564 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800854e:	f7fd f935 	bl	80057bc <HAL_GetTick>
 8008552:	4602      	mov	r2, r0
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	1ad3      	subs	r3, r2, r3
 8008558:	f241 3288 	movw	r2, #5000	@ 0x1388
 800855c:	4293      	cmp	r3, r2
 800855e:	d901      	bls.n	8008564 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008560:	2303      	movs	r3, #3
 8008562:	e121      	b.n	80087a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008564:	4b3a      	ldr	r3, [pc, #232]	@ (8008650 <HAL_RCC_OscConfig+0x4b8>)
 8008566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800856a:	f003 0302 	and.w	r3, r3, #2
 800856e:	2b00      	cmp	r3, #0
 8008570:	d1ed      	bne.n	800854e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008572:	7ffb      	ldrb	r3, [r7, #31]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d105      	bne.n	8008584 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008578:	4b35      	ldr	r3, [pc, #212]	@ (8008650 <HAL_RCC_OscConfig+0x4b8>)
 800857a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800857c:	4a34      	ldr	r2, [pc, #208]	@ (8008650 <HAL_RCC_OscConfig+0x4b8>)
 800857e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008582:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 0320 	and.w	r3, r3, #32
 800858c:	2b00      	cmp	r3, #0
 800858e:	d03c      	beq.n	800860a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	699b      	ldr	r3, [r3, #24]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d01c      	beq.n	80085d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008598:	4b2d      	ldr	r3, [pc, #180]	@ (8008650 <HAL_RCC_OscConfig+0x4b8>)
 800859a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800859e:	4a2c      	ldr	r2, [pc, #176]	@ (8008650 <HAL_RCC_OscConfig+0x4b8>)
 80085a0:	f043 0301 	orr.w	r3, r3, #1
 80085a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085a8:	f7fd f908 	bl	80057bc <HAL_GetTick>
 80085ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80085ae:	e008      	b.n	80085c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80085b0:	f7fd f904 	bl	80057bc <HAL_GetTick>
 80085b4:	4602      	mov	r2, r0
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d901      	bls.n	80085c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80085be:	2303      	movs	r3, #3
 80085c0:	e0f2      	b.n	80087a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80085c2:	4b23      	ldr	r3, [pc, #140]	@ (8008650 <HAL_RCC_OscConfig+0x4b8>)
 80085c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80085c8:	f003 0302 	and.w	r3, r3, #2
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d0ef      	beq.n	80085b0 <HAL_RCC_OscConfig+0x418>
 80085d0:	e01b      	b.n	800860a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80085d2:	4b1f      	ldr	r3, [pc, #124]	@ (8008650 <HAL_RCC_OscConfig+0x4b8>)
 80085d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80085d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008650 <HAL_RCC_OscConfig+0x4b8>)
 80085da:	f023 0301 	bic.w	r3, r3, #1
 80085de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085e2:	f7fd f8eb 	bl	80057bc <HAL_GetTick>
 80085e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80085e8:	e008      	b.n	80085fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80085ea:	f7fd f8e7 	bl	80057bc <HAL_GetTick>
 80085ee:	4602      	mov	r2, r0
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	1ad3      	subs	r3, r2, r3
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d901      	bls.n	80085fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80085f8:	2303      	movs	r3, #3
 80085fa:	e0d5      	b.n	80087a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80085fc:	4b14      	ldr	r3, [pc, #80]	@ (8008650 <HAL_RCC_OscConfig+0x4b8>)
 80085fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008602:	f003 0302 	and.w	r3, r3, #2
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1ef      	bne.n	80085ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	69db      	ldr	r3, [r3, #28]
 800860e:	2b00      	cmp	r3, #0
 8008610:	f000 80c9 	beq.w	80087a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008614:	4b0e      	ldr	r3, [pc, #56]	@ (8008650 <HAL_RCC_OscConfig+0x4b8>)
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	f003 030c 	and.w	r3, r3, #12
 800861c:	2b0c      	cmp	r3, #12
 800861e:	f000 8083 	beq.w	8008728 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	69db      	ldr	r3, [r3, #28]
 8008626:	2b02      	cmp	r3, #2
 8008628:	d15e      	bne.n	80086e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800862a:	4b09      	ldr	r3, [pc, #36]	@ (8008650 <HAL_RCC_OscConfig+0x4b8>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a08      	ldr	r2, [pc, #32]	@ (8008650 <HAL_RCC_OscConfig+0x4b8>)
 8008630:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008636:	f7fd f8c1 	bl	80057bc <HAL_GetTick>
 800863a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800863c:	e00c      	b.n	8008658 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800863e:	f7fd f8bd 	bl	80057bc <HAL_GetTick>
 8008642:	4602      	mov	r2, r0
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	1ad3      	subs	r3, r2, r3
 8008648:	2b02      	cmp	r3, #2
 800864a:	d905      	bls.n	8008658 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800864c:	2303      	movs	r3, #3
 800864e:	e0ab      	b.n	80087a8 <HAL_RCC_OscConfig+0x610>
 8008650:	40021000 	.word	0x40021000
 8008654:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008658:	4b55      	ldr	r3, [pc, #340]	@ (80087b0 <HAL_RCC_OscConfig+0x618>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1ec      	bne.n	800863e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008664:	4b52      	ldr	r3, [pc, #328]	@ (80087b0 <HAL_RCC_OscConfig+0x618>)
 8008666:	68da      	ldr	r2, [r3, #12]
 8008668:	4b52      	ldr	r3, [pc, #328]	@ (80087b4 <HAL_RCC_OscConfig+0x61c>)
 800866a:	4013      	ands	r3, r2
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	6a11      	ldr	r1, [r2, #32]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008674:	3a01      	subs	r2, #1
 8008676:	0112      	lsls	r2, r2, #4
 8008678:	4311      	orrs	r1, r2
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800867e:	0212      	lsls	r2, r2, #8
 8008680:	4311      	orrs	r1, r2
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008686:	0852      	lsrs	r2, r2, #1
 8008688:	3a01      	subs	r2, #1
 800868a:	0552      	lsls	r2, r2, #21
 800868c:	4311      	orrs	r1, r2
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008692:	0852      	lsrs	r2, r2, #1
 8008694:	3a01      	subs	r2, #1
 8008696:	0652      	lsls	r2, r2, #25
 8008698:	4311      	orrs	r1, r2
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800869e:	06d2      	lsls	r2, r2, #27
 80086a0:	430a      	orrs	r2, r1
 80086a2:	4943      	ldr	r1, [pc, #268]	@ (80087b0 <HAL_RCC_OscConfig+0x618>)
 80086a4:	4313      	orrs	r3, r2
 80086a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80086a8:	4b41      	ldr	r3, [pc, #260]	@ (80087b0 <HAL_RCC_OscConfig+0x618>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a40      	ldr	r2, [pc, #256]	@ (80087b0 <HAL_RCC_OscConfig+0x618>)
 80086ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80086b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80086b4:	4b3e      	ldr	r3, [pc, #248]	@ (80087b0 <HAL_RCC_OscConfig+0x618>)
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	4a3d      	ldr	r2, [pc, #244]	@ (80087b0 <HAL_RCC_OscConfig+0x618>)
 80086ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80086be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086c0:	f7fd f87c 	bl	80057bc <HAL_GetTick>
 80086c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80086c6:	e008      	b.n	80086da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086c8:	f7fd f878 	bl	80057bc <HAL_GetTick>
 80086cc:	4602      	mov	r2, r0
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d901      	bls.n	80086da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80086d6:	2303      	movs	r3, #3
 80086d8:	e066      	b.n	80087a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80086da:	4b35      	ldr	r3, [pc, #212]	@ (80087b0 <HAL_RCC_OscConfig+0x618>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d0f0      	beq.n	80086c8 <HAL_RCC_OscConfig+0x530>
 80086e6:	e05e      	b.n	80087a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086e8:	4b31      	ldr	r3, [pc, #196]	@ (80087b0 <HAL_RCC_OscConfig+0x618>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a30      	ldr	r2, [pc, #192]	@ (80087b0 <HAL_RCC_OscConfig+0x618>)
 80086ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80086f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086f4:	f7fd f862 	bl	80057bc <HAL_GetTick>
 80086f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80086fa:	e008      	b.n	800870e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086fc:	f7fd f85e 	bl	80057bc <HAL_GetTick>
 8008700:	4602      	mov	r2, r0
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	2b02      	cmp	r3, #2
 8008708:	d901      	bls.n	800870e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800870a:	2303      	movs	r3, #3
 800870c:	e04c      	b.n	80087a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800870e:	4b28      	ldr	r3, [pc, #160]	@ (80087b0 <HAL_RCC_OscConfig+0x618>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1f0      	bne.n	80086fc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800871a:	4b25      	ldr	r3, [pc, #148]	@ (80087b0 <HAL_RCC_OscConfig+0x618>)
 800871c:	68da      	ldr	r2, [r3, #12]
 800871e:	4924      	ldr	r1, [pc, #144]	@ (80087b0 <HAL_RCC_OscConfig+0x618>)
 8008720:	4b25      	ldr	r3, [pc, #148]	@ (80087b8 <HAL_RCC_OscConfig+0x620>)
 8008722:	4013      	ands	r3, r2
 8008724:	60cb      	str	r3, [r1, #12]
 8008726:	e03e      	b.n	80087a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	69db      	ldr	r3, [r3, #28]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d101      	bne.n	8008734 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	e039      	b.n	80087a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008734:	4b1e      	ldr	r3, [pc, #120]	@ (80087b0 <HAL_RCC_OscConfig+0x618>)
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	f003 0203 	and.w	r2, r3, #3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6a1b      	ldr	r3, [r3, #32]
 8008744:	429a      	cmp	r2, r3
 8008746:	d12c      	bne.n	80087a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008752:	3b01      	subs	r3, #1
 8008754:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008756:	429a      	cmp	r2, r3
 8008758:	d123      	bne.n	80087a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008764:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008766:	429a      	cmp	r2, r3
 8008768:	d11b      	bne.n	80087a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008774:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008776:	429a      	cmp	r2, r3
 8008778:	d113      	bne.n	80087a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008784:	085b      	lsrs	r3, r3, #1
 8008786:	3b01      	subs	r3, #1
 8008788:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800878a:	429a      	cmp	r2, r3
 800878c:	d109      	bne.n	80087a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008798:	085b      	lsrs	r3, r3, #1
 800879a:	3b01      	subs	r3, #1
 800879c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800879e:	429a      	cmp	r2, r3
 80087a0:	d001      	beq.n	80087a6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e000      	b.n	80087a8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3720      	adds	r7, #32
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	40021000 	.word	0x40021000
 80087b4:	019f800c 	.word	0x019f800c
 80087b8:	feeefffc 	.word	0xfeeefffc

080087bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b086      	sub	sp, #24
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80087c6:	2300      	movs	r3, #0
 80087c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d101      	bne.n	80087d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	e11e      	b.n	8008a12 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80087d4:	4b91      	ldr	r3, [pc, #580]	@ (8008a1c <HAL_RCC_ClockConfig+0x260>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 030f 	and.w	r3, r3, #15
 80087dc:	683a      	ldr	r2, [r7, #0]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d910      	bls.n	8008804 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087e2:	4b8e      	ldr	r3, [pc, #568]	@ (8008a1c <HAL_RCC_ClockConfig+0x260>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f023 020f 	bic.w	r2, r3, #15
 80087ea:	498c      	ldr	r1, [pc, #560]	@ (8008a1c <HAL_RCC_ClockConfig+0x260>)
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087f2:	4b8a      	ldr	r3, [pc, #552]	@ (8008a1c <HAL_RCC_ClockConfig+0x260>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f003 030f 	and.w	r3, r3, #15
 80087fa:	683a      	ldr	r2, [r7, #0]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d001      	beq.n	8008804 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	e106      	b.n	8008a12 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 0301 	and.w	r3, r3, #1
 800880c:	2b00      	cmp	r3, #0
 800880e:	d073      	beq.n	80088f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	2b03      	cmp	r3, #3
 8008816:	d129      	bne.n	800886c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008818:	4b81      	ldr	r3, [pc, #516]	@ (8008a20 <HAL_RCC_ClockConfig+0x264>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008820:	2b00      	cmp	r3, #0
 8008822:	d101      	bne.n	8008828 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	e0f4      	b.n	8008a12 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008828:	f000 f99e 	bl	8008b68 <RCC_GetSysClockFreqFromPLLSource>
 800882c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	4a7c      	ldr	r2, [pc, #496]	@ (8008a24 <HAL_RCC_ClockConfig+0x268>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d93f      	bls.n	80088b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008836:	4b7a      	ldr	r3, [pc, #488]	@ (8008a20 <HAL_RCC_ClockConfig+0x264>)
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d009      	beq.n	8008856 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800884a:	2b00      	cmp	r3, #0
 800884c:	d033      	beq.n	80088b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008852:	2b00      	cmp	r3, #0
 8008854:	d12f      	bne.n	80088b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008856:	4b72      	ldr	r3, [pc, #456]	@ (8008a20 <HAL_RCC_ClockConfig+0x264>)
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800885e:	4a70      	ldr	r2, [pc, #448]	@ (8008a20 <HAL_RCC_ClockConfig+0x264>)
 8008860:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008864:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008866:	2380      	movs	r3, #128	@ 0x80
 8008868:	617b      	str	r3, [r7, #20]
 800886a:	e024      	b.n	80088b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	2b02      	cmp	r3, #2
 8008872:	d107      	bne.n	8008884 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008874:	4b6a      	ldr	r3, [pc, #424]	@ (8008a20 <HAL_RCC_ClockConfig+0x264>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800887c:	2b00      	cmp	r3, #0
 800887e:	d109      	bne.n	8008894 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	e0c6      	b.n	8008a12 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008884:	4b66      	ldr	r3, [pc, #408]	@ (8008a20 <HAL_RCC_ClockConfig+0x264>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800888c:	2b00      	cmp	r3, #0
 800888e:	d101      	bne.n	8008894 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e0be      	b.n	8008a12 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008894:	f000 f8ce 	bl	8008a34 <HAL_RCC_GetSysClockFreq>
 8008898:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	4a61      	ldr	r2, [pc, #388]	@ (8008a24 <HAL_RCC_ClockConfig+0x268>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d909      	bls.n	80088b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80088a2:	4b5f      	ldr	r3, [pc, #380]	@ (8008a20 <HAL_RCC_ClockConfig+0x264>)
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80088aa:	4a5d      	ldr	r2, [pc, #372]	@ (8008a20 <HAL_RCC_ClockConfig+0x264>)
 80088ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80088b2:	2380      	movs	r3, #128	@ 0x80
 80088b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80088b6:	4b5a      	ldr	r3, [pc, #360]	@ (8008a20 <HAL_RCC_ClockConfig+0x264>)
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	f023 0203 	bic.w	r2, r3, #3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	4957      	ldr	r1, [pc, #348]	@ (8008a20 <HAL_RCC_ClockConfig+0x264>)
 80088c4:	4313      	orrs	r3, r2
 80088c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088c8:	f7fc ff78 	bl	80057bc <HAL_GetTick>
 80088cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088ce:	e00a      	b.n	80088e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088d0:	f7fc ff74 	bl	80057bc <HAL_GetTick>
 80088d4:	4602      	mov	r2, r0
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088de:	4293      	cmp	r3, r2
 80088e0:	d901      	bls.n	80088e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80088e2:	2303      	movs	r3, #3
 80088e4:	e095      	b.n	8008a12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088e6:	4b4e      	ldr	r3, [pc, #312]	@ (8008a20 <HAL_RCC_ClockConfig+0x264>)
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	f003 020c 	and.w	r2, r3, #12
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d1eb      	bne.n	80088d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 0302 	and.w	r3, r3, #2
 8008900:	2b00      	cmp	r3, #0
 8008902:	d023      	beq.n	800894c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 0304 	and.w	r3, r3, #4
 800890c:	2b00      	cmp	r3, #0
 800890e:	d005      	beq.n	800891c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008910:	4b43      	ldr	r3, [pc, #268]	@ (8008a20 <HAL_RCC_ClockConfig+0x264>)
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	4a42      	ldr	r2, [pc, #264]	@ (8008a20 <HAL_RCC_ClockConfig+0x264>)
 8008916:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800891a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 0308 	and.w	r3, r3, #8
 8008924:	2b00      	cmp	r3, #0
 8008926:	d007      	beq.n	8008938 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008928:	4b3d      	ldr	r3, [pc, #244]	@ (8008a20 <HAL_RCC_ClockConfig+0x264>)
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008930:	4a3b      	ldr	r2, [pc, #236]	@ (8008a20 <HAL_RCC_ClockConfig+0x264>)
 8008932:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008936:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008938:	4b39      	ldr	r3, [pc, #228]	@ (8008a20 <HAL_RCC_ClockConfig+0x264>)
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	4936      	ldr	r1, [pc, #216]	@ (8008a20 <HAL_RCC_ClockConfig+0x264>)
 8008946:	4313      	orrs	r3, r2
 8008948:	608b      	str	r3, [r1, #8]
 800894a:	e008      	b.n	800895e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	2b80      	cmp	r3, #128	@ 0x80
 8008950:	d105      	bne.n	800895e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008952:	4b33      	ldr	r3, [pc, #204]	@ (8008a20 <HAL_RCC_ClockConfig+0x264>)
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	4a32      	ldr	r2, [pc, #200]	@ (8008a20 <HAL_RCC_ClockConfig+0x264>)
 8008958:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800895c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800895e:	4b2f      	ldr	r3, [pc, #188]	@ (8008a1c <HAL_RCC_ClockConfig+0x260>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 030f 	and.w	r3, r3, #15
 8008966:	683a      	ldr	r2, [r7, #0]
 8008968:	429a      	cmp	r2, r3
 800896a:	d21d      	bcs.n	80089a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800896c:	4b2b      	ldr	r3, [pc, #172]	@ (8008a1c <HAL_RCC_ClockConfig+0x260>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f023 020f 	bic.w	r2, r3, #15
 8008974:	4929      	ldr	r1, [pc, #164]	@ (8008a1c <HAL_RCC_ClockConfig+0x260>)
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	4313      	orrs	r3, r2
 800897a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800897c:	f7fc ff1e 	bl	80057bc <HAL_GetTick>
 8008980:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008982:	e00a      	b.n	800899a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008984:	f7fc ff1a 	bl	80057bc <HAL_GetTick>
 8008988:	4602      	mov	r2, r0
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008992:	4293      	cmp	r3, r2
 8008994:	d901      	bls.n	800899a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	e03b      	b.n	8008a12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800899a:	4b20      	ldr	r3, [pc, #128]	@ (8008a1c <HAL_RCC_ClockConfig+0x260>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 030f 	and.w	r3, r3, #15
 80089a2:	683a      	ldr	r2, [r7, #0]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d1ed      	bne.n	8008984 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f003 0304 	and.w	r3, r3, #4
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d008      	beq.n	80089c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089b4:	4b1a      	ldr	r3, [pc, #104]	@ (8008a20 <HAL_RCC_ClockConfig+0x264>)
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	4917      	ldr	r1, [pc, #92]	@ (8008a20 <HAL_RCC_ClockConfig+0x264>)
 80089c2:	4313      	orrs	r3, r2
 80089c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f003 0308 	and.w	r3, r3, #8
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d009      	beq.n	80089e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80089d2:	4b13      	ldr	r3, [pc, #76]	@ (8008a20 <HAL_RCC_ClockConfig+0x264>)
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	00db      	lsls	r3, r3, #3
 80089e0:	490f      	ldr	r1, [pc, #60]	@ (8008a20 <HAL_RCC_ClockConfig+0x264>)
 80089e2:	4313      	orrs	r3, r2
 80089e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80089e6:	f000 f825 	bl	8008a34 <HAL_RCC_GetSysClockFreq>
 80089ea:	4602      	mov	r2, r0
 80089ec:	4b0c      	ldr	r3, [pc, #48]	@ (8008a20 <HAL_RCC_ClockConfig+0x264>)
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	091b      	lsrs	r3, r3, #4
 80089f2:	f003 030f 	and.w	r3, r3, #15
 80089f6:	490c      	ldr	r1, [pc, #48]	@ (8008a28 <HAL_RCC_ClockConfig+0x26c>)
 80089f8:	5ccb      	ldrb	r3, [r1, r3]
 80089fa:	f003 031f 	and.w	r3, r3, #31
 80089fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008a02:	4a0a      	ldr	r2, [pc, #40]	@ (8008a2c <HAL_RCC_ClockConfig+0x270>)
 8008a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008a06:	4b0a      	ldr	r3, [pc, #40]	@ (8008a30 <HAL_RCC_ClockConfig+0x274>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fc fe8a 	bl	8005724 <HAL_InitTick>
 8008a10:	4603      	mov	r3, r0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3718      	adds	r7, #24
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	40022000 	.word	0x40022000
 8008a20:	40021000 	.word	0x40021000
 8008a24:	04c4b400 	.word	0x04c4b400
 8008a28:	0800df44 	.word	0x0800df44
 8008a2c:	20000088 	.word	0x20000088
 8008a30:	2000008c 	.word	0x2000008c

08008a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b087      	sub	sp, #28
 8008a38:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008a3a:	4b2c      	ldr	r3, [pc, #176]	@ (8008aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	f003 030c 	and.w	r3, r3, #12
 8008a42:	2b04      	cmp	r3, #4
 8008a44:	d102      	bne.n	8008a4c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008a46:	4b2a      	ldr	r3, [pc, #168]	@ (8008af0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008a48:	613b      	str	r3, [r7, #16]
 8008a4a:	e047      	b.n	8008adc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008a4c:	4b27      	ldr	r3, [pc, #156]	@ (8008aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	f003 030c 	and.w	r3, r3, #12
 8008a54:	2b08      	cmp	r3, #8
 8008a56:	d102      	bne.n	8008a5e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008a58:	4b26      	ldr	r3, [pc, #152]	@ (8008af4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008a5a:	613b      	str	r3, [r7, #16]
 8008a5c:	e03e      	b.n	8008adc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008a5e:	4b23      	ldr	r3, [pc, #140]	@ (8008aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	f003 030c 	and.w	r3, r3, #12
 8008a66:	2b0c      	cmp	r3, #12
 8008a68:	d136      	bne.n	8008ad8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008a6a:	4b20      	ldr	r3, [pc, #128]	@ (8008aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	f003 0303 	and.w	r3, r3, #3
 8008a72:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008a74:	4b1d      	ldr	r3, [pc, #116]	@ (8008aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	091b      	lsrs	r3, r3, #4
 8008a7a:	f003 030f 	and.w	r3, r3, #15
 8008a7e:	3301      	adds	r3, #1
 8008a80:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2b03      	cmp	r3, #3
 8008a86:	d10c      	bne.n	8008aa2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008a88:	4a1a      	ldr	r2, [pc, #104]	@ (8008af4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a90:	4a16      	ldr	r2, [pc, #88]	@ (8008aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8008a92:	68d2      	ldr	r2, [r2, #12]
 8008a94:	0a12      	lsrs	r2, r2, #8
 8008a96:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008a9a:	fb02 f303 	mul.w	r3, r2, r3
 8008a9e:	617b      	str	r3, [r7, #20]
      break;
 8008aa0:	e00c      	b.n	8008abc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008aa2:	4a13      	ldr	r2, [pc, #76]	@ (8008af0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aaa:	4a10      	ldr	r2, [pc, #64]	@ (8008aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8008aac:	68d2      	ldr	r2, [r2, #12]
 8008aae:	0a12      	lsrs	r2, r2, #8
 8008ab0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008ab4:	fb02 f303 	mul.w	r3, r2, r3
 8008ab8:	617b      	str	r3, [r7, #20]
      break;
 8008aba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008abc:	4b0b      	ldr	r3, [pc, #44]	@ (8008aec <HAL_RCC_GetSysClockFreq+0xb8>)
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	0e5b      	lsrs	r3, r3, #25
 8008ac2:	f003 0303 	and.w	r3, r3, #3
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	005b      	lsls	r3, r3, #1
 8008aca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008acc:	697a      	ldr	r2, [r7, #20]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ad4:	613b      	str	r3, [r7, #16]
 8008ad6:	e001      	b.n	8008adc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008adc:	693b      	ldr	r3, [r7, #16]
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	371c      	adds	r7, #28
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	40021000 	.word	0x40021000
 8008af0:	00f42400 	.word	0x00f42400
 8008af4:	016e3600 	.word	0x016e3600

08008af8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008af8:	b480      	push	{r7}
 8008afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008afc:	4b03      	ldr	r3, [pc, #12]	@ (8008b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8008afe:	681b      	ldr	r3, [r3, #0]
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	20000088 	.word	0x20000088

08008b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008b14:	f7ff fff0 	bl	8008af8 <HAL_RCC_GetHCLKFreq>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	4b06      	ldr	r3, [pc, #24]	@ (8008b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	0a1b      	lsrs	r3, r3, #8
 8008b20:	f003 0307 	and.w	r3, r3, #7
 8008b24:	4904      	ldr	r1, [pc, #16]	@ (8008b38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008b26:	5ccb      	ldrb	r3, [r1, r3]
 8008b28:	f003 031f 	and.w	r3, r3, #31
 8008b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	40021000 	.word	0x40021000
 8008b38:	0800df54 	.word	0x0800df54

08008b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008b40:	f7ff ffda 	bl	8008af8 <HAL_RCC_GetHCLKFreq>
 8008b44:	4602      	mov	r2, r0
 8008b46:	4b06      	ldr	r3, [pc, #24]	@ (8008b60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	0adb      	lsrs	r3, r3, #11
 8008b4c:	f003 0307 	and.w	r3, r3, #7
 8008b50:	4904      	ldr	r1, [pc, #16]	@ (8008b64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008b52:	5ccb      	ldrb	r3, [r1, r3]
 8008b54:	f003 031f 	and.w	r3, r3, #31
 8008b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	40021000 	.word	0x40021000
 8008b64:	0800df54 	.word	0x0800df54

08008b68 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b087      	sub	sp, #28
 8008b6c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8008be8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	f003 0303 	and.w	r3, r3, #3
 8008b76:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008b78:	4b1b      	ldr	r3, [pc, #108]	@ (8008be8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	091b      	lsrs	r3, r3, #4
 8008b7e:	f003 030f 	and.w	r3, r3, #15
 8008b82:	3301      	adds	r3, #1
 8008b84:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	2b03      	cmp	r3, #3
 8008b8a:	d10c      	bne.n	8008ba6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008b8c:	4a17      	ldr	r2, [pc, #92]	@ (8008bec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b94:	4a14      	ldr	r2, [pc, #80]	@ (8008be8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008b96:	68d2      	ldr	r2, [r2, #12]
 8008b98:	0a12      	lsrs	r2, r2, #8
 8008b9a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008b9e:	fb02 f303 	mul.w	r3, r2, r3
 8008ba2:	617b      	str	r3, [r7, #20]
    break;
 8008ba4:	e00c      	b.n	8008bc0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008ba6:	4a12      	ldr	r2, [pc, #72]	@ (8008bf0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bae:	4a0e      	ldr	r2, [pc, #56]	@ (8008be8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008bb0:	68d2      	ldr	r2, [r2, #12]
 8008bb2:	0a12      	lsrs	r2, r2, #8
 8008bb4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008bb8:	fb02 f303 	mul.w	r3, r2, r3
 8008bbc:	617b      	str	r3, [r7, #20]
    break;
 8008bbe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008bc0:	4b09      	ldr	r3, [pc, #36]	@ (8008be8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	0e5b      	lsrs	r3, r3, #25
 8008bc6:	f003 0303 	and.w	r3, r3, #3
 8008bca:	3301      	adds	r3, #1
 8008bcc:	005b      	lsls	r3, r3, #1
 8008bce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008bd0:	697a      	ldr	r2, [r7, #20]
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bd8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008bda:	687b      	ldr	r3, [r7, #4]
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	371c      	adds	r7, #28
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr
 8008be8:	40021000 	.word	0x40021000
 8008bec:	016e3600 	.word	0x016e3600
 8008bf0:	00f42400 	.word	0x00f42400

08008bf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b086      	sub	sp, #24
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008c00:	2300      	movs	r3, #0
 8008c02:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f000 8098 	beq.w	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c12:	2300      	movs	r3, #0
 8008c14:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c16:	4b43      	ldr	r3, [pc, #268]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d10d      	bne.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c22:	4b40      	ldr	r3, [pc, #256]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c26:	4a3f      	ldr	r2, [pc, #252]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008c2e:	4b3d      	ldr	r3, [pc, #244]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c36:	60bb      	str	r3, [r7, #8]
 8008c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008c3e:	4b3a      	ldr	r3, [pc, #232]	@ (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a39      	ldr	r2, [pc, #228]	@ (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008c44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008c4a:	f7fc fdb7 	bl	80057bc <HAL_GetTick>
 8008c4e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c50:	e009      	b.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c52:	f7fc fdb3 	bl	80057bc <HAL_GetTick>
 8008c56:	4602      	mov	r2, r0
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	d902      	bls.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008c60:	2303      	movs	r3, #3
 8008c62:	74fb      	strb	r3, [r7, #19]
        break;
 8008c64:	e005      	b.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c66:	4b30      	ldr	r3, [pc, #192]	@ (8008d28 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d0ef      	beq.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008c72:	7cfb      	ldrb	r3, [r7, #19]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d159      	bne.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008c78:	4b2a      	ldr	r3, [pc, #168]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c82:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d01e      	beq.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d019      	beq.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008c94:	4b23      	ldr	r3, [pc, #140]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008ca0:	4b20      	ldr	r3, [pc, #128]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008cac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cb6:	4a1b      	ldr	r2, [pc, #108]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008cb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008cbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008cc0:	4a18      	ldr	r2, [pc, #96]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	f003 0301 	and.w	r3, r3, #1
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d016      	beq.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cd2:	f7fc fd73 	bl	80057bc <HAL_GetTick>
 8008cd6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008cd8:	e00b      	b.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cda:	f7fc fd6f 	bl	80057bc <HAL_GetTick>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	1ad3      	subs	r3, r2, r3
 8008ce4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d902      	bls.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008cec:	2303      	movs	r3, #3
 8008cee:	74fb      	strb	r3, [r7, #19]
            break;
 8008cf0:	e006      	b.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cf8:	f003 0302 	and.w	r3, r3, #2
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d0ec      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008d00:	7cfb      	ldrb	r3, [r7, #19]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d10b      	bne.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d06:	4b07      	ldr	r3, [pc, #28]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d14:	4903      	ldr	r1, [pc, #12]	@ (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d16:	4313      	orrs	r3, r2
 8008d18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008d1c:	e008      	b.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008d1e:	7cfb      	ldrb	r3, [r7, #19]
 8008d20:	74bb      	strb	r3, [r7, #18]
 8008d22:	e005      	b.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008d24:	40021000 	.word	0x40021000
 8008d28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d2c:	7cfb      	ldrb	r3, [r7, #19]
 8008d2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008d30:	7c7b      	ldrb	r3, [r7, #17]
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d105      	bne.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d36:	4ba7      	ldr	r3, [pc, #668]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d3a:	4aa6      	ldr	r2, [pc, #664]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d40:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 0301 	and.w	r3, r3, #1
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d00a      	beq.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008d4e:	4ba1      	ldr	r3, [pc, #644]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d54:	f023 0203 	bic.w	r2, r3, #3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	499d      	ldr	r1, [pc, #628]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 0302 	and.w	r3, r3, #2
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d00a      	beq.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008d70:	4b98      	ldr	r3, [pc, #608]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d76:	f023 020c 	bic.w	r2, r3, #12
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	4995      	ldr	r1, [pc, #596]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d80:	4313      	orrs	r3, r2
 8008d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f003 0304 	and.w	r3, r3, #4
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00a      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008d92:	4b90      	ldr	r3, [pc, #576]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d98:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	498c      	ldr	r1, [pc, #560]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008da2:	4313      	orrs	r3, r2
 8008da4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 0308 	and.w	r3, r3, #8
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00a      	beq.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008db4:	4b87      	ldr	r3, [pc, #540]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	4984      	ldr	r1, [pc, #528]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f003 0310 	and.w	r3, r3, #16
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00a      	beq.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008dd6:	4b7f      	ldr	r3, [pc, #508]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ddc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	695b      	ldr	r3, [r3, #20]
 8008de4:	497b      	ldr	r1, [pc, #492]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008de6:	4313      	orrs	r3, r2
 8008de8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0320 	and.w	r3, r3, #32
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00a      	beq.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008df8:	4b76      	ldr	r3, [pc, #472]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dfe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	699b      	ldr	r3, [r3, #24]
 8008e06:	4973      	ldr	r1, [pc, #460]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00a      	beq.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008e1a:	4b6e      	ldr	r3, [pc, #440]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e20:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	69db      	ldr	r3, [r3, #28]
 8008e28:	496a      	ldr	r1, [pc, #424]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00a      	beq.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008e3c:	4b65      	ldr	r3, [pc, #404]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e42:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a1b      	ldr	r3, [r3, #32]
 8008e4a:	4962      	ldr	r1, [pc, #392]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00a      	beq.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008e5e:	4b5d      	ldr	r3, [pc, #372]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e64:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e6c:	4959      	ldr	r1, [pc, #356]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00a      	beq.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008e80:	4b54      	ldr	r3, [pc, #336]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e86:	f023 0203 	bic.w	r2, r3, #3
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e8e:	4951      	ldr	r1, [pc, #324]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e90:	4313      	orrs	r3, r2
 8008e92:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00a      	beq.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ea2:	4b4c      	ldr	r3, [pc, #304]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ea8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb0:	4948      	ldr	r1, [pc, #288]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d015      	beq.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008ec4:	4b43      	ldr	r3, [pc, #268]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008eca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ed2:	4940      	ldr	r1, [pc, #256]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ede:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ee2:	d105      	bne.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ee4:	4b3b      	ldr	r3, [pc, #236]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	4a3a      	ldr	r2, [pc, #232]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008eea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008eee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d015      	beq.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008efc:	4b35      	ldr	r3, [pc, #212]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f02:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f0a:	4932      	ldr	r1, [pc, #200]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f1a:	d105      	bne.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	4a2c      	ldr	r2, [pc, #176]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f26:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d015      	beq.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008f34:	4b27      	ldr	r3, [pc, #156]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f3a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f42:	4924      	ldr	r1, [pc, #144]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f44:	4313      	orrs	r3, r2
 8008f46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f52:	d105      	bne.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008f54:	4b1f      	ldr	r3, [pc, #124]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	4a1e      	ldr	r2, [pc, #120]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f5e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d015      	beq.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008f6c:	4b19      	ldr	r3, [pc, #100]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f72:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f7a:	4916      	ldr	r1, [pc, #88]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f8a:	d105      	bne.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008f8c:	4b11      	ldr	r3, [pc, #68]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	4a10      	ldr	r2, [pc, #64]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f96:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d019      	beq.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008faa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fb2:	4908      	ldr	r1, [pc, #32]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fc2:	d109      	bne.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008fc4:	4b03      	ldr	r3, [pc, #12]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	4a02      	ldr	r2, [pc, #8]	@ (8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008fce:	60d3      	str	r3, [r2, #12]
 8008fd0:	e002      	b.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008fd2:	bf00      	nop
 8008fd4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d015      	beq.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008fe4:	4b29      	ldr	r3, [pc, #164]	@ (800908c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ff2:	4926      	ldr	r1, [pc, #152]	@ (800908c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ffe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009002:	d105      	bne.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009004:	4b21      	ldr	r3, [pc, #132]	@ (800908c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	4a20      	ldr	r2, [pc, #128]	@ (800908c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800900a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800900e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009018:	2b00      	cmp	r3, #0
 800901a:	d015      	beq.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800901c:	4b1b      	ldr	r3, [pc, #108]	@ (800908c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800901e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009022:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800902a:	4918      	ldr	r1, [pc, #96]	@ (800908c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800902c:	4313      	orrs	r3, r2
 800902e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800903a:	d105      	bne.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800903c:	4b13      	ldr	r3, [pc, #76]	@ (800908c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	4a12      	ldr	r2, [pc, #72]	@ (800908c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009042:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009046:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009050:	2b00      	cmp	r3, #0
 8009052:	d015      	beq.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009054:	4b0d      	ldr	r3, [pc, #52]	@ (800908c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009056:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800905a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009062:	490a      	ldr	r1, [pc, #40]	@ (800908c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009064:	4313      	orrs	r3, r2
 8009066:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800906e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009072:	d105      	bne.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009074:	4b05      	ldr	r3, [pc, #20]	@ (800908c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	4a04      	ldr	r2, [pc, #16]	@ (800908c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800907a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800907e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009080:	7cbb      	ldrb	r3, [r7, #18]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3718      	adds	r7, #24
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	40021000 	.word	0x40021000

08009090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d101      	bne.n	80090a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	e054      	b.n	800914c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d111      	bne.n	80090d2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f001 feec 	bl	800ae94 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d102      	bne.n	80090ca <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a23      	ldr	r2, [pc, #140]	@ (8009154 <HAL_TIM_Base_Init+0xc4>)
 80090c8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2202      	movs	r2, #2
 80090d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	3304      	adds	r3, #4
 80090e2:	4619      	mov	r1, r3
 80090e4:	4610      	mov	r0, r2
 80090e6:	f001 fa35 	bl	800a554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2201      	movs	r2, #1
 80090ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2201      	movs	r2, #1
 80090f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2201      	movs	r2, #1
 80090fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2201      	movs	r2, #1
 8009106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2201      	movs	r2, #1
 800910e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2201      	movs	r2, #1
 8009116:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2201      	movs	r2, #1
 800911e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2201      	movs	r2, #1
 8009126:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2201      	movs	r2, #1
 800912e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2201      	movs	r2, #1
 8009136:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2201      	movs	r2, #1
 800913e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2201      	movs	r2, #1
 8009146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800914a:	2300      	movs	r3, #0
}
 800914c:	4618      	mov	r0, r3
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}
 8009154:	080051b1 	.word	0x080051b1

08009158 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009166:	b2db      	uxtb	r3, r3
 8009168:	2b01      	cmp	r3, #1
 800916a:	d001      	beq.n	8009170 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800916c:	2301      	movs	r3, #1
 800916e:	e04c      	b.n	800920a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2202      	movs	r2, #2
 8009174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a26      	ldr	r2, [pc, #152]	@ (8009218 <HAL_TIM_Base_Start+0xc0>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d022      	beq.n	80091c8 <HAL_TIM_Base_Start+0x70>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800918a:	d01d      	beq.n	80091c8 <HAL_TIM_Base_Start+0x70>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a22      	ldr	r2, [pc, #136]	@ (800921c <HAL_TIM_Base_Start+0xc4>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d018      	beq.n	80091c8 <HAL_TIM_Base_Start+0x70>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a21      	ldr	r2, [pc, #132]	@ (8009220 <HAL_TIM_Base_Start+0xc8>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d013      	beq.n	80091c8 <HAL_TIM_Base_Start+0x70>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a1f      	ldr	r2, [pc, #124]	@ (8009224 <HAL_TIM_Base_Start+0xcc>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d00e      	beq.n	80091c8 <HAL_TIM_Base_Start+0x70>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a1e      	ldr	r2, [pc, #120]	@ (8009228 <HAL_TIM_Base_Start+0xd0>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d009      	beq.n	80091c8 <HAL_TIM_Base_Start+0x70>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a1c      	ldr	r2, [pc, #112]	@ (800922c <HAL_TIM_Base_Start+0xd4>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d004      	beq.n	80091c8 <HAL_TIM_Base_Start+0x70>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a1b      	ldr	r2, [pc, #108]	@ (8009230 <HAL_TIM_Base_Start+0xd8>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d115      	bne.n	80091f4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	689a      	ldr	r2, [r3, #8]
 80091ce:	4b19      	ldr	r3, [pc, #100]	@ (8009234 <HAL_TIM_Base_Start+0xdc>)
 80091d0:	4013      	ands	r3, r2
 80091d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2b06      	cmp	r3, #6
 80091d8:	d015      	beq.n	8009206 <HAL_TIM_Base_Start+0xae>
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091e0:	d011      	beq.n	8009206 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f042 0201 	orr.w	r2, r2, #1
 80091f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091f2:	e008      	b.n	8009206 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f042 0201 	orr.w	r2, r2, #1
 8009202:	601a      	str	r2, [r3, #0]
 8009204:	e000      	b.n	8009208 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009206:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3714      	adds	r7, #20
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	40012c00 	.word	0x40012c00
 800921c:	40000400 	.word	0x40000400
 8009220:	40000800 	.word	0x40000800
 8009224:	40000c00 	.word	0x40000c00
 8009228:	40013400 	.word	0x40013400
 800922c:	40014000 	.word	0x40014000
 8009230:	40015000 	.word	0x40015000
 8009234:	00010007 	.word	0x00010007

08009238 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009246:	b2db      	uxtb	r3, r3
 8009248:	2b01      	cmp	r3, #1
 800924a:	d001      	beq.n	8009250 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	e054      	b.n	80092fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2202      	movs	r2, #2
 8009254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68da      	ldr	r2, [r3, #12]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f042 0201 	orr.w	r2, r2, #1
 8009266:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a26      	ldr	r2, [pc, #152]	@ (8009308 <HAL_TIM_Base_Start_IT+0xd0>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d022      	beq.n	80092b8 <HAL_TIM_Base_Start_IT+0x80>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800927a:	d01d      	beq.n	80092b8 <HAL_TIM_Base_Start_IT+0x80>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a22      	ldr	r2, [pc, #136]	@ (800930c <HAL_TIM_Base_Start_IT+0xd4>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d018      	beq.n	80092b8 <HAL_TIM_Base_Start_IT+0x80>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a21      	ldr	r2, [pc, #132]	@ (8009310 <HAL_TIM_Base_Start_IT+0xd8>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d013      	beq.n	80092b8 <HAL_TIM_Base_Start_IT+0x80>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a1f      	ldr	r2, [pc, #124]	@ (8009314 <HAL_TIM_Base_Start_IT+0xdc>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d00e      	beq.n	80092b8 <HAL_TIM_Base_Start_IT+0x80>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a1e      	ldr	r2, [pc, #120]	@ (8009318 <HAL_TIM_Base_Start_IT+0xe0>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d009      	beq.n	80092b8 <HAL_TIM_Base_Start_IT+0x80>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a1c      	ldr	r2, [pc, #112]	@ (800931c <HAL_TIM_Base_Start_IT+0xe4>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d004      	beq.n	80092b8 <HAL_TIM_Base_Start_IT+0x80>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a1b      	ldr	r2, [pc, #108]	@ (8009320 <HAL_TIM_Base_Start_IT+0xe8>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d115      	bne.n	80092e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	689a      	ldr	r2, [r3, #8]
 80092be:	4b19      	ldr	r3, [pc, #100]	@ (8009324 <HAL_TIM_Base_Start_IT+0xec>)
 80092c0:	4013      	ands	r3, r2
 80092c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2b06      	cmp	r3, #6
 80092c8:	d015      	beq.n	80092f6 <HAL_TIM_Base_Start_IT+0xbe>
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092d0:	d011      	beq.n	80092f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f042 0201 	orr.w	r2, r2, #1
 80092e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092e2:	e008      	b.n	80092f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f042 0201 	orr.w	r2, r2, #1
 80092f2:	601a      	str	r2, [r3, #0]
 80092f4:	e000      	b.n	80092f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3714      	adds	r7, #20
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop
 8009308:	40012c00 	.word	0x40012c00
 800930c:	40000400 	.word	0x40000400
 8009310:	40000800 	.word	0x40000800
 8009314:	40000c00 	.word	0x40000c00
 8009318:	40013400 	.word	0x40013400
 800931c:	40014000 	.word	0x40014000
 8009320:	40015000 	.word	0x40015000
 8009324:	00010007 	.word	0x00010007

08009328 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d101      	bne.n	800933a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009336:	2301      	movs	r3, #1
 8009338:	e054      	b.n	80093e4 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009340:	b2db      	uxtb	r3, r3
 8009342:	2b00      	cmp	r3, #0
 8009344:	d111      	bne.n	800936a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f001 fda0 	bl	800ae94 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009358:	2b00      	cmp	r3, #0
 800935a:	d102      	bne.n	8009362 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a23      	ldr	r2, [pc, #140]	@ (80093ec <HAL_TIM_PWM_Init+0xc4>)
 8009360:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2202      	movs	r2, #2
 800936e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	3304      	adds	r3, #4
 800937a:	4619      	mov	r1, r3
 800937c:	4610      	mov	r0, r2
 800937e:	f001 f8e9 	bl	800a554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2201      	movs	r2, #1
 8009386:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2201      	movs	r2, #1
 800938e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2201      	movs	r2, #1
 8009396:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2201      	movs	r2, #1
 800939e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2201      	movs	r2, #1
 80093a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2201      	movs	r2, #1
 80093ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2201      	movs	r2, #1
 80093b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2201      	movs	r2, #1
 80093be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2201      	movs	r2, #1
 80093c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2201      	movs	r2, #1
 80093ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2201      	movs	r2, #1
 80093d6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2201      	movs	r2, #1
 80093de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	080093f1 	.word	0x080093f1

080093f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80093f8:	bf00      	nop
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d109      	bne.n	8009428 <HAL_TIM_PWM_Start+0x24>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800941a:	b2db      	uxtb	r3, r3
 800941c:	2b01      	cmp	r3, #1
 800941e:	bf14      	ite	ne
 8009420:	2301      	movne	r3, #1
 8009422:	2300      	moveq	r3, #0
 8009424:	b2db      	uxtb	r3, r3
 8009426:	e03c      	b.n	80094a2 <HAL_TIM_PWM_Start+0x9e>
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	2b04      	cmp	r3, #4
 800942c:	d109      	bne.n	8009442 <HAL_TIM_PWM_Start+0x3e>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009434:	b2db      	uxtb	r3, r3
 8009436:	2b01      	cmp	r3, #1
 8009438:	bf14      	ite	ne
 800943a:	2301      	movne	r3, #1
 800943c:	2300      	moveq	r3, #0
 800943e:	b2db      	uxtb	r3, r3
 8009440:	e02f      	b.n	80094a2 <HAL_TIM_PWM_Start+0x9e>
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	2b08      	cmp	r3, #8
 8009446:	d109      	bne.n	800945c <HAL_TIM_PWM_Start+0x58>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800944e:	b2db      	uxtb	r3, r3
 8009450:	2b01      	cmp	r3, #1
 8009452:	bf14      	ite	ne
 8009454:	2301      	movne	r3, #1
 8009456:	2300      	moveq	r3, #0
 8009458:	b2db      	uxtb	r3, r3
 800945a:	e022      	b.n	80094a2 <HAL_TIM_PWM_Start+0x9e>
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	2b0c      	cmp	r3, #12
 8009460:	d109      	bne.n	8009476 <HAL_TIM_PWM_Start+0x72>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009468:	b2db      	uxtb	r3, r3
 800946a:	2b01      	cmp	r3, #1
 800946c:	bf14      	ite	ne
 800946e:	2301      	movne	r3, #1
 8009470:	2300      	moveq	r3, #0
 8009472:	b2db      	uxtb	r3, r3
 8009474:	e015      	b.n	80094a2 <HAL_TIM_PWM_Start+0x9e>
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	2b10      	cmp	r3, #16
 800947a:	d109      	bne.n	8009490 <HAL_TIM_PWM_Start+0x8c>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009482:	b2db      	uxtb	r3, r3
 8009484:	2b01      	cmp	r3, #1
 8009486:	bf14      	ite	ne
 8009488:	2301      	movne	r3, #1
 800948a:	2300      	moveq	r3, #0
 800948c:	b2db      	uxtb	r3, r3
 800948e:	e008      	b.n	80094a2 <HAL_TIM_PWM_Start+0x9e>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009496:	b2db      	uxtb	r3, r3
 8009498:	2b01      	cmp	r3, #1
 800949a:	bf14      	ite	ne
 800949c:	2301      	movne	r3, #1
 800949e:	2300      	moveq	r3, #0
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d001      	beq.n	80094aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e0a6      	b.n	80095f8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d104      	bne.n	80094ba <HAL_TIM_PWM_Start+0xb6>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2202      	movs	r2, #2
 80094b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80094b8:	e023      	b.n	8009502 <HAL_TIM_PWM_Start+0xfe>
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	2b04      	cmp	r3, #4
 80094be:	d104      	bne.n	80094ca <HAL_TIM_PWM_Start+0xc6>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2202      	movs	r2, #2
 80094c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80094c8:	e01b      	b.n	8009502 <HAL_TIM_PWM_Start+0xfe>
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	2b08      	cmp	r3, #8
 80094ce:	d104      	bne.n	80094da <HAL_TIM_PWM_Start+0xd6>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2202      	movs	r2, #2
 80094d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80094d8:	e013      	b.n	8009502 <HAL_TIM_PWM_Start+0xfe>
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	2b0c      	cmp	r3, #12
 80094de:	d104      	bne.n	80094ea <HAL_TIM_PWM_Start+0xe6>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2202      	movs	r2, #2
 80094e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80094e8:	e00b      	b.n	8009502 <HAL_TIM_PWM_Start+0xfe>
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	2b10      	cmp	r3, #16
 80094ee:	d104      	bne.n	80094fa <HAL_TIM_PWM_Start+0xf6>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2202      	movs	r2, #2
 80094f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80094f8:	e003      	b.n	8009502 <HAL_TIM_PWM_Start+0xfe>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2202      	movs	r2, #2
 80094fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2201      	movs	r2, #1
 8009508:	6839      	ldr	r1, [r7, #0]
 800950a:	4618      	mov	r0, r3
 800950c:	f001 fc9c 	bl	800ae48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a3a      	ldr	r2, [pc, #232]	@ (8009600 <HAL_TIM_PWM_Start+0x1fc>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d018      	beq.n	800954c <HAL_TIM_PWM_Start+0x148>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a39      	ldr	r2, [pc, #228]	@ (8009604 <HAL_TIM_PWM_Start+0x200>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d013      	beq.n	800954c <HAL_TIM_PWM_Start+0x148>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a37      	ldr	r2, [pc, #220]	@ (8009608 <HAL_TIM_PWM_Start+0x204>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d00e      	beq.n	800954c <HAL_TIM_PWM_Start+0x148>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a36      	ldr	r2, [pc, #216]	@ (800960c <HAL_TIM_PWM_Start+0x208>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d009      	beq.n	800954c <HAL_TIM_PWM_Start+0x148>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a34      	ldr	r2, [pc, #208]	@ (8009610 <HAL_TIM_PWM_Start+0x20c>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d004      	beq.n	800954c <HAL_TIM_PWM_Start+0x148>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a33      	ldr	r2, [pc, #204]	@ (8009614 <HAL_TIM_PWM_Start+0x210>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d101      	bne.n	8009550 <HAL_TIM_PWM_Start+0x14c>
 800954c:	2301      	movs	r3, #1
 800954e:	e000      	b.n	8009552 <HAL_TIM_PWM_Start+0x14e>
 8009550:	2300      	movs	r3, #0
 8009552:	2b00      	cmp	r3, #0
 8009554:	d007      	beq.n	8009566 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009564:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a25      	ldr	r2, [pc, #148]	@ (8009600 <HAL_TIM_PWM_Start+0x1fc>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d022      	beq.n	80095b6 <HAL_TIM_PWM_Start+0x1b2>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009578:	d01d      	beq.n	80095b6 <HAL_TIM_PWM_Start+0x1b2>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a26      	ldr	r2, [pc, #152]	@ (8009618 <HAL_TIM_PWM_Start+0x214>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d018      	beq.n	80095b6 <HAL_TIM_PWM_Start+0x1b2>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a24      	ldr	r2, [pc, #144]	@ (800961c <HAL_TIM_PWM_Start+0x218>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d013      	beq.n	80095b6 <HAL_TIM_PWM_Start+0x1b2>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a23      	ldr	r2, [pc, #140]	@ (8009620 <HAL_TIM_PWM_Start+0x21c>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d00e      	beq.n	80095b6 <HAL_TIM_PWM_Start+0x1b2>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a19      	ldr	r2, [pc, #100]	@ (8009604 <HAL_TIM_PWM_Start+0x200>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d009      	beq.n	80095b6 <HAL_TIM_PWM_Start+0x1b2>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a18      	ldr	r2, [pc, #96]	@ (8009608 <HAL_TIM_PWM_Start+0x204>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d004      	beq.n	80095b6 <HAL_TIM_PWM_Start+0x1b2>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a18      	ldr	r2, [pc, #96]	@ (8009614 <HAL_TIM_PWM_Start+0x210>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d115      	bne.n	80095e2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	689a      	ldr	r2, [r3, #8]
 80095bc:	4b19      	ldr	r3, [pc, #100]	@ (8009624 <HAL_TIM_PWM_Start+0x220>)
 80095be:	4013      	ands	r3, r2
 80095c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2b06      	cmp	r3, #6
 80095c6:	d015      	beq.n	80095f4 <HAL_TIM_PWM_Start+0x1f0>
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095ce:	d011      	beq.n	80095f4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f042 0201 	orr.w	r2, r2, #1
 80095de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095e0:	e008      	b.n	80095f4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f042 0201 	orr.w	r2, r2, #1
 80095f0:	601a      	str	r2, [r3, #0]
 80095f2:	e000      	b.n	80095f6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3710      	adds	r7, #16
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	40012c00 	.word	0x40012c00
 8009604:	40013400 	.word	0x40013400
 8009608:	40014000 	.word	0x40014000
 800960c:	40014400 	.word	0x40014400
 8009610:	40014800 	.word	0x40014800
 8009614:	40015000 	.word	0x40015000
 8009618:	40000400 	.word	0x40000400
 800961c:	40000800 	.word	0x40000800
 8009620:	40000c00 	.word	0x40000c00
 8009624:	00010007 	.word	0x00010007

08009628 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d101      	bne.n	800963c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8009638:	2301      	movs	r3, #1
 800963a:	e04c      	b.n	80096d6 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009642:	b2db      	uxtb	r3, r3
 8009644:	2b00      	cmp	r3, #0
 8009646:	d111      	bne.n	800966c <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2200      	movs	r2, #0
 800964c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f001 fc1f 	bl	800ae94 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800965a:	2b00      	cmp	r3, #0
 800965c:	d102      	bne.n	8009664 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a1f      	ldr	r2, [pc, #124]	@ (80096e0 <HAL_TIM_OnePulse_Init+0xb8>)
 8009662:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2202      	movs	r2, #2
 8009670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	3304      	adds	r3, #4
 800967c:	4619      	mov	r1, r3
 800967e:	4610      	mov	r0, r2
 8009680:	f000 ff68 	bl	800a554 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f022 0208 	bic.w	r2, r2, #8
 8009692:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	6819      	ldr	r1, [r3, #0]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	683a      	ldr	r2, [r7, #0]
 80096a0:	430a      	orrs	r2, r1
 80096a2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2201      	movs	r2, #1
 80096c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	080096e5 	.word	0x080096e5

080096e4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80096ec:	bf00      	nop
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009708:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009710:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009718:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009720:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009722:	7bfb      	ldrb	r3, [r7, #15]
 8009724:	2b01      	cmp	r3, #1
 8009726:	d108      	bne.n	800973a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009728:	7bbb      	ldrb	r3, [r7, #14]
 800972a:	2b01      	cmp	r3, #1
 800972c:	d105      	bne.n	800973a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800972e:	7b7b      	ldrb	r3, [r7, #13]
 8009730:	2b01      	cmp	r3, #1
 8009732:	d102      	bne.n	800973a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009734:	7b3b      	ldrb	r3, [r7, #12]
 8009736:	2b01      	cmp	r3, #1
 8009738:	d001      	beq.n	800973e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	e059      	b.n	80097f2 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2202      	movs	r2, #2
 8009742:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2202      	movs	r2, #2
 800974a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2202      	movs	r2, #2
 8009752:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2202      	movs	r2, #2
 800975a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	68da      	ldr	r2, [r3, #12]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f042 0202 	orr.w	r2, r2, #2
 800976c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	68da      	ldr	r2, [r3, #12]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f042 0204 	orr.w	r2, r2, #4
 800977c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2201      	movs	r2, #1
 8009784:	2100      	movs	r1, #0
 8009786:	4618      	mov	r0, r3
 8009788:	f001 fb5e 	bl	800ae48 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2201      	movs	r2, #1
 8009792:	2104      	movs	r1, #4
 8009794:	4618      	mov	r0, r3
 8009796:	f001 fb57 	bl	800ae48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a17      	ldr	r2, [pc, #92]	@ (80097fc <HAL_TIM_OnePulse_Start_IT+0x104>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d018      	beq.n	80097d6 <HAL_TIM_OnePulse_Start_IT+0xde>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a15      	ldr	r2, [pc, #84]	@ (8009800 <HAL_TIM_OnePulse_Start_IT+0x108>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d013      	beq.n	80097d6 <HAL_TIM_OnePulse_Start_IT+0xde>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a14      	ldr	r2, [pc, #80]	@ (8009804 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d00e      	beq.n	80097d6 <HAL_TIM_OnePulse_Start_IT+0xde>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a12      	ldr	r2, [pc, #72]	@ (8009808 <HAL_TIM_OnePulse_Start_IT+0x110>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d009      	beq.n	80097d6 <HAL_TIM_OnePulse_Start_IT+0xde>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a11      	ldr	r2, [pc, #68]	@ (800980c <HAL_TIM_OnePulse_Start_IT+0x114>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d004      	beq.n	80097d6 <HAL_TIM_OnePulse_Start_IT+0xde>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a0f      	ldr	r2, [pc, #60]	@ (8009810 <HAL_TIM_OnePulse_Start_IT+0x118>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d101      	bne.n	80097da <HAL_TIM_OnePulse_Start_IT+0xe2>
 80097d6:	2301      	movs	r3, #1
 80097d8:	e000      	b.n	80097dc <HAL_TIM_OnePulse_Start_IT+0xe4>
 80097da:	2300      	movs	r3, #0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d007      	beq.n	80097f0 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80097ee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80097f0:	2300      	movs	r3, #0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	40012c00 	.word	0x40012c00
 8009800:	40013400 	.word	0x40013400
 8009804:	40014000 	.word	0x40014000
 8009808:	40014400 	.word	0x40014400
 800980c:	40014800 	.word	0x40014800
 8009810:	40015000 	.word	0x40015000

08009814 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b086      	sub	sp, #24
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d101      	bne.n	8009828 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	e0a2      	b.n	800996e <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800982e:	b2db      	uxtb	r3, r3
 8009830:	2b00      	cmp	r3, #0
 8009832:	d111      	bne.n	8009858 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f001 fb29 	bl	800ae94 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009846:	2b00      	cmp	r3, #0
 8009848:	d102      	bne.n	8009850 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a4a      	ldr	r2, [pc, #296]	@ (8009978 <HAL_TIM_Encoder_Init+0x164>)
 800984e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2202      	movs	r2, #2
 800985c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	6812      	ldr	r2, [r2, #0]
 800986a:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800986e:	f023 0307 	bic.w	r3, r3, #7
 8009872:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	3304      	adds	r3, #4
 800987c:	4619      	mov	r1, r3
 800987e:	4610      	mov	r0, r2
 8009880:	f000 fe68 	bl	800a554 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	699b      	ldr	r3, [r3, #24]
 8009892:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	6a1b      	ldr	r3, [r3, #32]
 800989a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	697a      	ldr	r2, [r7, #20]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098ac:	f023 0303 	bic.w	r3, r3, #3
 80098b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	689a      	ldr	r2, [r3, #8]
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	699b      	ldr	r3, [r3, #24]
 80098ba:	021b      	lsls	r3, r3, #8
 80098bc:	4313      	orrs	r3, r2
 80098be:	693a      	ldr	r2, [r7, #16]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80098ca:	f023 030c 	bic.w	r3, r3, #12
 80098ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80098d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80098da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	68da      	ldr	r2, [r3, #12]
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	69db      	ldr	r3, [r3, #28]
 80098e4:	021b      	lsls	r3, r3, #8
 80098e6:	4313      	orrs	r3, r2
 80098e8:	693a      	ldr	r2, [r7, #16]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	691b      	ldr	r3, [r3, #16]
 80098f2:	011a      	lsls	r2, r3, #4
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	6a1b      	ldr	r3, [r3, #32]
 80098f8:	031b      	lsls	r3, r3, #12
 80098fa:	4313      	orrs	r3, r2
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	4313      	orrs	r3, r2
 8009900:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8009908:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8009910:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	685a      	ldr	r2, [r3, #4]
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	011b      	lsls	r3, r3, #4
 800991c:	4313      	orrs	r3, r2
 800991e:	68fa      	ldr	r2, [r7, #12]
 8009920:	4313      	orrs	r3, r2
 8009922:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	697a      	ldr	r2, [r7, #20]
 800992a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	693a      	ldr	r2, [r7, #16]
 8009932:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	68fa      	ldr	r2, [r7, #12]
 800993a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2201      	movs	r2, #1
 8009948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2201      	movs	r2, #1
 8009958:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2201      	movs	r2, #1
 8009960:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2201      	movs	r2, #1
 8009968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3718      	adds	r7, #24
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	080052c9 	.word	0x080052c9

0800997c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800998c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009994:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800999c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80099a4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d110      	bne.n	80099ce <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d102      	bne.n	80099b8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80099b2:	7b7b      	ldrb	r3, [r7, #13]
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d001      	beq.n	80099bc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
 80099ba:	e069      	b.n	8009a90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2202      	movs	r2, #2
 80099c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2202      	movs	r2, #2
 80099c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099cc:	e031      	b.n	8009a32 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	2b04      	cmp	r3, #4
 80099d2:	d110      	bne.n	80099f6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80099d4:	7bbb      	ldrb	r3, [r7, #14]
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d102      	bne.n	80099e0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80099da:	7b3b      	ldrb	r3, [r7, #12]
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d001      	beq.n	80099e4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	e055      	b.n	8009a90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2202      	movs	r2, #2
 80099e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2202      	movs	r2, #2
 80099f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80099f4:	e01d      	b.n	8009a32 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80099f6:	7bfb      	ldrb	r3, [r7, #15]
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d108      	bne.n	8009a0e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80099fc:	7bbb      	ldrb	r3, [r7, #14]
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d105      	bne.n	8009a0e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a02:	7b7b      	ldrb	r3, [r7, #13]
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d102      	bne.n	8009a0e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009a08:	7b3b      	ldrb	r3, [r7, #12]
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d001      	beq.n	8009a12 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e03e      	b.n	8009a90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2202      	movs	r2, #2
 8009a16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2202      	movs	r2, #2
 8009a1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2202      	movs	r2, #2
 8009a26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2202      	movs	r2, #2
 8009a2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d003      	beq.n	8009a40 <HAL_TIM_Encoder_Start+0xc4>
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	2b04      	cmp	r3, #4
 8009a3c:	d008      	beq.n	8009a50 <HAL_TIM_Encoder_Start+0xd4>
 8009a3e:	e00f      	b.n	8009a60 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	2201      	movs	r2, #1
 8009a46:	2100      	movs	r1, #0
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f001 f9fd 	bl	800ae48 <TIM_CCxChannelCmd>
      break;
 8009a4e:	e016      	b.n	8009a7e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2201      	movs	r2, #1
 8009a56:	2104      	movs	r1, #4
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f001 f9f5 	bl	800ae48 <TIM_CCxChannelCmd>
      break;
 8009a5e:	e00e      	b.n	8009a7e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2201      	movs	r2, #1
 8009a66:	2100      	movs	r1, #0
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f001 f9ed 	bl	800ae48 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2201      	movs	r2, #1
 8009a74:	2104      	movs	r1, #4
 8009a76:	4618      	mov	r0, r3
 8009a78:	f001 f9e6 	bl	800ae48 <TIM_CCxChannelCmd>
      break;
 8009a7c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f042 0201 	orr.w	r2, r2, #1
 8009a8c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009a8e:	2300      	movs	r3, #0
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3710      	adds	r7, #16
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	f003 0302 	and.w	r3, r3, #2
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d026      	beq.n	8009b08 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f003 0302 	and.w	r3, r3, #2
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d021      	beq.n	8009b08 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f06f 0202 	mvn.w	r2, #2
 8009acc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	699b      	ldr	r3, [r3, #24]
 8009ada:	f003 0303 	and.w	r3, r3, #3
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d005      	beq.n	8009aee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	4798      	blx	r3
 8009aec:	e009      	b.n	8009b02 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	f003 0304 	and.w	r3, r3, #4
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d026      	beq.n	8009b60 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f003 0304 	and.w	r3, r3, #4
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d021      	beq.n	8009b60 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f06f 0204 	mvn.w	r2, #4
 8009b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2202      	movs	r2, #2
 8009b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	699b      	ldr	r3, [r3, #24]
 8009b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d005      	beq.n	8009b46 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	4798      	blx	r3
 8009b44:	e009      	b.n	8009b5a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	f003 0308 	and.w	r3, r3, #8
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d026      	beq.n	8009bb8 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f003 0308 	and.w	r3, r3, #8
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d021      	beq.n	8009bb8 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f06f 0208 	mvn.w	r2, #8
 8009b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2204      	movs	r2, #4
 8009b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	69db      	ldr	r3, [r3, #28]
 8009b8a:	f003 0303 	and.w	r3, r3, #3
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d005      	beq.n	8009b9e <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	4798      	blx	r3
 8009b9c:	e009      	b.n	8009bb2 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	f003 0310 	and.w	r3, r3, #16
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d026      	beq.n	8009c10 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f003 0310 	and.w	r3, r3, #16
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d021      	beq.n	8009c10 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f06f 0210 	mvn.w	r2, #16
 8009bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2208      	movs	r2, #8
 8009bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	69db      	ldr	r3, [r3, #28]
 8009be2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d005      	beq.n	8009bf6 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	4798      	blx	r3
 8009bf4:	e009      	b.n	8009c0a <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	f003 0301 	and.w	r3, r3, #1
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d00e      	beq.n	8009c38 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f003 0301 	and.w	r3, r3, #1
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d009      	beq.n	8009c38 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f06f 0201 	mvn.w	r2, #1
 8009c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d104      	bne.n	8009c4c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d00e      	beq.n	8009c6a <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d009      	beq.n	8009c6a <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d00e      	beq.n	8009c92 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d009      	beq.n	8009c92 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d00e      	beq.n	8009cba <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d009      	beq.n	8009cba <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	f003 0320 	and.w	r3, r3, #32
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d00e      	beq.n	8009ce2 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f003 0320 	and.w	r3, r3, #32
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d009      	beq.n	8009ce2 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f06f 0220 	mvn.w	r2, #32
 8009cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d00e      	beq.n	8009d0a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d009      	beq.n	8009d0a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00e      	beq.n	8009d32 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d009      	beq.n	8009d32 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d00e      	beq.n	8009d5a <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d009      	beq.n	8009d5a <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d00e      	beq.n	8009d82 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d009      	beq.n	8009d82 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d82:	bf00      	nop
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
	...

08009d8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d101      	bne.n	8009daa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009da6:	2302      	movs	r3, #2
 8009da8:	e0ff      	b.n	8009faa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2201      	movs	r2, #1
 8009dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2b14      	cmp	r3, #20
 8009db6:	f200 80f0 	bhi.w	8009f9a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009dba:	a201      	add	r2, pc, #4	@ (adr r2, 8009dc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc0:	08009e15 	.word	0x08009e15
 8009dc4:	08009f9b 	.word	0x08009f9b
 8009dc8:	08009f9b 	.word	0x08009f9b
 8009dcc:	08009f9b 	.word	0x08009f9b
 8009dd0:	08009e55 	.word	0x08009e55
 8009dd4:	08009f9b 	.word	0x08009f9b
 8009dd8:	08009f9b 	.word	0x08009f9b
 8009ddc:	08009f9b 	.word	0x08009f9b
 8009de0:	08009e97 	.word	0x08009e97
 8009de4:	08009f9b 	.word	0x08009f9b
 8009de8:	08009f9b 	.word	0x08009f9b
 8009dec:	08009f9b 	.word	0x08009f9b
 8009df0:	08009ed7 	.word	0x08009ed7
 8009df4:	08009f9b 	.word	0x08009f9b
 8009df8:	08009f9b 	.word	0x08009f9b
 8009dfc:	08009f9b 	.word	0x08009f9b
 8009e00:	08009f19 	.word	0x08009f19
 8009e04:	08009f9b 	.word	0x08009f9b
 8009e08:	08009f9b 	.word	0x08009f9b
 8009e0c:	08009f9b 	.word	0x08009f9b
 8009e10:	08009f59 	.word	0x08009f59
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	68b9      	ldr	r1, [r7, #8]
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f000 fc4e 	bl	800a6bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	699a      	ldr	r2, [r3, #24]
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f042 0208 	orr.w	r2, r2, #8
 8009e2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	699a      	ldr	r2, [r3, #24]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f022 0204 	bic.w	r2, r2, #4
 8009e3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	6999      	ldr	r1, [r3, #24]
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	691a      	ldr	r2, [r3, #16]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	430a      	orrs	r2, r1
 8009e50:	619a      	str	r2, [r3, #24]
      break;
 8009e52:	e0a5      	b.n	8009fa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	68b9      	ldr	r1, [r7, #8]
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f000 fcc8 	bl	800a7f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	699a      	ldr	r2, [r3, #24]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009e6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	699a      	ldr	r2, [r3, #24]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	6999      	ldr	r1, [r3, #24]
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	691b      	ldr	r3, [r3, #16]
 8009e8a:	021a      	lsls	r2, r3, #8
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	430a      	orrs	r2, r1
 8009e92:	619a      	str	r2, [r3, #24]
      break;
 8009e94:	e084      	b.n	8009fa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	68b9      	ldr	r1, [r7, #8]
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f000 fd3b 	bl	800a918 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	69da      	ldr	r2, [r3, #28]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f042 0208 	orr.w	r2, r2, #8
 8009eb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	69da      	ldr	r2, [r3, #28]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f022 0204 	bic.w	r2, r2, #4
 8009ec0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	69d9      	ldr	r1, [r3, #28]
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	691a      	ldr	r2, [r3, #16]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	430a      	orrs	r2, r1
 8009ed2:	61da      	str	r2, [r3, #28]
      break;
 8009ed4:	e064      	b.n	8009fa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	68b9      	ldr	r1, [r7, #8]
 8009edc:	4618      	mov	r0, r3
 8009ede:	f000 fdad 	bl	800aa3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	69da      	ldr	r2, [r3, #28]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ef0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	69da      	ldr	r2, [r3, #28]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	69d9      	ldr	r1, [r3, #28]
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	691b      	ldr	r3, [r3, #16]
 8009f0c:	021a      	lsls	r2, r3, #8
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	430a      	orrs	r2, r1
 8009f14:	61da      	str	r2, [r3, #28]
      break;
 8009f16:	e043      	b.n	8009fa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	68b9      	ldr	r1, [r7, #8]
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f000 fe20 	bl	800ab64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f042 0208 	orr.w	r2, r2, #8
 8009f32:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f022 0204 	bic.w	r2, r2, #4
 8009f42:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	691a      	ldr	r2, [r3, #16]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	430a      	orrs	r2, r1
 8009f54:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009f56:	e023      	b.n	8009fa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	68b9      	ldr	r1, [r7, #8]
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f000 fe6a 	bl	800ac38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f72:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f82:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	021a      	lsls	r2, r3, #8
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	430a      	orrs	r2, r1
 8009f96:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009f98:	e002      	b.n	8009fa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	75fb      	strb	r3, [r7, #23]
      break;
 8009f9e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3718      	adds	r7, #24
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop

08009fb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d101      	bne.n	8009fd0 <HAL_TIM_ConfigClockSource+0x1c>
 8009fcc:	2302      	movs	r3, #2
 8009fce:	e0f6      	b.n	800a1be <HAL_TIM_ConfigClockSource+0x20a>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2202      	movs	r2, #2
 8009fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	689b      	ldr	r3, [r3, #8]
 8009fe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009fee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009ff2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009ffa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	68ba      	ldr	r2, [r7, #8]
 800a002:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a6f      	ldr	r2, [pc, #444]	@ (800a1c8 <HAL_TIM_ConfigClockSource+0x214>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	f000 80c1 	beq.w	800a192 <HAL_TIM_ConfigClockSource+0x1de>
 800a010:	4a6d      	ldr	r2, [pc, #436]	@ (800a1c8 <HAL_TIM_ConfigClockSource+0x214>)
 800a012:	4293      	cmp	r3, r2
 800a014:	f200 80c6 	bhi.w	800a1a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800a018:	4a6c      	ldr	r2, [pc, #432]	@ (800a1cc <HAL_TIM_ConfigClockSource+0x218>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	f000 80b9 	beq.w	800a192 <HAL_TIM_ConfigClockSource+0x1de>
 800a020:	4a6a      	ldr	r2, [pc, #424]	@ (800a1cc <HAL_TIM_ConfigClockSource+0x218>)
 800a022:	4293      	cmp	r3, r2
 800a024:	f200 80be 	bhi.w	800a1a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800a028:	4a69      	ldr	r2, [pc, #420]	@ (800a1d0 <HAL_TIM_ConfigClockSource+0x21c>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	f000 80b1 	beq.w	800a192 <HAL_TIM_ConfigClockSource+0x1de>
 800a030:	4a67      	ldr	r2, [pc, #412]	@ (800a1d0 <HAL_TIM_ConfigClockSource+0x21c>)
 800a032:	4293      	cmp	r3, r2
 800a034:	f200 80b6 	bhi.w	800a1a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800a038:	4a66      	ldr	r2, [pc, #408]	@ (800a1d4 <HAL_TIM_ConfigClockSource+0x220>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	f000 80a9 	beq.w	800a192 <HAL_TIM_ConfigClockSource+0x1de>
 800a040:	4a64      	ldr	r2, [pc, #400]	@ (800a1d4 <HAL_TIM_ConfigClockSource+0x220>)
 800a042:	4293      	cmp	r3, r2
 800a044:	f200 80ae 	bhi.w	800a1a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800a048:	4a63      	ldr	r2, [pc, #396]	@ (800a1d8 <HAL_TIM_ConfigClockSource+0x224>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	f000 80a1 	beq.w	800a192 <HAL_TIM_ConfigClockSource+0x1de>
 800a050:	4a61      	ldr	r2, [pc, #388]	@ (800a1d8 <HAL_TIM_ConfigClockSource+0x224>)
 800a052:	4293      	cmp	r3, r2
 800a054:	f200 80a6 	bhi.w	800a1a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800a058:	4a60      	ldr	r2, [pc, #384]	@ (800a1dc <HAL_TIM_ConfigClockSource+0x228>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	f000 8099 	beq.w	800a192 <HAL_TIM_ConfigClockSource+0x1de>
 800a060:	4a5e      	ldr	r2, [pc, #376]	@ (800a1dc <HAL_TIM_ConfigClockSource+0x228>)
 800a062:	4293      	cmp	r3, r2
 800a064:	f200 809e 	bhi.w	800a1a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800a068:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a06c:	f000 8091 	beq.w	800a192 <HAL_TIM_ConfigClockSource+0x1de>
 800a070:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a074:	f200 8096 	bhi.w	800a1a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800a078:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a07c:	f000 8089 	beq.w	800a192 <HAL_TIM_ConfigClockSource+0x1de>
 800a080:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a084:	f200 808e 	bhi.w	800a1a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800a088:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a08c:	d03e      	beq.n	800a10c <HAL_TIM_ConfigClockSource+0x158>
 800a08e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a092:	f200 8087 	bhi.w	800a1a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800a096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a09a:	f000 8086 	beq.w	800a1aa <HAL_TIM_ConfigClockSource+0x1f6>
 800a09e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0a2:	d87f      	bhi.n	800a1a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800a0a4:	2b70      	cmp	r3, #112	@ 0x70
 800a0a6:	d01a      	beq.n	800a0de <HAL_TIM_ConfigClockSource+0x12a>
 800a0a8:	2b70      	cmp	r3, #112	@ 0x70
 800a0aa:	d87b      	bhi.n	800a1a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800a0ac:	2b60      	cmp	r3, #96	@ 0x60
 800a0ae:	d050      	beq.n	800a152 <HAL_TIM_ConfigClockSource+0x19e>
 800a0b0:	2b60      	cmp	r3, #96	@ 0x60
 800a0b2:	d877      	bhi.n	800a1a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800a0b4:	2b50      	cmp	r3, #80	@ 0x50
 800a0b6:	d03c      	beq.n	800a132 <HAL_TIM_ConfigClockSource+0x17e>
 800a0b8:	2b50      	cmp	r3, #80	@ 0x50
 800a0ba:	d873      	bhi.n	800a1a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800a0bc:	2b40      	cmp	r3, #64	@ 0x40
 800a0be:	d058      	beq.n	800a172 <HAL_TIM_ConfigClockSource+0x1be>
 800a0c0:	2b40      	cmp	r3, #64	@ 0x40
 800a0c2:	d86f      	bhi.n	800a1a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800a0c4:	2b30      	cmp	r3, #48	@ 0x30
 800a0c6:	d064      	beq.n	800a192 <HAL_TIM_ConfigClockSource+0x1de>
 800a0c8:	2b30      	cmp	r3, #48	@ 0x30
 800a0ca:	d86b      	bhi.n	800a1a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800a0cc:	2b20      	cmp	r3, #32
 800a0ce:	d060      	beq.n	800a192 <HAL_TIM_ConfigClockSource+0x1de>
 800a0d0:	2b20      	cmp	r3, #32
 800a0d2:	d867      	bhi.n	800a1a4 <HAL_TIM_ConfigClockSource+0x1f0>
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d05c      	beq.n	800a192 <HAL_TIM_ConfigClockSource+0x1de>
 800a0d8:	2b10      	cmp	r3, #16
 800a0da:	d05a      	beq.n	800a192 <HAL_TIM_ConfigClockSource+0x1de>
 800a0dc:	e062      	b.n	800a1a4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a0ee:	f000 fe8b 	bl	800ae08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a100:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	68ba      	ldr	r2, [r7, #8]
 800a108:	609a      	str	r2, [r3, #8]
      break;
 800a10a:	e04f      	b.n	800a1ac <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a11c:	f000 fe74 	bl	800ae08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	689a      	ldr	r2, [r3, #8]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a12e:	609a      	str	r2, [r3, #8]
      break;
 800a130:	e03c      	b.n	800a1ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a13e:	461a      	mov	r2, r3
 800a140:	f000 fde6 	bl	800ad10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2150      	movs	r1, #80	@ 0x50
 800a14a:	4618      	mov	r0, r3
 800a14c:	f000 fe3f 	bl	800adce <TIM_ITRx_SetConfig>
      break;
 800a150:	e02c      	b.n	800a1ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a15e:	461a      	mov	r2, r3
 800a160:	f000 fe05 	bl	800ad6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2160      	movs	r1, #96	@ 0x60
 800a16a:	4618      	mov	r0, r3
 800a16c:	f000 fe2f 	bl	800adce <TIM_ITRx_SetConfig>
      break;
 800a170:	e01c      	b.n	800a1ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a17e:	461a      	mov	r2, r3
 800a180:	f000 fdc6 	bl	800ad10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2140      	movs	r1, #64	@ 0x40
 800a18a:	4618      	mov	r0, r3
 800a18c:	f000 fe1f 	bl	800adce <TIM_ITRx_SetConfig>
      break;
 800a190:	e00c      	b.n	800a1ac <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4619      	mov	r1, r3
 800a19c:	4610      	mov	r0, r2
 800a19e:	f000 fe16 	bl	800adce <TIM_ITRx_SetConfig>
      break;
 800a1a2:	e003      	b.n	800a1ac <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	73fb      	strb	r3, [r7, #15]
      break;
 800a1a8:	e000      	b.n	800a1ac <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800a1aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a1bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3710      	adds	r7, #16
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	00100070 	.word	0x00100070
 800a1cc:	00100060 	.word	0x00100060
 800a1d0:	00100050 	.word	0x00100050
 800a1d4:	00100040 	.word	0x00100040
 800a1d8:	00100030 	.word	0x00100030
 800a1dc:	00100020 	.word	0x00100020

0800a1e0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800a1e8:	bf00      	nop
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a1fc:	bf00      	nop
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a210:	bf00      	nop
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr

0800a21c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800a224:	bf00      	nop
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a238:	bf00      	nop
 800a23a:	370c      	adds	r7, #12
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a24c:	bf00      	nop
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a260:	bf00      	nop
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800a274:	bf00      	nop
 800a276:	370c      	adds	r7, #12
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a280:	b480      	push	{r7}
 800a282:	b083      	sub	sp, #12
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a288:	bf00      	nop
 800a28a:	370c      	adds	r7, #12
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr

0800a294 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800a294:	b480      	push	{r7}
 800a296:	b087      	sub	sp, #28
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	460b      	mov	r3, r1
 800a29e:	607a      	str	r2, [r7, #4]
 800a2a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d101      	bne.n	800a2b0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e14a      	b.n	800a546 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	f040 80dd 	bne.w	800a478 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800a2be:	7afb      	ldrb	r3, [r7, #11]
 800a2c0:	2b1f      	cmp	r3, #31
 800a2c2:	f200 80d6 	bhi.w	800a472 <HAL_TIM_RegisterCallback+0x1de>
 800a2c6:	a201      	add	r2, pc, #4	@ (adr r2, 800a2cc <HAL_TIM_RegisterCallback+0x38>)
 800a2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2cc:	0800a34d 	.word	0x0800a34d
 800a2d0:	0800a355 	.word	0x0800a355
 800a2d4:	0800a35d 	.word	0x0800a35d
 800a2d8:	0800a365 	.word	0x0800a365
 800a2dc:	0800a36d 	.word	0x0800a36d
 800a2e0:	0800a375 	.word	0x0800a375
 800a2e4:	0800a37d 	.word	0x0800a37d
 800a2e8:	0800a385 	.word	0x0800a385
 800a2ec:	0800a38d 	.word	0x0800a38d
 800a2f0:	0800a395 	.word	0x0800a395
 800a2f4:	0800a39d 	.word	0x0800a39d
 800a2f8:	0800a3a5 	.word	0x0800a3a5
 800a2fc:	0800a3ad 	.word	0x0800a3ad
 800a300:	0800a3b5 	.word	0x0800a3b5
 800a304:	0800a3bf 	.word	0x0800a3bf
 800a308:	0800a3c9 	.word	0x0800a3c9
 800a30c:	0800a3d3 	.word	0x0800a3d3
 800a310:	0800a3dd 	.word	0x0800a3dd
 800a314:	0800a3e7 	.word	0x0800a3e7
 800a318:	0800a3f1 	.word	0x0800a3f1
 800a31c:	0800a3fb 	.word	0x0800a3fb
 800a320:	0800a405 	.word	0x0800a405
 800a324:	0800a40f 	.word	0x0800a40f
 800a328:	0800a419 	.word	0x0800a419
 800a32c:	0800a423 	.word	0x0800a423
 800a330:	0800a42d 	.word	0x0800a42d
 800a334:	0800a437 	.word	0x0800a437
 800a338:	0800a441 	.word	0x0800a441
 800a33c:	0800a44b 	.word	0x0800a44b
 800a340:	0800a455 	.word	0x0800a455
 800a344:	0800a45f 	.word	0x0800a45f
 800a348:	0800a469 	.word	0x0800a469
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800a352:	e0f7      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800a35a:	e0f3      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800a362:	e0ef      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800a36a:	e0eb      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800a372:	e0e7      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800a37a:	e0e3      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800a382:	e0df      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800a38a:	e0db      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800a392:	e0d7      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800a39a:	e0d3      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800a3a2:	e0cf      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800a3aa:	e0cb      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800a3b2:	e0c7      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800a3bc:	e0c2      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800a3c6:	e0bd      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800a3d0:	e0b8      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800a3da:	e0b3      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800a3e4:	e0ae      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800a3ee:	e0a9      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800a3f8:	e0a4      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800a402:	e09f      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800a40c:	e09a      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800a416:	e095      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800a420:	e090      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800a42a:	e08b      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800a434:	e086      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800a43e:	e081      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800a448:	e07c      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800a452:	e077      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	687a      	ldr	r2, [r7, #4]
 800a458:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800a45c:	e072      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a466:	e06d      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	687a      	ldr	r2, [r7, #4]
 800a46c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a470:	e068      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a472:	2301      	movs	r3, #1
 800a474:	75fb      	strb	r3, [r7, #23]
        break;
 800a476:	e065      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	2b00      	cmp	r3, #0
 800a482:	d15d      	bne.n	800a540 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800a484:	7afb      	ldrb	r3, [r7, #11]
 800a486:	2b0d      	cmp	r3, #13
 800a488:	d857      	bhi.n	800a53a <HAL_TIM_RegisterCallback+0x2a6>
 800a48a:	a201      	add	r2, pc, #4	@ (adr r2, 800a490 <HAL_TIM_RegisterCallback+0x1fc>)
 800a48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a490:	0800a4c9 	.word	0x0800a4c9
 800a494:	0800a4d1 	.word	0x0800a4d1
 800a498:	0800a4d9 	.word	0x0800a4d9
 800a49c:	0800a4e1 	.word	0x0800a4e1
 800a4a0:	0800a4e9 	.word	0x0800a4e9
 800a4a4:	0800a4f1 	.word	0x0800a4f1
 800a4a8:	0800a4f9 	.word	0x0800a4f9
 800a4ac:	0800a501 	.word	0x0800a501
 800a4b0:	0800a509 	.word	0x0800a509
 800a4b4:	0800a511 	.word	0x0800a511
 800a4b8:	0800a519 	.word	0x0800a519
 800a4bc:	0800a521 	.word	0x0800a521
 800a4c0:	0800a529 	.word	0x0800a529
 800a4c4:	0800a531 	.word	0x0800a531
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800a4ce:	e039      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800a4d6:	e035      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800a4de:	e031      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800a4e6:	e02d      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800a4ee:	e029      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	687a      	ldr	r2, [r7, #4]
 800a4f4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800a4f6:	e025      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800a4fe:	e021      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800a506:	e01d      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800a50e:	e019      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800a516:	e015      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800a51e:	e011      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800a526:	e00d      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800a52e:	e009      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800a538:	e004      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a53a:	2301      	movs	r3, #1
 800a53c:	75fb      	strb	r3, [r7, #23]
        break;
 800a53e:	e001      	b.n	800a544 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800a540:	2301      	movs	r3, #1
 800a542:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a544:	7dfb      	ldrb	r3, [r7, #23]
}
 800a546:	4618      	mov	r0, r3
 800a548:	371c      	adds	r7, #28
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop

0800a554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a554:	b480      	push	{r7}
 800a556:	b085      	sub	sp, #20
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	4a4c      	ldr	r2, [pc, #304]	@ (800a698 <TIM_Base_SetConfig+0x144>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d017      	beq.n	800a59c <TIM_Base_SetConfig+0x48>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a572:	d013      	beq.n	800a59c <TIM_Base_SetConfig+0x48>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	4a49      	ldr	r2, [pc, #292]	@ (800a69c <TIM_Base_SetConfig+0x148>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d00f      	beq.n	800a59c <TIM_Base_SetConfig+0x48>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	4a48      	ldr	r2, [pc, #288]	@ (800a6a0 <TIM_Base_SetConfig+0x14c>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d00b      	beq.n	800a59c <TIM_Base_SetConfig+0x48>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	4a47      	ldr	r2, [pc, #284]	@ (800a6a4 <TIM_Base_SetConfig+0x150>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d007      	beq.n	800a59c <TIM_Base_SetConfig+0x48>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	4a46      	ldr	r2, [pc, #280]	@ (800a6a8 <TIM_Base_SetConfig+0x154>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d003      	beq.n	800a59c <TIM_Base_SetConfig+0x48>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	4a45      	ldr	r2, [pc, #276]	@ (800a6ac <TIM_Base_SetConfig+0x158>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d108      	bne.n	800a5ae <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4a39      	ldr	r2, [pc, #228]	@ (800a698 <TIM_Base_SetConfig+0x144>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d023      	beq.n	800a5fe <TIM_Base_SetConfig+0xaa>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5bc:	d01f      	beq.n	800a5fe <TIM_Base_SetConfig+0xaa>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	4a36      	ldr	r2, [pc, #216]	@ (800a69c <TIM_Base_SetConfig+0x148>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d01b      	beq.n	800a5fe <TIM_Base_SetConfig+0xaa>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	4a35      	ldr	r2, [pc, #212]	@ (800a6a0 <TIM_Base_SetConfig+0x14c>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d017      	beq.n	800a5fe <TIM_Base_SetConfig+0xaa>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	4a34      	ldr	r2, [pc, #208]	@ (800a6a4 <TIM_Base_SetConfig+0x150>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d013      	beq.n	800a5fe <TIM_Base_SetConfig+0xaa>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	4a33      	ldr	r2, [pc, #204]	@ (800a6a8 <TIM_Base_SetConfig+0x154>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d00f      	beq.n	800a5fe <TIM_Base_SetConfig+0xaa>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	4a33      	ldr	r2, [pc, #204]	@ (800a6b0 <TIM_Base_SetConfig+0x15c>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d00b      	beq.n	800a5fe <TIM_Base_SetConfig+0xaa>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	4a32      	ldr	r2, [pc, #200]	@ (800a6b4 <TIM_Base_SetConfig+0x160>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d007      	beq.n	800a5fe <TIM_Base_SetConfig+0xaa>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	4a31      	ldr	r2, [pc, #196]	@ (800a6b8 <TIM_Base_SetConfig+0x164>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d003      	beq.n	800a5fe <TIM_Base_SetConfig+0xaa>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	4a2c      	ldr	r2, [pc, #176]	@ (800a6ac <TIM_Base_SetConfig+0x158>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d108      	bne.n	800a610 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	695b      	ldr	r3, [r3, #20]
 800a61a:	4313      	orrs	r3, r2
 800a61c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	68fa      	ldr	r2, [r7, #12]
 800a622:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	689a      	ldr	r2, [r3, #8]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	4a18      	ldr	r2, [pc, #96]	@ (800a698 <TIM_Base_SetConfig+0x144>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d013      	beq.n	800a664 <TIM_Base_SetConfig+0x110>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	4a1a      	ldr	r2, [pc, #104]	@ (800a6a8 <TIM_Base_SetConfig+0x154>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d00f      	beq.n	800a664 <TIM_Base_SetConfig+0x110>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	4a1a      	ldr	r2, [pc, #104]	@ (800a6b0 <TIM_Base_SetConfig+0x15c>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d00b      	beq.n	800a664 <TIM_Base_SetConfig+0x110>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	4a19      	ldr	r2, [pc, #100]	@ (800a6b4 <TIM_Base_SetConfig+0x160>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d007      	beq.n	800a664 <TIM_Base_SetConfig+0x110>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	4a18      	ldr	r2, [pc, #96]	@ (800a6b8 <TIM_Base_SetConfig+0x164>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d003      	beq.n	800a664 <TIM_Base_SetConfig+0x110>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	4a13      	ldr	r2, [pc, #76]	@ (800a6ac <TIM_Base_SetConfig+0x158>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d103      	bne.n	800a66c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	691a      	ldr	r2, [r3, #16]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2201      	movs	r2, #1
 800a670:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	691b      	ldr	r3, [r3, #16]
 800a676:	f003 0301 	and.w	r3, r3, #1
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d105      	bne.n	800a68a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	691b      	ldr	r3, [r3, #16]
 800a682:	f023 0201 	bic.w	r2, r3, #1
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	611a      	str	r2, [r3, #16]
  }
}
 800a68a:	bf00      	nop
 800a68c:	3714      	adds	r7, #20
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	40012c00 	.word	0x40012c00
 800a69c:	40000400 	.word	0x40000400
 800a6a0:	40000800 	.word	0x40000800
 800a6a4:	40000c00 	.word	0x40000c00
 800a6a8:	40013400 	.word	0x40013400
 800a6ac:	40015000 	.word	0x40015000
 800a6b0:	40014000 	.word	0x40014000
 800a6b4:	40014400 	.word	0x40014400
 800a6b8:	40014800 	.word	0x40014800

0800a6bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b087      	sub	sp, #28
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6a1b      	ldr	r3, [r3, #32]
 800a6ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6a1b      	ldr	r3, [r3, #32]
 800a6d0:	f023 0201 	bic.w	r2, r3, #1
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	699b      	ldr	r3, [r3, #24]
 800a6e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a6ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f023 0303 	bic.w	r3, r3, #3
 800a6f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	68fa      	ldr	r2, [r7, #12]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	f023 0302 	bic.w	r3, r3, #2
 800a708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	689b      	ldr	r3, [r3, #8]
 800a70e:	697a      	ldr	r2, [r7, #20]
 800a710:	4313      	orrs	r3, r2
 800a712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	4a30      	ldr	r2, [pc, #192]	@ (800a7d8 <TIM_OC1_SetConfig+0x11c>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d013      	beq.n	800a744 <TIM_OC1_SetConfig+0x88>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	4a2f      	ldr	r2, [pc, #188]	@ (800a7dc <TIM_OC1_SetConfig+0x120>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d00f      	beq.n	800a744 <TIM_OC1_SetConfig+0x88>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	4a2e      	ldr	r2, [pc, #184]	@ (800a7e0 <TIM_OC1_SetConfig+0x124>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d00b      	beq.n	800a744 <TIM_OC1_SetConfig+0x88>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	4a2d      	ldr	r2, [pc, #180]	@ (800a7e4 <TIM_OC1_SetConfig+0x128>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d007      	beq.n	800a744 <TIM_OC1_SetConfig+0x88>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	4a2c      	ldr	r2, [pc, #176]	@ (800a7e8 <TIM_OC1_SetConfig+0x12c>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d003      	beq.n	800a744 <TIM_OC1_SetConfig+0x88>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	4a2b      	ldr	r2, [pc, #172]	@ (800a7ec <TIM_OC1_SetConfig+0x130>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d10c      	bne.n	800a75e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	f023 0308 	bic.w	r3, r3, #8
 800a74a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	697a      	ldr	r2, [r7, #20]
 800a752:	4313      	orrs	r3, r2
 800a754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	f023 0304 	bic.w	r3, r3, #4
 800a75c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	4a1d      	ldr	r2, [pc, #116]	@ (800a7d8 <TIM_OC1_SetConfig+0x11c>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d013      	beq.n	800a78e <TIM_OC1_SetConfig+0xd2>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	4a1c      	ldr	r2, [pc, #112]	@ (800a7dc <TIM_OC1_SetConfig+0x120>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d00f      	beq.n	800a78e <TIM_OC1_SetConfig+0xd2>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	4a1b      	ldr	r2, [pc, #108]	@ (800a7e0 <TIM_OC1_SetConfig+0x124>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d00b      	beq.n	800a78e <TIM_OC1_SetConfig+0xd2>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	4a1a      	ldr	r2, [pc, #104]	@ (800a7e4 <TIM_OC1_SetConfig+0x128>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d007      	beq.n	800a78e <TIM_OC1_SetConfig+0xd2>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	4a19      	ldr	r2, [pc, #100]	@ (800a7e8 <TIM_OC1_SetConfig+0x12c>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d003      	beq.n	800a78e <TIM_OC1_SetConfig+0xd2>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	4a18      	ldr	r2, [pc, #96]	@ (800a7ec <TIM_OC1_SetConfig+0x130>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d111      	bne.n	800a7b2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a79c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	695b      	ldr	r3, [r3, #20]
 800a7a2:	693a      	ldr	r2, [r7, #16]
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	699b      	ldr	r3, [r3, #24]
 800a7ac:	693a      	ldr	r2, [r7, #16]
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	693a      	ldr	r2, [r7, #16]
 800a7b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	68fa      	ldr	r2, [r7, #12]
 800a7bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	685a      	ldr	r2, [r3, #4]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	697a      	ldr	r2, [r7, #20]
 800a7ca:	621a      	str	r2, [r3, #32]
}
 800a7cc:	bf00      	nop
 800a7ce:	371c      	adds	r7, #28
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr
 800a7d8:	40012c00 	.word	0x40012c00
 800a7dc:	40013400 	.word	0x40013400
 800a7e0:	40014000 	.word	0x40014000
 800a7e4:	40014400 	.word	0x40014400
 800a7e8:	40014800 	.word	0x40014800
 800a7ec:	40015000 	.word	0x40015000

0800a7f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b087      	sub	sp, #28
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6a1b      	ldr	r3, [r3, #32]
 800a7fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6a1b      	ldr	r3, [r3, #32]
 800a804:	f023 0210 	bic.w	r2, r3, #16
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	699b      	ldr	r3, [r3, #24]
 800a816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a81e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a82a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	021b      	lsls	r3, r3, #8
 800a832:	68fa      	ldr	r2, [r7, #12]
 800a834:	4313      	orrs	r3, r2
 800a836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	f023 0320 	bic.w	r3, r3, #32
 800a83e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	011b      	lsls	r3, r3, #4
 800a846:	697a      	ldr	r2, [r7, #20]
 800a848:	4313      	orrs	r3, r2
 800a84a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a2c      	ldr	r2, [pc, #176]	@ (800a900 <TIM_OC2_SetConfig+0x110>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d007      	beq.n	800a864 <TIM_OC2_SetConfig+0x74>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	4a2b      	ldr	r2, [pc, #172]	@ (800a904 <TIM_OC2_SetConfig+0x114>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d003      	beq.n	800a864 <TIM_OC2_SetConfig+0x74>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4a2a      	ldr	r2, [pc, #168]	@ (800a908 <TIM_OC2_SetConfig+0x118>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d10d      	bne.n	800a880 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a86a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	011b      	lsls	r3, r3, #4
 800a872:	697a      	ldr	r2, [r7, #20]
 800a874:	4313      	orrs	r3, r2
 800a876:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a87e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	4a1f      	ldr	r2, [pc, #124]	@ (800a900 <TIM_OC2_SetConfig+0x110>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d013      	beq.n	800a8b0 <TIM_OC2_SetConfig+0xc0>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	4a1e      	ldr	r2, [pc, #120]	@ (800a904 <TIM_OC2_SetConfig+0x114>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d00f      	beq.n	800a8b0 <TIM_OC2_SetConfig+0xc0>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	4a1e      	ldr	r2, [pc, #120]	@ (800a90c <TIM_OC2_SetConfig+0x11c>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d00b      	beq.n	800a8b0 <TIM_OC2_SetConfig+0xc0>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	4a1d      	ldr	r2, [pc, #116]	@ (800a910 <TIM_OC2_SetConfig+0x120>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d007      	beq.n	800a8b0 <TIM_OC2_SetConfig+0xc0>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	4a1c      	ldr	r2, [pc, #112]	@ (800a914 <TIM_OC2_SetConfig+0x124>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d003      	beq.n	800a8b0 <TIM_OC2_SetConfig+0xc0>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	4a17      	ldr	r2, [pc, #92]	@ (800a908 <TIM_OC2_SetConfig+0x118>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d113      	bne.n	800a8d8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a8b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a8be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	695b      	ldr	r3, [r3, #20]
 800a8c4:	009b      	lsls	r3, r3, #2
 800a8c6:	693a      	ldr	r2, [r7, #16]
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	699b      	ldr	r3, [r3, #24]
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	693a      	ldr	r2, [r7, #16]
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	693a      	ldr	r2, [r7, #16]
 800a8dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	68fa      	ldr	r2, [r7, #12]
 800a8e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	685a      	ldr	r2, [r3, #4]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	697a      	ldr	r2, [r7, #20]
 800a8f0:	621a      	str	r2, [r3, #32]
}
 800a8f2:	bf00      	nop
 800a8f4:	371c      	adds	r7, #28
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr
 800a8fe:	bf00      	nop
 800a900:	40012c00 	.word	0x40012c00
 800a904:	40013400 	.word	0x40013400
 800a908:	40015000 	.word	0x40015000
 800a90c:	40014000 	.word	0x40014000
 800a910:	40014400 	.word	0x40014400
 800a914:	40014800 	.word	0x40014800

0800a918 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a918:	b480      	push	{r7}
 800a91a:	b087      	sub	sp, #28
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6a1b      	ldr	r3, [r3, #32]
 800a926:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6a1b      	ldr	r3, [r3, #32]
 800a92c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	69db      	ldr	r3, [r3, #28]
 800a93e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a946:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a94a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f023 0303 	bic.w	r3, r3, #3
 800a952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	68fa      	ldr	r2, [r7, #12]
 800a95a:	4313      	orrs	r3, r2
 800a95c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	021b      	lsls	r3, r3, #8
 800a96c:	697a      	ldr	r2, [r7, #20]
 800a96e:	4313      	orrs	r3, r2
 800a970:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	4a2b      	ldr	r2, [pc, #172]	@ (800aa24 <TIM_OC3_SetConfig+0x10c>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d007      	beq.n	800a98a <TIM_OC3_SetConfig+0x72>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	4a2a      	ldr	r2, [pc, #168]	@ (800aa28 <TIM_OC3_SetConfig+0x110>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d003      	beq.n	800a98a <TIM_OC3_SetConfig+0x72>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	4a29      	ldr	r2, [pc, #164]	@ (800aa2c <TIM_OC3_SetConfig+0x114>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d10d      	bne.n	800a9a6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a990:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	021b      	lsls	r3, r3, #8
 800a998:	697a      	ldr	r2, [r7, #20]
 800a99a:	4313      	orrs	r3, r2
 800a99c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a9a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	4a1e      	ldr	r2, [pc, #120]	@ (800aa24 <TIM_OC3_SetConfig+0x10c>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d013      	beq.n	800a9d6 <TIM_OC3_SetConfig+0xbe>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	4a1d      	ldr	r2, [pc, #116]	@ (800aa28 <TIM_OC3_SetConfig+0x110>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d00f      	beq.n	800a9d6 <TIM_OC3_SetConfig+0xbe>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	4a1d      	ldr	r2, [pc, #116]	@ (800aa30 <TIM_OC3_SetConfig+0x118>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d00b      	beq.n	800a9d6 <TIM_OC3_SetConfig+0xbe>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	4a1c      	ldr	r2, [pc, #112]	@ (800aa34 <TIM_OC3_SetConfig+0x11c>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d007      	beq.n	800a9d6 <TIM_OC3_SetConfig+0xbe>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	4a1b      	ldr	r2, [pc, #108]	@ (800aa38 <TIM_OC3_SetConfig+0x120>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d003      	beq.n	800a9d6 <TIM_OC3_SetConfig+0xbe>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	4a16      	ldr	r2, [pc, #88]	@ (800aa2c <TIM_OC3_SetConfig+0x114>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d113      	bne.n	800a9fe <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a9dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a9e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	695b      	ldr	r3, [r3, #20]
 800a9ea:	011b      	lsls	r3, r3, #4
 800a9ec:	693a      	ldr	r2, [r7, #16]
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	699b      	ldr	r3, [r3, #24]
 800a9f6:	011b      	lsls	r3, r3, #4
 800a9f8:	693a      	ldr	r2, [r7, #16]
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	693a      	ldr	r2, [r7, #16]
 800aa02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	68fa      	ldr	r2, [r7, #12]
 800aa08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	685a      	ldr	r2, [r3, #4]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	697a      	ldr	r2, [r7, #20]
 800aa16:	621a      	str	r2, [r3, #32]
}
 800aa18:	bf00      	nop
 800aa1a:	371c      	adds	r7, #28
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr
 800aa24:	40012c00 	.word	0x40012c00
 800aa28:	40013400 	.word	0x40013400
 800aa2c:	40015000 	.word	0x40015000
 800aa30:	40014000 	.word	0x40014000
 800aa34:	40014400 	.word	0x40014400
 800aa38:	40014800 	.word	0x40014800

0800aa3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b087      	sub	sp, #28
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6a1b      	ldr	r3, [r3, #32]
 800aa4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6a1b      	ldr	r3, [r3, #32]
 800aa50:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	69db      	ldr	r3, [r3, #28]
 800aa62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aa6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	021b      	lsls	r3, r3, #8
 800aa7e:	68fa      	ldr	r2, [r7, #12]
 800aa80:	4313      	orrs	r3, r2
 800aa82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aa8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	689b      	ldr	r3, [r3, #8]
 800aa90:	031b      	lsls	r3, r3, #12
 800aa92:	697a      	ldr	r2, [r7, #20]
 800aa94:	4313      	orrs	r3, r2
 800aa96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	4a2c      	ldr	r2, [pc, #176]	@ (800ab4c <TIM_OC4_SetConfig+0x110>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d007      	beq.n	800aab0 <TIM_OC4_SetConfig+0x74>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	4a2b      	ldr	r2, [pc, #172]	@ (800ab50 <TIM_OC4_SetConfig+0x114>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d003      	beq.n	800aab0 <TIM_OC4_SetConfig+0x74>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	4a2a      	ldr	r2, [pc, #168]	@ (800ab54 <TIM_OC4_SetConfig+0x118>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d10d      	bne.n	800aacc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800aab6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	68db      	ldr	r3, [r3, #12]
 800aabc:	031b      	lsls	r3, r3, #12
 800aabe:	697a      	ldr	r2, [r7, #20]
 800aac0:	4313      	orrs	r3, r2
 800aac2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aaca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a1f      	ldr	r2, [pc, #124]	@ (800ab4c <TIM_OC4_SetConfig+0x110>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d013      	beq.n	800aafc <TIM_OC4_SetConfig+0xc0>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a1e      	ldr	r2, [pc, #120]	@ (800ab50 <TIM_OC4_SetConfig+0x114>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d00f      	beq.n	800aafc <TIM_OC4_SetConfig+0xc0>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	4a1e      	ldr	r2, [pc, #120]	@ (800ab58 <TIM_OC4_SetConfig+0x11c>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d00b      	beq.n	800aafc <TIM_OC4_SetConfig+0xc0>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	4a1d      	ldr	r2, [pc, #116]	@ (800ab5c <TIM_OC4_SetConfig+0x120>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d007      	beq.n	800aafc <TIM_OC4_SetConfig+0xc0>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	4a1c      	ldr	r2, [pc, #112]	@ (800ab60 <TIM_OC4_SetConfig+0x124>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d003      	beq.n	800aafc <TIM_OC4_SetConfig+0xc0>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4a17      	ldr	r2, [pc, #92]	@ (800ab54 <TIM_OC4_SetConfig+0x118>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d113      	bne.n	800ab24 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ab02:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ab0a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	695b      	ldr	r3, [r3, #20]
 800ab10:	019b      	lsls	r3, r3, #6
 800ab12:	693a      	ldr	r2, [r7, #16]
 800ab14:	4313      	orrs	r3, r2
 800ab16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	699b      	ldr	r3, [r3, #24]
 800ab1c:	019b      	lsls	r3, r3, #6
 800ab1e:	693a      	ldr	r2, [r7, #16]
 800ab20:	4313      	orrs	r3, r2
 800ab22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	693a      	ldr	r2, [r7, #16]
 800ab28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	685a      	ldr	r2, [r3, #4]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	697a      	ldr	r2, [r7, #20]
 800ab3c:	621a      	str	r2, [r3, #32]
}
 800ab3e:	bf00      	nop
 800ab40:	371c      	adds	r7, #28
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr
 800ab4a:	bf00      	nop
 800ab4c:	40012c00 	.word	0x40012c00
 800ab50:	40013400 	.word	0x40013400
 800ab54:	40015000 	.word	0x40015000
 800ab58:	40014000 	.word	0x40014000
 800ab5c:	40014400 	.word	0x40014400
 800ab60:	40014800 	.word	0x40014800

0800ab64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b087      	sub	sp, #28
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6a1b      	ldr	r3, [r3, #32]
 800ab72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6a1b      	ldr	r3, [r3, #32]
 800ab78:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800aba8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	689b      	ldr	r3, [r3, #8]
 800abae:	041b      	lsls	r3, r3, #16
 800abb0:	693a      	ldr	r2, [r7, #16]
 800abb2:	4313      	orrs	r3, r2
 800abb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	4a19      	ldr	r2, [pc, #100]	@ (800ac20 <TIM_OC5_SetConfig+0xbc>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d013      	beq.n	800abe6 <TIM_OC5_SetConfig+0x82>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	4a18      	ldr	r2, [pc, #96]	@ (800ac24 <TIM_OC5_SetConfig+0xc0>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d00f      	beq.n	800abe6 <TIM_OC5_SetConfig+0x82>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	4a17      	ldr	r2, [pc, #92]	@ (800ac28 <TIM_OC5_SetConfig+0xc4>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d00b      	beq.n	800abe6 <TIM_OC5_SetConfig+0x82>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4a16      	ldr	r2, [pc, #88]	@ (800ac2c <TIM_OC5_SetConfig+0xc8>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d007      	beq.n	800abe6 <TIM_OC5_SetConfig+0x82>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4a15      	ldr	r2, [pc, #84]	@ (800ac30 <TIM_OC5_SetConfig+0xcc>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d003      	beq.n	800abe6 <TIM_OC5_SetConfig+0x82>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4a14      	ldr	r2, [pc, #80]	@ (800ac34 <TIM_OC5_SetConfig+0xd0>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d109      	bne.n	800abfa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800abec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	695b      	ldr	r3, [r3, #20]
 800abf2:	021b      	lsls	r3, r3, #8
 800abf4:	697a      	ldr	r2, [r7, #20]
 800abf6:	4313      	orrs	r3, r2
 800abf8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	697a      	ldr	r2, [r7, #20]
 800abfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	68fa      	ldr	r2, [r7, #12]
 800ac04:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	685a      	ldr	r2, [r3, #4]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	693a      	ldr	r2, [r7, #16]
 800ac12:	621a      	str	r2, [r3, #32]
}
 800ac14:	bf00      	nop
 800ac16:	371c      	adds	r7, #28
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr
 800ac20:	40012c00 	.word	0x40012c00
 800ac24:	40013400 	.word	0x40013400
 800ac28:	40014000 	.word	0x40014000
 800ac2c:	40014400 	.word	0x40014400
 800ac30:	40014800 	.word	0x40014800
 800ac34:	40015000 	.word	0x40015000

0800ac38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b087      	sub	sp, #28
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a1b      	ldr	r3, [r3, #32]
 800ac46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6a1b      	ldr	r3, [r3, #32]
 800ac4c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ac66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	021b      	lsls	r3, r3, #8
 800ac72:	68fa      	ldr	r2, [r7, #12]
 800ac74:	4313      	orrs	r3, r2
 800ac76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ac7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	051b      	lsls	r3, r3, #20
 800ac86:	693a      	ldr	r2, [r7, #16]
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	4a1a      	ldr	r2, [pc, #104]	@ (800acf8 <TIM_OC6_SetConfig+0xc0>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d013      	beq.n	800acbc <TIM_OC6_SetConfig+0x84>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	4a19      	ldr	r2, [pc, #100]	@ (800acfc <TIM_OC6_SetConfig+0xc4>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d00f      	beq.n	800acbc <TIM_OC6_SetConfig+0x84>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	4a18      	ldr	r2, [pc, #96]	@ (800ad00 <TIM_OC6_SetConfig+0xc8>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d00b      	beq.n	800acbc <TIM_OC6_SetConfig+0x84>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	4a17      	ldr	r2, [pc, #92]	@ (800ad04 <TIM_OC6_SetConfig+0xcc>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d007      	beq.n	800acbc <TIM_OC6_SetConfig+0x84>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	4a16      	ldr	r2, [pc, #88]	@ (800ad08 <TIM_OC6_SetConfig+0xd0>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d003      	beq.n	800acbc <TIM_OC6_SetConfig+0x84>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	4a15      	ldr	r2, [pc, #84]	@ (800ad0c <TIM_OC6_SetConfig+0xd4>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d109      	bne.n	800acd0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800acc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	695b      	ldr	r3, [r3, #20]
 800acc8:	029b      	lsls	r3, r3, #10
 800acca:	697a      	ldr	r2, [r7, #20]
 800accc:	4313      	orrs	r3, r2
 800acce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	697a      	ldr	r2, [r7, #20]
 800acd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	685a      	ldr	r2, [r3, #4]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	693a      	ldr	r2, [r7, #16]
 800ace8:	621a      	str	r2, [r3, #32]
}
 800acea:	bf00      	nop
 800acec:	371c      	adds	r7, #28
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr
 800acf6:	bf00      	nop
 800acf8:	40012c00 	.word	0x40012c00
 800acfc:	40013400 	.word	0x40013400
 800ad00:	40014000 	.word	0x40014000
 800ad04:	40014400 	.word	0x40014400
 800ad08:	40014800 	.word	0x40014800
 800ad0c:	40015000 	.word	0x40015000

0800ad10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b087      	sub	sp, #28
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	6a1b      	ldr	r3, [r3, #32]
 800ad20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	6a1b      	ldr	r3, [r3, #32]
 800ad26:	f023 0201 	bic.w	r2, r3, #1
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	699b      	ldr	r3, [r3, #24]
 800ad32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ad3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	011b      	lsls	r3, r3, #4
 800ad40:	693a      	ldr	r2, [r7, #16]
 800ad42:	4313      	orrs	r3, r2
 800ad44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	f023 030a 	bic.w	r3, r3, #10
 800ad4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad4e:	697a      	ldr	r2, [r7, #20]
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	4313      	orrs	r3, r2
 800ad54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	693a      	ldr	r2, [r7, #16]
 800ad5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	697a      	ldr	r2, [r7, #20]
 800ad60:	621a      	str	r2, [r3, #32]
}
 800ad62:	bf00      	nop
 800ad64:	371c      	adds	r7, #28
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr

0800ad6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad6e:	b480      	push	{r7}
 800ad70:	b087      	sub	sp, #28
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	60f8      	str	r0, [r7, #12]
 800ad76:	60b9      	str	r1, [r7, #8]
 800ad78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	6a1b      	ldr	r3, [r3, #32]
 800ad7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6a1b      	ldr	r3, [r3, #32]
 800ad84:	f023 0210 	bic.w	r2, r3, #16
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	699b      	ldr	r3, [r3, #24]
 800ad90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ad98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	031b      	lsls	r3, r3, #12
 800ad9e:	693a      	ldr	r2, [r7, #16]
 800ada0:	4313      	orrs	r3, r2
 800ada2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800adaa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	011b      	lsls	r3, r3, #4
 800adb0:	697a      	ldr	r2, [r7, #20]
 800adb2:	4313      	orrs	r3, r2
 800adb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	693a      	ldr	r2, [r7, #16]
 800adba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	697a      	ldr	r2, [r7, #20]
 800adc0:	621a      	str	r2, [r3, #32]
}
 800adc2:	bf00      	nop
 800adc4:	371c      	adds	r7, #28
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr

0800adce <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800adce:	b480      	push	{r7}
 800add0:	b085      	sub	sp, #20
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
 800add6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ade4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ade8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800adea:	683a      	ldr	r2, [r7, #0]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	4313      	orrs	r3, r2
 800adf0:	f043 0307 	orr.w	r3, r3, #7
 800adf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	609a      	str	r2, [r3, #8]
}
 800adfc:	bf00      	nop
 800adfe:	3714      	adds	r7, #20
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b087      	sub	sp, #28
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	607a      	str	r2, [r7, #4]
 800ae14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	689b      	ldr	r3, [r3, #8]
 800ae1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ae22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	021a      	lsls	r2, r3, #8
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	431a      	orrs	r2, r3
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	697a      	ldr	r2, [r7, #20]
 800ae32:	4313      	orrs	r3, r2
 800ae34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	697a      	ldr	r2, [r7, #20]
 800ae3a:	609a      	str	r2, [r3, #8]
}
 800ae3c:	bf00      	nop
 800ae3e:	371c      	adds	r7, #28
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b087      	sub	sp, #28
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	f003 031f 	and.w	r3, r3, #31
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	6a1a      	ldr	r2, [r3, #32]
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	43db      	mvns	r3, r3
 800ae6a:	401a      	ands	r2, r3
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	6a1a      	ldr	r2, [r3, #32]
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	f003 031f 	and.w	r3, r3, #31
 800ae7a:	6879      	ldr	r1, [r7, #4]
 800ae7c:	fa01 f303 	lsl.w	r3, r1, r3
 800ae80:	431a      	orrs	r2, r3
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	621a      	str	r2, [r3, #32]
}
 800ae86:	bf00      	nop
 800ae88:	371c      	adds	r7, #28
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr
	...

0800ae94 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	4a26      	ldr	r2, [pc, #152]	@ (800af38 <TIM_ResetCallback+0xa4>)
 800aea0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	4a25      	ldr	r2, [pc, #148]	@ (800af3c <TIM_ResetCallback+0xa8>)
 800aea8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	4a24      	ldr	r2, [pc, #144]	@ (800af40 <TIM_ResetCallback+0xac>)
 800aeb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	4a23      	ldr	r2, [pc, #140]	@ (800af44 <TIM_ResetCallback+0xb0>)
 800aeb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	4a22      	ldr	r2, [pc, #136]	@ (800af48 <TIM_ResetCallback+0xb4>)
 800aec0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	4a21      	ldr	r2, [pc, #132]	@ (800af4c <TIM_ResetCallback+0xb8>)
 800aec8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	4a20      	ldr	r2, [pc, #128]	@ (800af50 <TIM_ResetCallback+0xbc>)
 800aed0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4a1f      	ldr	r2, [pc, #124]	@ (800af54 <TIM_ResetCallback+0xc0>)
 800aed8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	4a1e      	ldr	r2, [pc, #120]	@ (800af58 <TIM_ResetCallback+0xc4>)
 800aee0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	4a1d      	ldr	r2, [pc, #116]	@ (800af5c <TIM_ResetCallback+0xc8>)
 800aee8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	4a1c      	ldr	r2, [pc, #112]	@ (800af60 <TIM_ResetCallback+0xcc>)
 800aef0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	4a1b      	ldr	r2, [pc, #108]	@ (800af64 <TIM_ResetCallback+0xd0>)
 800aef8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	4a1a      	ldr	r2, [pc, #104]	@ (800af68 <TIM_ResetCallback+0xd4>)
 800af00:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	4a19      	ldr	r2, [pc, #100]	@ (800af6c <TIM_ResetCallback+0xd8>)
 800af08:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	4a18      	ldr	r2, [pc, #96]	@ (800af70 <TIM_ResetCallback+0xdc>)
 800af10:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	4a17      	ldr	r2, [pc, #92]	@ (800af74 <TIM_ResetCallback+0xe0>)
 800af18:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	4a16      	ldr	r2, [pc, #88]	@ (800af78 <TIM_ResetCallback+0xe4>)
 800af20:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	4a15      	ldr	r2, [pc, #84]	@ (800af7c <TIM_ResetCallback+0xe8>)
 800af28:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800af2c:	bf00      	nop
 800af2e:	370c      	adds	r7, #12
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr
 800af38:	080042c5 	.word	0x080042c5
 800af3c:	0800a1e1 	.word	0x0800a1e1
 800af40:	0800a259 	.word	0x0800a259
 800af44:	0800a26d 	.word	0x0800a26d
 800af48:	0800a209 	.word	0x0800a209
 800af4c:	0800a21d 	.word	0x0800a21d
 800af50:	0800a1f5 	.word	0x0800a1f5
 800af54:	0800a231 	.word	0x0800a231
 800af58:	0800a245 	.word	0x0800a245
 800af5c:	0800a281 	.word	0x0800a281
 800af60:	0800b1d5 	.word	0x0800b1d5
 800af64:	0800b1e9 	.word	0x0800b1e9
 800af68:	0800b1fd 	.word	0x0800b1fd
 800af6c:	0800b211 	.word	0x0800b211
 800af70:	0800b225 	.word	0x0800b225
 800af74:	0800b239 	.word	0x0800b239
 800af78:	0800b24d 	.word	0x0800b24d
 800af7c:	0800b261 	.word	0x0800b261

0800af80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af80:	b480      	push	{r7}
 800af82:	b085      	sub	sp, #20
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af90:	2b01      	cmp	r3, #1
 800af92:	d101      	bne.n	800af98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af94:	2302      	movs	r3, #2
 800af96:	e074      	b.n	800b082 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2201      	movs	r2, #1
 800af9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2202      	movs	r2, #2
 800afa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4a34      	ldr	r2, [pc, #208]	@ (800b090 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d009      	beq.n	800afd6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4a33      	ldr	r2, [pc, #204]	@ (800b094 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d004      	beq.n	800afd6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a31      	ldr	r2, [pc, #196]	@ (800b098 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d108      	bne.n	800afe8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800afdc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	68fa      	ldr	r2, [r7, #12]
 800afe4:	4313      	orrs	r3, r2
 800afe6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800afee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aff2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	68fa      	ldr	r2, [r7, #12]
 800affa:	4313      	orrs	r3, r2
 800affc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	68fa      	ldr	r2, [r7, #12]
 800b004:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4a21      	ldr	r2, [pc, #132]	@ (800b090 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d022      	beq.n	800b056 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b018:	d01d      	beq.n	800b056 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4a1f      	ldr	r2, [pc, #124]	@ (800b09c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d018      	beq.n	800b056 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a1d      	ldr	r2, [pc, #116]	@ (800b0a0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d013      	beq.n	800b056 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4a1c      	ldr	r2, [pc, #112]	@ (800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d00e      	beq.n	800b056 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a15      	ldr	r2, [pc, #84]	@ (800b094 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d009      	beq.n	800b056 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a18      	ldr	r2, [pc, #96]	@ (800b0a8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d004      	beq.n	800b056 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a11      	ldr	r2, [pc, #68]	@ (800b098 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d10c      	bne.n	800b070 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b05c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	689b      	ldr	r3, [r3, #8]
 800b062:	68ba      	ldr	r2, [r7, #8]
 800b064:	4313      	orrs	r3, r2
 800b066:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	68ba      	ldr	r2, [r7, #8]
 800b06e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2201      	movs	r2, #1
 800b074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2200      	movs	r2, #0
 800b07c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b080:	2300      	movs	r3, #0
}
 800b082:	4618      	mov	r0, r3
 800b084:	3714      	adds	r7, #20
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr
 800b08e:	bf00      	nop
 800b090:	40012c00 	.word	0x40012c00
 800b094:	40013400 	.word	0x40013400
 800b098:	40015000 	.word	0x40015000
 800b09c:	40000400 	.word	0x40000400
 800b0a0:	40000800 	.word	0x40000800
 800b0a4:	40000c00 	.word	0x40000c00
 800b0a8:	40014000 	.word	0x40014000

0800b0ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b085      	sub	sp, #20
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d101      	bne.n	800b0c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b0c4:	2302      	movs	r3, #2
 800b0c6:	e078      	b.n	800b1ba <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	68db      	ldr	r3, [r3, #12]
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	689b      	ldr	r3, [r3, #8]
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4313      	orrs	r3, r2
 800b106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	691b      	ldr	r3, [r3, #16]
 800b112:	4313      	orrs	r3, r2
 800b114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	695b      	ldr	r3, [r3, #20]
 800b120:	4313      	orrs	r3, r2
 800b122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b12e:	4313      	orrs	r3, r2
 800b130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	699b      	ldr	r3, [r3, #24]
 800b13c:	041b      	lsls	r3, r3, #16
 800b13e:	4313      	orrs	r3, r2
 800b140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	69db      	ldr	r3, [r3, #28]
 800b14c:	4313      	orrs	r3, r2
 800b14e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4a1c      	ldr	r2, [pc, #112]	@ (800b1c8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d009      	beq.n	800b16e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4a1b      	ldr	r2, [pc, #108]	@ (800b1cc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d004      	beq.n	800b16e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4a19      	ldr	r2, [pc, #100]	@ (800b1d0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d11c      	bne.n	800b1a8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b178:	051b      	lsls	r3, r3, #20
 800b17a:	4313      	orrs	r3, r2
 800b17c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	6a1b      	ldr	r3, [r3, #32]
 800b188:	4313      	orrs	r3, r2
 800b18a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b196:	4313      	orrs	r3, r2
 800b198:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	68fa      	ldr	r2, [r7, #12]
 800b1ae:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b1b8:	2300      	movs	r3, #0
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3714      	adds	r7, #20
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr
 800b1c6:	bf00      	nop
 800b1c8:	40012c00 	.word	0x40012c00
 800b1cc:	40013400 	.word	0x40013400
 800b1d0:	40015000 	.word	0x40015000

0800b1d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b083      	sub	sp, #12
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b1dc:	bf00      	nop
 800b1de:	370c      	adds	r7, #12
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr

0800b1e8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800b1f0:	bf00      	nop
 800b1f2:	370c      	adds	r7, #12
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b083      	sub	sp, #12
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b204:	bf00      	nop
 800b206:	370c      	adds	r7, #12
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr

0800b210 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b210:	b480      	push	{r7}
 800b212:	b083      	sub	sp, #12
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b218:	bf00      	nop
 800b21a:	370c      	adds	r7, #12
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr

0800b224 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b22c:	bf00      	nop
 800b22e:	370c      	adds	r7, #12
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b240:	bf00      	nop
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b254:	bf00      	nop
 800b256:	370c      	adds	r7, #12
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b268:	bf00      	nop
 800b26a:	370c      	adds	r7, #12
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b082      	sub	sp, #8
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d101      	bne.n	800b286 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b282:	2301      	movs	r3, #1
 800b284:	e050      	b.n	800b328 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d114      	bne.n	800b2ba <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 fd45 	bl	800bd28 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d103      	bne.n	800b2b0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	4a21      	ldr	r2, [pc, #132]	@ (800b330 <HAL_UART_Init+0xbc>)
 800b2ac:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2224      	movs	r2, #36	@ 0x24
 800b2be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	681a      	ldr	r2, [r3, #0]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f022 0201 	bic.w	r2, r2, #1
 800b2d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d002      	beq.n	800b2e0 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f001 f872 	bl	800c3c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 fd73 	bl	800bdcc <UART_SetConfig>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d101      	bne.n	800b2f0 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	e01b      	b.n	800b328 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	685a      	ldr	r2, [r3, #4]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b2fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	689a      	ldr	r2, [r3, #8]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b30e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f042 0201 	orr.w	r2, r2, #1
 800b31e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f001 f8f1 	bl	800c508 <UART_CheckIdleState>
 800b326:	4603      	mov	r3, r0
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3708      	adds	r7, #8
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	080053d1 	.word	0x080053d1

0800b334 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800b334:	b480      	push	{r7}
 800b336:	b087      	sub	sp, #28
 800b338:	af00      	add	r7, sp, #0
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	460b      	mov	r3, r1
 800b33e:	607a      	str	r2, [r7, #4]
 800b340:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b342:	2300      	movs	r3, #0
 800b344:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d109      	bne.n	800b360 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b352:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800b35c:	2301      	movs	r3, #1
 800b35e:	e09c      	b.n	800b49a <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b366:	2b20      	cmp	r3, #32
 800b368:	d16c      	bne.n	800b444 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800b36a:	7afb      	ldrb	r3, [r7, #11]
 800b36c:	2b0c      	cmp	r3, #12
 800b36e:	d85e      	bhi.n	800b42e <HAL_UART_RegisterCallback+0xfa>
 800b370:	a201      	add	r2, pc, #4	@ (adr r2, 800b378 <HAL_UART_RegisterCallback+0x44>)
 800b372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b376:	bf00      	nop
 800b378:	0800b3ad 	.word	0x0800b3ad
 800b37c:	0800b3b7 	.word	0x0800b3b7
 800b380:	0800b3c1 	.word	0x0800b3c1
 800b384:	0800b3cb 	.word	0x0800b3cb
 800b388:	0800b3d5 	.word	0x0800b3d5
 800b38c:	0800b3df 	.word	0x0800b3df
 800b390:	0800b3e9 	.word	0x0800b3e9
 800b394:	0800b3f3 	.word	0x0800b3f3
 800b398:	0800b3fd 	.word	0x0800b3fd
 800b39c:	0800b407 	.word	0x0800b407
 800b3a0:	0800b411 	.word	0x0800b411
 800b3a4:	0800b41b 	.word	0x0800b41b
 800b3a8:	0800b425 	.word	0x0800b425
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800b3b4:	e070      	b.n	800b498 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	687a      	ldr	r2, [r7, #4]
 800b3ba:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800b3be:	e06b      	b.n	800b498 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800b3c8:	e066      	b.n	800b498 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800b3d2:	e061      	b.n	800b498 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	687a      	ldr	r2, [r7, #4]
 800b3d8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800b3dc:	e05c      	b.n	800b498 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800b3e6:	e057      	b.n	800b498 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	687a      	ldr	r2, [r7, #4]
 800b3ec:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800b3f0:	e052      	b.n	800b498 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800b3fa:	e04d      	b.n	800b498 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800b404:	e048      	b.n	800b498 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	687a      	ldr	r2, [r7, #4]
 800b40a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800b40e:	e043      	b.n	800b498 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800b418:	e03e      	b.n	800b498 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800b422:	e039      	b.n	800b498 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	687a      	ldr	r2, [r7, #4]
 800b428:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800b42c:	e034      	b.n	800b498 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b434:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800b43e:	2301      	movs	r3, #1
 800b440:	75fb      	strb	r3, [r7, #23]
        break;
 800b442:	e029      	b.n	800b498 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d11a      	bne.n	800b484 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800b44e:	7afb      	ldrb	r3, [r7, #11]
 800b450:	2b0b      	cmp	r3, #11
 800b452:	d002      	beq.n	800b45a <HAL_UART_RegisterCallback+0x126>
 800b454:	2b0c      	cmp	r3, #12
 800b456:	d005      	beq.n	800b464 <HAL_UART_RegisterCallback+0x130>
 800b458:	e009      	b.n	800b46e <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800b462:	e019      	b.n	800b498 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800b46c:	e014      	b.n	800b498 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b474:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800b47e:	2301      	movs	r3, #1
 800b480:	75fb      	strb	r3, [r7, #23]
        break;
 800b482:	e009      	b.n	800b498 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b48a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800b494:	2301      	movs	r3, #1
 800b496:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b498:	7dfb      	ldrb	r3, [r7, #23]
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	371c      	adds	r7, #28
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a4:	4770      	bx	lr
 800b4a6:	bf00      	nop

0800b4a8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b08a      	sub	sp, #40	@ 0x28
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	60b9      	str	r1, [r7, #8]
 800b4b2:	4613      	mov	r3, r2
 800b4b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b4bc:	2b20      	cmp	r3, #32
 800b4be:	d137      	bne.n	800b530 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d002      	beq.n	800b4cc <HAL_UART_Receive_DMA+0x24>
 800b4c6:	88fb      	ldrh	r3, [r7, #6]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d101      	bne.n	800b4d0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	e030      	b.n	800b532 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a18      	ldr	r2, [pc, #96]	@ (800b53c <HAL_UART_Receive_DMA+0x94>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d01f      	beq.n	800b520 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d018      	beq.n	800b520 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	e853 3f00 	ldrex	r3, [r3]
 800b4fa:	613b      	str	r3, [r7, #16]
   return(result);
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b502:	627b      	str	r3, [r7, #36]	@ 0x24
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	461a      	mov	r2, r3
 800b50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b50c:	623b      	str	r3, [r7, #32]
 800b50e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b510:	69f9      	ldr	r1, [r7, #28]
 800b512:	6a3a      	ldr	r2, [r7, #32]
 800b514:	e841 2300 	strex	r3, r2, [r1]
 800b518:	61bb      	str	r3, [r7, #24]
   return(result);
 800b51a:	69bb      	ldr	r3, [r7, #24]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d1e6      	bne.n	800b4ee <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b520:	88fb      	ldrh	r3, [r7, #6]
 800b522:	461a      	mov	r2, r3
 800b524:	68b9      	ldr	r1, [r7, #8]
 800b526:	68f8      	ldr	r0, [r7, #12]
 800b528:	f001 f906 	bl	800c738 <UART_Start_Receive_DMA>
 800b52c:	4603      	mov	r3, r0
 800b52e:	e000      	b.n	800b532 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b530:	2302      	movs	r3, #2
  }
}
 800b532:	4618      	mov	r0, r3
 800b534:	3728      	adds	r7, #40	@ 0x28
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	40008000 	.word	0x40008000

0800b540 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b0ba      	sub	sp, #232	@ 0xe8
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	69db      	ldr	r3, [r3, #28]
 800b54e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	689b      	ldr	r3, [r3, #8]
 800b562:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b566:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b56a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b56e:	4013      	ands	r3, r2
 800b570:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b574:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d11b      	bne.n	800b5b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b57c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b580:	f003 0320 	and.w	r3, r3, #32
 800b584:	2b00      	cmp	r3, #0
 800b586:	d015      	beq.n	800b5b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b58c:	f003 0320 	and.w	r3, r3, #32
 800b590:	2b00      	cmp	r3, #0
 800b592:	d105      	bne.n	800b5a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d009      	beq.n	800b5b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f000 82f3 	beq.w	800bb90 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	4798      	blx	r3
      }
      return;
 800b5b2:	e2ed      	b.n	800bb90 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b5b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	f000 8129 	beq.w	800b810 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b5be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b5c2:	4b90      	ldr	r3, [pc, #576]	@ (800b804 <HAL_UART_IRQHandler+0x2c4>)
 800b5c4:	4013      	ands	r3, r2
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d106      	bne.n	800b5d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b5ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b5ce:	4b8e      	ldr	r3, [pc, #568]	@ (800b808 <HAL_UART_IRQHandler+0x2c8>)
 800b5d0:	4013      	ands	r3, r2
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	f000 811c 	beq.w	800b810 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b5d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5dc:	f003 0301 	and.w	r3, r3, #1
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d011      	beq.n	800b608 <HAL_UART_IRQHandler+0xc8>
 800b5e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b5e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d00b      	beq.n	800b608 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5fe:	f043 0201 	orr.w	r2, r3, #1
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b60c:	f003 0302 	and.w	r3, r3, #2
 800b610:	2b00      	cmp	r3, #0
 800b612:	d011      	beq.n	800b638 <HAL_UART_IRQHandler+0xf8>
 800b614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b618:	f003 0301 	and.w	r3, r3, #1
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d00b      	beq.n	800b638 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	2202      	movs	r2, #2
 800b626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b62e:	f043 0204 	orr.w	r2, r3, #4
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b63c:	f003 0304 	and.w	r3, r3, #4
 800b640:	2b00      	cmp	r3, #0
 800b642:	d011      	beq.n	800b668 <HAL_UART_IRQHandler+0x128>
 800b644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b648:	f003 0301 	and.w	r3, r3, #1
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00b      	beq.n	800b668 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	2204      	movs	r2, #4
 800b656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b65e:	f043 0202 	orr.w	r2, r3, #2
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b66c:	f003 0308 	and.w	r3, r3, #8
 800b670:	2b00      	cmp	r3, #0
 800b672:	d017      	beq.n	800b6a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b678:	f003 0320 	and.w	r3, r3, #32
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d105      	bne.n	800b68c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b680:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b684:	4b5f      	ldr	r3, [pc, #380]	@ (800b804 <HAL_UART_IRQHandler+0x2c4>)
 800b686:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d00b      	beq.n	800b6a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	2208      	movs	r2, #8
 800b692:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b69a:	f043 0208 	orr.w	r2, r3, #8
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b6a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b6a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d012      	beq.n	800b6d6 <HAL_UART_IRQHandler+0x196>
 800b6b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b6b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d00c      	beq.n	800b6d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b6c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6cc:	f043 0220 	orr.w	r2, r3, #32
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	f000 8259 	beq.w	800bb94 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b6e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b6e6:	f003 0320 	and.w	r3, r3, #32
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d013      	beq.n	800b716 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b6ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b6f2:	f003 0320 	and.w	r3, r3, #32
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d105      	bne.n	800b706 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b6fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b6fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b702:	2b00      	cmp	r3, #0
 800b704:	d007      	beq.n	800b716 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d003      	beq.n	800b716 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b71c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	689b      	ldr	r3, [r3, #8]
 800b726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b72a:	2b40      	cmp	r3, #64	@ 0x40
 800b72c:	d005      	beq.n	800b73a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b72e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b732:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b736:	2b00      	cmp	r3, #0
 800b738:	d058      	beq.n	800b7ec <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f001 f8e3 	bl	800c906 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b74a:	2b40      	cmp	r3, #64	@ 0x40
 800b74c:	d148      	bne.n	800b7e0 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	3308      	adds	r3, #8
 800b754:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b758:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b75c:	e853 3f00 	ldrex	r3, [r3]
 800b760:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b764:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b768:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b76c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	3308      	adds	r3, #8
 800b776:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b77a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b77e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b782:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b786:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b78a:	e841 2300 	strex	r3, r2, [r1]
 800b78e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b792:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d1d9      	bne.n	800b74e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d017      	beq.n	800b7d4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7aa:	4a18      	ldr	r2, [pc, #96]	@ (800b80c <HAL_UART_IRQHandler+0x2cc>)
 800b7ac:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f7fc f8bb 	bl	8007930 <HAL_DMA_Abort_IT>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d01f      	beq.n	800b800 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b7ce:	4610      	mov	r0, r2
 800b7d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7d2:	e015      	b.n	800b800 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7de:	e00f      	b.n	800b800 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7ea:	e009      	b.n	800b800 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b7fe:	e1c9      	b.n	800bb94 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b800:	bf00      	nop
    return;
 800b802:	e1c7      	b.n	800bb94 <HAL_UART_IRQHandler+0x654>
 800b804:	10000001 	.word	0x10000001
 800b808:	04000120 	.word	0x04000120
 800b80c:	0800cbd1 	.word	0x0800cbd1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b814:	2b01      	cmp	r3, #1
 800b816:	f040 8157 	bne.w	800bac8 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b81a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b81e:	f003 0310 	and.w	r3, r3, #16
 800b822:	2b00      	cmp	r3, #0
 800b824:	f000 8150 	beq.w	800bac8 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b82c:	f003 0310 	and.w	r3, r3, #16
 800b830:	2b00      	cmp	r3, #0
 800b832:	f000 8149 	beq.w	800bac8 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	2210      	movs	r2, #16
 800b83c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	689b      	ldr	r3, [r3, #8]
 800b844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b848:	2b40      	cmp	r3, #64	@ 0x40
 800b84a:	f040 80bd 	bne.w	800b9c8 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b85c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b860:	2b00      	cmp	r3, #0
 800b862:	f000 8199 	beq.w	800bb98 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b86c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b870:	429a      	cmp	r2, r3
 800b872:	f080 8191 	bcs.w	800bb98 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b87c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f003 0320 	and.w	r3, r3, #32
 800b88e:	2b00      	cmp	r3, #0
 800b890:	f040 8087 	bne.w	800b9a2 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b89c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b8a0:	e853 3f00 	ldrex	r3, [r3]
 800b8a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b8a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b8ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b8b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b8be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b8c2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b8ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b8ce:	e841 2300 	strex	r3, r2, [r1]
 800b8d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b8d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d1da      	bne.n	800b894 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	3308      	adds	r3, #8
 800b8e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b8e8:	e853 3f00 	ldrex	r3, [r3]
 800b8ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b8ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b8f0:	f023 0301 	bic.w	r3, r3, #1
 800b8f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	3308      	adds	r3, #8
 800b8fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b902:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b906:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b908:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b90a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b90e:	e841 2300 	strex	r3, r2, [r1]
 800b912:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b914:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b916:	2b00      	cmp	r3, #0
 800b918:	d1e1      	bne.n	800b8de <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	3308      	adds	r3, #8
 800b920:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b922:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b924:	e853 3f00 	ldrex	r3, [r3]
 800b928:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b92a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b92c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b930:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	3308      	adds	r3, #8
 800b93a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b93e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b940:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b942:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b944:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b946:	e841 2300 	strex	r3, r2, [r1]
 800b94a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b94c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d1e3      	bne.n	800b91a <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2220      	movs	r2, #32
 800b956:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2200      	movs	r2, #0
 800b95e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b966:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b968:	e853 3f00 	ldrex	r3, [r3]
 800b96c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b96e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b970:	f023 0310 	bic.w	r3, r3, #16
 800b974:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	461a      	mov	r2, r3
 800b97e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b982:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b984:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b986:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b988:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b98a:	e841 2300 	strex	r3, r2, [r1]
 800b98e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b990:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b992:	2b00      	cmp	r3, #0
 800b994:	d1e4      	bne.n	800b960 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7fb ff6e 	bl	800787e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2202      	movs	r2, #2
 800b9a6:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800b9b4:	687a      	ldr	r2, [r7, #4]
 800b9b6:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800b9ba:	b292      	uxth	r2, r2
 800b9bc:	1a8a      	subs	r2, r1, r2
 800b9be:	b292      	uxth	r2, r2
 800b9c0:	4611      	mov	r1, r2
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b9c6:	e0e7      	b.n	800bb98 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b9d4:	b29b      	uxth	r3, r3
 800b9d6:	1ad3      	subs	r3, r2, r3
 800b9d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	f000 80d9 	beq.w	800bb9c <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800b9ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	f000 80d4 	beq.w	800bb9c <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9fc:	e853 3f00 	ldrex	r3, [r3]
 800ba00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ba02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ba08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	461a      	mov	r2, r3
 800ba12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ba16:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba18:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ba1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba1e:	e841 2300 	strex	r3, r2, [r1]
 800ba22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ba24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d1e4      	bne.n	800b9f4 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	3308      	adds	r3, #8
 800ba30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba34:	e853 3f00 	ldrex	r3, [r3]
 800ba38:	623b      	str	r3, [r7, #32]
   return(result);
 800ba3a:	6a3b      	ldr	r3, [r7, #32]
 800ba3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ba40:	f023 0301 	bic.w	r3, r3, #1
 800ba44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	3308      	adds	r3, #8
 800ba4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ba52:	633a      	str	r2, [r7, #48]	@ 0x30
 800ba54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba5a:	e841 2300 	strex	r3, r2, [r1]
 800ba5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ba60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d1e1      	bne.n	800ba2a <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2220      	movs	r2, #32
 800ba6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2200      	movs	r2, #0
 800ba72:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2200      	movs	r2, #0
 800ba78:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	e853 3f00 	ldrex	r3, [r3]
 800ba86:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	f023 0310 	bic.w	r3, r3, #16
 800ba8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	461a      	mov	r2, r3
 800ba98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ba9c:	61fb      	str	r3, [r7, #28]
 800ba9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa0:	69b9      	ldr	r1, [r7, #24]
 800baa2:	69fa      	ldr	r2, [r7, #28]
 800baa4:	e841 2300 	strex	r3, r2, [r1]
 800baa8:	617b      	str	r3, [r7, #20]
   return(result);
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d1e4      	bne.n	800ba7a <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2202      	movs	r2, #2
 800bab4:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800babc:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800bac0:	4611      	mov	r1, r2
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bac6:	e069      	b.n	800bb9c <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bacc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d010      	beq.n	800baf6 <HAL_UART_IRQHandler+0x5b6>
 800bad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bad8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800badc:	2b00      	cmp	r3, #0
 800bade:	d00a      	beq.n	800baf6 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800bae8:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800baf4:	e055      	b.n	800bba2 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800baf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bafa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d014      	beq.n	800bb2c <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bb02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d105      	bne.n	800bb1a <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bb0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bb12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d008      	beq.n	800bb2c <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d03e      	beq.n	800bba0 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	4798      	blx	r3
    }
    return;
 800bb2a:	e039      	b.n	800bba0 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bb2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d009      	beq.n	800bb4c <HAL_UART_IRQHandler+0x60c>
 800bb38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d003      	beq.n	800bb4c <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f001 f85b 	bl	800cc00 <UART_EndTransmit_IT>
    return;
 800bb4a:	e02a      	b.n	800bba2 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bb4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d00b      	beq.n	800bb70 <HAL_UART_IRQHandler+0x630>
 800bb58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb5c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d005      	beq.n	800bb70 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb6e:	e018      	b.n	800bba2 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bb70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d012      	beq.n	800bba2 <HAL_UART_IRQHandler+0x662>
 800bb7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	da0e      	bge.n	800bba2 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb8e:	e008      	b.n	800bba2 <HAL_UART_IRQHandler+0x662>
      return;
 800bb90:	bf00      	nop
 800bb92:	e006      	b.n	800bba2 <HAL_UART_IRQHandler+0x662>
    return;
 800bb94:	bf00      	nop
 800bb96:	e004      	b.n	800bba2 <HAL_UART_IRQHandler+0x662>
      return;
 800bb98:	bf00      	nop
 800bb9a:	e002      	b.n	800bba2 <HAL_UART_IRQHandler+0x662>
      return;
 800bb9c:	bf00      	nop
 800bb9e:	e000      	b.n	800bba2 <HAL_UART_IRQHandler+0x662>
    return;
 800bba0:	bf00      	nop
  }
}
 800bba2:	37e8      	adds	r7, #232	@ 0xe8
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b083      	sub	sp, #12
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bbb0:	bf00      	nop
 800bbb2:	370c      	adds	r7, #12
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr

0800bbbc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b083      	sub	sp, #12
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800bbc4:	bf00      	nop
 800bbc6:	370c      	adds	r7, #12
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr

0800bbd0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b083      	sub	sp, #12
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800bbd8:	bf00      	nop
 800bbda:	370c      	adds	r7, #12
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr

0800bbe4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b083      	sub	sp, #12
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bbec:	bf00      	nop
 800bbee:	370c      	adds	r7, #12
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b083      	sub	sp, #12
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bc00:	bf00      	nop
 800bc02:	370c      	adds	r7, #12
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr

0800bc0c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b083      	sub	sp, #12
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800bc14:	bf00      	nop
 800bc16:	370c      	adds	r7, #12
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr

0800bc20 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b083      	sub	sp, #12
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800bc28:	bf00      	nop
 800bc2a:	370c      	adds	r7, #12
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr

0800bc34 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b083      	sub	sp, #12
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800bc3c:	bf00      	nop
 800bc3e:	370c      	adds	r7, #12
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr

0800bc48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b083      	sub	sp, #12
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	460b      	mov	r3, r1
 800bc52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bc54:	bf00      	nop
 800bc56:	370c      	adds	r7, #12
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr

0800bc60 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	4a09      	ldr	r2, [pc, #36]	@ (800bc94 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d009      	beq.n	800bc88 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	695b      	ldr	r3, [r3, #20]
 800bc7a:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	683a      	ldr	r2, [r7, #0]
 800bc84:	430a      	orrs	r2, r1
 800bc86:	615a      	str	r2, [r3, #20]
  }
}
 800bc88:	bf00      	nop
 800bc8a:	370c      	adds	r7, #12
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr
 800bc94:	40008000 	.word	0x40008000

0800bc98 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b083      	sub	sp, #12
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4a18      	ldr	r2, [pc, #96]	@ (800bd08 <HAL_UART_EnableReceiverTimeout+0x70>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d027      	beq.n	800bcfa <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bcb0:	2b20      	cmp	r3, #32
 800bcb2:	d120      	bne.n	800bcf6 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bcba:	2b01      	cmp	r3, #1
 800bcbc:	d101      	bne.n	800bcc2 <HAL_UART_EnableReceiverTimeout+0x2a>
 800bcbe:	2302      	movs	r3, #2
 800bcc0:	e01c      	b.n	800bcfc <HAL_UART_EnableReceiverTimeout+0x64>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2224      	movs	r2, #36	@ 0x24
 800bcce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	685a      	ldr	r2, [r3, #4]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800bce0:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2220      	movs	r2, #32
 800bce6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2200      	movs	r2, #0
 800bcee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	e002      	b.n	800bcfc <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800bcf6:	2302      	movs	r3, #2
 800bcf8:	e000      	b.n	800bcfc <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800bcfa:	2301      	movs	r3, #1
  }
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	370c      	adds	r7, #12
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr
 800bd08:	40008000 	.word	0x40008000

0800bd0c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b083      	sub	sp, #12
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	370c      	adds	r7, #12
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr
	...

0800bd28 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b083      	sub	sp, #12
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	4a1a      	ldr	r2, [pc, #104]	@ (800bd9c <UART_InitCallbacksToDefault+0x74>)
 800bd34:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	4a19      	ldr	r2, [pc, #100]	@ (800bda0 <UART_InitCallbacksToDefault+0x78>)
 800bd3c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	4a18      	ldr	r2, [pc, #96]	@ (800bda4 <UART_InitCallbacksToDefault+0x7c>)
 800bd44:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	4a17      	ldr	r2, [pc, #92]	@ (800bda8 <UART_InitCallbacksToDefault+0x80>)
 800bd4c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	4a16      	ldr	r2, [pc, #88]	@ (800bdac <UART_InitCallbacksToDefault+0x84>)
 800bd54:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	4a15      	ldr	r2, [pc, #84]	@ (800bdb0 <UART_InitCallbacksToDefault+0x88>)
 800bd5c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	4a14      	ldr	r2, [pc, #80]	@ (800bdb4 <UART_InitCallbacksToDefault+0x8c>)
 800bd64:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	4a13      	ldr	r2, [pc, #76]	@ (800bdb8 <UART_InitCallbacksToDefault+0x90>)
 800bd6c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	4a12      	ldr	r2, [pc, #72]	@ (800bdbc <UART_InitCallbacksToDefault+0x94>)
 800bd74:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	4a11      	ldr	r2, [pc, #68]	@ (800bdc0 <UART_InitCallbacksToDefault+0x98>)
 800bd7c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	4a10      	ldr	r2, [pc, #64]	@ (800bdc4 <UART_InitCallbacksToDefault+0x9c>)
 800bd84:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	4a0f      	ldr	r2, [pc, #60]	@ (800bdc8 <UART_InitCallbacksToDefault+0xa0>)
 800bd8c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800bd90:	bf00      	nop
 800bd92:	370c      	adds	r7, #12
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr
 800bd9c:	0800bbbd 	.word	0x0800bbbd
 800bda0:	0800bba9 	.word	0x0800bba9
 800bda4:	0800bbe5 	.word	0x0800bbe5
 800bda8:	0800bbd1 	.word	0x0800bbd1
 800bdac:	0800bbf9 	.word	0x0800bbf9
 800bdb0:	0800bc0d 	.word	0x0800bc0d
 800bdb4:	0800bc21 	.word	0x0800bc21
 800bdb8:	0800bc35 	.word	0x0800bc35
 800bdbc:	0800cc5b 	.word	0x0800cc5b
 800bdc0:	0800cc6f 	.word	0x0800cc6f
 800bdc4:	0800cc83 	.word	0x0800cc83
 800bdc8:	0800bc49 	.word	0x0800bc49

0800bdcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bdcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bdd0:	b08c      	sub	sp, #48	@ 0x30
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	689a      	ldr	r2, [r3, #8]
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	691b      	ldr	r3, [r3, #16]
 800bde4:	431a      	orrs	r2, r3
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	695b      	ldr	r3, [r3, #20]
 800bdea:	431a      	orrs	r2, r3
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	69db      	ldr	r3, [r3, #28]
 800bdf0:	4313      	orrs	r3, r2
 800bdf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	4baa      	ldr	r3, [pc, #680]	@ (800c0a4 <UART_SetConfig+0x2d8>)
 800bdfc:	4013      	ands	r3, r2
 800bdfe:	697a      	ldr	r2, [r7, #20]
 800be00:	6812      	ldr	r2, [r2, #0]
 800be02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800be04:	430b      	orrs	r3, r1
 800be06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	68da      	ldr	r2, [r3, #12]
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	430a      	orrs	r2, r1
 800be1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	699b      	ldr	r3, [r3, #24]
 800be22:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	4a9f      	ldr	r2, [pc, #636]	@ (800c0a8 <UART_SetConfig+0x2dc>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d004      	beq.n	800be38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	6a1b      	ldr	r3, [r3, #32]
 800be32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be34:	4313      	orrs	r3, r2
 800be36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	689b      	ldr	r3, [r3, #8]
 800be3e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800be42:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800be46:	697a      	ldr	r2, [r7, #20]
 800be48:	6812      	ldr	r2, [r2, #0]
 800be4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800be4c:	430b      	orrs	r3, r1
 800be4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be56:	f023 010f 	bic.w	r1, r3, #15
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	430a      	orrs	r2, r1
 800be64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4a90      	ldr	r2, [pc, #576]	@ (800c0ac <UART_SetConfig+0x2e0>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d125      	bne.n	800bebc <UART_SetConfig+0xf0>
 800be70:	4b8f      	ldr	r3, [pc, #572]	@ (800c0b0 <UART_SetConfig+0x2e4>)
 800be72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be76:	f003 0303 	and.w	r3, r3, #3
 800be7a:	2b03      	cmp	r3, #3
 800be7c:	d81a      	bhi.n	800beb4 <UART_SetConfig+0xe8>
 800be7e:	a201      	add	r2, pc, #4	@ (adr r2, 800be84 <UART_SetConfig+0xb8>)
 800be80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be84:	0800be95 	.word	0x0800be95
 800be88:	0800bea5 	.word	0x0800bea5
 800be8c:	0800be9d 	.word	0x0800be9d
 800be90:	0800bead 	.word	0x0800bead
 800be94:	2301      	movs	r3, #1
 800be96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800be9a:	e116      	b.n	800c0ca <UART_SetConfig+0x2fe>
 800be9c:	2302      	movs	r3, #2
 800be9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bea2:	e112      	b.n	800c0ca <UART_SetConfig+0x2fe>
 800bea4:	2304      	movs	r3, #4
 800bea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800beaa:	e10e      	b.n	800c0ca <UART_SetConfig+0x2fe>
 800beac:	2308      	movs	r3, #8
 800beae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800beb2:	e10a      	b.n	800c0ca <UART_SetConfig+0x2fe>
 800beb4:	2310      	movs	r3, #16
 800beb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800beba:	e106      	b.n	800c0ca <UART_SetConfig+0x2fe>
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4a7c      	ldr	r2, [pc, #496]	@ (800c0b4 <UART_SetConfig+0x2e8>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d138      	bne.n	800bf38 <UART_SetConfig+0x16c>
 800bec6:	4b7a      	ldr	r3, [pc, #488]	@ (800c0b0 <UART_SetConfig+0x2e4>)
 800bec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800becc:	f003 030c 	and.w	r3, r3, #12
 800bed0:	2b0c      	cmp	r3, #12
 800bed2:	d82d      	bhi.n	800bf30 <UART_SetConfig+0x164>
 800bed4:	a201      	add	r2, pc, #4	@ (adr r2, 800bedc <UART_SetConfig+0x110>)
 800bed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beda:	bf00      	nop
 800bedc:	0800bf11 	.word	0x0800bf11
 800bee0:	0800bf31 	.word	0x0800bf31
 800bee4:	0800bf31 	.word	0x0800bf31
 800bee8:	0800bf31 	.word	0x0800bf31
 800beec:	0800bf21 	.word	0x0800bf21
 800bef0:	0800bf31 	.word	0x0800bf31
 800bef4:	0800bf31 	.word	0x0800bf31
 800bef8:	0800bf31 	.word	0x0800bf31
 800befc:	0800bf19 	.word	0x0800bf19
 800bf00:	0800bf31 	.word	0x0800bf31
 800bf04:	0800bf31 	.word	0x0800bf31
 800bf08:	0800bf31 	.word	0x0800bf31
 800bf0c:	0800bf29 	.word	0x0800bf29
 800bf10:	2300      	movs	r3, #0
 800bf12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bf16:	e0d8      	b.n	800c0ca <UART_SetConfig+0x2fe>
 800bf18:	2302      	movs	r3, #2
 800bf1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bf1e:	e0d4      	b.n	800c0ca <UART_SetConfig+0x2fe>
 800bf20:	2304      	movs	r3, #4
 800bf22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bf26:	e0d0      	b.n	800c0ca <UART_SetConfig+0x2fe>
 800bf28:	2308      	movs	r3, #8
 800bf2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bf2e:	e0cc      	b.n	800c0ca <UART_SetConfig+0x2fe>
 800bf30:	2310      	movs	r3, #16
 800bf32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bf36:	e0c8      	b.n	800c0ca <UART_SetConfig+0x2fe>
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	4a5e      	ldr	r2, [pc, #376]	@ (800c0b8 <UART_SetConfig+0x2ec>)
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	d125      	bne.n	800bf8e <UART_SetConfig+0x1c2>
 800bf42:	4b5b      	ldr	r3, [pc, #364]	@ (800c0b0 <UART_SetConfig+0x2e4>)
 800bf44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf48:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800bf4c:	2b30      	cmp	r3, #48	@ 0x30
 800bf4e:	d016      	beq.n	800bf7e <UART_SetConfig+0x1b2>
 800bf50:	2b30      	cmp	r3, #48	@ 0x30
 800bf52:	d818      	bhi.n	800bf86 <UART_SetConfig+0x1ba>
 800bf54:	2b20      	cmp	r3, #32
 800bf56:	d00a      	beq.n	800bf6e <UART_SetConfig+0x1a2>
 800bf58:	2b20      	cmp	r3, #32
 800bf5a:	d814      	bhi.n	800bf86 <UART_SetConfig+0x1ba>
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d002      	beq.n	800bf66 <UART_SetConfig+0x19a>
 800bf60:	2b10      	cmp	r3, #16
 800bf62:	d008      	beq.n	800bf76 <UART_SetConfig+0x1aa>
 800bf64:	e00f      	b.n	800bf86 <UART_SetConfig+0x1ba>
 800bf66:	2300      	movs	r3, #0
 800bf68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bf6c:	e0ad      	b.n	800c0ca <UART_SetConfig+0x2fe>
 800bf6e:	2302      	movs	r3, #2
 800bf70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bf74:	e0a9      	b.n	800c0ca <UART_SetConfig+0x2fe>
 800bf76:	2304      	movs	r3, #4
 800bf78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bf7c:	e0a5      	b.n	800c0ca <UART_SetConfig+0x2fe>
 800bf7e:	2308      	movs	r3, #8
 800bf80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bf84:	e0a1      	b.n	800c0ca <UART_SetConfig+0x2fe>
 800bf86:	2310      	movs	r3, #16
 800bf88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bf8c:	e09d      	b.n	800c0ca <UART_SetConfig+0x2fe>
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	4a4a      	ldr	r2, [pc, #296]	@ (800c0bc <UART_SetConfig+0x2f0>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d125      	bne.n	800bfe4 <UART_SetConfig+0x218>
 800bf98:	4b45      	ldr	r3, [pc, #276]	@ (800c0b0 <UART_SetConfig+0x2e4>)
 800bf9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf9e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800bfa2:	2bc0      	cmp	r3, #192	@ 0xc0
 800bfa4:	d016      	beq.n	800bfd4 <UART_SetConfig+0x208>
 800bfa6:	2bc0      	cmp	r3, #192	@ 0xc0
 800bfa8:	d818      	bhi.n	800bfdc <UART_SetConfig+0x210>
 800bfaa:	2b80      	cmp	r3, #128	@ 0x80
 800bfac:	d00a      	beq.n	800bfc4 <UART_SetConfig+0x1f8>
 800bfae:	2b80      	cmp	r3, #128	@ 0x80
 800bfb0:	d814      	bhi.n	800bfdc <UART_SetConfig+0x210>
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d002      	beq.n	800bfbc <UART_SetConfig+0x1f0>
 800bfb6:	2b40      	cmp	r3, #64	@ 0x40
 800bfb8:	d008      	beq.n	800bfcc <UART_SetConfig+0x200>
 800bfba:	e00f      	b.n	800bfdc <UART_SetConfig+0x210>
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bfc2:	e082      	b.n	800c0ca <UART_SetConfig+0x2fe>
 800bfc4:	2302      	movs	r3, #2
 800bfc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bfca:	e07e      	b.n	800c0ca <UART_SetConfig+0x2fe>
 800bfcc:	2304      	movs	r3, #4
 800bfce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bfd2:	e07a      	b.n	800c0ca <UART_SetConfig+0x2fe>
 800bfd4:	2308      	movs	r3, #8
 800bfd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bfda:	e076      	b.n	800c0ca <UART_SetConfig+0x2fe>
 800bfdc:	2310      	movs	r3, #16
 800bfde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bfe2:	e072      	b.n	800c0ca <UART_SetConfig+0x2fe>
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	4a35      	ldr	r2, [pc, #212]	@ (800c0c0 <UART_SetConfig+0x2f4>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d12a      	bne.n	800c044 <UART_SetConfig+0x278>
 800bfee:	4b30      	ldr	r3, [pc, #192]	@ (800c0b0 <UART_SetConfig+0x2e4>)
 800bff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bff4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bff8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bffc:	d01a      	beq.n	800c034 <UART_SetConfig+0x268>
 800bffe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c002:	d81b      	bhi.n	800c03c <UART_SetConfig+0x270>
 800c004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c008:	d00c      	beq.n	800c024 <UART_SetConfig+0x258>
 800c00a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c00e:	d815      	bhi.n	800c03c <UART_SetConfig+0x270>
 800c010:	2b00      	cmp	r3, #0
 800c012:	d003      	beq.n	800c01c <UART_SetConfig+0x250>
 800c014:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c018:	d008      	beq.n	800c02c <UART_SetConfig+0x260>
 800c01a:	e00f      	b.n	800c03c <UART_SetConfig+0x270>
 800c01c:	2300      	movs	r3, #0
 800c01e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c022:	e052      	b.n	800c0ca <UART_SetConfig+0x2fe>
 800c024:	2302      	movs	r3, #2
 800c026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c02a:	e04e      	b.n	800c0ca <UART_SetConfig+0x2fe>
 800c02c:	2304      	movs	r3, #4
 800c02e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c032:	e04a      	b.n	800c0ca <UART_SetConfig+0x2fe>
 800c034:	2308      	movs	r3, #8
 800c036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c03a:	e046      	b.n	800c0ca <UART_SetConfig+0x2fe>
 800c03c:	2310      	movs	r3, #16
 800c03e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c042:	e042      	b.n	800c0ca <UART_SetConfig+0x2fe>
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	4a17      	ldr	r2, [pc, #92]	@ (800c0a8 <UART_SetConfig+0x2dc>)
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d13a      	bne.n	800c0c4 <UART_SetConfig+0x2f8>
 800c04e:	4b18      	ldr	r3, [pc, #96]	@ (800c0b0 <UART_SetConfig+0x2e4>)
 800c050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c054:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c058:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c05c:	d01a      	beq.n	800c094 <UART_SetConfig+0x2c8>
 800c05e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c062:	d81b      	bhi.n	800c09c <UART_SetConfig+0x2d0>
 800c064:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c068:	d00c      	beq.n	800c084 <UART_SetConfig+0x2b8>
 800c06a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c06e:	d815      	bhi.n	800c09c <UART_SetConfig+0x2d0>
 800c070:	2b00      	cmp	r3, #0
 800c072:	d003      	beq.n	800c07c <UART_SetConfig+0x2b0>
 800c074:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c078:	d008      	beq.n	800c08c <UART_SetConfig+0x2c0>
 800c07a:	e00f      	b.n	800c09c <UART_SetConfig+0x2d0>
 800c07c:	2300      	movs	r3, #0
 800c07e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c082:	e022      	b.n	800c0ca <UART_SetConfig+0x2fe>
 800c084:	2302      	movs	r3, #2
 800c086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c08a:	e01e      	b.n	800c0ca <UART_SetConfig+0x2fe>
 800c08c:	2304      	movs	r3, #4
 800c08e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c092:	e01a      	b.n	800c0ca <UART_SetConfig+0x2fe>
 800c094:	2308      	movs	r3, #8
 800c096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c09a:	e016      	b.n	800c0ca <UART_SetConfig+0x2fe>
 800c09c:	2310      	movs	r3, #16
 800c09e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c0a2:	e012      	b.n	800c0ca <UART_SetConfig+0x2fe>
 800c0a4:	cfff69f3 	.word	0xcfff69f3
 800c0a8:	40008000 	.word	0x40008000
 800c0ac:	40013800 	.word	0x40013800
 800c0b0:	40021000 	.word	0x40021000
 800c0b4:	40004400 	.word	0x40004400
 800c0b8:	40004800 	.word	0x40004800
 800c0bc:	40004c00 	.word	0x40004c00
 800c0c0:	40005000 	.word	0x40005000
 800c0c4:	2310      	movs	r3, #16
 800c0c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	4aae      	ldr	r2, [pc, #696]	@ (800c388 <UART_SetConfig+0x5bc>)
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	f040 8097 	bne.w	800c204 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c0d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c0da:	2b08      	cmp	r3, #8
 800c0dc:	d823      	bhi.n	800c126 <UART_SetConfig+0x35a>
 800c0de:	a201      	add	r2, pc, #4	@ (adr r2, 800c0e4 <UART_SetConfig+0x318>)
 800c0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0e4:	0800c109 	.word	0x0800c109
 800c0e8:	0800c127 	.word	0x0800c127
 800c0ec:	0800c111 	.word	0x0800c111
 800c0f0:	0800c127 	.word	0x0800c127
 800c0f4:	0800c117 	.word	0x0800c117
 800c0f8:	0800c127 	.word	0x0800c127
 800c0fc:	0800c127 	.word	0x0800c127
 800c100:	0800c127 	.word	0x0800c127
 800c104:	0800c11f 	.word	0x0800c11f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c108:	f7fc fd02 	bl	8008b10 <HAL_RCC_GetPCLK1Freq>
 800c10c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c10e:	e010      	b.n	800c132 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c110:	4b9e      	ldr	r3, [pc, #632]	@ (800c38c <UART_SetConfig+0x5c0>)
 800c112:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c114:	e00d      	b.n	800c132 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c116:	f7fc fc8d 	bl	8008a34 <HAL_RCC_GetSysClockFreq>
 800c11a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c11c:	e009      	b.n	800c132 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c11e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c122:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c124:	e005      	b.n	800c132 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c126:	2300      	movs	r3, #0
 800c128:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c12a:	2301      	movs	r3, #1
 800c12c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c130:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c134:	2b00      	cmp	r3, #0
 800c136:	f000 8130 	beq.w	800c39a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c13e:	4a94      	ldr	r2, [pc, #592]	@ (800c390 <UART_SetConfig+0x5c4>)
 800c140:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c144:	461a      	mov	r2, r3
 800c146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c148:	fbb3 f3f2 	udiv	r3, r3, r2
 800c14c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	685a      	ldr	r2, [r3, #4]
 800c152:	4613      	mov	r3, r2
 800c154:	005b      	lsls	r3, r3, #1
 800c156:	4413      	add	r3, r2
 800c158:	69ba      	ldr	r2, [r7, #24]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d305      	bcc.n	800c16a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c164:	69ba      	ldr	r2, [r7, #24]
 800c166:	429a      	cmp	r2, r3
 800c168:	d903      	bls.n	800c172 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c16a:	2301      	movs	r3, #1
 800c16c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c170:	e113      	b.n	800c39a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c174:	2200      	movs	r2, #0
 800c176:	60bb      	str	r3, [r7, #8]
 800c178:	60fa      	str	r2, [r7, #12]
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c17e:	4a84      	ldr	r2, [pc, #528]	@ (800c390 <UART_SetConfig+0x5c4>)
 800c180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c184:	b29b      	uxth	r3, r3
 800c186:	2200      	movs	r2, #0
 800c188:	603b      	str	r3, [r7, #0]
 800c18a:	607a      	str	r2, [r7, #4]
 800c18c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c190:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c194:	f7f4 fd1c 	bl	8000bd0 <__aeabi_uldivmod>
 800c198:	4602      	mov	r2, r0
 800c19a:	460b      	mov	r3, r1
 800c19c:	4610      	mov	r0, r2
 800c19e:	4619      	mov	r1, r3
 800c1a0:	f04f 0200 	mov.w	r2, #0
 800c1a4:	f04f 0300 	mov.w	r3, #0
 800c1a8:	020b      	lsls	r3, r1, #8
 800c1aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c1ae:	0202      	lsls	r2, r0, #8
 800c1b0:	6979      	ldr	r1, [r7, #20]
 800c1b2:	6849      	ldr	r1, [r1, #4]
 800c1b4:	0849      	lsrs	r1, r1, #1
 800c1b6:	2000      	movs	r0, #0
 800c1b8:	460c      	mov	r4, r1
 800c1ba:	4605      	mov	r5, r0
 800c1bc:	eb12 0804 	adds.w	r8, r2, r4
 800c1c0:	eb43 0905 	adc.w	r9, r3, r5
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	469a      	mov	sl, r3
 800c1cc:	4693      	mov	fp, r2
 800c1ce:	4652      	mov	r2, sl
 800c1d0:	465b      	mov	r3, fp
 800c1d2:	4640      	mov	r0, r8
 800c1d4:	4649      	mov	r1, r9
 800c1d6:	f7f4 fcfb 	bl	8000bd0 <__aeabi_uldivmod>
 800c1da:	4602      	mov	r2, r0
 800c1dc:	460b      	mov	r3, r1
 800c1de:	4613      	mov	r3, r2
 800c1e0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c1e2:	6a3b      	ldr	r3, [r7, #32]
 800c1e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c1e8:	d308      	bcc.n	800c1fc <UART_SetConfig+0x430>
 800c1ea:	6a3b      	ldr	r3, [r7, #32]
 800c1ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c1f0:	d204      	bcs.n	800c1fc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	6a3a      	ldr	r2, [r7, #32]
 800c1f8:	60da      	str	r2, [r3, #12]
 800c1fa:	e0ce      	b.n	800c39a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c202:	e0ca      	b.n	800c39a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	69db      	ldr	r3, [r3, #28]
 800c208:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c20c:	d166      	bne.n	800c2dc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c20e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c212:	2b08      	cmp	r3, #8
 800c214:	d827      	bhi.n	800c266 <UART_SetConfig+0x49a>
 800c216:	a201      	add	r2, pc, #4	@ (adr r2, 800c21c <UART_SetConfig+0x450>)
 800c218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c21c:	0800c241 	.word	0x0800c241
 800c220:	0800c249 	.word	0x0800c249
 800c224:	0800c251 	.word	0x0800c251
 800c228:	0800c267 	.word	0x0800c267
 800c22c:	0800c257 	.word	0x0800c257
 800c230:	0800c267 	.word	0x0800c267
 800c234:	0800c267 	.word	0x0800c267
 800c238:	0800c267 	.word	0x0800c267
 800c23c:	0800c25f 	.word	0x0800c25f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c240:	f7fc fc66 	bl	8008b10 <HAL_RCC_GetPCLK1Freq>
 800c244:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c246:	e014      	b.n	800c272 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c248:	f7fc fc78 	bl	8008b3c <HAL_RCC_GetPCLK2Freq>
 800c24c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c24e:	e010      	b.n	800c272 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c250:	4b4e      	ldr	r3, [pc, #312]	@ (800c38c <UART_SetConfig+0x5c0>)
 800c252:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c254:	e00d      	b.n	800c272 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c256:	f7fc fbed 	bl	8008a34 <HAL_RCC_GetSysClockFreq>
 800c25a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c25c:	e009      	b.n	800c272 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c25e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c262:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c264:	e005      	b.n	800c272 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c266:	2300      	movs	r3, #0
 800c268:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c26a:	2301      	movs	r3, #1
 800c26c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c270:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c274:	2b00      	cmp	r3, #0
 800c276:	f000 8090 	beq.w	800c39a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c27e:	4a44      	ldr	r2, [pc, #272]	@ (800c390 <UART_SetConfig+0x5c4>)
 800c280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c284:	461a      	mov	r2, r3
 800c286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c288:	fbb3 f3f2 	udiv	r3, r3, r2
 800c28c:	005a      	lsls	r2, r3, #1
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	685b      	ldr	r3, [r3, #4]
 800c292:	085b      	lsrs	r3, r3, #1
 800c294:	441a      	add	r2, r3
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	685b      	ldr	r3, [r3, #4]
 800c29a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c29e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c2a0:	6a3b      	ldr	r3, [r7, #32]
 800c2a2:	2b0f      	cmp	r3, #15
 800c2a4:	d916      	bls.n	800c2d4 <UART_SetConfig+0x508>
 800c2a6:	6a3b      	ldr	r3, [r7, #32]
 800c2a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c2ac:	d212      	bcs.n	800c2d4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c2ae:	6a3b      	ldr	r3, [r7, #32]
 800c2b0:	b29b      	uxth	r3, r3
 800c2b2:	f023 030f 	bic.w	r3, r3, #15
 800c2b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c2b8:	6a3b      	ldr	r3, [r7, #32]
 800c2ba:	085b      	lsrs	r3, r3, #1
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	f003 0307 	and.w	r3, r3, #7
 800c2c2:	b29a      	uxth	r2, r3
 800c2c4:	8bfb      	ldrh	r3, [r7, #30]
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	8bfa      	ldrh	r2, [r7, #30]
 800c2d0:	60da      	str	r2, [r3, #12]
 800c2d2:	e062      	b.n	800c39a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c2da:	e05e      	b.n	800c39a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c2dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c2e0:	2b08      	cmp	r3, #8
 800c2e2:	d828      	bhi.n	800c336 <UART_SetConfig+0x56a>
 800c2e4:	a201      	add	r2, pc, #4	@ (adr r2, 800c2ec <UART_SetConfig+0x520>)
 800c2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ea:	bf00      	nop
 800c2ec:	0800c311 	.word	0x0800c311
 800c2f0:	0800c319 	.word	0x0800c319
 800c2f4:	0800c321 	.word	0x0800c321
 800c2f8:	0800c337 	.word	0x0800c337
 800c2fc:	0800c327 	.word	0x0800c327
 800c300:	0800c337 	.word	0x0800c337
 800c304:	0800c337 	.word	0x0800c337
 800c308:	0800c337 	.word	0x0800c337
 800c30c:	0800c32f 	.word	0x0800c32f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c310:	f7fc fbfe 	bl	8008b10 <HAL_RCC_GetPCLK1Freq>
 800c314:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c316:	e014      	b.n	800c342 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c318:	f7fc fc10 	bl	8008b3c <HAL_RCC_GetPCLK2Freq>
 800c31c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c31e:	e010      	b.n	800c342 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c320:	4b1a      	ldr	r3, [pc, #104]	@ (800c38c <UART_SetConfig+0x5c0>)
 800c322:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c324:	e00d      	b.n	800c342 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c326:	f7fc fb85 	bl	8008a34 <HAL_RCC_GetSysClockFreq>
 800c32a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c32c:	e009      	b.n	800c342 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c32e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c332:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c334:	e005      	b.n	800c342 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c336:	2300      	movs	r3, #0
 800c338:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c33a:	2301      	movs	r3, #1
 800c33c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c340:	bf00      	nop
    }

    if (pclk != 0U)
 800c342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c344:	2b00      	cmp	r3, #0
 800c346:	d028      	beq.n	800c39a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c34c:	4a10      	ldr	r2, [pc, #64]	@ (800c390 <UART_SetConfig+0x5c4>)
 800c34e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c352:	461a      	mov	r2, r3
 800c354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c356:	fbb3 f2f2 	udiv	r2, r3, r2
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	085b      	lsrs	r3, r3, #1
 800c360:	441a      	add	r2, r3
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	685b      	ldr	r3, [r3, #4]
 800c366:	fbb2 f3f3 	udiv	r3, r2, r3
 800c36a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c36c:	6a3b      	ldr	r3, [r7, #32]
 800c36e:	2b0f      	cmp	r3, #15
 800c370:	d910      	bls.n	800c394 <UART_SetConfig+0x5c8>
 800c372:	6a3b      	ldr	r3, [r7, #32]
 800c374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c378:	d20c      	bcs.n	800c394 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c37a:	6a3b      	ldr	r3, [r7, #32]
 800c37c:	b29a      	uxth	r2, r3
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	60da      	str	r2, [r3, #12]
 800c384:	e009      	b.n	800c39a <UART_SetConfig+0x5ce>
 800c386:	bf00      	nop
 800c388:	40008000 	.word	0x40008000
 800c38c:	00f42400 	.word	0x00f42400
 800c390:	0800df5c 	.word	0x0800df5c
      }
      else
      {
        ret = HAL_ERROR;
 800c394:	2301      	movs	r3, #1
 800c396:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	2201      	movs	r2, #1
 800c39e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	2201      	movs	r2, #1
 800c3a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c3b6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3730      	adds	r7, #48	@ 0x30
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c3c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b083      	sub	sp, #12
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3d0:	f003 0308 	and.w	r3, r3, #8
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d00a      	beq.n	800c3ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	430a      	orrs	r2, r1
 800c3ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3f2:	f003 0301 	and.w	r3, r3, #1
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d00a      	beq.n	800c410 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	685b      	ldr	r3, [r3, #4]
 800c400:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	430a      	orrs	r2, r1
 800c40e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c414:	f003 0302 	and.w	r3, r3, #2
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d00a      	beq.n	800c432 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	430a      	orrs	r2, r1
 800c430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c436:	f003 0304 	and.w	r3, r3, #4
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d00a      	beq.n	800c454 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	685b      	ldr	r3, [r3, #4]
 800c444:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	430a      	orrs	r2, r1
 800c452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c458:	f003 0310 	and.w	r3, r3, #16
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d00a      	beq.n	800c476 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	689b      	ldr	r3, [r3, #8]
 800c466:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	430a      	orrs	r2, r1
 800c474:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c47a:	f003 0320 	and.w	r3, r3, #32
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d00a      	beq.n	800c498 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	689b      	ldr	r3, [r3, #8]
 800c488:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	430a      	orrs	r2, r1
 800c496:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c49c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d01a      	beq.n	800c4da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	430a      	orrs	r2, r1
 800c4b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c4c2:	d10a      	bne.n	800c4da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	685b      	ldr	r3, [r3, #4]
 800c4ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	430a      	orrs	r2, r1
 800c4d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d00a      	beq.n	800c4fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	685b      	ldr	r3, [r3, #4]
 800c4ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	430a      	orrs	r2, r1
 800c4fa:	605a      	str	r2, [r3, #4]
  }
}
 800c4fc:	bf00      	nop
 800c4fe:	370c      	adds	r7, #12
 800c500:	46bd      	mov	sp, r7
 800c502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c506:	4770      	bx	lr

0800c508 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b098      	sub	sp, #96	@ 0x60
 800c50c:	af02      	add	r7, sp, #8
 800c50e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2200      	movs	r2, #0
 800c514:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c518:	f7f9 f950 	bl	80057bc <HAL_GetTick>
 800c51c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f003 0308 	and.w	r3, r3, #8
 800c528:	2b08      	cmp	r3, #8
 800c52a:	d12f      	bne.n	800c58c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c52c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c530:	9300      	str	r3, [sp, #0]
 800c532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c534:	2200      	movs	r2, #0
 800c536:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f000 f88e 	bl	800c65c <UART_WaitOnFlagUntilTimeout>
 800c540:	4603      	mov	r3, r0
 800c542:	2b00      	cmp	r3, #0
 800c544:	d022      	beq.n	800c58c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c54c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c54e:	e853 3f00 	ldrex	r3, [r3]
 800c552:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c556:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c55a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	461a      	mov	r2, r3
 800c562:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c564:	647b      	str	r3, [r7, #68]	@ 0x44
 800c566:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c568:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c56a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c56c:	e841 2300 	strex	r3, r2, [r1]
 800c570:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c574:	2b00      	cmp	r3, #0
 800c576:	d1e6      	bne.n	800c546 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2220      	movs	r2, #32
 800c57c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2200      	movs	r2, #0
 800c584:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c588:	2303      	movs	r3, #3
 800c58a:	e063      	b.n	800c654 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f003 0304 	and.w	r3, r3, #4
 800c596:	2b04      	cmp	r3, #4
 800c598:	d149      	bne.n	800c62e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c59a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c59e:	9300      	str	r3, [sp, #0]
 800c5a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 f857 	bl	800c65c <UART_WaitOnFlagUntilTimeout>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d03c      	beq.n	800c62e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5bc:	e853 3f00 	ldrex	r3, [r3]
 800c5c0:	623b      	str	r3, [r7, #32]
   return(result);
 800c5c2:	6a3b      	ldr	r3, [r7, #32]
 800c5c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c5c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5d2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c5d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5da:	e841 2300 	strex	r3, r2, [r1]
 800c5de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c5e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d1e6      	bne.n	800c5b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	3308      	adds	r3, #8
 800c5ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	e853 3f00 	ldrex	r3, [r3]
 800c5f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	f023 0301 	bic.w	r3, r3, #1
 800c5fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	3308      	adds	r3, #8
 800c604:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c606:	61fa      	str	r2, [r7, #28]
 800c608:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c60a:	69b9      	ldr	r1, [r7, #24]
 800c60c:	69fa      	ldr	r2, [r7, #28]
 800c60e:	e841 2300 	strex	r3, r2, [r1]
 800c612:	617b      	str	r3, [r7, #20]
   return(result);
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d1e5      	bne.n	800c5e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2220      	movs	r2, #32
 800c61e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2200      	movs	r2, #0
 800c626:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c62a:	2303      	movs	r3, #3
 800c62c:	e012      	b.n	800c654 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2220      	movs	r2, #32
 800c632:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2220      	movs	r2, #32
 800c63a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2200      	movs	r2, #0
 800c642:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2200      	movs	r2, #0
 800c648:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2200      	movs	r2, #0
 800c64e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c652:	2300      	movs	r3, #0
}
 800c654:	4618      	mov	r0, r3
 800c656:	3758      	adds	r7, #88	@ 0x58
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b084      	sub	sp, #16
 800c660:	af00      	add	r7, sp, #0
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	603b      	str	r3, [r7, #0]
 800c668:	4613      	mov	r3, r2
 800c66a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c66c:	e04f      	b.n	800c70e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c66e:	69bb      	ldr	r3, [r7, #24]
 800c670:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c674:	d04b      	beq.n	800c70e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c676:	f7f9 f8a1 	bl	80057bc <HAL_GetTick>
 800c67a:	4602      	mov	r2, r0
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	1ad3      	subs	r3, r2, r3
 800c680:	69ba      	ldr	r2, [r7, #24]
 800c682:	429a      	cmp	r2, r3
 800c684:	d302      	bcc.n	800c68c <UART_WaitOnFlagUntilTimeout+0x30>
 800c686:	69bb      	ldr	r3, [r7, #24]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d101      	bne.n	800c690 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c68c:	2303      	movs	r3, #3
 800c68e:	e04e      	b.n	800c72e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f003 0304 	and.w	r3, r3, #4
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d037      	beq.n	800c70e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	2b80      	cmp	r3, #128	@ 0x80
 800c6a2:	d034      	beq.n	800c70e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	2b40      	cmp	r3, #64	@ 0x40
 800c6a8:	d031      	beq.n	800c70e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	69db      	ldr	r3, [r3, #28]
 800c6b0:	f003 0308 	and.w	r3, r3, #8
 800c6b4:	2b08      	cmp	r3, #8
 800c6b6:	d110      	bne.n	800c6da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	2208      	movs	r2, #8
 800c6be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c6c0:	68f8      	ldr	r0, [r7, #12]
 800c6c2:	f000 f920 	bl	800c906 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2208      	movs	r2, #8
 800c6ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	e029      	b.n	800c72e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	69db      	ldr	r3, [r3, #28]
 800c6e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c6e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c6e8:	d111      	bne.n	800c70e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c6f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c6f4:	68f8      	ldr	r0, [r7, #12]
 800c6f6:	f000 f906 	bl	800c906 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	2220      	movs	r2, #32
 800c6fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2200      	movs	r2, #0
 800c706:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c70a:	2303      	movs	r3, #3
 800c70c:	e00f      	b.n	800c72e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	69da      	ldr	r2, [r3, #28]
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	4013      	ands	r3, r2
 800c718:	68ba      	ldr	r2, [r7, #8]
 800c71a:	429a      	cmp	r2, r3
 800c71c:	bf0c      	ite	eq
 800c71e:	2301      	moveq	r3, #1
 800c720:	2300      	movne	r3, #0
 800c722:	b2db      	uxtb	r3, r3
 800c724:	461a      	mov	r2, r3
 800c726:	79fb      	ldrb	r3, [r7, #7]
 800c728:	429a      	cmp	r2, r3
 800c72a:	d0a0      	beq.n	800c66e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c72c:	2300      	movs	r3, #0
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3710      	adds	r7, #16
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
	...

0800c738 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b096      	sub	sp, #88	@ 0x58
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	60f8      	str	r0, [r7, #12]
 800c740:	60b9      	str	r1, [r7, #8]
 800c742:	4613      	mov	r3, r2
 800c744:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	68ba      	ldr	r2, [r7, #8]
 800c74a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	88fa      	ldrh	r2, [r7, #6]
 800c750:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2200      	movs	r2, #0
 800c758:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	2222      	movs	r2, #34	@ 0x22
 800c760:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d02d      	beq.n	800c7ca <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c774:	4a40      	ldr	r2, [pc, #256]	@ (800c878 <UART_Start_Receive_DMA+0x140>)
 800c776:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c77e:	4a3f      	ldr	r2, [pc, #252]	@ (800c87c <UART_Start_Receive_DMA+0x144>)
 800c780:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c788:	4a3d      	ldr	r2, [pc, #244]	@ (800c880 <UART_Start_Receive_DMA+0x148>)
 800c78a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c792:	2200      	movs	r2, #0
 800c794:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	3324      	adds	r3, #36	@ 0x24
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	88fb      	ldrh	r3, [r7, #6]
 800c7ac:	f7fa ffec 	bl	8007788 <HAL_DMA_Start_IT>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d009      	beq.n	800c7ca <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2210      	movs	r2, #16
 800c7ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	2220      	movs	r2, #32
 800c7c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	e051      	b.n	800c86e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	691b      	ldr	r3, [r3, #16]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d018      	beq.n	800c804 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7da:	e853 3f00 	ldrex	r3, [r3]
 800c7de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c7e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c7e6:	657b      	str	r3, [r7, #84]	@ 0x54
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c7f2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7f4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c7f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c7f8:	e841 2300 	strex	r3, r2, [r1]
 800c7fc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c7fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c800:	2b00      	cmp	r3, #0
 800c802:	d1e6      	bne.n	800c7d2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	3308      	adds	r3, #8
 800c80a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c80c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c80e:	e853 3f00 	ldrex	r3, [r3]
 800c812:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c816:	f043 0301 	orr.w	r3, r3, #1
 800c81a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	3308      	adds	r3, #8
 800c822:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c824:	637a      	str	r2, [r7, #52]	@ 0x34
 800c826:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c828:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c82a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c82c:	e841 2300 	strex	r3, r2, [r1]
 800c830:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c834:	2b00      	cmp	r3, #0
 800c836:	d1e5      	bne.n	800c804 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	3308      	adds	r3, #8
 800c83e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	e853 3f00 	ldrex	r3, [r3]
 800c846:	613b      	str	r3, [r7, #16]
   return(result);
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c84e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	3308      	adds	r3, #8
 800c856:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c858:	623a      	str	r2, [r7, #32]
 800c85a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c85c:	69f9      	ldr	r1, [r7, #28]
 800c85e:	6a3a      	ldr	r2, [r7, #32]
 800c860:	e841 2300 	strex	r3, r2, [r1]
 800c864:	61bb      	str	r3, [r7, #24]
   return(result);
 800c866:	69bb      	ldr	r3, [r7, #24]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d1e5      	bne.n	800c838 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800c86c:	2300      	movs	r3, #0
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3758      	adds	r7, #88	@ 0x58
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
 800c876:	bf00      	nop
 800c878:	0800c9d3 	.word	0x0800c9d3
 800c87c:	0800cb07 	.word	0x0800cb07
 800c880:	0800cb4d 	.word	0x0800cb4d

0800c884 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c884:	b480      	push	{r7}
 800c886:	b08f      	sub	sp, #60	@ 0x3c
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c892:	6a3b      	ldr	r3, [r7, #32]
 800c894:	e853 3f00 	ldrex	r3, [r3]
 800c898:	61fb      	str	r3, [r7, #28]
   return(result);
 800c89a:	69fb      	ldr	r3, [r7, #28]
 800c89c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c8a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c8ac:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c8b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c8b2:	e841 2300 	strex	r3, r2, [r1]
 800c8b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d1e6      	bne.n	800c88c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	3308      	adds	r3, #8
 800c8c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	e853 3f00 	ldrex	r3, [r3]
 800c8cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c8d4:	633b      	str	r3, [r7, #48]	@ 0x30
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	3308      	adds	r3, #8
 800c8dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8de:	61ba      	str	r2, [r7, #24]
 800c8e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8e2:	6979      	ldr	r1, [r7, #20]
 800c8e4:	69ba      	ldr	r2, [r7, #24]
 800c8e6:	e841 2300 	strex	r3, r2, [r1]
 800c8ea:	613b      	str	r3, [r7, #16]
   return(result);
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d1e5      	bne.n	800c8be <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2220      	movs	r2, #32
 800c8f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c8fa:	bf00      	nop
 800c8fc:	373c      	adds	r7, #60	@ 0x3c
 800c8fe:	46bd      	mov	sp, r7
 800c900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c904:	4770      	bx	lr

0800c906 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c906:	b480      	push	{r7}
 800c908:	b095      	sub	sp, #84	@ 0x54
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c916:	e853 3f00 	ldrex	r3, [r3]
 800c91a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c91c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c91e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c922:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	461a      	mov	r2, r3
 800c92a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c92c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c92e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c930:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c932:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c934:	e841 2300 	strex	r3, r2, [r1]
 800c938:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c93a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d1e6      	bne.n	800c90e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	3308      	adds	r3, #8
 800c946:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c948:	6a3b      	ldr	r3, [r7, #32]
 800c94a:	e853 3f00 	ldrex	r3, [r3]
 800c94e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c950:	69fb      	ldr	r3, [r7, #28]
 800c952:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c956:	f023 0301 	bic.w	r3, r3, #1
 800c95a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	3308      	adds	r3, #8
 800c962:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c964:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c966:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c968:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c96a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c96c:	e841 2300 	strex	r3, r2, [r1]
 800c970:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c974:	2b00      	cmp	r3, #0
 800c976:	d1e3      	bne.n	800c940 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d118      	bne.n	800c9b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	e853 3f00 	ldrex	r3, [r3]
 800c98c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	f023 0310 	bic.w	r3, r3, #16
 800c994:	647b      	str	r3, [r7, #68]	@ 0x44
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	461a      	mov	r2, r3
 800c99c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c99e:	61bb      	str	r3, [r7, #24]
 800c9a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9a2:	6979      	ldr	r1, [r7, #20]
 800c9a4:	69ba      	ldr	r2, [r7, #24]
 800c9a6:	e841 2300 	strex	r3, r2, [r1]
 800c9aa:	613b      	str	r3, [r7, #16]
   return(result);
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d1e6      	bne.n	800c980 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2220      	movs	r2, #32
 800c9b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c9c6:	bf00      	nop
 800c9c8:	3754      	adds	r7, #84	@ 0x54
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d0:	4770      	bx	lr

0800c9d2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c9d2:	b580      	push	{r7, lr}
 800c9d4:	b09c      	sub	sp, #112	@ 0x70
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9de:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	f003 0320 	and.w	r3, r3, #32
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d171      	bne.n	800cad2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800c9ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9fe:	e853 3f00 	ldrex	r3, [r3]
 800ca02:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ca04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca06:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ca0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ca0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	461a      	mov	r2, r3
 800ca12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ca14:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ca16:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca18:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ca1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ca1c:	e841 2300 	strex	r3, r2, [r1]
 800ca20:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ca22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d1e6      	bne.n	800c9f6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	3308      	adds	r3, #8
 800ca2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca32:	e853 3f00 	ldrex	r3, [r3]
 800ca36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ca38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca3a:	f023 0301 	bic.w	r3, r3, #1
 800ca3e:	667b      	str	r3, [r7, #100]	@ 0x64
 800ca40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	3308      	adds	r3, #8
 800ca46:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ca48:	647a      	str	r2, [r7, #68]	@ 0x44
 800ca4a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ca4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca50:	e841 2300 	strex	r3, r2, [r1]
 800ca54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ca56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d1e5      	bne.n	800ca28 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	3308      	adds	r3, #8
 800ca62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca66:	e853 3f00 	ldrex	r3, [r3]
 800ca6a:	623b      	str	r3, [r7, #32]
   return(result);
 800ca6c:	6a3b      	ldr	r3, [r7, #32]
 800ca6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca72:	663b      	str	r3, [r7, #96]	@ 0x60
 800ca74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	3308      	adds	r3, #8
 800ca7a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ca7c:	633a      	str	r2, [r7, #48]	@ 0x30
 800ca7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca84:	e841 2300 	strex	r3, r2, [r1]
 800ca88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ca8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d1e5      	bne.n	800ca5c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ca90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca92:	2220      	movs	r2, #32
 800ca94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca9c:	2b01      	cmp	r3, #1
 800ca9e:	d118      	bne.n	800cad2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800caa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	e853 3f00 	ldrex	r3, [r3]
 800caac:	60fb      	str	r3, [r7, #12]
   return(result);
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	f023 0310 	bic.w	r3, r3, #16
 800cab4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cab6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	461a      	mov	r2, r3
 800cabc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cabe:	61fb      	str	r3, [r7, #28]
 800cac0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cac2:	69b9      	ldr	r1, [r7, #24]
 800cac4:	69fa      	ldr	r2, [r7, #28]
 800cac6:	e841 2300 	strex	r3, r2, [r1]
 800caca:	617b      	str	r3, [r7, #20]
   return(result);
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d1e6      	bne.n	800caa0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cad2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cad4:	2200      	movs	r2, #0
 800cad6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cad8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cada:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cadc:	2b01      	cmp	r3, #1
 800cade:	d109      	bne.n	800caf4 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800cae0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cae2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800cae6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cae8:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800caec:	4611      	mov	r1, r2
 800caee:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800caf0:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800caf2:	e004      	b.n	800cafe <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800caf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800caf6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800cafa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cafc:	4798      	blx	r3
}
 800cafe:	bf00      	nop
 800cb00:	3770      	adds	r7, #112	@ 0x70
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}

0800cb06 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cb06:	b580      	push	{r7, lr}
 800cb08:	b084      	sub	sp, #16
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb12:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	2201      	movs	r2, #1
 800cb18:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb1e:	2b01      	cmp	r3, #1
 800cb20:	d10b      	bne.n	800cb3a <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800cb28:	68fa      	ldr	r2, [r7, #12]
 800cb2a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800cb2e:	0852      	lsrs	r2, r2, #1
 800cb30:	b292      	uxth	r2, r2
 800cb32:	4611      	mov	r1, r2
 800cb34:	68f8      	ldr	r0, [r7, #12]
 800cb36:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cb38:	e004      	b.n	800cb44 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800cb40:	68f8      	ldr	r0, [r7, #12]
 800cb42:	4798      	blx	r3
}
 800cb44:	bf00      	nop
 800cb46:	3710      	adds	r7, #16
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}

0800cb4c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b086      	sub	sp, #24
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb58:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb60:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cb68:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	689b      	ldr	r3, [r3, #8]
 800cb70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb74:	2b80      	cmp	r3, #128	@ 0x80
 800cb76:	d109      	bne.n	800cb8c <UART_DMAError+0x40>
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	2b21      	cmp	r3, #33	@ 0x21
 800cb7c:	d106      	bne.n	800cb8c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	2200      	movs	r2, #0
 800cb82:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800cb86:	6978      	ldr	r0, [r7, #20]
 800cb88:	f7ff fe7c 	bl	800c884 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	689b      	ldr	r3, [r3, #8]
 800cb92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb96:	2b40      	cmp	r3, #64	@ 0x40
 800cb98:	d109      	bne.n	800cbae <UART_DMAError+0x62>
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	2b22      	cmp	r3, #34	@ 0x22
 800cb9e:	d106      	bne.n	800cbae <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	2200      	movs	r2, #0
 800cba4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800cba8:	6978      	ldr	r0, [r7, #20]
 800cbaa:	f7ff feac 	bl	800c906 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cbb4:	f043 0210 	orr.w	r2, r3, #16
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800cbc4:	6978      	ldr	r0, [r7, #20]
 800cbc6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cbc8:	bf00      	nop
 800cbca:	3718      	adds	r7, #24
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}

0800cbd0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b084      	sub	sp, #16
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbdc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800cbf4:	68f8      	ldr	r0, [r7, #12]
 800cbf6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cbf8:	bf00      	nop
 800cbfa:	3710      	adds	r7, #16
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b088      	sub	sp, #32
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	e853 3f00 	ldrex	r3, [r3]
 800cc14:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc1c:	61fb      	str	r3, [r7, #28]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	461a      	mov	r2, r3
 800cc24:	69fb      	ldr	r3, [r7, #28]
 800cc26:	61bb      	str	r3, [r7, #24]
 800cc28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc2a:	6979      	ldr	r1, [r7, #20]
 800cc2c:	69ba      	ldr	r2, [r7, #24]
 800cc2e:	e841 2300 	strex	r3, r2, [r1]
 800cc32:	613b      	str	r3, [r7, #16]
   return(result);
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d1e6      	bne.n	800cc08 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2220      	movs	r2, #32
 800cc3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2200      	movs	r2, #0
 800cc46:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc52:	bf00      	nop
 800cc54:	3720      	adds	r7, #32
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}

0800cc5a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cc5a:	b480      	push	{r7}
 800cc5c:	b083      	sub	sp, #12
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cc62:	bf00      	nop
 800cc64:	370c      	adds	r7, #12
 800cc66:	46bd      	mov	sp, r7
 800cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6c:	4770      	bx	lr

0800cc6e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cc6e:	b480      	push	{r7}
 800cc70:	b083      	sub	sp, #12
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cc76:	bf00      	nop
 800cc78:	370c      	adds	r7, #12
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc80:	4770      	bx	lr

0800cc82 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cc82:	b480      	push	{r7}
 800cc84:	b083      	sub	sp, #12
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cc8a:	bf00      	nop
 800cc8c:	370c      	adds	r7, #12
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc94:	4770      	bx	lr

0800cc96 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cc96:	b480      	push	{r7}
 800cc98:	b085      	sub	sp, #20
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cca4:	2b01      	cmp	r3, #1
 800cca6:	d101      	bne.n	800ccac <HAL_UARTEx_DisableFifoMode+0x16>
 800cca8:	2302      	movs	r3, #2
 800ccaa:	e027      	b.n	800ccfc <HAL_UARTEx_DisableFifoMode+0x66>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2201      	movs	r2, #1
 800ccb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2224      	movs	r2, #36	@ 0x24
 800ccb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	681a      	ldr	r2, [r3, #0]
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f022 0201 	bic.w	r2, r2, #1
 800ccd2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ccda:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2200      	movs	r2, #0
 800cce0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	68fa      	ldr	r2, [r7, #12]
 800cce8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2220      	movs	r2, #32
 800ccee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ccfa:	2300      	movs	r3, #0
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3714      	adds	r7, #20
 800cd00:	46bd      	mov	sp, r7
 800cd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd06:	4770      	bx	lr

0800cd08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b084      	sub	sp, #16
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cd18:	2b01      	cmp	r3, #1
 800cd1a:	d101      	bne.n	800cd20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cd1c:	2302      	movs	r3, #2
 800cd1e:	e02d      	b.n	800cd7c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2201      	movs	r2, #1
 800cd24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2224      	movs	r2, #36	@ 0x24
 800cd2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	681a      	ldr	r2, [r3, #0]
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f022 0201 	bic.w	r2, r2, #1
 800cd46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	689b      	ldr	r3, [r3, #8]
 800cd4e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	683a      	ldr	r2, [r7, #0]
 800cd58:	430a      	orrs	r2, r1
 800cd5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f000 f84f 	bl	800ce00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	68fa      	ldr	r2, [r7, #12]
 800cd68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2220      	movs	r2, #32
 800cd6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2200      	movs	r2, #0
 800cd76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cd7a:	2300      	movs	r3, #0
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3710      	adds	r7, #16
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b084      	sub	sp, #16
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cd94:	2b01      	cmp	r3, #1
 800cd96:	d101      	bne.n	800cd9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cd98:	2302      	movs	r3, #2
 800cd9a:	e02d      	b.n	800cdf8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2201      	movs	r2, #1
 800cda0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2224      	movs	r2, #36	@ 0x24
 800cda8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	681a      	ldr	r2, [r3, #0]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f022 0201 	bic.w	r2, r2, #1
 800cdc2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	689b      	ldr	r3, [r3, #8]
 800cdca:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	683a      	ldr	r2, [r7, #0]
 800cdd4:	430a      	orrs	r2, r1
 800cdd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f000 f811 	bl	800ce00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	68fa      	ldr	r2, [r7, #12]
 800cde4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2220      	movs	r2, #32
 800cdea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cdf6:	2300      	movs	r3, #0
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3710      	adds	r7, #16
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}

0800ce00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ce00:	b480      	push	{r7}
 800ce02:	b085      	sub	sp, #20
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d108      	bne.n	800ce22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2201      	movs	r2, #1
 800ce14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ce20:	e031      	b.n	800ce86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ce22:	2308      	movs	r3, #8
 800ce24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ce26:	2308      	movs	r3, #8
 800ce28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	689b      	ldr	r3, [r3, #8]
 800ce30:	0e5b      	lsrs	r3, r3, #25
 800ce32:	b2db      	uxtb	r3, r3
 800ce34:	f003 0307 	and.w	r3, r3, #7
 800ce38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	689b      	ldr	r3, [r3, #8]
 800ce40:	0f5b      	lsrs	r3, r3, #29
 800ce42:	b2db      	uxtb	r3, r3
 800ce44:	f003 0307 	and.w	r3, r3, #7
 800ce48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ce4a:	7bbb      	ldrb	r3, [r7, #14]
 800ce4c:	7b3a      	ldrb	r2, [r7, #12]
 800ce4e:	4911      	ldr	r1, [pc, #68]	@ (800ce94 <UARTEx_SetNbDataToProcess+0x94>)
 800ce50:	5c8a      	ldrb	r2, [r1, r2]
 800ce52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ce56:	7b3a      	ldrb	r2, [r7, #12]
 800ce58:	490f      	ldr	r1, [pc, #60]	@ (800ce98 <UARTEx_SetNbDataToProcess+0x98>)
 800ce5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ce5c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce60:	b29a      	uxth	r2, r3
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ce68:	7bfb      	ldrb	r3, [r7, #15]
 800ce6a:	7b7a      	ldrb	r2, [r7, #13]
 800ce6c:	4909      	ldr	r1, [pc, #36]	@ (800ce94 <UARTEx_SetNbDataToProcess+0x94>)
 800ce6e:	5c8a      	ldrb	r2, [r1, r2]
 800ce70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ce74:	7b7a      	ldrb	r2, [r7, #13]
 800ce76:	4908      	ldr	r1, [pc, #32]	@ (800ce98 <UARTEx_SetNbDataToProcess+0x98>)
 800ce78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ce7a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce7e:	b29a      	uxth	r2, r3
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ce86:	bf00      	nop
 800ce88:	3714      	adds	r7, #20
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce90:	4770      	bx	lr
 800ce92:	bf00      	nop
 800ce94:	0800df74 	.word	0x0800df74
 800ce98:	0800df7c 	.word	0x0800df7c

0800ce9c <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b085      	sub	sp, #20
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	60f8      	str	r0, [r7, #12]
 800cea4:	607b      	str	r3, [r7, #4]
 800cea6:	460b      	mov	r3, r1
 800cea8:	817b      	strh	r3, [r7, #10]
 800ceaa:	4613      	mov	r3, r2
 800ceac:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	897a      	ldrh	r2, [r7, #10]
 800ceb2:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	893a      	ldrh	r2, [r7, #8]
 800ceb8:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	687a      	ldr	r2, [r7, #4]
 800cebe:	605a      	str	r2, [r3, #4]
}
 800cec0:	bf00      	nop
 800cec2:	3714      	adds	r7, #20
 800cec4:	46bd      	mov	sp, r7
 800cec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceca:	4770      	bx	lr

0800cecc <memset>:
 800cecc:	4402      	add	r2, r0
 800cece:	4603      	mov	r3, r0
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d100      	bne.n	800ced6 <memset+0xa>
 800ced4:	4770      	bx	lr
 800ced6:	f803 1b01 	strb.w	r1, [r3], #1
 800ceda:	e7f9      	b.n	800ced0 <memset+0x4>

0800cedc <__errno>:
 800cedc:	4b01      	ldr	r3, [pc, #4]	@ (800cee4 <__errno+0x8>)
 800cede:	6818      	ldr	r0, [r3, #0]
 800cee0:	4770      	bx	lr
 800cee2:	bf00      	nop
 800cee4:	20000094 	.word	0x20000094

0800cee8 <__libc_init_array>:
 800cee8:	b570      	push	{r4, r5, r6, lr}
 800ceea:	4d0d      	ldr	r5, [pc, #52]	@ (800cf20 <__libc_init_array+0x38>)
 800ceec:	4c0d      	ldr	r4, [pc, #52]	@ (800cf24 <__libc_init_array+0x3c>)
 800ceee:	1b64      	subs	r4, r4, r5
 800cef0:	10a4      	asrs	r4, r4, #2
 800cef2:	2600      	movs	r6, #0
 800cef4:	42a6      	cmp	r6, r4
 800cef6:	d109      	bne.n	800cf0c <__libc_init_array+0x24>
 800cef8:	4d0b      	ldr	r5, [pc, #44]	@ (800cf28 <__libc_init_array+0x40>)
 800cefa:	4c0c      	ldr	r4, [pc, #48]	@ (800cf2c <__libc_init_array+0x44>)
 800cefc:	f000 ffa4 	bl	800de48 <_init>
 800cf00:	1b64      	subs	r4, r4, r5
 800cf02:	10a4      	asrs	r4, r4, #2
 800cf04:	2600      	movs	r6, #0
 800cf06:	42a6      	cmp	r6, r4
 800cf08:	d105      	bne.n	800cf16 <__libc_init_array+0x2e>
 800cf0a:	bd70      	pop	{r4, r5, r6, pc}
 800cf0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf10:	4798      	blx	r3
 800cf12:	3601      	adds	r6, #1
 800cf14:	e7ee      	b.n	800cef4 <__libc_init_array+0xc>
 800cf16:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf1a:	4798      	blx	r3
 800cf1c:	3601      	adds	r6, #1
 800cf1e:	e7f2      	b.n	800cf06 <__libc_init_array+0x1e>
 800cf20:	0800dfc0 	.word	0x0800dfc0
 800cf24:	0800dfc0 	.word	0x0800dfc0
 800cf28:	0800dfc0 	.word	0x0800dfc0
 800cf2c:	0800dfc4 	.word	0x0800dfc4

0800cf30 <pow>:
 800cf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf32:	ed2d 8b02 	vpush	{d8}
 800cf36:	eeb0 8a40 	vmov.f32	s16, s0
 800cf3a:	eef0 8a60 	vmov.f32	s17, s1
 800cf3e:	ec55 4b11 	vmov	r4, r5, d1
 800cf42:	f000 f979 	bl	800d238 <__ieee754_pow>
 800cf46:	4622      	mov	r2, r4
 800cf48:	462b      	mov	r3, r5
 800cf4a:	4620      	mov	r0, r4
 800cf4c:	4629      	mov	r1, r5
 800cf4e:	ec57 6b10 	vmov	r6, r7, d0
 800cf52:	f7f3 fdb7 	bl	8000ac4 <__aeabi_dcmpun>
 800cf56:	2800      	cmp	r0, #0
 800cf58:	d13b      	bne.n	800cfd2 <pow+0xa2>
 800cf5a:	ec51 0b18 	vmov	r0, r1, d8
 800cf5e:	2200      	movs	r2, #0
 800cf60:	2300      	movs	r3, #0
 800cf62:	f7f3 fd7d 	bl	8000a60 <__aeabi_dcmpeq>
 800cf66:	b1b8      	cbz	r0, 800cf98 <pow+0x68>
 800cf68:	2200      	movs	r2, #0
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	4629      	mov	r1, r5
 800cf70:	f7f3 fd76 	bl	8000a60 <__aeabi_dcmpeq>
 800cf74:	2800      	cmp	r0, #0
 800cf76:	d146      	bne.n	800d006 <pow+0xd6>
 800cf78:	ec45 4b10 	vmov	d0, r4, r5
 800cf7c:	f000 f874 	bl	800d068 <finite>
 800cf80:	b338      	cbz	r0, 800cfd2 <pow+0xa2>
 800cf82:	2200      	movs	r2, #0
 800cf84:	2300      	movs	r3, #0
 800cf86:	4620      	mov	r0, r4
 800cf88:	4629      	mov	r1, r5
 800cf8a:	f7f3 fd73 	bl	8000a74 <__aeabi_dcmplt>
 800cf8e:	b300      	cbz	r0, 800cfd2 <pow+0xa2>
 800cf90:	f7ff ffa4 	bl	800cedc <__errno>
 800cf94:	2322      	movs	r3, #34	@ 0x22
 800cf96:	e01b      	b.n	800cfd0 <pow+0xa0>
 800cf98:	ec47 6b10 	vmov	d0, r6, r7
 800cf9c:	f000 f864 	bl	800d068 <finite>
 800cfa0:	b9e0      	cbnz	r0, 800cfdc <pow+0xac>
 800cfa2:	eeb0 0a48 	vmov.f32	s0, s16
 800cfa6:	eef0 0a68 	vmov.f32	s1, s17
 800cfaa:	f000 f85d 	bl	800d068 <finite>
 800cfae:	b1a8      	cbz	r0, 800cfdc <pow+0xac>
 800cfb0:	ec45 4b10 	vmov	d0, r4, r5
 800cfb4:	f000 f858 	bl	800d068 <finite>
 800cfb8:	b180      	cbz	r0, 800cfdc <pow+0xac>
 800cfba:	4632      	mov	r2, r6
 800cfbc:	463b      	mov	r3, r7
 800cfbe:	4630      	mov	r0, r6
 800cfc0:	4639      	mov	r1, r7
 800cfc2:	f7f3 fd7f 	bl	8000ac4 <__aeabi_dcmpun>
 800cfc6:	2800      	cmp	r0, #0
 800cfc8:	d0e2      	beq.n	800cf90 <pow+0x60>
 800cfca:	f7ff ff87 	bl	800cedc <__errno>
 800cfce:	2321      	movs	r3, #33	@ 0x21
 800cfd0:	6003      	str	r3, [r0, #0]
 800cfd2:	ecbd 8b02 	vpop	{d8}
 800cfd6:	ec47 6b10 	vmov	d0, r6, r7
 800cfda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfdc:	2200      	movs	r2, #0
 800cfde:	2300      	movs	r3, #0
 800cfe0:	4630      	mov	r0, r6
 800cfe2:	4639      	mov	r1, r7
 800cfe4:	f7f3 fd3c 	bl	8000a60 <__aeabi_dcmpeq>
 800cfe8:	2800      	cmp	r0, #0
 800cfea:	d0f2      	beq.n	800cfd2 <pow+0xa2>
 800cfec:	eeb0 0a48 	vmov.f32	s0, s16
 800cff0:	eef0 0a68 	vmov.f32	s1, s17
 800cff4:	f000 f838 	bl	800d068 <finite>
 800cff8:	2800      	cmp	r0, #0
 800cffa:	d0ea      	beq.n	800cfd2 <pow+0xa2>
 800cffc:	ec45 4b10 	vmov	d0, r4, r5
 800d000:	f000 f832 	bl	800d068 <finite>
 800d004:	e7c3      	b.n	800cf8e <pow+0x5e>
 800d006:	4f01      	ldr	r7, [pc, #4]	@ (800d00c <pow+0xdc>)
 800d008:	2600      	movs	r6, #0
 800d00a:	e7e2      	b.n	800cfd2 <pow+0xa2>
 800d00c:	3ff00000 	.word	0x3ff00000

0800d010 <sqrt>:
 800d010:	b538      	push	{r3, r4, r5, lr}
 800d012:	ed2d 8b02 	vpush	{d8}
 800d016:	ec55 4b10 	vmov	r4, r5, d0
 800d01a:	f000 f831 	bl	800d080 <__ieee754_sqrt>
 800d01e:	4622      	mov	r2, r4
 800d020:	462b      	mov	r3, r5
 800d022:	4620      	mov	r0, r4
 800d024:	4629      	mov	r1, r5
 800d026:	eeb0 8a40 	vmov.f32	s16, s0
 800d02a:	eef0 8a60 	vmov.f32	s17, s1
 800d02e:	f7f3 fd49 	bl	8000ac4 <__aeabi_dcmpun>
 800d032:	b990      	cbnz	r0, 800d05a <sqrt+0x4a>
 800d034:	2200      	movs	r2, #0
 800d036:	2300      	movs	r3, #0
 800d038:	4620      	mov	r0, r4
 800d03a:	4629      	mov	r1, r5
 800d03c:	f7f3 fd1a 	bl	8000a74 <__aeabi_dcmplt>
 800d040:	b158      	cbz	r0, 800d05a <sqrt+0x4a>
 800d042:	f7ff ff4b 	bl	800cedc <__errno>
 800d046:	2321      	movs	r3, #33	@ 0x21
 800d048:	6003      	str	r3, [r0, #0]
 800d04a:	2200      	movs	r2, #0
 800d04c:	2300      	movs	r3, #0
 800d04e:	4610      	mov	r0, r2
 800d050:	4619      	mov	r1, r3
 800d052:	f7f3 fbc7 	bl	80007e4 <__aeabi_ddiv>
 800d056:	ec41 0b18 	vmov	d8, r0, r1
 800d05a:	eeb0 0a48 	vmov.f32	s0, s16
 800d05e:	eef0 0a68 	vmov.f32	s1, s17
 800d062:	ecbd 8b02 	vpop	{d8}
 800d066:	bd38      	pop	{r3, r4, r5, pc}

0800d068 <finite>:
 800d068:	b082      	sub	sp, #8
 800d06a:	ed8d 0b00 	vstr	d0, [sp]
 800d06e:	9801      	ldr	r0, [sp, #4]
 800d070:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800d074:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800d078:	0fc0      	lsrs	r0, r0, #31
 800d07a:	b002      	add	sp, #8
 800d07c:	4770      	bx	lr
	...

0800d080 <__ieee754_sqrt>:
 800d080:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d084:	4a68      	ldr	r2, [pc, #416]	@ (800d228 <__ieee754_sqrt+0x1a8>)
 800d086:	ec55 4b10 	vmov	r4, r5, d0
 800d08a:	43aa      	bics	r2, r5
 800d08c:	462b      	mov	r3, r5
 800d08e:	4621      	mov	r1, r4
 800d090:	d110      	bne.n	800d0b4 <__ieee754_sqrt+0x34>
 800d092:	4622      	mov	r2, r4
 800d094:	4620      	mov	r0, r4
 800d096:	4629      	mov	r1, r5
 800d098:	f7f3 fa7a 	bl	8000590 <__aeabi_dmul>
 800d09c:	4602      	mov	r2, r0
 800d09e:	460b      	mov	r3, r1
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	4629      	mov	r1, r5
 800d0a4:	f7f3 f8be 	bl	8000224 <__adddf3>
 800d0a8:	4604      	mov	r4, r0
 800d0aa:	460d      	mov	r5, r1
 800d0ac:	ec45 4b10 	vmov	d0, r4, r5
 800d0b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0b4:	2d00      	cmp	r5, #0
 800d0b6:	dc0e      	bgt.n	800d0d6 <__ieee754_sqrt+0x56>
 800d0b8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d0bc:	4322      	orrs	r2, r4
 800d0be:	d0f5      	beq.n	800d0ac <__ieee754_sqrt+0x2c>
 800d0c0:	b19d      	cbz	r5, 800d0ea <__ieee754_sqrt+0x6a>
 800d0c2:	4622      	mov	r2, r4
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	4629      	mov	r1, r5
 800d0c8:	f7f3 f8aa 	bl	8000220 <__aeabi_dsub>
 800d0cc:	4602      	mov	r2, r0
 800d0ce:	460b      	mov	r3, r1
 800d0d0:	f7f3 fb88 	bl	80007e4 <__aeabi_ddiv>
 800d0d4:	e7e8      	b.n	800d0a8 <__ieee754_sqrt+0x28>
 800d0d6:	152a      	asrs	r2, r5, #20
 800d0d8:	d115      	bne.n	800d106 <__ieee754_sqrt+0x86>
 800d0da:	2000      	movs	r0, #0
 800d0dc:	e009      	b.n	800d0f2 <__ieee754_sqrt+0x72>
 800d0de:	0acb      	lsrs	r3, r1, #11
 800d0e0:	3a15      	subs	r2, #21
 800d0e2:	0549      	lsls	r1, r1, #21
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d0fa      	beq.n	800d0de <__ieee754_sqrt+0x5e>
 800d0e8:	e7f7      	b.n	800d0da <__ieee754_sqrt+0x5a>
 800d0ea:	462a      	mov	r2, r5
 800d0ec:	e7fa      	b.n	800d0e4 <__ieee754_sqrt+0x64>
 800d0ee:	005b      	lsls	r3, r3, #1
 800d0f0:	3001      	adds	r0, #1
 800d0f2:	02dc      	lsls	r4, r3, #11
 800d0f4:	d5fb      	bpl.n	800d0ee <__ieee754_sqrt+0x6e>
 800d0f6:	1e44      	subs	r4, r0, #1
 800d0f8:	1b12      	subs	r2, r2, r4
 800d0fa:	f1c0 0420 	rsb	r4, r0, #32
 800d0fe:	fa21 f404 	lsr.w	r4, r1, r4
 800d102:	4323      	orrs	r3, r4
 800d104:	4081      	lsls	r1, r0
 800d106:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d10a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800d10e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d112:	07d2      	lsls	r2, r2, #31
 800d114:	bf5c      	itt	pl
 800d116:	005b      	lslpl	r3, r3, #1
 800d118:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800d11c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d120:	bf58      	it	pl
 800d122:	0049      	lslpl	r1, r1, #1
 800d124:	2600      	movs	r6, #0
 800d126:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800d12a:	106d      	asrs	r5, r5, #1
 800d12c:	0049      	lsls	r1, r1, #1
 800d12e:	2016      	movs	r0, #22
 800d130:	4632      	mov	r2, r6
 800d132:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800d136:	1917      	adds	r7, r2, r4
 800d138:	429f      	cmp	r7, r3
 800d13a:	bfde      	ittt	le
 800d13c:	193a      	addle	r2, r7, r4
 800d13e:	1bdb      	suble	r3, r3, r7
 800d140:	1936      	addle	r6, r6, r4
 800d142:	0fcf      	lsrs	r7, r1, #31
 800d144:	3801      	subs	r0, #1
 800d146:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800d14a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d14e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d152:	d1f0      	bne.n	800d136 <__ieee754_sqrt+0xb6>
 800d154:	4604      	mov	r4, r0
 800d156:	2720      	movs	r7, #32
 800d158:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800d15c:	429a      	cmp	r2, r3
 800d15e:	eb00 0e0c 	add.w	lr, r0, ip
 800d162:	db02      	blt.n	800d16a <__ieee754_sqrt+0xea>
 800d164:	d113      	bne.n	800d18e <__ieee754_sqrt+0x10e>
 800d166:	458e      	cmp	lr, r1
 800d168:	d811      	bhi.n	800d18e <__ieee754_sqrt+0x10e>
 800d16a:	f1be 0f00 	cmp.w	lr, #0
 800d16e:	eb0e 000c 	add.w	r0, lr, ip
 800d172:	da42      	bge.n	800d1fa <__ieee754_sqrt+0x17a>
 800d174:	2800      	cmp	r0, #0
 800d176:	db40      	blt.n	800d1fa <__ieee754_sqrt+0x17a>
 800d178:	f102 0801 	add.w	r8, r2, #1
 800d17c:	1a9b      	subs	r3, r3, r2
 800d17e:	458e      	cmp	lr, r1
 800d180:	bf88      	it	hi
 800d182:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d186:	eba1 010e 	sub.w	r1, r1, lr
 800d18a:	4464      	add	r4, ip
 800d18c:	4642      	mov	r2, r8
 800d18e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800d192:	3f01      	subs	r7, #1
 800d194:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800d198:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d19c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d1a0:	d1dc      	bne.n	800d15c <__ieee754_sqrt+0xdc>
 800d1a2:	4319      	orrs	r1, r3
 800d1a4:	d01b      	beq.n	800d1de <__ieee754_sqrt+0x15e>
 800d1a6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800d22c <__ieee754_sqrt+0x1ac>
 800d1aa:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800d230 <__ieee754_sqrt+0x1b0>
 800d1ae:	e9da 0100 	ldrd	r0, r1, [sl]
 800d1b2:	e9db 2300 	ldrd	r2, r3, [fp]
 800d1b6:	f7f3 f833 	bl	8000220 <__aeabi_dsub>
 800d1ba:	e9da 8900 	ldrd	r8, r9, [sl]
 800d1be:	4602      	mov	r2, r0
 800d1c0:	460b      	mov	r3, r1
 800d1c2:	4640      	mov	r0, r8
 800d1c4:	4649      	mov	r1, r9
 800d1c6:	f7f3 fc5f 	bl	8000a88 <__aeabi_dcmple>
 800d1ca:	b140      	cbz	r0, 800d1de <__ieee754_sqrt+0x15e>
 800d1cc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d1d0:	e9da 0100 	ldrd	r0, r1, [sl]
 800d1d4:	e9db 2300 	ldrd	r2, r3, [fp]
 800d1d8:	d111      	bne.n	800d1fe <__ieee754_sqrt+0x17e>
 800d1da:	3601      	adds	r6, #1
 800d1dc:	463c      	mov	r4, r7
 800d1de:	1072      	asrs	r2, r6, #1
 800d1e0:	0863      	lsrs	r3, r4, #1
 800d1e2:	07f1      	lsls	r1, r6, #31
 800d1e4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800d1e8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800d1ec:	bf48      	it	mi
 800d1ee:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800d1f2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	e756      	b.n	800d0a8 <__ieee754_sqrt+0x28>
 800d1fa:	4690      	mov	r8, r2
 800d1fc:	e7be      	b.n	800d17c <__ieee754_sqrt+0xfc>
 800d1fe:	f7f3 f811 	bl	8000224 <__adddf3>
 800d202:	e9da 8900 	ldrd	r8, r9, [sl]
 800d206:	4602      	mov	r2, r0
 800d208:	460b      	mov	r3, r1
 800d20a:	4640      	mov	r0, r8
 800d20c:	4649      	mov	r1, r9
 800d20e:	f7f3 fc31 	bl	8000a74 <__aeabi_dcmplt>
 800d212:	b120      	cbz	r0, 800d21e <__ieee754_sqrt+0x19e>
 800d214:	1ca0      	adds	r0, r4, #2
 800d216:	bf08      	it	eq
 800d218:	3601      	addeq	r6, #1
 800d21a:	3402      	adds	r4, #2
 800d21c:	e7df      	b.n	800d1de <__ieee754_sqrt+0x15e>
 800d21e:	1c63      	adds	r3, r4, #1
 800d220:	f023 0401 	bic.w	r4, r3, #1
 800d224:	e7db      	b.n	800d1de <__ieee754_sqrt+0x15e>
 800d226:	bf00      	nop
 800d228:	7ff00000 	.word	0x7ff00000
 800d22c:	200000f0 	.word	0x200000f0
 800d230:	200000e8 	.word	0x200000e8
 800d234:	00000000 	.word	0x00000000

0800d238 <__ieee754_pow>:
 800d238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d23c:	b091      	sub	sp, #68	@ 0x44
 800d23e:	ed8d 1b00 	vstr	d1, [sp]
 800d242:	e9dd 1900 	ldrd	r1, r9, [sp]
 800d246:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800d24a:	ea5a 0001 	orrs.w	r0, sl, r1
 800d24e:	ec57 6b10 	vmov	r6, r7, d0
 800d252:	d113      	bne.n	800d27c <__ieee754_pow+0x44>
 800d254:	19b3      	adds	r3, r6, r6
 800d256:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800d25a:	4152      	adcs	r2, r2
 800d25c:	4298      	cmp	r0, r3
 800d25e:	4b98      	ldr	r3, [pc, #608]	@ (800d4c0 <__ieee754_pow+0x288>)
 800d260:	4193      	sbcs	r3, r2
 800d262:	f080 84ea 	bcs.w	800dc3a <__ieee754_pow+0xa02>
 800d266:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d26a:	4630      	mov	r0, r6
 800d26c:	4639      	mov	r1, r7
 800d26e:	f7f2 ffd9 	bl	8000224 <__adddf3>
 800d272:	ec41 0b10 	vmov	d0, r0, r1
 800d276:	b011      	add	sp, #68	@ 0x44
 800d278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d27c:	4a91      	ldr	r2, [pc, #580]	@ (800d4c4 <__ieee754_pow+0x28c>)
 800d27e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d282:	4590      	cmp	r8, r2
 800d284:	463d      	mov	r5, r7
 800d286:	4633      	mov	r3, r6
 800d288:	d806      	bhi.n	800d298 <__ieee754_pow+0x60>
 800d28a:	d101      	bne.n	800d290 <__ieee754_pow+0x58>
 800d28c:	2e00      	cmp	r6, #0
 800d28e:	d1ea      	bne.n	800d266 <__ieee754_pow+0x2e>
 800d290:	4592      	cmp	sl, r2
 800d292:	d801      	bhi.n	800d298 <__ieee754_pow+0x60>
 800d294:	d10e      	bne.n	800d2b4 <__ieee754_pow+0x7c>
 800d296:	b169      	cbz	r1, 800d2b4 <__ieee754_pow+0x7c>
 800d298:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800d29c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800d2a0:	431d      	orrs	r5, r3
 800d2a2:	d1e0      	bne.n	800d266 <__ieee754_pow+0x2e>
 800d2a4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d2a8:	18db      	adds	r3, r3, r3
 800d2aa:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800d2ae:	4152      	adcs	r2, r2
 800d2b0:	429d      	cmp	r5, r3
 800d2b2:	e7d4      	b.n	800d25e <__ieee754_pow+0x26>
 800d2b4:	2d00      	cmp	r5, #0
 800d2b6:	46c3      	mov	fp, r8
 800d2b8:	da3a      	bge.n	800d330 <__ieee754_pow+0xf8>
 800d2ba:	4a83      	ldr	r2, [pc, #524]	@ (800d4c8 <__ieee754_pow+0x290>)
 800d2bc:	4592      	cmp	sl, r2
 800d2be:	d84d      	bhi.n	800d35c <__ieee754_pow+0x124>
 800d2c0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800d2c4:	4592      	cmp	sl, r2
 800d2c6:	f240 84c7 	bls.w	800dc58 <__ieee754_pow+0xa20>
 800d2ca:	ea4f 522a 	mov.w	r2, sl, asr #20
 800d2ce:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800d2d2:	2a14      	cmp	r2, #20
 800d2d4:	dd0f      	ble.n	800d2f6 <__ieee754_pow+0xbe>
 800d2d6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800d2da:	fa21 f402 	lsr.w	r4, r1, r2
 800d2de:	fa04 f202 	lsl.w	r2, r4, r2
 800d2e2:	428a      	cmp	r2, r1
 800d2e4:	f040 84b8 	bne.w	800dc58 <__ieee754_pow+0xa20>
 800d2e8:	f004 0401 	and.w	r4, r4, #1
 800d2ec:	f1c4 0402 	rsb	r4, r4, #2
 800d2f0:	2900      	cmp	r1, #0
 800d2f2:	d158      	bne.n	800d3a6 <__ieee754_pow+0x16e>
 800d2f4:	e00e      	b.n	800d314 <__ieee754_pow+0xdc>
 800d2f6:	2900      	cmp	r1, #0
 800d2f8:	d154      	bne.n	800d3a4 <__ieee754_pow+0x16c>
 800d2fa:	f1c2 0214 	rsb	r2, r2, #20
 800d2fe:	fa4a f402 	asr.w	r4, sl, r2
 800d302:	fa04 f202 	lsl.w	r2, r4, r2
 800d306:	4552      	cmp	r2, sl
 800d308:	f040 84a3 	bne.w	800dc52 <__ieee754_pow+0xa1a>
 800d30c:	f004 0401 	and.w	r4, r4, #1
 800d310:	f1c4 0402 	rsb	r4, r4, #2
 800d314:	4a6d      	ldr	r2, [pc, #436]	@ (800d4cc <__ieee754_pow+0x294>)
 800d316:	4592      	cmp	sl, r2
 800d318:	d12e      	bne.n	800d378 <__ieee754_pow+0x140>
 800d31a:	f1b9 0f00 	cmp.w	r9, #0
 800d31e:	f280 8494 	bge.w	800dc4a <__ieee754_pow+0xa12>
 800d322:	496a      	ldr	r1, [pc, #424]	@ (800d4cc <__ieee754_pow+0x294>)
 800d324:	4632      	mov	r2, r6
 800d326:	463b      	mov	r3, r7
 800d328:	2000      	movs	r0, #0
 800d32a:	f7f3 fa5b 	bl	80007e4 <__aeabi_ddiv>
 800d32e:	e7a0      	b.n	800d272 <__ieee754_pow+0x3a>
 800d330:	2400      	movs	r4, #0
 800d332:	bbc1      	cbnz	r1, 800d3a6 <__ieee754_pow+0x16e>
 800d334:	4a63      	ldr	r2, [pc, #396]	@ (800d4c4 <__ieee754_pow+0x28c>)
 800d336:	4592      	cmp	sl, r2
 800d338:	d1ec      	bne.n	800d314 <__ieee754_pow+0xdc>
 800d33a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800d33e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800d342:	431a      	orrs	r2, r3
 800d344:	f000 8479 	beq.w	800dc3a <__ieee754_pow+0xa02>
 800d348:	4b61      	ldr	r3, [pc, #388]	@ (800d4d0 <__ieee754_pow+0x298>)
 800d34a:	4598      	cmp	r8, r3
 800d34c:	d908      	bls.n	800d360 <__ieee754_pow+0x128>
 800d34e:	f1b9 0f00 	cmp.w	r9, #0
 800d352:	f2c0 8476 	blt.w	800dc42 <__ieee754_pow+0xa0a>
 800d356:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d35a:	e78a      	b.n	800d272 <__ieee754_pow+0x3a>
 800d35c:	2402      	movs	r4, #2
 800d35e:	e7e8      	b.n	800d332 <__ieee754_pow+0xfa>
 800d360:	f1b9 0f00 	cmp.w	r9, #0
 800d364:	f04f 0000 	mov.w	r0, #0
 800d368:	f04f 0100 	mov.w	r1, #0
 800d36c:	da81      	bge.n	800d272 <__ieee754_pow+0x3a>
 800d36e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d372:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d376:	e77c      	b.n	800d272 <__ieee754_pow+0x3a>
 800d378:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800d37c:	d106      	bne.n	800d38c <__ieee754_pow+0x154>
 800d37e:	4632      	mov	r2, r6
 800d380:	463b      	mov	r3, r7
 800d382:	4630      	mov	r0, r6
 800d384:	4639      	mov	r1, r7
 800d386:	f7f3 f903 	bl	8000590 <__aeabi_dmul>
 800d38a:	e772      	b.n	800d272 <__ieee754_pow+0x3a>
 800d38c:	4a51      	ldr	r2, [pc, #324]	@ (800d4d4 <__ieee754_pow+0x29c>)
 800d38e:	4591      	cmp	r9, r2
 800d390:	d109      	bne.n	800d3a6 <__ieee754_pow+0x16e>
 800d392:	2d00      	cmp	r5, #0
 800d394:	db07      	blt.n	800d3a6 <__ieee754_pow+0x16e>
 800d396:	ec47 6b10 	vmov	d0, r6, r7
 800d39a:	b011      	add	sp, #68	@ 0x44
 800d39c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a0:	f7ff be6e 	b.w	800d080 <__ieee754_sqrt>
 800d3a4:	2400      	movs	r4, #0
 800d3a6:	ec47 6b10 	vmov	d0, r6, r7
 800d3aa:	9302      	str	r3, [sp, #8]
 800d3ac:	f000 fc88 	bl	800dcc0 <fabs>
 800d3b0:	9b02      	ldr	r3, [sp, #8]
 800d3b2:	ec51 0b10 	vmov	r0, r1, d0
 800d3b6:	bb53      	cbnz	r3, 800d40e <__ieee754_pow+0x1d6>
 800d3b8:	4b44      	ldr	r3, [pc, #272]	@ (800d4cc <__ieee754_pow+0x294>)
 800d3ba:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800d3be:	429a      	cmp	r2, r3
 800d3c0:	d002      	beq.n	800d3c8 <__ieee754_pow+0x190>
 800d3c2:	f1b8 0f00 	cmp.w	r8, #0
 800d3c6:	d122      	bne.n	800d40e <__ieee754_pow+0x1d6>
 800d3c8:	f1b9 0f00 	cmp.w	r9, #0
 800d3cc:	da05      	bge.n	800d3da <__ieee754_pow+0x1a2>
 800d3ce:	4602      	mov	r2, r0
 800d3d0:	460b      	mov	r3, r1
 800d3d2:	2000      	movs	r0, #0
 800d3d4:	493d      	ldr	r1, [pc, #244]	@ (800d4cc <__ieee754_pow+0x294>)
 800d3d6:	f7f3 fa05 	bl	80007e4 <__aeabi_ddiv>
 800d3da:	2d00      	cmp	r5, #0
 800d3dc:	f6bf af49 	bge.w	800d272 <__ieee754_pow+0x3a>
 800d3e0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800d3e4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800d3e8:	ea58 0804 	orrs.w	r8, r8, r4
 800d3ec:	d108      	bne.n	800d400 <__ieee754_pow+0x1c8>
 800d3ee:	4602      	mov	r2, r0
 800d3f0:	460b      	mov	r3, r1
 800d3f2:	4610      	mov	r0, r2
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	f7f2 ff13 	bl	8000220 <__aeabi_dsub>
 800d3fa:	4602      	mov	r2, r0
 800d3fc:	460b      	mov	r3, r1
 800d3fe:	e794      	b.n	800d32a <__ieee754_pow+0xf2>
 800d400:	2c01      	cmp	r4, #1
 800d402:	f47f af36 	bne.w	800d272 <__ieee754_pow+0x3a>
 800d406:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d40a:	4619      	mov	r1, r3
 800d40c:	e731      	b.n	800d272 <__ieee754_pow+0x3a>
 800d40e:	0feb      	lsrs	r3, r5, #31
 800d410:	3b01      	subs	r3, #1
 800d412:	ea53 0204 	orrs.w	r2, r3, r4
 800d416:	d102      	bne.n	800d41e <__ieee754_pow+0x1e6>
 800d418:	4632      	mov	r2, r6
 800d41a:	463b      	mov	r3, r7
 800d41c:	e7e9      	b.n	800d3f2 <__ieee754_pow+0x1ba>
 800d41e:	3c01      	subs	r4, #1
 800d420:	431c      	orrs	r4, r3
 800d422:	d016      	beq.n	800d452 <__ieee754_pow+0x21a>
 800d424:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800d4b0 <__ieee754_pow+0x278>
 800d428:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800d42c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d430:	f240 8112 	bls.w	800d658 <__ieee754_pow+0x420>
 800d434:	4b28      	ldr	r3, [pc, #160]	@ (800d4d8 <__ieee754_pow+0x2a0>)
 800d436:	459a      	cmp	sl, r3
 800d438:	4b25      	ldr	r3, [pc, #148]	@ (800d4d0 <__ieee754_pow+0x298>)
 800d43a:	d916      	bls.n	800d46a <__ieee754_pow+0x232>
 800d43c:	4598      	cmp	r8, r3
 800d43e:	d80b      	bhi.n	800d458 <__ieee754_pow+0x220>
 800d440:	f1b9 0f00 	cmp.w	r9, #0
 800d444:	da0b      	bge.n	800d45e <__ieee754_pow+0x226>
 800d446:	2000      	movs	r0, #0
 800d448:	b011      	add	sp, #68	@ 0x44
 800d44a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d44e:	f000 bcf3 	b.w	800de38 <__math_oflow>
 800d452:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800d4b8 <__ieee754_pow+0x280>
 800d456:	e7e7      	b.n	800d428 <__ieee754_pow+0x1f0>
 800d458:	f1b9 0f00 	cmp.w	r9, #0
 800d45c:	dcf3      	bgt.n	800d446 <__ieee754_pow+0x20e>
 800d45e:	2000      	movs	r0, #0
 800d460:	b011      	add	sp, #68	@ 0x44
 800d462:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d466:	f000 bcdf 	b.w	800de28 <__math_uflow>
 800d46a:	4598      	cmp	r8, r3
 800d46c:	d20c      	bcs.n	800d488 <__ieee754_pow+0x250>
 800d46e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d472:	2200      	movs	r2, #0
 800d474:	2300      	movs	r3, #0
 800d476:	f7f3 fafd 	bl	8000a74 <__aeabi_dcmplt>
 800d47a:	3800      	subs	r0, #0
 800d47c:	bf18      	it	ne
 800d47e:	2001      	movne	r0, #1
 800d480:	f1b9 0f00 	cmp.w	r9, #0
 800d484:	daec      	bge.n	800d460 <__ieee754_pow+0x228>
 800d486:	e7df      	b.n	800d448 <__ieee754_pow+0x210>
 800d488:	4b10      	ldr	r3, [pc, #64]	@ (800d4cc <__ieee754_pow+0x294>)
 800d48a:	4598      	cmp	r8, r3
 800d48c:	f04f 0200 	mov.w	r2, #0
 800d490:	d924      	bls.n	800d4dc <__ieee754_pow+0x2a4>
 800d492:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d496:	2300      	movs	r3, #0
 800d498:	f7f3 faec 	bl	8000a74 <__aeabi_dcmplt>
 800d49c:	3800      	subs	r0, #0
 800d49e:	bf18      	it	ne
 800d4a0:	2001      	movne	r0, #1
 800d4a2:	f1b9 0f00 	cmp.w	r9, #0
 800d4a6:	dccf      	bgt.n	800d448 <__ieee754_pow+0x210>
 800d4a8:	e7da      	b.n	800d460 <__ieee754_pow+0x228>
 800d4aa:	bf00      	nop
 800d4ac:	f3af 8000 	nop.w
 800d4b0:	00000000 	.word	0x00000000
 800d4b4:	3ff00000 	.word	0x3ff00000
 800d4b8:	00000000 	.word	0x00000000
 800d4bc:	bff00000 	.word	0xbff00000
 800d4c0:	fff00000 	.word	0xfff00000
 800d4c4:	7ff00000 	.word	0x7ff00000
 800d4c8:	433fffff 	.word	0x433fffff
 800d4cc:	3ff00000 	.word	0x3ff00000
 800d4d0:	3fefffff 	.word	0x3fefffff
 800d4d4:	3fe00000 	.word	0x3fe00000
 800d4d8:	43f00000 	.word	0x43f00000
 800d4dc:	4b5a      	ldr	r3, [pc, #360]	@ (800d648 <__ieee754_pow+0x410>)
 800d4de:	f7f2 fe9f 	bl	8000220 <__aeabi_dsub>
 800d4e2:	a351      	add	r3, pc, #324	@ (adr r3, 800d628 <__ieee754_pow+0x3f0>)
 800d4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e8:	4604      	mov	r4, r0
 800d4ea:	460d      	mov	r5, r1
 800d4ec:	f7f3 f850 	bl	8000590 <__aeabi_dmul>
 800d4f0:	a34f      	add	r3, pc, #316	@ (adr r3, 800d630 <__ieee754_pow+0x3f8>)
 800d4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f6:	4606      	mov	r6, r0
 800d4f8:	460f      	mov	r7, r1
 800d4fa:	4620      	mov	r0, r4
 800d4fc:	4629      	mov	r1, r5
 800d4fe:	f7f3 f847 	bl	8000590 <__aeabi_dmul>
 800d502:	4b52      	ldr	r3, [pc, #328]	@ (800d64c <__ieee754_pow+0x414>)
 800d504:	4682      	mov	sl, r0
 800d506:	468b      	mov	fp, r1
 800d508:	2200      	movs	r2, #0
 800d50a:	4620      	mov	r0, r4
 800d50c:	4629      	mov	r1, r5
 800d50e:	f7f3 f83f 	bl	8000590 <__aeabi_dmul>
 800d512:	4602      	mov	r2, r0
 800d514:	460b      	mov	r3, r1
 800d516:	a148      	add	r1, pc, #288	@ (adr r1, 800d638 <__ieee754_pow+0x400>)
 800d518:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d51c:	f7f2 fe80 	bl	8000220 <__aeabi_dsub>
 800d520:	4622      	mov	r2, r4
 800d522:	462b      	mov	r3, r5
 800d524:	f7f3 f834 	bl	8000590 <__aeabi_dmul>
 800d528:	4602      	mov	r2, r0
 800d52a:	460b      	mov	r3, r1
 800d52c:	2000      	movs	r0, #0
 800d52e:	4948      	ldr	r1, [pc, #288]	@ (800d650 <__ieee754_pow+0x418>)
 800d530:	f7f2 fe76 	bl	8000220 <__aeabi_dsub>
 800d534:	4622      	mov	r2, r4
 800d536:	4680      	mov	r8, r0
 800d538:	4689      	mov	r9, r1
 800d53a:	462b      	mov	r3, r5
 800d53c:	4620      	mov	r0, r4
 800d53e:	4629      	mov	r1, r5
 800d540:	f7f3 f826 	bl	8000590 <__aeabi_dmul>
 800d544:	4602      	mov	r2, r0
 800d546:	460b      	mov	r3, r1
 800d548:	4640      	mov	r0, r8
 800d54a:	4649      	mov	r1, r9
 800d54c:	f7f3 f820 	bl	8000590 <__aeabi_dmul>
 800d550:	a33b      	add	r3, pc, #236	@ (adr r3, 800d640 <__ieee754_pow+0x408>)
 800d552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d556:	f7f3 f81b 	bl	8000590 <__aeabi_dmul>
 800d55a:	4602      	mov	r2, r0
 800d55c:	460b      	mov	r3, r1
 800d55e:	4650      	mov	r0, sl
 800d560:	4659      	mov	r1, fp
 800d562:	f7f2 fe5d 	bl	8000220 <__aeabi_dsub>
 800d566:	4602      	mov	r2, r0
 800d568:	460b      	mov	r3, r1
 800d56a:	4680      	mov	r8, r0
 800d56c:	4689      	mov	r9, r1
 800d56e:	4630      	mov	r0, r6
 800d570:	4639      	mov	r1, r7
 800d572:	f7f2 fe57 	bl	8000224 <__adddf3>
 800d576:	2400      	movs	r4, #0
 800d578:	4632      	mov	r2, r6
 800d57a:	463b      	mov	r3, r7
 800d57c:	4620      	mov	r0, r4
 800d57e:	460d      	mov	r5, r1
 800d580:	f7f2 fe4e 	bl	8000220 <__aeabi_dsub>
 800d584:	4602      	mov	r2, r0
 800d586:	460b      	mov	r3, r1
 800d588:	4640      	mov	r0, r8
 800d58a:	4649      	mov	r1, r9
 800d58c:	f7f2 fe48 	bl	8000220 <__aeabi_dsub>
 800d590:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d594:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d598:	2300      	movs	r3, #0
 800d59a:	9304      	str	r3, [sp, #16]
 800d59c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800d5a0:	4606      	mov	r6, r0
 800d5a2:	460f      	mov	r7, r1
 800d5a4:	4652      	mov	r2, sl
 800d5a6:	465b      	mov	r3, fp
 800d5a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5ac:	f7f2 fe38 	bl	8000220 <__aeabi_dsub>
 800d5b0:	4622      	mov	r2, r4
 800d5b2:	462b      	mov	r3, r5
 800d5b4:	f7f2 ffec 	bl	8000590 <__aeabi_dmul>
 800d5b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5bc:	4680      	mov	r8, r0
 800d5be:	4689      	mov	r9, r1
 800d5c0:	4630      	mov	r0, r6
 800d5c2:	4639      	mov	r1, r7
 800d5c4:	f7f2 ffe4 	bl	8000590 <__aeabi_dmul>
 800d5c8:	4602      	mov	r2, r0
 800d5ca:	460b      	mov	r3, r1
 800d5cc:	4640      	mov	r0, r8
 800d5ce:	4649      	mov	r1, r9
 800d5d0:	f7f2 fe28 	bl	8000224 <__adddf3>
 800d5d4:	4652      	mov	r2, sl
 800d5d6:	465b      	mov	r3, fp
 800d5d8:	4606      	mov	r6, r0
 800d5da:	460f      	mov	r7, r1
 800d5dc:	4620      	mov	r0, r4
 800d5de:	4629      	mov	r1, r5
 800d5e0:	f7f2 ffd6 	bl	8000590 <__aeabi_dmul>
 800d5e4:	460b      	mov	r3, r1
 800d5e6:	4602      	mov	r2, r0
 800d5e8:	4680      	mov	r8, r0
 800d5ea:	4689      	mov	r9, r1
 800d5ec:	4630      	mov	r0, r6
 800d5ee:	4639      	mov	r1, r7
 800d5f0:	f7f2 fe18 	bl	8000224 <__adddf3>
 800d5f4:	4b17      	ldr	r3, [pc, #92]	@ (800d654 <__ieee754_pow+0x41c>)
 800d5f6:	4299      	cmp	r1, r3
 800d5f8:	4604      	mov	r4, r0
 800d5fa:	460d      	mov	r5, r1
 800d5fc:	468a      	mov	sl, r1
 800d5fe:	468b      	mov	fp, r1
 800d600:	f340 82ef 	ble.w	800dbe2 <__ieee754_pow+0x9aa>
 800d604:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800d608:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800d60c:	4303      	orrs	r3, r0
 800d60e:	f000 81e8 	beq.w	800d9e2 <__ieee754_pow+0x7aa>
 800d612:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d616:	2200      	movs	r2, #0
 800d618:	2300      	movs	r3, #0
 800d61a:	f7f3 fa2b 	bl	8000a74 <__aeabi_dcmplt>
 800d61e:	3800      	subs	r0, #0
 800d620:	bf18      	it	ne
 800d622:	2001      	movne	r0, #1
 800d624:	e710      	b.n	800d448 <__ieee754_pow+0x210>
 800d626:	bf00      	nop
 800d628:	60000000 	.word	0x60000000
 800d62c:	3ff71547 	.word	0x3ff71547
 800d630:	f85ddf44 	.word	0xf85ddf44
 800d634:	3e54ae0b 	.word	0x3e54ae0b
 800d638:	55555555 	.word	0x55555555
 800d63c:	3fd55555 	.word	0x3fd55555
 800d640:	652b82fe 	.word	0x652b82fe
 800d644:	3ff71547 	.word	0x3ff71547
 800d648:	3ff00000 	.word	0x3ff00000
 800d64c:	3fd00000 	.word	0x3fd00000
 800d650:	3fe00000 	.word	0x3fe00000
 800d654:	408fffff 	.word	0x408fffff
 800d658:	4bd5      	ldr	r3, [pc, #852]	@ (800d9b0 <__ieee754_pow+0x778>)
 800d65a:	402b      	ands	r3, r5
 800d65c:	2200      	movs	r2, #0
 800d65e:	b92b      	cbnz	r3, 800d66c <__ieee754_pow+0x434>
 800d660:	4bd4      	ldr	r3, [pc, #848]	@ (800d9b4 <__ieee754_pow+0x77c>)
 800d662:	f7f2 ff95 	bl	8000590 <__aeabi_dmul>
 800d666:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800d66a:	468b      	mov	fp, r1
 800d66c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800d670:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800d674:	4413      	add	r3, r2
 800d676:	930a      	str	r3, [sp, #40]	@ 0x28
 800d678:	4bcf      	ldr	r3, [pc, #828]	@ (800d9b8 <__ieee754_pow+0x780>)
 800d67a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800d67e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800d682:	459b      	cmp	fp, r3
 800d684:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d688:	dd08      	ble.n	800d69c <__ieee754_pow+0x464>
 800d68a:	4bcc      	ldr	r3, [pc, #816]	@ (800d9bc <__ieee754_pow+0x784>)
 800d68c:	459b      	cmp	fp, r3
 800d68e:	f340 81a5 	ble.w	800d9dc <__ieee754_pow+0x7a4>
 800d692:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d694:	3301      	adds	r3, #1
 800d696:	930a      	str	r3, [sp, #40]	@ 0x28
 800d698:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800d69c:	f04f 0a00 	mov.w	sl, #0
 800d6a0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800d6a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6a6:	4bc6      	ldr	r3, [pc, #792]	@ (800d9c0 <__ieee754_pow+0x788>)
 800d6a8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d6ac:	ed93 7b00 	vldr	d7, [r3]
 800d6b0:	4629      	mov	r1, r5
 800d6b2:	ec53 2b17 	vmov	r2, r3, d7
 800d6b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d6ba:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d6be:	f7f2 fdaf 	bl	8000220 <__aeabi_dsub>
 800d6c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d6c6:	4606      	mov	r6, r0
 800d6c8:	460f      	mov	r7, r1
 800d6ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d6ce:	f7f2 fda9 	bl	8000224 <__adddf3>
 800d6d2:	4602      	mov	r2, r0
 800d6d4:	460b      	mov	r3, r1
 800d6d6:	2000      	movs	r0, #0
 800d6d8:	49ba      	ldr	r1, [pc, #744]	@ (800d9c4 <__ieee754_pow+0x78c>)
 800d6da:	f7f3 f883 	bl	80007e4 <__aeabi_ddiv>
 800d6de:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	460b      	mov	r3, r1
 800d6e6:	4630      	mov	r0, r6
 800d6e8:	4639      	mov	r1, r7
 800d6ea:	f7f2 ff51 	bl	8000590 <__aeabi_dmul>
 800d6ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d6f2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800d6f6:	106d      	asrs	r5, r5, #1
 800d6f8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800d6fc:	f04f 0b00 	mov.w	fp, #0
 800d700:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800d704:	4661      	mov	r1, ip
 800d706:	2200      	movs	r2, #0
 800d708:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800d70c:	4658      	mov	r0, fp
 800d70e:	46e1      	mov	r9, ip
 800d710:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800d714:	4614      	mov	r4, r2
 800d716:	461d      	mov	r5, r3
 800d718:	f7f2 ff3a 	bl	8000590 <__aeabi_dmul>
 800d71c:	4602      	mov	r2, r0
 800d71e:	460b      	mov	r3, r1
 800d720:	4630      	mov	r0, r6
 800d722:	4639      	mov	r1, r7
 800d724:	f7f2 fd7c 	bl	8000220 <__aeabi_dsub>
 800d728:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d72c:	4606      	mov	r6, r0
 800d72e:	460f      	mov	r7, r1
 800d730:	4620      	mov	r0, r4
 800d732:	4629      	mov	r1, r5
 800d734:	f7f2 fd74 	bl	8000220 <__aeabi_dsub>
 800d738:	4602      	mov	r2, r0
 800d73a:	460b      	mov	r3, r1
 800d73c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d740:	f7f2 fd6e 	bl	8000220 <__aeabi_dsub>
 800d744:	465a      	mov	r2, fp
 800d746:	464b      	mov	r3, r9
 800d748:	f7f2 ff22 	bl	8000590 <__aeabi_dmul>
 800d74c:	4602      	mov	r2, r0
 800d74e:	460b      	mov	r3, r1
 800d750:	4630      	mov	r0, r6
 800d752:	4639      	mov	r1, r7
 800d754:	f7f2 fd64 	bl	8000220 <__aeabi_dsub>
 800d758:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d75c:	f7f2 ff18 	bl	8000590 <__aeabi_dmul>
 800d760:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d764:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d768:	4610      	mov	r0, r2
 800d76a:	4619      	mov	r1, r3
 800d76c:	f7f2 ff10 	bl	8000590 <__aeabi_dmul>
 800d770:	a37d      	add	r3, pc, #500	@ (adr r3, 800d968 <__ieee754_pow+0x730>)
 800d772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d776:	4604      	mov	r4, r0
 800d778:	460d      	mov	r5, r1
 800d77a:	f7f2 ff09 	bl	8000590 <__aeabi_dmul>
 800d77e:	a37c      	add	r3, pc, #496	@ (adr r3, 800d970 <__ieee754_pow+0x738>)
 800d780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d784:	f7f2 fd4e 	bl	8000224 <__adddf3>
 800d788:	4622      	mov	r2, r4
 800d78a:	462b      	mov	r3, r5
 800d78c:	f7f2 ff00 	bl	8000590 <__aeabi_dmul>
 800d790:	a379      	add	r3, pc, #484	@ (adr r3, 800d978 <__ieee754_pow+0x740>)
 800d792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d796:	f7f2 fd45 	bl	8000224 <__adddf3>
 800d79a:	4622      	mov	r2, r4
 800d79c:	462b      	mov	r3, r5
 800d79e:	f7f2 fef7 	bl	8000590 <__aeabi_dmul>
 800d7a2:	a377      	add	r3, pc, #476	@ (adr r3, 800d980 <__ieee754_pow+0x748>)
 800d7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a8:	f7f2 fd3c 	bl	8000224 <__adddf3>
 800d7ac:	4622      	mov	r2, r4
 800d7ae:	462b      	mov	r3, r5
 800d7b0:	f7f2 feee 	bl	8000590 <__aeabi_dmul>
 800d7b4:	a374      	add	r3, pc, #464	@ (adr r3, 800d988 <__ieee754_pow+0x750>)
 800d7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ba:	f7f2 fd33 	bl	8000224 <__adddf3>
 800d7be:	4622      	mov	r2, r4
 800d7c0:	462b      	mov	r3, r5
 800d7c2:	f7f2 fee5 	bl	8000590 <__aeabi_dmul>
 800d7c6:	a372      	add	r3, pc, #456	@ (adr r3, 800d990 <__ieee754_pow+0x758>)
 800d7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7cc:	f7f2 fd2a 	bl	8000224 <__adddf3>
 800d7d0:	4622      	mov	r2, r4
 800d7d2:	4606      	mov	r6, r0
 800d7d4:	460f      	mov	r7, r1
 800d7d6:	462b      	mov	r3, r5
 800d7d8:	4620      	mov	r0, r4
 800d7da:	4629      	mov	r1, r5
 800d7dc:	f7f2 fed8 	bl	8000590 <__aeabi_dmul>
 800d7e0:	4602      	mov	r2, r0
 800d7e2:	460b      	mov	r3, r1
 800d7e4:	4630      	mov	r0, r6
 800d7e6:	4639      	mov	r1, r7
 800d7e8:	f7f2 fed2 	bl	8000590 <__aeabi_dmul>
 800d7ec:	465a      	mov	r2, fp
 800d7ee:	4604      	mov	r4, r0
 800d7f0:	460d      	mov	r5, r1
 800d7f2:	464b      	mov	r3, r9
 800d7f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d7f8:	f7f2 fd14 	bl	8000224 <__adddf3>
 800d7fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d800:	f7f2 fec6 	bl	8000590 <__aeabi_dmul>
 800d804:	4622      	mov	r2, r4
 800d806:	462b      	mov	r3, r5
 800d808:	f7f2 fd0c 	bl	8000224 <__adddf3>
 800d80c:	465a      	mov	r2, fp
 800d80e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d812:	464b      	mov	r3, r9
 800d814:	4658      	mov	r0, fp
 800d816:	4649      	mov	r1, r9
 800d818:	f7f2 feba 	bl	8000590 <__aeabi_dmul>
 800d81c:	4b6a      	ldr	r3, [pc, #424]	@ (800d9c8 <__ieee754_pow+0x790>)
 800d81e:	2200      	movs	r2, #0
 800d820:	4606      	mov	r6, r0
 800d822:	460f      	mov	r7, r1
 800d824:	f7f2 fcfe 	bl	8000224 <__adddf3>
 800d828:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d82c:	f7f2 fcfa 	bl	8000224 <__adddf3>
 800d830:	46d8      	mov	r8, fp
 800d832:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800d836:	460d      	mov	r5, r1
 800d838:	465a      	mov	r2, fp
 800d83a:	460b      	mov	r3, r1
 800d83c:	4640      	mov	r0, r8
 800d83e:	4649      	mov	r1, r9
 800d840:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800d844:	f7f2 fea4 	bl	8000590 <__aeabi_dmul>
 800d848:	465c      	mov	r4, fp
 800d84a:	4680      	mov	r8, r0
 800d84c:	4689      	mov	r9, r1
 800d84e:	4b5e      	ldr	r3, [pc, #376]	@ (800d9c8 <__ieee754_pow+0x790>)
 800d850:	2200      	movs	r2, #0
 800d852:	4620      	mov	r0, r4
 800d854:	4629      	mov	r1, r5
 800d856:	f7f2 fce3 	bl	8000220 <__aeabi_dsub>
 800d85a:	4632      	mov	r2, r6
 800d85c:	463b      	mov	r3, r7
 800d85e:	f7f2 fcdf 	bl	8000220 <__aeabi_dsub>
 800d862:	4602      	mov	r2, r0
 800d864:	460b      	mov	r3, r1
 800d866:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d86a:	f7f2 fcd9 	bl	8000220 <__aeabi_dsub>
 800d86e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d872:	f7f2 fe8d 	bl	8000590 <__aeabi_dmul>
 800d876:	4622      	mov	r2, r4
 800d878:	4606      	mov	r6, r0
 800d87a:	460f      	mov	r7, r1
 800d87c:	462b      	mov	r3, r5
 800d87e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d882:	f7f2 fe85 	bl	8000590 <__aeabi_dmul>
 800d886:	4602      	mov	r2, r0
 800d888:	460b      	mov	r3, r1
 800d88a:	4630      	mov	r0, r6
 800d88c:	4639      	mov	r1, r7
 800d88e:	f7f2 fcc9 	bl	8000224 <__adddf3>
 800d892:	4606      	mov	r6, r0
 800d894:	460f      	mov	r7, r1
 800d896:	4602      	mov	r2, r0
 800d898:	460b      	mov	r3, r1
 800d89a:	4640      	mov	r0, r8
 800d89c:	4649      	mov	r1, r9
 800d89e:	f7f2 fcc1 	bl	8000224 <__adddf3>
 800d8a2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800d8a6:	a33c      	add	r3, pc, #240	@ (adr r3, 800d998 <__ieee754_pow+0x760>)
 800d8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ac:	4658      	mov	r0, fp
 800d8ae:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800d8b2:	460d      	mov	r5, r1
 800d8b4:	f7f2 fe6c 	bl	8000590 <__aeabi_dmul>
 800d8b8:	465c      	mov	r4, fp
 800d8ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d8be:	4642      	mov	r2, r8
 800d8c0:	464b      	mov	r3, r9
 800d8c2:	4620      	mov	r0, r4
 800d8c4:	4629      	mov	r1, r5
 800d8c6:	f7f2 fcab 	bl	8000220 <__aeabi_dsub>
 800d8ca:	4602      	mov	r2, r0
 800d8cc:	460b      	mov	r3, r1
 800d8ce:	4630      	mov	r0, r6
 800d8d0:	4639      	mov	r1, r7
 800d8d2:	f7f2 fca5 	bl	8000220 <__aeabi_dsub>
 800d8d6:	a332      	add	r3, pc, #200	@ (adr r3, 800d9a0 <__ieee754_pow+0x768>)
 800d8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8dc:	f7f2 fe58 	bl	8000590 <__aeabi_dmul>
 800d8e0:	a331      	add	r3, pc, #196	@ (adr r3, 800d9a8 <__ieee754_pow+0x770>)
 800d8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e6:	4606      	mov	r6, r0
 800d8e8:	460f      	mov	r7, r1
 800d8ea:	4620      	mov	r0, r4
 800d8ec:	4629      	mov	r1, r5
 800d8ee:	f7f2 fe4f 	bl	8000590 <__aeabi_dmul>
 800d8f2:	4602      	mov	r2, r0
 800d8f4:	460b      	mov	r3, r1
 800d8f6:	4630      	mov	r0, r6
 800d8f8:	4639      	mov	r1, r7
 800d8fa:	f7f2 fc93 	bl	8000224 <__adddf3>
 800d8fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d900:	4b32      	ldr	r3, [pc, #200]	@ (800d9cc <__ieee754_pow+0x794>)
 800d902:	4413      	add	r3, r2
 800d904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d908:	f7f2 fc8c 	bl	8000224 <__adddf3>
 800d90c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d910:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d912:	f7f2 fdd3 	bl	80004bc <__aeabi_i2d>
 800d916:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d918:	4b2d      	ldr	r3, [pc, #180]	@ (800d9d0 <__ieee754_pow+0x798>)
 800d91a:	4413      	add	r3, r2
 800d91c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d920:	4606      	mov	r6, r0
 800d922:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d926:	460f      	mov	r7, r1
 800d928:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d92c:	f7f2 fc7a 	bl	8000224 <__adddf3>
 800d930:	4642      	mov	r2, r8
 800d932:	464b      	mov	r3, r9
 800d934:	f7f2 fc76 	bl	8000224 <__adddf3>
 800d938:	4632      	mov	r2, r6
 800d93a:	463b      	mov	r3, r7
 800d93c:	f7f2 fc72 	bl	8000224 <__adddf3>
 800d940:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800d944:	4632      	mov	r2, r6
 800d946:	463b      	mov	r3, r7
 800d948:	4658      	mov	r0, fp
 800d94a:	460d      	mov	r5, r1
 800d94c:	f7f2 fc68 	bl	8000220 <__aeabi_dsub>
 800d950:	4642      	mov	r2, r8
 800d952:	464b      	mov	r3, r9
 800d954:	f7f2 fc64 	bl	8000220 <__aeabi_dsub>
 800d958:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d95c:	f7f2 fc60 	bl	8000220 <__aeabi_dsub>
 800d960:	465c      	mov	r4, fp
 800d962:	4602      	mov	r2, r0
 800d964:	e036      	b.n	800d9d4 <__ieee754_pow+0x79c>
 800d966:	bf00      	nop
 800d968:	4a454eef 	.word	0x4a454eef
 800d96c:	3fca7e28 	.word	0x3fca7e28
 800d970:	93c9db65 	.word	0x93c9db65
 800d974:	3fcd864a 	.word	0x3fcd864a
 800d978:	a91d4101 	.word	0xa91d4101
 800d97c:	3fd17460 	.word	0x3fd17460
 800d980:	518f264d 	.word	0x518f264d
 800d984:	3fd55555 	.word	0x3fd55555
 800d988:	db6fabff 	.word	0xdb6fabff
 800d98c:	3fdb6db6 	.word	0x3fdb6db6
 800d990:	33333303 	.word	0x33333303
 800d994:	3fe33333 	.word	0x3fe33333
 800d998:	e0000000 	.word	0xe0000000
 800d99c:	3feec709 	.word	0x3feec709
 800d9a0:	dc3a03fd 	.word	0xdc3a03fd
 800d9a4:	3feec709 	.word	0x3feec709
 800d9a8:	145b01f5 	.word	0x145b01f5
 800d9ac:	be3e2fe0 	.word	0xbe3e2fe0
 800d9b0:	7ff00000 	.word	0x7ff00000
 800d9b4:	43400000 	.word	0x43400000
 800d9b8:	0003988e 	.word	0x0003988e
 800d9bc:	000bb679 	.word	0x000bb679
 800d9c0:	0800dfa8 	.word	0x0800dfa8
 800d9c4:	3ff00000 	.word	0x3ff00000
 800d9c8:	40080000 	.word	0x40080000
 800d9cc:	0800df88 	.word	0x0800df88
 800d9d0:	0800df98 	.word	0x0800df98
 800d9d4:	460b      	mov	r3, r1
 800d9d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d9da:	e5d7      	b.n	800d58c <__ieee754_pow+0x354>
 800d9dc:	f04f 0a01 	mov.w	sl, #1
 800d9e0:	e65e      	b.n	800d6a0 <__ieee754_pow+0x468>
 800d9e2:	a3b4      	add	r3, pc, #720	@ (adr r3, 800dcb4 <__ieee754_pow+0xa7c>)
 800d9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e8:	4630      	mov	r0, r6
 800d9ea:	4639      	mov	r1, r7
 800d9ec:	f7f2 fc1a 	bl	8000224 <__adddf3>
 800d9f0:	4642      	mov	r2, r8
 800d9f2:	e9cd 0100 	strd	r0, r1, [sp]
 800d9f6:	464b      	mov	r3, r9
 800d9f8:	4620      	mov	r0, r4
 800d9fa:	4629      	mov	r1, r5
 800d9fc:	f7f2 fc10 	bl	8000220 <__aeabi_dsub>
 800da00:	4602      	mov	r2, r0
 800da02:	460b      	mov	r3, r1
 800da04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800da08:	f7f3 f852 	bl	8000ab0 <__aeabi_dcmpgt>
 800da0c:	2800      	cmp	r0, #0
 800da0e:	f47f ae00 	bne.w	800d612 <__ieee754_pow+0x3da>
 800da12:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800da16:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800da1a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800da1e:	fa43 fa0a 	asr.w	sl, r3, sl
 800da22:	44da      	add	sl, fp
 800da24:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800da28:	489d      	ldr	r0, [pc, #628]	@ (800dca0 <__ieee754_pow+0xa68>)
 800da2a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800da2e:	4108      	asrs	r0, r1
 800da30:	ea00 030a 	and.w	r3, r0, sl
 800da34:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800da38:	f1c1 0114 	rsb	r1, r1, #20
 800da3c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800da40:	fa4a fa01 	asr.w	sl, sl, r1
 800da44:	f1bb 0f00 	cmp.w	fp, #0
 800da48:	4640      	mov	r0, r8
 800da4a:	4649      	mov	r1, r9
 800da4c:	f04f 0200 	mov.w	r2, #0
 800da50:	bfb8      	it	lt
 800da52:	f1ca 0a00 	rsblt	sl, sl, #0
 800da56:	f7f2 fbe3 	bl	8000220 <__aeabi_dsub>
 800da5a:	4680      	mov	r8, r0
 800da5c:	4689      	mov	r9, r1
 800da5e:	4632      	mov	r2, r6
 800da60:	463b      	mov	r3, r7
 800da62:	4640      	mov	r0, r8
 800da64:	4649      	mov	r1, r9
 800da66:	f7f2 fbdd 	bl	8000224 <__adddf3>
 800da6a:	2400      	movs	r4, #0
 800da6c:	a37c      	add	r3, pc, #496	@ (adr r3, 800dc60 <__ieee754_pow+0xa28>)
 800da6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da72:	4620      	mov	r0, r4
 800da74:	460d      	mov	r5, r1
 800da76:	f7f2 fd8b 	bl	8000590 <__aeabi_dmul>
 800da7a:	4642      	mov	r2, r8
 800da7c:	e9cd 0100 	strd	r0, r1, [sp]
 800da80:	464b      	mov	r3, r9
 800da82:	4620      	mov	r0, r4
 800da84:	4629      	mov	r1, r5
 800da86:	f7f2 fbcb 	bl	8000220 <__aeabi_dsub>
 800da8a:	4602      	mov	r2, r0
 800da8c:	460b      	mov	r3, r1
 800da8e:	4630      	mov	r0, r6
 800da90:	4639      	mov	r1, r7
 800da92:	f7f2 fbc5 	bl	8000220 <__aeabi_dsub>
 800da96:	a374      	add	r3, pc, #464	@ (adr r3, 800dc68 <__ieee754_pow+0xa30>)
 800da98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da9c:	f7f2 fd78 	bl	8000590 <__aeabi_dmul>
 800daa0:	a373      	add	r3, pc, #460	@ (adr r3, 800dc70 <__ieee754_pow+0xa38>)
 800daa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa6:	4680      	mov	r8, r0
 800daa8:	4689      	mov	r9, r1
 800daaa:	4620      	mov	r0, r4
 800daac:	4629      	mov	r1, r5
 800daae:	f7f2 fd6f 	bl	8000590 <__aeabi_dmul>
 800dab2:	4602      	mov	r2, r0
 800dab4:	460b      	mov	r3, r1
 800dab6:	4640      	mov	r0, r8
 800dab8:	4649      	mov	r1, r9
 800daba:	f7f2 fbb3 	bl	8000224 <__adddf3>
 800dabe:	4604      	mov	r4, r0
 800dac0:	460d      	mov	r5, r1
 800dac2:	4602      	mov	r2, r0
 800dac4:	460b      	mov	r3, r1
 800dac6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800daca:	f7f2 fbab 	bl	8000224 <__adddf3>
 800dace:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dad2:	4680      	mov	r8, r0
 800dad4:	4689      	mov	r9, r1
 800dad6:	f7f2 fba3 	bl	8000220 <__aeabi_dsub>
 800dada:	4602      	mov	r2, r0
 800dadc:	460b      	mov	r3, r1
 800dade:	4620      	mov	r0, r4
 800dae0:	4629      	mov	r1, r5
 800dae2:	f7f2 fb9d 	bl	8000220 <__aeabi_dsub>
 800dae6:	4642      	mov	r2, r8
 800dae8:	4606      	mov	r6, r0
 800daea:	460f      	mov	r7, r1
 800daec:	464b      	mov	r3, r9
 800daee:	4640      	mov	r0, r8
 800daf0:	4649      	mov	r1, r9
 800daf2:	f7f2 fd4d 	bl	8000590 <__aeabi_dmul>
 800daf6:	a360      	add	r3, pc, #384	@ (adr r3, 800dc78 <__ieee754_pow+0xa40>)
 800daf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dafc:	4604      	mov	r4, r0
 800dafe:	460d      	mov	r5, r1
 800db00:	f7f2 fd46 	bl	8000590 <__aeabi_dmul>
 800db04:	a35e      	add	r3, pc, #376	@ (adr r3, 800dc80 <__ieee754_pow+0xa48>)
 800db06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db0a:	f7f2 fb89 	bl	8000220 <__aeabi_dsub>
 800db0e:	4622      	mov	r2, r4
 800db10:	462b      	mov	r3, r5
 800db12:	f7f2 fd3d 	bl	8000590 <__aeabi_dmul>
 800db16:	a35c      	add	r3, pc, #368	@ (adr r3, 800dc88 <__ieee754_pow+0xa50>)
 800db18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db1c:	f7f2 fb82 	bl	8000224 <__adddf3>
 800db20:	4622      	mov	r2, r4
 800db22:	462b      	mov	r3, r5
 800db24:	f7f2 fd34 	bl	8000590 <__aeabi_dmul>
 800db28:	a359      	add	r3, pc, #356	@ (adr r3, 800dc90 <__ieee754_pow+0xa58>)
 800db2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db2e:	f7f2 fb77 	bl	8000220 <__aeabi_dsub>
 800db32:	4622      	mov	r2, r4
 800db34:	462b      	mov	r3, r5
 800db36:	f7f2 fd2b 	bl	8000590 <__aeabi_dmul>
 800db3a:	a357      	add	r3, pc, #348	@ (adr r3, 800dc98 <__ieee754_pow+0xa60>)
 800db3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db40:	f7f2 fb70 	bl	8000224 <__adddf3>
 800db44:	4622      	mov	r2, r4
 800db46:	462b      	mov	r3, r5
 800db48:	f7f2 fd22 	bl	8000590 <__aeabi_dmul>
 800db4c:	4602      	mov	r2, r0
 800db4e:	460b      	mov	r3, r1
 800db50:	4640      	mov	r0, r8
 800db52:	4649      	mov	r1, r9
 800db54:	f7f2 fb64 	bl	8000220 <__aeabi_dsub>
 800db58:	4604      	mov	r4, r0
 800db5a:	460d      	mov	r5, r1
 800db5c:	4602      	mov	r2, r0
 800db5e:	460b      	mov	r3, r1
 800db60:	4640      	mov	r0, r8
 800db62:	4649      	mov	r1, r9
 800db64:	f7f2 fd14 	bl	8000590 <__aeabi_dmul>
 800db68:	2200      	movs	r2, #0
 800db6a:	e9cd 0100 	strd	r0, r1, [sp]
 800db6e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800db72:	4620      	mov	r0, r4
 800db74:	4629      	mov	r1, r5
 800db76:	f7f2 fb53 	bl	8000220 <__aeabi_dsub>
 800db7a:	4602      	mov	r2, r0
 800db7c:	460b      	mov	r3, r1
 800db7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db82:	f7f2 fe2f 	bl	80007e4 <__aeabi_ddiv>
 800db86:	4632      	mov	r2, r6
 800db88:	4604      	mov	r4, r0
 800db8a:	460d      	mov	r5, r1
 800db8c:	463b      	mov	r3, r7
 800db8e:	4640      	mov	r0, r8
 800db90:	4649      	mov	r1, r9
 800db92:	f7f2 fcfd 	bl	8000590 <__aeabi_dmul>
 800db96:	4632      	mov	r2, r6
 800db98:	463b      	mov	r3, r7
 800db9a:	f7f2 fb43 	bl	8000224 <__adddf3>
 800db9e:	4602      	mov	r2, r0
 800dba0:	460b      	mov	r3, r1
 800dba2:	4620      	mov	r0, r4
 800dba4:	4629      	mov	r1, r5
 800dba6:	f7f2 fb3b 	bl	8000220 <__aeabi_dsub>
 800dbaa:	4642      	mov	r2, r8
 800dbac:	464b      	mov	r3, r9
 800dbae:	f7f2 fb37 	bl	8000220 <__aeabi_dsub>
 800dbb2:	460b      	mov	r3, r1
 800dbb4:	4602      	mov	r2, r0
 800dbb6:	493b      	ldr	r1, [pc, #236]	@ (800dca4 <__ieee754_pow+0xa6c>)
 800dbb8:	2000      	movs	r0, #0
 800dbba:	f7f2 fb31 	bl	8000220 <__aeabi_dsub>
 800dbbe:	ec41 0b10 	vmov	d0, r0, r1
 800dbc2:	ee10 3a90 	vmov	r3, s1
 800dbc6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800dbca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dbce:	da30      	bge.n	800dc32 <__ieee754_pow+0x9fa>
 800dbd0:	4650      	mov	r0, sl
 800dbd2:	f000 f87d 	bl	800dcd0 <scalbn>
 800dbd6:	ec51 0b10 	vmov	r0, r1, d0
 800dbda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dbde:	f7ff bbd2 	b.w	800d386 <__ieee754_pow+0x14e>
 800dbe2:	4c31      	ldr	r4, [pc, #196]	@ (800dca8 <__ieee754_pow+0xa70>)
 800dbe4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800dbe8:	42a3      	cmp	r3, r4
 800dbea:	d91a      	bls.n	800dc22 <__ieee754_pow+0x9ea>
 800dbec:	4b2f      	ldr	r3, [pc, #188]	@ (800dcac <__ieee754_pow+0xa74>)
 800dbee:	440b      	add	r3, r1
 800dbf0:	4303      	orrs	r3, r0
 800dbf2:	d009      	beq.n	800dc08 <__ieee754_pow+0x9d0>
 800dbf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	f7f2 ff3a 	bl	8000a74 <__aeabi_dcmplt>
 800dc00:	3800      	subs	r0, #0
 800dc02:	bf18      	it	ne
 800dc04:	2001      	movne	r0, #1
 800dc06:	e42b      	b.n	800d460 <__ieee754_pow+0x228>
 800dc08:	4642      	mov	r2, r8
 800dc0a:	464b      	mov	r3, r9
 800dc0c:	f7f2 fb08 	bl	8000220 <__aeabi_dsub>
 800dc10:	4632      	mov	r2, r6
 800dc12:	463b      	mov	r3, r7
 800dc14:	f7f2 ff42 	bl	8000a9c <__aeabi_dcmpge>
 800dc18:	2800      	cmp	r0, #0
 800dc1a:	d1eb      	bne.n	800dbf4 <__ieee754_pow+0x9bc>
 800dc1c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800dcbc <__ieee754_pow+0xa84>
 800dc20:	e6f7      	b.n	800da12 <__ieee754_pow+0x7da>
 800dc22:	469a      	mov	sl, r3
 800dc24:	4b22      	ldr	r3, [pc, #136]	@ (800dcb0 <__ieee754_pow+0xa78>)
 800dc26:	459a      	cmp	sl, r3
 800dc28:	f63f aef3 	bhi.w	800da12 <__ieee754_pow+0x7da>
 800dc2c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800dc30:	e715      	b.n	800da5e <__ieee754_pow+0x826>
 800dc32:	ec51 0b10 	vmov	r0, r1, d0
 800dc36:	4619      	mov	r1, r3
 800dc38:	e7cf      	b.n	800dbda <__ieee754_pow+0x9a2>
 800dc3a:	491a      	ldr	r1, [pc, #104]	@ (800dca4 <__ieee754_pow+0xa6c>)
 800dc3c:	2000      	movs	r0, #0
 800dc3e:	f7ff bb18 	b.w	800d272 <__ieee754_pow+0x3a>
 800dc42:	2000      	movs	r0, #0
 800dc44:	2100      	movs	r1, #0
 800dc46:	f7ff bb14 	b.w	800d272 <__ieee754_pow+0x3a>
 800dc4a:	4630      	mov	r0, r6
 800dc4c:	4639      	mov	r1, r7
 800dc4e:	f7ff bb10 	b.w	800d272 <__ieee754_pow+0x3a>
 800dc52:	460c      	mov	r4, r1
 800dc54:	f7ff bb5e 	b.w	800d314 <__ieee754_pow+0xdc>
 800dc58:	2400      	movs	r4, #0
 800dc5a:	f7ff bb49 	b.w	800d2f0 <__ieee754_pow+0xb8>
 800dc5e:	bf00      	nop
 800dc60:	00000000 	.word	0x00000000
 800dc64:	3fe62e43 	.word	0x3fe62e43
 800dc68:	fefa39ef 	.word	0xfefa39ef
 800dc6c:	3fe62e42 	.word	0x3fe62e42
 800dc70:	0ca86c39 	.word	0x0ca86c39
 800dc74:	be205c61 	.word	0xbe205c61
 800dc78:	72bea4d0 	.word	0x72bea4d0
 800dc7c:	3e663769 	.word	0x3e663769
 800dc80:	c5d26bf1 	.word	0xc5d26bf1
 800dc84:	3ebbbd41 	.word	0x3ebbbd41
 800dc88:	af25de2c 	.word	0xaf25de2c
 800dc8c:	3f11566a 	.word	0x3f11566a
 800dc90:	16bebd93 	.word	0x16bebd93
 800dc94:	3f66c16c 	.word	0x3f66c16c
 800dc98:	5555553e 	.word	0x5555553e
 800dc9c:	3fc55555 	.word	0x3fc55555
 800dca0:	fff00000 	.word	0xfff00000
 800dca4:	3ff00000 	.word	0x3ff00000
 800dca8:	4090cbff 	.word	0x4090cbff
 800dcac:	3f6f3400 	.word	0x3f6f3400
 800dcb0:	3fe00000 	.word	0x3fe00000
 800dcb4:	652b82fe 	.word	0x652b82fe
 800dcb8:	3c971547 	.word	0x3c971547
 800dcbc:	4090cc00 	.word	0x4090cc00

0800dcc0 <fabs>:
 800dcc0:	ec51 0b10 	vmov	r0, r1, d0
 800dcc4:	4602      	mov	r2, r0
 800dcc6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800dcca:	ec43 2b10 	vmov	d0, r2, r3
 800dcce:	4770      	bx	lr

0800dcd0 <scalbn>:
 800dcd0:	b570      	push	{r4, r5, r6, lr}
 800dcd2:	ec55 4b10 	vmov	r4, r5, d0
 800dcd6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800dcda:	4606      	mov	r6, r0
 800dcdc:	462b      	mov	r3, r5
 800dcde:	b991      	cbnz	r1, 800dd06 <scalbn+0x36>
 800dce0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800dce4:	4323      	orrs	r3, r4
 800dce6:	d03d      	beq.n	800dd64 <scalbn+0x94>
 800dce8:	4b35      	ldr	r3, [pc, #212]	@ (800ddc0 <scalbn+0xf0>)
 800dcea:	4620      	mov	r0, r4
 800dcec:	4629      	mov	r1, r5
 800dcee:	2200      	movs	r2, #0
 800dcf0:	f7f2 fc4e 	bl	8000590 <__aeabi_dmul>
 800dcf4:	4b33      	ldr	r3, [pc, #204]	@ (800ddc4 <scalbn+0xf4>)
 800dcf6:	429e      	cmp	r6, r3
 800dcf8:	4604      	mov	r4, r0
 800dcfa:	460d      	mov	r5, r1
 800dcfc:	da0f      	bge.n	800dd1e <scalbn+0x4e>
 800dcfe:	a328      	add	r3, pc, #160	@ (adr r3, 800dda0 <scalbn+0xd0>)
 800dd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd04:	e01e      	b.n	800dd44 <scalbn+0x74>
 800dd06:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800dd0a:	4291      	cmp	r1, r2
 800dd0c:	d10b      	bne.n	800dd26 <scalbn+0x56>
 800dd0e:	4622      	mov	r2, r4
 800dd10:	4620      	mov	r0, r4
 800dd12:	4629      	mov	r1, r5
 800dd14:	f7f2 fa86 	bl	8000224 <__adddf3>
 800dd18:	4604      	mov	r4, r0
 800dd1a:	460d      	mov	r5, r1
 800dd1c:	e022      	b.n	800dd64 <scalbn+0x94>
 800dd1e:	460b      	mov	r3, r1
 800dd20:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800dd24:	3936      	subs	r1, #54	@ 0x36
 800dd26:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800dd2a:	4296      	cmp	r6, r2
 800dd2c:	dd0d      	ble.n	800dd4a <scalbn+0x7a>
 800dd2e:	2d00      	cmp	r5, #0
 800dd30:	a11d      	add	r1, pc, #116	@ (adr r1, 800dda8 <scalbn+0xd8>)
 800dd32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd36:	da02      	bge.n	800dd3e <scalbn+0x6e>
 800dd38:	a11d      	add	r1, pc, #116	@ (adr r1, 800ddb0 <scalbn+0xe0>)
 800dd3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd3e:	a31a      	add	r3, pc, #104	@ (adr r3, 800dda8 <scalbn+0xd8>)
 800dd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd44:	f7f2 fc24 	bl	8000590 <__aeabi_dmul>
 800dd48:	e7e6      	b.n	800dd18 <scalbn+0x48>
 800dd4a:	1872      	adds	r2, r6, r1
 800dd4c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800dd50:	428a      	cmp	r2, r1
 800dd52:	dcec      	bgt.n	800dd2e <scalbn+0x5e>
 800dd54:	2a00      	cmp	r2, #0
 800dd56:	dd08      	ble.n	800dd6a <scalbn+0x9a>
 800dd58:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800dd5c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800dd60:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dd64:	ec45 4b10 	vmov	d0, r4, r5
 800dd68:	bd70      	pop	{r4, r5, r6, pc}
 800dd6a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800dd6e:	da08      	bge.n	800dd82 <scalbn+0xb2>
 800dd70:	2d00      	cmp	r5, #0
 800dd72:	a10b      	add	r1, pc, #44	@ (adr r1, 800dda0 <scalbn+0xd0>)
 800dd74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd78:	dac1      	bge.n	800dcfe <scalbn+0x2e>
 800dd7a:	a10f      	add	r1, pc, #60	@ (adr r1, 800ddb8 <scalbn+0xe8>)
 800dd7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd80:	e7bd      	b.n	800dcfe <scalbn+0x2e>
 800dd82:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800dd86:	3236      	adds	r2, #54	@ 0x36
 800dd88:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800dd8c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dd90:	4620      	mov	r0, r4
 800dd92:	4b0d      	ldr	r3, [pc, #52]	@ (800ddc8 <scalbn+0xf8>)
 800dd94:	4629      	mov	r1, r5
 800dd96:	2200      	movs	r2, #0
 800dd98:	e7d4      	b.n	800dd44 <scalbn+0x74>
 800dd9a:	bf00      	nop
 800dd9c:	f3af 8000 	nop.w
 800dda0:	c2f8f359 	.word	0xc2f8f359
 800dda4:	01a56e1f 	.word	0x01a56e1f
 800dda8:	8800759c 	.word	0x8800759c
 800ddac:	7e37e43c 	.word	0x7e37e43c
 800ddb0:	8800759c 	.word	0x8800759c
 800ddb4:	fe37e43c 	.word	0xfe37e43c
 800ddb8:	c2f8f359 	.word	0xc2f8f359
 800ddbc:	81a56e1f 	.word	0x81a56e1f
 800ddc0:	43500000 	.word	0x43500000
 800ddc4:	ffff3cb0 	.word	0xffff3cb0
 800ddc8:	3c900000 	.word	0x3c900000

0800ddcc <with_errno>:
 800ddcc:	b510      	push	{r4, lr}
 800ddce:	ed2d 8b02 	vpush	{d8}
 800ddd2:	eeb0 8a40 	vmov.f32	s16, s0
 800ddd6:	eef0 8a60 	vmov.f32	s17, s1
 800ddda:	4604      	mov	r4, r0
 800dddc:	f7ff f87e 	bl	800cedc <__errno>
 800dde0:	eeb0 0a48 	vmov.f32	s0, s16
 800dde4:	eef0 0a68 	vmov.f32	s1, s17
 800dde8:	ecbd 8b02 	vpop	{d8}
 800ddec:	6004      	str	r4, [r0, #0]
 800ddee:	bd10      	pop	{r4, pc}

0800ddf0 <xflow>:
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	b507      	push	{r0, r1, r2, lr}
 800ddf4:	ec51 0b10 	vmov	r0, r1, d0
 800ddf8:	b183      	cbz	r3, 800de1c <xflow+0x2c>
 800ddfa:	4602      	mov	r2, r0
 800ddfc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800de00:	e9cd 2300 	strd	r2, r3, [sp]
 800de04:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de08:	f7f2 fbc2 	bl	8000590 <__aeabi_dmul>
 800de0c:	ec41 0b10 	vmov	d0, r0, r1
 800de10:	2022      	movs	r0, #34	@ 0x22
 800de12:	b003      	add	sp, #12
 800de14:	f85d eb04 	ldr.w	lr, [sp], #4
 800de18:	f7ff bfd8 	b.w	800ddcc <with_errno>
 800de1c:	4602      	mov	r2, r0
 800de1e:	460b      	mov	r3, r1
 800de20:	e7ee      	b.n	800de00 <xflow+0x10>
 800de22:	0000      	movs	r0, r0
 800de24:	0000      	movs	r0, r0
	...

0800de28 <__math_uflow>:
 800de28:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800de30 <__math_uflow+0x8>
 800de2c:	f7ff bfe0 	b.w	800ddf0 <xflow>
 800de30:	00000000 	.word	0x00000000
 800de34:	10000000 	.word	0x10000000

0800de38 <__math_oflow>:
 800de38:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800de40 <__math_oflow+0x8>
 800de3c:	f7ff bfd8 	b.w	800ddf0 <xflow>
 800de40:	00000000 	.word	0x00000000
 800de44:	70000000 	.word	0x70000000

0800de48 <_init>:
 800de48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de4a:	bf00      	nop
 800de4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de4e:	bc08      	pop	{r3}
 800de50:	469e      	mov	lr, r3
 800de52:	4770      	bx	lr

0800de54 <_fini>:
 800de54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de56:	bf00      	nop
 800de58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de5a:	bc08      	pop	{r3}
 800de5c:	469e      	mov	lr, r3
 800de5e:	4770      	bx	lr

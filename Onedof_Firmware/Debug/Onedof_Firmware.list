
Onedof_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5c0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800e798  0800e798  0000f798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8f0  0800e8f0  000102f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8f0  0800e8f0  0000f8f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8f8  0800e8f8  000102f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8f8  0800e8f8  0000f8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e8fc  0800e8fc  0000f8fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f8  20000000  0800e900  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001614  200002f8  0800ebf8  000102f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000190c  0800ebf8  0001090c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025ef0  00000000  00000000  00010328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004376  00000000  00000000  00036218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001938  00000000  00000000  0003a590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013ab  00000000  00000000  0003bec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b76e  00000000  00000000  0003d273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000261b1  00000000  00000000  000689e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117460  00000000  00000000  0008eb92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a5ff2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072c4  00000000  00000000  001a6038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001ad2fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200002f8 	.word	0x200002f8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800e780 	.word	0x0800e780

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200002fc 	.word	0x200002fc
 8000214:	0800e780 	.word	0x0800e780

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b96a 	b.w	8000ebc <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9d08      	ldr	r5, [sp, #32]
 8000c06:	460c      	mov	r4, r1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d14e      	bne.n	8000caa <__udivmoddi4+0xaa>
 8000c0c:	4694      	mov	ip, r2
 8000c0e:	458c      	cmp	ip, r1
 8000c10:	4686      	mov	lr, r0
 8000c12:	fab2 f282 	clz	r2, r2
 8000c16:	d962      	bls.n	8000cde <__udivmoddi4+0xde>
 8000c18:	b14a      	cbz	r2, 8000c2e <__udivmoddi4+0x2e>
 8000c1a:	f1c2 0320 	rsb	r3, r2, #32
 8000c1e:	4091      	lsls	r1, r2
 8000c20:	fa20 f303 	lsr.w	r3, r0, r3
 8000c24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c28:	4319      	orrs	r1, r3
 8000c2a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c32:	fa1f f68c 	uxth.w	r6, ip
 8000c36:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c3e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c46:	fb04 f106 	mul.w	r1, r4, r6
 8000c4a:	4299      	cmp	r1, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x64>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c56:	f080 8112 	bcs.w	8000e7e <__udivmoddi4+0x27e>
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	f240 810f 	bls.w	8000e7e <__udivmoddi4+0x27e>
 8000c60:	3c02      	subs	r4, #2
 8000c62:	4463      	add	r3, ip
 8000c64:	1a59      	subs	r1, r3, r1
 8000c66:	fa1f f38e 	uxth.w	r3, lr
 8000c6a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c76:	fb00 f606 	mul.w	r6, r0, r6
 8000c7a:	429e      	cmp	r6, r3
 8000c7c:	d90a      	bls.n	8000c94 <__udivmoddi4+0x94>
 8000c7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c82:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c86:	f080 80fc 	bcs.w	8000e82 <__udivmoddi4+0x282>
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	f240 80f9 	bls.w	8000e82 <__udivmoddi4+0x282>
 8000c90:	4463      	add	r3, ip
 8000c92:	3802      	subs	r0, #2
 8000c94:	1b9b      	subs	r3, r3, r6
 8000c96:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	b11d      	cbz	r5, 8000ca6 <__udivmoddi4+0xa6>
 8000c9e:	40d3      	lsrs	r3, r2
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d905      	bls.n	8000cba <__udivmoddi4+0xba>
 8000cae:	b10d      	cbz	r5, 8000cb4 <__udivmoddi4+0xb4>
 8000cb0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e7f5      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000cba:	fab3 f183 	clz	r1, r3
 8000cbe:	2900      	cmp	r1, #0
 8000cc0:	d146      	bne.n	8000d50 <__udivmoddi4+0x150>
 8000cc2:	42a3      	cmp	r3, r4
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xcc>
 8000cc6:	4290      	cmp	r0, r2
 8000cc8:	f0c0 80f0 	bcc.w	8000eac <__udivmoddi4+0x2ac>
 8000ccc:	1a86      	subs	r6, r0, r2
 8000cce:	eb64 0303 	sbc.w	r3, r4, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	2d00      	cmp	r5, #0
 8000cd6:	d0e6      	beq.n	8000ca6 <__udivmoddi4+0xa6>
 8000cd8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cdc:	e7e3      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000cde:	2a00      	cmp	r2, #0
 8000ce0:	f040 8090 	bne.w	8000e04 <__udivmoddi4+0x204>
 8000ce4:	eba1 040c 	sub.w	r4, r1, ip
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	fa1f f78c 	uxth.w	r7, ip
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cf6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cfa:	fb08 4416 	mls	r4, r8, r6, r4
 8000cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d02:	fb07 f006 	mul.w	r0, r7, r6
 8000d06:	4298      	cmp	r0, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x11c>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x11a>
 8000d14:	4298      	cmp	r0, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2b4>
 8000d1a:	4626      	mov	r6, r4
 8000d1c:	1a1c      	subs	r4, r3, r0
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d26:	fb08 4410 	mls	r4, r8, r0, r4
 8000d2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2e:	fb00 f707 	mul.w	r7, r0, r7
 8000d32:	429f      	cmp	r7, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x148>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x146>
 8000d40:	429f      	cmp	r7, r3
 8000d42:	f200 80b0 	bhi.w	8000ea6 <__udivmoddi4+0x2a6>
 8000d46:	4620      	mov	r0, r4
 8000d48:	1bdb      	subs	r3, r3, r7
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	e7a5      	b.n	8000c9c <__udivmoddi4+0x9c>
 8000d50:	f1c1 0620 	rsb	r6, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 f706 	lsr.w	r7, r2, r6
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d60:	fa04 f301 	lsl.w	r3, r4, r1
 8000d64:	ea43 030c 	orr.w	r3, r3, ip
 8000d68:	40f4      	lsrs	r4, r6
 8000d6a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d6e:	0c38      	lsrs	r0, r7, #16
 8000d70:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d74:	fbb4 fef0 	udiv	lr, r4, r0
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d80:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d84:	fb0e f90c 	mul.w	r9, lr, ip
 8000d88:	45a1      	cmp	r9, r4
 8000d8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x1a6>
 8000d90:	193c      	adds	r4, r7, r4
 8000d92:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d96:	f080 8084 	bcs.w	8000ea2 <__udivmoddi4+0x2a2>
 8000d9a:	45a1      	cmp	r9, r4
 8000d9c:	f240 8081 	bls.w	8000ea2 <__udivmoddi4+0x2a2>
 8000da0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	eba4 0409 	sub.w	r4, r4, r9
 8000daa:	fa1f f983 	uxth.w	r9, r3
 8000dae:	fbb4 f3f0 	udiv	r3, r4, r0
 8000db2:	fb00 4413 	mls	r4, r0, r3, r4
 8000db6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dba:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d907      	bls.n	8000dd2 <__udivmoddi4+0x1d2>
 8000dc2:	193c      	adds	r4, r7, r4
 8000dc4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc8:	d267      	bcs.n	8000e9a <__udivmoddi4+0x29a>
 8000dca:	45a4      	cmp	ip, r4
 8000dcc:	d965      	bls.n	8000e9a <__udivmoddi4+0x29a>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	443c      	add	r4, r7
 8000dd2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dd6:	fba0 9302 	umull	r9, r3, r0, r2
 8000dda:	eba4 040c 	sub.w	r4, r4, ip
 8000dde:	429c      	cmp	r4, r3
 8000de0:	46ce      	mov	lr, r9
 8000de2:	469c      	mov	ip, r3
 8000de4:	d351      	bcc.n	8000e8a <__udivmoddi4+0x28a>
 8000de6:	d04e      	beq.n	8000e86 <__udivmoddi4+0x286>
 8000de8:	b155      	cbz	r5, 8000e00 <__udivmoddi4+0x200>
 8000dea:	ebb8 030e 	subs.w	r3, r8, lr
 8000dee:	eb64 040c 	sbc.w	r4, r4, ip
 8000df2:	fa04 f606 	lsl.w	r6, r4, r6
 8000df6:	40cb      	lsrs	r3, r1
 8000df8:	431e      	orrs	r6, r3
 8000dfa:	40cc      	lsrs	r4, r1
 8000dfc:	e9c5 6400 	strd	r6, r4, [r5]
 8000e00:	2100      	movs	r1, #0
 8000e02:	e750      	b.n	8000ca6 <__udivmoddi4+0xa6>
 8000e04:	f1c2 0320 	rsb	r3, r2, #32
 8000e08:	fa20 f103 	lsr.w	r1, r0, r3
 8000e0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e10:	fa24 f303 	lsr.w	r3, r4, r3
 8000e14:	4094      	lsls	r4, r2
 8000e16:	430c      	orrs	r4, r1
 8000e18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e1c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e28:	fb08 3110 	mls	r1, r8, r0, r3
 8000e2c:	0c23      	lsrs	r3, r4, #16
 8000e2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e32:	fb00 f107 	mul.w	r1, r0, r7
 8000e36:	4299      	cmp	r1, r3
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x24c>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e42:	d22c      	bcs.n	8000e9e <__udivmoddi4+0x29e>
 8000e44:	4299      	cmp	r1, r3
 8000e46:	d92a      	bls.n	8000e9e <__udivmoddi4+0x29e>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	1a5b      	subs	r3, r3, r1
 8000e4e:	b2a4      	uxth	r4, r4
 8000e50:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e54:	fb08 3311 	mls	r3, r8, r1, r3
 8000e58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e5c:	fb01 f307 	mul.w	r3, r1, r7
 8000e60:	42a3      	cmp	r3, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x276>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e6c:	d213      	bcs.n	8000e96 <__udivmoddi4+0x296>
 8000e6e:	42a3      	cmp	r3, r4
 8000e70:	d911      	bls.n	8000e96 <__udivmoddi4+0x296>
 8000e72:	3902      	subs	r1, #2
 8000e74:	4464      	add	r4, ip
 8000e76:	1ae4      	subs	r4, r4, r3
 8000e78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e7c:	e739      	b.n	8000cf2 <__udivmoddi4+0xf2>
 8000e7e:	4604      	mov	r4, r0
 8000e80:	e6f0      	b.n	8000c64 <__udivmoddi4+0x64>
 8000e82:	4608      	mov	r0, r1
 8000e84:	e706      	b.n	8000c94 <__udivmoddi4+0x94>
 8000e86:	45c8      	cmp	r8, r9
 8000e88:	d2ae      	bcs.n	8000de8 <__udivmoddi4+0x1e8>
 8000e8a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e8e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e92:	3801      	subs	r0, #1
 8000e94:	e7a8      	b.n	8000de8 <__udivmoddi4+0x1e8>
 8000e96:	4631      	mov	r1, r6
 8000e98:	e7ed      	b.n	8000e76 <__udivmoddi4+0x276>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	e799      	b.n	8000dd2 <__udivmoddi4+0x1d2>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e7d4      	b.n	8000e4c <__udivmoddi4+0x24c>
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1a6>
 8000ea6:	4463      	add	r3, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e74d      	b.n	8000d48 <__udivmoddi4+0x148>
 8000eac:	4606      	mov	r6, r0
 8000eae:	4623      	mov	r3, r4
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e70f      	b.n	8000cd4 <__udivmoddi4+0xd4>
 8000eb4:	3e02      	subs	r6, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	e730      	b.n	8000d1c <__udivmoddi4+0x11c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <Vacuum_Status>:
uint16_t countPlace = 0;
uint16_t state = 0;
uint8_t set_shelves_state = 0;
ModbusHandleTypedef hmodbus;

void Vacuum_Status(EFF* eff){
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
    //Vacuum On
    if (registerFrame[0x02].U16 == 1){
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f08 <Vacuum_Status+0x48>)
 8000eca:	889b      	ldrh	r3, [r3, #4]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d10b      	bne.n	8000ee8 <Vacuum_Status+0x28>
        strcpy(Vacuum, "On");
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f0c <Vacuum_Status+0x4c>)
 8000ed2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f10 <Vacuum_Status+0x50>)
 8000ed4:	6812      	ldr	r2, [r2, #0]
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	8019      	strh	r1, [r3, #0]
 8000eda:	3302      	adds	r3, #2
 8000edc:	0c12      	lsrs	r2, r2, #16
 8000ede:	701a      	strb	r2, [r3, #0]
        eff -> solenoid_command[0] = 1;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	709a      	strb	r2, [r3, #2]
    //Vacuum Off
    else if (registerFrame[0x02].U16 == 0){
        strcpy(Vacuum, "Off");
        eff -> solenoid_command[0] = 0;
    }
}
 8000ee6:	e009      	b.n	8000efc <Vacuum_Status+0x3c>
    else if (registerFrame[0x02].U16 == 0){
 8000ee8:	4b07      	ldr	r3, [pc, #28]	@ (8000f08 <Vacuum_Status+0x48>)
 8000eea:	889b      	ldrh	r3, [r3, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d105      	bne.n	8000efc <Vacuum_Status+0x3c>
        strcpy(Vacuum, "Off");
 8000ef0:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <Vacuum_Status+0x4c>)
 8000ef2:	4a08      	ldr	r2, [pc, #32]	@ (8000f14 <Vacuum_Status+0x54>)
 8000ef4:	601a      	str	r2, [r3, #0]
        eff -> solenoid_command[0] = 0;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	709a      	strb	r2, [r3, #2]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	20000eec 	.word	0x20000eec
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	0800e798 	.word	0x0800e798
 8000f14:	0066664f 	.word	0x0066664f

08000f18 <Gripper_Movement_Status>:

void Gripper_Movement_Status(EFF* eff){
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
    //Movement Forward (push)
    if (registerFrame[0x03].U16 == 1){
 8000f20:	4b2a      	ldr	r3, [pc, #168]	@ (8000fcc <Gripper_Movement_Status+0xb4>)
 8000f22:	88db      	ldrh	r3, [r3, #6]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d123      	bne.n	8000f70 <Gripper_Movement_Status+0x58>
        strcpy(Gripper, "Forward");
 8000f28:	4b29      	ldr	r3, [pc, #164]	@ (8000fd0 <Gripper_Movement_Status+0xb8>)
 8000f2a:	4a2a      	ldr	r2, [pc, #168]	@ (8000fd4 <Gripper_Movement_Status+0xbc>)
 8000f2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f30:	e883 0003 	stmia.w	r3, {r0, r1}
        // if pull reed switch is activate
        if(eff -> actual_status[0] == 1 && eff -> actual_status[1] == 0){
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d10a      	bne.n	8000f52 <Gripper_Movement_Status+0x3a>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	785b      	ldrb	r3, [r3, #1]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d106      	bne.n	8000f52 <Gripper_Movement_Status+0x3a>
			eff -> solenoid_command[1] = 1;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2201      	movs	r2, #1
 8000f48:	70da      	strb	r2, [r3, #3]
			eff -> solenoid_command[2] = 0;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	711a      	strb	r2, [r3, #4]
 8000f50:	e035      	b.n	8000fbe <Gripper_Movement_Status+0xa6>
        }
        // if push reed switch is activate
        else if(eff -> actual_status[0] == 0 && eff -> actual_status[1] == 1){
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d131      	bne.n	8000fbe <Gripper_Movement_Status+0xa6>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	785b      	ldrb	r3, [r3, #1]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d12d      	bne.n	8000fbe <Gripper_Movement_Status+0xa6>
        	eff -> solenoid_command[1] = 0;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	70da      	strb	r2, [r3, #3]
			eff -> solenoid_command[2] = 0;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	711a      	strb	r2, [r3, #4]
        else if(eff -> actual_status[0] == 0 && eff -> actual_status[1] == 1){
        	eff -> solenoid_command[1] = 0;
			eff -> solenoid_command[2] = 1;
        }
    }
}
 8000f6e:	e026      	b.n	8000fbe <Gripper_Movement_Status+0xa6>
    else if (registerFrame[0x03].U16 == 0){
 8000f70:	4b16      	ldr	r3, [pc, #88]	@ (8000fcc <Gripper_Movement_Status+0xb4>)
 8000f72:	88db      	ldrh	r3, [r3, #6]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d122      	bne.n	8000fbe <Gripper_Movement_Status+0xa6>
        strcpy(Gripper, "Backward");
 8000f78:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <Gripper_Movement_Status+0xb8>)
 8000f7a:	4a17      	ldr	r2, [pc, #92]	@ (8000fd8 <Gripper_Movement_Status+0xc0>)
 8000f7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f7e:	c303      	stmia	r3!, {r0, r1}
 8000f80:	701a      	strb	r2, [r3, #0]
        if(eff -> actual_status[0] == 1 && eff -> actual_status[1] == 0){
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d10a      	bne.n	8000fa0 <Gripper_Movement_Status+0x88>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	785b      	ldrb	r3, [r3, #1]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d106      	bne.n	8000fa0 <Gripper_Movement_Status+0x88>
			eff -> solenoid_command[1] = 0;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	70da      	strb	r2, [r3, #3]
			eff -> solenoid_command[2] = 0;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	711a      	strb	r2, [r3, #4]
 8000f9e:	e00e      	b.n	8000fbe <Gripper_Movement_Status+0xa6>
        else if(eff -> actual_status[0] == 0 && eff -> actual_status[1] == 1){
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d10a      	bne.n	8000fbe <Gripper_Movement_Status+0xa6>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	785b      	ldrb	r3, [r3, #1]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d106      	bne.n	8000fbe <Gripper_Movement_Status+0xa6>
        	eff -> solenoid_command[1] = 0;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	70da      	strb	r2, [r3, #3]
			eff -> solenoid_command[2] = 1;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	711a      	strb	r2, [r3, #4]
}
 8000fbc:	e7ff      	b.n	8000fbe <Gripper_Movement_Status+0xa6>
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000eec 	.word	0x20000eec
 8000fd0:	2000000c 	.word	0x2000000c
 8000fd4:	0800e79c 	.word	0x0800e79c
 8000fd8:	0800e7a4 	.word	0x0800e7a4

08000fdc <Set_Shelves>:

uint16_t Set_Shelves(){
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
    //Set shelve
    if (registerFrame[0x01].U16 == 1){
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8001018 <Set_Shelves+0x3c>)
 8000fe2:	885b      	ldrh	r3, [r3, #2]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d110      	bne.n	800100a <Set_Shelves+0x2e>
    	state = 1;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <Set_Shelves+0x40>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	801a      	strh	r2, [r3, #0]
        strcpy(Shelves, "SET");
 8000fee:	4b0c      	ldr	r3, [pc, #48]	@ (8001020 <Set_Shelves+0x44>)
 8000ff0:	4a0c      	ldr	r2, [pc, #48]	@ (8001024 <Set_Shelves+0x48>)
 8000ff2:	601a      	str	r2, [r3, #0]
        registerFrame[0x01].U16 = 0;
 8000ff4:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <Set_Shelves+0x3c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	805a      	strh	r2, [r3, #2]
        registerFrame[0x10].U16 = 1;
 8000ffa:	4b07      	ldr	r3, [pc, #28]	@ (8001018 <Set_Shelves+0x3c>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	841a      	strh	r2, [r3, #32]
        set_shelves_state = 1;
 8001000:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <Set_Shelves+0x4c>)
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
        return 1;
 8001006:	2301      	movs	r3, #1
 8001008:	e000      	b.n	800100c <Set_Shelves+0x30>
    }
    else{return 0;}
 800100a:	2300      	movs	r3, #0
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000eec 	.word	0x20000eec
 800101c:	2000032e 	.word	0x2000032e
 8001020:	20000020 	.word	0x20000020
 8001024:	00544553 	.word	0x00544553
 8001028:	20000330 	.word	0x20000330

0800102c <Set_Goal_Point>:

// wait for Data type check
uint16_t Set_Goal_Point(){
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
	return registerFrame[0x30].U16;
 8001030:	4b03      	ldr	r3, [pc, #12]	@ (8001040 <Set_Goal_Point+0x14>)
 8001032:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
}
 8001036:	4618      	mov	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	20000eec 	.word	0x20000eec

08001044 <Run_Point_Mode>:

uint16_t Run_Point_Mode(){
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
	if (registerFrame[0x01].U16 == 8){
 8001048:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <Run_Point_Mode+0x30>)
 800104a:	885b      	ldrh	r3, [r3, #2]
 800104c:	2b08      	cmp	r3, #8
 800104e:	d10b      	bne.n	8001068 <Run_Point_Mode+0x24>
		registerFrame[0x01].U16 = 0;
 8001050:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <Run_Point_Mode+0x30>)
 8001052:	2200      	movs	r2, #0
 8001054:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 16;
 8001056:	4b07      	ldr	r3, [pc, #28]	@ (8001074 <Run_Point_Mode+0x30>)
 8001058:	2210      	movs	r2, #16
 800105a:	841a      	strh	r2, [r3, #32]
		state = registerFrame[0x10].U16;
 800105c:	4b05      	ldr	r3, [pc, #20]	@ (8001074 <Run_Point_Mode+0x30>)
 800105e:	8c1a      	ldrh	r2, [r3, #32]
 8001060:	4b05      	ldr	r3, [pc, #20]	@ (8001078 <Run_Point_Mode+0x34>)
 8001062:	801a      	strh	r2, [r3, #0]
		return 1;
 8001064:	2301      	movs	r3, #1
 8001066:	e000      	b.n	800106a <Run_Point_Mode+0x26>
	}else{return 0;}
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	20000eec 	.word	0x20000eec
 8001078:	2000032e 	.word	0x2000032e

0800107c <Set_Home>:

void Set_Home(){
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
	if(registerFrame[0x10].U16 == 2){
 8001080:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <Set_Home+0x28>)
 8001082:	8c1b      	ldrh	r3, [r3, #32]
 8001084:	2b02      	cmp	r3, #2
 8001086:	d108      	bne.n	800109a <Set_Home+0x1e>
		state = 2;
 8001088:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <Set_Home+0x2c>)
 800108a:	2202      	movs	r2, #2
 800108c:	801a      	strh	r2, [r3, #0]
		strcpy(Home, "Homing...");
 800108e:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <Set_Home+0x30>)
 8001090:	4a07      	ldr	r2, [pc, #28]	@ (80010b0 <Set_Home+0x34>)
 8001092:	ca07      	ldmia	r2, {r0, r1, r2}
 8001094:	c303      	stmia	r3!, {r0, r1}
 8001096:	801a      	strh	r2, [r3, #0]
 8001098:	e000      	b.n	800109c <Set_Home+0x20>
	}
	else{
		return;
 800109a:	bf00      	nop
//	if (Jogginghome == 1){
//		registerFrame[0x01].U16 = 0;
//	}


}
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	20000eec 	.word	0x20000eec
 80010a8:	2000032e 	.word	0x2000032e
 80010ac:	20000054 	.word	0x20000054
 80010b0:	0800e7b0 	.word	0x0800e7b0

080010b4 <SetPick_PlaceOrder>:
void SetPick_PlaceOrder() {
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
    if (registerFrame[0x21].U16 != 00000 && registerFrame[0x22].U16 != 00000 ) {
 80010b8:	4bab      	ldr	r3, [pc, #684]	@ (8001368 <SetPick_PlaceOrder+0x2b4>)
 80010ba:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f000 8176 	beq.w	80013b0 <SetPick_PlaceOrder+0x2fc>
 80010c4:	4ba8      	ldr	r3, [pc, #672]	@ (8001368 <SetPick_PlaceOrder+0x2b4>)
 80010c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f000 8170 	beq.w	80013b0 <SetPick_PlaceOrder+0x2fc>
    	strcpy(Order, "Pick");
 80010d0:	4ba6      	ldr	r3, [pc, #664]	@ (800136c <SetPick_PlaceOrder+0x2b8>)
 80010d2:	4aa7      	ldr	r2, [pc, #668]	@ (8001370 <SetPick_PlaceOrder+0x2bc>)
 80010d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010d8:	6018      	str	r0, [r3, #0]
 80010da:	3304      	adds	r3, #4
 80010dc:	7019      	strb	r1, [r3, #0]
    	Pick[0] = registerFrame[0x21].U16/10000;
 80010de:	4ba2      	ldr	r3, [pc, #648]	@ (8001368 <SetPick_PlaceOrder+0x2b4>)
 80010e0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80010e4:	4aa3      	ldr	r2, [pc, #652]	@ (8001374 <SetPick_PlaceOrder+0x2c0>)
 80010e6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ea:	0b5b      	lsrs	r3, r3, #13
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	4ba2      	ldr	r3, [pc, #648]	@ (8001378 <SetPick_PlaceOrder+0x2c4>)
 80010f0:	801a      	strh	r2, [r3, #0]
    	countPick += Pick[0]*10000;
 80010f2:	4ba1      	ldr	r3, [pc, #644]	@ (8001378 <SetPick_PlaceOrder+0x2c4>)
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	0152      	lsls	r2, r2, #5
 80010fa:	1ad2      	subs	r2, r2, r3
 80010fc:	0092      	lsls	r2, r2, #2
 80010fe:	4413      	add	r3, r2
 8001100:	461a      	mov	r2, r3
 8001102:	0091      	lsls	r1, r2, #2
 8001104:	461a      	mov	r2, r3
 8001106:	460b      	mov	r3, r1
 8001108:	4413      	add	r3, r2
 800110a:	011b      	lsls	r3, r3, #4
 800110c:	b29a      	uxth	r2, r3
 800110e:	4b9b      	ldr	r3, [pc, #620]	@ (800137c <SetPick_PlaceOrder+0x2c8>)
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	4413      	add	r3, r2
 8001114:	b29a      	uxth	r2, r3
 8001116:	4b99      	ldr	r3, [pc, #612]	@ (800137c <SetPick_PlaceOrder+0x2c8>)
 8001118:	801a      	strh	r2, [r3, #0]
    	strcpy(Order, "Place");
 800111a:	4b94      	ldr	r3, [pc, #592]	@ (800136c <SetPick_PlaceOrder+0x2b8>)
 800111c:	4a98      	ldr	r2, [pc, #608]	@ (8001380 <SetPick_PlaceOrder+0x2cc>)
 800111e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001122:	6018      	str	r0, [r3, #0]
 8001124:	3304      	adds	r3, #4
 8001126:	8019      	strh	r1, [r3, #0]
    	Place[0] = registerFrame[0x22].U16/10000;
 8001128:	4b8f      	ldr	r3, [pc, #572]	@ (8001368 <SetPick_PlaceOrder+0x2b4>)
 800112a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800112e:	4a91      	ldr	r2, [pc, #580]	@ (8001374 <SetPick_PlaceOrder+0x2c0>)
 8001130:	fba2 2303 	umull	r2, r3, r2, r3
 8001134:	0b5b      	lsrs	r3, r3, #13
 8001136:	b29a      	uxth	r2, r3
 8001138:	4b92      	ldr	r3, [pc, #584]	@ (8001384 <SetPick_PlaceOrder+0x2d0>)
 800113a:	801a      	strh	r2, [r3, #0]
    	countPlace +=Place[0]*10000;
 800113c:	4b91      	ldr	r3, [pc, #580]	@ (8001384 <SetPick_PlaceOrder+0x2d0>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	0152      	lsls	r2, r2, #5
 8001144:	1ad2      	subs	r2, r2, r3
 8001146:	0092      	lsls	r2, r2, #2
 8001148:	4413      	add	r3, r2
 800114a:	461a      	mov	r2, r3
 800114c:	0091      	lsls	r1, r2, #2
 800114e:	461a      	mov	r2, r3
 8001150:	460b      	mov	r3, r1
 8001152:	4413      	add	r3, r2
 8001154:	011b      	lsls	r3, r3, #4
 8001156:	b29a      	uxth	r2, r3
 8001158:	4b8b      	ldr	r3, [pc, #556]	@ (8001388 <SetPick_PlaceOrder+0x2d4>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	4413      	add	r3, r2
 800115e:	b29a      	uxth	r2, r3
 8001160:	4b89      	ldr	r3, [pc, #548]	@ (8001388 <SetPick_PlaceOrder+0x2d4>)
 8001162:	801a      	strh	r2, [r3, #0]


    	strcpy(Order, "Pick");
 8001164:	4b81      	ldr	r3, [pc, #516]	@ (800136c <SetPick_PlaceOrder+0x2b8>)
 8001166:	4a82      	ldr	r2, [pc, #520]	@ (8001370 <SetPick_PlaceOrder+0x2bc>)
 8001168:	e892 0003 	ldmia.w	r2, {r0, r1}
 800116c:	6018      	str	r0, [r3, #0]
 800116e:	3304      	adds	r3, #4
 8001170:	7019      	strb	r1, [r3, #0]
    	Pick[1] = (registerFrame[0x21].U16- countPick)/1000;
 8001172:	4b7d      	ldr	r3, [pc, #500]	@ (8001368 <SetPick_PlaceOrder+0x2b4>)
 8001174:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001178:	461a      	mov	r2, r3
 800117a:	4b80      	ldr	r3, [pc, #512]	@ (800137c <SetPick_PlaceOrder+0x2c8>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	4a82      	ldr	r2, [pc, #520]	@ (800138c <SetPick_PlaceOrder+0x2d8>)
 8001182:	fb82 1203 	smull	r1, r2, r2, r3
 8001186:	1192      	asrs	r2, r2, #6
 8001188:	17db      	asrs	r3, r3, #31
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	b29a      	uxth	r2, r3
 800118e:	4b7a      	ldr	r3, [pc, #488]	@ (8001378 <SetPick_PlaceOrder+0x2c4>)
 8001190:	805a      	strh	r2, [r3, #2]
    	countPick += Pick[1]*1000;
 8001192:	4b79      	ldr	r3, [pc, #484]	@ (8001378 <SetPick_PlaceOrder+0x2c4>)
 8001194:	885b      	ldrh	r3, [r3, #2]
 8001196:	461a      	mov	r2, r3
 8001198:	0152      	lsls	r2, r2, #5
 800119a:	1ad2      	subs	r2, r2, r3
 800119c:	0092      	lsls	r2, r2, #2
 800119e:	4413      	add	r3, r2
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	4b75      	ldr	r3, [pc, #468]	@ (800137c <SetPick_PlaceOrder+0x2c8>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	4413      	add	r3, r2
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	4b73      	ldr	r3, [pc, #460]	@ (800137c <SetPick_PlaceOrder+0x2c8>)
 80011ae:	801a      	strh	r2, [r3, #0]
    	strcpy(Order, "Place");
 80011b0:	4b6e      	ldr	r3, [pc, #440]	@ (800136c <SetPick_PlaceOrder+0x2b8>)
 80011b2:	4a73      	ldr	r2, [pc, #460]	@ (8001380 <SetPick_PlaceOrder+0x2cc>)
 80011b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011b8:	6018      	str	r0, [r3, #0]
 80011ba:	3304      	adds	r3, #4
 80011bc:	8019      	strh	r1, [r3, #0]
    	Place[1] = (registerFrame[0x22].U16- countPlace)/1000;
 80011be:	4b6a      	ldr	r3, [pc, #424]	@ (8001368 <SetPick_PlaceOrder+0x2b4>)
 80011c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b70      	ldr	r3, [pc, #448]	@ (8001388 <SetPick_PlaceOrder+0x2d4>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	4a6f      	ldr	r2, [pc, #444]	@ (800138c <SetPick_PlaceOrder+0x2d8>)
 80011ce:	fb82 1203 	smull	r1, r2, r2, r3
 80011d2:	1192      	asrs	r2, r2, #6
 80011d4:	17db      	asrs	r3, r3, #31
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	b29a      	uxth	r2, r3
 80011da:	4b6a      	ldr	r3, [pc, #424]	@ (8001384 <SetPick_PlaceOrder+0x2d0>)
 80011dc:	805a      	strh	r2, [r3, #2]
    	countPlace +=Place[1]*1000;
 80011de:	4b69      	ldr	r3, [pc, #420]	@ (8001384 <SetPick_PlaceOrder+0x2d0>)
 80011e0:	885b      	ldrh	r3, [r3, #2]
 80011e2:	461a      	mov	r2, r3
 80011e4:	0152      	lsls	r2, r2, #5
 80011e6:	1ad2      	subs	r2, r2, r3
 80011e8:	0092      	lsls	r2, r2, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	4b65      	ldr	r3, [pc, #404]	@ (8001388 <SetPick_PlaceOrder+0x2d4>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	4413      	add	r3, r2
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	4b63      	ldr	r3, [pc, #396]	@ (8001388 <SetPick_PlaceOrder+0x2d4>)
 80011fa:	801a      	strh	r2, [r3, #0]


    	strcpy(Order, "Pick");
 80011fc:	4b5b      	ldr	r3, [pc, #364]	@ (800136c <SetPick_PlaceOrder+0x2b8>)
 80011fe:	4a5c      	ldr	r2, [pc, #368]	@ (8001370 <SetPick_PlaceOrder+0x2bc>)
 8001200:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001204:	6018      	str	r0, [r3, #0]
 8001206:	3304      	adds	r3, #4
 8001208:	7019      	strb	r1, [r3, #0]
		Pick[2] = (registerFrame[0x21].U16 - countPick) / 100;
 800120a:	4b57      	ldr	r3, [pc, #348]	@ (8001368 <SetPick_PlaceOrder+0x2b4>)
 800120c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001210:	461a      	mov	r2, r3
 8001212:	4b5a      	ldr	r3, [pc, #360]	@ (800137c <SetPick_PlaceOrder+0x2c8>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	4a5d      	ldr	r2, [pc, #372]	@ (8001390 <SetPick_PlaceOrder+0x2dc>)
 800121a:	fb82 1203 	smull	r1, r2, r2, r3
 800121e:	1152      	asrs	r2, r2, #5
 8001220:	17db      	asrs	r3, r3, #31
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	b29a      	uxth	r2, r3
 8001226:	4b54      	ldr	r3, [pc, #336]	@ (8001378 <SetPick_PlaceOrder+0x2c4>)
 8001228:	809a      	strh	r2, [r3, #4]
		countPick += Pick[2] * 100;
 800122a:	4b53      	ldr	r3, [pc, #332]	@ (8001378 <SetPick_PlaceOrder+0x2c4>)
 800122c:	889b      	ldrh	r3, [r3, #4]
 800122e:	461a      	mov	r2, r3
 8001230:	0092      	lsls	r2, r2, #2
 8001232:	4413      	add	r3, r2
 8001234:	461a      	mov	r2, r3
 8001236:	0091      	lsls	r1, r2, #2
 8001238:	461a      	mov	r2, r3
 800123a:	460b      	mov	r3, r1
 800123c:	4413      	add	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	b29a      	uxth	r2, r3
 8001242:	4b4e      	ldr	r3, [pc, #312]	@ (800137c <SetPick_PlaceOrder+0x2c8>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	4413      	add	r3, r2
 8001248:	b29a      	uxth	r2, r3
 800124a:	4b4c      	ldr	r3, [pc, #304]	@ (800137c <SetPick_PlaceOrder+0x2c8>)
 800124c:	801a      	strh	r2, [r3, #0]
		strcpy(Order, "Place");
 800124e:	4b47      	ldr	r3, [pc, #284]	@ (800136c <SetPick_PlaceOrder+0x2b8>)
 8001250:	4a4b      	ldr	r2, [pc, #300]	@ (8001380 <SetPick_PlaceOrder+0x2cc>)
 8001252:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001256:	6018      	str	r0, [r3, #0]
 8001258:	3304      	adds	r3, #4
 800125a:	8019      	strh	r1, [r3, #0]
		Place[2] = (registerFrame[0x22].U16 - countPlace) / 100;
 800125c:	4b42      	ldr	r3, [pc, #264]	@ (8001368 <SetPick_PlaceOrder+0x2b4>)
 800125e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001262:	461a      	mov	r2, r3
 8001264:	4b48      	ldr	r3, [pc, #288]	@ (8001388 <SetPick_PlaceOrder+0x2d4>)
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	4a49      	ldr	r2, [pc, #292]	@ (8001390 <SetPick_PlaceOrder+0x2dc>)
 800126c:	fb82 1203 	smull	r1, r2, r2, r3
 8001270:	1152      	asrs	r2, r2, #5
 8001272:	17db      	asrs	r3, r3, #31
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	b29a      	uxth	r2, r3
 8001278:	4b42      	ldr	r3, [pc, #264]	@ (8001384 <SetPick_PlaceOrder+0x2d0>)
 800127a:	809a      	strh	r2, [r3, #4]
		countPlace += Place[2] * 100;
 800127c:	4b41      	ldr	r3, [pc, #260]	@ (8001384 <SetPick_PlaceOrder+0x2d0>)
 800127e:	889b      	ldrh	r3, [r3, #4]
 8001280:	461a      	mov	r2, r3
 8001282:	0092      	lsls	r2, r2, #2
 8001284:	4413      	add	r3, r2
 8001286:	461a      	mov	r2, r3
 8001288:	0091      	lsls	r1, r2, #2
 800128a:	461a      	mov	r2, r3
 800128c:	460b      	mov	r3, r1
 800128e:	4413      	add	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	b29a      	uxth	r2, r3
 8001294:	4b3c      	ldr	r3, [pc, #240]	@ (8001388 <SetPick_PlaceOrder+0x2d4>)
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	4413      	add	r3, r2
 800129a:	b29a      	uxth	r2, r3
 800129c:	4b3a      	ldr	r3, [pc, #232]	@ (8001388 <SetPick_PlaceOrder+0x2d4>)
 800129e:	801a      	strh	r2, [r3, #0]


		strcpy(Order, "Pick");
 80012a0:	4b32      	ldr	r3, [pc, #200]	@ (800136c <SetPick_PlaceOrder+0x2b8>)
 80012a2:	4a33      	ldr	r2, [pc, #204]	@ (8001370 <SetPick_PlaceOrder+0x2bc>)
 80012a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012a8:	6018      	str	r0, [r3, #0]
 80012aa:	3304      	adds	r3, #4
 80012ac:	7019      	strb	r1, [r3, #0]
		Pick[3] = (registerFrame[0x21].U16 - countPick) / 10;
 80012ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001368 <SetPick_PlaceOrder+0x2b4>)
 80012b0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b31      	ldr	r3, [pc, #196]	@ (800137c <SetPick_PlaceOrder+0x2c8>)
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	4a35      	ldr	r2, [pc, #212]	@ (8001394 <SetPick_PlaceOrder+0x2e0>)
 80012be:	fb82 1203 	smull	r1, r2, r2, r3
 80012c2:	1092      	asrs	r2, r2, #2
 80012c4:	17db      	asrs	r3, r3, #31
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001378 <SetPick_PlaceOrder+0x2c4>)
 80012cc:	80da      	strh	r2, [r3, #6]
		countPick += Pick[3] * 10;
 80012ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001378 <SetPick_PlaceOrder+0x2c4>)
 80012d0:	88db      	ldrh	r3, [r3, #6]
 80012d2:	461a      	mov	r2, r3
 80012d4:	0092      	lsls	r2, r2, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	b29a      	uxth	r2, r3
 80012dc:	4b27      	ldr	r3, [pc, #156]	@ (800137c <SetPick_PlaceOrder+0x2c8>)
 80012de:	881b      	ldrh	r3, [r3, #0]
 80012e0:	4413      	add	r3, r2
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	4b25      	ldr	r3, [pc, #148]	@ (800137c <SetPick_PlaceOrder+0x2c8>)
 80012e6:	801a      	strh	r2, [r3, #0]
		strcpy(Order, "Place");
 80012e8:	4b20      	ldr	r3, [pc, #128]	@ (800136c <SetPick_PlaceOrder+0x2b8>)
 80012ea:	4a25      	ldr	r2, [pc, #148]	@ (8001380 <SetPick_PlaceOrder+0x2cc>)
 80012ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012f0:	6018      	str	r0, [r3, #0]
 80012f2:	3304      	adds	r3, #4
 80012f4:	8019      	strh	r1, [r3, #0]
		Place[3] = (registerFrame[0x22].U16 - countPlace) / 10;
 80012f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001368 <SetPick_PlaceOrder+0x2b4>)
 80012f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <SetPick_PlaceOrder+0x2d4>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	4a23      	ldr	r2, [pc, #140]	@ (8001394 <SetPick_PlaceOrder+0x2e0>)
 8001306:	fb82 1203 	smull	r1, r2, r2, r3
 800130a:	1092      	asrs	r2, r2, #2
 800130c:	17db      	asrs	r3, r3, #31
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	b29a      	uxth	r2, r3
 8001312:	4b1c      	ldr	r3, [pc, #112]	@ (8001384 <SetPick_PlaceOrder+0x2d0>)
 8001314:	80da      	strh	r2, [r3, #6]
		countPlace += Place[3] * 10;
 8001316:	4b1b      	ldr	r3, [pc, #108]	@ (8001384 <SetPick_PlaceOrder+0x2d0>)
 8001318:	88db      	ldrh	r3, [r3, #6]
 800131a:	461a      	mov	r2, r3
 800131c:	0092      	lsls	r2, r2, #2
 800131e:	4413      	add	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	b29a      	uxth	r2, r3
 8001324:	4b18      	ldr	r3, [pc, #96]	@ (8001388 <SetPick_PlaceOrder+0x2d4>)
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	4413      	add	r3, r2
 800132a:	b29a      	uxth	r2, r3
 800132c:	4b16      	ldr	r3, [pc, #88]	@ (8001388 <SetPick_PlaceOrder+0x2d4>)
 800132e:	801a      	strh	r2, [r3, #0]


		strcpy(Order, "Pick");
 8001330:	4b0e      	ldr	r3, [pc, #56]	@ (800136c <SetPick_PlaceOrder+0x2b8>)
 8001332:	4a0f      	ldr	r2, [pc, #60]	@ (8001370 <SetPick_PlaceOrder+0x2bc>)
 8001334:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001338:	6018      	str	r0, [r3, #0]
 800133a:	3304      	adds	r3, #4
 800133c:	7019      	strb	r1, [r3, #0]
		Pick[4] = (registerFrame[0x21].U16 - countPick);
 800133e:	4b0a      	ldr	r3, [pc, #40]	@ (8001368 <SetPick_PlaceOrder+0x2b4>)
 8001340:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8001344:	4b0d      	ldr	r3, [pc, #52]	@ (800137c <SetPick_PlaceOrder+0x2c8>)
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	b29a      	uxth	r2, r3
 800134c:	4b0a      	ldr	r3, [pc, #40]	@ (8001378 <SetPick_PlaceOrder+0x2c4>)
 800134e:	811a      	strh	r2, [r3, #8]
		countPick = 0;
 8001350:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <SetPick_PlaceOrder+0x2c8>)
 8001352:	2200      	movs	r2, #0
 8001354:	801a      	strh	r2, [r3, #0]
		strcpy(Order, "Place");
 8001356:	4b05      	ldr	r3, [pc, #20]	@ (800136c <SetPick_PlaceOrder+0x2b8>)
 8001358:	4a09      	ldr	r2, [pc, #36]	@ (8001380 <SetPick_PlaceOrder+0x2cc>)
 800135a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800135e:	6018      	str	r0, [r3, #0]
 8001360:	3304      	adds	r3, #4
 8001362:	8019      	strh	r1, [r3, #0]
 8001364:	e018      	b.n	8001398 <SetPick_PlaceOrder+0x2e4>
 8001366:	bf00      	nop
 8001368:	20000eec 	.word	0x20000eec
 800136c:	20000034 	.word	0x20000034
 8001370:	0800e7bc 	.word	0x0800e7bc
 8001374:	d1b71759 	.word	0xd1b71759
 8001378:	20000314 	.word	0x20000314
 800137c:	2000032a 	.word	0x2000032a
 8001380:	0800e7c4 	.word	0x0800e7c4
 8001384:	20000320 	.word	0x20000320
 8001388:	2000032c 	.word	0x2000032c
 800138c:	10624dd3 	.word	0x10624dd3
 8001390:	51eb851f 	.word	0x51eb851f
 8001394:	66666667 	.word	0x66666667
		Place[4] = (registerFrame[0x22].U16 - countPlace);
 8001398:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <SetPick_PlaceOrder+0x308>)
 800139a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800139e:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <SetPick_PlaceOrder+0x30c>)
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	4b07      	ldr	r3, [pc, #28]	@ (80013c4 <SetPick_PlaceOrder+0x310>)
 80013a8:	811a      	strh	r2, [r3, #8]
		countPlace = 0;
 80013aa:	4b05      	ldr	r3, [pc, #20]	@ (80013c0 <SetPick_PlaceOrder+0x30c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	801a      	strh	r2, [r3, #0]

    }
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20000eec 	.word	0x20000eec
 80013c0:	2000032c 	.word	0x2000032c
 80013c4:	20000320 	.word	0x20000320

080013c8 <Run_Jog_Mode>:



uint16_t Run_Jog_Mode() {
 80013c8:	b490      	push	{r4, r7}
 80013ca:	af00      	add	r7, sp, #0
	if (registerFrame[0x01].U16 == 1) {
 80013cc:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <Run_Jog_Mode+0x2c>)
 80013ce:	885b      	ldrh	r3, [r3, #2]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d10a      	bne.n	80013ea <Run_Jog_Mode+0x22>
		strcpy(Jogmode, "Run Jog Mode");
 80013d4:	4a08      	ldr	r2, [pc, #32]	@ (80013f8 <Run_Jog_Mode+0x30>)
 80013d6:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <Run_Jog_Mode+0x34>)
 80013d8:	4614      	mov	r4, r2
 80013da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013dc:	c407      	stmia	r4!, {r0, r1, r2}
 80013de:	7023      	strb	r3, [r4, #0]
		registerFrame[0x01].U16 = 0;
 80013e0:	4b04      	ldr	r3, [pc, #16]	@ (80013f4 <Run_Jog_Mode+0x2c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	805a      	strh	r2, [r3, #2]
		return 1;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <Run_Jog_Mode+0x24>
//			strcpy(Jogmode, "Go to Place...");
//			registerFrame[0x10].U16 = 8;
//			SetPick_PlaceOrder(); //แก้ให้เข้ากับซัน
//		}
	}
	else{return 0;}
 80013ea:	2300      	movs	r3, #0
//	registerFrame[0x10].U16 = 0;
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc90      	pop	{r4, r7}
 80013f2:	4770      	bx	lr
 80013f4:	20000eec 	.word	0x20000eec
 80013f8:	20000040 	.word	0x20000040
 80013fc:	0800e7cc 	.word	0x0800e7cc

08001400 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001404:	4b0d      	ldr	r3, [pc, #52]	@ (800143c <modbus_1t5_Timeout+0x3c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2201      	movs	r2, #1
 800140a:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 800140c:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <modbus_1t5_Timeout+0x3c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2200      	movs	r2, #0
 8001416:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001418:	4b08      	ldr	r3, [pc, #32]	@ (800143c <modbus_1t5_Timeout+0x3c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b06      	ldr	r3, [pc, #24]	@ (800143c <modbus_1t5_Timeout+0x3c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f042 0201 	orr.w	r2, r2, #1
 800142e:	601a      	str	r2, [r3, #0]
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	2000080c 	.word	0x2000080c

08001440 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001448:	4b04      	ldr	r3, [pc, #16]	@ (800145c <modbus_3t5_Timeout+0x1c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2201      	movs	r2, #1
 800144e:	755a      	strb	r2, [r3, #21]

}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	2000080c 	.word	0x2000080c

08001460 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f00b f87f 	bl	800c56c <HAL_UART_GetError>
 800146e:	4603      	mov	r3, r0
 8001470:	2b20      	cmp	r3, #32
 8001472:	d101      	bne.n	8001478 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001474:	f7ff ffc4 	bl	8001400 <modbus_1t5_Timeout>

	}
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800148a:	4a25      	ldr	r2, [pc, #148]	@ (8001520 <Modbus_init+0xa0>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001490:	4b23      	ldr	r3, [pc, #140]	@ (8001520 <Modbus_init+0xa0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	4a21      	ldr	r2, [pc, #132]	@ (8001524 <Modbus_init+0xa4>)
 800149e:	210e      	movs	r1, #14
 80014a0:	4618      	mov	r0, r3
 80014a2:	f009 faa7 	bl	800a9f4 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	2110      	movs	r1, #16
 80014ac:	4618      	mov	r0, r3
 80014ae:	f00b f807 	bl	800c4c0 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f00b f81e 	bl	800c4f8 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	4a19      	ldr	r2, [pc, #100]	@ (8001528 <Modbus_init+0xa8>)
 80014c2:	2104      	movs	r1, #4
 80014c4:	4618      	mov	r0, r3
 80014c6:	f00a fae5 	bl	800ba94 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80014ca:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <Modbus_init+0xa0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80014d0:	4b13      	ldr	r3, [pc, #76]	@ (8001520 <Modbus_init+0xa0>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b12      	ldr	r3, [pc, #72]	@ (8001520 <Modbus_init+0xa0>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80014dc:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80014e0:	4413      	add	r3, r2
 80014e2:	3302      	adds	r3, #2
 80014e4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80014e8:	4619      	mov	r1, r3
 80014ea:	f00a fc0d 	bl	800bd08 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80014ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001520 <Modbus_init+0xa0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d10c      	bne.n	8001518 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80014fe:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <Modbus_init+0xa0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	4618      	mov	r0, r3
 8001506:	f008 fa47 	bl	8009998 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800150a:	4b05      	ldr	r3, [pc, #20]	@ (8001520 <Modbus_init+0xa0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f008 fca0 	bl	8009e58 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	2000080c 	.word	0x2000080c
 8001524:	08001441 	.word	0x08001441
 8001528:	08001461 	.word	0x08001461

0800152c <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001538:	23ff      	movs	r3, #255	@ 0xff
 800153a:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 800153c:	23ff      	movs	r3, #255	@ 0xff
 800153e:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001540:	e013      	b.n	800156a <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	1c5a      	adds	r2, r3, #1
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	781a      	ldrb	r2, [r3, #0]
 800154a:	7bbb      	ldrb	r3, [r7, #14]
 800154c:	4053      	eors	r3, r2
 800154e:	b2db      	uxtb	r3, r3
 8001550:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001552:	4a0f      	ldr	r2, [pc, #60]	@ (8001590 <CRC16+0x64>)
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	4413      	add	r3, r2
 8001558:	781a      	ldrb	r2, [r3, #0]
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	4053      	eors	r3, r2
 800155e:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001560:	4a0c      	ldr	r2, [pc, #48]	@ (8001594 <CRC16+0x68>)
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	4413      	add	r3, r2
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800156a:	883b      	ldrh	r3, [r7, #0]
 800156c:	1e5a      	subs	r2, r3, #1
 800156e:	803a      	strh	r2, [r7, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1e6      	bne.n	8001542 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b21a      	sxth	r2, r3
 800157a:	7bbb      	ldrb	r3, [r7, #14]
 800157c:	b21b      	sxth	r3, r3
 800157e:	4313      	orrs	r3, r2
 8001580:	b21b      	sxth	r3, r3
 8001582:	b29b      	uxth	r3, r3
}
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	20000168 	.word	0x20000168
 8001594:	20000068 	.word	0x20000068

08001598 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800159e:	4b7e      	ldr	r3, [pc, #504]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	7ddb      	ldrb	r3, [r3, #23]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d80a      	bhi.n	80015c0 <Modbus_Protocal_Worker+0x28>
 80015aa:	a201      	add	r2, pc, #4	@ (adr r2, 80015b0 <Modbus_Protocal_Worker+0x18>)
 80015ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b0:	080015cb 	.word	0x080015cb
 80015b4:	0800175f 	.word	0x0800175f
 80015b8:	08001657 	.word	0x08001657
 80015bc:	0800169b 	.word	0x0800169b
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80015c0:	4b75      	ldr	r3, [pc, #468]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2201      	movs	r2, #1
 80015c6:	75da      	strb	r2, [r3, #23]
		break;
 80015c8:	e0e1      	b.n	800178e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80015ca:	4b73      	ldr	r3, [pc, #460]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d006      	beq.n	80015e4 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80015d6:	4b70      	ldr	r3, [pc, #448]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2202      	movs	r2, #2
 80015dc:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80015de:	f000 f9cd 	bl	800197c <Modbus_Emission>
 80015e2:	e018      	b.n	8001616 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80015e4:	4b6c      	ldr	r3, [pc, #432]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80015ee:	4b6a      	ldr	r3, [pc, #424]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d00b      	beq.n	8001616 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80015fe:	4b66      	ldr	r3, [pc, #408]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2200      	movs	r2, #0
 8001604:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001606:	4b64      	ldr	r3, [pc, #400]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2200      	movs	r2, #0
 800160c:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800160e:	4b62      	ldr	r3, [pc, #392]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2203      	movs	r2, #3
 8001614:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001616:	4b60      	ldr	r3, [pc, #384]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001620:	2b20      	cmp	r3, #32
 8001622:	f040 80ad 	bne.w	8001780 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001626:	4b5c      	ldr	r3, [pc, #368]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2200      	movs	r2, #0
 800162c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001630:	4b59      	ldr	r3, [pc, #356]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001636:	4b58      	ldr	r3, [pc, #352]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	4b57      	ldr	r3, [pc, #348]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001642:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001646:	4413      	add	r3, r2
 8001648:	3302      	adds	r3, #2
 800164a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800164e:	4619      	mov	r1, r3
 8001650:	f00a fb5a 	bl	800bd08 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001654:	e094      	b.n	8001780 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001656:	4b50      	ldr	r3, [pc, #320]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	7d1b      	ldrb	r3, [r3, #20]
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 8091 	beq.w	8001784 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001662:	4b4d      	ldr	r3, [pc, #308]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	22fe      	movs	r2, #254	@ 0xfe
 8001668:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800166a:	4b4b      	ldr	r3, [pc, #300]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001674:	4b48      	ldr	r3, [pc, #288]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001684:	4b44      	ldr	r3, [pc, #272]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 8001686:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001688:	1a8a      	subs	r2, r1, r2
 800168a:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 800168c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001690:	4b41      	ldr	r3, [pc, #260]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2204      	movs	r2, #4
 8001696:	75da      	strb	r2, [r3, #23]
		}
		break;
 8001698:	e074      	b.n	8001784 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800169a:	4b3f      	ldr	r3, [pc, #252]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80016a2:	f113 0f02 	cmn.w	r3, #2
 80016a6:	d150      	bne.n	800174a <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80016a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2200      	movs	r2, #0
 80016ae:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80016b0:	4b39      	ldr	r3, [pc, #228]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80016b8:	4b37      	ldr	r3, [pc, #220]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80016c0:	3b02      	subs	r3, #2
 80016c2:	4619      	mov	r1, r3
 80016c4:	4610      	mov	r0, r2
 80016c6:	f7ff ff31 	bl	800152c <CRC16>
 80016ca:	4603      	mov	r3, r0
 80016cc:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80016ce:	793a      	ldrb	r2, [r7, #4]
 80016d0:	4b31      	ldr	r3, [pc, #196]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 80016d2:	6819      	ldr	r1, [r3, #0]
 80016d4:	4b30      	ldr	r3, [pc, #192]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80016dc:	3b02      	subs	r3, #2
 80016de:	440b      	add	r3, r1
 80016e0:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d10c      	bne.n	8001702 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80016e8:	797a      	ldrb	r2, [r7, #5]
 80016ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 80016ec:	6819      	ldr	r1, [r3, #0]
 80016ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80016f6:	3b01      	subs	r3, #1
 80016f8:	440b      	add	r3, r1
 80016fa:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d004      	beq.n	800170c <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001702:	4b25      	ldr	r3, [pc, #148]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	22ff      	movs	r2, #255	@ 0xff
 8001708:	759a      	strb	r2, [r3, #22]
				break;
 800170a:	e040      	b.n	800178e <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 800170c:	4b22      	ldr	r3, [pc, #136]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001714:	4b20      	ldr	r3, [pc, #128]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d113      	bne.n	8001746 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800171e:	4b1e      	ldr	r3, [pc, #120]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001726:	4b1c      	ldr	r3, [pc, #112]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 800172e:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001730:	4b19      	ldr	r3, [pc, #100]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001738:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800173a:	461a      	mov	r2, r3
 800173c:	f00c f888 	bl	800d850 <memcpy>

			//execute command
			Modbus_frame_response();
 8001740:	f000 f904 	bl	800194c <Modbus_frame_response>
 8001744:	e001      	b.n	800174a <Modbus_Protocal_Worker+0x1b2>
				break;
 8001746:	bf00      	nop
					}
		break;


	}
}
 8001748:	e021      	b.n	800178e <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 800174a:	4b13      	ldr	r3, [pc, #76]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	7d5b      	ldrb	r3, [r3, #21]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d019      	beq.n	8001788 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001754:	4b10      	ldr	r3, [pc, #64]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2201      	movs	r2, #1
 800175a:	75da      	strb	r2, [r3, #23]
		break;
 800175c:	e014      	b.n	8001788 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800175e:	4b0e      	ldr	r3, [pc, #56]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001768:	2b20      	cmp	r3, #32
 800176a:	d10f      	bne.n	800178c <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 800176c:	4b0a      	ldr	r3, [pc, #40]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001776:	4b08      	ldr	r3, [pc, #32]	@ (8001798 <Modbus_Protocal_Worker+0x200>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2201      	movs	r2, #1
 800177c:	75da      	strb	r2, [r3, #23]
		break;
 800177e:	e005      	b.n	800178c <Modbus_Protocal_Worker+0x1f4>
		break;
 8001780:	bf00      	nop
 8001782:	e004      	b.n	800178e <Modbus_Protocal_Worker+0x1f6>
		break;
 8001784:	bf00      	nop
 8001786:	e002      	b.n	800178e <Modbus_Protocal_Worker+0x1f6>
		break;
 8001788:	bf00      	nop
 800178a:	e000      	b.n	800178e <Modbus_Protocal_Worker+0x1f6>
		break;
 800178c:	bf00      	nop
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	2000080c 	.word	0x2000080c

0800179c <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80017a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001818 <modbusWrite1Register+0x7c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	7e5b      	ldrb	r3, [r3, #25]
 80017a8:	021b      	lsls	r3, r3, #8
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001818 <modbusWrite1Register+0x7c>)
 80017ae:	6812      	ldr	r2, [r2, #0]
 80017b0:	7e92      	ldrb	r2, [r2, #26]
 80017b2:	4413      	add	r3, r2
 80017b4:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80017b6:	88fa      	ldrh	r2, [r7, #6]
 80017b8:	4b17      	ldr	r3, [pc, #92]	@ (8001818 <modbusWrite1Register+0x7c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d903      	bls.n	80017ca <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80017c2:	2002      	movs	r0, #2
 80017c4:	f000 f8a0 	bl	8001908 <ModbusErrorReply>
			 return;
 80017c8:	e023      	b.n	8001812 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80017ca:	4b13      	ldr	r3, [pc, #76]	@ (8001818 <modbusWrite1Register+0x7c>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4b12      	ldr	r3, [pc, #72]	@ (8001818 <modbusWrite1Register+0x7c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6859      	ldr	r1, [r3, #4]
 80017d4:	88fb      	ldrh	r3, [r7, #6]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	440b      	add	r3, r1
 80017da:	7ed2      	ldrb	r2, [r2, #27]
 80017dc:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80017de:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <modbusWrite1Register+0x7c>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001818 <modbusWrite1Register+0x7c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6859      	ldr	r1, [r3, #4]
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	440b      	add	r3, r1
 80017ee:	7f12      	ldrb	r2, [r2, #28]
 80017f0:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80017f2:	4b09      	ldr	r3, [pc, #36]	@ (8001818 <modbusWrite1Register+0x7c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 80017fa:	4b07      	ldr	r3, [pc, #28]	@ (8001818 <modbusWrite1Register+0x7c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001800:	2208      	movs	r2, #8
 8001802:	4619      	mov	r1, r3
 8001804:	f00c f824 	bl	800d850 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001808:	4b03      	ldr	r3, [pc, #12]	@ (8001818 <modbusWrite1Register+0x7c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2205      	movs	r2, #5
 800180e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	2000080c 	.word	0x2000080c

0800181c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 800181c:	b590      	push	{r4, r7, lr}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001822:	4b38      	ldr	r3, [pc, #224]	@ (8001904 <modbusRead1Register+0xe8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	7edb      	ldrb	r3, [r3, #27]
 8001828:	021b      	lsls	r3, r3, #8
 800182a:	b29b      	uxth	r3, r3
 800182c:	4a35      	ldr	r2, [pc, #212]	@ (8001904 <modbusRead1Register+0xe8>)
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	7f12      	ldrb	r2, [r2, #28]
 8001832:	4413      	add	r3, r2
 8001834:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001836:	4b33      	ldr	r3, [pc, #204]	@ (8001904 <modbusRead1Register+0xe8>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	7e5b      	ldrb	r3, [r3, #25]
 800183c:	021b      	lsls	r3, r3, #8
 800183e:	b29b      	uxth	r3, r3
 8001840:	4a30      	ldr	r2, [pc, #192]	@ (8001904 <modbusRead1Register+0xe8>)
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	7e92      	ldrb	r2, [r2, #26]
 8001846:	4413      	add	r3, r2
 8001848:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d002      	beq.n	8001856 <modbusRead1Register+0x3a>
 8001850:	88fb      	ldrh	r3, [r7, #6]
 8001852:	2b7d      	cmp	r3, #125	@ 0x7d
 8001854:	d903      	bls.n	800185e <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001856:	2003      	movs	r0, #3
 8001858:	f000 f856 	bl	8001908 <ModbusErrorReply>
		 return;
 800185c:	e04e      	b.n	80018fc <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800185e:	88ba      	ldrh	r2, [r7, #4]
 8001860:	4b28      	ldr	r3, [pc, #160]	@ (8001904 <modbusRead1Register+0xe8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	429a      	cmp	r2, r3
 8001868:	d808      	bhi.n	800187c <modbusRead1Register+0x60>
 800186a:	88ba      	ldrh	r2, [r7, #4]
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	4413      	add	r3, r2
 8001870:	461a      	mov	r2, r3
 8001872:	4b24      	ldr	r3, [pc, #144]	@ (8001904 <modbusRead1Register+0xe8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	429a      	cmp	r2, r3
 800187a:	d903      	bls.n	8001884 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800187c:	2002      	movs	r0, #2
 800187e:	f000 f843 	bl	8001908 <ModbusErrorReply>
		 return;
 8001882:	e03b      	b.n	80018fc <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001884:	4b1f      	ldr	r3, [pc, #124]	@ (8001904 <modbusRead1Register+0xe8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2203      	movs	r2, #3
 800188a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4b1c      	ldr	r3, [pc, #112]	@ (8001904 <modbusRead1Register+0xe8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	0052      	lsls	r2, r2, #1
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800189e:	2400      	movs	r4, #0
 80018a0:	e020      	b.n	80018e4 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80018a2:	4b18      	ldr	r3, [pc, #96]	@ (8001904 <modbusRead1Register+0xe8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	88bb      	ldrh	r3, [r7, #4]
 80018aa:	4423      	add	r3, r4
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	18d1      	adds	r1, r2, r3
 80018b0:	4b14      	ldr	r3, [pc, #80]	@ (8001904 <modbusRead1Register+0xe8>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	1c63      	adds	r3, r4, #1
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	7849      	ldrb	r1, [r1, #1]
 80018ba:	4413      	add	r3, r2
 80018bc:	460a      	mov	r2, r1
 80018be:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80018c2:	4b10      	ldr	r3, [pc, #64]	@ (8001904 <modbusRead1Register+0xe8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	88bb      	ldrh	r3, [r7, #4]
 80018ca:	4423      	add	r3, r4
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	18d1      	adds	r1, r2, r3
 80018d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001904 <modbusRead1Register+0xe8>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	0063      	lsls	r3, r4, #1
 80018d6:	3303      	adds	r3, #3
 80018d8:	7809      	ldrb	r1, [r1, #0]
 80018da:	4413      	add	r3, r2
 80018dc:	460a      	mov	r2, r1
 80018de:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80018e2:	3401      	adds	r4, #1
 80018e4:	88fb      	ldrh	r3, [r7, #6]
 80018e6:	429c      	cmp	r4, r3
 80018e8:	dbdb      	blt.n	80018a2 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80018ea:	88fb      	ldrh	r3, [r7, #6]
 80018ec:	3301      	adds	r3, #1
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	4b04      	ldr	r3, [pc, #16]	@ (8001904 <modbusRead1Register+0xe8>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	0052      	lsls	r2, r2, #1
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd90      	pop	{r4, r7, pc}
 8001902:	bf00      	nop
 8001904:	2000080c 	.word	0x2000080c

08001908 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001912:	4b0d      	ldr	r3, [pc, #52]	@ (8001948 <ModbusErrorReply+0x40>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	7e1a      	ldrb	r2, [r3, #24]
 8001918:	4b0b      	ldr	r3, [pc, #44]	@ (8001948 <ModbusErrorReply+0x40>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001926:	4b08      	ldr	r3, [pc, #32]	@ (8001948 <ModbusErrorReply+0x40>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	79fa      	ldrb	r2, [r7, #7]
 800192c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001930:	4b05      	ldr	r3, [pc, #20]	@ (8001948 <ModbusErrorReply+0x40>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2202      	movs	r2, #2
 8001936:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	2000080c 	.word	0x2000080c

0800194c <Modbus_frame_response>:

void Modbus_frame_response()
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001950:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <Modbus_frame_response+0x2c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	7e1b      	ldrb	r3, [r3, #24]
 8001956:	2b03      	cmp	r3, #3
 8001958:	d004      	beq.n	8001964 <Modbus_frame_response+0x18>
 800195a:	2b06      	cmp	r3, #6
 800195c:	d105      	bne.n	800196a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800195e:	f7ff ff1d 	bl	800179c <modbusWrite1Register>
		break;
 8001962:	e006      	b.n	8001972 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001964:	f7ff ff5a 	bl	800181c <modbusRead1Register>
		break;
 8001968:	e003      	b.n	8001972 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800196a:	2001      	movs	r0, #1
 800196c:	f7ff ffcc 	bl	8001908 <ModbusErrorReply>
		break;
 8001970:	bf00      	nop

	}
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	2000080c 	.word	0x2000080c

0800197c <Modbus_Emission>:

void Modbus_Emission()
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001982:	4b38      	ldr	r3, [pc, #224]	@ (8001a64 <Modbus_Emission+0xe8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800198c:	2b20      	cmp	r3, #32
 800198e:	d15d      	bne.n	8001a4c <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001990:	4b34      	ldr	r3, [pc, #208]	@ (8001a64 <Modbus_Emission+0xe8>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b33      	ldr	r3, [pc, #204]	@ (8001a64 <Modbus_Emission+0xe8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	7812      	ldrb	r2, [r2, #0]
 800199a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 800199e:	4b31      	ldr	r3, [pc, #196]	@ (8001a64 <Modbus_Emission+0xe8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 80019a6:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80019a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001a64 <Modbus_Emission+0xe8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 80019b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001a64 <Modbus_Emission+0xe8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 80019b8:	461a      	mov	r2, r3
 80019ba:	f00b ff49 	bl	800d850 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80019be:	4b29      	ldr	r3, [pc, #164]	@ (8001a64 <Modbus_Emission+0xe8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80019c6:	461a      	mov	r2, r3
 80019c8:	4b26      	ldr	r3, [pc, #152]	@ (8001a64 <Modbus_Emission+0xe8>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	3203      	adds	r2, #3
 80019ce:	b292      	uxth	r2, r2
 80019d0:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80019d4:	4b23      	ldr	r3, [pc, #140]	@ (8001a64 <Modbus_Emission+0xe8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80019dc:	4b21      	ldr	r3, [pc, #132]	@ (8001a64 <Modbus_Emission+0xe8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80019e4:	3b02      	subs	r3, #2
 80019e6:	4619      	mov	r1, r3
 80019e8:	4610      	mov	r0, r2
 80019ea:	f7ff fd9f 	bl	800152c <CRC16>
 80019ee:	4603      	mov	r3, r0
 80019f0:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80019f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a64 <Modbus_Emission+0xe8>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a64 <Modbus_Emission+0xe8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80019fe:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001a00:	7939      	ldrb	r1, [r7, #4]
 8001a02:	4413      	add	r3, r2
 8001a04:	460a      	mov	r2, r1
 8001a06:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001a0a:	4b16      	ldr	r3, [pc, #88]	@ (8001a64 <Modbus_Emission+0xe8>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <Modbus_Emission+0xe8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001a16:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001a18:	7979      	ldrb	r1, [r7, #5]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	460a      	mov	r2, r1
 8001a1e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001a22:	4b10      	ldr	r3, [pc, #64]	@ (8001a64 <Modbus_Emission+0xe8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a2c:	2b20      	cmp	r3, #32
 8001a2e:	d10d      	bne.n	8001a4c <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001a30:	4b0c      	ldr	r3, [pc, #48]	@ (8001a64 <Modbus_Emission+0xe8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001a36:	4b0b      	ldr	r3, [pc, #44]	@ (8001a64 <Modbus_Emission+0xe8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001a3e:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <Modbus_Emission+0xe8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001a42:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001a46:	461a      	mov	r2, r3
 8001a48:	f00a f8de 	bl	800bc08 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001a4c:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <Modbus_Emission+0xe8>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2200      	movs	r2, #0
 8001a52:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001a54:	4b03      	ldr	r3, [pc, #12]	@ (8001a64 <Modbus_Emission+0xe8>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	755a      	strb	r2, [r3, #21]

}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	2000080c 	.word	0x2000080c

08001a68 <Trajectory_Generator>:
//	Traj->dir = 0;
//	Traj->t2 = Traj->t1;
//}
double p1,p2,p3,p4,p5,p6 = 0.0;

void Trajectory_Generator(volatile Scurve_GenStruct *genScurve,float initial_p,float target_p,float vmax,float amax,float jmax){
 8001a68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a6c:	b096      	sub	sp, #88	@ 0x58
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6178      	str	r0, [r7, #20]
 8001a72:	ed87 0a04 	vstr	s0, [r7, #16]
 8001a76:	edc7 0a03 	vstr	s1, [r7, #12]
 8001a7a:	ed87 1a02 	vstr	s2, [r7, #8]
 8001a7e:	edc7 1a01 	vstr	s3, [r7, #4]
 8001a82:	ed87 2a00 	vstr	s4, [r7]
	//Set parameter
	uint32_t s = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	637b      	str	r3, [r7, #52]	@ 0x34
	uint8_t M = 0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	uint8_t N = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	uint8_t pattern = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	double va = 0.0f;
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double sa = 0.0f;
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double sv = 0.0f;
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	f04f 0300 	mov.w	r3, #0
 8001abc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double tj,ta,tv;

	genScurve->dir = 0;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	genScurve->time_total = 0.0;
 8001ac8:	6979      	ldr	r1, [r7, #20]
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	genScurve->t1 = 0.0;
 8001ad6:	6979      	ldr	r1, [r7, #20]
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	e9c1 2300 	strd	r2, r3, [r1]
	genScurve->t2 = 0.0;
 8001ae4:	6979      	ldr	r1, [r7, #20]
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	f04f 0300 	mov.w	r3, #0
 8001aee:	e9c1 2302 	strd	r2, r3, [r1, #8]
	genScurve->t3 = 0.0;
 8001af2:	6979      	ldr	r1, [r7, #20]
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	genScurve->t4 = 0.0;
 8001b00:	6979      	ldr	r1, [r7, #20]
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	genScurve->t5 = 0.0;
 8001b0e:	6979      	ldr	r1, [r7, #20]
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	e9c1 2308 	strd	r2, r3, [r1, #32]
	genScurve->t6 = 0.0;
 8001b1c:	6979      	ldr	r1, [r7, #20]
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	genScurve->t7 = 0.0;
 8001b2a:	6979      	ldr	r1, [r7, #20]
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	// Check for the feasibility of the trajectory
	if(vmax*jmax < amax*amax){
 8001b38:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b3c:	edd7 7a00 	vldr	s15, [r7]
 8001b40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b44:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b48:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b54:	d506      	bpl.n	8001b64 <Trajectory_Generator+0xfc>
		M = 1;
 8001b56:	2301      	movs	r3, #1
 8001b58:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		N = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8001b62:	e005      	b.n	8001b70 <Trajectory_Generator+0x108>
	}
	else{
		M = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		N = 1;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	}

    // Determine the direction of the motion
    if (target_p - initial_p < 0){
 8001b70:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b74:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b84:	d504      	bpl.n	8001b90 <Trajectory_Generator+0x128>
    	genScurve->dir = -1;
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	22ff      	movs	r2, #255	@ 0xff
 8001b8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b8e:	e003      	b.n	8001b98 <Trajectory_Generator+0x130>
    }
    else{
    	genScurve->dir = 1;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    }

    // Calculate the required distance
    s = fabs(target_p - initial_p);
 8001b98:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ba0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba4:	eef0 7ae7 	vabs.f32	s15, s15
 8001ba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bac:	ee17 3a90 	vmov	r3, s15
 8001bb0:	637b      	str	r3, [r7, #52]	@ 0x34

    // Calculate the values of va, sa and sv
    va = (amax*amax)/jmax;
 8001bb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bb6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001bba:	edd7 7a00 	vldr	s15, [r7]
 8001bbe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001bc2:	ee16 0a90 	vmov	r0, s13
 8001bc6:	f7fe fc8b 	bl	80004e0 <__aeabi_f2d>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    sa = 2*(amax*amax*amax)/(jmax*jmax);
 8001bd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bd6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001bda:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001be2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001be6:	edd7 7a00 	vldr	s15, [r7]
 8001bea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001bee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001bf2:	ee16 0a90 	vmov	r0, s13
 8001bf6:	f7fe fc73 	bl	80004e0 <__aeabi_f2d>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	e9c7 2308 	strd	r2, r3, [r7, #32]
    sv = vmax*((M * 2 * sqrt(vmax/jmax)) + N*((vmax/amax)+(amax/jmax)));
 8001c02:	68b8      	ldr	r0, [r7, #8]
 8001c04:	f7fe fc6c 	bl	80004e0 <__aeabi_f2d>
 8001c08:	4604      	mov	r4, r0
 8001c0a:	460d      	mov	r5, r1
 8001c0c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fc52 	bl	80004bc <__aeabi_i2d>
 8001c18:	4680      	mov	r8, r0
 8001c1a:	4689      	mov	r9, r1
 8001c1c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c20:	edd7 7a00 	vldr	s15, [r7]
 8001c24:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c28:	ee16 0a90 	vmov	r0, s13
 8001c2c:	f7fe fc58 	bl	80004e0 <__aeabi_f2d>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	ec43 2b10 	vmov	d0, r2, r3
 8001c38:	f00b fe88 	bl	800d94c <sqrt>
 8001c3c:	ec53 2b10 	vmov	r2, r3, d0
 8001c40:	4640      	mov	r0, r8
 8001c42:	4649      	mov	r1, r9
 8001c44:	f7fe fca4 	bl	8000590 <__aeabi_dmul>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4690      	mov	r8, r2
 8001c4e:	4699      	mov	r9, r3
 8001c50:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001c54:	ee07 3a90 	vmov	s15, r3
 8001c58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c5c:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c60:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c64:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001c68:	edd7 5a01 	vldr	s11, [r7, #4]
 8001c6c:	ed97 6a00 	vldr	s12, [r7]
 8001c70:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8001c74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c7c:	ee17 0a90 	vmov	r0, s15
 8001c80:	f7fe fc2e 	bl	80004e0 <__aeabi_f2d>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4640      	mov	r0, r8
 8001c8a:	4649      	mov	r1, r9
 8001c8c:	f7fe faca 	bl	8000224 <__adddf3>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4620      	mov	r0, r4
 8001c96:	4629      	mov	r1, r5
 8001c98:	f7fe fc7a 	bl	8000590 <__aeabi_dmul>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	e9c7 2306 	strd	r2, r3, [r7, #24]

    // Determine the shape of the trajectory based on the values of va, sa and sv
    if ((vmax <= va) && (s >= sa)){
 8001ca4:	68b8      	ldr	r0, [r7, #8]
 8001ca6:	f7fe fc1b 	bl	80004e0 <__aeabi_f2d>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001cb2:	f7fe fef3 	bl	8000a9c <__aeabi_dcmpge>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00f      	beq.n	8001cdc <Trajectory_Generator+0x274>
 8001cbc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001cbe:	f7fe fbed 	bl	800049c <__aeabi_ui2d>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cca:	f7fe fedd 	bl	8000a88 <__aeabi_dcmple>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <Trajectory_Generator+0x274>
        pattern = 1;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 8001cda:	e0ba      	b.n	8001e52 <Trajectory_Generator+0x3ea>
    }
    else if ((vmax > va) && (s < sa)){
 8001cdc:	68b8      	ldr	r0, [r7, #8]
 8001cde:	f7fe fbff 	bl	80004e0 <__aeabi_f2d>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001cea:	f7fe fec3 	bl	8000a74 <__aeabi_dcmplt>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00f      	beq.n	8001d14 <Trajectory_Generator+0x2ac>
 8001cf4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001cf6:	f7fe fbd1 	bl	800049c <__aeabi_ui2d>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d02:	f7fe fed5 	bl	8000ab0 <__aeabi_dcmpgt>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <Trajectory_Generator+0x2ac>
        pattern = 2;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 8001d12:	e09e      	b.n	8001e52 <Trajectory_Generator+0x3ea>
    }
    else if ((vmax < va) && (s < sa) && (s > sv)){
 8001d14:	68b8      	ldr	r0, [r7, #8]
 8001d16:	f7fe fbe3 	bl	80004e0 <__aeabi_f2d>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001d22:	f7fe fec5 	bl	8000ab0 <__aeabi_dcmpgt>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d01b      	beq.n	8001d64 <Trajectory_Generator+0x2fc>
 8001d2c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001d2e:	f7fe fbb5 	bl	800049c <__aeabi_ui2d>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d3a:	f7fe feb9 	bl	8000ab0 <__aeabi_dcmpgt>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00f      	beq.n	8001d64 <Trajectory_Generator+0x2fc>
 8001d44:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001d46:	f7fe fba9 	bl	800049c <__aeabi_ui2d>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d52:	f7fe fe8f 	bl	8000a74 <__aeabi_dcmplt>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <Trajectory_Generator+0x2fc>
        pattern = 3;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 8001d62:	e076      	b.n	8001e52 <Trajectory_Generator+0x3ea>
    }
    else if ((vmax < va) && (s < sa) && (s < sv)){
 8001d64:	68b8      	ldr	r0, [r7, #8]
 8001d66:	f7fe fbbb 	bl	80004e0 <__aeabi_f2d>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001d72:	f7fe fe9d 	bl	8000ab0 <__aeabi_dcmpgt>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d01b      	beq.n	8001db4 <Trajectory_Generator+0x34c>
 8001d7c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001d7e:	f7fe fb8d 	bl	800049c <__aeabi_ui2d>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d8a:	f7fe fe91 	bl	8000ab0 <__aeabi_dcmpgt>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00f      	beq.n	8001db4 <Trajectory_Generator+0x34c>
 8001d94:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001d96:	f7fe fb81 	bl	800049c <__aeabi_ui2d>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001da2:	f7fe fe85 	bl	8000ab0 <__aeabi_dcmpgt>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <Trajectory_Generator+0x34c>
        pattern = 4;
 8001dac:	2304      	movs	r3, #4
 8001dae:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 8001db2:	e04e      	b.n	8001e52 <Trajectory_Generator+0x3ea>
    }
    else if ((vmax >= va) && (s >= sa) && (s >= sv)){
 8001db4:	68b8      	ldr	r0, [r7, #8]
 8001db6:	f7fe fb93 	bl	80004e0 <__aeabi_f2d>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001dc2:	f7fe fe61 	bl	8000a88 <__aeabi_dcmple>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d01b      	beq.n	8001e04 <Trajectory_Generator+0x39c>
 8001dcc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001dce:	f7fe fb65 	bl	800049c <__aeabi_ui2d>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001dda:	f7fe fe55 	bl	8000a88 <__aeabi_dcmple>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00f      	beq.n	8001e04 <Trajectory_Generator+0x39c>
 8001de4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001de6:	f7fe fb59 	bl	800049c <__aeabi_ui2d>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001df2:	f7fe fe49 	bl	8000a88 <__aeabi_dcmple>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <Trajectory_Generator+0x39c>
        pattern = 5;
 8001dfc:	2305      	movs	r3, #5
 8001dfe:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 8001e02:	e026      	b.n	8001e52 <Trajectory_Generator+0x3ea>
    }
    else if ((vmax >= va) && (s >= sa) && (s < sv)){
 8001e04:	68b8      	ldr	r0, [r7, #8]
 8001e06:	f7fe fb6b 	bl	80004e0 <__aeabi_f2d>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001e12:	f7fe fe39 	bl	8000a88 <__aeabi_dcmple>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d01a      	beq.n	8001e52 <Trajectory_Generator+0x3ea>
 8001e1c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001e1e:	f7fe fb3d 	bl	800049c <__aeabi_ui2d>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e2a:	f7fe fe2d 	bl	8000a88 <__aeabi_dcmple>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00e      	beq.n	8001e52 <Trajectory_Generator+0x3ea>
 8001e34:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001e36:	f7fe fb31 	bl	800049c <__aeabi_ui2d>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e42:	f7fe fe35 	bl	8000ab0 <__aeabi_dcmpgt>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d002      	beq.n	8001e52 <Trajectory_Generator+0x3ea>
        pattern = 6;
 8001e4c:	2306      	movs	r3, #6
 8001e4e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    }

    // Calculate the values of tj, ta and tv for each trajectory pattern
    switch (pattern){
 8001e52:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001e56:	3b01      	subs	r3, #1
 8001e58:	2b05      	cmp	r3, #5
 8001e5a:	f200 8187 	bhi.w	800216c <Trajectory_Generator+0x704>
 8001e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e64 <Trajectory_Generator+0x3fc>)
 8001e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e64:	08001e7d 	.word	0x08001e7d
 8001e68:	08001ee9 	.word	0x08001ee9
 8001e6c:	08001f5f 	.word	0x08001f5f
 8001e70:	08001fc7 	.word	0x08001fc7
 8001e74:	0800202f 	.word	0x0800202f
 8001e78:	080020a1 	.word	0x080020a1
        case 1:
            tj = (float)pow((vmax/jmax),(0.5));
 8001e7c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e80:	edd7 7a00 	vldr	s15, [r7]
 8001e84:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001e88:	ee16 0a90 	vmov	r0, s13
 8001e8c:	f7fe fb28 	bl	80004e0 <__aeabi_f2d>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	ed9f 1b7e 	vldr	d1, [pc, #504]	@ 8002090 <Trajectory_Generator+0x628>
 8001e98:	ec43 2b10 	vmov	d0, r2, r3
 8001e9c:	f00b fce6 	bl	800d86c <pow>
 8001ea0:	ec53 2b10 	vmov	r2, r3, d0
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	f7fe fe42 	bl	8000b30 <__aeabi_d2f>
 8001eac:	4603      	mov	r3, r0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe fb16 	bl	80004e0 <__aeabi_f2d>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
            ta = tj;
 8001ebc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001ec0:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
            tv = s/vmax;
 8001ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ece:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ed2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001ed6:	ee16 0a90 	vmov	r0, s13
 8001eda:	f7fe fb01 	bl	80004e0 <__aeabi_f2d>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
            break;
 8001ee6:	e141      	b.n	800216c <Trajectory_Generator+0x704>
        case 2:
            tj = (float)pow(s/(2.0*jmax),1.0/3.0);
 8001ee8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001eea:	f7fe fad7 	bl	800049c <__aeabi_ui2d>
 8001eee:	4604      	mov	r4, r0
 8001ef0:	460d      	mov	r5, r1
 8001ef2:	6838      	ldr	r0, [r7, #0]
 8001ef4:	f7fe faf4 	bl	80004e0 <__aeabi_f2d>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	f7fe f992 	bl	8000224 <__adddf3>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4620      	mov	r0, r4
 8001f06:	4629      	mov	r1, r5
 8001f08:	f7fe fc6c 	bl	80007e4 <__aeabi_ddiv>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	ec43 2b17 	vmov	d7, r2, r3
 8001f14:	ed9f 1b60 	vldr	d1, [pc, #384]	@ 8002098 <Trajectory_Generator+0x630>
 8001f18:	eeb0 0a47 	vmov.f32	s0, s14
 8001f1c:	eef0 0a67 	vmov.f32	s1, s15
 8001f20:	f00b fca4 	bl	800d86c <pow>
 8001f24:	ec53 2b10 	vmov	r2, r3, d0
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f7fe fe00 	bl	8000b30 <__aeabi_d2f>
 8001f30:	4603      	mov	r3, r0
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe fad4 	bl	80004e0 <__aeabi_f2d>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
            ta = tj;
 8001f40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001f44:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
            tv = 2*tj;
 8001f48:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	f7fe f968 	bl	8000224 <__adddf3>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
            break;
 8001f5c:	e106      	b.n	800216c <Trajectory_Generator+0x704>
        case 3:
            tj = (float)pow((s/(2*jmax)),(1.0/3.0));
 8001f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f60:	ee07 3a90 	vmov	s15, r3
 8001f64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f68:	edd7 7a00 	vldr	s15, [r7]
 8001f6c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f70:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001f74:	ee16 0a90 	vmov	r0, s13
 8001f78:	f7fe fab2 	bl	80004e0 <__aeabi_f2d>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	ed9f 1b45 	vldr	d1, [pc, #276]	@ 8002098 <Trajectory_Generator+0x630>
 8001f84:	ec43 2b10 	vmov	d0, r2, r3
 8001f88:	f00b fc70 	bl	800d86c <pow>
 8001f8c:	ec53 2b10 	vmov	r2, r3, d0
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
 8001f94:	f7fe fdcc 	bl	8000b30 <__aeabi_d2f>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe faa0 	bl	80004e0 <__aeabi_f2d>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
            ta = tj;
 8001fa8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001fac:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
            tv = 2*tj;
 8001fb0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	f7fe f934 	bl	8000224 <__adddf3>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
            break;
 8001fc4:	e0d2      	b.n	800216c <Trajectory_Generator+0x704>
        case 4:
            tj = (float)pow((s/(2*jmax)),(1.0/3.0));
 8001fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fc8:	ee07 3a90 	vmov	s15, r3
 8001fcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fd0:	edd7 7a00 	vldr	s15, [r7]
 8001fd4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001fd8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001fdc:	ee16 0a90 	vmov	r0, s13
 8001fe0:	f7fe fa7e 	bl	80004e0 <__aeabi_f2d>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	ed9f 1b2b 	vldr	d1, [pc, #172]	@ 8002098 <Trajectory_Generator+0x630>
 8001fec:	ec43 2b10 	vmov	d0, r2, r3
 8001ff0:	f00b fc3c 	bl	800d86c <pow>
 8001ff4:	ec53 2b10 	vmov	r2, r3, d0
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f7fe fd98 	bl	8000b30 <__aeabi_d2f>
 8002000:	4603      	mov	r3, r0
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fa6c 	bl	80004e0 <__aeabi_f2d>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
            ta = tj;
 8002010:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002014:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
            tv = 2*tj;
 8002018:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	f7fe f900 	bl	8000224 <__adddf3>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
            break;
 800202c:	e09e      	b.n	800216c <Trajectory_Generator+0x704>
        case 5:
            tj = amax/jmax;
 800202e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002032:	edd7 7a00 	vldr	s15, [r7]
 8002036:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800203a:	ee16 0a90 	vmov	r0, s13
 800203e:	f7fe fa4f 	bl	80004e0 <__aeabi_f2d>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
            ta = vmax/amax;
 800204a:	ed97 7a02 	vldr	s14, [r7, #8]
 800204e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002052:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002056:	ee16 0a90 	vmov	r0, s13
 800205a:	f7fe fa41 	bl	80004e0 <__aeabi_f2d>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
            tv = s/vmax;
 8002066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002068:	ee07 3a90 	vmov	s15, r3
 800206c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002070:	edd7 7a02 	vldr	s15, [r7, #8]
 8002074:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002078:	ee16 0a90 	vmov	r0, s13
 800207c:	f7fe fa30 	bl	80004e0 <__aeabi_f2d>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
            break;
 8002088:	e070      	b.n	800216c <Trajectory_Generator+0x704>
 800208a:	bf00      	nop
 800208c:	f3af 8000 	nop.w
 8002090:	00000000 	.word	0x00000000
 8002094:	3fe00000 	.word	0x3fe00000
 8002098:	55555555 	.word	0x55555555
 800209c:	3fd55555 	.word	0x3fd55555
        case 6:
            tj = amax/jmax;
 80020a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80020a4:	edd7 7a00 	vldr	s15, [r7]
 80020a8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80020ac:	ee16 0a90 	vmov	r0, s13
 80020b0:	f7fe fa16 	bl	80004e0 <__aeabi_f2d>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
            ta = 0.5*(sqrt(((4*s*jmax*jmax)+(amax*amax*amax)) / (amax * jmax*jmax)) - (amax/jmax));
 80020bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	ee07 3a90 	vmov	s15, r3
 80020c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020c8:	edd7 7a00 	vldr	s15, [r7]
 80020cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020d0:	edd7 7a00 	vldr	s15, [r7]
 80020d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80020dc:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80020e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80020e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020ec:	edd7 6a01 	vldr	s13, [r7, #4]
 80020f0:	edd7 7a00 	vldr	s15, [r7]
 80020f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020f8:	edd7 7a00 	vldr	s15, [r7]
 80020fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002100:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002104:	ee16 0a90 	vmov	r0, s13
 8002108:	f7fe f9ea 	bl	80004e0 <__aeabi_f2d>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	ec43 2b10 	vmov	d0, r2, r3
 8002114:	f00b fc1a 	bl	800d94c <sqrt>
 8002118:	ec55 4b10 	vmov	r4, r5, d0
 800211c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002120:	edd7 7a00 	vldr	s15, [r7]
 8002124:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002128:	ee16 0a90 	vmov	r0, s13
 800212c:	f7fe f9d8 	bl	80004e0 <__aeabi_f2d>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4620      	mov	r0, r4
 8002136:	4629      	mov	r1, r5
 8002138:	f7fe f872 	bl	8000220 <__aeabi_dsub>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4610      	mov	r0, r2
 8002142:	4619      	mov	r1, r3
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	4b34      	ldr	r3, [pc, #208]	@ (800221c <Trajectory_Generator+0x7b4>)
 800214a:	f7fe fa21 	bl	8000590 <__aeabi_dmul>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
            tv = ta + tj;
 8002156:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800215a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800215e:	f7fe f861 	bl	8000224 <__adddf3>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
            break;
 800216a:	bf00      	nop
    }
    // Calculate the values of t1 to t7 and the total time
    genScurve->t1 = tj;
 800216c:	6979      	ldr	r1, [r7, #20]
 800216e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002172:	e9c1 2300 	strd	r2, r3, [r1]
    genScurve->t2 = ta;
 8002176:	6979      	ldr	r1, [r7, #20]
 8002178:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800217c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    genScurve->t3 = ta + tj;
 8002180:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002184:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002188:	f7fe f84c 	bl	8000224 <__adddf3>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	6979      	ldr	r1, [r7, #20]
 8002192:	e9c1 2304 	strd	r2, r3, [r1, #16]
    genScurve->t4 = tv;
 8002196:	6979      	ldr	r1, [r7, #20]
 8002198:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800219c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    genScurve->t5 = tv + tj;
 80021a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80021a4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80021a8:	f7fe f83c 	bl	8000224 <__adddf3>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	6979      	ldr	r1, [r7, #20]
 80021b2:	e9c1 2308 	strd	r2, r3, [r1, #32]
    genScurve->t6 = tv + ta;
 80021b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80021ba:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80021be:	f7fe f831 	bl	8000224 <__adddf3>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	6979      	ldr	r1, [r7, #20]
 80021c8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    genScurve->t7 = tv + tj + ta;
 80021cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80021d0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80021d4:	f7fe f826 	bl	8000224 <__adddf3>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4610      	mov	r0, r2
 80021de:	4619      	mov	r1, r3
 80021e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80021e4:	f7fe f81e 	bl	8000224 <__adddf3>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	6979      	ldr	r1, [r7, #20]
 80021ee:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    genScurve->time_total = genScurve->t7;
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80021f8:	6979      	ldr	r1, [r7, #20]
 80021fa:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    if (s == 0){
 80021fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002200:	2b00      	cmp	r3, #0
 8002202:	d106      	bne.n	8002212 <Trajectory_Generator+0x7aa>
    	genScurve->time_total = 0;
 8002204:	6979      	ldr	r1, [r7, #20]
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	f04f 0300 	mov.w	r3, #0
 800220e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    }
}
 8002212:	bf00      	nop
 8002214:	3758      	adds	r7, #88	@ 0x58
 8002216:	46bd      	mov	sp, r7
 8002218:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800221c:	3fe00000 	.word	0x3fe00000

08002220 <Trajectory_Evaluated>:

void Trajectory_Evaluated(volatile Scurve_GenStruct *genScurve,volatile Scurve_EvaStruct *evaScurve,float initial_p,float target_p,float vmax,float amax,float jmax){
 8002220:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002224:	b088      	sub	sp, #32
 8002226:	af00      	add	r7, sp, #0
 8002228:	61f8      	str	r0, [r7, #28]
 800222a:	61b9      	str	r1, [r7, #24]
 800222c:	ed87 0a05 	vstr	s0, [r7, #20]
 8002230:	edc7 0a04 	vstr	s1, [r7, #16]
 8002234:	ed87 1a03 	vstr	s2, [r7, #12]
 8002238:	edc7 1a02 	vstr	s3, [r7, #8]
 800223c:	ed87 2a01 	vstr	s4, [r7, #4]
	static double v1,v2,v3,v4,v5,v6 = 0.0;
	static double a1,a2,a3,a4,a5,a6 = 0.0;

	evaScurve->t += 1.0/1000.0;
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002246:	a3d4      	add	r3, pc, #848	@ (adr r3, 8002598 <Trajectory_Evaluated+0x378>)
 8002248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224c:	f7fd ffea 	bl	8000224 <__adddf3>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	69b9      	ldr	r1, [r7, #24]
 8002256:	e9c1 2306 	strd	r2, r3, [r1, #24]
	if (evaScurve->t <= genScurve->time_total){
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002266:	f7fe fc0f 	bl	8000a88 <__aeabi_dcmple>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 86e0 	beq.w	8003032 <Trajectory_Evaluated+0xe12>
		evaScurve->isFinised = false;
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2020 	strb.w	r2, [r3, #32]
		if(evaScurve->t <= genScurve->t1){
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002286:	f7fe fbff 	bl	8000a88 <__aeabi_dcmple>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 80b2 	beq.w	80023f6 <Trajectory_Evaluated+0x1d6>
			evaScurve->setposition = initial_p + 1/6.0 * jmax * pow(evaScurve->t,3.0) * genScurve->dir;
 8002292:	6978      	ldr	r0, [r7, #20]
 8002294:	f7fe f924 	bl	80004e0 <__aeabi_f2d>
 8002298:	4604      	mov	r4, r0
 800229a:	460d      	mov	r5, r1
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7fe f91f 	bl	80004e0 <__aeabi_f2d>
 80022a2:	a3bf      	add	r3, pc, #764	@ (adr r3, 80025a0 <Trajectory_Evaluated+0x380>)
 80022a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a8:	f7fe f972 	bl	8000590 <__aeabi_dmul>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4690      	mov	r8, r2
 80022b2:	4699      	mov	r9, r3
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	ed93 7b06 	vldr	d7, [r3, #24]
 80022ba:	ed9f 1ba9 	vldr	d1, [pc, #676]	@ 8002560 <Trajectory_Evaluated+0x340>
 80022be:	eeb0 0a47 	vmov.f32	s0, s14
 80022c2:	eef0 0a67 	vmov.f32	s1, s15
 80022c6:	f00b fad1 	bl	800d86c <pow>
 80022ca:	ec53 2b10 	vmov	r2, r3, d0
 80022ce:	4640      	mov	r0, r8
 80022d0:	4649      	mov	r1, r9
 80022d2:	f7fe f95d 	bl	8000590 <__aeabi_dmul>
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	4690      	mov	r8, r2
 80022dc:	4699      	mov	r9, r3
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022e4:	b25b      	sxtb	r3, r3
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe f8e8 	bl	80004bc <__aeabi_i2d>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4640      	mov	r0, r8
 80022f2:	4649      	mov	r1, r9
 80022f4:	f7fe f94c 	bl	8000590 <__aeabi_dmul>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4620      	mov	r0, r4
 80022fe:	4629      	mov	r1, r5
 8002300:	f7fd ff90 	bl	8000224 <__adddf3>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	69b9      	ldr	r1, [r7, #24]
 800230a:	e9c1 2300 	strd	r2, r3, [r1]
			evaScurve->setvelocity =  1/2.0 * jmax * evaScurve->t * evaScurve->t * genScurve->dir;
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7fe f8e6 	bl	80004e0 <__aeabi_f2d>
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	4b95      	ldr	r3, [pc, #596]	@ (8002570 <Trajectory_Evaluated+0x350>)
 800231a:	f7fe f939 	bl	8000590 <__aeabi_dmul>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4610      	mov	r0, r2
 8002324:	4619      	mov	r1, r3
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800232c:	f7fe f930 	bl	8000590 <__aeabi_dmul>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4610      	mov	r0, r2
 8002336:	4619      	mov	r1, r3
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800233e:	f7fe f927 	bl	8000590 <__aeabi_dmul>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	4614      	mov	r4, r2
 8002348:	461d      	mov	r5, r3
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002350:	b25b      	sxtb	r3, r3
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe f8b2 	bl	80004bc <__aeabi_i2d>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4620      	mov	r0, r4
 800235e:	4629      	mov	r1, r5
 8002360:	f7fe f916 	bl	8000590 <__aeabi_dmul>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	69b9      	ldr	r1, [r7, #24]
 800236a:	e9c1 2302 	strd	r2, r3, [r1, #8]
			evaScurve->setacceleration = jmax *evaScurve->t* genScurve->dir;
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7fe f8b6 	bl	80004e0 <__aeabi_f2d>
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800237a:	f7fe f909 	bl	8000590 <__aeabi_dmul>
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	4614      	mov	r4, r2
 8002384:	461d      	mov	r5, r3
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800238c:	b25b      	sxtb	r3, r3
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe f894 	bl	80004bc <__aeabi_i2d>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	4620      	mov	r0, r4
 800239a:	4629      	mov	r1, r5
 800239c:	f7fe f8f8 	bl	8000590 <__aeabi_dmul>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	69b9      	ldr	r1, [r7, #24]
 80023a6:	e9c1 2304 	strd	r2, r3, [r1, #16]
			p2 = evaScurve->setposition;
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b0:	4970      	ldr	r1, [pc, #448]	@ (8002574 <Trajectory_Evaluated+0x354>)
 80023b2:	e9c1 2300 	strd	r2, r3, [r1]
			p1 = p2;
 80023b6:	4b6f      	ldr	r3, [pc, #444]	@ (8002574 <Trajectory_Evaluated+0x354>)
 80023b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023bc:	496e      	ldr	r1, [pc, #440]	@ (8002578 <Trajectory_Evaluated+0x358>)
 80023be:	e9c1 2300 	strd	r2, r3, [r1]
			v2 = evaScurve->setvelocity;
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80023c8:	496c      	ldr	r1, [pc, #432]	@ (800257c <Trajectory_Evaluated+0x35c>)
 80023ca:	e9c1 2300 	strd	r2, r3, [r1]
			v1 = v2;
 80023ce:	4b6b      	ldr	r3, [pc, #428]	@ (800257c <Trajectory_Evaluated+0x35c>)
 80023d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d4:	496a      	ldr	r1, [pc, #424]	@ (8002580 <Trajectory_Evaluated+0x360>)
 80023d6:	e9c1 2300 	strd	r2, r3, [r1]
			a2 = evaScurve->setacceleration;
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80023e0:	4968      	ldr	r1, [pc, #416]	@ (8002584 <Trajectory_Evaluated+0x364>)
 80023e2:	e9c1 2300 	strd	r2, r3, [r1]
			a1 = a2;
 80023e6:	4b67      	ldr	r3, [pc, #412]	@ (8002584 <Trajectory_Evaluated+0x364>)
 80023e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ec:	4966      	ldr	r1, [pc, #408]	@ (8002588 <Trajectory_Evaluated+0x368>)
 80023ee:	e9c1 2300 	strd	r2, r3, [r1]
			evaScurve->setvelocity = v6 + a6 * (evaScurve->t - genScurve->t6) + 1.0/2.0 * jmax*genScurve->dir * pow((evaScurve->t - genScurve->t6),2);
			evaScurve->setacceleration = a6 + genScurve->dir *jmax * (evaScurve->t - genScurve->t6);
		}
	}
	else{evaScurve->isFinised = true;}
}
 80023f2:	f000 be23 	b.w	800303c <Trajectory_Evaluated+0xe1c>
		else if (genScurve->t1 < evaScurve->t && evaScurve->t <= genScurve->t2){
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002402:	f7fe fb37 	bl	8000a74 <__aeabi_dcmplt>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 80cd 	beq.w	80025a8 <Trajectory_Evaluated+0x388>
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800241a:	f7fe fb35 	bl	8000a88 <__aeabi_dcmple>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 80c1 	beq.w	80025a8 <Trajectory_Evaluated+0x388>
			evaScurve->setposition =  p1 + v1 * (evaScurve->t - genScurve->t1) + 1/2.0 * a1 * pow((evaScurve->t - genScurve->t1),2.0);
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002432:	f7fd fef5 	bl	8000220 <__aeabi_dsub>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4610      	mov	r0, r2
 800243c:	4619      	mov	r1, r3
 800243e:	4b50      	ldr	r3, [pc, #320]	@ (8002580 <Trajectory_Evaluated+0x360>)
 8002440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002444:	f7fe f8a4 	bl	8000590 <__aeabi_dmul>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4610      	mov	r0, r2
 800244e:	4619      	mov	r1, r3
 8002450:	4b49      	ldr	r3, [pc, #292]	@ (8002578 <Trajectory_Evaluated+0x358>)
 8002452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002456:	f7fd fee5 	bl	8000224 <__adddf3>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4614      	mov	r4, r2
 8002460:	461d      	mov	r5, r3
 8002462:	4b49      	ldr	r3, [pc, #292]	@ (8002588 <Trajectory_Evaluated+0x368>)
 8002464:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	4b40      	ldr	r3, [pc, #256]	@ (8002570 <Trajectory_Evaluated+0x350>)
 800246e:	f7fe f88f 	bl	8000590 <__aeabi_dmul>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4690      	mov	r8, r2
 8002478:	4699      	mov	r9, r3
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002486:	f7fd fecb 	bl	8000220 <__aeabi_dsub>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	ec43 2b17 	vmov	d7, r2, r3
 8002492:	ed9f 1b35 	vldr	d1, [pc, #212]	@ 8002568 <Trajectory_Evaluated+0x348>
 8002496:	eeb0 0a47 	vmov.f32	s0, s14
 800249a:	eef0 0a67 	vmov.f32	s1, s15
 800249e:	f00b f9e5 	bl	800d86c <pow>
 80024a2:	ec53 2b10 	vmov	r2, r3, d0
 80024a6:	4640      	mov	r0, r8
 80024a8:	4649      	mov	r1, r9
 80024aa:	f7fe f871 	bl	8000590 <__aeabi_dmul>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4620      	mov	r0, r4
 80024b4:	4629      	mov	r1, r5
 80024b6:	f7fd feb5 	bl	8000224 <__adddf3>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	69b9      	ldr	r1, [r7, #24]
 80024c0:	e9c1 2300 	strd	r2, r3, [r1]
			evaScurve->setvelocity = v1 + a1*(evaScurve->t- genScurve->t1);
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d0:	f7fd fea6 	bl	8000220 <__aeabi_dsub>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4610      	mov	r0, r2
 80024da:	4619      	mov	r1, r3
 80024dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002588 <Trajectory_Evaluated+0x368>)
 80024de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e2:	f7fe f855 	bl	8000590 <__aeabi_dmul>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4610      	mov	r0, r2
 80024ec:	4619      	mov	r1, r3
 80024ee:	4b24      	ldr	r3, [pc, #144]	@ (8002580 <Trajectory_Evaluated+0x360>)
 80024f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f4:	f7fd fe96 	bl	8000224 <__adddf3>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	69b9      	ldr	r1, [r7, #24]
 80024fe:	e9c1 2302 	strd	r2, r3, [r1, #8]
			evaScurve->setacceleration = a1;
 8002502:	4b21      	ldr	r3, [pc, #132]	@ (8002588 <Trajectory_Evaluated+0x368>)
 8002504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002508:	69b9      	ldr	r1, [r7, #24]
 800250a:	e9c1 2304 	strd	r2, r3, [r1, #16]
			p3 = evaScurve->setposition;
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002514:	491d      	ldr	r1, [pc, #116]	@ (800258c <Trajectory_Evaluated+0x36c>)
 8002516:	e9c1 2300 	strd	r2, r3, [r1]
			p2 = p3;
 800251a:	4b1c      	ldr	r3, [pc, #112]	@ (800258c <Trajectory_Evaluated+0x36c>)
 800251c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002520:	4914      	ldr	r1, [pc, #80]	@ (8002574 <Trajectory_Evaluated+0x354>)
 8002522:	e9c1 2300 	strd	r2, r3, [r1]
			v3 = evaScurve->setvelocity;
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800252c:	4918      	ldr	r1, [pc, #96]	@ (8002590 <Trajectory_Evaluated+0x370>)
 800252e:	e9c1 2300 	strd	r2, r3, [r1]
			v2 = v3;
 8002532:	4b17      	ldr	r3, [pc, #92]	@ (8002590 <Trajectory_Evaluated+0x370>)
 8002534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002538:	4910      	ldr	r1, [pc, #64]	@ (800257c <Trajectory_Evaluated+0x35c>)
 800253a:	e9c1 2300 	strd	r2, r3, [r1]
			a3 = evaScurve->setacceleration;
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002544:	4913      	ldr	r1, [pc, #76]	@ (8002594 <Trajectory_Evaluated+0x374>)
 8002546:	e9c1 2300 	strd	r2, r3, [r1]
			a2 = a3;
 800254a:	4b12      	ldr	r3, [pc, #72]	@ (8002594 <Trajectory_Evaluated+0x374>)
 800254c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002550:	490c      	ldr	r1, [pc, #48]	@ (8002584 <Trajectory_Evaluated+0x364>)
 8002552:	e9c1 2300 	strd	r2, r3, [r1]
 8002556:	f000 bd71 	b.w	800303c <Trajectory_Evaluated+0xe1c>
 800255a:	bf00      	nop
 800255c:	f3af 8000 	nop.w
 8002560:	00000000 	.word	0x00000000
 8002564:	40080000 	.word	0x40080000
 8002568:	00000000 	.word	0x00000000
 800256c:	40000000 	.word	0x40000000
 8002570:	3fe00000 	.word	0x3fe00000
 8002574:	20000818 	.word	0x20000818
 8002578:	20000810 	.word	0x20000810
 800257c:	20000840 	.word	0x20000840
 8002580:	20000848 	.word	0x20000848
 8002584:	20000850 	.word	0x20000850
 8002588:	20000858 	.word	0x20000858
 800258c:	20000820 	.word	0x20000820
 8002590:	20000860 	.word	0x20000860
 8002594:	20000868 	.word	0x20000868
 8002598:	d2f1a9fc 	.word	0xd2f1a9fc
 800259c:	3f50624d 	.word	0x3f50624d
 80025a0:	55555555 	.word	0x55555555
 80025a4:	3fc55555 	.word	0x3fc55555
		else if (genScurve->t2 <= evaScurve->t && evaScurve->t <= genScurve->t3){
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80025b4:	f7fe fa68 	bl	8000a88 <__aeabi_dcmple>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 819a 	beq.w	80028f4 <Trajectory_Evaluated+0x6d4>
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80025cc:	f7fe fa5c 	bl	8000a88 <__aeabi_dcmple>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 818e 	beq.w	80028f4 <Trajectory_Evaluated+0x6d4>
			evaScurve->setposition = p2 + v2 * (evaScurve->t - genScurve->t2) + 1/2.0 * a2 * pow((evaScurve->t - genScurve->t2),2.0) + 1.0/6.0 * - jmax * genScurve->dir * pow((evaScurve->t - genScurve->t2),3.0);
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80025e4:	f7fd fe1c 	bl	8000220 <__aeabi_dsub>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4610      	mov	r0, r2
 80025ee:	4619      	mov	r1, r3
 80025f0:	4bb3      	ldr	r3, [pc, #716]	@ (80028c0 <Trajectory_Evaluated+0x6a0>)
 80025f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f6:	f7fd ffcb 	bl	8000590 <__aeabi_dmul>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4610      	mov	r0, r2
 8002600:	4619      	mov	r1, r3
 8002602:	4bb0      	ldr	r3, [pc, #704]	@ (80028c4 <Trajectory_Evaluated+0x6a4>)
 8002604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002608:	f7fd fe0c 	bl	8000224 <__adddf3>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	4614      	mov	r4, r2
 8002612:	461d      	mov	r5, r3
 8002614:	4bac      	ldr	r3, [pc, #688]	@ (80028c8 <Trajectory_Evaluated+0x6a8>)
 8002616:	e9d3 0100 	ldrd	r0, r1, [r3]
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	4bab      	ldr	r3, [pc, #684]	@ (80028cc <Trajectory_Evaluated+0x6ac>)
 8002620:	f7fd ffb6 	bl	8000590 <__aeabi_dmul>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4690      	mov	r8, r2
 800262a:	4699      	mov	r9, r3
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002638:	f7fd fdf2 	bl	8000220 <__aeabi_dsub>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	ec43 2b17 	vmov	d7, r2, r3
 8002644:	ed9f 1b98 	vldr	d1, [pc, #608]	@ 80028a8 <Trajectory_Evaluated+0x688>
 8002648:	eeb0 0a47 	vmov.f32	s0, s14
 800264c:	eef0 0a67 	vmov.f32	s1, s15
 8002650:	f00b f90c 	bl	800d86c <pow>
 8002654:	ec53 2b10 	vmov	r2, r3, d0
 8002658:	4640      	mov	r0, r8
 800265a:	4649      	mov	r1, r9
 800265c:	f7fd ff98 	bl	8000590 <__aeabi_dmul>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4620      	mov	r0, r4
 8002666:	4629      	mov	r1, r5
 8002668:	f7fd fddc 	bl	8000224 <__adddf3>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4614      	mov	r4, r2
 8002672:	461d      	mov	r5, r3
 8002674:	edd7 7a01 	vldr	s15, [r7, #4]
 8002678:	eef1 7a67 	vneg.f32	s15, s15
 800267c:	ee17 3a90 	vmov	r3, s15
 8002680:	4618      	mov	r0, r3
 8002682:	f7fd ff2d 	bl	80004e0 <__aeabi_f2d>
 8002686:	a38a      	add	r3, pc, #552	@ (adr r3, 80028b0 <Trajectory_Evaluated+0x690>)
 8002688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268c:	f7fd ff80 	bl	8000590 <__aeabi_dmul>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4690      	mov	r8, r2
 8002696:	4699      	mov	r9, r3
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800269e:	b25b      	sxtb	r3, r3
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fd ff0b 	bl	80004bc <__aeabi_i2d>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4640      	mov	r0, r8
 80026ac:	4649      	mov	r1, r9
 80026ae:	f7fd ff6f 	bl	8000590 <__aeabi_dmul>
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	4690      	mov	r8, r2
 80026b8:	4699      	mov	r9, r3
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80026c6:	f7fd fdab 	bl	8000220 <__aeabi_dsub>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	ec43 2b17 	vmov	d7, r2, r3
 80026d2:	ed9f 1b79 	vldr	d1, [pc, #484]	@ 80028b8 <Trajectory_Evaluated+0x698>
 80026d6:	eeb0 0a47 	vmov.f32	s0, s14
 80026da:	eef0 0a67 	vmov.f32	s1, s15
 80026de:	f00b f8c5 	bl	800d86c <pow>
 80026e2:	ec53 2b10 	vmov	r2, r3, d0
 80026e6:	4640      	mov	r0, r8
 80026e8:	4649      	mov	r1, r9
 80026ea:	f7fd ff51 	bl	8000590 <__aeabi_dmul>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	4620      	mov	r0, r4
 80026f4:	4629      	mov	r1, r5
 80026f6:	f7fd fd95 	bl	8000224 <__adddf3>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	69b9      	ldr	r1, [r7, #24]
 8002700:	e9c1 2300 	strd	r2, r3, [r1]
			evaScurve->setvelocity = v2 + a2 * (evaScurve->t - genScurve->t2) + 1/2.0 * -jmax * genScurve->dir * pow((evaScurve->t - genScurve->t2),2.0);
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002710:	f7fd fd86 	bl	8000220 <__aeabi_dsub>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4610      	mov	r0, r2
 800271a:	4619      	mov	r1, r3
 800271c:	4b6a      	ldr	r3, [pc, #424]	@ (80028c8 <Trajectory_Evaluated+0x6a8>)
 800271e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002722:	f7fd ff35 	bl	8000590 <__aeabi_dmul>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4610      	mov	r0, r2
 800272c:	4619      	mov	r1, r3
 800272e:	4b64      	ldr	r3, [pc, #400]	@ (80028c0 <Trajectory_Evaluated+0x6a0>)
 8002730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002734:	f7fd fd76 	bl	8000224 <__adddf3>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4614      	mov	r4, r2
 800273e:	461d      	mov	r5, r3
 8002740:	edd7 7a01 	vldr	s15, [r7, #4]
 8002744:	eef1 7a67 	vneg.f32	s15, s15
 8002748:	ee17 3a90 	vmov	r3, s15
 800274c:	4618      	mov	r0, r3
 800274e:	f7fd fec7 	bl	80004e0 <__aeabi_f2d>
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	4b5d      	ldr	r3, [pc, #372]	@ (80028cc <Trajectory_Evaluated+0x6ac>)
 8002758:	f7fd ff1a 	bl	8000590 <__aeabi_dmul>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	4690      	mov	r8, r2
 8002762:	4699      	mov	r9, r3
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800276a:	b25b      	sxtb	r3, r3
 800276c:	4618      	mov	r0, r3
 800276e:	f7fd fea5 	bl	80004bc <__aeabi_i2d>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4640      	mov	r0, r8
 8002778:	4649      	mov	r1, r9
 800277a:	f7fd ff09 	bl	8000590 <__aeabi_dmul>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4690      	mov	r8, r2
 8002784:	4699      	mov	r9, r3
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002792:	f7fd fd45 	bl	8000220 <__aeabi_dsub>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	ec43 2b17 	vmov	d7, r2, r3
 800279e:	ed9f 1b42 	vldr	d1, [pc, #264]	@ 80028a8 <Trajectory_Evaluated+0x688>
 80027a2:	eeb0 0a47 	vmov.f32	s0, s14
 80027a6:	eef0 0a67 	vmov.f32	s1, s15
 80027aa:	f00b f85f 	bl	800d86c <pow>
 80027ae:	ec53 2b10 	vmov	r2, r3, d0
 80027b2:	4640      	mov	r0, r8
 80027b4:	4649      	mov	r1, r9
 80027b6:	f7fd feeb 	bl	8000590 <__aeabi_dmul>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4620      	mov	r0, r4
 80027c0:	4629      	mov	r1, r5
 80027c2:	f7fd fd2f 	bl	8000224 <__adddf3>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	69b9      	ldr	r1, [r7, #24]
 80027cc:	e9c1 2302 	strd	r2, r3, [r1, #8]
			evaScurve->setacceleration = a2 - (jmax * (evaScurve->t - genScurve->t2))*genScurve->dir;
 80027d0:	4b3d      	ldr	r3, [pc, #244]	@ (80028c8 <Trajectory_Evaluated+0x6a8>)
 80027d2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7fd fe82 	bl	80004e0 <__aeabi_f2d>
 80027dc:	4680      	mov	r8, r0
 80027de:	4689      	mov	r9, r1
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80027ec:	f7fd fd18 	bl	8000220 <__aeabi_dsub>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4640      	mov	r0, r8
 80027f6:	4649      	mov	r1, r9
 80027f8:	f7fd feca 	bl	8000590 <__aeabi_dmul>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4690      	mov	r8, r2
 8002802:	4699      	mov	r9, r3
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800280a:	b25b      	sxtb	r3, r3
 800280c:	4618      	mov	r0, r3
 800280e:	f7fd fe55 	bl	80004bc <__aeabi_i2d>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	4640      	mov	r0, r8
 8002818:	4649      	mov	r1, r9
 800281a:	f7fd feb9 	bl	8000590 <__aeabi_dmul>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4620      	mov	r0, r4
 8002824:	4629      	mov	r1, r5
 8002826:	f7fd fcfb 	bl	8000220 <__aeabi_dsub>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	69b9      	ldr	r1, [r7, #24]
 8002830:	e9c1 2304 	strd	r2, r3, [r1, #16]
			p6 = evaScurve->setposition;
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283a:	4925      	ldr	r1, [pc, #148]	@ (80028d0 <Trajectory_Evaluated+0x6b0>)
 800283c:	e9c1 2300 	strd	r2, r3, [r1]
			p4 = p6;
 8002840:	4b23      	ldr	r3, [pc, #140]	@ (80028d0 <Trajectory_Evaluated+0x6b0>)
 8002842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002846:	4923      	ldr	r1, [pc, #140]	@ (80028d4 <Trajectory_Evaluated+0x6b4>)
 8002848:	e9c1 2300 	strd	r2, r3, [r1]
			p3 = p4;
 800284c:	4b21      	ldr	r3, [pc, #132]	@ (80028d4 <Trajectory_Evaluated+0x6b4>)
 800284e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002852:	4921      	ldr	r1, [pc, #132]	@ (80028d8 <Trajectory_Evaluated+0x6b8>)
 8002854:	e9c1 2300 	strd	r2, r3, [r1]
			v6 = evaScurve->setvelocity;
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800285e:	491f      	ldr	r1, [pc, #124]	@ (80028dc <Trajectory_Evaluated+0x6bc>)
 8002860:	e9c1 2300 	strd	r2, r3, [r1]
			v4 = v6;
 8002864:	4b1d      	ldr	r3, [pc, #116]	@ (80028dc <Trajectory_Evaluated+0x6bc>)
 8002866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286a:	491d      	ldr	r1, [pc, #116]	@ (80028e0 <Trajectory_Evaluated+0x6c0>)
 800286c:	e9c1 2300 	strd	r2, r3, [r1]
			v3 = v4;
 8002870:	4b1b      	ldr	r3, [pc, #108]	@ (80028e0 <Trajectory_Evaluated+0x6c0>)
 8002872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002876:	491b      	ldr	r1, [pc, #108]	@ (80028e4 <Trajectory_Evaluated+0x6c4>)
 8002878:	e9c1 2300 	strd	r2, r3, [r1]
			a6 = evaScurve->setacceleration;
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002882:	4919      	ldr	r1, [pc, #100]	@ (80028e8 <Trajectory_Evaluated+0x6c8>)
 8002884:	e9c1 2300 	strd	r2, r3, [r1]
			a4 = a6;
 8002888:	4b17      	ldr	r3, [pc, #92]	@ (80028e8 <Trajectory_Evaluated+0x6c8>)
 800288a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288e:	4917      	ldr	r1, [pc, #92]	@ (80028ec <Trajectory_Evaluated+0x6cc>)
 8002890:	e9c1 2300 	strd	r2, r3, [r1]
			a3 = a4;
 8002894:	4b15      	ldr	r3, [pc, #84]	@ (80028ec <Trajectory_Evaluated+0x6cc>)
 8002896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289a:	4915      	ldr	r1, [pc, #84]	@ (80028f0 <Trajectory_Evaluated+0x6d0>)
 800289c:	e9c1 2300 	strd	r2, r3, [r1]
 80028a0:	e3cc      	b.n	800303c <Trajectory_Evaluated+0xe1c>
 80028a2:	bf00      	nop
 80028a4:	f3af 8000 	nop.w
 80028a8:	00000000 	.word	0x00000000
 80028ac:	40000000 	.word	0x40000000
 80028b0:	55555555 	.word	0x55555555
 80028b4:	3fc55555 	.word	0x3fc55555
 80028b8:	00000000 	.word	0x00000000
 80028bc:	40080000 	.word	0x40080000
 80028c0:	20000840 	.word	0x20000840
 80028c4:	20000818 	.word	0x20000818
 80028c8:	20000850 	.word	0x20000850
 80028cc:	3fe00000 	.word	0x3fe00000
 80028d0:	20000838 	.word	0x20000838
 80028d4:	20000828 	.word	0x20000828
 80028d8:	20000820 	.word	0x20000820
 80028dc:	20000870 	.word	0x20000870
 80028e0:	20000878 	.word	0x20000878
 80028e4:	20000860 	.word	0x20000860
 80028e8:	20000880 	.word	0x20000880
 80028ec:	20000888 	.word	0x20000888
 80028f0:	20000868 	.word	0x20000868
		else if (genScurve->t3 < evaScurve->t && evaScurve->t < genScurve->t4){
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002900:	f7fe f8b8 	bl	8000a74 <__aeabi_dcmplt>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d06c      	beq.n	80029e4 <Trajectory_Evaluated+0x7c4>
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002916:	f7fe f8ad 	bl	8000a74 <__aeabi_dcmplt>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d061      	beq.n	80029e4 <Trajectory_Evaluated+0x7c4>
			evaScurve->setposition = p3 + v3 * (evaScurve->t - genScurve->t3);
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800292c:	f7fd fc78 	bl	8000220 <__aeabi_dsub>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4610      	mov	r0, r2
 8002936:	4619      	mov	r1, r3
 8002938:	4b22      	ldr	r3, [pc, #136]	@ (80029c4 <Trajectory_Evaluated+0x7a4>)
 800293a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293e:	f7fd fe27 	bl	8000590 <__aeabi_dmul>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4610      	mov	r0, r2
 8002948:	4619      	mov	r1, r3
 800294a:	4b1f      	ldr	r3, [pc, #124]	@ (80029c8 <Trajectory_Evaluated+0x7a8>)
 800294c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002950:	f7fd fc68 	bl	8000224 <__adddf3>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	69b9      	ldr	r1, [r7, #24]
 800295a:	e9c1 2300 	strd	r2, r3, [r1]
			evaScurve->setvelocity = v3;
 800295e:	4b19      	ldr	r3, [pc, #100]	@ (80029c4 <Trajectory_Evaluated+0x7a4>)
 8002960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002964:	69b9      	ldr	r1, [r7, #24]
 8002966:	e9c1 2302 	strd	r2, r3, [r1, #8]
			evaScurve->setacceleration = 0;
 800296a:	69b9      	ldr	r1, [r7, #24]
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	e9c1 2304 	strd	r2, r3, [r1, #16]
			p5 = evaScurve->setposition;
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297e:	4913      	ldr	r1, [pc, #76]	@ (80029cc <Trajectory_Evaluated+0x7ac>)
 8002980:	e9c1 2300 	strd	r2, r3, [r1]
			p4 = p5;
 8002984:	4b11      	ldr	r3, [pc, #68]	@ (80029cc <Trajectory_Evaluated+0x7ac>)
 8002986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298a:	4911      	ldr	r1, [pc, #68]	@ (80029d0 <Trajectory_Evaluated+0x7b0>)
 800298c:	e9c1 2300 	strd	r2, r3, [r1]
			v5 = evaScurve->setvelocity;
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002996:	490f      	ldr	r1, [pc, #60]	@ (80029d4 <Trajectory_Evaluated+0x7b4>)
 8002998:	e9c1 2300 	strd	r2, r3, [r1]
			v4 = v5;
 800299c:	4b0d      	ldr	r3, [pc, #52]	@ (80029d4 <Trajectory_Evaluated+0x7b4>)
 800299e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a2:	490d      	ldr	r1, [pc, #52]	@ (80029d8 <Trajectory_Evaluated+0x7b8>)
 80029a4:	e9c1 2300 	strd	r2, r3, [r1]
			a5 = evaScurve->setacceleration;
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80029ae:	490b      	ldr	r1, [pc, #44]	@ (80029dc <Trajectory_Evaluated+0x7bc>)
 80029b0:	e9c1 2300 	strd	r2, r3, [r1]
			a4 = a5;
 80029b4:	4b09      	ldr	r3, [pc, #36]	@ (80029dc <Trajectory_Evaluated+0x7bc>)
 80029b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ba:	4909      	ldr	r1, [pc, #36]	@ (80029e0 <Trajectory_Evaluated+0x7c0>)
 80029bc:	e9c1 2300 	strd	r2, r3, [r1]
 80029c0:	e33c      	b.n	800303c <Trajectory_Evaluated+0xe1c>
 80029c2:	bf00      	nop
 80029c4:	20000860 	.word	0x20000860
 80029c8:	20000820 	.word	0x20000820
 80029cc:	20000830 	.word	0x20000830
 80029d0:	20000828 	.word	0x20000828
 80029d4:	20000890 	.word	0x20000890
 80029d8:	20000878 	.word	0x20000878
 80029dc:	20000898 	.word	0x20000898
 80029e0:	20000888 	.word	0x20000888
		else if (genScurve->t4 <= evaScurve->t && evaScurve->t <= genScurve->t5){
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80029f0:	f7fe f84a 	bl	8000a88 <__aeabi_dcmple>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 8130 	beq.w	8002c5c <Trajectory_Evaluated+0xa3c>
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002a08:	f7fe f83e 	bl	8000a88 <__aeabi_dcmple>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 8124 	beq.w	8002c5c <Trajectory_Evaluated+0xa3c>
			evaScurve->setposition = p4 + v4 * (evaScurve->t - genScurve->t4) + (1.0/6.0) * genScurve->dir *- jmax * pow((evaScurve->t - genScurve->t4),3.0);
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002a20:	f7fd fbfe 	bl	8000220 <__aeabi_dsub>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4610      	mov	r0, r2
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4b82      	ldr	r3, [pc, #520]	@ (8002c38 <Trajectory_Evaluated+0xa18>)
 8002a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a32:	f7fd fdad 	bl	8000590 <__aeabi_dmul>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4b7f      	ldr	r3, [pc, #508]	@ (8002c3c <Trajectory_Evaluated+0xa1c>)
 8002a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a44:	f7fd fbee 	bl	8000224 <__adddf3>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4614      	mov	r4, r2
 8002a4e:	461d      	mov	r5, r3
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a56:	b25b      	sxtb	r3, r3
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fd fd2f 	bl	80004bc <__aeabi_i2d>
 8002a5e:	a370      	add	r3, pc, #448	@ (adr r3, 8002c20 <Trajectory_Evaluated+0xa00>)
 8002a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a64:	f7fd fd94 	bl	8000590 <__aeabi_dmul>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4690      	mov	r8, r2
 8002a6e:	4699      	mov	r9, r3
 8002a70:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a74:	eef1 7a67 	vneg.f32	s15, s15
 8002a78:	ee17 3a90 	vmov	r3, s15
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fd fd2f 	bl	80004e0 <__aeabi_f2d>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4640      	mov	r0, r8
 8002a88:	4649      	mov	r1, r9
 8002a8a:	f7fd fd81 	bl	8000590 <__aeabi_dmul>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4690      	mov	r8, r2
 8002a94:	4699      	mov	r9, r3
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002aa2:	f7fd fbbd 	bl	8000220 <__aeabi_dsub>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	ec43 2b17 	vmov	d7, r2, r3
 8002aae:	ed9f 1b5e 	vldr	d1, [pc, #376]	@ 8002c28 <Trajectory_Evaluated+0xa08>
 8002ab2:	eeb0 0a47 	vmov.f32	s0, s14
 8002ab6:	eef0 0a67 	vmov.f32	s1, s15
 8002aba:	f00a fed7 	bl	800d86c <pow>
 8002abe:	ec53 2b10 	vmov	r2, r3, d0
 8002ac2:	4640      	mov	r0, r8
 8002ac4:	4649      	mov	r1, r9
 8002ac6:	f7fd fd63 	bl	8000590 <__aeabi_dmul>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	4620      	mov	r0, r4
 8002ad0:	4629      	mov	r1, r5
 8002ad2:	f7fd fba7 	bl	8000224 <__adddf3>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	69b9      	ldr	r1, [r7, #24]
 8002adc:	e9c1 2300 	strd	r2, r3, [r1]
			evaScurve->setvelocity = v4 + 1.0/2.0 * - jmax * genScurve->dir * pow((evaScurve->t - genScurve->t4),2.0);
 8002ae0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ae4:	eef1 7a67 	vneg.f32	s15, s15
 8002ae8:	ee17 3a90 	vmov	r3, s15
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fd fcf7 	bl	80004e0 <__aeabi_f2d>
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	4b52      	ldr	r3, [pc, #328]	@ (8002c40 <Trajectory_Evaluated+0xa20>)
 8002af8:	f7fd fd4a 	bl	8000590 <__aeabi_dmul>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4614      	mov	r4, r2
 8002b02:	461d      	mov	r5, r3
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b0a:	b25b      	sxtb	r3, r3
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fd fcd5 	bl	80004bc <__aeabi_i2d>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	4620      	mov	r0, r4
 8002b18:	4629      	mov	r1, r5
 8002b1a:	f7fd fd39 	bl	8000590 <__aeabi_dmul>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4614      	mov	r4, r2
 8002b24:	461d      	mov	r5, r3
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002b32:	f7fd fb75 	bl	8000220 <__aeabi_dsub>
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	ec43 2b17 	vmov	d7, r2, r3
 8002b3e:	ed9f 1b3c 	vldr	d1, [pc, #240]	@ 8002c30 <Trajectory_Evaluated+0xa10>
 8002b42:	eeb0 0a47 	vmov.f32	s0, s14
 8002b46:	eef0 0a67 	vmov.f32	s1, s15
 8002b4a:	f00a fe8f 	bl	800d86c <pow>
 8002b4e:	ec53 2b10 	vmov	r2, r3, d0
 8002b52:	4620      	mov	r0, r4
 8002b54:	4629      	mov	r1, r5
 8002b56:	f7fd fd1b 	bl	8000590 <__aeabi_dmul>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4610      	mov	r0, r2
 8002b60:	4619      	mov	r1, r3
 8002b62:	4b35      	ldr	r3, [pc, #212]	@ (8002c38 <Trajectory_Evaluated+0xa18>)
 8002b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b68:	f7fd fb5c 	bl	8000224 <__adddf3>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	69b9      	ldr	r1, [r7, #24]
 8002b72:	e9c1 2302 	strd	r2, r3, [r1, #8]
			evaScurve->setacceleration = (-jmax * (evaScurve->t - genScurve->t4))*genScurve->dir;
 8002b76:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b7a:	eef1 7a67 	vneg.f32	s15, s15
 8002b7e:	ee17 3a90 	vmov	r3, s15
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fd fcac 	bl	80004e0 <__aeabi_f2d>
 8002b88:	4604      	mov	r4, r0
 8002b8a:	460d      	mov	r5, r1
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002b98:	f7fd fb42 	bl	8000220 <__aeabi_dsub>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	4629      	mov	r1, r5
 8002ba4:	f7fd fcf4 	bl	8000590 <__aeabi_dmul>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	4614      	mov	r4, r2
 8002bae:	461d      	mov	r5, r3
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bb6:	b25b      	sxtb	r3, r3
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fd fc7f 	bl	80004bc <__aeabi_i2d>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	4629      	mov	r1, r5
 8002bc6:	f7fd fce3 	bl	8000590 <__aeabi_dmul>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	69b9      	ldr	r1, [r7, #24]
 8002bd0:	e9c1 2304 	strd	r2, r3, [r1, #16]
			p6 = evaScurve->setposition;
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bda:	491a      	ldr	r1, [pc, #104]	@ (8002c44 <Trajectory_Evaluated+0xa24>)
 8002bdc:	e9c1 2300 	strd	r2, r3, [r1]
			p5 = p6;
 8002be0:	4b18      	ldr	r3, [pc, #96]	@ (8002c44 <Trajectory_Evaluated+0xa24>)
 8002be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be6:	4918      	ldr	r1, [pc, #96]	@ (8002c48 <Trajectory_Evaluated+0xa28>)
 8002be8:	e9c1 2300 	strd	r2, r3, [r1]
			v6 = evaScurve->setvelocity;
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002bf2:	4916      	ldr	r1, [pc, #88]	@ (8002c4c <Trajectory_Evaluated+0xa2c>)
 8002bf4:	e9c1 2300 	strd	r2, r3, [r1]
			v5 = v6;
 8002bf8:	4b14      	ldr	r3, [pc, #80]	@ (8002c4c <Trajectory_Evaluated+0xa2c>)
 8002bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfe:	4914      	ldr	r1, [pc, #80]	@ (8002c50 <Trajectory_Evaluated+0xa30>)
 8002c00:	e9c1 2300 	strd	r2, r3, [r1]
			a6 = evaScurve->setacceleration;
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002c0a:	4912      	ldr	r1, [pc, #72]	@ (8002c54 <Trajectory_Evaluated+0xa34>)
 8002c0c:	e9c1 2300 	strd	r2, r3, [r1]
			a5 = a6;
 8002c10:	4b10      	ldr	r3, [pc, #64]	@ (8002c54 <Trajectory_Evaluated+0xa34>)
 8002c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c16:	4910      	ldr	r1, [pc, #64]	@ (8002c58 <Trajectory_Evaluated+0xa38>)
 8002c18:	e9c1 2300 	strd	r2, r3, [r1]
 8002c1c:	e20e      	b.n	800303c <Trajectory_Evaluated+0xe1c>
 8002c1e:	bf00      	nop
 8002c20:	55555555 	.word	0x55555555
 8002c24:	3fc55555 	.word	0x3fc55555
 8002c28:	00000000 	.word	0x00000000
 8002c2c:	40080000 	.word	0x40080000
 8002c30:	00000000 	.word	0x00000000
 8002c34:	40000000 	.word	0x40000000
 8002c38:	20000878 	.word	0x20000878
 8002c3c:	20000828 	.word	0x20000828
 8002c40:	3fe00000 	.word	0x3fe00000
 8002c44:	20000838 	.word	0x20000838
 8002c48:	20000830 	.word	0x20000830
 8002c4c:	20000870 	.word	0x20000870
 8002c50:	20000890 	.word	0x20000890
 8002c54:	20000880 	.word	0x20000880
 8002c58:	20000898 	.word	0x20000898
		else if (genScurve->t5 <  evaScurve->t &&  evaScurve->t <= genScurve->t6){
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002c68:	f7fd ff04 	bl	8000a74 <__aeabi_dcmplt>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 8093 	beq.w	8002d9a <Trajectory_Evaluated+0xb7a>
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002c80:	f7fd ff02 	bl	8000a88 <__aeabi_dcmple>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 8087 	beq.w	8002d9a <Trajectory_Evaluated+0xb7a>
			evaScurve->setposition = p5 + v5 * (evaScurve->t - genScurve->t5) + 1/2.0 * a5 * pow(( evaScurve->t - genScurve->t5),2.0);
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002c98:	f7fd fac2 	bl	8000220 <__aeabi_dsub>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4610      	mov	r0, r2
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4b4c      	ldr	r3, [pc, #304]	@ (8002dd8 <Trajectory_Evaluated+0xbb8>)
 8002ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002caa:	f7fd fc71 	bl	8000590 <__aeabi_dmul>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4b49      	ldr	r3, [pc, #292]	@ (8002ddc <Trajectory_Evaluated+0xbbc>)
 8002cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbc:	f7fd fab2 	bl	8000224 <__adddf3>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4614      	mov	r4, r2
 8002cc6:	461d      	mov	r5, r3
 8002cc8:	4b45      	ldr	r3, [pc, #276]	@ (8002de0 <Trajectory_Evaluated+0xbc0>)
 8002cca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	4b44      	ldr	r3, [pc, #272]	@ (8002de4 <Trajectory_Evaluated+0xbc4>)
 8002cd4:	f7fd fc5c 	bl	8000590 <__aeabi_dmul>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4690      	mov	r8, r2
 8002cde:	4699      	mov	r9, r3
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002cec:	f7fd fa98 	bl	8000220 <__aeabi_dsub>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	ec43 2b17 	vmov	d7, r2, r3
 8002cf8:	ed9f 1b35 	vldr	d1, [pc, #212]	@ 8002dd0 <Trajectory_Evaluated+0xbb0>
 8002cfc:	eeb0 0a47 	vmov.f32	s0, s14
 8002d00:	eef0 0a67 	vmov.f32	s1, s15
 8002d04:	f00a fdb2 	bl	800d86c <pow>
 8002d08:	ec53 2b10 	vmov	r2, r3, d0
 8002d0c:	4640      	mov	r0, r8
 8002d0e:	4649      	mov	r1, r9
 8002d10:	f7fd fc3e 	bl	8000590 <__aeabi_dmul>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4620      	mov	r0, r4
 8002d1a:	4629      	mov	r1, r5
 8002d1c:	f7fd fa82 	bl	8000224 <__adddf3>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	69b9      	ldr	r1, [r7, #24]
 8002d26:	e9c1 2300 	strd	r2, r3, [r1]
			evaScurve->setvelocity = v5 + a5 * (evaScurve->t - genScurve->t5);
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002d36:	f7fd fa73 	bl	8000220 <__aeabi_dsub>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4610      	mov	r0, r2
 8002d40:	4619      	mov	r1, r3
 8002d42:	4b27      	ldr	r3, [pc, #156]	@ (8002de0 <Trajectory_Evaluated+0xbc0>)
 8002d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d48:	f7fd fc22 	bl	8000590 <__aeabi_dmul>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4610      	mov	r0, r2
 8002d52:	4619      	mov	r1, r3
 8002d54:	4b20      	ldr	r3, [pc, #128]	@ (8002dd8 <Trajectory_Evaluated+0xbb8>)
 8002d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5a:	f7fd fa63 	bl	8000224 <__adddf3>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	69b9      	ldr	r1, [r7, #24]
 8002d64:	e9c1 2302 	strd	r2, r3, [r1, #8]
			evaScurve->setacceleration = a5;
 8002d68:	4b1d      	ldr	r3, [pc, #116]	@ (8002de0 <Trajectory_Evaluated+0xbc0>)
 8002d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6e:	69b9      	ldr	r1, [r7, #24]
 8002d70:	e9c1 2304 	strd	r2, r3, [r1, #16]
			p6 = evaScurve->setposition;
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7a:	491b      	ldr	r1, [pc, #108]	@ (8002de8 <Trajectory_Evaluated+0xbc8>)
 8002d7c:	e9c1 2300 	strd	r2, r3, [r1]
			v6 = evaScurve->setvelocity;
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002d86:	4919      	ldr	r1, [pc, #100]	@ (8002dec <Trajectory_Evaluated+0xbcc>)
 8002d88:	e9c1 2300 	strd	r2, r3, [r1]
			a6 = evaScurve->setacceleration;
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002d92:	4917      	ldr	r1, [pc, #92]	@ (8002df0 <Trajectory_Evaluated+0xbd0>)
 8002d94:	e9c1 2300 	strd	r2, r3, [r1]
 8002d98:	e150      	b.n	800303c <Trajectory_Evaluated+0xe1c>
		else if (genScurve->t6 <  evaScurve->t &&  evaScurve->t <= genScurve->t7){
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002da6:	f7fd fe65 	bl	8000a74 <__aeabi_dcmplt>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d100      	bne.n	8002db2 <Trajectory_Evaluated+0xb92>
}
 8002db0:	e144      	b.n	800303c <Trajectory_Evaluated+0xe1c>
		else if (genScurve->t6 <  evaScurve->t &&  evaScurve->t <= genScurve->t7){
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002dbe:	f7fd fe63 	bl	8000a88 <__aeabi_dcmple>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d115      	bne.n	8002df4 <Trajectory_Evaluated+0xbd4>
}
 8002dc8:	e138      	b.n	800303c <Trajectory_Evaluated+0xe1c>
 8002dca:	bf00      	nop
 8002dcc:	f3af 8000 	nop.w
 8002dd0:	00000000 	.word	0x00000000
 8002dd4:	40000000 	.word	0x40000000
 8002dd8:	20000890 	.word	0x20000890
 8002ddc:	20000830 	.word	0x20000830
 8002de0:	20000898 	.word	0x20000898
 8002de4:	3fe00000 	.word	0x3fe00000
 8002de8:	20000838 	.word	0x20000838
 8002dec:	20000870 	.word	0x20000870
 8002df0:	20000880 	.word	0x20000880
			evaScurve->setposition = p6 + v6 * (evaScurve->t - genScurve->t6) + 1.0/2.0 * a6 * pow((evaScurve->t - genScurve->t6),2) + 1/6.0 * jmax* genScurve->dir * pow((evaScurve->t - genScurve->t6),3);
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002e00:	f7fd fa0e 	bl	8000220 <__aeabi_dsub>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4610      	mov	r0, r2
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4b94      	ldr	r3, [pc, #592]	@ (8003060 <Trajectory_Evaluated+0xe40>)
 8002e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e12:	f7fd fbbd 	bl	8000590 <__aeabi_dmul>
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4b91      	ldr	r3, [pc, #580]	@ (8003064 <Trajectory_Evaluated+0xe44>)
 8002e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e24:	f7fd f9fe 	bl	8000224 <__adddf3>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4614      	mov	r4, r2
 8002e2e:	461d      	mov	r5, r3
 8002e30:	4b8d      	ldr	r3, [pc, #564]	@ (8003068 <Trajectory_Evaluated+0xe48>)
 8002e32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	4b8c      	ldr	r3, [pc, #560]	@ (800306c <Trajectory_Evaluated+0xe4c>)
 8002e3c:	f7fd fba8 	bl	8000590 <__aeabi_dmul>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4690      	mov	r8, r2
 8002e46:	4699      	mov	r9, r3
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002e54:	f7fd f9e4 	bl	8000220 <__aeabi_dsub>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	ec43 2b17 	vmov	d7, r2, r3
 8002e60:	ed9f 1b79 	vldr	d1, [pc, #484]	@ 8003048 <Trajectory_Evaluated+0xe28>
 8002e64:	eeb0 0a47 	vmov.f32	s0, s14
 8002e68:	eef0 0a67 	vmov.f32	s1, s15
 8002e6c:	f00a fcfe 	bl	800d86c <pow>
 8002e70:	ec53 2b10 	vmov	r2, r3, d0
 8002e74:	4640      	mov	r0, r8
 8002e76:	4649      	mov	r1, r9
 8002e78:	f7fd fb8a 	bl	8000590 <__aeabi_dmul>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4620      	mov	r0, r4
 8002e82:	4629      	mov	r1, r5
 8002e84:	f7fd f9ce 	bl	8000224 <__adddf3>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4614      	mov	r4, r2
 8002e8e:	461d      	mov	r5, r3
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7fd fb25 	bl	80004e0 <__aeabi_f2d>
 8002e96:	a36e      	add	r3, pc, #440	@ (adr r3, 8003050 <Trajectory_Evaluated+0xe30>)
 8002e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9c:	f7fd fb78 	bl	8000590 <__aeabi_dmul>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	4690      	mov	r8, r2
 8002ea6:	4699      	mov	r9, r3
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002eae:	b25b      	sxtb	r3, r3
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fd fb03 	bl	80004bc <__aeabi_i2d>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4640      	mov	r0, r8
 8002ebc:	4649      	mov	r1, r9
 8002ebe:	f7fd fb67 	bl	8000590 <__aeabi_dmul>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4690      	mov	r8, r2
 8002ec8:	4699      	mov	r9, r3
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002ed6:	f7fd f9a3 	bl	8000220 <__aeabi_dsub>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	ec43 2b17 	vmov	d7, r2, r3
 8002ee2:	ed9f 1b5d 	vldr	d1, [pc, #372]	@ 8003058 <Trajectory_Evaluated+0xe38>
 8002ee6:	eeb0 0a47 	vmov.f32	s0, s14
 8002eea:	eef0 0a67 	vmov.f32	s1, s15
 8002eee:	f00a fcbd 	bl	800d86c <pow>
 8002ef2:	ec53 2b10 	vmov	r2, r3, d0
 8002ef6:	4640      	mov	r0, r8
 8002ef8:	4649      	mov	r1, r9
 8002efa:	f7fd fb49 	bl	8000590 <__aeabi_dmul>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4620      	mov	r0, r4
 8002f04:	4629      	mov	r1, r5
 8002f06:	f7fd f98d 	bl	8000224 <__adddf3>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	69b9      	ldr	r1, [r7, #24]
 8002f10:	e9c1 2300 	strd	r2, r3, [r1]
			evaScurve->setvelocity = v6 + a6 * (evaScurve->t - genScurve->t6) + 1.0/2.0 * jmax*genScurve->dir * pow((evaScurve->t - genScurve->t6),2);
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002f20:	f7fd f97e 	bl	8000220 <__aeabi_dsub>
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	4610      	mov	r0, r2
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4b4e      	ldr	r3, [pc, #312]	@ (8003068 <Trajectory_Evaluated+0xe48>)
 8002f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f32:	f7fd fb2d 	bl	8000590 <__aeabi_dmul>
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4b48      	ldr	r3, [pc, #288]	@ (8003060 <Trajectory_Evaluated+0xe40>)
 8002f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f44:	f7fd f96e 	bl	8000224 <__adddf3>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4614      	mov	r4, r2
 8002f4e:	461d      	mov	r5, r3
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7fd fac5 	bl	80004e0 <__aeabi_f2d>
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	4b44      	ldr	r3, [pc, #272]	@ (800306c <Trajectory_Evaluated+0xe4c>)
 8002f5c:	f7fd fb18 	bl	8000590 <__aeabi_dmul>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4690      	mov	r8, r2
 8002f66:	4699      	mov	r9, r3
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f6e:	b25b      	sxtb	r3, r3
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fd faa3 	bl	80004bc <__aeabi_i2d>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4640      	mov	r0, r8
 8002f7c:	4649      	mov	r1, r9
 8002f7e:	f7fd fb07 	bl	8000590 <__aeabi_dmul>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4690      	mov	r8, r2
 8002f88:	4699      	mov	r9, r3
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002f96:	f7fd f943 	bl	8000220 <__aeabi_dsub>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	ec43 2b17 	vmov	d7, r2, r3
 8002fa2:	ed9f 1b29 	vldr	d1, [pc, #164]	@ 8003048 <Trajectory_Evaluated+0xe28>
 8002fa6:	eeb0 0a47 	vmov.f32	s0, s14
 8002faa:	eef0 0a67 	vmov.f32	s1, s15
 8002fae:	f00a fc5d 	bl	800d86c <pow>
 8002fb2:	ec53 2b10 	vmov	r2, r3, d0
 8002fb6:	4640      	mov	r0, r8
 8002fb8:	4649      	mov	r1, r9
 8002fba:	f7fd fae9 	bl	8000590 <__aeabi_dmul>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	4629      	mov	r1, r5
 8002fc6:	f7fd f92d 	bl	8000224 <__adddf3>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	69b9      	ldr	r1, [r7, #24]
 8002fd0:	e9c1 2302 	strd	r2, r3, [r1, #8]
			evaScurve->setacceleration = a6 + genScurve->dir *jmax * (evaScurve->t - genScurve->t6);
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fda:	b25b      	sxtb	r3, r3
 8002fdc:	ee07 3a90 	vmov	s15, r3
 8002fe0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fe4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fec:	ee17 0a90 	vmov	r0, s15
 8002ff0:	f7fd fa76 	bl	80004e0 <__aeabi_f2d>
 8002ff4:	4604      	mov	r4, r0
 8002ff6:	460d      	mov	r5, r1
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8003004:	f7fd f90c 	bl	8000220 <__aeabi_dsub>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	4620      	mov	r0, r4
 800300e:	4629      	mov	r1, r5
 8003010:	f7fd fabe 	bl	8000590 <__aeabi_dmul>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4610      	mov	r0, r2
 800301a:	4619      	mov	r1, r3
 800301c:	4b12      	ldr	r3, [pc, #72]	@ (8003068 <Trajectory_Evaluated+0xe48>)
 800301e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003022:	f7fd f8ff 	bl	8000224 <__adddf3>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	69b9      	ldr	r1, [r7, #24]
 800302c:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8003030:	e004      	b.n	800303c <Trajectory_Evaluated+0xe1c>
	else{evaScurve->isFinised = true;}
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2020 	strb.w	r2, [r3, #32]
}
 800303a:	e7ff      	b.n	800303c <Trajectory_Evaluated+0xe1c>
 800303c:	bf00      	nop
 800303e:	3720      	adds	r7, #32
 8003040:	46bd      	mov	sp, r7
 8003042:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003046:	bf00      	nop
 8003048:	00000000 	.word	0x00000000
 800304c:	40000000 	.word	0x40000000
 8003050:	55555555 	.word	0x55555555
 8003054:	3fc55555 	.word	0x3fc55555
 8003058:	00000000 	.word	0x00000000
 800305c:	40080000 	.word	0x40080000
 8003060:	20000870 	.word	0x20000870
 8003064:	20000838 	.word	0x20000838
 8003068:	20000880 	.word	0x20000880
 800306c:	3fe00000 	.word	0x3fe00000

08003070 <ADC_init>:
 *      Author: naker
 */

#include "adc.h"

void ADC_init(ADC_HandleTypeDef* hadc, ADC* adc){
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, adc -> adc_buffer, 50);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2232      	movs	r2, #50	@ 0x32
 800307e:	4619      	mov	r1, r3
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f003 fb53 	bl	800672c <HAL_ADC_Start_DMA>
}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <Update_eff>:
}

void Update_eff(EFF* eff, GPIO_TypeDef* GPIO_Pull, uint16_t GPIO_Pin_Pull,
		GPIO_TypeDef* GPIO_Push, uint16_t GPIO_Pin_Push, GPIO_TypeDef* GPIO_Vacuum,
		uint16_t GPIO_Pin_Vacuum)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	603b      	str	r3, [r7, #0]
 800309a:	4613      	mov	r3, r2
 800309c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIO_Vacuum, GPIO_Pin_Vacuum, eff -> solenoid_command[0]);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	789a      	ldrb	r2, [r3, #2]
 80030a2:	8c3b      	ldrh	r3, [r7, #32]
 80030a4:	4619      	mov	r1, r3
 80030a6:	69f8      	ldr	r0, [r7, #28]
 80030a8:	f005 fb42 	bl	8008730 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO_Pull, GPIO_Pin_Pull, eff -> solenoid_command[1]);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	78da      	ldrb	r2, [r3, #3]
 80030b0:	88fb      	ldrh	r3, [r7, #6]
 80030b2:	4619      	mov	r1, r3
 80030b4:	68b8      	ldr	r0, [r7, #8]
 80030b6:	f005 fb3b 	bl	8008730 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO_Push, GPIO_Pin_Push, eff -> solenoid_command[2]);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	791a      	ldrb	r2, [r3, #4]
 80030be:	8b3b      	ldrh	r3, [r7, #24]
 80030c0:	4619      	mov	r1, r3
 80030c2:	6838      	ldr	r0, [r7, #0]
 80030c4:	f005 fb34 	bl	8008730 <HAL_GPIO_WritePin>
}
 80030c8:	bf00      	nop
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <Update_joy>:
 *      Author: naker
 */

#include "joy.h"

void Update_joy(JOY *joy){
 80030d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030d4:	b084      	sub	sp, #16
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
	uint8_t s_1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 80030da:	2120      	movs	r1, #32
 80030dc:	4838      	ldr	r0, [pc, #224]	@ (80031c0 <Update_joy+0xf0>)
 80030de:	f005 fb0f 	bl	8008700 <HAL_GPIO_ReadPin>
 80030e2:	4603      	mov	r3, r0
 80030e4:	73fb      	strb	r3, [r7, #15]
	uint8_t s_2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 80030e6:	2120      	movs	r1, #32
 80030e8:	4836      	ldr	r0, [pc, #216]	@ (80031c4 <Update_joy+0xf4>)
 80030ea:	f005 fb09 	bl	8008700 <HAL_GPIO_ReadPin>
 80030ee:	4603      	mov	r3, r0
 80030f0:	73bb      	strb	r3, [r7, #14]
	uint8_t s_3 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4);
 80030f2:	2110      	movs	r1, #16
 80030f4:	4833      	ldr	r0, [pc, #204]	@ (80031c4 <Update_joy+0xf4>)
 80030f6:	f005 fb03 	bl	8008700 <HAL_GPIO_ReadPin>
 80030fa:	4603      	mov	r3, r0
 80030fc:	737b      	strb	r3, [r7, #13]
	uint8_t s_4 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 80030fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003102:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003106:	f005 fafb 	bl	8008700 <HAL_GPIO_ReadPin>
 800310a:	4603      	mov	r3, r0
 800310c:	733b      	strb	r3, [r7, #12]
	if(!s_1 || !s_2 || !s_3 || !s_4){
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d008      	beq.n	8003126 <Update_joy+0x56>
 8003114:	7bbb      	ldrb	r3, [r7, #14]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d005      	beq.n	8003126 <Update_joy+0x56>
 800311a:	7b7b      	ldrb	r3, [r7, #13]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <Update_joy+0x56>
 8003120:	7b3b      	ldrb	r3, [r7, #12]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d136      	bne.n	8003194 <Update_joy+0xc4>
		static uint8_t is_first = 1;
		static uint64_t timestamp = 0;
		if(is_first){
 8003126:	4b28      	ldr	r3, [pc, #160]	@ (80031c8 <Update_joy+0xf8>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00c      	beq.n	8003148 <Update_joy+0x78>
			timestamp = HAL_GetTick() + 10;
 800312e:	f002 fef5 	bl	8005f1c <HAL_GetTick>
 8003132:	4603      	mov	r3, r0
 8003134:	330a      	adds	r3, #10
 8003136:	2200      	movs	r2, #0
 8003138:	469a      	mov	sl, r3
 800313a:	4693      	mov	fp, r2
 800313c:	4b23      	ldr	r3, [pc, #140]	@ (80031cc <Update_joy+0xfc>)
 800313e:	e9c3 ab00 	strd	sl, fp, [r3]
			is_first = 0;
 8003142:	4b21      	ldr	r3, [pc, #132]	@ (80031c8 <Update_joy+0xf8>)
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() > timestamp){
 8003148:	f002 fee8 	bl	8005f1c <HAL_GetTick>
 800314c:	4603      	mov	r3, r0
 800314e:	2200      	movs	r2, #0
 8003150:	461c      	mov	r4, r3
 8003152:	4615      	mov	r5, r2
 8003154:	4b1d      	ldr	r3, [pc, #116]	@ (80031cc <Update_joy+0xfc>)
 8003156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315a:	42a2      	cmp	r2, r4
 800315c:	41ab      	sbcs	r3, r5
 800315e:	d229      	bcs.n	80031b4 <Update_joy+0xe4>
			timestamp = HAL_GetTick() + 10;
 8003160:	f002 fedc 	bl	8005f1c <HAL_GetTick>
 8003164:	4603      	mov	r3, r0
 8003166:	330a      	adds	r3, #10
 8003168:	2200      	movs	r2, #0
 800316a:	4698      	mov	r8, r3
 800316c:	4691      	mov	r9, r2
 800316e:	4b17      	ldr	r3, [pc, #92]	@ (80031cc <Update_joy+0xfc>)
 8003170:	e9c3 8900 	strd	r8, r9, [r3]
			joy -> s_1 = s_1;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	7bfa      	ldrb	r2, [r7, #15]
 8003178:	701a      	strb	r2, [r3, #0]
			joy -> s_2 = s_2;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	7bba      	ldrb	r2, [r7, #14]
 800317e:	705a      	strb	r2, [r3, #1]
			joy -> s_3 = s_3;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	7b7a      	ldrb	r2, [r7, #13]
 8003184:	709a      	strb	r2, [r3, #2]
			joy -> s_4 = s_4;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	7b3a      	ldrb	r2, [r7, #12]
 800318a:	70da      	strb	r2, [r3, #3]
			joy -> is_place = 1;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	711a      	strb	r2, [r3, #4]
	if(!s_1 || !s_2 || !s_3 || !s_4){
 8003192:	e00f      	b.n	80031b4 <Update_joy+0xe4>
		}
	}else{
		joy -> s_1 = 1;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	701a      	strb	r2, [r3, #0]
		joy -> s_2 = 1;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	705a      	strb	r2, [r3, #1]
		joy -> s_3 = 1;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	709a      	strb	r2, [r3, #2]
		joy -> s_4 = 1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	70da      	strb	r2, [r3, #3]
		joy -> is_place = 0;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	711a      	strb	r2, [r3, #4]
	}
}
 80031b2:	e000      	b.n	80031b6 <Update_joy+0xe6>
	if(!s_1 || !s_2 || !s_3 || !s_4){
 80031b4:	bf00      	nop
}
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031c0:	48000400 	.word	0x48000400
 80031c4:	48000800 	.word	0x48000800
 80031c8:	20000268 	.word	0x20000268
 80031cc:	200008a0 	.word	0x200008a0

080031d0 <Kalman_Start>:
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
	  filter->Kalman_Speed = filter->X_k[1];
	  return  filter->Kalman_Speed;
}

void Kalman_Start(KalmanFilter* filter){
 80031d0:	b5b0      	push	{r4, r5, r7, lr}
 80031d2:	b0b4      	sub	sp, #208	@ 0xd0
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
	filter->Q = 0.1f;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a42      	ldr	r2, [pc, #264]	@ (80032e4 <Kalman_Start+0x114>)
 80031dc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = 1.0f;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80031e6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float a[16] = {1.0f, 0.000999981278535715f, -0.000114956304180341f, 7.18067814869762e-06f,
 80031ea:	4b3f      	ldr	r3, [pc, #252]	@ (80032e8 <Kalman_Start+0x118>)
 80031ec:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80031f0:	461d      	mov	r5, r3
 80031f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003202:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	                   0.0f, 0.999950617296464f,   -0.229910715302858f, 0.0143220709019020f,
	                   0.0f, 0.0f   ,   1.0f  , 0.0f,
	                   0.0f,-0.00496113160650046f, 0.000571883719539551f, 0.983689934032327f};

	float b[4] = {	1.90888950589463e-07f,
 8003206:	4b39      	ldr	r3, [pc, #228]	@ (80032ec <Kalman_Start+0x11c>)
 8003208:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800320c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800320e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
						0.000571883719539551f,
						0.0f,
						0.0789912369575374f};

	float c[4] = {0.0f, 1.0f, 0.0f, 0.0f};
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003218:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800321c:	673b      	str	r3, [r7, #112]	@ 0x70
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	677b      	str	r3, [r7, #116]	@ 0x74
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	67bb      	str	r3, [r7, #120]	@ 0x78

	float g[4] = {0.0f,
 800322a:	f04f 0300 	mov.w	r3, #0
 800322e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003230:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003234:	663b      	str	r3, [r7, #96]	@ 0x60
 8003236:	f04f 0300 	mov.w	r3, #0
 800323a:	667b      	str	r3, [r7, #100]	@ 0x64
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	66bb      	str	r3, [r7, #104]	@ 0x68
					  1.0f,
					  0.0f,
					  0.0f};

	float iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8003242:	4b2b      	ldr	r3, [pc, #172]	@ (80032f0 <Kalman_Start+0x120>)
 8003244:	f107 041c 	add.w	r4, r7, #28
 8003248:	461d      	mov	r5, r3
 800324a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800324c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800324e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003254:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003256:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800325a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 800325e:	f107 030c 	add.w	r3, r7, #12
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	605a      	str	r2, [r3, #4]
 8003268:	609a      	str	r2, [r3, #8]
 800326a:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 8003276:	2300      	movs	r3, #0
 8003278:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800327c:	e029      	b.n	80032d2 <Kalman_Start+0x102>
	{
		filter->A[i] = a[i];
 800327e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	33d0      	adds	r3, #208	@ 0xd0
 8003286:	443b      	add	r3, r7
 8003288:	3b44      	subs	r3, #68	@ 0x44
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003292:	3314      	adds	r3, #20
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 800329a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	33d0      	adds	r3, #208	@ 0xd0
 80032a2:	443b      	add	r3, r7
 80032a4:	3bb4      	subs	r3, #180	@ 0xb4
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80032ae:	3398      	adds	r3, #152	@ 0x98
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80032bc:	3304      	adds	r3, #4
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 80032c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80032cc:	3301      	adds	r3, #1
 80032ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80032d6:	2b0f      	cmp	r3, #15
 80032d8:	ddd1      	ble.n	800327e <Kalman_Start+0xae>
	}

	for(i=0;i<4;i++)
 80032da:	2300      	movs	r3, #0
 80032dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032e0:	e044      	b.n	800336c <Kalman_Start+0x19c>
 80032e2:	bf00      	nop
 80032e4:	3dcccccd 	.word	0x3dcccccd
 80032e8:	0800e7dc 	.word	0x0800e7dc
 80032ec:	0800e81c 	.word	0x0800e81c
 80032f0:	0800e82c 	.word	0x0800e82c
	{
		filter->X_k[i] = x_k[i];
 80032f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	33d0      	adds	r3, #208	@ 0xd0
 80032fc:	443b      	add	r3, r7
 80032fe:	3bc4      	subs	r3, #196	@ 0xc4
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	601a      	str	r2, [r3, #0]
		filter->B[i] = b[i];
 800330e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	33d0      	adds	r3, #208	@ 0xd0
 8003316:	443b      	add	r3, r7
 8003318:	3b54      	subs	r3, #84	@ 0x54
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003322:	3324      	adds	r3, #36	@ 0x24
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 800332a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	33d0      	adds	r3, #208	@ 0xd0
 8003332:	443b      	add	r3, r7
 8003334:	3b64      	subs	r3, #100	@ 0x64
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800333e:	3328      	adds	r3, #40	@ 0x28
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 8003346:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	33d0      	adds	r3, #208	@ 0xd0
 800334e:	443b      	add	r3, r7
 8003350:	3b74      	subs	r3, #116	@ 0x74
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800335a:	332c      	adds	r3, #44	@ 0x2c
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8003362:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003366:	3301      	adds	r3, #1
 8003368:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800336c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003370:	2b03      	cmp	r3, #3
 8003372:	ddbf      	ble.n	80032f4 <Kalman_Start+0x124>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	2104      	movs	r1, #4
 8003380:	f00a fa1c 	bl	800d7bc <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3310      	adds	r3, #16
 800338e:	2204      	movs	r2, #4
 8003390:	2104      	movs	r1, #4
 8003392:	f00a fa13 	bl	800d7bc <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3350      	adds	r3, #80	@ 0x50
 80033a0:	2204      	movs	r2, #4
 80033a2:	2104      	movs	r1, #4
 80033a4:	f00a fa0a 	bl	800d7bc <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3390      	adds	r3, #144	@ 0x90
 80033b2:	2201      	movs	r2, #1
 80033b4:	2104      	movs	r1, #4
 80033b6:	f00a fa01 	bl	800d7bc <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	33a0      	adds	r3, #160	@ 0xa0
 80033c4:	2204      	movs	r2, #4
 80033c6:	2101      	movs	r1, #1
 80033c8:	f00a f9f8 	bl	800d7bc <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	33b0      	adds	r3, #176	@ 0xb0
 80033d6:	2201      	movs	r2, #1
 80033d8:	2104      	movs	r1, #4
 80033da:	f00a f9ef 	bl	800d7bc <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	33c8      	adds	r3, #200	@ 0xc8
 80033e8:	2204      	movs	r2, #4
 80033ea:	2104      	movs	r1, #4
 80033ec:	f00a f9e6 	bl	800d7bc <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80033fc:	2201      	movs	r2, #1
 80033fe:	2104      	movs	r1, #4
 8003400:	f00a f9dc 	bl	800d7bc <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8003410:	2204      	movs	r2, #4
 8003412:	2101      	movs	r1, #1
 8003414:	f00a f9d2 	bl	800d7bc <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003424:	2204      	movs	r2, #4
 8003426:	2104      	movs	r1, #4
 8003428:	f00a f9c8 	bl	800d7bc <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003438:	2204      	movs	r2, #4
 800343a:	2104      	movs	r1, #4
 800343c:	f00a f9be 	bl	800d7bc <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800344c:	2201      	movs	r2, #1
 800344e:	2104      	movs	r1, #4
 8003450:	f00a f9b4 	bl	800d7bc <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8003460:	2201      	movs	r2, #1
 8003462:	2104      	movs	r1, #4
 8003464:	f00a f9aa 	bl	800d7bc <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003474:	2204      	movs	r2, #4
 8003476:	2101      	movs	r1, #1
 8003478:	f00a f9a0 	bl	800d7bc <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8003488:	2201      	movs	r2, #1
 800348a:	2101      	movs	r1, #1
 800348c:	f00a f996 	bl	800d7bc <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 800349c:	2201      	movs	r2, #1
 800349e:	2101      	movs	r1, #1
 80034a0:	f00a f98c 	bl	800d7bc <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 80034b0:	2201      	movs	r2, #1
 80034b2:	2104      	movs	r1, #4
 80034b4:	f00a f982 	bl	800d7bc <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80034c4:	2201      	movs	r2, #1
 80034c6:	2104      	movs	r1, #4
 80034c8:	f00a f978 	bl	800d7bc <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80034d8:	2201      	movs	r2, #1
 80034da:	2101      	movs	r1, #1
 80034dc:	f00a f96e 	bl	800d7bc <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 80034ec:	2201      	movs	r2, #1
 80034ee:	2101      	movs	r1, #1
 80034f0:	f00a f964 	bl	800d7bc <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8003500:	2201      	movs	r2, #1
 8003502:	2101      	movs	r1, #1
 8003504:	f00a f95a 	bl	800d7bc <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8003514:	2201      	movs	r2, #1
 8003516:	2104      	movs	r1, #4
 8003518:	f00a f950 	bl	800d7bc <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003528:	2201      	movs	r2, #1
 800352a:	2101      	movs	r1, #1
 800352c:	f00a f946 	bl	800d7bc <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800353c:	2204      	movs	r2, #4
 800353e:	2104      	movs	r1, #4
 8003540:	f00a f93c 	bl	800d7bc <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	33c4      	adds	r3, #196	@ 0xc4
 800354e:	2201      	movs	r2, #1
 8003550:	2101      	movs	r1, #1
 8003552:	f00a f933 	bl	800d7bc <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8003562:	2201      	movs	r2, #1
 8003564:	2101      	movs	r1, #1
 8003566:	f00a f929 	bl	800d7bc <arm_mat_init_f32>
}
 800356a:	bf00      	nop
 800356c:	37d0      	adds	r7, #208	@ 0xd0
 800356e:	46bd      	mov	sp, r7
 8003570:	bdb0      	pop	{r4, r5, r7, pc}
 8003572:	bf00      	nop

08003574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003578:	b093      	sub	sp, #76	@ 0x4c
 800357a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800357c:	f002 fc69 	bl	8005e52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003580:	f000 fe84 	bl	800428c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003584:	f001 f958 	bl	8004838 <MX_GPIO_Init>
  MX_DMA_Init();
 8003588:	f001 f914 	bl	80047b4 <MX_DMA_Init>
  MX_TIM1_Init();
 800358c:	f000 ff40 	bl	8004410 <MX_TIM1_Init>
  MX_TIM3_Init();
 8003590:	f000 ffee 	bl	8004570 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003594:	f001 f83a 	bl	800460c <MX_TIM4_Init>
  MX_ADC1_Init();
 8003598:	f000 fec2 	bl	8004320 <MX_ADC1_Init>
  MX_TIM16_Init();
 800359c:	f001 f88c 	bl	80046b8 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80035a0:	f001 f8ba 	bl	8004718 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Modbus setting
  hmodbus.huart = &huart2;
 80035a4:	4aae      	ldr	r2, [pc, #696]	@ (8003860 <main+0x2ec>)
 80035a6:	4baf      	ldr	r3, [pc, #700]	@ (8003864 <main+0x2f0>)
 80035a8:	60d3      	str	r3, [r2, #12]
  hmodbus.htim = &htim16;
 80035aa:	4aad      	ldr	r2, [pc, #692]	@ (8003860 <main+0x2ec>)
 80035ac:	4bae      	ldr	r3, [pc, #696]	@ (8003868 <main+0x2f4>)
 80035ae:	6113      	str	r3, [r2, #16]
  hmodbus.slaveAddress = 0x15;
 80035b0:	4aab      	ldr	r2, [pc, #684]	@ (8003860 <main+0x2ec>)
 80035b2:	2315      	movs	r3, #21
 80035b4:	7013      	strb	r3, [r2, #0]
  hmodbus.RegisterSize =200;
 80035b6:	4aaa      	ldr	r2, [pc, #680]	@ (8003860 <main+0x2ec>)
 80035b8:	23c8      	movs	r3, #200	@ 0xc8
 80035ba:	6093      	str	r3, [r2, #8]
  Modbus_init(&hmodbus, registerFrame);
 80035bc:	49ab      	ldr	r1, [pc, #684]	@ (800386c <main+0x2f8>)
 80035be:	48a8      	ldr	r0, [pc, #672]	@ (8003860 <main+0x2ec>)
 80035c0:	f7fd ff5e 	bl	8001480 <Modbus_init>
  registerFrame[0x00].U16 = 22881; // Set default heart beat to "Ya"
 80035c4:	4aa9      	ldr	r2, [pc, #676]	@ (800386c <main+0x2f8>)
 80035c6:	f645 1361 	movw	r3, #22881	@ 0x5961
 80035ca:	8013      	strh	r3, [r2, #0]

  // Update command timer
  HAL_TIM_Base_Start_IT(&main_loop_tim);
 80035cc:	48a8      	ldr	r0, [pc, #672]	@ (8003870 <main+0x2fc>)
 80035ce:	f006 f9e3 	bl	8009998 <HAL_TIM_Base_Start_IT>

  // PWM generator
  HAL_TIM_Base_Start(&pwm_tim);
 80035d2:	48a8      	ldr	r0, [pc, #672]	@ (8003874 <main+0x300>)
 80035d4:	f006 f970 	bl	80098b8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&pwm_tim, pwm_channel);
 80035d8:	2100      	movs	r1, #0
 80035da:	48a6      	ldr	r0, [pc, #664]	@ (8003874 <main+0x300>)
 80035dc:	f006 fac2 	bl	8009b64 <HAL_TIM_PWM_Start>

  // Encoder reader
  HAL_TIM_Encoder_Start(&encoder_tim, encoder_channel);
 80035e0:	213c      	movs	r1, #60	@ 0x3c
 80035e2:	48a5      	ldr	r0, [pc, #660]	@ (8003878 <main+0x304>)
 80035e4:	f006 fd7a 	bl	800a0dc <HAL_TIM_Encoder_Start>
  QEI_init(&encoder, encoder_ppr, encoder_frequency, encoder_cnt_period);
 80035e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80035f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80035f4:	48a1      	ldr	r0, [pc, #644]	@ (800387c <main+0x308>)
 80035f6:	f001 fcf8 	bl	8004fea <QEI_init>

  // Current reader
  ADC_init(&current_adc, &current_sensor);
 80035fa:	49a1      	ldr	r1, [pc, #644]	@ (8003880 <main+0x30c>)
 80035fc:	48a1      	ldr	r0, [pc, #644]	@ (8003884 <main+0x310>)
 80035fe:	f7ff fd37 	bl	8003070 <ADC_init>

  // Kalman filter
  Kalman_Start(&kalman);
 8003602:	48a1      	ldr	r0, [pc, #644]	@ (8003888 <main+0x314>)
 8003604:	f7ff fde4 	bl	80031d0 <Kalman_Start>

  // State initialize
  homing_init(&home);
 8003608:	48a0      	ldr	r0, [pc, #640]	@ (800388c <main+0x318>)
 800360a:	f001 fef1 	bl	80053f0 <homing_init>
  point_init(&point);
 800360e:	48a0      	ldr	r0, [pc, #640]	@ (8003890 <main+0x31c>)
 8003610:	f001 fedd 	bl	80053ce <point_init>
  emer_init(&emer);
 8003614:	489f      	ldr	r0, [pc, #636]	@ (8003894 <main+0x320>)
 8003616:	f002 f8c0 	bl	800579a <emer_init>


  // PID initialize
  PID_init(&p_pid, p_kp, p_ki, p_kd, 0.005);
 800361a:	4b9f      	ldr	r3, [pc, #636]	@ (8003898 <main+0x324>)
 800361c:	edd3 7a00 	vldr	s15, [r3]
 8003620:	4b9e      	ldr	r3, [pc, #632]	@ (800389c <main+0x328>)
 8003622:	ed93 7a00 	vldr	s14, [r3]
 8003626:	4b9e      	ldr	r3, [pc, #632]	@ (80038a0 <main+0x32c>)
 8003628:	edd3 6a00 	vldr	s13, [r3]
 800362c:	eddf 1a9d 	vldr	s3, [pc, #628]	@ 80038a4 <main+0x330>
 8003630:	eeb0 1a66 	vmov.f32	s2, s13
 8003634:	eef0 0a47 	vmov.f32	s1, s14
 8003638:	eeb0 0a67 	vmov.f32	s0, s15
 800363c:	489a      	ldr	r0, [pc, #616]	@ (80038a8 <main+0x334>)
 800363e:	f001 fb57 	bl	8004cf0 <PID_init>
  PID_init(&v_pid, v_kp, v_ki, v_kd, 0.001);
 8003642:	4b9a      	ldr	r3, [pc, #616]	@ (80038ac <main+0x338>)
 8003644:	edd3 7a00 	vldr	s15, [r3]
 8003648:	4b99      	ldr	r3, [pc, #612]	@ (80038b0 <main+0x33c>)
 800364a:	ed93 7a00 	vldr	s14, [r3]
 800364e:	4b99      	ldr	r3, [pc, #612]	@ (80038b4 <main+0x340>)
 8003650:	edd3 6a00 	vldr	s13, [r3]
 8003654:	eddf 1a98 	vldr	s3, [pc, #608]	@ 80038b8 <main+0x344>
 8003658:	eeb0 1a66 	vmov.f32	s2, s13
 800365c:	eef0 0a47 	vmov.f32	s1, s14
 8003660:	eeb0 0a67 	vmov.f32	s0, s15
 8003664:	4895      	ldr	r0, [pc, #596]	@ (80038bc <main+0x348>)
 8003666:	f001 fb43 	bl	8004cf0 <PID_init>

  //Set point
  setpoint = 0.0;
 800366a:	4a95      	ldr	r2, [pc, #596]	@ (80038c0 <main+0x34c>)
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	6013      	str	r3, [r2, #0]

  HAL_GPIO_WritePin(emer_light_gpio, emer_light_pin, RESET);
 8003672:	2200      	movs	r2, #0
 8003674:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003678:	4892      	ldr	r0, [pc, #584]	@ (80038c4 <main+0x350>)
 800367a:	f005 f859 	bl	8008730 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(vacuum_gpio, vacuum_pin, RESET);
 800367e:	2200      	movs	r2, #0
 8003680:	2110      	movs	r1, #16
 8003682:	4891      	ldr	r0, [pc, #580]	@ (80038c8 <main+0x354>)
 8003684:	f005 f854 	bl	8008730 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(solenoid_pull_gpio, solenoid_pull_pin, RESET);
 8003688:	2200      	movs	r2, #0
 800368a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800368e:	488e      	ldr	r0, [pc, #568]	@ (80038c8 <main+0x354>)
 8003690:	f005 f84e 	bl	8008730 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(solenoid_push_gpio, solenoid_push_pin, RESET);
 8003694:	2200      	movs	r2, #0
 8003696:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800369a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800369e:	f005 f847 	bl	8008730 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(controller_error_gpio, controller_error_pin, RESET);
 80036a2:	2200      	movs	r2, #0
 80036a4:	2102      	movs	r1, #2
 80036a6:	4888      	ldr	r0, [pc, #544]	@ (80038c8 <main+0x354>)
 80036a8:	f005 f842 	bl	8008730 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motor_error_gpio, motor_error_pin, RESET);
 80036ac:	2200      	movs	r2, #0
 80036ae:	2104      	movs	r1, #4
 80036b0:	4885      	ldr	r0, [pc, #532]	@ (80038c8 <main+0x354>)
 80036b2:	f005 f83d 	bl	8008730 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		// Update modbus
		Modbus_Protocal_Worker();
 80036b6:	f7fd ff6f 	bl	8001598 <Modbus_Protocal_Worker>
		// Routine
		registerFrame[0x04].U16 = eff.update_actual_status[0x04].U16;	// Gripper Movement Actual Status(0x10)
 80036ba:	4b84      	ldr	r3, [pc, #528]	@ (80038cc <main+0x358>)
 80036bc:	89db      	ldrh	r3, [r3, #14]
 80036be:	4a6b      	ldr	r2, [pc, #428]	@ (800386c <main+0x2f8>)
 80036c0:	8113      	strh	r3, [r2, #8]
		registerFrame[0x10].U16 = state;							// Z-axis Moving Status(0x10)
 80036c2:	4b83      	ldr	r3, [pc, #524]	@ (80038d0 <main+0x35c>)
 80036c4:	881b      	ldrh	r3, [r3, #0]
 80036c6:	4a69      	ldr	r2, [pc, #420]	@ (800386c <main+0x2f8>)
 80036c8:	8413      	strh	r3, [r2, #32]
		registerFrame[0x11].U16 = (uint16_t)(encoder.mm * 10);		// Z-axis Actual Position(0x11)
 80036ca:	4b6c      	ldr	r3, [pc, #432]	@ (800387c <main+0x308>)
 80036cc:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80036d0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80036d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036dc:	ee17 3a90 	vmov	r3, s15
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	4a62      	ldr	r2, [pc, #392]	@ (800386c <main+0x2f8>)
 80036e4:	8453      	strh	r3, [r2, #34]	@ 0x22
		registerFrame[0x12].U16 = (int16_t)(encoder.mmps * 10);		// Z-axis Actual Speed (0x12)
 80036e6:	4b65      	ldr	r3, [pc, #404]	@ (800387c <main+0x308>)
 80036e8:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80036ec:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80036f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036f8:	ee17 3a90 	vmov	r3, s15
 80036fc:	b21b      	sxth	r3, r3
 80036fe:	b29b      	uxth	r3, r3
 8003700:	4a5a      	ldr	r2, [pc, #360]	@ (800386c <main+0x2f8>)
 8003702:	8493      	strh	r3, [r2, #36]	@ 0x24
		registerFrame[0x13].U16 = (int16_t)(encoder.mmpss * 10);	// Z-axis Acceleration(0x13)
 8003704:	4b5d      	ldr	r3, [pc, #372]	@ (800387c <main+0x308>)
 8003706:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800370a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800370e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003712:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003716:	ee17 3a90 	vmov	r3, s15
 800371a:	b21b      	sxth	r3, r3
 800371c:	b29b      	uxth	r3, r3
 800371e:	4a53      	ldr	r2, [pc, #332]	@ (800386c <main+0x2f8>)
 8003720:	84d3      	strh	r3, [r2, #38]	@ 0x26
		registerFrame[0x40].U16 = (int16_t)(x_axis_position * 10);	// X-axis Actual Position(0x40)
 8003722:	4b6c      	ldr	r3, [pc, #432]	@ (80038d4 <main+0x360>)
 8003724:	edd3 7a00 	vldr	s15, [r3]
 8003728:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800372c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003730:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003734:	ee17 3a90 	vmov	r3, s15
 8003738:	b21b      	sxth	r3, r3
 800373a:	b29b      	uxth	r3, r3
 800373c:	4a4b      	ldr	r2, [pc, #300]	@ (800386c <main+0x2f8>)
 800373e:	f8a2 3080 	strh.w	r3, [r2, #128]	@ 0x80
		if(registerFrame[0x00].U16 == 18537){
 8003742:	4b4a      	ldr	r3, [pc, #296]	@ (800386c <main+0x2f8>)
 8003744:	881a      	ldrh	r2, [r3, #0]
 8003746:	f644 0369 	movw	r3, #18537	@ 0x4869
 800374a:	429a      	cmp	r2, r3
 800374c:	d103      	bne.n	8003756 <main+0x1e2>
			registerFrame[0x00].U16 = 22881;
 800374e:	4a47      	ldr	r2, [pc, #284]	@ (800386c <main+0x2f8>)
 8003750:	f645 1361 	movw	r3, #22881	@ 0x5961
 8003754:	8013      	strh	r3, [r2, #0]
		}

		if(mode == WAIT){
 8003756:	4b60      	ldr	r3, [pc, #384]	@ (80038d8 <main+0x364>)
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	f040 80ca 	bne.w	80038f4 <main+0x380>
			// Update peripheral
			Vacuum_Status(&eff); // Vacuum
 8003760:	485a      	ldr	r0, [pc, #360]	@ (80038cc <main+0x358>)
 8003762:	f7fd fbad 	bl	8000ec0 <Vacuum_Status>
			Gripper_Movement_Status(&eff); // End effector
 8003766:	4859      	ldr	r0, [pc, #356]	@ (80038cc <main+0x358>)
 8003768:	f7fd fbd6 	bl	8000f18 <Gripper_Movement_Status>
			// End effector update
			Update_eff(&eff, solenoid_pull_gpio, solenoid_pull_pin, solenoid_push_gpio, solenoid_push_pin, vacuum_gpio, vacuum_pin);
 800376c:	2310      	movs	r3, #16
 800376e:	9302      	str	r3, [sp, #8]
 8003770:	4b55      	ldr	r3, [pc, #340]	@ (80038c8 <main+0x354>)
 8003772:	9301      	str	r3, [sp, #4]
 8003774:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800377e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003782:	4951      	ldr	r1, [pc, #324]	@ (80038c8 <main+0x354>)
 8003784:	4851      	ldr	r0, [pc, #324]	@ (80038cc <main+0x358>)
 8003786:	f7ff fc82 	bl	800308e <Update_eff>

			//  homing command from Homing button and Base system Check command
			if(home.homing_command == 0){
 800378a:	4b40      	ldr	r3, [pc, #256]	@ (800388c <main+0x318>)
 800378c:	789b      	ldrb	r3, [r3, #2]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d119      	bne.n	80037c6 <main+0x252>
				Set_Home(); // Refresh homing command from base system
 8003792:	f7fd fc73 	bl	800107c <Set_Home>
				if(state == 0b0010){
 8003796:	4b4e      	ldr	r3, [pc, #312]	@ (80038d0 <main+0x35c>)
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d109      	bne.n	80037b2 <main+0x23e>
					// Have command from base system
					home.homing_command = 1;
 800379e:	4a3b      	ldr	r2, [pc, #236]	@ (800388c <main+0x318>)
 80037a0:	2301      	movs	r3, #1
 80037a2:	7093      	strb	r3, [r2, #2]
					registerFrame[0x01].U16 = 0b0000; // Reset data of base system status
 80037a4:	4a31      	ldr	r2, [pc, #196]	@ (800386c <main+0x2f8>)
 80037a6:	2300      	movs	r3, #0
 80037a8:	8053      	strh	r3, [r2, #2]
					registerFrame[0x10].U16 = 0b0010; // Set data of moving status to Home
 80037aa:	4a30      	ldr	r2, [pc, #192]	@ (800386c <main+0x2f8>)
 80037ac:	2302      	movs	r3, #2
 80037ae:	8413      	strh	r3, [r2, #32]
 80037b0:	e009      	b.n	80037c6 <main+0x252>
				}
				else if(HAL_GPIO_ReadPin(home_gpio, home_pin) == 1){
 80037b2:	2140      	movs	r1, #64	@ 0x40
 80037b4:	4843      	ldr	r0, [pc, #268]	@ (80038c4 <main+0x350>)
 80037b6:	f004 ffa3 	bl	8008700 <HAL_GPIO_ReadPin>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d102      	bne.n	80037c6 <main+0x252>
					// Have command from home switch
					home.homing_command = 1;
 80037c0:	4a32      	ldr	r2, [pc, #200]	@ (800388c <main+0x318>)
 80037c2:	2301      	movs	r3, #1
 80037c4:	7093      	strb	r3, [r2, #2]
//					registerFrame[0x10].U16 = 0b0010; // Set data of moving status to Home
				}
			}
			if(home.homing_command == 1 && eff.actual_status[0] == 1 && eff.actual_status[1] == 0){
 80037c6:	4b31      	ldr	r3, [pc, #196]	@ (800388c <main+0x318>)
 80037c8:	789b      	ldrb	r3, [r3, #2]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d123      	bne.n	8003816 <main+0x2a2>
 80037ce:	4b3f      	ldr	r3, [pc, #252]	@ (80038cc <main+0x358>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d11f      	bne.n	8003816 <main+0x2a2>
 80037d6:	4b3d      	ldr	r3, [pc, #244]	@ (80038cc <main+0x358>)
 80037d8:	785b      	ldrb	r3, [r3, #1]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d11b      	bne.n	8003816 <main+0x2a2>
				eff.solenoid_command[0] = 0;
 80037de:	4a3b      	ldr	r2, [pc, #236]	@ (80038cc <main+0x358>)
 80037e0:	2300      	movs	r3, #0
 80037e2:	7093      	strb	r3, [r2, #2]
				eff.solenoid_command[1] = 0;
 80037e4:	4a39      	ldr	r2, [pc, #228]	@ (80038cc <main+0x358>)
 80037e6:	2300      	movs	r3, #0
 80037e8:	70d3      	strb	r3, [r2, #3]
				eff.solenoid_command[2] = 0;
 80037ea:	4a38      	ldr	r2, [pc, #224]	@ (80038cc <main+0x358>)
 80037ec:	2300      	movs	r3, #0
 80037ee:	7113      	strb	r3, [r2, #4]
				Update_eff(&eff, solenoid_pull_gpio, solenoid_pull_pin, solenoid_push_gpio, solenoid_push_pin, vacuum_gpio, vacuum_pin);
 80037f0:	2310      	movs	r3, #16
 80037f2:	9302      	str	r3, [sp, #8]
 80037f4:	4b34      	ldr	r3, [pc, #208]	@ (80038c8 <main+0x354>)
 80037f6:	9301      	str	r3, [sp, #4]
 80037f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003802:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003806:	4930      	ldr	r1, [pc, #192]	@ (80038c8 <main+0x354>)
 8003808:	4830      	ldr	r0, [pc, #192]	@ (80038cc <main+0x358>)
 800380a:	f7ff fc40 	bl	800308e <Update_eff>
				mode = HOMING;
 800380e:	4a32      	ldr	r2, [pc, #200]	@ (80038d8 <main+0x364>)
 8003810:	2302      	movs	r3, #2
 8003812:	8013      	strh	r3, [r2, #0]
 8003814:	e06e      	b.n	80038f4 <main+0x380>
			}
			else if(home.homing_command == 1 && eff.actual_status[0] == 0 && eff.actual_status[1] == 1){
 8003816:	4b1d      	ldr	r3, [pc, #116]	@ (800388c <main+0x318>)
 8003818:	789b      	ldrb	r3, [r3, #2]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d15e      	bne.n	80038dc <main+0x368>
 800381e:	4b2b      	ldr	r3, [pc, #172]	@ (80038cc <main+0x358>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d15a      	bne.n	80038dc <main+0x368>
 8003826:	4b29      	ldr	r3, [pc, #164]	@ (80038cc <main+0x358>)
 8003828:	785b      	ldrb	r3, [r3, #1]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d156      	bne.n	80038dc <main+0x368>
				eff.solenoid_command[0] = 0;
 800382e:	4a27      	ldr	r2, [pc, #156]	@ (80038cc <main+0x358>)
 8003830:	2300      	movs	r3, #0
 8003832:	7093      	strb	r3, [r2, #2]
				eff.solenoid_command[1] = 0;
 8003834:	4a25      	ldr	r2, [pc, #148]	@ (80038cc <main+0x358>)
 8003836:	2300      	movs	r3, #0
 8003838:	70d3      	strb	r3, [r2, #3]
				eff.solenoid_command[2] = 1;
 800383a:	4a24      	ldr	r2, [pc, #144]	@ (80038cc <main+0x358>)
 800383c:	2301      	movs	r3, #1
 800383e:	7113      	strb	r3, [r2, #4]
				Update_eff(&eff, solenoid_pull_gpio, solenoid_pull_pin, solenoid_push_gpio, solenoid_push_pin, vacuum_gpio, vacuum_pin);
 8003840:	2310      	movs	r3, #16
 8003842:	9302      	str	r3, [sp, #8]
 8003844:	4b20      	ldr	r3, [pc, #128]	@ (80038c8 <main+0x354>)
 8003846:	9301      	str	r3, [sp, #4]
 8003848:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003852:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003856:	491c      	ldr	r1, [pc, #112]	@ (80038c8 <main+0x354>)
 8003858:	481c      	ldr	r0, [pc, #112]	@ (80038cc <main+0x358>)
 800385a:	f7ff fc18 	bl	800308e <Update_eff>
 800385e:	e049      	b.n	80038f4 <main+0x380>
 8003860:	20000334 	.word	0x20000334
 8003864:	20000d04 	.word	0x20000d04
 8003868:	20000bd8 	.word	0x20000bd8
 800386c:	20000eec 	.word	0x20000eec
 8003870:	20000a40 	.word	0x20000a40
 8003874:	20000974 	.word	0x20000974
 8003878:	20000b0c 	.word	0x20000b0c
 800387c:	200012f8 	.word	0x200012f8
 8003880:	20001224 	.word	0x20001224
 8003884:	200008a8 	.word	0x200008a8
 8003888:	200013b0 	.word	0x200013b0
 800388c:	20000ed0 	.word	0x20000ed0
 8003890:	20000ec8 	.word	0x20000ec8
 8003894:	20000ee8 	.word	0x20000ee8
 8003898:	20000274 	.word	0x20000274
 800389c:	2000139c 	.word	0x2000139c
 80038a0:	200013a0 	.word	0x200013a0
 80038a4:	3ba3d70a 	.word	0x3ba3d70a
 80038a8:	2000137c 	.word	0x2000137c
 80038ac:	2000026c 	.word	0x2000026c
 80038b0:	20000270 	.word	0x20000270
 80038b4:	20001370 	.word	0x20001370
 80038b8:	3a83126f 	.word	0x3a83126f
 80038bc:	20001350 	.word	0x20001350
 80038c0:	20000ec0 	.word	0x20000ec0
 80038c4:	48000800 	.word	0x48000800
 80038c8:	48000400 	.word	0x48000400
 80038cc:	2000107c 	.word	0x2000107c
 80038d0:	2000032e 	.word	0x2000032e
 80038d4:	20001730 	.word	0x20001730
 80038d8:	20000ec6 	.word	0x20000ec6
			}
			else{
				// Nothing happen
				pwm_signal = 0;
 80038dc:	4a87      	ldr	r2, [pc, #540]	@ (8003afc <main+0x588>)
 80038de:	2300      	movs	r3, #0
 80038e0:	6013      	str	r3, [r2, #0]
				Update_pwm(&pwm_tim, pwm_channel, dir_gpio, dir_pin, pwm_signal); // Update main PWM signal
 80038e2:	4b86      	ldr	r3, [pc, #536]	@ (8003afc <main+0x588>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	2302      	movs	r3, #2
 80038ea:	4a85      	ldr	r2, [pc, #532]	@ (8003b00 <main+0x58c>)
 80038ec:	2100      	movs	r1, #0
 80038ee:	4885      	ldr	r0, [pc, #532]	@ (8003b04 <main+0x590>)
 80038f0:	f001 fae4 	bl	8004ebc <Update_pwm>
			}
		}

		if(mode == RUNNING){
 80038f4:	4b84      	ldr	r3, [pc, #528]	@ (8003b08 <main+0x594>)
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	f040 8458 	bne.w	80041ae <main+0xc3a>
			if(testing == 1){
 80038fe:	4b83      	ldr	r3, [pc, #524]	@ (8003b0c <main+0x598>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b01      	cmp	r3, #1
 8003904:	f040 8097 	bne.w	8003a36 <main+0x4c2>
				sensor[0] = __HAL_TIM_GET_COUNTER(&encoder_tim); // Encoder
 8003908:	4b81      	ldr	r3, [pc, #516]	@ (8003b10 <main+0x59c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390e:	2200      	movs	r2, #0
 8003910:	633b      	str	r3, [r7, #48]	@ 0x30
 8003912:	637a      	str	r2, [r7, #52]	@ 0x34
 8003914:	4b7f      	ldr	r3, [pc, #508]	@ (8003b14 <main+0x5a0>)
 8003916:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800391a:	e9c3 1200 	strd	r1, r2, [r3]
				sensor[1] = HAL_GPIO_ReadPin(proximity_gpio, proximity_pin); // Proximity
 800391e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003922:	487d      	ldr	r0, [pc, #500]	@ (8003b18 <main+0x5a4>)
 8003924:	f004 feec 	bl	8008700 <HAL_GPIO_ReadPin>
 8003928:	4603      	mov	r3, r0
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2200      	movs	r2, #0
 800392e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003930:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003932:	4b78      	ldr	r3, [pc, #480]	@ (8003b14 <main+0x5a0>)
 8003934:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003938:	e9c3 1202 	strd	r1, r2, [r3, #8]
				sensor[2] = HAL_GPIO_ReadPin(reed_pull_gpio, reed_pull_pin); // Reed switch pull
 800393c:	2180      	movs	r1, #128	@ 0x80
 800393e:	4870      	ldr	r0, [pc, #448]	@ (8003b00 <main+0x58c>)
 8003940:	f004 fede 	bl	8008700 <HAL_GPIO_ReadPin>
 8003944:	4603      	mov	r3, r0
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2200      	movs	r2, #0
 800394a:	623b      	str	r3, [r7, #32]
 800394c:	627a      	str	r2, [r7, #36]	@ 0x24
 800394e:	4b71      	ldr	r3, [pc, #452]	@ (8003b14 <main+0x5a0>)
 8003950:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003954:	e9c3 1204 	strd	r1, r2, [r3, #16]
				sensor[3] = HAL_GPIO_ReadPin(reed_push_gpio, reed_push_pin); // Reed switch push
 8003958:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800395c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003960:	f004 fece 	bl	8008700 <HAL_GPIO_ReadPin>
 8003964:	4603      	mov	r3, r0
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2200      	movs	r2, #0
 800396a:	61bb      	str	r3, [r7, #24]
 800396c:	61fa      	str	r2, [r7, #28]
 800396e:	4b69      	ldr	r3, [pc, #420]	@ (8003b14 <main+0x5a0>)
 8003970:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003974:	e9c3 1206 	strd	r1, r2, [r3, #24]
				sensor[4] = HAL_GPIO_ReadPin(emer_gpio, emer_pin); // Emergency button
 8003978:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800397c:	4866      	ldr	r0, [pc, #408]	@ (8003b18 <main+0x5a4>)
 800397e:	f004 febf 	bl	8008700 <HAL_GPIO_ReadPin>
 8003982:	4603      	mov	r3, r0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2200      	movs	r2, #0
 8003988:	613b      	str	r3, [r7, #16]
 800398a:	617a      	str	r2, [r7, #20]
 800398c:	4b61      	ldr	r3, [pc, #388]	@ (8003b14 <main+0x5a0>)
 800398e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003992:	e9c3 1208 	strd	r1, r2, [r3, #32]
				sensor[5] = HAL_GPIO_ReadPin(home_gpio, home_pin); // Home button
 8003996:	2140      	movs	r1, #64	@ 0x40
 8003998:	4859      	ldr	r0, [pc, #356]	@ (8003b00 <main+0x58c>)
 800399a:	f004 feb1 	bl	8008700 <HAL_GPIO_ReadPin>
 800399e:	4603      	mov	r3, r0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2200      	movs	r2, #0
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	60fa      	str	r2, [r7, #12]
 80039a8:	4b5a      	ldr	r3, [pc, #360]	@ (8003b14 <main+0x5a0>)
 80039aa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80039ae:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
				static uint64_t timestamp = 0;
				if(HAL_GetTick() >= timestamp + 1500){
 80039b2:	f002 fab3 	bl	8005f1c <HAL_GetTick>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2200      	movs	r2, #0
 80039ba:	461d      	mov	r5, r3
 80039bc:	4616      	mov	r6, r2
 80039be:	4b57      	ldr	r3, [pc, #348]	@ (8003b1c <main+0x5a8>)
 80039c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c4:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 80039c8:	eb12 0801 	adds.w	r8, r2, r1
 80039cc:	f143 0900 	adc.w	r9, r3, #0
 80039d0:	4545      	cmp	r5, r8
 80039d2:	eb76 0309 	sbcs.w	r3, r6, r9
 80039d6:	d316      	bcc.n	8003a06 <main+0x492>
					eff.solenoid_command[0] = 1;
 80039d8:	4a51      	ldr	r2, [pc, #324]	@ (8003b20 <main+0x5ac>)
 80039da:	2301      	movs	r3, #1
 80039dc:	7093      	strb	r3, [r2, #2]
					eff.solenoid_command[1] = 1;
 80039de:	4a50      	ldr	r2, [pc, #320]	@ (8003b20 <main+0x5ac>)
 80039e0:	2301      	movs	r3, #1
 80039e2:	70d3      	strb	r3, [r2, #3]
					eff.solenoid_command[2] = 0;
 80039e4:	4a4e      	ldr	r2, [pc, #312]	@ (8003b20 <main+0x5ac>)
 80039e6:	2300      	movs	r3, #0
 80039e8:	7113      	strb	r3, [r2, #4]
					timestamp = HAL_GetTick() + 1500;
 80039ea:	f002 fa97 	bl	8005f1c <HAL_GetTick>
 80039ee:	4603      	mov	r3, r0
 80039f0:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 80039f4:	2200      	movs	r2, #0
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	607a      	str	r2, [r7, #4]
 80039fa:	4b48      	ldr	r3, [pc, #288]	@ (8003b1c <main+0x5a8>)
 80039fc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003a00:	e9c3 1200 	strd	r1, r2, [r3]
 8003a04:	e31f      	b.n	8004046 <main+0xad2>
				}
				else if(HAL_GetTick() > timestamp){
 8003a06:	f002 fa89 	bl	8005f1c <HAL_GetTick>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	469a      	mov	sl, r3
 8003a10:	4693      	mov	fp, r2
 8003a12:	4b42      	ldr	r3, [pc, #264]	@ (8003b1c <main+0x5a8>)
 8003a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a18:	4552      	cmp	r2, sl
 8003a1a:	eb73 030b 	sbcs.w	r3, r3, fp
 8003a1e:	f080 8312 	bcs.w	8004046 <main+0xad2>
					eff.solenoid_command[0] = 0;
 8003a22:	4a3f      	ldr	r2, [pc, #252]	@ (8003b20 <main+0x5ac>)
 8003a24:	2300      	movs	r3, #0
 8003a26:	7093      	strb	r3, [r2, #2]
					eff.solenoid_command[1] = 0;
 8003a28:	4a3d      	ldr	r2, [pc, #244]	@ (8003b20 <main+0x5ac>)
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	70d3      	strb	r3, [r2, #3]
					eff.solenoid_command[2] = 1;
 8003a2e:	4a3c      	ldr	r2, [pc, #240]	@ (8003b20 <main+0x5ac>)
 8003a30:	2301      	movs	r3, #1
 8003a32:	7113      	strb	r3, [r2, #4]
 8003a34:	e307      	b.n	8004046 <main+0xad2>
				}
			}
			else if(testing == 0){
 8003a36:	4b35      	ldr	r3, [pc, #212]	@ (8003b0c <main+0x598>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f040 8303 	bne.w	8004046 <main+0xad2>
				// Check command from base system status
				//  homing command from Homing button and Base system Check command
				Set_Home(); // Refresh homing command from base system
 8003a40:	f7fd fb1c 	bl	800107c <Set_Home>
				if(state == 0b0010){
 8003a44:	4b37      	ldr	r3, [pc, #220]	@ (8003b24 <main+0x5b0>)
 8003a46:	881b      	ldrh	r3, [r3, #0]
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d113      	bne.n	8003a74 <main+0x500>
					// Have command from base system
					mode = WAIT; // Go to wait mode for Deactivate end effector
 8003a4c:	4a2e      	ldr	r2, [pc, #184]	@ (8003b08 <main+0x594>)
 8003a4e:	2300      	movs	r3, #0
 8003a50:	8013      	strh	r3, [r2, #0]
					home.homing_command = 1;
 8003a52:	4a35      	ldr	r2, [pc, #212]	@ (8003b28 <main+0x5b4>)
 8003a54:	2301      	movs	r3, #1
 8003a56:	7093      	strb	r3, [r2, #2]
					registerFrame[0x01].U16 = 0b0000; // Reset data of base system status
 8003a58:	4a34      	ldr	r2, [pc, #208]	@ (8003b2c <main+0x5b8>)
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	8053      	strh	r3, [r2, #2]
					registerFrame[0x10].U16 = 0b0010; // Set data of moving status to Home
 8003a5e:	4a33      	ldr	r2, [pc, #204]	@ (8003b2c <main+0x5b8>)
 8003a60:	2302      	movs	r3, #2
 8003a62:	8413      	strh	r3, [r2, #32]
					state = registerFrame[0x10].U16 = 0b0010;
 8003a64:	4a31      	ldr	r2, [pc, #196]	@ (8003b2c <main+0x5b8>)
 8003a66:	2302      	movs	r3, #2
 8003a68:	8413      	strh	r3, [r2, #32]
 8003a6a:	4b30      	ldr	r3, [pc, #192]	@ (8003b2c <main+0x5b8>)
 8003a6c:	8c1b      	ldrh	r3, [r3, #32]
 8003a6e:	4a2d      	ldr	r2, [pc, #180]	@ (8003b24 <main+0x5b0>)
 8003a70:	8013      	strh	r3, [r2, #0]
 8003a72:	e083      	b.n	8003b7c <main+0x608>
				}
				else if(HAL_GPIO_ReadPin(home_gpio, home_pin) == 1){
 8003a74:	2140      	movs	r1, #64	@ 0x40
 8003a76:	4822      	ldr	r0, [pc, #136]	@ (8003b00 <main+0x58c>)
 8003a78:	f004 fe42 	bl	8008700 <HAL_GPIO_ReadPin>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d110      	bne.n	8003aa4 <main+0x530>
					// Have command from home switch
					mode = WAIT;// Go to wait mode for Deactivate end effector
 8003a82:	4a21      	ldr	r2, [pc, #132]	@ (8003b08 <main+0x594>)
 8003a84:	2300      	movs	r3, #0
 8003a86:	8013      	strh	r3, [r2, #0]
					home.homing_command = 1;
 8003a88:	4a27      	ldr	r2, [pc, #156]	@ (8003b28 <main+0x5b4>)
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	7093      	strb	r3, [r2, #2]
					registerFrame[0x10].U16 = 0b0010; // Set data of moving status to Home
 8003a8e:	4a27      	ldr	r2, [pc, #156]	@ (8003b2c <main+0x5b8>)
 8003a90:	2302      	movs	r3, #2
 8003a92:	8413      	strh	r3, [r2, #32]
					state = registerFrame[0x10].U16 = 0b0010;
 8003a94:	4a25      	ldr	r2, [pc, #148]	@ (8003b2c <main+0x5b8>)
 8003a96:	2302      	movs	r3, #2
 8003a98:	8413      	strh	r3, [r2, #32]
 8003a9a:	4b24      	ldr	r3, [pc, #144]	@ (8003b2c <main+0x5b8>)
 8003a9c:	8c1b      	ldrh	r3, [r3, #32]
 8003a9e:	4a21      	ldr	r2, [pc, #132]	@ (8003b24 <main+0x5b0>)
 8003aa0:	8013      	strh	r3, [r2, #0]
 8003aa2:	e06b      	b.n	8003b7c <main+0x608>
				}

				// Go point command from base system
				else if(Run_Point_Mode() == 1){
 8003aa4:	f7fd face 	bl	8001044 <Run_Point_Mode>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d10d      	bne.n	8003aca <main+0x556>
					setpoint = Set_Goal_Point();
 8003aae:	f7fd fabd 	bl	800102c <Set_Goal_Point>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	ee07 3a90 	vmov	s15, r3
 8003ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003abc:	4b1c      	ldr	r3, [pc, #112]	@ (8003b30 <main+0x5bc>)
 8003abe:	edc3 7a00 	vstr	s15, [r3]
					ready = 1;
 8003ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8003b34 <main+0x5c0>)
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	7013      	strb	r3, [r2, #0]
 8003ac8:	e058      	b.n	8003b7c <main+0x608>
				}
				// Set shelves command from base system
				else if(Set_Shelves() == 1){
 8003aca:	f7fd fa87 	bl	8000fdc <Set_Shelves>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d133      	bne.n	8003b3c <main+0x5c8>
					joy.shelves_position[0] = 0;
 8003ad4:	4a18      	ldr	r2, [pc, #96]	@ (8003b38 <main+0x5c4>)
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	80d3      	strh	r3, [r2, #6]
					joy.shelves_position[1] = 0;
 8003ada:	4a17      	ldr	r2, [pc, #92]	@ (8003b38 <main+0x5c4>)
 8003adc:	2300      	movs	r3, #0
 8003ade:	8113      	strh	r3, [r2, #8]
					joy.shelves_position[2] = 0;
 8003ae0:	4a15      	ldr	r2, [pc, #84]	@ (8003b38 <main+0x5c4>)
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	8153      	strh	r3, [r2, #10]
					joy.shelves_position[3] = 0;
 8003ae6:	4a14      	ldr	r2, [pc, #80]	@ (8003b38 <main+0x5c4>)
 8003ae8:	2300      	movs	r3, #0
 8003aea:	8193      	strh	r3, [r2, #12]
					joy.shelves_position[4] = 0;
 8003aec:	4a12      	ldr	r2, [pc, #72]	@ (8003b38 <main+0x5c4>)
 8003aee:	2300      	movs	r3, #0
 8003af0:	81d3      	strh	r3, [r2, #14]
					ready = 1;
 8003af2:	4a10      	ldr	r2, [pc, #64]	@ (8003b34 <main+0x5c0>)
 8003af4:	2301      	movs	r3, #1
 8003af6:	7013      	strb	r3, [r2, #0]
 8003af8:	e040      	b.n	8003b7c <main+0x608>
 8003afa:	bf00      	nop
 8003afc:	200012f0 	.word	0x200012f0
 8003b00:	48000800 	.word	0x48000800
 8003b04:	20000974 	.word	0x20000974
 8003b08:	20000ec6 	.word	0x20000ec6
 8003b0c:	2000026a 	.word	0x2000026a
 8003b10:	20000b0c 	.word	0x20000b0c
 8003b14:	20000e90 	.word	0x20000e90
 8003b18:	48000400 	.word	0x48000400
 8003b1c:	200017c0 	.word	0x200017c0
 8003b20:	2000107c 	.word	0x2000107c
 8003b24:	2000032e 	.word	0x2000032e
 8003b28:	20000ed0 	.word	0x20000ed0
 8003b2c:	20000eec 	.word	0x20000eec
 8003b30:	20000ec0 	.word	0x20000ec0
 8003b34:	20000269 	.word	0x20000269
 8003b38:	20001214 	.word	0x20001214
				}
				// Run jog mode from base system
				else if(Run_Jog_Mode() == 1){
 8003b3c:	f7fd fc44 	bl	80013c8 <Run_Jog_Mode>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d11a      	bne.n	8003b7c <main+0x608>
					SetPick_PlaceOrder();
 8003b46:	f7fd fab5 	bl	80010b4 <SetPick_PlaceOrder>
					jog_status[0] = 1; // Go pick first
 8003b4a:	4a81      	ldr	r2, [pc, #516]	@ (8003d50 <main+0x7dc>)
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	7013      	strb	r3, [r2, #0]
					jog_status[1] = 0;
 8003b50:	4a7f      	ldr	r2, [pc, #508]	@ (8003d50 <main+0x7dc>)
 8003b52:	2300      	movs	r3, #0
 8003b54:	7053      	strb	r3, [r2, #1]
					state = 4;
 8003b56:	4a7f      	ldr	r2, [pc, #508]	@ (8003d54 <main+0x7e0>)
 8003b58:	2304      	movs	r3, #4
 8003b5a:	8013      	strh	r3, [r2, #0]
					strcpy(Jogmode, "Go to Pick...");
 8003b5c:	4a7e      	ldr	r2, [pc, #504]	@ (8003d58 <main+0x7e4>)
 8003b5e:	4b7f      	ldr	r3, [pc, #508]	@ (8003d5c <main+0x7e8>)
 8003b60:	4614      	mov	r4, r2
 8003b62:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003b64:	6020      	str	r0, [r4, #0]
 8003b66:	6061      	str	r1, [r4, #4]
 8003b68:	60a2      	str	r2, [r4, #8]
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	81a3      	strh	r3, [r4, #12]
					registerFrame[0x10].U16 = state;
 8003b6e:	4b79      	ldr	r3, [pc, #484]	@ (8003d54 <main+0x7e0>)
 8003b70:	881b      	ldrh	r3, [r3, #0]
 8003b72:	4a7b      	ldr	r2, [pc, #492]	@ (8003d60 <main+0x7ec>)
 8003b74:	8413      	strh	r3, [r2, #32]
					ready = 1;
 8003b76:	4a7b      	ldr	r2, [pc, #492]	@ (8003d64 <main+0x7f0>)
 8003b78:	2301      	movs	r3, #1
 8003b7a:	7013      	strb	r3, [r2, #0]
				}

				// Check state from z moving status
				// Set shelve
				if(state == 1){
 8003b7c:	4b75      	ldr	r3, [pc, #468]	@ (8003d54 <main+0x7e0>)
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	f040 8103 	bne.w	8003d8c <main+0x818>
					if(ready == 1){
 8003b86:	4b77      	ldr	r3, [pc, #476]	@ (8003d64 <main+0x7f0>)
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	f040 825b 	bne.w	8004046 <main+0xad2>
						static uint8_t i = 0;
						// Update joy stick command
						Update_joy(&joy);
 8003b90:	4875      	ldr	r0, [pc, #468]	@ (8003d68 <main+0x7f4>)
 8003b92:	f7ff fa9d 	bl	80030d0 <Update_joy>
						if(i > 4){
 8003b96:	4b75      	ldr	r3, [pc, #468]	@ (8003d6c <main+0x7f8>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d926      	bls.n	8003bec <main+0x678>
							registerFrame[0x23].U16 = joy.shelves_position[0];  //1st Shelve Position
 8003b9e:	4b72      	ldr	r3, [pc, #456]	@ (8003d68 <main+0x7f4>)
 8003ba0:	88db      	ldrh	r3, [r3, #6]
 8003ba2:	4a6f      	ldr	r2, [pc, #444]	@ (8003d60 <main+0x7ec>)
 8003ba4:	f8a2 3046 	strh.w	r3, [r2, #70]	@ 0x46
							registerFrame[0x24].U16 = joy.shelves_position[1];  //2nd Shelve Position
 8003ba8:	4b6f      	ldr	r3, [pc, #444]	@ (8003d68 <main+0x7f4>)
 8003baa:	891b      	ldrh	r3, [r3, #8]
 8003bac:	4a6c      	ldr	r2, [pc, #432]	@ (8003d60 <main+0x7ec>)
 8003bae:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
							registerFrame[0x25].U16 = joy.shelves_position[2];  //3rd Shelve Position
 8003bb2:	4b6d      	ldr	r3, [pc, #436]	@ (8003d68 <main+0x7f4>)
 8003bb4:	895b      	ldrh	r3, [r3, #10]
 8003bb6:	4a6a      	ldr	r2, [pc, #424]	@ (8003d60 <main+0x7ec>)
 8003bb8:	f8a2 304a 	strh.w	r3, [r2, #74]	@ 0x4a
							registerFrame[0x26].U16 = joy.shelves_position[3];  //4th Shelve Position
 8003bbc:	4b6a      	ldr	r3, [pc, #424]	@ (8003d68 <main+0x7f4>)
 8003bbe:	899b      	ldrh	r3, [r3, #12]
 8003bc0:	4a67      	ldr	r2, [pc, #412]	@ (8003d60 <main+0x7ec>)
 8003bc2:	f8a2 304c 	strh.w	r3, [r2, #76]	@ 0x4c
							registerFrame[0x27].U16 = joy.shelves_position[4];  //5th Shelve Position
 8003bc6:	4b68      	ldr	r3, [pc, #416]	@ (8003d68 <main+0x7f4>)
 8003bc8:	89db      	ldrh	r3, [r3, #14]
 8003bca:	4a65      	ldr	r2, [pc, #404]	@ (8003d60 <main+0x7ec>)
 8003bcc:	f8a2 304e 	strh.w	r3, [r2, #78]	@ 0x4e
							state = 0b0000;
 8003bd0:	4a60      	ldr	r2, [pc, #384]	@ (8003d54 <main+0x7e0>)
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	8013      	strh	r3, [r2, #0]
							registerFrame[0x10].U16 = state;
 8003bd6:	4b5f      	ldr	r3, [pc, #380]	@ (8003d54 <main+0x7e0>)
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	4a61      	ldr	r2, [pc, #388]	@ (8003d60 <main+0x7ec>)
 8003bdc:	8413      	strh	r3, [r2, #32]
							ready = 0;
 8003bde:	4a61      	ldr	r2, [pc, #388]	@ (8003d64 <main+0x7f0>)
 8003be0:	2300      	movs	r3, #0
 8003be2:	7013      	strb	r3, [r2, #0]
							i = 0;
 8003be4:	4a61      	ldr	r2, [pc, #388]	@ (8003d6c <main+0x7f8>)
 8003be6:	2300      	movs	r3, #0
 8003be8:	7013      	strb	r3, [r2, #0]
 8003bea:	e22c      	b.n	8004046 <main+0xad2>
						}
						else if (!joy.s_1 && joy.s_2 && joy.s_3 && joy.s_4){
 8003bec:	4b5e      	ldr	r3, [pc, #376]	@ (8003d68 <main+0x7f4>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d12f      	bne.n	8003c54 <main+0x6e0>
 8003bf4:	4b5c      	ldr	r3, [pc, #368]	@ (8003d68 <main+0x7f4>)
 8003bf6:	785b      	ldrb	r3, [r3, #1]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d02b      	beq.n	8003c54 <main+0x6e0>
 8003bfc:	4b5a      	ldr	r3, [pc, #360]	@ (8003d68 <main+0x7f4>)
 8003bfe:	789b      	ldrb	r3, [r3, #2]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d027      	beq.n	8003c54 <main+0x6e0>
 8003c04:	4b58      	ldr	r3, [pc, #352]	@ (8003d68 <main+0x7f4>)
 8003c06:	78db      	ldrb	r3, [r3, #3]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d023      	beq.n	8003c54 <main+0x6e0>
							if(joy.is_place == 1){
 8003c0c:	4b56      	ldr	r3, [pc, #344]	@ (8003d68 <main+0x7f4>)
 8003c0e:	791b      	ldrb	r3, [r3, #4]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	f040 8215 	bne.w	8004040 <main+0xacc>
								if(joy.is_place == 0){
 8003c16:	4b54      	ldr	r3, [pc, #336]	@ (8003d68 <main+0x7f4>)
 8003c18:	791b      	ldrb	r3, [r3, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f040 8210 	bne.w	8004040 <main+0xacc>
									setpoint = 20.0;
 8003c20:	4a53      	ldr	r2, [pc, #332]	@ (8003d70 <main+0x7fc>)
 8003c22:	4b54      	ldr	r3, [pc, #336]	@ (8003d74 <main+0x800>)
 8003c24:	6013      	str	r3, [r2, #0]
									initial_position = encoder.mm;
 8003c26:	4b54      	ldr	r3, [pc, #336]	@ (8003d78 <main+0x804>)
 8003c28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c2a:	4b54      	ldr	r3, [pc, #336]	@ (8003d7c <main+0x808>)
 8003c2c:	601a      	str	r2, [r3, #0]
									target_position = initial_position + setpoint;
 8003c2e:	4b53      	ldr	r3, [pc, #332]	@ (8003d7c <main+0x808>)
 8003c30:	ed93 7a00 	vldr	s14, [r3]
 8003c34:	4b4e      	ldr	r3, [pc, #312]	@ (8003d70 <main+0x7fc>)
 8003c36:	edd3 7a00 	vldr	s15, [r3]
 8003c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c3e:	4b50      	ldr	r3, [pc, #320]	@ (8003d80 <main+0x80c>)
 8003c40:	edc3 7a00 	vstr	s15, [r3]
									evaScurveData.t = 0;
 8003c44:	494f      	ldr	r1, [pc, #316]	@ (8003d84 <main+0x810>)
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	e9c1 2306 	strd	r2, r3, [r1, #24]
							if(joy.is_place == 1){
 8003c52:	e1f5      	b.n	8004040 <main+0xacc>
								}
							}
						}
						else if (joy.s_1 && !joy.s_2 && joy.s_3 && joy.s_4){
 8003c54:	4b44      	ldr	r3, [pc, #272]	@ (8003d68 <main+0x7f4>)
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00c      	beq.n	8003c76 <main+0x702>
 8003c5c:	4b42      	ldr	r3, [pc, #264]	@ (8003d68 <main+0x7f4>)
 8003c5e:	785b      	ldrb	r3, [r3, #1]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d108      	bne.n	8003c76 <main+0x702>
 8003c64:	4b40      	ldr	r3, [pc, #256]	@ (8003d68 <main+0x7f4>)
 8003c66:	789b      	ldrb	r3, [r3, #2]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d004      	beq.n	8003c76 <main+0x702>
 8003c6c:	4b3e      	ldr	r3, [pc, #248]	@ (8003d68 <main+0x7f4>)
 8003c6e:	78db      	ldrb	r3, [r3, #3]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f040 81e8 	bne.w	8004046 <main+0xad2>
							// switch 2 has pushed

						}
						else if (joy.s_1 && joy.s_2 && !joy.s_3 && joy.s_4){
 8003c76:	4b3c      	ldr	r3, [pc, #240]	@ (8003d68 <main+0x7f4>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d02f      	beq.n	8003cde <main+0x76a>
 8003c7e:	4b3a      	ldr	r3, [pc, #232]	@ (8003d68 <main+0x7f4>)
 8003c80:	785b      	ldrb	r3, [r3, #1]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d02b      	beq.n	8003cde <main+0x76a>
 8003c86:	4b38      	ldr	r3, [pc, #224]	@ (8003d68 <main+0x7f4>)
 8003c88:	789b      	ldrb	r3, [r3, #2]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d127      	bne.n	8003cde <main+0x76a>
 8003c8e:	4b36      	ldr	r3, [pc, #216]	@ (8003d68 <main+0x7f4>)
 8003c90:	78db      	ldrb	r3, [r3, #3]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d023      	beq.n	8003cde <main+0x76a>
							// switch 3 has pushed
							// save data for base system
							if(joy.is_place == 1){
 8003c96:	4b34      	ldr	r3, [pc, #208]	@ (8003d68 <main+0x7f4>)
 8003c98:	791b      	ldrb	r3, [r3, #4]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	f040 81d2 	bne.w	8004044 <main+0xad0>
								if(joy.is_place == 0){
 8003ca0:	4b31      	ldr	r3, [pc, #196]	@ (8003d68 <main+0x7f4>)
 8003ca2:	791b      	ldrb	r3, [r3, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f040 81cd 	bne.w	8004044 <main+0xad0>
									joy.shelves_position[i] = (uint16_t)(encoder.mm * 10);
 8003caa:	4b33      	ldr	r3, [pc, #204]	@ (8003d78 <main+0x804>)
 8003cac:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003cb0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003cb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cb8:	4b2c      	ldr	r3, [pc, #176]	@ (8003d6c <main+0x7f8>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cc0:	ee17 2a90 	vmov	r2, s15
 8003cc4:	b291      	uxth	r1, r2
 8003cc6:	4a28      	ldr	r2, [pc, #160]	@ (8003d68 <main+0x7f4>)
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	4413      	add	r3, r2
 8003ccc:	460a      	mov	r2, r1
 8003cce:	80da      	strh	r2, [r3, #6]
									i++;
 8003cd0:	4b26      	ldr	r3, [pc, #152]	@ (8003d6c <main+0x7f8>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	4a24      	ldr	r2, [pc, #144]	@ (8003d6c <main+0x7f8>)
 8003cda:	7013      	strb	r3, [r2, #0]
							if(joy.is_place == 1){
 8003cdc:	e1b2      	b.n	8004044 <main+0xad0>
								}
							}
						}
						else if (joy.s_1 && joy.s_2 && joy.s_3 && !joy.s_4){
 8003cde:	4b22      	ldr	r3, [pc, #136]	@ (8003d68 <main+0x7f4>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 81af 	beq.w	8004046 <main+0xad2>
 8003ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8003d68 <main+0x7f4>)
 8003cea:	785b      	ldrb	r3, [r3, #1]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 81aa 	beq.w	8004046 <main+0xad2>
 8003cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8003d68 <main+0x7f4>)
 8003cf4:	789b      	ldrb	r3, [r3, #2]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 81a5 	beq.w	8004046 <main+0xad2>
 8003cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8003d68 <main+0x7f4>)
 8003cfe:	78db      	ldrb	r3, [r3, #3]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f040 81a0 	bne.w	8004046 <main+0xad2>
							// switch 4 has pushed
							if(joy.is_place == 1){
 8003d06:	4b18      	ldr	r3, [pc, #96]	@ (8003d68 <main+0x7f4>)
 8003d08:	791b      	ldrb	r3, [r3, #4]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	f040 819b 	bne.w	8004046 <main+0xad2>
								if(joy.is_place == 0){
 8003d10:	4b15      	ldr	r3, [pc, #84]	@ (8003d68 <main+0x7f4>)
 8003d12:	791b      	ldrb	r3, [r3, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f040 8196 	bne.w	8004046 <main+0xad2>
									setpoint = -20.0;
 8003d1a:	4a15      	ldr	r2, [pc, #84]	@ (8003d70 <main+0x7fc>)
 8003d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8003d88 <main+0x814>)
 8003d1e:	6013      	str	r3, [r2, #0]
									initial_position = encoder.mm;
 8003d20:	4b15      	ldr	r3, [pc, #84]	@ (8003d78 <main+0x804>)
 8003d22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d24:	4b15      	ldr	r3, [pc, #84]	@ (8003d7c <main+0x808>)
 8003d26:	601a      	str	r2, [r3, #0]
									target_position = initial_position + setpoint;
 8003d28:	4b14      	ldr	r3, [pc, #80]	@ (8003d7c <main+0x808>)
 8003d2a:	ed93 7a00 	vldr	s14, [r3]
 8003d2e:	4b10      	ldr	r3, [pc, #64]	@ (8003d70 <main+0x7fc>)
 8003d30:	edd3 7a00 	vldr	s15, [r3]
 8003d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d38:	4b11      	ldr	r3, [pc, #68]	@ (8003d80 <main+0x80c>)
 8003d3a:	edc3 7a00 	vstr	s15, [r3]
									evaScurveData.t = 0;
 8003d3e:	4911      	ldr	r1, [pc, #68]	@ (8003d84 <main+0x810>)
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8003d4c:	e17b      	b.n	8004046 <main+0xad2>
 8003d4e:	bf00      	nop
 8003d50:	20000ec4 	.word	0x20000ec4
 8003d54:	2000032e 	.word	0x2000032e
 8003d58:	20000040 	.word	0x20000040
 8003d5c:	0800e86c 	.word	0x0800e86c
 8003d60:	20000eec 	.word	0x20000eec
 8003d64:	20000269 	.word	0x20000269
 8003d68:	20001214 	.word	0x20001214
 8003d6c:	200017c8 	.word	0x200017c8
 8003d70:	20000ec0 	.word	0x20000ec0
 8003d74:	41a00000 	.word	0x41a00000
 8003d78:	200012f8 	.word	0x200012f8
 8003d7c:	200017a8 	.word	0x200017a8
 8003d80:	20000278 	.word	0x20000278
 8003d84:	20001780 	.word	0x20001780
 8003d88:	c1a00000 	.word	0xc1a00000
							}
						}
					}
				}
				// Go pick
				else if(state == 4){
 8003d8c:	4b95      	ldr	r3, [pc, #596]	@ (8003fe4 <main+0xa70>)
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	d17d      	bne.n	8003e90 <main+0x91c>
					if(ready == 1){
 8003d94:	4b94      	ldr	r3, [pc, #592]	@ (8003fe8 <main+0xa74>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d130      	bne.n	8003dfe <main+0x88a>
						static uint8_t j = 0;
						if(j > 4){
 8003d9c:	4b93      	ldr	r3, [pc, #588]	@ (8003fec <main+0xa78>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d902      	bls.n	8003daa <main+0x836>
							j = 0;
 8003da4:	4a91      	ldr	r2, [pc, #580]	@ (8003fec <main+0xa78>)
 8003da6:	2300      	movs	r3, #0
 8003da8:	7013      	strb	r3, [r2, #0]
						}

						// Set up trajectory
						initial_position = encoder.mm;
 8003daa:	4b91      	ldr	r3, [pc, #580]	@ (8003ff0 <main+0xa7c>)
 8003dac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003dae:	4b91      	ldr	r3, [pc, #580]	@ (8003ff4 <main+0xa80>)
 8003db0:	601a      	str	r2, [r3, #0]
						target_position = (float)(joy.shelves_position[Pick[j]]) / 10.0;
 8003db2:	4b8e      	ldr	r3, [pc, #568]	@ (8003fec <main+0xa78>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	461a      	mov	r2, r3
 8003db8:	4b8f      	ldr	r3, [pc, #572]	@ (8003ff8 <main+0xa84>)
 8003dba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003dbe:	4a8f      	ldr	r2, [pc, #572]	@ (8003ffc <main+0xa88>)
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	4413      	add	r3, r2
 8003dc4:	88db      	ldrh	r3, [r3, #6]
 8003dc6:	ee07 3a90 	vmov	s15, r3
 8003dca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003dce:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003dd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003dd6:	4b8a      	ldr	r3, [pc, #552]	@ (8004000 <main+0xa8c>)
 8003dd8:	edc3 7a00 	vstr	s15, [r3]
						evaScurveData.t = 0;
 8003ddc:	4989      	ldr	r1, [pc, #548]	@ (8004004 <main+0xa90>)
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	e9c1 2306 	strd	r2, r3, [r1, #24]
						ready = 0;
 8003dea:	4a7f      	ldr	r2, [pc, #508]	@ (8003fe8 <main+0xa74>)
 8003dec:	2300      	movs	r3, #0
 8003dee:	7013      	strb	r3, [r2, #0]
						j++;
 8003df0:	4b7e      	ldr	r3, [pc, #504]	@ (8003fec <main+0xa78>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	3301      	adds	r3, #1
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	4a7c      	ldr	r2, [pc, #496]	@ (8003fec <main+0xa78>)
 8003dfa:	7013      	strb	r3, [r2, #0]
 8003dfc:	e123      	b.n	8004046 <main+0xad2>
					}
					else if(ready == 0){
 8003dfe:	4b7a      	ldr	r3, [pc, #488]	@ (8003fe8 <main+0xa74>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f040 811f 	bne.w	8004046 <main+0xad2>
						if(evaScurveData.isFinised == true){
 8003e08:	4b7e      	ldr	r3, [pc, #504]	@ (8004004 <main+0xa90>)
 8003e0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 8118 	beq.w	8004046 <main+0xad2>
							if((eff.actual_status[0] == 1) && (eff.actual_status[1] == 0)){
 8003e16:	4b7c      	ldr	r3, [pc, #496]	@ (8004008 <main+0xa94>)
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d10c      	bne.n	8003e38 <main+0x8c4>
 8003e1e:	4b7a      	ldr	r3, [pc, #488]	@ (8004008 <main+0xa94>)
 8003e20:	785b      	ldrb	r3, [r3, #1]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d108      	bne.n	8003e38 <main+0x8c4>
								// End effector is pull
								eff.solenoid_command[0] = 1;
 8003e26:	4a78      	ldr	r2, [pc, #480]	@ (8004008 <main+0xa94>)
 8003e28:	2301      	movs	r3, #1
 8003e2a:	7093      	strb	r3, [r2, #2]
								eff.solenoid_command[1] = 1; // Push forward
 8003e2c:	4a76      	ldr	r2, [pc, #472]	@ (8004008 <main+0xa94>)
 8003e2e:	2301      	movs	r3, #1
 8003e30:	70d3      	strb	r3, [r2, #3]
								eff.solenoid_command[2] = 0;
 8003e32:	4a75      	ldr	r2, [pc, #468]	@ (8004008 <main+0xa94>)
 8003e34:	2300      	movs	r3, #0
 8003e36:	7113      	strb	r3, [r2, #4]
							}
							if((eff.actual_status[0] == 0) && (eff.actual_status[1] == 1)){
 8003e38:	4b73      	ldr	r3, [pc, #460]	@ (8004008 <main+0xa94>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d116      	bne.n	8003e6e <main+0x8fa>
 8003e40:	4b71      	ldr	r3, [pc, #452]	@ (8004008 <main+0xa94>)
 8003e42:	785b      	ldrb	r3, [r3, #1]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d112      	bne.n	8003e6e <main+0x8fa>
								// End effector is push
								eff.solenoid_command[0] = 1;
 8003e48:	4a6f      	ldr	r2, [pc, #444]	@ (8004008 <main+0xa94>)
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	7093      	strb	r3, [r2, #2]
								eff.solenoid_command[1] = 0;
 8003e4e:	4a6e      	ldr	r2, [pc, #440]	@ (8004008 <main+0xa94>)
 8003e50:	2300      	movs	r3, #0
 8003e52:	70d3      	strb	r3, [r2, #3]
								eff.solenoid_command[2] = 1; // Pull back
 8003e54:	4a6c      	ldr	r2, [pc, #432]	@ (8004008 <main+0xa94>)
 8003e56:	2301      	movs	r3, #1
 8003e58:	7113      	strb	r3, [r2, #4]
								ready = 1;
 8003e5a:	4a63      	ldr	r2, [pc, #396]	@ (8003fe8 <main+0xa74>)
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	7013      	strb	r3, [r2, #0]
								state = 8; // Then go place
 8003e60:	4a60      	ldr	r2, [pc, #384]	@ (8003fe4 <main+0xa70>)
 8003e62:	2308      	movs	r3, #8
 8003e64:	8013      	strh	r3, [r2, #0]
								registerFrame[0x10].U16 = state;
 8003e66:	4b5f      	ldr	r3, [pc, #380]	@ (8003fe4 <main+0xa70>)
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	4a68      	ldr	r2, [pc, #416]	@ (800400c <main+0xa98>)
 8003e6c:	8413      	strh	r3, [r2, #32]
							}
							if((ready == 1) && (state == 8)){
 8003e6e:	4b5e      	ldr	r3, [pc, #376]	@ (8003fe8 <main+0xa74>)
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	f040 80e7 	bne.w	8004046 <main+0xad2>
 8003e78:	4b5a      	ldr	r3, [pc, #360]	@ (8003fe4 <main+0xa70>)
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	f040 80e2 	bne.w	8004046 <main+0xad2>
								// Deactivate solenoid valve
								eff.solenoid_command[1] = 0;
 8003e82:	4a61      	ldr	r2, [pc, #388]	@ (8004008 <main+0xa94>)
 8003e84:	2300      	movs	r3, #0
 8003e86:	70d3      	strb	r3, [r2, #3]
								eff.solenoid_command[2] = 0;
 8003e88:	4a5f      	ldr	r2, [pc, #380]	@ (8004008 <main+0xa94>)
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	7113      	strb	r3, [r2, #4]
 8003e8e:	e0da      	b.n	8004046 <main+0xad2>
							}
						}
					}
				}
				// Go place
				else if(state == 8){
 8003e90:	4b54      	ldr	r3, [pc, #336]	@ (8003fe4 <main+0xa70>)
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	f040 8089 	bne.w	8003fac <main+0xa38>
					if(ready == 1){
 8003e9a:	4b53      	ldr	r3, [pc, #332]	@ (8003fe8 <main+0xa74>)
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d13a      	bne.n	8003f18 <main+0x9a4>
						static uint8_t k = 0;
						if(k > 4){
 8003ea2:	4b5b      	ldr	r3, [pc, #364]	@ (8004010 <main+0xa9c>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	d90c      	bls.n	8003ec4 <main+0x950>
							k = 0;
 8003eaa:	4a59      	ldr	r2, [pc, #356]	@ (8004010 <main+0xa9c>)
 8003eac:	2300      	movs	r3, #0
 8003eae:	7013      	strb	r3, [r2, #0]
							state = 0b0000;
 8003eb0:	4a4c      	ldr	r2, [pc, #304]	@ (8003fe4 <main+0xa70>)
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	8013      	strh	r3, [r2, #0]
							registerFrame[0x10].U16 = state;
 8003eb6:	4b4b      	ldr	r3, [pc, #300]	@ (8003fe4 <main+0xa70>)
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	4a54      	ldr	r2, [pc, #336]	@ (800400c <main+0xa98>)
 8003ebc:	8413      	strh	r3, [r2, #32]
							ready = 0;
 8003ebe:	4a4a      	ldr	r2, [pc, #296]	@ (8003fe8 <main+0xa74>)
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	7013      	strb	r3, [r2, #0]
						}

						// Set up trajectory
						initial_position = encoder.mm;
 8003ec4:	4b4a      	ldr	r3, [pc, #296]	@ (8003ff0 <main+0xa7c>)
 8003ec6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ec8:	4b4a      	ldr	r3, [pc, #296]	@ (8003ff4 <main+0xa80>)
 8003eca:	601a      	str	r2, [r3, #0]
						target_position = (float)(joy.shelves_position[Place[k]]) / 10.0;
 8003ecc:	4b50      	ldr	r3, [pc, #320]	@ (8004010 <main+0xa9c>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	4b50      	ldr	r3, [pc, #320]	@ (8004014 <main+0xaa0>)
 8003ed4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003ed8:	4a48      	ldr	r2, [pc, #288]	@ (8003ffc <main+0xa88>)
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	4413      	add	r3, r2
 8003ede:	88db      	ldrh	r3, [r3, #6]
 8003ee0:	ee07 3a90 	vmov	s15, r3
 8003ee4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ee8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8003eec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ef0:	4b43      	ldr	r3, [pc, #268]	@ (8004000 <main+0xa8c>)
 8003ef2:	edc3 7a00 	vstr	s15, [r3]
						evaScurveData.t = 0;
 8003ef6:	4943      	ldr	r1, [pc, #268]	@ (8004004 <main+0xa90>)
 8003ef8:	f04f 0200 	mov.w	r2, #0
 8003efc:	f04f 0300 	mov.w	r3, #0
 8003f00:	e9c1 2306 	strd	r2, r3, [r1, #24]
						ready = 0;
 8003f04:	4a38      	ldr	r2, [pc, #224]	@ (8003fe8 <main+0xa74>)
 8003f06:	2300      	movs	r3, #0
 8003f08:	7013      	strb	r3, [r2, #0]
						k++;
 8003f0a:	4b41      	ldr	r3, [pc, #260]	@ (8004010 <main+0xa9c>)
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	4a3f      	ldr	r2, [pc, #252]	@ (8004010 <main+0xa9c>)
 8003f14:	7013      	strb	r3, [r2, #0]
 8003f16:	e096      	b.n	8004046 <main+0xad2>
					}
					else if(ready == 0){
 8003f18:	4b33      	ldr	r3, [pc, #204]	@ (8003fe8 <main+0xa74>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f040 8092 	bne.w	8004046 <main+0xad2>
						if(evaScurveData.isFinised == true){
 8003f22:	4b38      	ldr	r3, [pc, #224]	@ (8004004 <main+0xa90>)
 8003f24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 808b 	beq.w	8004046 <main+0xad2>
							if((eff.actual_status[0] == 1) && (eff.actual_status[1] == 0)){
 8003f30:	4b35      	ldr	r3, [pc, #212]	@ (8004008 <main+0xa94>)
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d10c      	bne.n	8003f52 <main+0x9de>
 8003f38:	4b33      	ldr	r3, [pc, #204]	@ (8004008 <main+0xa94>)
 8003f3a:	785b      	ldrb	r3, [r3, #1]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d108      	bne.n	8003f52 <main+0x9de>
								// End effector is pull
								eff.solenoid_command[0] = 1;
 8003f40:	4a31      	ldr	r2, [pc, #196]	@ (8004008 <main+0xa94>)
 8003f42:	2301      	movs	r3, #1
 8003f44:	7093      	strb	r3, [r2, #2]
								eff.solenoid_command[1] = 1; // Push forward
 8003f46:	4a30      	ldr	r2, [pc, #192]	@ (8004008 <main+0xa94>)
 8003f48:	2301      	movs	r3, #1
 8003f4a:	70d3      	strb	r3, [r2, #3]
								eff.solenoid_command[2] = 0;
 8003f4c:	4a2e      	ldr	r2, [pc, #184]	@ (8004008 <main+0xa94>)
 8003f4e:	2300      	movs	r3, #0
 8003f50:	7113      	strb	r3, [r2, #4]
							}
							if((eff.actual_status[0] == 0) && (eff.actual_status[1] == 1)){
 8003f52:	4b2d      	ldr	r3, [pc, #180]	@ (8004008 <main+0xa94>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d116      	bne.n	8003f88 <main+0xa14>
 8003f5a:	4b2b      	ldr	r3, [pc, #172]	@ (8004008 <main+0xa94>)
 8003f5c:	785b      	ldrb	r3, [r3, #1]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d112      	bne.n	8003f88 <main+0xa14>
								// End effector is push
								eff.solenoid_command[0] = 0;
 8003f62:	4a29      	ldr	r2, [pc, #164]	@ (8004008 <main+0xa94>)
 8003f64:	2300      	movs	r3, #0
 8003f66:	7093      	strb	r3, [r2, #2]
								eff.solenoid_command[1] = 0;
 8003f68:	4a27      	ldr	r2, [pc, #156]	@ (8004008 <main+0xa94>)
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	70d3      	strb	r3, [r2, #3]
								eff.solenoid_command[2] = 1; // Pull back
 8003f6e:	4a26      	ldr	r2, [pc, #152]	@ (8004008 <main+0xa94>)
 8003f70:	2301      	movs	r3, #1
 8003f72:	7113      	strb	r3, [r2, #4]
								ready = 1;
 8003f74:	4a1c      	ldr	r2, [pc, #112]	@ (8003fe8 <main+0xa74>)
 8003f76:	2301      	movs	r3, #1
 8003f78:	7013      	strb	r3, [r2, #0]
								state = 4; // Then go place
 8003f7a:	4a1a      	ldr	r2, [pc, #104]	@ (8003fe4 <main+0xa70>)
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	8013      	strh	r3, [r2, #0]
								registerFrame[0x10].U16 = state;
 8003f80:	4b18      	ldr	r3, [pc, #96]	@ (8003fe4 <main+0xa70>)
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	4a21      	ldr	r2, [pc, #132]	@ (800400c <main+0xa98>)
 8003f86:	8413      	strh	r3, [r2, #32]
							}
							if((ready == 1) && (state == 4)){
 8003f88:	4b17      	ldr	r3, [pc, #92]	@ (8003fe8 <main+0xa74>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d15a      	bne.n	8004046 <main+0xad2>
 8003f90:	4b14      	ldr	r3, [pc, #80]	@ (8003fe4 <main+0xa70>)
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d156      	bne.n	8004046 <main+0xad2>
								// Deactivate solenoid valve
								eff.solenoid_command[0] = 0;
 8003f98:	4a1b      	ldr	r2, [pc, #108]	@ (8004008 <main+0xa94>)
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	7093      	strb	r3, [r2, #2]
								eff.solenoid_command[1] = 0;
 8003f9e:	4a1a      	ldr	r2, [pc, #104]	@ (8004008 <main+0xa94>)
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	70d3      	strb	r3, [r2, #3]
								eff.solenoid_command[2] = 0;
 8003fa4:	4a18      	ldr	r2, [pc, #96]	@ (8004008 <main+0xa94>)
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	7113      	strb	r3, [r2, #4]
 8003faa:	e04c      	b.n	8004046 <main+0xad2>
							}
						}
					}
				}
				// Run point mode
				else if(state == 16){
 8003fac:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe4 <main+0xa70>)
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	2b10      	cmp	r3, #16
 8003fb2:	d148      	bne.n	8004046 <main+0xad2>
					if(ready == 1){
 8003fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe8 <main+0xa74>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d12f      	bne.n	800401c <main+0xaa8>
						initial_position = encoder.mm;
 8003fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff0 <main+0xa7c>)
 8003fbe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff4 <main+0xa80>)
 8003fc2:	601a      	str	r2, [r3, #0]
						target_position = setpoint;
 8003fc4:	4b14      	ldr	r3, [pc, #80]	@ (8004018 <main+0xaa4>)
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8004000 <main+0xa8c>)
 8003fca:	601a      	str	r2, [r3, #0]
						evaScurveData.t = 0;
 8003fcc:	490d      	ldr	r1, [pc, #52]	@ (8004004 <main+0xa90>)
 8003fce:	f04f 0200 	mov.w	r2, #0
 8003fd2:	f04f 0300 	mov.w	r3, #0
 8003fd6:	e9c1 2306 	strd	r2, r3, [r1, #24]
						ready = 0;
 8003fda:	4a03      	ldr	r2, [pc, #12]	@ (8003fe8 <main+0xa74>)
 8003fdc:	2300      	movs	r3, #0
 8003fde:	7013      	strb	r3, [r2, #0]
 8003fe0:	e031      	b.n	8004046 <main+0xad2>
 8003fe2:	bf00      	nop
 8003fe4:	2000032e 	.word	0x2000032e
 8003fe8:	20000269 	.word	0x20000269
 8003fec:	200017c9 	.word	0x200017c9
 8003ff0:	200012f8 	.word	0x200012f8
 8003ff4:	200017a8 	.word	0x200017a8
 8003ff8:	20000314 	.word	0x20000314
 8003ffc:	20001214 	.word	0x20001214
 8004000:	20000278 	.word	0x20000278
 8004004:	20001780 	.word	0x20001780
 8004008:	2000107c 	.word	0x2000107c
 800400c:	20000eec 	.word	0x20000eec
 8004010:	200017ca 	.word	0x200017ca
 8004014:	20000320 	.word	0x20000320
 8004018:	20000ec0 	.word	0x20000ec0
					}
					else if((evaScurveData.isFinised == true) && (ready == 0)){
 800401c:	4b81      	ldr	r3, [pc, #516]	@ (8004224 <main+0xcb0>)
 800401e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00e      	beq.n	8004046 <main+0xad2>
 8004028:	4b7f      	ldr	r3, [pc, #508]	@ (8004228 <main+0xcb4>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10a      	bne.n	8004046 <main+0xad2>
						state = 0b0000;
 8004030:	4a7e      	ldr	r2, [pc, #504]	@ (800422c <main+0xcb8>)
 8004032:	2300      	movs	r3, #0
 8004034:	8013      	strh	r3, [r2, #0]
						registerFrame[0x10].U16 = state;
 8004036:	4b7d      	ldr	r3, [pc, #500]	@ (800422c <main+0xcb8>)
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	4a7d      	ldr	r2, [pc, #500]	@ (8004230 <main+0xcbc>)
 800403c:	8413      	strh	r3, [r2, #32]
 800403e:	e002      	b.n	8004046 <main+0xad2>
							if(joy.is_place == 1){
 8004040:	bf00      	nop
 8004042:	e000      	b.n	8004046 <main+0xad2>
							if(joy.is_place == 1){
 8004044:	bf00      	nop
					}
				}
			}

			// Main controller loop
			if(is_update_encoder == 1 && !(state == 2)){
 8004046:	4b7b      	ldr	r3, [pc, #492]	@ (8004234 <main+0xcc0>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	2b01      	cmp	r3, #1
 800404c:	f040 8086 	bne.w	800415c <main+0xbe8>
 8004050:	4b76      	ldr	r3, [pc, #472]	@ (800422c <main+0xcb8>)
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	2b02      	cmp	r3, #2
 8004056:	f000 8081 	beq.w	800415c <main+0xbe8>
				Update_qei(&encoder, &htim4); // Update encoder
 800405a:	4977      	ldr	r1, [pc, #476]	@ (8004238 <main+0xcc4>)
 800405c:	4877      	ldr	r0, [pc, #476]	@ (800423c <main+0xcc8>)
 800405e:	f001 f81b 	bl	8005098 <Update_qei>
//				kalman_velocity = SteadyStateKalmanFilter(&kalman, ((float)pwm_signal * 24.0)/65535.0, encoder.radps / 2.0);
//				kalman_velocity_z = kalman_velocity * 2.0 * 16.0 / (2.0 * M_PI);
				Trajectory_Generator(&genScurveData, initial_position, target_position, max_velocity, max_acceleration, max_jerk); // Generate trajectory
 8004062:	4b77      	ldr	r3, [pc, #476]	@ (8004240 <main+0xccc>)
 8004064:	edd3 7a00 	vldr	s15, [r3]
 8004068:	4b76      	ldr	r3, [pc, #472]	@ (8004244 <main+0xcd0>)
 800406a:	ed93 7a00 	vldr	s14, [r3]
 800406e:	4b76      	ldr	r3, [pc, #472]	@ (8004248 <main+0xcd4>)
 8004070:	edd3 6a00 	vldr	s13, [r3]
 8004074:	4b75      	ldr	r3, [pc, #468]	@ (800424c <main+0xcd8>)
 8004076:	ed93 6a00 	vldr	s12, [r3]
 800407a:	4b75      	ldr	r3, [pc, #468]	@ (8004250 <main+0xcdc>)
 800407c:	edd3 5a00 	vldr	s11, [r3]
 8004080:	eeb0 2a65 	vmov.f32	s4, s11
 8004084:	eef0 1a46 	vmov.f32	s3, s12
 8004088:	eeb0 1a66 	vmov.f32	s2, s13
 800408c:	eef0 0a47 	vmov.f32	s1, s14
 8004090:	eeb0 0a67 	vmov.f32	s0, s15
 8004094:	486f      	ldr	r0, [pc, #444]	@ (8004254 <main+0xce0>)
 8004096:	f7fd fce7 	bl	8001a68 <Trajectory_Generator>
				Trajectory_Evaluated(&genScurveData, &evaScurveData, initial_position, target_position, max_velocity, max_acceleration, max_jerk); // Evaluate trajectory
 800409a:	4b69      	ldr	r3, [pc, #420]	@ (8004240 <main+0xccc>)
 800409c:	edd3 7a00 	vldr	s15, [r3]
 80040a0:	4b68      	ldr	r3, [pc, #416]	@ (8004244 <main+0xcd0>)
 80040a2:	ed93 7a00 	vldr	s14, [r3]
 80040a6:	4b68      	ldr	r3, [pc, #416]	@ (8004248 <main+0xcd4>)
 80040a8:	edd3 6a00 	vldr	s13, [r3]
 80040ac:	4b67      	ldr	r3, [pc, #412]	@ (800424c <main+0xcd8>)
 80040ae:	ed93 6a00 	vldr	s12, [r3]
 80040b2:	4b67      	ldr	r3, [pc, #412]	@ (8004250 <main+0xcdc>)
 80040b4:	edd3 5a00 	vldr	s11, [r3]
 80040b8:	eeb0 2a65 	vmov.f32	s4, s11
 80040bc:	eef0 1a46 	vmov.f32	s3, s12
 80040c0:	eeb0 1a66 	vmov.f32	s2, s13
 80040c4:	eef0 0a47 	vmov.f32	s1, s14
 80040c8:	eeb0 0a67 	vmov.f32	s0, s15
 80040cc:	4955      	ldr	r1, [pc, #340]	@ (8004224 <main+0xcb0>)
 80040ce:	4861      	ldr	r0, [pc, #388]	@ (8004254 <main+0xce0>)
 80040d0:	f7fe f8a6 	bl	8002220 <Trajectory_Evaluated>
				setpoint_pos = evaScurveData.setposition; // Position set point
 80040d4:	4b53      	ldr	r3, [pc, #332]	@ (8004224 <main+0xcb0>)
 80040d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040da:	495f      	ldr	r1, [pc, #380]	@ (8004258 <main+0xce4>)
 80040dc:	e9c1 2300 	strd	r2, r3, [r1]
				setpoint_vel = evaScurveData.setvelocity; // Feed forward velocity
 80040e0:	4b50      	ldr	r3, [pc, #320]	@ (8004224 <main+0xcb0>)
 80040e2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80040e6:	495d      	ldr	r1, [pc, #372]	@ (800425c <main+0xce8>)
 80040e8:	e9c1 2300 	strd	r2, r3, [r1]
				if(start_position_control == 1){
 80040ec:	4b5c      	ldr	r3, [pc, #368]	@ (8004260 <main+0xcec>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d10e      	bne.n	8004112 <main+0xb9e>
					Update_position_control(setpoint_pos);
 80040f4:	4b58      	ldr	r3, [pc, #352]	@ (8004258 <main+0xce4>)
 80040f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fa:	4610      	mov	r0, r2
 80040fc:	4619      	mov	r1, r3
 80040fe:	f7fc fd17 	bl	8000b30 <__aeabi_d2f>
 8004102:	4603      	mov	r3, r0
 8004104:	ee00 3a10 	vmov	s0, r3
 8004108:	f000 fdbc 	bl	8004c84 <Update_position_control>
					start_position_control = 0;
 800410c:	4a54      	ldr	r2, [pc, #336]	@ (8004260 <main+0xcec>)
 800410e:	2300      	movs	r3, #0
 8004110:	7013      	strb	r3, [r2, #0]
				}
				Update_velocity_control(setpoint_vel + p_output);
 8004112:	4b54      	ldr	r3, [pc, #336]	@ (8004264 <main+0xcf0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f7fc f9e2 	bl	80004e0 <__aeabi_f2d>
 800411c:	4b4f      	ldr	r3, [pc, #316]	@ (800425c <main+0xce8>)
 800411e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004122:	f7fc f87f 	bl	8000224 <__adddf3>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4610      	mov	r0, r2
 800412c:	4619      	mov	r1, r3
 800412e:	f7fc fcff 	bl	8000b30 <__aeabi_d2f>
 8004132:	4603      	mov	r3, r0
 8004134:	ee00 3a10 	vmov	s0, r3
 8004138:	f000 fd72 	bl	8004c20 <Update_velocity_control>
				pwm_signal = v_output;
 800413c:	4b4a      	ldr	r3, [pc, #296]	@ (8004268 <main+0xcf4>)
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	4b4a      	ldr	r3, [pc, #296]	@ (800426c <main+0xcf8>)
 8004142:	601a      	str	r2, [r3, #0]
				Update_pwm(&pwm_tim, pwm_channel, dir_gpio, dir_pin, pwm_signal); // Update main PWM signal
 8004144:	4b49      	ldr	r3, [pc, #292]	@ (800426c <main+0xcf8>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	2302      	movs	r3, #2
 800414c:	4a48      	ldr	r2, [pc, #288]	@ (8004270 <main+0xcfc>)
 800414e:	2100      	movs	r1, #0
 8004150:	4848      	ldr	r0, [pc, #288]	@ (8004274 <main+0xd00>)
 8004152:	f000 feb3 	bl	8004ebc <Update_pwm>
				is_update_encoder = 0;
 8004156:	4a37      	ldr	r2, [pc, #220]	@ (8004234 <main+0xcc0>)
 8004158:	2300      	movs	r3, #0
 800415a:	7013      	strb	r3, [r2, #0]
			}
			if(!(state == 1 && state == 2 && state == 4 && state == 8 && state == 16)){
 800415c:	4b33      	ldr	r3, [pc, #204]	@ (800422c <main+0xcb8>)
 800415e:	881b      	ldrh	r3, [r3, #0]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d10f      	bne.n	8004184 <main+0xc10>
 8004164:	4b31      	ldr	r3, [pc, #196]	@ (800422c <main+0xcb8>)
 8004166:	881b      	ldrh	r3, [r3, #0]
 8004168:	2b02      	cmp	r3, #2
 800416a:	d10b      	bne.n	8004184 <main+0xc10>
 800416c:	4b2f      	ldr	r3, [pc, #188]	@ (800422c <main+0xcb8>)
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	2b04      	cmp	r3, #4
 8004172:	d107      	bne.n	8004184 <main+0xc10>
 8004174:	4b2d      	ldr	r3, [pc, #180]	@ (800422c <main+0xcb8>)
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	2b08      	cmp	r3, #8
 800417a:	d103      	bne.n	8004184 <main+0xc10>
 800417c:	4b2b      	ldr	r3, [pc, #172]	@ (800422c <main+0xcb8>)
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	2b10      	cmp	r3, #16
 8004182:	d014      	beq.n	80041ae <main+0xc3a>
				// Update peripheral
				Vacuum_Status(&eff); // Vacuum
 8004184:	483c      	ldr	r0, [pc, #240]	@ (8004278 <main+0xd04>)
 8004186:	f7fc fe9b 	bl	8000ec0 <Vacuum_Status>
				Gripper_Movement_Status(&eff); // End effector
 800418a:	483b      	ldr	r0, [pc, #236]	@ (8004278 <main+0xd04>)
 800418c:	f7fc fec4 	bl	8000f18 <Gripper_Movement_Status>
				// End effector update
				Update_eff(&eff, solenoid_pull_gpio, solenoid_pull_pin, solenoid_push_gpio, solenoid_push_pin, vacuum_gpio, vacuum_pin);
 8004190:	2310      	movs	r3, #16
 8004192:	9302      	str	r3, [sp, #8]
 8004194:	4b39      	ldr	r3, [pc, #228]	@ (800427c <main+0xd08>)
 8004196:	9301      	str	r3, [sp, #4]
 8004198:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80041a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041a6:	4935      	ldr	r1, [pc, #212]	@ (800427c <main+0xd08>)
 80041a8:	4833      	ldr	r0, [pc, #204]	@ (8004278 <main+0xd04>)
 80041aa:	f7fe ff70 	bl	800308e <Update_eff>
			}
		}

		if(mode == HOMING){
 80041ae:	4b34      	ldr	r3, [pc, #208]	@ (8004280 <main+0xd0c>)
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d11d      	bne.n	80041f2 <main+0xc7e>
			if(home.is_home == 1){
 80041b6:	4b33      	ldr	r3, [pc, #204]	@ (8004284 <main+0xd10>)
 80041b8:	78db      	ldrb	r3, [r3, #3]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d119      	bne.n	80041f2 <main+0xc7e>
				// Finish homing state
				Reset_qei(&encoder); // Reset encoder data
 80041be:	481f      	ldr	r0, [pc, #124]	@ (800423c <main+0xcc8>)
 80041c0:	f001 f8a4 	bl	800530c <Reset_qei>
				registerFrame[0x10].U16 = 0b0000; // Reset data of moving status
 80041c4:	4a1a      	ldr	r2, [pc, #104]	@ (8004230 <main+0xcbc>)
 80041c6:	2300      	movs	r3, #0
 80041c8:	8413      	strh	r3, [r2, #32]
				home.is_home = 0;
 80041ca:	4a2e      	ldr	r2, [pc, #184]	@ (8004284 <main+0xd10>)
 80041cc:	2300      	movs	r3, #0
 80041ce:	70d3      	strb	r3, [r2, #3]
				// Trajectory setup for hold position
				initial_position = 0;
 80041d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004240 <main+0xccc>)
 80041d2:	f04f 0300 	mov.w	r3, #0
 80041d6:	6013      	str	r3, [r2, #0]
				target_position = 10;
 80041d8:	4a1a      	ldr	r2, [pc, #104]	@ (8004244 <main+0xcd0>)
 80041da:	4b2b      	ldr	r3, [pc, #172]	@ (8004288 <main+0xd14>)
 80041dc:	6013      	str	r3, [r2, #0]
				evaScurveData.t = 0;
 80041de:	4911      	ldr	r1, [pc, #68]	@ (8004224 <main+0xcb0>)
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	e9c1 2306 	strd	r2, r3, [r1, #24]
				// Change Mode
				mode = RUNNING;
 80041ec:	4a24      	ldr	r2, [pc, #144]	@ (8004280 <main+0xd0c>)
 80041ee:	2301      	movs	r3, #1
 80041f0:	8013      	strh	r3, [r2, #0]
			}
		}

		if(mode == EMERGENCY){
 80041f2:	4b23      	ldr	r3, [pc, #140]	@ (8004280 <main+0xd0c>)
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	2b03      	cmp	r3, #3
 80041f8:	f47f aa5d 	bne.w	80036b6 <main+0x142>
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1){
 80041fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004200:	481e      	ldr	r0, [pc, #120]	@ (800427c <main+0xd08>)
 8004202:	f004 fa7d 	bl	8008700 <HAL_GPIO_ReadPin>
 8004206:	4603      	mov	r3, r0
 8004208:	2b01      	cmp	r3, #1
 800420a:	f47f aa54 	bne.w	80036b6 <main+0x142>
				HAL_GPIO_WritePin(emer_light_gpio, emer_light_pin, RESET);
 800420e:	2200      	movs	r2, #0
 8004210:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004214:	4816      	ldr	r0, [pc, #88]	@ (8004270 <main+0xcfc>)
 8004216:	f004 fa8b 	bl	8008730 <HAL_GPIO_WritePin>
				mode = WAIT;
 800421a:	4a19      	ldr	r2, [pc, #100]	@ (8004280 <main+0xd0c>)
 800421c:	2300      	movs	r3, #0
 800421e:	8013      	strh	r3, [r2, #0]
		Modbus_Protocal_Worker();
 8004220:	f7ff ba49 	b.w	80036b6 <main+0x142>
 8004224:	20001780 	.word	0x20001780
 8004228:	20000269 	.word	0x20000269
 800422c:	2000032e 	.word	0x2000032e
 8004230:	20000eec 	.word	0x20000eec
 8004234:	200012f4 	.word	0x200012f4
 8004238:	20000b0c 	.word	0x20000b0c
 800423c:	200012f8 	.word	0x200012f8
 8004240:	200017a8 	.word	0x200017a8
 8004244:	20000278 	.word	0x20000278
 8004248:	2000027c 	.word	0x2000027c
 800424c:	20000280 	.word	0x20000280
 8004250:	20000284 	.word	0x20000284
 8004254:	20001738 	.word	0x20001738
 8004258:	200017b0 	.word	0x200017b0
 800425c:	200017b8 	.word	0x200017b8
 8004260:	200013ac 	.word	0x200013ac
 8004264:	200013a8 	.word	0x200013a8
 8004268:	20001378 	.word	0x20001378
 800426c:	200012f0 	.word	0x200012f0
 8004270:	48000800 	.word	0x48000800
 8004274:	20000974 	.word	0x20000974
 8004278:	2000107c 	.word	0x2000107c
 800427c:	48000400 	.word	0x48000400
 8004280:	20000ec6 	.word	0x20000ec6
 8004284:	20000ed0 	.word	0x20000ed0
 8004288:	41200000 	.word	0x41200000

0800428c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b094      	sub	sp, #80	@ 0x50
 8004290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004292:	f107 0318 	add.w	r3, r7, #24
 8004296:	2238      	movs	r2, #56	@ 0x38
 8004298:	2100      	movs	r1, #0
 800429a:	4618      	mov	r0, r3
 800429c:	f009 faa6 	bl	800d7ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042a0:	1d3b      	adds	r3, r7, #4
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	605a      	str	r2, [r3, #4]
 80042a8:	609a      	str	r2, [r3, #8]
 80042aa:	60da      	str	r2, [r3, #12]
 80042ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80042ae:	2000      	movs	r0, #0
 80042b0:	f004 fa6e 	bl	8008790 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80042b4:	2301      	movs	r3, #1
 80042b6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80042b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80042bc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042be:	2302      	movs	r3, #2
 80042c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80042c2:	2303      	movs	r3, #3
 80042c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80042c6:	2306      	movs	r3, #6
 80042c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80042ca:	2355      	movs	r3, #85	@ 0x55
 80042cc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80042ce:	2302      	movs	r3, #2
 80042d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80042d2:	2302      	movs	r3, #2
 80042d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80042d6:	2302      	movs	r3, #2
 80042d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042da:	f107 0318 	add.w	r3, r7, #24
 80042de:	4618      	mov	r0, r3
 80042e0:	f004 fb0a 	bl	80088f8 <HAL_RCC_OscConfig>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <SystemClock_Config+0x62>
  {
    Error_Handler();
 80042ea:	f000 fcfb 	bl	8004ce4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042ee:	230f      	movs	r3, #15
 80042f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042f2:	2303      	movs	r3, #3
 80042f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042f6:	2300      	movs	r3, #0
 80042f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80042fa:	2300      	movs	r3, #0
 80042fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004302:	1d3b      	adds	r3, r7, #4
 8004304:	2104      	movs	r1, #4
 8004306:	4618      	mov	r0, r3
 8004308:	f004 fe08 	bl	8008f1c <HAL_RCC_ClockConfig>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8004312:	f000 fce7 	bl	8004ce4 <Error_Handler>
  }
}
 8004316:	bf00      	nop
 8004318:	3750      	adds	r7, #80	@ 0x50
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08c      	sub	sp, #48	@ 0x30
 8004324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004326:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	605a      	str	r2, [r3, #4]
 8004330:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004332:	1d3b      	adds	r3, r7, #4
 8004334:	2220      	movs	r2, #32
 8004336:	2100      	movs	r1, #0
 8004338:	4618      	mov	r0, r3
 800433a:	f009 fa57 	bl	800d7ec <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800433e:	4b32      	ldr	r3, [pc, #200]	@ (8004408 <MX_ADC1_Init+0xe8>)
 8004340:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004344:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004346:	4b30      	ldr	r3, [pc, #192]	@ (8004408 <MX_ADC1_Init+0xe8>)
 8004348:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800434c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800434e:	4b2e      	ldr	r3, [pc, #184]	@ (8004408 <MX_ADC1_Init+0xe8>)
 8004350:	2200      	movs	r2, #0
 8004352:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004354:	4b2c      	ldr	r3, [pc, #176]	@ (8004408 <MX_ADC1_Init+0xe8>)
 8004356:	2200      	movs	r2, #0
 8004358:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800435a:	4b2b      	ldr	r3, [pc, #172]	@ (8004408 <MX_ADC1_Init+0xe8>)
 800435c:	2200      	movs	r2, #0
 800435e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004360:	4b29      	ldr	r3, [pc, #164]	@ (8004408 <MX_ADC1_Init+0xe8>)
 8004362:	2200      	movs	r2, #0
 8004364:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004366:	4b28      	ldr	r3, [pc, #160]	@ (8004408 <MX_ADC1_Init+0xe8>)
 8004368:	2204      	movs	r2, #4
 800436a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800436c:	4b26      	ldr	r3, [pc, #152]	@ (8004408 <MX_ADC1_Init+0xe8>)
 800436e:	2200      	movs	r2, #0
 8004370:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004372:	4b25      	ldr	r3, [pc, #148]	@ (8004408 <MX_ADC1_Init+0xe8>)
 8004374:	2201      	movs	r2, #1
 8004376:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8004378:	4b23      	ldr	r3, [pc, #140]	@ (8004408 <MX_ADC1_Init+0xe8>)
 800437a:	2201      	movs	r2, #1
 800437c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800437e:	4b22      	ldr	r3, [pc, #136]	@ (8004408 <MX_ADC1_Init+0xe8>)
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004386:	4b20      	ldr	r3, [pc, #128]	@ (8004408 <MX_ADC1_Init+0xe8>)
 8004388:	2200      	movs	r2, #0
 800438a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800438c:	4b1e      	ldr	r3, [pc, #120]	@ (8004408 <MX_ADC1_Init+0xe8>)
 800438e:	2200      	movs	r2, #0
 8004390:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004392:	4b1d      	ldr	r3, [pc, #116]	@ (8004408 <MX_ADC1_Init+0xe8>)
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800439a:	4b1b      	ldr	r3, [pc, #108]	@ (8004408 <MX_ADC1_Init+0xe8>)
 800439c:	2200      	movs	r2, #0
 800439e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80043a0:	4b19      	ldr	r3, [pc, #100]	@ (8004408 <MX_ADC1_Init+0xe8>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80043a8:	4817      	ldr	r0, [pc, #92]	@ (8004408 <MX_ADC1_Init+0xe8>)
 80043aa:	f002 f803 	bl	80063b4 <HAL_ADC_Init>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80043b4:	f000 fc96 	bl	8004ce4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80043b8:	2300      	movs	r3, #0
 80043ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80043bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043c0:	4619      	mov	r1, r3
 80043c2:	4811      	ldr	r0, [pc, #68]	@ (8004408 <MX_ADC1_Init+0xe8>)
 80043c4:	f003 fad0 	bl	8007968 <HAL_ADCEx_MultiModeConfigChannel>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80043ce:	f000 fc89 	bl	8004ce4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80043d2:	4b0e      	ldr	r3, [pc, #56]	@ (800440c <MX_ADC1_Init+0xec>)
 80043d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80043d6:	2306      	movs	r3, #6
 80043d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80043da:	2300      	movs	r3, #0
 80043dc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80043de:	237f      	movs	r3, #127	@ 0x7f
 80043e0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80043e2:	2304      	movs	r3, #4
 80043e4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80043e6:	2300      	movs	r3, #0
 80043e8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80043ea:	1d3b      	adds	r3, r7, #4
 80043ec:	4619      	mov	r1, r3
 80043ee:	4806      	ldr	r0, [pc, #24]	@ (8004408 <MX_ADC1_Init+0xe8>)
 80043f0:	f002 fcf8 	bl	8006de4 <HAL_ADC_ConfigChannel>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80043fa:	f000 fc73 	bl	8004ce4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80043fe:	bf00      	nop
 8004400:	3730      	adds	r7, #48	@ 0x30
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	200008a8 	.word	0x200008a8
 800440c:	04300002 	.word	0x04300002

08004410 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b09c      	sub	sp, #112	@ 0x70
 8004414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004416:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800441a:	2200      	movs	r2, #0
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	605a      	str	r2, [r3, #4]
 8004420:	609a      	str	r2, [r3, #8]
 8004422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004424:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	605a      	str	r2, [r3, #4]
 800442e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004430:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	605a      	str	r2, [r3, #4]
 800443a:	609a      	str	r2, [r3, #8]
 800443c:	60da      	str	r2, [r3, #12]
 800443e:	611a      	str	r2, [r3, #16]
 8004440:	615a      	str	r2, [r3, #20]
 8004442:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004444:	1d3b      	adds	r3, r7, #4
 8004446:	2234      	movs	r2, #52	@ 0x34
 8004448:	2100      	movs	r1, #0
 800444a:	4618      	mov	r0, r3
 800444c:	f009 f9ce 	bl	800d7ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004450:	4b45      	ldr	r3, [pc, #276]	@ (8004568 <MX_TIM1_Init+0x158>)
 8004452:	4a46      	ldr	r2, [pc, #280]	@ (800456c <MX_TIM1_Init+0x15c>)
 8004454:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 8004456:	4b44      	ldr	r3, [pc, #272]	@ (8004568 <MX_TIM1_Init+0x158>)
 8004458:	2203      	movs	r2, #3
 800445a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800445c:	4b42      	ldr	r3, [pc, #264]	@ (8004568 <MX_TIM1_Init+0x158>)
 800445e:	2200      	movs	r2, #0
 8004460:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004462:	4b41      	ldr	r3, [pc, #260]	@ (8004568 <MX_TIM1_Init+0x158>)
 8004464:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004468:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800446a:	4b3f      	ldr	r3, [pc, #252]	@ (8004568 <MX_TIM1_Init+0x158>)
 800446c:	2200      	movs	r2, #0
 800446e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004470:	4b3d      	ldr	r3, [pc, #244]	@ (8004568 <MX_TIM1_Init+0x158>)
 8004472:	2200      	movs	r2, #0
 8004474:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004476:	4b3c      	ldr	r3, [pc, #240]	@ (8004568 <MX_TIM1_Init+0x158>)
 8004478:	2200      	movs	r2, #0
 800447a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800447c:	483a      	ldr	r0, [pc, #232]	@ (8004568 <MX_TIM1_Init+0x158>)
 800447e:	f005 f9b7 	bl	80097f0 <HAL_TIM_Base_Init>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004488:	f000 fc2c 	bl	8004ce4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800448c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004490:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004492:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8004496:	4619      	mov	r1, r3
 8004498:	4833      	ldr	r0, [pc, #204]	@ (8004568 <MX_TIM1_Init+0x158>)
 800449a:	f006 f93b 	bl	800a714 <HAL_TIM_ConfigClockSource>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80044a4:	f000 fc1e 	bl	8004ce4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80044a8:	482f      	ldr	r0, [pc, #188]	@ (8004568 <MX_TIM1_Init+0x158>)
 80044aa:	f005 faed 	bl	8009a88 <HAL_TIM_PWM_Init>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80044b4:	f000 fc16 	bl	8004ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044b8:	2300      	movs	r3, #0
 80044ba:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80044bc:	2300      	movs	r3, #0
 80044be:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044c0:	2300      	movs	r3, #0
 80044c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80044c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80044c8:	4619      	mov	r1, r3
 80044ca:	4827      	ldr	r0, [pc, #156]	@ (8004568 <MX_TIM1_Init+0x158>)
 80044cc:	f007 f908 	bl	800b6e0 <HAL_TIMEx_MasterConfigSynchronization>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80044d6:	f000 fc05 	bl	8004ce4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044da:	2360      	movs	r3, #96	@ 0x60
 80044dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80044de:	2300      	movs	r3, #0
 80044e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044e2:	2300      	movs	r3, #0
 80044e4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80044e6:	2300      	movs	r3, #0
 80044e8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80044ea:	2304      	movs	r3, #4
 80044ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80044ee:	2300      	movs	r3, #0
 80044f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80044f2:	2300      	movs	r3, #0
 80044f4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80044fa:	2200      	movs	r2, #0
 80044fc:	4619      	mov	r1, r3
 80044fe:	481a      	ldr	r0, [pc, #104]	@ (8004568 <MX_TIM1_Init+0x158>)
 8004500:	f005 fff4 	bl	800a4ec <HAL_TIM_PWM_ConfigChannel>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800450a:	f000 fbeb 	bl	8004ce4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800450e:	2300      	movs	r3, #0
 8004510:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004512:	2300      	movs	r3, #0
 8004514:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004516:	2300      	movs	r3, #0
 8004518:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800451a:	2300      	movs	r3, #0
 800451c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800451e:	2300      	movs	r3, #0
 8004520:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004522:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004526:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004528:	2300      	movs	r3, #0
 800452a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800452c:	2300      	movs	r3, #0
 800452e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004530:	2300      	movs	r3, #0
 8004532:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004534:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004538:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800453a:	2300      	movs	r3, #0
 800453c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800453e:	2300      	movs	r3, #0
 8004540:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004542:	2300      	movs	r3, #0
 8004544:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004546:	1d3b      	adds	r3, r7, #4
 8004548:	4619      	mov	r1, r3
 800454a:	4807      	ldr	r0, [pc, #28]	@ (8004568 <MX_TIM1_Init+0x158>)
 800454c:	f007 f95e 	bl	800b80c <HAL_TIMEx_ConfigBreakDeadTime>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8004556:	f000 fbc5 	bl	8004ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800455a:	4803      	ldr	r0, [pc, #12]	@ (8004568 <MX_TIM1_Init+0x158>)
 800455c:	f001 fab0 	bl	8005ac0 <HAL_TIM_MspPostInit>

}
 8004560:	bf00      	nop
 8004562:	3770      	adds	r7, #112	@ 0x70
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	20000974 	.word	0x20000974
 800456c:	40012c00 	.word	0x40012c00

08004570 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004576:	f107 0310 	add.w	r3, r7, #16
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	605a      	str	r2, [r3, #4]
 8004580:	609a      	str	r2, [r3, #8]
 8004582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004584:	1d3b      	adds	r3, r7, #4
 8004586:	2200      	movs	r2, #0
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	605a      	str	r2, [r3, #4]
 800458c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800458e:	4b1d      	ldr	r3, [pc, #116]	@ (8004604 <MX_TIM3_Init+0x94>)
 8004590:	4a1d      	ldr	r2, [pc, #116]	@ (8004608 <MX_TIM3_Init+0x98>)
 8004592:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8004594:	4b1b      	ldr	r3, [pc, #108]	@ (8004604 <MX_TIM3_Init+0x94>)
 8004596:	22a9      	movs	r2, #169	@ 0xa9
 8004598:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800459a:	4b1a      	ldr	r3, [pc, #104]	@ (8004604 <MX_TIM3_Init+0x94>)
 800459c:	2200      	movs	r2, #0
 800459e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80045a0:	4b18      	ldr	r3, [pc, #96]	@ (8004604 <MX_TIM3_Init+0x94>)
 80045a2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80045a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045a8:	4b16      	ldr	r3, [pc, #88]	@ (8004604 <MX_TIM3_Init+0x94>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045ae:	4b15      	ldr	r3, [pc, #84]	@ (8004604 <MX_TIM3_Init+0x94>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80045b4:	4813      	ldr	r0, [pc, #76]	@ (8004604 <MX_TIM3_Init+0x94>)
 80045b6:	f005 f91b 	bl	80097f0 <HAL_TIM_Base_Init>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80045c0:	f000 fb90 	bl	8004ce4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80045ca:	f107 0310 	add.w	r3, r7, #16
 80045ce:	4619      	mov	r1, r3
 80045d0:	480c      	ldr	r0, [pc, #48]	@ (8004604 <MX_TIM3_Init+0x94>)
 80045d2:	f006 f89f 	bl	800a714 <HAL_TIM_ConfigClockSource>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80045dc:	f000 fb82 	bl	8004ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045e0:	2300      	movs	r3, #0
 80045e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045e4:	2300      	movs	r3, #0
 80045e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80045e8:	1d3b      	adds	r3, r7, #4
 80045ea:	4619      	mov	r1, r3
 80045ec:	4805      	ldr	r0, [pc, #20]	@ (8004604 <MX_TIM3_Init+0x94>)
 80045ee:	f007 f877 	bl	800b6e0 <HAL_TIMEx_MasterConfigSynchronization>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80045f8:	f000 fb74 	bl	8004ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80045fc:	bf00      	nop
 80045fe:	3720      	adds	r7, #32
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	20000a40 	.word	0x20000a40
 8004608:	40000400 	.word	0x40000400

0800460c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08c      	sub	sp, #48	@ 0x30
 8004610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004612:	f107 030c 	add.w	r3, r7, #12
 8004616:	2224      	movs	r2, #36	@ 0x24
 8004618:	2100      	movs	r1, #0
 800461a:	4618      	mov	r0, r3
 800461c:	f009 f8e6 	bl	800d7ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004620:	463b      	mov	r3, r7
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	605a      	str	r2, [r3, #4]
 8004628:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800462a:	4b21      	ldr	r3, [pc, #132]	@ (80046b0 <MX_TIM4_Init+0xa4>)
 800462c:	4a21      	ldr	r2, [pc, #132]	@ (80046b4 <MX_TIM4_Init+0xa8>)
 800462e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004630:	4b1f      	ldr	r3, [pc, #124]	@ (80046b0 <MX_TIM4_Init+0xa4>)
 8004632:	2200      	movs	r2, #0
 8004634:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004636:	4b1e      	ldr	r3, [pc, #120]	@ (80046b0 <MX_TIM4_Init+0xa4>)
 8004638:	2200      	movs	r2, #0
 800463a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800463c:	4b1c      	ldr	r3, [pc, #112]	@ (80046b0 <MX_TIM4_Init+0xa4>)
 800463e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004642:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004644:	4b1a      	ldr	r3, [pc, #104]	@ (80046b0 <MX_TIM4_Init+0xa4>)
 8004646:	2200      	movs	r2, #0
 8004648:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800464a:	4b19      	ldr	r3, [pc, #100]	@ (80046b0 <MX_TIM4_Init+0xa4>)
 800464c:	2200      	movs	r2, #0
 800464e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004650:	2303      	movs	r3, #3
 8004652:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004654:	2300      	movs	r3, #0
 8004656:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004658:	2301      	movs	r3, #1
 800465a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800465c:	2300      	movs	r3, #0
 800465e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8004660:	2302      	movs	r3, #2
 8004662:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004664:	2300      	movs	r3, #0
 8004666:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004668:	2301      	movs	r3, #1
 800466a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800466c:	2300      	movs	r3, #0
 800466e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 2;
 8004670:	2302      	movs	r3, #2
 8004672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004674:	f107 030c 	add.w	r3, r7, #12
 8004678:	4619      	mov	r1, r3
 800467a:	480d      	ldr	r0, [pc, #52]	@ (80046b0 <MX_TIM4_Init+0xa4>)
 800467c:	f005 fc7a 	bl	8009f74 <HAL_TIM_Encoder_Init>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8004686:	f000 fb2d 	bl	8004ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800468a:	2300      	movs	r3, #0
 800468c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800468e:	2300      	movs	r3, #0
 8004690:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004692:	463b      	mov	r3, r7
 8004694:	4619      	mov	r1, r3
 8004696:	4806      	ldr	r0, [pc, #24]	@ (80046b0 <MX_TIM4_Init+0xa4>)
 8004698:	f007 f822 	bl	800b6e0 <HAL_TIMEx_MasterConfigSynchronization>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80046a2:	f000 fb1f 	bl	8004ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80046a6:	bf00      	nop
 80046a8:	3730      	adds	r7, #48	@ 0x30
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	20000b0c 	.word	0x20000b0c
 80046b4:	40000800 	.word	0x40000800

080046b8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80046bc:	4b14      	ldr	r3, [pc, #80]	@ (8004710 <MX_TIM16_Init+0x58>)
 80046be:	4a15      	ldr	r2, [pc, #84]	@ (8004714 <MX_TIM16_Init+0x5c>)
 80046c0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 80046c2:	4b13      	ldr	r3, [pc, #76]	@ (8004710 <MX_TIM16_Init+0x58>)
 80046c4:	22a9      	movs	r2, #169	@ 0xa9
 80046c6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046c8:	4b11      	ldr	r3, [pc, #68]	@ (8004710 <MX_TIM16_Init+0x58>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 80046ce:	4b10      	ldr	r3, [pc, #64]	@ (8004710 <MX_TIM16_Init+0x58>)
 80046d0:	f240 4279 	movw	r2, #1145	@ 0x479
 80046d4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004710 <MX_TIM16_Init+0x58>)
 80046d8:	2200      	movs	r2, #0
 80046da:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80046dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004710 <MX_TIM16_Init+0x58>)
 80046de:	2200      	movs	r2, #0
 80046e0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004710 <MX_TIM16_Init+0x58>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80046e8:	4809      	ldr	r0, [pc, #36]	@ (8004710 <MX_TIM16_Init+0x58>)
 80046ea:	f005 f881 	bl	80097f0 <HAL_TIM_Base_Init>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80046f4:	f000 faf6 	bl	8004ce4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80046f8:	2108      	movs	r1, #8
 80046fa:	4805      	ldr	r0, [pc, #20]	@ (8004710 <MX_TIM16_Init+0x58>)
 80046fc:	f005 fb44 	bl	8009d88 <HAL_TIM_OnePulse_Init>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8004706:	f000 faed 	bl	8004ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800470a:	bf00      	nop
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	20000bd8 	.word	0x20000bd8
 8004714:	40014400 	.word	0x40014400

08004718 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800471c:	4b23      	ldr	r3, [pc, #140]	@ (80047ac <MX_USART2_UART_Init+0x94>)
 800471e:	4a24      	ldr	r2, [pc, #144]	@ (80047b0 <MX_USART2_UART_Init+0x98>)
 8004720:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8004722:	4b22      	ldr	r3, [pc, #136]	@ (80047ac <MX_USART2_UART_Init+0x94>)
 8004724:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8004728:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800472a:	4b20      	ldr	r3, [pc, #128]	@ (80047ac <MX_USART2_UART_Init+0x94>)
 800472c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004730:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004732:	4b1e      	ldr	r3, [pc, #120]	@ (80047ac <MX_USART2_UART_Init+0x94>)
 8004734:	2200      	movs	r2, #0
 8004736:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8004738:	4b1c      	ldr	r3, [pc, #112]	@ (80047ac <MX_USART2_UART_Init+0x94>)
 800473a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800473e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004740:	4b1a      	ldr	r3, [pc, #104]	@ (80047ac <MX_USART2_UART_Init+0x94>)
 8004742:	220c      	movs	r2, #12
 8004744:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004746:	4b19      	ldr	r3, [pc, #100]	@ (80047ac <MX_USART2_UART_Init+0x94>)
 8004748:	2200      	movs	r2, #0
 800474a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800474c:	4b17      	ldr	r3, [pc, #92]	@ (80047ac <MX_USART2_UART_Init+0x94>)
 800474e:	2200      	movs	r2, #0
 8004750:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004752:	4b16      	ldr	r3, [pc, #88]	@ (80047ac <MX_USART2_UART_Init+0x94>)
 8004754:	2200      	movs	r2, #0
 8004756:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004758:	4b14      	ldr	r3, [pc, #80]	@ (80047ac <MX_USART2_UART_Init+0x94>)
 800475a:	2200      	movs	r2, #0
 800475c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800475e:	4b13      	ldr	r3, [pc, #76]	@ (80047ac <MX_USART2_UART_Init+0x94>)
 8004760:	2200      	movs	r2, #0
 8004762:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004764:	4811      	ldr	r0, [pc, #68]	@ (80047ac <MX_USART2_UART_Init+0x94>)
 8004766:	f007 f935 	bl	800b9d4 <HAL_UART_Init>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8004770:	f000 fab8 	bl	8004ce4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004774:	2100      	movs	r1, #0
 8004776:	480d      	ldr	r0, [pc, #52]	@ (80047ac <MX_USART2_UART_Init+0x94>)
 8004778:	f008 ff55 	bl	800d626 <HAL_UARTEx_SetTxFifoThreshold>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8004782:	f000 faaf 	bl	8004ce4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004786:	2100      	movs	r1, #0
 8004788:	4808      	ldr	r0, [pc, #32]	@ (80047ac <MX_USART2_UART_Init+0x94>)
 800478a:	f008 ff8a 	bl	800d6a2 <HAL_UARTEx_SetRxFifoThreshold>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8004794:	f000 faa6 	bl	8004ce4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004798:	4804      	ldr	r0, [pc, #16]	@ (80047ac <MX_USART2_UART_Init+0x94>)
 800479a:	f008 ff0b 	bl	800d5b4 <HAL_UARTEx_DisableFifoMode>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80047a4:	f000 fa9e 	bl	8004ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80047a8:	bf00      	nop
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	20000d04 	.word	0x20000d04
 80047b0:	40004400 	.word	0x40004400

080047b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80047ba:	4b1e      	ldr	r3, [pc, #120]	@ (8004834 <MX_DMA_Init+0x80>)
 80047bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047be:	4a1d      	ldr	r2, [pc, #116]	@ (8004834 <MX_DMA_Init+0x80>)
 80047c0:	f043 0304 	orr.w	r3, r3, #4
 80047c4:	6493      	str	r3, [r2, #72]	@ 0x48
 80047c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004834 <MX_DMA_Init+0x80>)
 80047c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	607b      	str	r3, [r7, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80047d2:	4b18      	ldr	r3, [pc, #96]	@ (8004834 <MX_DMA_Init+0x80>)
 80047d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047d6:	4a17      	ldr	r2, [pc, #92]	@ (8004834 <MX_DMA_Init+0x80>)
 80047d8:	f043 0301 	orr.w	r3, r3, #1
 80047dc:	6493      	str	r3, [r2, #72]	@ 0x48
 80047de:	4b15      	ldr	r3, [pc, #84]	@ (8004834 <MX_DMA_Init+0x80>)
 80047e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80047ea:	2200      	movs	r2, #0
 80047ec:	2100      	movs	r1, #0
 80047ee:	200b      	movs	r0, #11
 80047f0:	f003 fa9d 	bl	8007d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80047f4:	200b      	movs	r0, #11
 80047f6:	f003 fab4 	bl	8007d62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80047fa:	2200      	movs	r2, #0
 80047fc:	2100      	movs	r1, #0
 80047fe:	200c      	movs	r0, #12
 8004800:	f003 fa95 	bl	8007d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004804:	200c      	movs	r0, #12
 8004806:	f003 faac 	bl	8007d62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800480a:	2200      	movs	r2, #0
 800480c:	2100      	movs	r1, #0
 800480e:	200d      	movs	r0, #13
 8004810:	f003 fa8d 	bl	8007d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004814:	200d      	movs	r0, #13
 8004816:	f003 faa4 	bl	8007d62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800481a:	2200      	movs	r2, #0
 800481c:	2100      	movs	r1, #0
 800481e:	200e      	movs	r0, #14
 8004820:	f003 fa85 	bl	8007d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004824:	200e      	movs	r0, #14
 8004826:	f003 fa9c 	bl	8007d62 <HAL_NVIC_EnableIRQ>

}
 800482a:	bf00      	nop
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	40021000 	.word	0x40021000

08004838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b08a      	sub	sp, #40	@ 0x28
 800483c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800483e:	f107 0314 	add.w	r3, r7, #20
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	605a      	str	r2, [r3, #4]
 8004848:	609a      	str	r2, [r3, #8]
 800484a:	60da      	str	r2, [r3, #12]
 800484c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800484e:	4b67      	ldr	r3, [pc, #412]	@ (80049ec <MX_GPIO_Init+0x1b4>)
 8004850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004852:	4a66      	ldr	r2, [pc, #408]	@ (80049ec <MX_GPIO_Init+0x1b4>)
 8004854:	f043 0304 	orr.w	r3, r3, #4
 8004858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800485a:	4b64      	ldr	r3, [pc, #400]	@ (80049ec <MX_GPIO_Init+0x1b4>)
 800485c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800485e:	f003 0304 	and.w	r3, r3, #4
 8004862:	613b      	str	r3, [r7, #16]
 8004864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004866:	4b61      	ldr	r3, [pc, #388]	@ (80049ec <MX_GPIO_Init+0x1b4>)
 8004868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800486a:	4a60      	ldr	r2, [pc, #384]	@ (80049ec <MX_GPIO_Init+0x1b4>)
 800486c:	f043 0320 	orr.w	r3, r3, #32
 8004870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004872:	4b5e      	ldr	r3, [pc, #376]	@ (80049ec <MX_GPIO_Init+0x1b4>)
 8004874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004876:	f003 0320 	and.w	r3, r3, #32
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800487e:	4b5b      	ldr	r3, [pc, #364]	@ (80049ec <MX_GPIO_Init+0x1b4>)
 8004880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004882:	4a5a      	ldr	r2, [pc, #360]	@ (80049ec <MX_GPIO_Init+0x1b4>)
 8004884:	f043 0301 	orr.w	r3, r3, #1
 8004888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800488a:	4b58      	ldr	r3, [pc, #352]	@ (80049ec <MX_GPIO_Init+0x1b4>)
 800488c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	60bb      	str	r3, [r7, #8]
 8004894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004896:	4b55      	ldr	r3, [pc, #340]	@ (80049ec <MX_GPIO_Init+0x1b4>)
 8004898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800489a:	4a54      	ldr	r2, [pc, #336]	@ (80049ec <MX_GPIO_Init+0x1b4>)
 800489c:	f043 0302 	orr.w	r3, r3, #2
 80048a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048a2:	4b52      	ldr	r3, [pc, #328]	@ (80049ec <MX_GPIO_Init+0x1b4>)
 80048a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	607b      	str	r3, [r7, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Direaction_motor_Pin|Emergency_light_Pin, GPIO_PIN_RESET);
 80048ae:	2200      	movs	r2, #0
 80048b0:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80048b4:	484e      	ldr	r0, [pc, #312]	@ (80049f0 <MX_GPIO_Init+0x1b8>)
 80048b6:	f003 ff3b 	bl	8008730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Solenoid_valve_push_Pin, GPIO_PIN_RESET);
 80048ba:	2200      	movs	r2, #0
 80048bc:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80048c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80048c4:	f003 ff34 	bl	8008730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin, GPIO_PIN_RESET);
 80048c8:	2200      	movs	r2, #0
 80048ca:	f240 4116 	movw	r1, #1046	@ 0x416
 80048ce:	4849      	ldr	r0, [pc, #292]	@ (80049f4 <MX_GPIO_Init+0x1bc>)
 80048d0:	f003 ff2e 	bl	8008730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80048d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80048d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80048da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80048de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e0:	2300      	movs	r3, #0
 80048e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80048e4:	f107 0314 	add.w	r3, r7, #20
 80048e8:	4619      	mov	r1, r3
 80048ea:	4841      	ldr	r0, [pc, #260]	@ (80049f0 <MX_GPIO_Init+0x1b8>)
 80048ec:	f003 fd86 	bl	80083fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Direaction_motor_Pin */
  GPIO_InitStruct.Pin = Direaction_motor_Pin;
 80048f0:	2302      	movs	r3, #2
 80048f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048f4:	2301      	movs	r3, #1
 80048f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f8:	2300      	movs	r3, #0
 80048fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048fc:	2303      	movs	r3, #3
 80048fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direaction_motor_GPIO_Port, &GPIO_InitStruct);
 8004900:	f107 0314 	add.w	r3, r7, #20
 8004904:	4619      	mov	r1, r3
 8004906:	483a      	ldr	r0, [pc, #232]	@ (80049f0 <MX_GPIO_Init+0x1b8>)
 8004908:	f003 fd78 	bl	80083fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Solenoid_valve_push_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Solenoid_valve_push_Pin;
 800490c:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8004910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004912:	2301      	movs	r3, #1
 8004914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004916:	2300      	movs	r3, #0
 8004918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800491a:	2300      	movs	r3, #0
 800491c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800491e:	f107 0314 	add.w	r3, r7, #20
 8004922:	4619      	mov	r1, r3
 8004924:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004928:	f003 fd68 	bl	80083fc <HAL_GPIO_Init>

  /*Configure GPIO pins : joy_switch_3_Pin joy_switch_4_Pin Set_home_Pin Reed_switch_pull_Pin */
  GPIO_InitStruct.Pin = joy_switch_3_Pin|joy_switch_4_Pin|Set_home_Pin|Reed_switch_pull_Pin;
 800492c:	23f0      	movs	r3, #240	@ 0xf0
 800492e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004930:	2300      	movs	r3, #0
 8004932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004934:	2300      	movs	r3, #0
 8004936:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004938:	f107 0314 	add.w	r3, r7, #20
 800493c:	4619      	mov	r1, r3
 800493e:	482c      	ldr	r0, [pc, #176]	@ (80049f0 <MX_GPIO_Init+0x1b8>)
 8004940:	f003 fd5c 	bl	80083fc <HAL_GPIO_Init>

  /*Configure GPIO pins : Pilot_controller_error_Pin Pilot_motor_error_Pin Solenoid_valve_pull_Pin Solenoid_valve_vacuum_Pin */
  GPIO_InitStruct.Pin = Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin;
 8004944:	f240 4316 	movw	r3, #1046	@ 0x416
 8004948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800494a:	2301      	movs	r3, #1
 800494c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800494e:	2300      	movs	r3, #0
 8004950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004952:	2300      	movs	r3, #0
 8004954:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004956:	f107 0314 	add.w	r3, r7, #20
 800495a:	4619      	mov	r1, r3
 800495c:	4825      	ldr	r0, [pc, #148]	@ (80049f4 <MX_GPIO_Init+0x1bc>)
 800495e:	f003 fd4d 	bl	80083fc <HAL_GPIO_Init>

  /*Configure GPIO pins : Proximity_Pin joy_switch_1_Pin */
  GPIO_InitStruct.Pin = Proximity_Pin|joy_switch_1_Pin;
 8004962:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8004966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004968:	2300      	movs	r3, #0
 800496a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800496c:	2300      	movs	r3, #0
 800496e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004970:	f107 0314 	add.w	r3, r7, #20
 8004974:	4619      	mov	r1, r3
 8004976:	481f      	ldr	r0, [pc, #124]	@ (80049f4 <MX_GPIO_Init+0x1bc>)
 8004978:	f003 fd40 	bl	80083fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_switch_Pin */
  GPIO_InitStruct.Pin = Emergency_switch_Pin;
 800497c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004982:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004988:	2300      	movs	r3, #0
 800498a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_switch_GPIO_Port, &GPIO_InitStruct);
 800498c:	f107 0314 	add.w	r3, r7, #20
 8004990:	4619      	mov	r1, r3
 8004992:	4818      	ldr	r0, [pc, #96]	@ (80049f4 <MX_GPIO_Init+0x1bc>)
 8004994:	f003 fd32 	bl	80083fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_light_Pin */
  GPIO_InitStruct.Pin = Emergency_light_Pin;
 8004998:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800499c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800499e:	2301      	movs	r3, #1
 80049a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049a6:	2300      	movs	r3, #0
 80049a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Emergency_light_GPIO_Port, &GPIO_InitStruct);
 80049aa:	f107 0314 	add.w	r3, r7, #20
 80049ae:	4619      	mov	r1, r3
 80049b0:	480f      	ldr	r0, [pc, #60]	@ (80049f0 <MX_GPIO_Init+0x1b8>)
 80049b2:	f003 fd23 	bl	80083fc <HAL_GPIO_Init>

  /*Configure GPIO pins : Reed_switch_push_Pin joy_switch_2_Pin */
  GPIO_InitStruct.Pin = Reed_switch_push_Pin|joy_switch_2_Pin;
 80049b6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80049ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049bc:	2300      	movs	r3, #0
 80049be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c0:	2300      	movs	r3, #0
 80049c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049c4:	f107 0314 	add.w	r3, r7, #20
 80049c8:	4619      	mov	r1, r3
 80049ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80049ce:	f003 fd15 	bl	80083fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80049d2:	2200      	movs	r2, #0
 80049d4:	2100      	movs	r1, #0
 80049d6:	2028      	movs	r0, #40	@ 0x28
 80049d8:	f003 f9a9 	bl	8007d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80049dc:	2028      	movs	r0, #40	@ 0x28
 80049de:	f003 f9c0 	bl	8007d62 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80049e2:	bf00      	nop
 80049e4:	3728      	adds	r7, #40	@ 0x28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40021000 	.word	0x40021000
 80049f0:	48000800 	.word	0x48000800
 80049f4:	48000400 	.word	0x48000400

080049f8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Main timer interrupt for run program with accuracy time
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af02      	add	r7, sp, #8
 80049fe:	6078      	str	r0, [r7, #4]
	// Run with 1000 Hz
	if(htim == &htim3){
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a1f      	ldr	r2, [pc, #124]	@ (8004a80 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d137      	bne.n	8004a78 <HAL_TIM_PeriodElapsedCallback+0x80>
		// Update encoder
		if(is_update_encoder == 0){
 8004a08:	4b1e      	ldr	r3, [pc, #120]	@ (8004a84 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d102      	bne.n	8004a16 <HAL_TIM_PeriodElapsedCallback+0x1e>
			is_update_encoder = 1;
 8004a10:	4b1c      	ldr	r3, [pc, #112]	@ (8004a84 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	701a      	strb	r2, [r3, #0]
		}
		if(mode == RUNNING){
 8004a16:	4b1c      	ldr	r3, [pc, #112]	@ (8004a88 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d113      	bne.n	8004a46 <HAL_TIM_PeriodElapsedCallback+0x4e>
			static uint8_t timestamp = 0;
			if(start_position_control == 0 && timestamp == 8){
 8004a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8004a8c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d109      	bne.n	8004a3a <HAL_TIM_PeriodElapsedCallback+0x42>
 8004a26:	4b1a      	ldr	r3, [pc, #104]	@ (8004a90 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b08      	cmp	r3, #8
 8004a2c:	d105      	bne.n	8004a3a <HAL_TIM_PeriodElapsedCallback+0x42>
				start_position_control = 1;
 8004a2e:	4b17      	ldr	r3, [pc, #92]	@ (8004a8c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	701a      	strb	r2, [r3, #0]
				timestamp = 0;
 8004a34:	4b16      	ldr	r3, [pc, #88]	@ (8004a90 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	701a      	strb	r2, [r3, #0]
			}
			timestamp++;
 8004a3a:	4b15      	ldr	r3, [pc, #84]	@ (8004a90 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	4b13      	ldr	r3, [pc, #76]	@ (8004a90 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004a44:	701a      	strb	r2, [r3, #0]
		}
		if(mode == HOMING){
 8004a46:	4b10      	ldr	r3, [pc, #64]	@ (8004a88 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004a48:	881b      	ldrh	r3, [r3, #0]
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d114      	bne.n	8004a78 <HAL_TIM_PeriodElapsedCallback+0x80>
			// Homing state
			homing(&home, GPIOB, GPIO_PIN_12); // Homing function
 8004a4e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004a52:	4910      	ldr	r1, [pc, #64]	@ (8004a94 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8004a54:	4810      	ldr	r0, [pc, #64]	@ (8004a98 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004a56:	f000 fcee 	bl	8005436 <homing>
			pwm_signal = home.pwm;
 8004a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8004a98 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004a5c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004a60:	461a      	mov	r2, r3
 8004a62:	4b0e      	ldr	r3, [pc, #56]	@ (8004a9c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004a64:	601a      	str	r2, [r3, #0]
			Update_pwm(&pwm_tim, pwm_channel, dir_gpio, dir_pin, pwm_signal); // Update main PWM signal
 8004a66:	4b0d      	ldr	r3, [pc, #52]	@ (8004a9c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	4a0c      	ldr	r2, [pc, #48]	@ (8004aa0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004a70:	2100      	movs	r1, #0
 8004a72:	480c      	ldr	r0, [pc, #48]	@ (8004aa4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004a74:	f000 fa22 	bl	8004ebc <Update_pwm>
		}
	}
}
 8004a78:	bf00      	nop
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	20000a40 	.word	0x20000a40
 8004a84:	200012f4 	.word	0x200012f4
 8004a88:	20000ec6 	.word	0x20000ec6
 8004a8c:	200013ac 	.word	0x200013ac
 8004a90:	200017cb 	.word	0x200017cb
 8004a94:	48000400 	.word	0x48000400
 8004a98:	20000ed0 	.word	0x20000ed0
 8004a9c:	200012f0 	.word	0x200012f0
 8004aa0:	48000800 	.word	0x48000800
 8004aa4:	20000974 	.word	0x20000974

08004aa8 <HAL_GPIO_EXTI_Callback>:
// GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af04      	add	r7, sp, #16
 8004aae:	4603      	mov	r3, r0
 8004ab0:	80fb      	strh	r3, [r7, #6]
	// Activate and Deactivate testing mode
	if(GPIO_Pin == GPIO_PIN_13){
 8004ab2:	88fb      	ldrh	r3, [r7, #6]
 8004ab4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ab8:	d149      	bne.n	8004b4e <HAL_GPIO_EXTI_Callback+0xa6>
		static uint8_t test = 0;
		if(test == 0){
 8004aba:	4b48      	ldr	r3, [pc, #288]	@ (8004bdc <HAL_GPIO_EXTI_Callback+0x134>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d11f      	bne.n	8004b02 <HAL_GPIO_EXTI_Callback+0x5a>
			target_position = 500.0;
 8004ac2:	4b47      	ldr	r3, [pc, #284]	@ (8004be0 <HAL_GPIO_EXTI_Callback+0x138>)
 8004ac4:	4a47      	ldr	r2, [pc, #284]	@ (8004be4 <HAL_GPIO_EXTI_Callback+0x13c>)
 8004ac6:	601a      	str	r2, [r3, #0]
			initial_position = encoder.mm;
 8004ac8:	4b47      	ldr	r3, [pc, #284]	@ (8004be8 <HAL_GPIO_EXTI_Callback+0x140>)
 8004aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004acc:	4a47      	ldr	r2, [pc, #284]	@ (8004bec <HAL_GPIO_EXTI_Callback+0x144>)
 8004ace:	6013      	str	r3, [r2, #0]
			evaScurveData.t = 0;
 8004ad0:	4947      	ldr	r1, [pc, #284]	@ (8004bf0 <HAL_GPIO_EXTI_Callback+0x148>)
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	e9c1 2306 	strd	r2, r3, [r1, #24]
			setpoint_pos = 0.0;
 8004ade:	4945      	ldr	r1, [pc, #276]	@ (8004bf4 <HAL_GPIO_EXTI_Callback+0x14c>)
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	f04f 0300 	mov.w	r3, #0
 8004ae8:	e9c1 2300 	strd	r2, r3, [r1]
			setpoint_vel = 0.0;
 8004aec:	4942      	ldr	r1, [pc, #264]	@ (8004bf8 <HAL_GPIO_EXTI_Callback+0x150>)
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	f04f 0300 	mov.w	r3, #0
 8004af6:	e9c1 2300 	strd	r2, r3, [r1]
			test = 1;
 8004afa:	4b38      	ldr	r3, [pc, #224]	@ (8004bdc <HAL_GPIO_EXTI_Callback+0x134>)
 8004afc:	2201      	movs	r2, #1
 8004afe:	701a      	strb	r2, [r3, #0]
 8004b00:	e022      	b.n	8004b48 <HAL_GPIO_EXTI_Callback+0xa0>
//			testing = 1;
		}
		else if(test == 1){
 8004b02:	4b36      	ldr	r3, [pc, #216]	@ (8004bdc <HAL_GPIO_EXTI_Callback+0x134>)
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d11e      	bne.n	8004b48 <HAL_GPIO_EXTI_Callback+0xa0>
			initial_position = 500.0;
 8004b0a:	4b38      	ldr	r3, [pc, #224]	@ (8004bec <HAL_GPIO_EXTI_Callback+0x144>)
 8004b0c:	4a35      	ldr	r2, [pc, #212]	@ (8004be4 <HAL_GPIO_EXTI_Callback+0x13c>)
 8004b0e:	601a      	str	r2, [r3, #0]
			target_position = encoder.mm;
 8004b10:	4b35      	ldr	r3, [pc, #212]	@ (8004be8 <HAL_GPIO_EXTI_Callback+0x140>)
 8004b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b14:	4a32      	ldr	r2, [pc, #200]	@ (8004be0 <HAL_GPIO_EXTI_Callback+0x138>)
 8004b16:	6013      	str	r3, [r2, #0]
			evaScurveData.t = 0;
 8004b18:	4935      	ldr	r1, [pc, #212]	@ (8004bf0 <HAL_GPIO_EXTI_Callback+0x148>)
 8004b1a:	f04f 0200 	mov.w	r2, #0
 8004b1e:	f04f 0300 	mov.w	r3, #0
 8004b22:	e9c1 2306 	strd	r2, r3, [r1, #24]
			setpoint_pos = 0.0;
 8004b26:	4933      	ldr	r1, [pc, #204]	@ (8004bf4 <HAL_GPIO_EXTI_Callback+0x14c>)
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	f04f 0300 	mov.w	r3, #0
 8004b30:	e9c1 2300 	strd	r2, r3, [r1]
			setpoint_vel = 0.0;
 8004b34:	4930      	ldr	r1, [pc, #192]	@ (8004bf8 <HAL_GPIO_EXTI_Callback+0x150>)
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	f04f 0300 	mov.w	r3, #0
 8004b3e:	e9c1 2300 	strd	r2, r3, [r1]
			test = 0;
 8004b42:	4b26      	ldr	r3, [pc, #152]	@ (8004bdc <HAL_GPIO_EXTI_Callback+0x134>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	701a      	strb	r2, [r3, #0]
//			testing = 0;
		}
		mode = RUNNING;
 8004b48:	4b2c      	ldr	r3, [pc, #176]	@ (8004bfc <HAL_GPIO_EXTI_Callback+0x154>)
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	801a      	strh	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_15){
 8004b4e:	88fb      	ldrh	r3, [r7, #6]
 8004b50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b54:	d13e      	bne.n	8004bd4 <HAL_GPIO_EXTI_Callback+0x12c>
		// Emergency switch interrupted
		if(HAL_GPIO_ReadPin(emer_gpio, emer_pin) == 0){
 8004b56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004b5a:	4829      	ldr	r0, [pc, #164]	@ (8004c00 <HAL_GPIO_EXTI_Callback+0x158>)
 8004b5c:	f003 fdd0 	bl	8008700 <HAL_GPIO_ReadPin>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d136      	bne.n	8004bd4 <HAL_GPIO_EXTI_Callback+0x12c>
			Reset_homing(&home);
 8004b66:	4827      	ldr	r0, [pc, #156]	@ (8004c04 <HAL_GPIO_EXTI_Callback+0x15c>)
 8004b68:	f000 fdf7 	bl	800575a <Reset_homing>
			setpoint = 0.0;
 8004b6c:	4b26      	ldr	r3, [pc, #152]	@ (8004c08 <HAL_GPIO_EXTI_Callback+0x160>)
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]
			v_e = 0.0;
 8004b74:	4b25      	ldr	r3, [pc, #148]	@ (8004c0c <HAL_GPIO_EXTI_Callback+0x164>)
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]
			v_output = 0;
 8004b7c:	4b24      	ldr	r3, [pc, #144]	@ (8004c10 <HAL_GPIO_EXTI_Callback+0x168>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]
			// Stop motor
			Update_pwm(&pwm_tim, pwm_channel, dir_gpio, dir_pin, 0);
 8004b82:	2300      	movs	r3, #0
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	2302      	movs	r3, #2
 8004b88:	4a22      	ldr	r2, [pc, #136]	@ (8004c14 <HAL_GPIO_EXTI_Callback+0x16c>)
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	4822      	ldr	r0, [pc, #136]	@ (8004c18 <HAL_GPIO_EXTI_Callback+0x170>)
 8004b8e:	f000 f995 	bl	8004ebc <Update_pwm>
			// Emergency light enable
			HAL_GPIO_WritePin(emer_light_gpio, emer_light_pin, SET);
 8004b92:	2201      	movs	r2, #1
 8004b94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004b98:	481e      	ldr	r0, [pc, #120]	@ (8004c14 <HAL_GPIO_EXTI_Callback+0x16c>)
 8004b9a:	f003 fdc9 	bl	8008730 <HAL_GPIO_WritePin>
			// Deactivate end effector
			eff.solenoid_command[0] = 0;
 8004b9e:	4b1f      	ldr	r3, [pc, #124]	@ (8004c1c <HAL_GPIO_EXTI_Callback+0x174>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	709a      	strb	r2, [r3, #2]
			eff.solenoid_command[1] = 0;
 8004ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8004c1c <HAL_GPIO_EXTI_Callback+0x174>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	70da      	strb	r2, [r3, #3]
			eff.solenoid_command[2] = 0;
 8004baa:	4b1c      	ldr	r3, [pc, #112]	@ (8004c1c <HAL_GPIO_EXTI_Callback+0x174>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	711a      	strb	r2, [r3, #4]
			Update_eff(&eff, solenoid_pull_gpio, solenoid_pull_pin, solenoid_push_gpio, solenoid_push_pin, vacuum_gpio, vacuum_pin);
 8004bb0:	2310      	movs	r3, #16
 8004bb2:	9302      	str	r3, [sp, #8]
 8004bb4:	4b12      	ldr	r3, [pc, #72]	@ (8004c00 <HAL_GPIO_EXTI_Callback+0x158>)
 8004bb6:	9301      	str	r3, [sp, #4]
 8004bb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004bc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004bc6:	490e      	ldr	r1, [pc, #56]	@ (8004c00 <HAL_GPIO_EXTI_Callback+0x158>)
 8004bc8:	4814      	ldr	r0, [pc, #80]	@ (8004c1c <HAL_GPIO_EXTI_Callback+0x174>)
 8004bca:	f7fe fa60 	bl	800308e <Update_eff>
			mode = EMERGENCY;
 8004bce:	4b0b      	ldr	r3, [pc, #44]	@ (8004bfc <HAL_GPIO_EXTI_Callback+0x154>)
 8004bd0:	2203      	movs	r2, #3
 8004bd2:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8004bd4:	bf00      	nop
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	200017cc 	.word	0x200017cc
 8004be0:	20000278 	.word	0x20000278
 8004be4:	43fa0000 	.word	0x43fa0000
 8004be8:	200012f8 	.word	0x200012f8
 8004bec:	200017a8 	.word	0x200017a8
 8004bf0:	20001780 	.word	0x20001780
 8004bf4:	200017b0 	.word	0x200017b0
 8004bf8:	200017b8 	.word	0x200017b8
 8004bfc:	20000ec6 	.word	0x20000ec6
 8004c00:	48000400 	.word	0x48000400
 8004c04:	20000ed0 	.word	0x20000ed0
 8004c08:	20000ec0 	.word	0x20000ec0
 8004c0c:	20001374 	.word	0x20001374
 8004c10:	20001378 	.word	0x20001378
 8004c14:	48000800 	.word	0x48000800
 8004c18:	20000974 	.word	0x20000974
 8004c1c:	2000107c 	.word	0x2000107c

08004c20 <Update_velocity_control>:
// Torque control update
void Update_torque_control(float s){

}
// Velocity control update
void Update_velocity_control(float s){
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	ed87 0a01 	vstr	s0, [r7, #4]
	// input is millimeter unit
	v_e = s - encoder.mmps;
 8004c2a:	4b11      	ldr	r3, [pc, #68]	@ (8004c70 <Update_velocity_control+0x50>)
 8004c2c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004c30:	ed97 7a01 	vldr	s14, [r7, #4]
 8004c34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c38:	4b0e      	ldr	r3, [pc, #56]	@ (8004c74 <Update_velocity_control+0x54>)
 8004c3a:	edc3 7a00 	vstr	s15, [r3]
	v_output = (int32_t)(Update_pid(&v_pid, v_e, 65535.0, 65535.0));
 8004c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c74 <Update_velocity_control+0x54>)
 8004c40:	edd3 7a00 	vldr	s15, [r3]
 8004c44:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 8004c78 <Update_velocity_control+0x58>
 8004c48:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 8004c78 <Update_velocity_control+0x58>
 8004c4c:	eeb0 0a67 	vmov.f32	s0, s15
 8004c50:	480a      	ldr	r0, [pc, #40]	@ (8004c7c <Update_velocity_control+0x5c>)
 8004c52:	f000 f87b 	bl	8004d4c <Update_pid>
 8004c56:	eef0 7a40 	vmov.f32	s15, s0
 8004c5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c5e:	ee17 2a90 	vmov	r2, s15
 8004c62:	4b07      	ldr	r3, [pc, #28]	@ (8004c80 <Update_velocity_control+0x60>)
 8004c64:	601a      	str	r2, [r3, #0]
}
 8004c66:	bf00      	nop
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	200012f8 	.word	0x200012f8
 8004c74:	20001374 	.word	0x20001374
 8004c78:	477fff00 	.word	0x477fff00
 8004c7c:	20001350 	.word	0x20001350
 8004c80:	20001378 	.word	0x20001378

08004c84 <Update_position_control>:
// Position control update
void Update_position_control(float s){
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	ed87 0a01 	vstr	s0, [r7, #4]
	//input is pulse unit
	p_e = s - Get_mm(&encoder);
 8004c8e:	4810      	ldr	r0, [pc, #64]	@ (8004cd0 <Update_position_control+0x4c>)
 8004c90:	f000 fb8e 	bl	80053b0 <Get_mm>
 8004c94:	eeb0 7a40 	vmov.f32	s14, s0
 8004c98:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8004cd4 <Update_position_control+0x50>)
 8004ca2:	edc3 7a00 	vstr	s15, [r3]
	p_output = Update_pid(&p_pid, p_e, 650.0, 650.0);
 8004ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd4 <Update_position_control+0x50>)
 8004ca8:	edd3 7a00 	vldr	s15, [r3]
 8004cac:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 8004cd8 <Update_position_control+0x54>
 8004cb0:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8004cd8 <Update_position_control+0x54>
 8004cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8004cb8:	4808      	ldr	r0, [pc, #32]	@ (8004cdc <Update_position_control+0x58>)
 8004cba:	f000 f847 	bl	8004d4c <Update_pid>
 8004cbe:	eef0 7a40 	vmov.f32	s15, s0
 8004cc2:	4b07      	ldr	r3, [pc, #28]	@ (8004ce0 <Update_position_control+0x5c>)
 8004cc4:	edc3 7a00 	vstr	s15, [r3]
}
 8004cc8:	bf00      	nop
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	200012f8 	.word	0x200012f8
 8004cd4:	200013a4 	.word	0x200013a4
 8004cd8:	44228000 	.word	0x44228000
 8004cdc:	2000137c 	.word	0x2000137c
 8004ce0:	200013a8 	.word	0x200013a8

08004ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004ce8:	b672      	cpsid	i
}
 8004cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004cec:	bf00      	nop
 8004cee:	e7fd      	b.n	8004cec <Error_Handler+0x8>

08004cf0 <PID_init>:
 *  Created on: Apr 26, 2024
 *      Author: naker
 */
#include "pid.h"

void PID_init(PID* pid, float _kp,  float _ki, float _kd, float _sampt){
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6178      	str	r0, [r7, #20]
 8004cf8:	ed87 0a04 	vstr	s0, [r7, #16]
 8004cfc:	edc7 0a03 	vstr	s1, [r7, #12]
 8004d00:	ed87 1a02 	vstr	s2, [r7, #8]
 8004d04:	edc7 1a01 	vstr	s3, [r7, #4]
	pid -> kp = _kp;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	601a      	str	r2, [r3, #0]
	pid -> ki = _ki;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	605a      	str	r2, [r3, #4]
	pid -> kd = _kd;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	609a      	str	r2, [r3, #8]
	pid -> sampt = _sampt;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	60da      	str	r2, [r3, #12]
	pid -> y_n = 0.0;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f04f 0200 	mov.w	r2, #0
 8004d26:	611a      	str	r2, [r3, #16]
	pid -> e_n = 0.0;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	615a      	str	r2, [r3, #20]
	pid -> e_n_1 = 0.0;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	619a      	str	r2, [r3, #24]
	pid -> e_n_2 = 0.0;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	61da      	str	r2, [r3, #28]
}
 8004d40:	bf00      	nop
 8004d42:	371c      	adds	r7, #28
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <Update_pid>:
float Update_pid(PID *pid, float error, float pid_sat, float plant_sat) {
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	ed87 0a02 	vstr	s0, [r7, #8]
 8004d58:	edc7 0a01 	vstr	s1, [r7, #4]
 8004d5c:	ed87 1a00 	vstr	s2, [r7]
//	// Update value
//	i_term_1 = i_term;
//	d_term_1 = d_term;
//	e_n_1 = e_n;

	float e_n = error; // error[n]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	617b      	str	r3, [r7, #20]

	if(!(((pid -> y_n >= pid_sat) && e_n > 0) || ((pid -> y_n <= -(pid_sat)) && e_n < 0 ))){
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	edd3 7a04 	vldr	s15, [r3, #16]
 8004d6a:	ed97 7a01 	vldr	s14, [r7, #4]
 8004d6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d76:	bf94      	ite	ls
 8004d78:	2301      	movls	r3, #1
 8004d7a:	2300      	movhi	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	f083 0301 	eor.w	r3, r3, #1
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10e      	bne.n	8004da6 <Update_pid+0x5a>
 8004d88:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d94:	bfcc      	ite	gt
 8004d96:	2301      	movgt	r3, #1
 8004d98:	2300      	movle	r3, #0
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	f083 0301 	eor.w	r3, r3, #1
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d056      	beq.n	8004e54 <Update_pid+0x108>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	ed93 7a04 	vldr	s14, [r3, #16]
 8004dac:	edd7 7a01 	vldr	s15, [r7, #4]
 8004db0:	eef1 7a67 	vneg.f32	s15, s15
 8004db4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dbc:	bf94      	ite	ls
 8004dbe:	2301      	movls	r3, #1
 8004dc0:	2300      	movhi	r3, #0
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	f083 0301 	eor.w	r3, r3, #1
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10e      	bne.n	8004dec <Update_pid+0xa0>
 8004dce:	edd7 7a05 	vldr	s15, [r7, #20]
 8004dd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dda:	bf4c      	ite	mi
 8004ddc:	2301      	movmi	r3, #1
 8004dde:	2300      	movpl	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	f083 0301 	eor.w	r3, r3, #1
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d033      	beq.n	8004e54 <Update_pid+0x108>
		pid -> y_n += ((pid -> kp + pid -> ki + pid -> kd) * e_n)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	ed93 7a04 	vldr	s14, [r3, #16]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	edd3 6a00 	vldr	s13, [r3]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	edd3 7a01 	vldr	s15, [r3, #4]
 8004dfe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	edd3 7a02 	vldr	s15, [r3, #8]
 8004e08:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004e0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004e10:	ee66 6aa7 	vmul.f32	s13, s13, s15
						- ((pid -> kp + (2 * pid -> kd)) * pid -> e_n_1)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	ed93 6a00 	vldr	s12, [r3]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004e20:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004e24:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	edd3 7a06 	vldr	s15, [r3, #24]
 8004e2e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004e32:	ee76 6ae7 	vsub.f32	s13, s13, s15
						+ (pid -> kd * pid -> e_n_2);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	ed93 6a02 	vldr	s12, [r3, #8]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	edd3 7a07 	vldr	s15, [r3, #28]
 8004e42:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
		pid -> y_n += ((pid -> kp + pid -> ki + pid -> kd) * e_n)
 8004e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	edc3 7a04 	vstr	s15, [r3, #16]
	}
	if(pid -> y_n >= pid_sat){
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	edd3 7a04 	vldr	s15, [r3, #16]
 8004e5a:	ed97 7a01 	vldr	s14, [r7, #4]
 8004e5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e66:	d803      	bhi.n	8004e70 <Update_pid+0x124>
		pid -> y_n = pid_sat;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	611a      	str	r2, [r3, #16]
 8004e6e:	e012      	b.n	8004e96 <Update_pid+0x14a>

	}else if(pid -> y_n < -pid_sat){
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	ed93 7a04 	vldr	s14, [r3, #16]
 8004e76:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e7a:	eef1 7a67 	vneg.f32	s15, s15
 8004e7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e86:	d506      	bpl.n	8004e96 <Update_pid+0x14a>
		pid -> y_n = -pid_sat;
 8004e88:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e8c:	eef1 7a67 	vneg.f32	s15, s15
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	edc3 7a04 	vstr	s15, [r3, #16]
	}

	pid -> e_n_2 = pid -> e_n_1;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	699a      	ldr	r2, [r3, #24]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	61da      	str	r2, [r3, #28]
	pid -> e_n_1 = pid -> e_n;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	695a      	ldr	r2, [r3, #20]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	619a      	str	r2, [r3, #24]

	return pid -> y_n;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	ee07 3a90 	vmov	s15, r3
}
 8004eae:	eeb0 0a67 	vmov.f32	s0, s15
 8004eb2:	371c      	adds	r7, #28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <Update_pwm>:
 *      Author: naker
 */

#include "pwm.h"

void Update_pwm(TIM_HandleTypeDef* htim, uint16_t htim_channel,GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, int32_t pwm_signal) {
 8004ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ec0:	b08b      	sub	sp, #44	@ 0x2c
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6278      	str	r0, [r7, #36]	@ 0x24
 8004ec6:	61fa      	str	r2, [r7, #28]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	460b      	mov	r3, r1
 8004ecc:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004ece:	4613      	mov	r3, r2
 8004ed0:	843b      	strh	r3, [r7, #32]
	__HAL_TIM_SET_COMPARE(htim, htim_channel, fabs(pwm_signal));
 8004ed2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d111      	bne.n	8004efc <Update_pwm+0x40>
 8004ed8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8004eda:	f7fb faef 	bl	80004bc <__aeabi_i2d>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	613a      	str	r2, [r7, #16]
 8004ee4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004ee8:	617b      	str	r3, [r7, #20]
 8004eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eec:	681c      	ldr	r4, [r3, #0]
 8004eee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004ef2:	f7fb fdfd 	bl	8000af0 <__aeabi_d2uiz>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	6363      	str	r3, [r4, #52]	@ 0x34
 8004efa:	e061      	b.n	8004fc0 <Update_pwm+0x104>
 8004efc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004efe:	2b04      	cmp	r3, #4
 8004f00:	d111      	bne.n	8004f26 <Update_pwm+0x6a>
 8004f02:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8004f04:	f7fb fada 	bl	80004bc <__aeabi_i2d>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	60ba      	str	r2, [r7, #8]
 8004f0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f16:	681c      	ldr	r4, [r3, #0]
 8004f18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f1c:	f7fb fde8 	bl	8000af0 <__aeabi_d2uiz>
 8004f20:	4603      	mov	r3, r0
 8004f22:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004f24:	e04c      	b.n	8004fc0 <Update_pwm+0x104>
 8004f26:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d111      	bne.n	8004f50 <Update_pwm+0x94>
 8004f2c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8004f2e:	f7fb fac5 	bl	80004bc <__aeabi_i2d>
 8004f32:	4602      	mov	r2, r0
 8004f34:	460b      	mov	r3, r1
 8004f36:	603a      	str	r2, [r7, #0]
 8004f38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004f3c:	607b      	str	r3, [r7, #4]
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f40:	681c      	ldr	r4, [r3, #0]
 8004f42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f46:	f7fb fdd3 	bl	8000af0 <__aeabi_d2uiz>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8004f4e:	e037      	b.n	8004fc0 <Update_pwm+0x104>
 8004f50:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004f52:	2b0c      	cmp	r3, #12
 8004f54:	d110      	bne.n	8004f78 <Update_pwm+0xbc>
 8004f56:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8004f58:	f7fb fab0 	bl	80004bc <__aeabi_i2d>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4615      	mov	r5, r2
 8004f62:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 8004f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f68:	681c      	ldr	r4, [r3, #0]
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	4631      	mov	r1, r6
 8004f6e:	f7fb fdbf 	bl	8000af0 <__aeabi_d2uiz>
 8004f72:	4603      	mov	r3, r0
 8004f74:	6423      	str	r3, [r4, #64]	@ 0x40
 8004f76:	e023      	b.n	8004fc0 <Update_pwm+0x104>
 8004f78:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004f7a:	2b10      	cmp	r3, #16
 8004f7c:	d110      	bne.n	8004fa0 <Update_pwm+0xe4>
 8004f7e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8004f80:	f7fb fa9c 	bl	80004bc <__aeabi_i2d>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4692      	mov	sl, r2
 8004f8a:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f90:	681c      	ldr	r4, [r3, #0]
 8004f92:	4650      	mov	r0, sl
 8004f94:	4659      	mov	r1, fp
 8004f96:	f7fb fdab 	bl	8000af0 <__aeabi_d2uiz>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	64a3      	str	r3, [r4, #72]	@ 0x48
 8004f9e:	e00f      	b.n	8004fc0 <Update_pwm+0x104>
 8004fa0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8004fa2:	f7fb fa8b 	bl	80004bc <__aeabi_i2d>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4690      	mov	r8, r2
 8004fac:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb2:	681c      	ldr	r4, [r3, #0]
 8004fb4:	4640      	mov	r0, r8
 8004fb6:	4649      	mov	r1, r9
 8004fb8:	f7fb fd9a 	bl	8000af0 <__aeabi_d2uiz>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	64e3      	str	r3, [r4, #76]	@ 0x4c
	if (pwm_signal < 0) {
 8004fc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	da06      	bge.n	8004fd4 <Update_pwm+0x118>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, RESET);
 8004fc6:	8c3b      	ldrh	r3, [r7, #32]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	4619      	mov	r1, r3
 8004fcc:	69f8      	ldr	r0, [r7, #28]
 8004fce:	f003 fbaf 	bl	8008730 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
	}
}
 8004fd2:	e005      	b.n	8004fe0 <Update_pwm+0x124>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
 8004fd4:	8c3b      	ldrh	r3, [r7, #32]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	4619      	mov	r1, r3
 8004fda:	69f8      	ldr	r0, [r7, #28]
 8004fdc:	f003 fba8 	bl	8008730 <HAL_GPIO_WritePin>
}
 8004fe0:	bf00      	nop
 8004fe2:	372c      	adds	r7, #44	@ 0x2c
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004fea <QEI_init>:
 *  Created on: Apr 24, 2024
 *      Author: naker
 */
#include "qei.h"

void QEI_init(QEI* qei, int32_t ppr, int32_t freq, int32_t period){
 8004fea:	b480      	push	{r7}
 8004fec:	b085      	sub	sp, #20
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	60f8      	str	r0, [r7, #12]
 8004ff2:	60b9      	str	r1, [r7, #8]
 8004ff4:	607a      	str	r2, [r7, #4]
 8004ff6:	603b      	str	r3, [r7, #0]
	qei -> ppr = ppr;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	601a      	str	r2, [r3, #0]
	qei -> freq = freq;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	605a      	str	r2, [r3, #4]
	qei -> period = period;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	609a      	str	r2, [r3, #8]
	qei -> counter_value[NEW] = 0;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 800501c:	68f9      	ldr	r1, [r7, #12]
 800501e:	f04f 0200 	mov.w	r2, #0
 8005022:	f04f 0300 	mov.w	r3, #0
 8005026:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0.0;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f04f 0200 	mov.w	r2, #0
 8005030:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0.0;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f04f 0200 	mov.w	r2, #0
 8005038:	621a      	str	r2, [r3, #32]
	qei -> mm = 0.0;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	629a      	str	r2, [r3, #40]	@ 0x28
	qei -> pps = 0.0;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	62da      	str	r2, [r3, #44]	@ 0x2c
	qei -> rpm = 0.0;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	631a      	str	r2, [r3, #48]	@ 0x30
	qei -> radps = 0.0;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f04f 0200 	mov.w	r2, #0
 8005058:	635a      	str	r2, [r3, #52]	@ 0x34
	qei -> mmps = 0.0;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f04f 0200 	mov.w	r2, #0
 8005060:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> radpss = 0.0;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	64da      	str	r2, [r3, #76]	@ 0x4c
	qei -> rpms = 0.0;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f04f 0200 	mov.w	r2, #0
 8005070:	651a      	str	r2, [r3, #80]	@ 0x50
	qei -> mmpss = 0.0;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f04f 0200 	mov.w	r2, #0
 8005078:	655a      	str	r2, [r3, #84]	@ 0x54
	qei -> velocity_value[NEW] = 0;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f04f 0200 	mov.w	r2, #0
 8005080:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> velocity_value[OLD] = 0;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f04f 0200 	mov.w	r2, #0
 8005088:	641a      	str	r2, [r3, #64]	@ 0x40

}
 800508a:	bf00      	nop
 800508c:	3714      	adds	r7, #20
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
	...

08005098 <Update_qei>:

void Update_qei(QEI* qei, TIM_HandleTypeDef* htim){
 8005098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800509c:	b082      	sub	sp, #8
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	6039      	str	r1, [r7, #0]
	// Update counter
	qei -> counter_value[NEW] = __HAL_TIM_GET_COUNTER(htim);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	60da      	str	r2, [r3, #12]
	// Update difference of counter's value = NEW - OLD
	qei -> diff_counter_value = qei -> counter_value[NEW] - qei -> counter_value[OLD];
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	461a      	mov	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	615a      	str	r2, [r3, #20]
	if(qei -> diff_counter_value > qei -> period / 2){
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	695a      	ldr	r2, [r3, #20]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	0fd9      	lsrs	r1, r3, #31
 80050c8:	440b      	add	r3, r1
 80050ca:	105b      	asrs	r3, r3, #1
 80050cc:	429a      	cmp	r2, r3
 80050ce:	dd06      	ble.n	80050de <Update_qei+0x46>
		qei -> diff_counter_value -= qei -> period;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	695a      	ldr	r2, [r3, #20]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	1ad2      	subs	r2, r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	615a      	str	r2, [r3, #20]
	}
	// over flow problem
	if(qei -> diff_counter_value < -(qei -> period) / 2){
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	695a      	ldr	r2, [r3, #20]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	425b      	negs	r3, r3
 80050e8:	0fd9      	lsrs	r1, r3, #31
 80050ea:	440b      	add	r3, r1
 80050ec:	105b      	asrs	r3, r3, #1
 80050ee:	429a      	cmp	r2, r3
 80050f0:	da06      	bge.n	8005100 <Update_qei+0x68>
		qei -> diff_counter_value += qei -> period;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	695a      	ldr	r2, [r3, #20]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	441a      	add	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	615a      	str	r2, [r3, #20]
	}
	// Update velocity at difference unit
	qei -> pps = (float32_t)qei -> diff_counter_value * (float32_t)(qei -> freq);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	ee07 3a90 	vmov	s15, r3
 8005108:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	ee07 3a90 	vmov	s15, r3
 8005114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	qei -> radps = qei -> pps * 2.0 * M_PI / (float)(qei -> ppr);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005126:	4618      	mov	r0, r3
 8005128:	f7fb f9da 	bl	80004e0 <__aeabi_f2d>
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	f7fb f878 	bl	8000224 <__adddf3>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4610      	mov	r0, r2
 800513a:	4619      	mov	r1, r3
 800513c:	a371      	add	r3, pc, #452	@ (adr r3, 8005304 <Update_qei+0x26c>)
 800513e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005142:	f7fb fa25 	bl	8000590 <__aeabi_dmul>
 8005146:	4602      	mov	r2, r0
 8005148:	460b      	mov	r3, r1
 800514a:	4692      	mov	sl, r2
 800514c:	469b      	mov	fp, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800515a:	ee17 0a90 	vmov	r0, s15
 800515e:	f7fb f9bf 	bl	80004e0 <__aeabi_f2d>
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	4650      	mov	r0, sl
 8005168:	4659      	mov	r1, fp
 800516a:	f7fb fb3b 	bl	80007e4 <__aeabi_ddiv>
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	4610      	mov	r0, r2
 8005174:	4619      	mov	r1, r3
 8005176:	f7fb fcdb 	bl	8000b30 <__aeabi_d2f>
 800517a:	4602      	mov	r2, r0
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	635a      	str	r2, [r3, #52]	@ 0x34
//	qei -> rpm = qei -> pps * 60.0 / (float)(qei -> ppr) ;
	qei -> mmps = qei -> pps * 16.0 / (float32_t)(qei -> ppr);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005184:	4618      	mov	r0, r3
 8005186:	f7fb f9ab 	bl	80004e0 <__aeabi_f2d>
 800518a:	f04f 0200 	mov.w	r2, #0
 800518e:	4b5c      	ldr	r3, [pc, #368]	@ (8005300 <Update_qei+0x268>)
 8005190:	f7fb f9fe 	bl	8000590 <__aeabi_dmul>
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	4692      	mov	sl, r2
 800519a:	469b      	mov	fp, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	ee07 3a90 	vmov	s15, r3
 80051a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051a8:	ee17 0a90 	vmov	r0, s15
 80051ac:	f7fb f998 	bl	80004e0 <__aeabi_f2d>
 80051b0:	4602      	mov	r2, r0
 80051b2:	460b      	mov	r3, r1
 80051b4:	4650      	mov	r0, sl
 80051b6:	4659      	mov	r1, fp
 80051b8:	f7fb fb14 	bl	80007e4 <__aeabi_ddiv>
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
 80051c0:	4610      	mov	r0, r2
 80051c2:	4619      	mov	r1, r3
 80051c4:	f7fb fcb4 	bl	8000b30 <__aeabi_d2f>
 80051c8:	4602      	mov	r2, r0
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	639a      	str	r2, [r3, #56]	@ 0x38

	// Update position at difference unit
	qei -> pulse += qei -> diff_counter_value;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	6949      	ldr	r1, [r1, #20]
 80051d8:	17c8      	asrs	r0, r1, #31
 80051da:	460c      	mov	r4, r1
 80051dc:	4605      	mov	r5, r0
 80051de:	eb12 0804 	adds.w	r8, r2, r4
 80051e2:	eb43 0905 	adc.w	r9, r3, r5
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	e9c3 8906 	strd	r8, r9, [r3, #24]
//	qei -> rad += (float)qei -> diff_counter_value * 2.0 * M_PI / (float)(qei -> ppr);
//	qei -> rev += (float)qei -> diff_counter_value / (float)(qei -> ppr);
	qei -> mm += (float32_t)qei -> diff_counter_value * 16.0 / (float32_t)(qei -> ppr); // for lead 16 mm.
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7fb f975 	bl	80004e0 <__aeabi_f2d>
 80051f6:	4604      	mov	r4, r0
 80051f8:	460d      	mov	r5, r1
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	ee07 3a90 	vmov	s15, r3
 8005202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005206:	ee17 0a90 	vmov	r0, s15
 800520a:	f7fb f969 	bl	80004e0 <__aeabi_f2d>
 800520e:	f04f 0200 	mov.w	r2, #0
 8005212:	4b3b      	ldr	r3, [pc, #236]	@ (8005300 <Update_qei+0x268>)
 8005214:	f7fb f9bc 	bl	8000590 <__aeabi_dmul>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4690      	mov	r8, r2
 800521e:	4699      	mov	r9, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	ee07 3a90 	vmov	s15, r3
 8005228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800522c:	ee17 0a90 	vmov	r0, s15
 8005230:	f7fb f956 	bl	80004e0 <__aeabi_f2d>
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	4640      	mov	r0, r8
 800523a:	4649      	mov	r1, r9
 800523c:	f7fb fad2 	bl	80007e4 <__aeabi_ddiv>
 8005240:	4602      	mov	r2, r0
 8005242:	460b      	mov	r3, r1
 8005244:	4620      	mov	r0, r4
 8005246:	4629      	mov	r1, r5
 8005248:	f7fa ffec 	bl	8000224 <__adddf3>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	4610      	mov	r0, r2
 8005252:	4619      	mov	r1, r3
 8005254:	f7fb fc6c 	bl	8000b30 <__aeabi_d2f>
 8005258:	4602      	mov	r2, r0
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	629a      	str	r2, [r3, #40]	@ 0x28

	// Update acceleration
	qei -> velocity_value[NEW] = qei -> pps;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> diff_velocity_value = qei -> velocity_value[NEW] - qei -> velocity_value[OLD];
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005272:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	qei -> ppss = qei -> diff_velocity_value * (float32_t)(qei -> freq);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	ee07 3a90 	vmov	s15, r3
 800528a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800528e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
//	qei -> radpss = qei -> ppss * 2.0 * M_PI / (float)(qei -> ppr);
//	qei -> rpms = qei -> ppss * 60.0 / (float)(qei -> ppr);
	qei -> mmpss = qei -> ppss * 16.0 / (float32_t)(qei -> ppr); // Acceleration in mm/s^2
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800529c:	4618      	mov	r0, r3
 800529e:	f7fb f91f 	bl	80004e0 <__aeabi_f2d>
 80052a2:	f04f 0200 	mov.w	r2, #0
 80052a6:	4b16      	ldr	r3, [pc, #88]	@ (8005300 <Update_qei+0x268>)
 80052a8:	f7fb f972 	bl	8000590 <__aeabi_dmul>
 80052ac:	4602      	mov	r2, r0
 80052ae:	460b      	mov	r3, r1
 80052b0:	4614      	mov	r4, r2
 80052b2:	461d      	mov	r5, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	ee07 3a90 	vmov	s15, r3
 80052bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052c0:	ee17 0a90 	vmov	r0, s15
 80052c4:	f7fb f90c 	bl	80004e0 <__aeabi_f2d>
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	4620      	mov	r0, r4
 80052ce:	4629      	mov	r1, r5
 80052d0:	f7fb fa88 	bl	80007e4 <__aeabi_ddiv>
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	4610      	mov	r0, r2
 80052da:	4619      	mov	r1, r3
 80052dc:	f7fb fc28 	bl	8000b30 <__aeabi_d2f>
 80052e0:	4602      	mov	r2, r0
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	655a      	str	r2, [r3, #84]	@ 0x54

	// Update OLD value
	qei -> counter_value[OLD] = qei -> counter_value[NEW];
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68da      	ldr	r2, [r3, #12]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	611a      	str	r2, [r3, #16]
	qei -> velocity_value[OLD] = qei -> velocity_value[NEW];
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	641a      	str	r2, [r3, #64]	@ 0x40

}
 80052f6:	bf00      	nop
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005300:	40300000 	.word	0x40300000
 8005304:	54442d18 	.word	0x54442d18
 8005308:	400921fb 	.word	0x400921fb

0800530c <Reset_qei>:

void Reset_qei(QEI* qei){
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
	qei -> counter_value[NEW] = 0;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 8005326:	6879      	ldr	r1, [r7, #4]
 8005328:	f04f 0200 	mov.w	r2, #0
 800532c:	f04f 0300 	mov.w	r3, #0
 8005330:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0.0;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f04f 0200 	mov.w	r2, #0
 800533a:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0.0;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f04f 0200 	mov.w	r2, #0
 8005342:	621a      	str	r2, [r3, #32]
	qei -> mm = 0.0;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f04f 0200 	mov.w	r2, #0
 800534a:	629a      	str	r2, [r3, #40]	@ 0x28
	qei -> pps = 0.0;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	62da      	str	r2, [r3, #44]	@ 0x2c
	qei -> rpm = 0.0;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f04f 0200 	mov.w	r2, #0
 800535a:	631a      	str	r2, [r3, #48]	@ 0x30
	qei -> radps = 0.0;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	635a      	str	r2, [r3, #52]	@ 0x34
	qei -> mmps = 0.0;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f04f 0200 	mov.w	r2, #0
 800536a:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> ppss = 0;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f04f 0200 	mov.w	r2, #0
 8005372:	649a      	str	r2, [r3, #72]	@ 0x48
	qei -> rpms = 0.0;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f04f 0200 	mov.w	r2, #0
 800537a:	651a      	str	r2, [r3, #80]	@ 0x50
	qei -> radpss = 0.0;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f04f 0200 	mov.w	r2, #0
 8005382:	64da      	str	r2, [r3, #76]	@ 0x4c
	qei -> mmpss = 0.0;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f04f 0200 	mov.w	r2, #0
 800538a:	655a      	str	r2, [r3, #84]	@ 0x54
	qei -> velocity_value[NEW] = 0;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f04f 0200 	mov.w	r2, #0
 8005392:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> velocity_value[OLD] = 0;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f04f 0200 	mov.w	r2, #0
 800539a:	641a      	str	r2, [r3, #64]	@ 0x40
	qei -> diff_velocity_value = 0;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f04f 0200 	mov.w	r2, #0
 80053a2:	645a      	str	r2, [r3, #68]	@ 0x44
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <Get_mm>:

float32_t Get_mmps(QEI* qei){
	return qei -> mmps;
}
float32_t Get_mm(QEI* qei){
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
	return qei -> mm;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053bc:	ee07 3a90 	vmov	s15, r3
}
 80053c0:	eeb0 0a67 	vmov.f32	s0, s15
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <point_init>:
 *  Created on: May 3, 2024
 *      Author: naker
 */
#include "state.h"

void point_init(POINT* point){
 80053ce:	b480      	push	{r7}
 80053d0:	b083      	sub	sp, #12
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
	point -> goal = 0.0;
 80053d6:	6879      	ldr	r1, [r7, #4]
 80053d8:	f04f 0200 	mov.w	r2, #0
 80053dc:	f04f 0300 	mov.w	r3, #0
 80053e0:	e9c1 2300 	strd	r2, r3, [r1]
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <homing_init>:



void homing_init(HOME* home){
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
	home -> homing_command = 0;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	709a      	strb	r2, [r3, #2]
	home -> homing_state[0] = 0;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	701a      	strb	r2, [r3, #0]
	home -> homing_state[1] = 0;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	705a      	strb	r2, [r3, #1]
	home -> is_home = 0;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	70da      	strb	r2, [r3, #3]
	home -> homing_first = 0;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	711a      	strb	r2, [r3, #4]
	home -> homing_ts = 0;
 8005416:	6879      	ldr	r1, [r7, #4]
 8005418:	f04f 0200 	mov.w	r2, #0
 800541c:	f04f 0300 	mov.w	r3, #0
 8005420:	e9c1 2302 	strd	r2, r3, [r1, #8]
	home -> pwm = 0;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	821a      	strh	r2, [r3, #16]
}
 800542a:	bf00      	nop
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <homing>:
void homing(HOME* home, GPIO_TypeDef* GPIO_Prox, uint16_t GPIO_Pin_Prox)
{
 8005436:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	6178      	str	r0, [r7, #20]
 8005440:	6139      	str	r1, [r7, #16]
 8005442:	4613      	mov	r3, r2
 8005444:	81fb      	strh	r3, [r7, #14]
	// If we have homing command
	if(home -> homing_command == 1){
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	789b      	ldrb	r3, [r3, #2]
 800544a:	2b01      	cmp	r3, #1
 800544c:	f040 817e 	bne.w	800574c <homing+0x316>
		if(home -> homing_state[0] == 0){
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d121      	bne.n	800549c <homing+0x66>
			// Homing state selection
			// Robot is not home but proximity is detecting
			if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && home -> is_home == 0){
 8005458:	89fb      	ldrh	r3, [r7, #14]
 800545a:	4619      	mov	r1, r3
 800545c:	6938      	ldr	r0, [r7, #16]
 800545e:	f003 f94f 	bl	8008700 <HAL_GPIO_ReadPin>
 8005462:	4603      	mov	r3, r0
 8005464:	2b01      	cmp	r3, #1
 8005466:	d107      	bne.n	8005478 <homing+0x42>
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	78db      	ldrb	r3, [r3, #3]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d103      	bne.n	8005478 <homing+0x42>
				home -> homing_state[1] = 2;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	2202      	movs	r2, #2
 8005474:	705a      	strb	r2, [r3, #1]
 8005476:	e00e      	b.n	8005496 <homing+0x60>
			}
			// Robot is not home and proximity isn't detecting
			else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && home -> is_home == 0){
 8005478:	89fb      	ldrh	r3, [r7, #14]
 800547a:	4619      	mov	r1, r3
 800547c:	6938      	ldr	r0, [r7, #16]
 800547e:	f003 f93f 	bl	8008700 <HAL_GPIO_ReadPin>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d106      	bne.n	8005496 <homing+0x60>
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	78db      	ldrb	r3, [r3, #3]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d102      	bne.n	8005496 <homing+0x60>
				home -> homing_state[1] = 3;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	2203      	movs	r2, #3
 8005494:	705a      	strb	r2, [r3, #1]
			}
			// Set homing state
			home -> homing_state[0] = 1;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2201      	movs	r2, #1
 800549a:	701a      	strb	r2, [r3, #0]
		}
		if(home -> homing_state[0] == 1){
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	f040 8156 	bne.w	8005752 <homing+0x31c>
			// Homing
			if(home -> homing_state[1] == 2){
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	785b      	ldrb	r3, [r3, #1]
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d17a      	bne.n	80055a4 <homing+0x16e>
//				home -> state_check += 10;
				if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1 && home -> homing_ts > 2000){
 80054ae:	89fb      	ldrh	r3, [r7, #14]
 80054b0:	4619      	mov	r1, r3
 80054b2:	6938      	ldr	r0, [r7, #16]
 80054b4:	f003 f924 	bl	8008700 <HAL_GPIO_ReadPin>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d11f      	bne.n	80054fe <homing+0xc8>
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80054c4:	f240 71d1 	movw	r1, #2001	@ 0x7d1
 80054c8:	428a      	cmp	r2, r1
 80054ca:	f173 0300 	sbcs.w	r3, r3, #0
 80054ce:	d316      	bcc.n	80054fe <homing+0xc8>
					// Stop when proximity was detected
					home -> pwm = 0;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	2200      	movs	r2, #0
 80054d4:	821a      	strh	r2, [r3, #16]
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0);
					// Reset homing state and other
					home -> homing_ts = 0;
 80054d6:	6979      	ldr	r1, [r7, #20]
 80054d8:	f04f 0200 	mov.w	r2, #0
 80054dc:	f04f 0300 	mov.w	r3, #0
 80054e0:	e9c1 2302 	strd	r2, r3, [r1, #8]
					home -> homing_state[0] = 0;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2200      	movs	r2, #0
 80054e8:	701a      	strb	r2, [r3, #0]
					home -> homing_state[1] = 0;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2200      	movs	r2, #0
 80054ee:	705a      	strb	r2, [r3, #1]
					home -> homing_command = 0;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	2200      	movs	r2, #0
 80054f4:	709a      	strb	r2, [r3, #2]
					home -> is_home = 1;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2201      	movs	r2, #1
 80054fa:	70da      	strb	r2, [r3, #3]
					return;
 80054fc:	e129      	b.n	8005752 <homing+0x31c>
				}else if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1 && home -> homing_ts >= 0 && home -> homing_ts < 1000){
 80054fe:	89fb      	ldrh	r3, [r7, #14]
 8005500:	4619      	mov	r1, r3
 8005502:	6938      	ldr	r0, [r7, #16]
 8005504:	f003 f8fc 	bl	8008700 <HAL_GPIO_ReadPin>
 8005508:	4603      	mov	r3, r0
 800550a:	2b01      	cmp	r3, #1
 800550c:	d10c      	bne.n	8005528 <homing+0xf2>
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005514:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8005518:	f173 0300 	sbcs.w	r3, r3, #0
 800551c:	d204      	bcs.n	8005528 <homing+0xf2>
					// Move upper
					home -> pwm = 16000;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8005524:	821a      	strh	r2, [r3, #16]
 8005526:	e02f      	b.n	8005588 <homing+0x152>
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 200);
				}else if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0 && home -> homing_ts >= 1000 && home -> homing_ts < 2000){ // wait 1.0 secs
 8005528:	89fb      	ldrh	r3, [r7, #14]
 800552a:	4619      	mov	r1, r3
 800552c:	6938      	ldr	r0, [r7, #16]
 800552e:	f003 f8e7 	bl	8008700 <HAL_GPIO_ReadPin>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d113      	bne.n	8005560 <homing+0x12a>
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800553e:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8005542:	f173 0300 	sbcs.w	r3, r3, #0
 8005546:	d30b      	bcc.n	8005560 <homing+0x12a>
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800554e:	f5b2 6ffa 	cmp.w	r2, #2000	@ 0x7d0
 8005552:	f173 0300 	sbcs.w	r3, r3, #0
 8005556:	d203      	bcs.n	8005560 <homing+0x12a>
					// Stop
					home -> pwm = 0;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	2200      	movs	r2, #0
 800555c:	821a      	strh	r2, [r3, #16]
 800555e:	e013      	b.n	8005588 <homing+0x152>
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0);
				}else if(HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0 && home -> homing_ts >= 2000){ // wait 1.25 secs
 8005560:	89fb      	ldrh	r3, [r7, #14]
 8005562:	4619      	mov	r1, r3
 8005564:	6938      	ldr	r0, [r7, #16]
 8005566:	f003 f8cb 	bl	8008700 <HAL_GPIO_ReadPin>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10b      	bne.n	8005588 <homing+0x152>
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005576:	f5b2 6ffa 	cmp.w	r2, #2000	@ 0x7d0
 800557a:	f173 0300 	sbcs.w	r3, r3, #0
 800557e:	d303      	bcc.n	8005588 <homing+0x152>
					// Move lower
					home -> pwm = -10000;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f64d 02f0 	movw	r2, #55536	@ 0xd8f0
 8005586:	821a      	strh	r2, [r3, #16]
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, -120);
				}
				home -> homing_ts++;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800558e:	1c51      	adds	r1, r2, #1
 8005590:	6039      	str	r1, [r7, #0]
 8005592:	f143 0300 	adc.w	r3, r3, #0
 8005596:	607b      	str	r3, [r7, #4]
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800559e:	e9c3 1202 	strd	r1, r2, [r3, #8]
 80055a2:	e0d6      	b.n	8005752 <homing+0x31c>
			}
			else if(home -> homing_state[1] == 3){
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	785b      	ldrb	r3, [r3, #1]
 80055a8:	2b03      	cmp	r3, #3
 80055aa:	f040 80d2 	bne.w	8005752 <homing+0x31c>
				if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && (home -> homing_first == 1)){
 80055ae:	89fb      	ldrh	r3, [r7, #14]
 80055b0:	4619      	mov	r1, r3
 80055b2:	6938      	ldr	r0, [r7, #16]
 80055b4:	f003 f8a4 	bl	8008700 <HAL_GPIO_ReadPin>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d11d      	bne.n	80055fa <homing+0x1c4>
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	791b      	ldrb	r3, [r3, #4]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d119      	bne.n	80055fa <homing+0x1c4>
					// Stop when proximity was detected
					home -> pwm = 0;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2200      	movs	r2, #0
 80055ca:	821a      	strh	r2, [r3, #16]
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0);
					// Reset homing state and other
					home -> homing_ts = 0;
 80055cc:	6979      	ldr	r1, [r7, #20]
 80055ce:	f04f 0200 	mov.w	r2, #0
 80055d2:	f04f 0300 	mov.w	r3, #0
 80055d6:	e9c1 2302 	strd	r2, r3, [r1, #8]
					home -> homing_first = 0;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2200      	movs	r2, #0
 80055de:	711a      	strb	r2, [r3, #4]
					home -> homing_state[0] = 0;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	2200      	movs	r2, #0
 80055e4:	701a      	strb	r2, [r3, #0]
					home -> homing_state[1] = 0;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	2200      	movs	r2, #0
 80055ea:	705a      	strb	r2, [r3, #1]
					home -> homing_command = 0;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	2200      	movs	r2, #0
 80055f0:	709a      	strb	r2, [r3, #2]
					home -> is_home = 1;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2201      	movs	r2, #1
 80055f6:	70da      	strb	r2, [r3, #3]
					return;
 80055f8:	e0ab      	b.n	8005752 <homing+0x31c>
				}else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 1) && (home -> homing_first == 0)){
 80055fa:	89fb      	ldrh	r3, [r7, #14]
 80055fc:	4619      	mov	r1, r3
 80055fe:	6938      	ldr	r0, [r7, #16]
 8005600:	f003 f87e 	bl	8008700 <HAL_GPIO_ReadPin>
 8005604:	4603      	mov	r3, r0
 8005606:	2b01      	cmp	r3, #1
 8005608:	d12b      	bne.n	8005662 <homing+0x22c>
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	791b      	ldrb	r3, [r3, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d127      	bne.n	8005662 <homing+0x22c>
					// Stop when proximity was detected
					if(home -> homing_ts == 0){
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005618:	4313      	orrs	r3, r2
 800561a:	d102      	bne.n	8005622 <homing+0x1ec>
						home -> pwm = 0;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	2200      	movs	r2, #0
 8005620:	821a      	strh	r2, [r3, #16]
//						Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0);
					}
					home -> homing_ts++;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005628:	f112 0a01 	adds.w	sl, r2, #1
 800562c:	f143 0b00 	adc.w	fp, r3, #0
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	e9c3 ab02 	strd	sl, fp, [r3, #8]
					if(home -> homing_ts >= 1000 && home -> homing_ts < 2000){ // wait 0.25 secs
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800563c:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8005640:	f173 0300 	sbcs.w	r3, r3, #0
 8005644:	f0c0 8084 	bcc.w	8005750 <homing+0x31a>
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800564e:	f5b2 6ffa 	cmp.w	r2, #2000	@ 0x7d0
 8005652:	f173 0300 	sbcs.w	r3, r3, #0
 8005656:	d27b      	bcs.n	8005750 <homing+0x31a>
						 // Move upper
						home -> pwm = 16000;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800565e:	821a      	strh	r2, [r3, #16]
					if(home -> homing_ts >= 1000 && home -> homing_ts < 2000){ // wait 0.25 secs
 8005660:	e076      	b.n	8005750 <homing+0x31a>
//						Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 200);
					}
				}else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && (home -> homing_first == 1) && home -> homing_ts >= 2000 && home -> homing_ts < 3000){ // wait 0.5 secs
 8005662:	89fb      	ldrh	r3, [r7, #14]
 8005664:	4619      	mov	r1, r3
 8005666:	6938      	ldr	r0, [r7, #16]
 8005668:	f003 f84a 	bl	8008700 <HAL_GPIO_ReadPin>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d122      	bne.n	80056b8 <homing+0x282>
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	791b      	ldrb	r3, [r3, #4]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d11e      	bne.n	80056b8 <homing+0x282>
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005680:	f5b2 6ffa 	cmp.w	r2, #2000	@ 0x7d0
 8005684:	f173 0300 	sbcs.w	r3, r3, #0
 8005688:	d316      	bcc.n	80056b8 <homing+0x282>
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005690:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8005694:	428a      	cmp	r2, r1
 8005696:	f173 0300 	sbcs.w	r3, r3, #0
 800569a:	d20d      	bcs.n	80056b8 <homing+0x282>
					// Stop
					home -> pwm = 0;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	2200      	movs	r2, #0
 80056a0:	821a      	strh	r2, [r3, #16]
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, 0);
					home -> homing_ts++;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80056a8:	f112 0801 	adds.w	r8, r2, #1
 80056ac:	f143 0900 	adc.w	r9, r3, #0
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80056b6:	e04c      	b.n	8005752 <homing+0x31c>
				}else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && (home -> homing_first == 1) && home -> homing_ts >= 3000){ // wait 1.25 secs
 80056b8:	89fb      	ldrh	r3, [r7, #14]
 80056ba:	4619      	mov	r1, r3
 80056bc:	6938      	ldr	r0, [r7, #16]
 80056be:	f003 f81f 	bl	8008700 <HAL_GPIO_ReadPin>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d111      	bne.n	80056ec <homing+0x2b6>
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	791b      	ldrb	r3, [r3, #4]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d10d      	bne.n	80056ec <homing+0x2b6>
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80056d6:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80056da:	428a      	cmp	r2, r1
 80056dc:	f173 0300 	sbcs.w	r3, r3, #0
 80056e0:	d304      	bcc.n	80056ec <homing+0x2b6>
					// Move lower
					home -> pwm = -10000;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f64d 02f0 	movw	r2, #55536	@ 0xd8f0
 80056e8:	821a      	strh	r2, [r3, #16]
 80056ea:	e032      	b.n	8005752 <homing+0x31c>
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, -120);
				}else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && (home -> homing_first == 1)){
 80056ec:	89fb      	ldrh	r3, [r7, #14]
 80056ee:	4619      	mov	r1, r3
 80056f0:	6938      	ldr	r0, [r7, #16]
 80056f2:	f003 f805 	bl	8008700 <HAL_GPIO_ReadPin>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10d      	bne.n	8005718 <homing+0x2e2>
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	791b      	ldrb	r3, [r3, #4]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d109      	bne.n	8005718 <homing+0x2e2>
					home -> homing_ts++;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800570a:	1c54      	adds	r4, r2, #1
 800570c:	f143 0500 	adc.w	r5, r3, #0
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	e9c3 4502 	strd	r4, r5, [r3, #8]
 8005716:	e01c      	b.n	8005752 <homing+0x31c>
				}else if((HAL_GPIO_ReadPin(GPIO_Prox, GPIO_Pin_Prox) == 0) && (home -> homing_first == 0) && home -> homing_ts == 0){
 8005718:	89fb      	ldrh	r3, [r7, #14]
 800571a:	4619      	mov	r1, r3
 800571c:	6938      	ldr	r0, [r7, #16]
 800571e:	f002 ffef 	bl	8008700 <HAL_GPIO_ReadPin>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10d      	bne.n	8005744 <homing+0x30e>
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	791b      	ldrb	r3, [r3, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d109      	bne.n	8005744 <homing+0x30e>
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005736:	4313      	orrs	r3, r2
 8005738:	d104      	bne.n	8005744 <homing+0x30e>
					home -> pwm = -10000;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f64d 02f0 	movw	r2, #55536	@ 0xd8f0
 8005740:	821a      	strh	r2, [r3, #16]
 8005742:	e006      	b.n	8005752 <homing+0x31c>
//					Update_pwm(htim, htim_channel, GPIO_PWM, GPIO_Pin_PWM, -120); // Move lower
				}else{
					home -> homing_first = 1;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	2201      	movs	r2, #1
 8005748:	711a      	strb	r2, [r3, #4]
 800574a:	e002      	b.n	8005752 <homing+0x31c>
			}
		}
	}
	// Nothing happen
	else{
		return;
 800574c:	bf00      	nop
 800574e:	e000      	b.n	8005752 <homing+0x31c>
					if(home -> homing_ts >= 1000 && home -> homing_ts < 2000){ // wait 0.25 secs
 8005750:	bf00      	nop
	}
}
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800575a <Reset_homing>:
void Reset_homing(HOME* home){
 800575a:	b480      	push	{r7}
 800575c:	b083      	sub	sp, #12
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
	home -> homing_command = 0;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	709a      	strb	r2, [r3, #2]
	home -> homing_first = 0;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	711a      	strb	r2, [r3, #4]
	home -> homing_ts = 0;
 800576e:	6879      	ldr	r1, [r7, #4]
 8005770:	f04f 0200 	mov.w	r2, #0
 8005774:	f04f 0300 	mov.w	r3, #0
 8005778:	e9c1 2302 	strd	r2, r3, [r1, #8]
	home -> is_home = 0;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	70da      	strb	r2, [r3, #3]
	home -> pwm = 0;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	821a      	strh	r2, [r3, #16]
	home -> state_check = 0;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	715a      	strb	r2, [r3, #5]
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <emer_init>:

void emer_init(EMER* emer){
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
	emer -> emer_state = 0;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	701a      	strb	r2, [r3, #0]
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057ba:	4b0f      	ldr	r3, [pc, #60]	@ (80057f8 <HAL_MspInit+0x44>)
 80057bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057be:	4a0e      	ldr	r2, [pc, #56]	@ (80057f8 <HAL_MspInit+0x44>)
 80057c0:	f043 0301 	orr.w	r3, r3, #1
 80057c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80057c6:	4b0c      	ldr	r3, [pc, #48]	@ (80057f8 <HAL_MspInit+0x44>)
 80057c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	607b      	str	r3, [r7, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80057d2:	4b09      	ldr	r3, [pc, #36]	@ (80057f8 <HAL_MspInit+0x44>)
 80057d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057d6:	4a08      	ldr	r2, [pc, #32]	@ (80057f8 <HAL_MspInit+0x44>)
 80057d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80057de:	4b06      	ldr	r3, [pc, #24]	@ (80057f8 <HAL_MspInit+0x44>)
 80057e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057e6:	603b      	str	r3, [r7, #0]
 80057e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80057ea:	f003 f875 	bl	80088d8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80057ee:	bf00      	nop
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	40021000 	.word	0x40021000

080057fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b09e      	sub	sp, #120	@ 0x78
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005804:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005808:	2200      	movs	r2, #0
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	605a      	str	r2, [r3, #4]
 800580e:	609a      	str	r2, [r3, #8]
 8005810:	60da      	str	r2, [r3, #12]
 8005812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005814:	f107 0310 	add.w	r3, r7, #16
 8005818:	2254      	movs	r2, #84	@ 0x54
 800581a:	2100      	movs	r1, #0
 800581c:	4618      	mov	r0, r3
 800581e:	f007 ffe5 	bl	800d7ec <memset>
  if(hadc->Instance==ADC1)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800582a:	d167      	bne.n	80058fc <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800582c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005830:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8005832:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005836:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005838:	f107 0310 	add.w	r3, r7, #16
 800583c:	4618      	mov	r0, r3
 800583e:	f003 fd89 	bl	8009354 <HAL_RCCEx_PeriphCLKConfig>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8005848:	f7ff fa4c 	bl	8004ce4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800584c:	4b2d      	ldr	r3, [pc, #180]	@ (8005904 <HAL_ADC_MspInit+0x108>)
 800584e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005850:	4a2c      	ldr	r2, [pc, #176]	@ (8005904 <HAL_ADC_MspInit+0x108>)
 8005852:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005856:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005858:	4b2a      	ldr	r3, [pc, #168]	@ (8005904 <HAL_ADC_MspInit+0x108>)
 800585a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800585c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005860:	60fb      	str	r3, [r7, #12]
 8005862:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005864:	4b27      	ldr	r3, [pc, #156]	@ (8005904 <HAL_ADC_MspInit+0x108>)
 8005866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005868:	4a26      	ldr	r2, [pc, #152]	@ (8005904 <HAL_ADC_MspInit+0x108>)
 800586a:	f043 0301 	orr.w	r3, r3, #1
 800586e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005870:	4b24      	ldr	r3, [pc, #144]	@ (8005904 <HAL_ADC_MspInit+0x108>)
 8005872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	60bb      	str	r3, [r7, #8]
 800587a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Current_sensor_Pin;
 800587c:	2301      	movs	r3, #1
 800587e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005880:	2303      	movs	r3, #3
 8005882:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005884:	2300      	movs	r3, #0
 8005886:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Current_sensor_GPIO_Port, &GPIO_InitStruct);
 8005888:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800588c:	4619      	mov	r1, r3
 800588e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005892:	f002 fdb3 	bl	80083fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8005896:	4b1c      	ldr	r3, [pc, #112]	@ (8005908 <HAL_ADC_MspInit+0x10c>)
 8005898:	4a1c      	ldr	r2, [pc, #112]	@ (800590c <HAL_ADC_MspInit+0x110>)
 800589a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800589c:	4b1a      	ldr	r3, [pc, #104]	@ (8005908 <HAL_ADC_MspInit+0x10c>)
 800589e:	2205      	movs	r2, #5
 80058a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80058a2:	4b19      	ldr	r3, [pc, #100]	@ (8005908 <HAL_ADC_MspInit+0x10c>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80058a8:	4b17      	ldr	r3, [pc, #92]	@ (8005908 <HAL_ADC_MspInit+0x10c>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80058ae:	4b16      	ldr	r3, [pc, #88]	@ (8005908 <HAL_ADC_MspInit+0x10c>)
 80058b0:	2280      	movs	r2, #128	@ 0x80
 80058b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80058b4:	4b14      	ldr	r3, [pc, #80]	@ (8005908 <HAL_ADC_MspInit+0x10c>)
 80058b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80058ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80058bc:	4b12      	ldr	r3, [pc, #72]	@ (8005908 <HAL_ADC_MspInit+0x10c>)
 80058be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80058c2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80058c4:	4b10      	ldr	r3, [pc, #64]	@ (8005908 <HAL_ADC_MspInit+0x10c>)
 80058c6:	2220      	movs	r2, #32
 80058c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80058ca:	4b0f      	ldr	r3, [pc, #60]	@ (8005908 <HAL_ADC_MspInit+0x10c>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80058d0:	480d      	ldr	r0, [pc, #52]	@ (8005908 <HAL_ADC_MspInit+0x10c>)
 80058d2:	f002 fa61 	bl	8007d98 <HAL_DMA_Init>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80058dc:	f7ff fa02 	bl	8004ce4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a09      	ldr	r2, [pc, #36]	@ (8005908 <HAL_ADC_MspInit+0x10c>)
 80058e4:	655a      	str	r2, [r3, #84]	@ 0x54
 80058e6:	4a08      	ldr	r2, [pc, #32]	@ (8005908 <HAL_ADC_MspInit+0x10c>)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80058ec:	2200      	movs	r2, #0
 80058ee:	2100      	movs	r1, #0
 80058f0:	2012      	movs	r0, #18
 80058f2:	f002 fa1c 	bl	8007d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80058f6:	2012      	movs	r0, #18
 80058f8:	f002 fa33 	bl	8007d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80058fc:	bf00      	nop
 80058fe:	3778      	adds	r7, #120	@ 0x78
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	40021000 	.word	0x40021000
 8005908:	20000914 	.word	0x20000914
 800590c:	40020008 	.word	0x40020008

08005910 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a3c      	ldr	r2, [pc, #240]	@ (8005a10 <HAL_TIM_Base_MspInit+0x100>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d13f      	bne.n	80059a2 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005922:	4b3c      	ldr	r3, [pc, #240]	@ (8005a14 <HAL_TIM_Base_MspInit+0x104>)
 8005924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005926:	4a3b      	ldr	r2, [pc, #236]	@ (8005a14 <HAL_TIM_Base_MspInit+0x104>)
 8005928:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800592c:	6613      	str	r3, [r2, #96]	@ 0x60
 800592e:	4b39      	ldr	r3, [pc, #228]	@ (8005a14 <HAL_TIM_Base_MspInit+0x104>)
 8005930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005932:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel4;
 800593a:	4b37      	ldr	r3, [pc, #220]	@ (8005a18 <HAL_TIM_Base_MspInit+0x108>)
 800593c:	4a37      	ldr	r2, [pc, #220]	@ (8005a1c <HAL_TIM_Base_MspInit+0x10c>)
 800593e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8005940:	4b35      	ldr	r3, [pc, #212]	@ (8005a18 <HAL_TIM_Base_MspInit+0x108>)
 8005942:	222a      	movs	r2, #42	@ 0x2a
 8005944:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005946:	4b34      	ldr	r3, [pc, #208]	@ (8005a18 <HAL_TIM_Base_MspInit+0x108>)
 8005948:	2210      	movs	r2, #16
 800594a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800594c:	4b32      	ldr	r3, [pc, #200]	@ (8005a18 <HAL_TIM_Base_MspInit+0x108>)
 800594e:	2200      	movs	r2, #0
 8005950:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005952:	4b31      	ldr	r3, [pc, #196]	@ (8005a18 <HAL_TIM_Base_MspInit+0x108>)
 8005954:	2280      	movs	r2, #128	@ 0x80
 8005956:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005958:	4b2f      	ldr	r3, [pc, #188]	@ (8005a18 <HAL_TIM_Base_MspInit+0x108>)
 800595a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800595e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005960:	4b2d      	ldr	r3, [pc, #180]	@ (8005a18 <HAL_TIM_Base_MspInit+0x108>)
 8005962:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005966:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8005968:	4b2b      	ldr	r3, [pc, #172]	@ (8005a18 <HAL_TIM_Base_MspInit+0x108>)
 800596a:	2200      	movs	r2, #0
 800596c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800596e:	4b2a      	ldr	r3, [pc, #168]	@ (8005a18 <HAL_TIM_Base_MspInit+0x108>)
 8005970:	2200      	movs	r2, #0
 8005972:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8005974:	4828      	ldr	r0, [pc, #160]	@ (8005a18 <HAL_TIM_Base_MspInit+0x108>)
 8005976:	f002 fa0f 	bl	8007d98 <HAL_DMA_Init>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d001      	beq.n	8005984 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8005980:	f7ff f9b0 	bl	8004ce4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a24      	ldr	r2, [pc, #144]	@ (8005a18 <HAL_TIM_Base_MspInit+0x108>)
 8005988:	625a      	str	r2, [r3, #36]	@ 0x24
 800598a:	4a23      	ldr	r2, [pc, #140]	@ (8005a18 <HAL_TIM_Base_MspInit+0x108>)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005990:	2200      	movs	r2, #0
 8005992:	2100      	movs	r1, #0
 8005994:	2019      	movs	r0, #25
 8005996:	f002 f9ca 	bl	8007d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800599a:	2019      	movs	r0, #25
 800599c:	f002 f9e1 	bl	8007d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80059a0:	e032      	b.n	8005a08 <HAL_TIM_Base_MspInit+0xf8>
  else if(htim_base->Instance==TIM3)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005a20 <HAL_TIM_Base_MspInit+0x110>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d114      	bne.n	80059d6 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80059ac:	4b19      	ldr	r3, [pc, #100]	@ (8005a14 <HAL_TIM_Base_MspInit+0x104>)
 80059ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059b0:	4a18      	ldr	r2, [pc, #96]	@ (8005a14 <HAL_TIM_Base_MspInit+0x104>)
 80059b2:	f043 0302 	orr.w	r3, r3, #2
 80059b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80059b8:	4b16      	ldr	r3, [pc, #88]	@ (8005a14 <HAL_TIM_Base_MspInit+0x104>)
 80059ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	613b      	str	r3, [r7, #16]
 80059c2:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80059c4:	2200      	movs	r2, #0
 80059c6:	2100      	movs	r1, #0
 80059c8:	201d      	movs	r0, #29
 80059ca:	f002 f9b0 	bl	8007d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80059ce:	201d      	movs	r0, #29
 80059d0:	f002 f9c7 	bl	8007d62 <HAL_NVIC_EnableIRQ>
}
 80059d4:	e018      	b.n	8005a08 <HAL_TIM_Base_MspInit+0xf8>
  else if(htim_base->Instance==TIM16)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a12      	ldr	r2, [pc, #72]	@ (8005a24 <HAL_TIM_Base_MspInit+0x114>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d113      	bne.n	8005a08 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80059e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005a14 <HAL_TIM_Base_MspInit+0x104>)
 80059e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059e4:	4a0b      	ldr	r2, [pc, #44]	@ (8005a14 <HAL_TIM_Base_MspInit+0x104>)
 80059e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059ea:	6613      	str	r3, [r2, #96]	@ 0x60
 80059ec:	4b09      	ldr	r3, [pc, #36]	@ (8005a14 <HAL_TIM_Base_MspInit+0x104>)
 80059ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80059f8:	2200      	movs	r2, #0
 80059fa:	2100      	movs	r1, #0
 80059fc:	2019      	movs	r0, #25
 80059fe:	f002 f996 	bl	8007d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005a02:	2019      	movs	r0, #25
 8005a04:	f002 f9ad 	bl	8007d62 <HAL_NVIC_EnableIRQ>
}
 8005a08:	bf00      	nop
 8005a0a:	3718      	adds	r7, #24
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	40012c00 	.word	0x40012c00
 8005a14:	40021000 	.word	0x40021000
 8005a18:	20000ca4 	.word	0x20000ca4
 8005a1c:	40020044 	.word	0x40020044
 8005a20:	40000400 	.word	0x40000400
 8005a24:	40014400 	.word	0x40014400

08005a28 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08a      	sub	sp, #40	@ 0x28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a30:	f107 0314 	add.w	r3, r7, #20
 8005a34:	2200      	movs	r2, #0
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	605a      	str	r2, [r3, #4]
 8005a3a:	609a      	str	r2, [r3, #8]
 8005a3c:	60da      	str	r2, [r3, #12]
 8005a3e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a1c      	ldr	r2, [pc, #112]	@ (8005ab8 <HAL_TIM_Encoder_MspInit+0x90>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d131      	bne.n	8005aae <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8005abc <HAL_TIM_Encoder_MspInit+0x94>)
 8005a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a4e:	4a1b      	ldr	r2, [pc, #108]	@ (8005abc <HAL_TIM_Encoder_MspInit+0x94>)
 8005a50:	f043 0304 	orr.w	r3, r3, #4
 8005a54:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a56:	4b19      	ldr	r3, [pc, #100]	@ (8005abc <HAL_TIM_Encoder_MspInit+0x94>)
 8005a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a5a:	f003 0304 	and.w	r3, r3, #4
 8005a5e:	613b      	str	r3, [r7, #16]
 8005a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a62:	4b16      	ldr	r3, [pc, #88]	@ (8005abc <HAL_TIM_Encoder_MspInit+0x94>)
 8005a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a66:	4a15      	ldr	r2, [pc, #84]	@ (8005abc <HAL_TIM_Encoder_MspInit+0x94>)
 8005a68:	f043 0301 	orr.w	r3, r3, #1
 8005a6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a6e:	4b13      	ldr	r3, [pc, #76]	@ (8005abc <HAL_TIM_Encoder_MspInit+0x94>)
 8005a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
 8005a7a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a80:	2302      	movs	r3, #2
 8005a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a84:	2300      	movs	r3, #0
 8005a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8005a8c:	230a      	movs	r3, #10
 8005a8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a90:	f107 0314 	add.w	r3, r7, #20
 8005a94:	4619      	mov	r1, r3
 8005a96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005a9a:	f002 fcaf 	bl	80083fc <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	201e      	movs	r0, #30
 8005aa4:	f002 f943 	bl	8007d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005aa8:	201e      	movs	r0, #30
 8005aaa:	f002 f95a 	bl	8007d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005aae:	bf00      	nop
 8005ab0:	3728      	adds	r7, #40	@ 0x28
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	40000800 	.word	0x40000800
 8005abc:	40021000 	.word	0x40021000

08005ac0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b088      	sub	sp, #32
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ac8:	f107 030c 	add.w	r3, r7, #12
 8005acc:	2200      	movs	r2, #0
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	605a      	str	r2, [r3, #4]
 8005ad2:	609a      	str	r2, [r3, #8]
 8005ad4:	60da      	str	r2, [r3, #12]
 8005ad6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a11      	ldr	r2, [pc, #68]	@ (8005b24 <HAL_TIM_MspPostInit+0x64>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d11b      	bne.n	8005b1a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ae2:	4b11      	ldr	r3, [pc, #68]	@ (8005b28 <HAL_TIM_MspPostInit+0x68>)
 8005ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ae6:	4a10      	ldr	r2, [pc, #64]	@ (8005b28 <HAL_TIM_MspPostInit+0x68>)
 8005ae8:	f043 0304 	orr.w	r3, r3, #4
 8005aec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005aee:	4b0e      	ldr	r3, [pc, #56]	@ (8005b28 <HAL_TIM_MspPostInit+0x68>)
 8005af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005af2:	f003 0304 	and.w	r3, r3, #4
 8005af6:	60bb      	str	r3, [r7, #8]
 8005af8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_signal_Pin;
 8005afa:	2301      	movs	r3, #1
 8005afc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005afe:	2302      	movs	r3, #2
 8005b00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b02:	2300      	movs	r3, #0
 8005b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b06:	2300      	movs	r3, #0
 8005b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_signal_GPIO_Port, &GPIO_InitStruct);
 8005b0e:	f107 030c 	add.w	r3, r7, #12
 8005b12:	4619      	mov	r1, r3
 8005b14:	4805      	ldr	r0, [pc, #20]	@ (8005b2c <HAL_TIM_MspPostInit+0x6c>)
 8005b16:	f002 fc71 	bl	80083fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005b1a:	bf00      	nop
 8005b1c:	3720      	adds	r7, #32
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	40012c00 	.word	0x40012c00
 8005b28:	40021000 	.word	0x40021000
 8005b2c:	48000800 	.word	0x48000800

08005b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b09e      	sub	sp, #120	@ 0x78
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b38:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	605a      	str	r2, [r3, #4]
 8005b42:	609a      	str	r2, [r3, #8]
 8005b44:	60da      	str	r2, [r3, #12]
 8005b46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005b48:	f107 0310 	add.w	r3, r7, #16
 8005b4c:	2254      	movs	r2, #84	@ 0x54
 8005b4e:	2100      	movs	r1, #0
 8005b50:	4618      	mov	r0, r3
 8005b52:	f007 fe4b 	bl	800d7ec <memset>
  if(huart->Instance==USART2)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a4d      	ldr	r2, [pc, #308]	@ (8005c90 <HAL_UART_MspInit+0x160>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	f040 8092 	bne.w	8005c86 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005b62:	2302      	movs	r3, #2
 8005b64:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005b66:	2300      	movs	r3, #0
 8005b68:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005b6a:	f107 0310 	add.w	r3, r7, #16
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f003 fbf0 	bl	8009354 <HAL_RCCEx_PeriphCLKConfig>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005b7a:	f7ff f8b3 	bl	8004ce4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005b7e:	4b45      	ldr	r3, [pc, #276]	@ (8005c94 <HAL_UART_MspInit+0x164>)
 8005b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b82:	4a44      	ldr	r2, [pc, #272]	@ (8005c94 <HAL_UART_MspInit+0x164>)
 8005b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b88:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b8a:	4b42      	ldr	r3, [pc, #264]	@ (8005c94 <HAL_UART_MspInit+0x164>)
 8005b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b96:	4b3f      	ldr	r3, [pc, #252]	@ (8005c94 <HAL_UART_MspInit+0x164>)
 8005b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b9a:	4a3e      	ldr	r2, [pc, #248]	@ (8005c94 <HAL_UART_MspInit+0x164>)
 8005b9c:	f043 0301 	orr.w	r3, r3, #1
 8005ba0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ba2:	4b3c      	ldr	r3, [pc, #240]	@ (8005c94 <HAL_UART_MspInit+0x164>)
 8005ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ba6:	f003 0301 	and.w	r3, r3, #1
 8005baa:	60bb      	str	r3, [r7, #8]
 8005bac:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005bae:	230c      	movs	r3, #12
 8005bb0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005bbe:	2307      	movs	r3, #7
 8005bc0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bc2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005bcc:	f002 fc16 	bl	80083fc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8005bd0:	4b31      	ldr	r3, [pc, #196]	@ (8005c98 <HAL_UART_MspInit+0x168>)
 8005bd2:	4a32      	ldr	r2, [pc, #200]	@ (8005c9c <HAL_UART_MspInit+0x16c>)
 8005bd4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005bd6:	4b30      	ldr	r3, [pc, #192]	@ (8005c98 <HAL_UART_MspInit+0x168>)
 8005bd8:	221a      	movs	r2, #26
 8005bda:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005bdc:	4b2e      	ldr	r3, [pc, #184]	@ (8005c98 <HAL_UART_MspInit+0x168>)
 8005bde:	2200      	movs	r2, #0
 8005be0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005be2:	4b2d      	ldr	r3, [pc, #180]	@ (8005c98 <HAL_UART_MspInit+0x168>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005be8:	4b2b      	ldr	r3, [pc, #172]	@ (8005c98 <HAL_UART_MspInit+0x168>)
 8005bea:	2280      	movs	r2, #128	@ 0x80
 8005bec:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005bee:	4b2a      	ldr	r3, [pc, #168]	@ (8005c98 <HAL_UART_MspInit+0x168>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005bf4:	4b28      	ldr	r3, [pc, #160]	@ (8005c98 <HAL_UART_MspInit+0x168>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005bfa:	4b27      	ldr	r3, [pc, #156]	@ (8005c98 <HAL_UART_MspInit+0x168>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005c00:	4b25      	ldr	r3, [pc, #148]	@ (8005c98 <HAL_UART_MspInit+0x168>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005c06:	4824      	ldr	r0, [pc, #144]	@ (8005c98 <HAL_UART_MspInit+0x168>)
 8005c08:	f002 f8c6 	bl	8007d98 <HAL_DMA_Init>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d001      	beq.n	8005c16 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8005c12:	f7ff f867 	bl	8004ce4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a1f      	ldr	r2, [pc, #124]	@ (8005c98 <HAL_UART_MspInit+0x168>)
 8005c1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005c1e:	4a1e      	ldr	r2, [pc, #120]	@ (8005c98 <HAL_UART_MspInit+0x168>)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8005c24:	4b1e      	ldr	r3, [pc, #120]	@ (8005ca0 <HAL_UART_MspInit+0x170>)
 8005c26:	4a1f      	ldr	r2, [pc, #124]	@ (8005ca4 <HAL_UART_MspInit+0x174>)
 8005c28:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ca0 <HAL_UART_MspInit+0x170>)
 8005c2c:	221b      	movs	r2, #27
 8005c2e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005c30:	4b1b      	ldr	r3, [pc, #108]	@ (8005ca0 <HAL_UART_MspInit+0x170>)
 8005c32:	2210      	movs	r2, #16
 8005c34:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c36:	4b1a      	ldr	r3, [pc, #104]	@ (8005ca0 <HAL_UART_MspInit+0x170>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005c3c:	4b18      	ldr	r3, [pc, #96]	@ (8005ca0 <HAL_UART_MspInit+0x170>)
 8005c3e:	2280      	movs	r2, #128	@ 0x80
 8005c40:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c42:	4b17      	ldr	r3, [pc, #92]	@ (8005ca0 <HAL_UART_MspInit+0x170>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c48:	4b15      	ldr	r3, [pc, #84]	@ (8005ca0 <HAL_UART_MspInit+0x170>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005c4e:	4b14      	ldr	r3, [pc, #80]	@ (8005ca0 <HAL_UART_MspInit+0x170>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005c54:	4b12      	ldr	r3, [pc, #72]	@ (8005ca0 <HAL_UART_MspInit+0x170>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005c5a:	4811      	ldr	r0, [pc, #68]	@ (8005ca0 <HAL_UART_MspInit+0x170>)
 8005c5c:	f002 f89c 	bl	8007d98 <HAL_DMA_Init>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8005c66:	f7ff f83d 	bl	8004ce4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a0c      	ldr	r2, [pc, #48]	@ (8005ca0 <HAL_UART_MspInit+0x170>)
 8005c6e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005c70:	4a0b      	ldr	r2, [pc, #44]	@ (8005ca0 <HAL_UART_MspInit+0x170>)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005c76:	2200      	movs	r2, #0
 8005c78:	2100      	movs	r1, #0
 8005c7a:	2026      	movs	r0, #38	@ 0x26
 8005c7c:	f002 f857 	bl	8007d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005c80:	2026      	movs	r0, #38	@ 0x26
 8005c82:	f002 f86e 	bl	8007d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005c86:	bf00      	nop
 8005c88:	3778      	adds	r7, #120	@ 0x78
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	40004400 	.word	0x40004400
 8005c94:	40021000 	.word	0x40021000
 8005c98:	20000dd0 	.word	0x20000dd0
 8005c9c:	4002001c 	.word	0x4002001c
 8005ca0:	20000e30 	.word	0x20000e30
 8005ca4:	40020030 	.word	0x40020030

08005ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005cac:	bf00      	nop
 8005cae:	e7fd      	b.n	8005cac <NMI_Handler+0x4>

08005cb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005cb4:	bf00      	nop
 8005cb6:	e7fd      	b.n	8005cb4 <HardFault_Handler+0x4>

08005cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005cbc:	bf00      	nop
 8005cbe:	e7fd      	b.n	8005cbc <MemManage_Handler+0x4>

08005cc0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005cc4:	bf00      	nop
 8005cc6:	e7fd      	b.n	8005cc4 <BusFault_Handler+0x4>

08005cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ccc:	bf00      	nop
 8005cce:	e7fd      	b.n	8005ccc <UsageFault_Handler+0x4>

08005cd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005cd4:	bf00      	nop
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005ce2:	bf00      	nop
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005cec:	b480      	push	{r7}
 8005cee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005cf0:	bf00      	nop
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005cfe:	f000 f8fb 	bl	8005ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005d02:	bf00      	nop
 8005d04:	bd80      	pop	{r7, pc}
	...

08005d08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005d0c:	4802      	ldr	r0, [pc, #8]	@ (8005d18 <DMA1_Channel1_IRQHandler+0x10>)
 8005d0e:	f002 fa26 	bl	800815e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005d12:	bf00      	nop
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	20000914 	.word	0x20000914

08005d1c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005d20:	4802      	ldr	r0, [pc, #8]	@ (8005d2c <DMA1_Channel2_IRQHandler+0x10>)
 8005d22:	f002 fa1c 	bl	800815e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005d26:	bf00      	nop
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	20000dd0 	.word	0x20000dd0

08005d30 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005d34:	4802      	ldr	r0, [pc, #8]	@ (8005d40 <DMA1_Channel3_IRQHandler+0x10>)
 8005d36:	f002 fa12 	bl	800815e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005d3a:	bf00      	nop
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20000e30 	.word	0x20000e30

08005d44 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8005d48:	4802      	ldr	r0, [pc, #8]	@ (8005d54 <DMA1_Channel4_IRQHandler+0x10>)
 8005d4a:	f002 fa08 	bl	800815e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005d4e:	bf00      	nop
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	20000ca4 	.word	0x20000ca4

08005d58 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005d5c:	4802      	ldr	r0, [pc, #8]	@ (8005d68 <ADC1_2_IRQHandler+0x10>)
 8005d5e:	f000 fdb9 	bl	80068d4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8005d62:	bf00      	nop
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	200008a8 	.word	0x200008a8

08005d6c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005d70:	4803      	ldr	r0, [pc, #12]	@ (8005d80 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8005d72:	f004 fa41 	bl	800a1f8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8005d76:	4803      	ldr	r0, [pc, #12]	@ (8005d84 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005d78:	f004 fa3e 	bl	800a1f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005d7c:	bf00      	nop
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	20000974 	.word	0x20000974
 8005d84:	20000bd8 	.word	0x20000bd8

08005d88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005d8c:	4802      	ldr	r0, [pc, #8]	@ (8005d98 <TIM3_IRQHandler+0x10>)
 8005d8e:	f004 fa33 	bl	800a1f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005d92:	bf00      	nop
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	20000a40 	.word	0x20000a40

08005d9c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005da0:	4802      	ldr	r0, [pc, #8]	@ (8005dac <TIM4_IRQHandler+0x10>)
 8005da2:	f004 fa29 	bl	800a1f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005da6:	bf00      	nop
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20000b0c 	.word	0x20000b0c

08005db0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005db4:	4802      	ldr	r0, [pc, #8]	@ (8005dc0 <USART2_IRQHandler+0x10>)
 8005db6:	f005 fff3 	bl	800bda0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005dba:	bf00      	nop
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	20000d04 	.word	0x20000d04

08005dc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8005dc8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8005dcc:	f002 fcc8 	bl	8008760 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_switch_Pin);
 8005dd0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005dd4:	f002 fcc4 	bl	8008760 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005dd8:	bf00      	nop
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005de0:	4b06      	ldr	r3, [pc, #24]	@ (8005dfc <SystemInit+0x20>)
 8005de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005de6:	4a05      	ldr	r2, [pc, #20]	@ (8005dfc <SystemInit+0x20>)
 8005de8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005dec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005df0:	bf00      	nop
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	e000ed00 	.word	0xe000ed00

08005e00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005e00:	480d      	ldr	r0, [pc, #52]	@ (8005e38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005e02:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005e04:	f7ff ffea 	bl	8005ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005e08:	480c      	ldr	r0, [pc, #48]	@ (8005e3c <LoopForever+0x6>)
  ldr r1, =_edata
 8005e0a:	490d      	ldr	r1, [pc, #52]	@ (8005e40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8005e44 <LoopForever+0xe>)
  movs r3, #0
 8005e0e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005e10:	e002      	b.n	8005e18 <LoopCopyDataInit>

08005e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e16:	3304      	adds	r3, #4

08005e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e1c:	d3f9      	bcc.n	8005e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8005e48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005e20:	4c0a      	ldr	r4, [pc, #40]	@ (8005e4c <LoopForever+0x16>)
  movs r3, #0
 8005e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e24:	e001      	b.n	8005e2a <LoopFillZerobss>

08005e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e28:	3204      	adds	r2, #4

08005e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e2c:	d3fb      	bcc.n	8005e26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005e2e:	f007 fceb 	bl	800d808 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005e32:	f7fd fb9f 	bl	8003574 <main>

08005e36 <LoopForever>:

LoopForever:
    b LoopForever
 8005e36:	e7fe      	b.n	8005e36 <LoopForever>
  ldr   r0, =_estack
 8005e38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e40:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 8005e44:	0800e900 	.word	0x0800e900
  ldr r2, =_sbss
 8005e48:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8005e4c:	2000190c 	.word	0x2000190c

08005e50 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005e50:	e7fe      	b.n	8005e50 <ADC3_IRQHandler>

08005e52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b082      	sub	sp, #8
 8005e56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e5c:	2003      	movs	r0, #3
 8005e5e:	f001 ff5b 	bl	8007d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005e62:	2000      	movs	r0, #0
 8005e64:	f000 f80e 	bl	8005e84 <HAL_InitTick>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d002      	beq.n	8005e74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	71fb      	strb	r3, [r7, #7]
 8005e72:	e001      	b.n	8005e78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005e74:	f7ff fc9e 	bl	80057b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005e78:	79fb      	ldrb	r3, [r7, #7]

}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
	...

08005e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005e90:	4b16      	ldr	r3, [pc, #88]	@ (8005eec <HAL_InitTick+0x68>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d022      	beq.n	8005ede <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005e98:	4b15      	ldr	r3, [pc, #84]	@ (8005ef0 <HAL_InitTick+0x6c>)
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	4b13      	ldr	r3, [pc, #76]	@ (8005eec <HAL_InitTick+0x68>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005ea4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eac:	4618      	mov	r0, r3
 8005eae:	f001 ff66 	bl	8007d7e <HAL_SYSTICK_Config>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10f      	bne.n	8005ed8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b0f      	cmp	r3, #15
 8005ebc:	d809      	bhi.n	8005ed2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	6879      	ldr	r1, [r7, #4]
 8005ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec6:	f001 ff32 	bl	8007d2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005eca:	4a0a      	ldr	r2, [pc, #40]	@ (8005ef4 <HAL_InitTick+0x70>)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6013      	str	r3, [r2, #0]
 8005ed0:	e007      	b.n	8005ee2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	73fb      	strb	r3, [r7, #15]
 8005ed6:	e004      	b.n	8005ee2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	73fb      	strb	r3, [r7, #15]
 8005edc:	e001      	b.n	8005ee2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	20000290 	.word	0x20000290
 8005ef0:	20000288 	.word	0x20000288
 8005ef4:	2000028c 	.word	0x2000028c

08005ef8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005efc:	4b05      	ldr	r3, [pc, #20]	@ (8005f14 <HAL_IncTick+0x1c>)
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	4b05      	ldr	r3, [pc, #20]	@ (8005f18 <HAL_IncTick+0x20>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4413      	add	r3, r2
 8005f06:	4a03      	ldr	r2, [pc, #12]	@ (8005f14 <HAL_IncTick+0x1c>)
 8005f08:	6013      	str	r3, [r2, #0]
}
 8005f0a:	bf00      	nop
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	200017d0 	.word	0x200017d0
 8005f18:	20000290 	.word	0x20000290

08005f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8005f20:	4b03      	ldr	r3, [pc, #12]	@ (8005f30 <HAL_GetTick+0x14>)
 8005f22:	681b      	ldr	r3, [r3, #0]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	200017d0 	.word	0x200017d0

08005f34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	609a      	str	r2, [r3, #8]
}
 8005f4e:	bf00      	nop
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b083      	sub	sp, #12
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
 8005f62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	431a      	orrs	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	609a      	str	r2, [r3, #8]
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b087      	sub	sp, #28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
 8005fa8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	3360      	adds	r3, #96	@ 0x60
 8005fae:	461a      	mov	r2, r3
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	4b08      	ldr	r3, [pc, #32]	@ (8005fe0 <LL_ADC_SetOffset+0x44>)
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005fd4:	bf00      	nop
 8005fd6:	371c      	adds	r7, #28
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	03fff000 	.word	0x03fff000

08005fe4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	3360      	adds	r3, #96	@ 0x60
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8006004:	4618      	mov	r0, r3
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006010:	b480      	push	{r7}
 8006012:	b087      	sub	sp, #28
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	3360      	adds	r3, #96	@ 0x60
 8006020:	461a      	mov	r2, r3
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	431a      	orrs	r2, r3
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800603a:	bf00      	nop
 800603c:	371c      	adds	r7, #28
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006046:	b480      	push	{r7}
 8006048:	b087      	sub	sp, #28
 800604a:	af00      	add	r7, sp, #0
 800604c:	60f8      	str	r0, [r7, #12]
 800604e:	60b9      	str	r1, [r7, #8]
 8006050:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	3360      	adds	r3, #96	@ 0x60
 8006056:	461a      	mov	r2, r3
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	431a      	orrs	r2, r3
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006070:	bf00      	nop
 8006072:	371c      	adds	r7, #28
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800607c:	b480      	push	{r7}
 800607e:	b087      	sub	sp, #28
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	3360      	adds	r3, #96	@ 0x60
 800608c:	461a      	mov	r2, r3
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4413      	add	r3, r2
 8006094:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	431a      	orrs	r2, r3
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80060a6:	bf00      	nop
 80060a8:	371c      	adds	r7, #28
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	431a      	orrs	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	615a      	str	r2, [r3, #20]
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80060ec:	2301      	movs	r3, #1
 80060ee:	e000      	b.n	80060f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80060fe:	b480      	push	{r7}
 8006100:	b087      	sub	sp, #28
 8006102:	af00      	add	r7, sp, #0
 8006104:	60f8      	str	r0, [r7, #12]
 8006106:	60b9      	str	r1, [r7, #8]
 8006108:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	3330      	adds	r3, #48	@ 0x30
 800610e:	461a      	mov	r2, r3
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	0a1b      	lsrs	r3, r3, #8
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	f003 030c 	and.w	r3, r3, #12
 800611a:	4413      	add	r3, r2
 800611c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f003 031f 	and.w	r3, r3, #31
 8006128:	211f      	movs	r1, #31
 800612a:	fa01 f303 	lsl.w	r3, r1, r3
 800612e:	43db      	mvns	r3, r3
 8006130:	401a      	ands	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	0e9b      	lsrs	r3, r3, #26
 8006136:	f003 011f 	and.w	r1, r3, #31
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	f003 031f 	and.w	r3, r3, #31
 8006140:	fa01 f303 	lsl.w	r3, r1, r3
 8006144:	431a      	orrs	r2, r3
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800614a:	bf00      	nop
 800614c:	371c      	adds	r7, #28
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006156:	b480      	push	{r7}
 8006158:	b083      	sub	sp, #12
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006162:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800616a:	2301      	movs	r3, #1
 800616c:	e000      	b.n	8006170 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800617c:	b480      	push	{r7}
 800617e:	b087      	sub	sp, #28
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	3314      	adds	r3, #20
 800618c:	461a      	mov	r2, r3
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	0e5b      	lsrs	r3, r3, #25
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	f003 0304 	and.w	r3, r3, #4
 8006198:	4413      	add	r3, r2
 800619a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	0d1b      	lsrs	r3, r3, #20
 80061a4:	f003 031f 	and.w	r3, r3, #31
 80061a8:	2107      	movs	r1, #7
 80061aa:	fa01 f303 	lsl.w	r3, r1, r3
 80061ae:	43db      	mvns	r3, r3
 80061b0:	401a      	ands	r2, r3
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	0d1b      	lsrs	r3, r3, #20
 80061b6:	f003 031f 	and.w	r3, r3, #31
 80061ba:	6879      	ldr	r1, [r7, #4]
 80061bc:	fa01 f303 	lsl.w	r3, r1, r3
 80061c0:	431a      	orrs	r2, r3
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80061c6:	bf00      	nop
 80061c8:	371c      	adds	r7, #28
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
	...

080061d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061ec:	43db      	mvns	r3, r3
 80061ee:	401a      	ands	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f003 0318 	and.w	r3, r3, #24
 80061f6:	4908      	ldr	r1, [pc, #32]	@ (8006218 <LL_ADC_SetChannelSingleDiff+0x44>)
 80061f8:	40d9      	lsrs	r1, r3
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	400b      	ands	r3, r1
 80061fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006202:	431a      	orrs	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800620a:	bf00      	nop
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	0007ffff 	.word	0x0007ffff

0800621c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f003 031f 	and.w	r3, r3, #31
}
 800622c:	4618      	mov	r0, r3
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8006248:	4618      	mov	r0, r3
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8006264:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	6093      	str	r3, [r2, #8]
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006288:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800628c:	d101      	bne.n	8006292 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800628e:	2301      	movs	r3, #1
 8006290:	e000      	b.n	8006294 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80062b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80062b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062dc:	d101      	bne.n	80062e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80062de:	2301      	movs	r3, #1
 80062e0:	e000      	b.n	80062e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006300:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006304:	f043 0201 	orr.w	r2, r3, #1
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	2b01      	cmp	r3, #1
 800632a:	d101      	bne.n	8006330 <LL_ADC_IsEnabled+0x18>
 800632c:	2301      	movs	r3, #1
 800632e:	e000      	b.n	8006332 <LL_ADC_IsEnabled+0x1a>
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800633e:	b480      	push	{r7}
 8006340:	b083      	sub	sp, #12
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800634e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006352:	f043 0204 	orr.w	r2, r3, #4
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800635a:	bf00      	nop
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006366:	b480      	push	{r7}
 8006368:	b083      	sub	sp, #12
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f003 0304 	and.w	r3, r3, #4
 8006376:	2b04      	cmp	r3, #4
 8006378:	d101      	bne.n	800637e <LL_ADC_REG_IsConversionOngoing+0x18>
 800637a:	2301      	movs	r3, #1
 800637c:	e000      	b.n	8006380 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	f003 0308 	and.w	r3, r3, #8
 800639c:	2b08      	cmp	r3, #8
 800639e:	d101      	bne.n	80063a4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80063a0:	2301      	movs	r3, #1
 80063a2:	e000      	b.n	80063a6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
	...

080063b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80063b4:	b590      	push	{r4, r7, lr}
 80063b6:	b089      	sub	sp, #36	@ 0x24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063bc:	2300      	movs	r3, #0
 80063be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80063c0:	2300      	movs	r3, #0
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e1a9      	b.n	8006722 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d109      	bne.n	80063f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f7ff fa0d 	bl	80057fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7ff ff3f 	bl	8006278 <LL_ADC_IsDeepPowerDownEnabled>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d004      	beq.n	800640a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4618      	mov	r0, r3
 8006406:	f7ff ff25 	bl	8006254 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4618      	mov	r0, r3
 8006410:	f7ff ff5a 	bl	80062c8 <LL_ADC_IsInternalRegulatorEnabled>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d115      	bne.n	8006446 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4618      	mov	r0, r3
 8006420:	f7ff ff3e 	bl	80062a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006424:	4b9c      	ldr	r3, [pc, #624]	@ (8006698 <HAL_ADC_Init+0x2e4>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	099b      	lsrs	r3, r3, #6
 800642a:	4a9c      	ldr	r2, [pc, #624]	@ (800669c <HAL_ADC_Init+0x2e8>)
 800642c:	fba2 2303 	umull	r2, r3, r2, r3
 8006430:	099b      	lsrs	r3, r3, #6
 8006432:	3301      	adds	r3, #1
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006438:	e002      	b.n	8006440 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	3b01      	subs	r3, #1
 800643e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1f9      	bne.n	800643a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4618      	mov	r0, r3
 800644c:	f7ff ff3c 	bl	80062c8 <LL_ADC_IsInternalRegulatorEnabled>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10d      	bne.n	8006472 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800645a:	f043 0210 	orr.w	r2, r3, #16
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006466:	f043 0201 	orr.w	r2, r3, #1
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4618      	mov	r0, r3
 8006478:	f7ff ff75 	bl	8006366 <LL_ADC_REG_IsConversionOngoing>
 800647c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006482:	f003 0310 	and.w	r3, r3, #16
 8006486:	2b00      	cmp	r3, #0
 8006488:	f040 8142 	bne.w	8006710 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	2b00      	cmp	r3, #0
 8006490:	f040 813e 	bne.w	8006710 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006498:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800649c:	f043 0202 	orr.w	r2, r3, #2
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7ff ff35 	bl	8006318 <LL_ADC_IsEnabled>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d141      	bne.n	8006538 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80064bc:	d004      	beq.n	80064c8 <HAL_ADC_Init+0x114>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a77      	ldr	r2, [pc, #476]	@ (80066a0 <HAL_ADC_Init+0x2ec>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d10f      	bne.n	80064e8 <HAL_ADC_Init+0x134>
 80064c8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80064cc:	f7ff ff24 	bl	8006318 <LL_ADC_IsEnabled>
 80064d0:	4604      	mov	r4, r0
 80064d2:	4873      	ldr	r0, [pc, #460]	@ (80066a0 <HAL_ADC_Init+0x2ec>)
 80064d4:	f7ff ff20 	bl	8006318 <LL_ADC_IsEnabled>
 80064d8:	4603      	mov	r3, r0
 80064da:	4323      	orrs	r3, r4
 80064dc:	2b00      	cmp	r3, #0
 80064de:	bf0c      	ite	eq
 80064e0:	2301      	moveq	r3, #1
 80064e2:	2300      	movne	r3, #0
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	e012      	b.n	800650e <HAL_ADC_Init+0x15a>
 80064e8:	486e      	ldr	r0, [pc, #440]	@ (80066a4 <HAL_ADC_Init+0x2f0>)
 80064ea:	f7ff ff15 	bl	8006318 <LL_ADC_IsEnabled>
 80064ee:	4604      	mov	r4, r0
 80064f0:	486d      	ldr	r0, [pc, #436]	@ (80066a8 <HAL_ADC_Init+0x2f4>)
 80064f2:	f7ff ff11 	bl	8006318 <LL_ADC_IsEnabled>
 80064f6:	4603      	mov	r3, r0
 80064f8:	431c      	orrs	r4, r3
 80064fa:	486c      	ldr	r0, [pc, #432]	@ (80066ac <HAL_ADC_Init+0x2f8>)
 80064fc:	f7ff ff0c 	bl	8006318 <LL_ADC_IsEnabled>
 8006500:	4603      	mov	r3, r0
 8006502:	4323      	orrs	r3, r4
 8006504:	2b00      	cmp	r3, #0
 8006506:	bf0c      	ite	eq
 8006508:	2301      	moveq	r3, #1
 800650a:	2300      	movne	r3, #0
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d012      	beq.n	8006538 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800651a:	d004      	beq.n	8006526 <HAL_ADC_Init+0x172>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a5f      	ldr	r2, [pc, #380]	@ (80066a0 <HAL_ADC_Init+0x2ec>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d101      	bne.n	800652a <HAL_ADC_Init+0x176>
 8006526:	4a62      	ldr	r2, [pc, #392]	@ (80066b0 <HAL_ADC_Init+0x2fc>)
 8006528:	e000      	b.n	800652c <HAL_ADC_Init+0x178>
 800652a:	4a62      	ldr	r2, [pc, #392]	@ (80066b4 <HAL_ADC_Init+0x300>)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	4619      	mov	r1, r3
 8006532:	4610      	mov	r0, r2
 8006534:	f7ff fcfe 	bl	8005f34 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	7f5b      	ldrb	r3, [r3, #29]
 800653c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006542:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8006548:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800654e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006556:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006558:	4313      	orrs	r3, r2
 800655a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006562:	2b01      	cmp	r3, #1
 8006564:	d106      	bne.n	8006574 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800656a:	3b01      	subs	r3, #1
 800656c:	045b      	lsls	r3, r3, #17
 800656e:	69ba      	ldr	r2, [r7, #24]
 8006570:	4313      	orrs	r3, r2
 8006572:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006578:	2b00      	cmp	r3, #0
 800657a:	d009      	beq.n	8006590 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006580:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006588:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800658a:	69ba      	ldr	r2, [r7, #24]
 800658c:	4313      	orrs	r3, r2
 800658e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68da      	ldr	r2, [r3, #12]
 8006596:	4b48      	ldr	r3, [pc, #288]	@ (80066b8 <HAL_ADC_Init+0x304>)
 8006598:	4013      	ands	r3, r2
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	6812      	ldr	r2, [r2, #0]
 800659e:	69b9      	ldr	r1, [r7, #24]
 80065a0:	430b      	orrs	r3, r1
 80065a2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4618      	mov	r0, r3
 80065c0:	f7ff fee4 	bl	800638c <LL_ADC_INJ_IsConversionOngoing>
 80065c4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d17f      	bne.n	80066cc <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d17c      	bne.n	80066cc <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80065d6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80065de:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80065e0:	4313      	orrs	r3, r2
 80065e2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065ee:	f023 0302 	bic.w	r3, r3, #2
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	6812      	ldr	r2, [r2, #0]
 80065f6:	69b9      	ldr	r1, [r7, #24]
 80065f8:	430b      	orrs	r3, r1
 80065fa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d017      	beq.n	8006634 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	691a      	ldr	r2, [r3, #16]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006612:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800661c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006620:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6911      	ldr	r1, [r2, #16]
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	6812      	ldr	r2, [r2, #0]
 800662c:	430b      	orrs	r3, r1
 800662e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8006632:	e013      	b.n	800665c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	691a      	ldr	r2, [r3, #16]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006642:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6812      	ldr	r2, [r2, #0]
 8006650:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006654:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006658:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006662:	2b01      	cmp	r3, #1
 8006664:	d12a      	bne.n	80066bc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006670:	f023 0304 	bic.w	r3, r3, #4
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800667c:	4311      	orrs	r1, r2
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006682:	4311      	orrs	r1, r2
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006688:	430a      	orrs	r2, r1
 800668a:	431a      	orrs	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f042 0201 	orr.w	r2, r2, #1
 8006694:	611a      	str	r2, [r3, #16]
 8006696:	e019      	b.n	80066cc <HAL_ADC_Init+0x318>
 8006698:	20000288 	.word	0x20000288
 800669c:	053e2d63 	.word	0x053e2d63
 80066a0:	50000100 	.word	0x50000100
 80066a4:	50000400 	.word	0x50000400
 80066a8:	50000500 	.word	0x50000500
 80066ac:	50000600 	.word	0x50000600
 80066b0:	50000300 	.word	0x50000300
 80066b4:	50000700 	.word	0x50000700
 80066b8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	691a      	ldr	r2, [r3, #16]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f022 0201 	bic.w	r2, r2, #1
 80066ca:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d10c      	bne.n	80066ee <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066da:	f023 010f 	bic.w	r1, r3, #15
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	1e5a      	subs	r2, r3, #1
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	430a      	orrs	r2, r1
 80066ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80066ec:	e007      	b.n	80066fe <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 020f 	bic.w	r2, r2, #15
 80066fc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006702:	f023 0303 	bic.w	r3, r3, #3
 8006706:	f043 0201 	orr.w	r2, r3, #1
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800670e:	e007      	b.n	8006720 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006714:	f043 0210 	orr.w	r2, r3, #16
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006720:	7ffb      	ldrb	r3, [r7, #31]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3724      	adds	r7, #36	@ 0x24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd90      	pop	{r4, r7, pc}
 800672a:	bf00      	nop

0800672c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006740:	d004      	beq.n	800674c <HAL_ADC_Start_DMA+0x20>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a5a      	ldr	r2, [pc, #360]	@ (80068b0 <HAL_ADC_Start_DMA+0x184>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d101      	bne.n	8006750 <HAL_ADC_Start_DMA+0x24>
 800674c:	4b59      	ldr	r3, [pc, #356]	@ (80068b4 <HAL_ADC_Start_DMA+0x188>)
 800674e:	e000      	b.n	8006752 <HAL_ADC_Start_DMA+0x26>
 8006750:	4b59      	ldr	r3, [pc, #356]	@ (80068b8 <HAL_ADC_Start_DMA+0x18c>)
 8006752:	4618      	mov	r0, r3
 8006754:	f7ff fd62 	bl	800621c <LL_ADC_GetMultimode>
 8006758:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4618      	mov	r0, r3
 8006760:	f7ff fe01 	bl	8006366 <LL_ADC_REG_IsConversionOngoing>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	f040 809b 	bne.w	80068a2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006772:	2b01      	cmp	r3, #1
 8006774:	d101      	bne.n	800677a <HAL_ADC_Start_DMA+0x4e>
 8006776:	2302      	movs	r3, #2
 8006778:	e096      	b.n	80068a8 <HAL_ADC_Start_DMA+0x17c>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a4d      	ldr	r2, [pc, #308]	@ (80068bc <HAL_ADC_Start_DMA+0x190>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d008      	beq.n	800679e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d005      	beq.n	800679e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	2b05      	cmp	r3, #5
 8006796:	d002      	beq.n	800679e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	2b09      	cmp	r3, #9
 800679c:	d17a      	bne.n	8006894 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 ff60 	bl	8007664 <ADC_Enable>
 80067a4:	4603      	mov	r3, r0
 80067a6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80067a8:	7dfb      	ldrb	r3, [r7, #23]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d16d      	bne.n	800688a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067b2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80067b6:	f023 0301 	bic.w	r3, r3, #1
 80067ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a3a      	ldr	r2, [pc, #232]	@ (80068b0 <HAL_ADC_Start_DMA+0x184>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d009      	beq.n	80067e0 <HAL_ADC_Start_DMA+0xb4>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a3b      	ldr	r2, [pc, #236]	@ (80068c0 <HAL_ADC_Start_DMA+0x194>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d002      	beq.n	80067dc <HAL_ADC_Start_DMA+0xb0>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	e003      	b.n	80067e4 <HAL_ADC_Start_DMA+0xb8>
 80067dc:	4b39      	ldr	r3, [pc, #228]	@ (80068c4 <HAL_ADC_Start_DMA+0x198>)
 80067de:	e001      	b.n	80067e4 <HAL_ADC_Start_DMA+0xb8>
 80067e0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	6812      	ldr	r2, [r2, #0]
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d002      	beq.n	80067f2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d105      	bne.n	80067fe <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067f6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006802:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d006      	beq.n	8006818 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800680e:	f023 0206 	bic.w	r2, r3, #6
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	661a      	str	r2, [r3, #96]	@ 0x60
 8006816:	e002      	b.n	800681e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006822:	4a29      	ldr	r2, [pc, #164]	@ (80068c8 <HAL_ADC_Start_DMA+0x19c>)
 8006824:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800682a:	4a28      	ldr	r2, [pc, #160]	@ (80068cc <HAL_ADC_Start_DMA+0x1a0>)
 800682c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006832:	4a27      	ldr	r2, [pc, #156]	@ (80068d0 <HAL_ADC_Start_DMA+0x1a4>)
 8006834:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	221c      	movs	r2, #28
 800683c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f042 0210 	orr.w	r2, r2, #16
 8006854:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68da      	ldr	r2, [r3, #12]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f042 0201 	orr.w	r2, r2, #1
 8006864:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	3340      	adds	r3, #64	@ 0x40
 8006870:	4619      	mov	r1, r3
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f001 fb37 	bl	8007ee8 <HAL_DMA_Start_IT>
 800687a:	4603      	mov	r3, r0
 800687c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4618      	mov	r0, r3
 8006884:	f7ff fd5b 	bl	800633e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006888:	e00d      	b.n	80068a6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8006892:	e008      	b.n	80068a6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80068a0:	e001      	b.n	80068a6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80068a2:	2302      	movs	r3, #2
 80068a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80068a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3718      	adds	r7, #24
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	50000100 	.word	0x50000100
 80068b4:	50000300 	.word	0x50000300
 80068b8:	50000700 	.word	0x50000700
 80068bc:	50000600 	.word	0x50000600
 80068c0:	50000500 	.word	0x50000500
 80068c4:	50000400 	.word	0x50000400
 80068c8:	08007791 	.word	0x08007791
 80068cc:	08007869 	.word	0x08007869
 80068d0:	08007885 	.word	0x08007885

080068d4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08a      	sub	sp, #40	@ 0x28
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80068dc:	2300      	movs	r3, #0
 80068de:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80068f8:	d004      	beq.n	8006904 <HAL_ADC_IRQHandler+0x30>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a8e      	ldr	r2, [pc, #568]	@ (8006b38 <HAL_ADC_IRQHandler+0x264>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d101      	bne.n	8006908 <HAL_ADC_IRQHandler+0x34>
 8006904:	4b8d      	ldr	r3, [pc, #564]	@ (8006b3c <HAL_ADC_IRQHandler+0x268>)
 8006906:	e000      	b.n	800690a <HAL_ADC_IRQHandler+0x36>
 8006908:	4b8d      	ldr	r3, [pc, #564]	@ (8006b40 <HAL_ADC_IRQHandler+0x26c>)
 800690a:	4618      	mov	r0, r3
 800690c:	f7ff fc86 	bl	800621c <LL_ADC_GetMultimode>
 8006910:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	f003 0302 	and.w	r3, r3, #2
 8006918:	2b00      	cmp	r3, #0
 800691a:	d017      	beq.n	800694c <HAL_ADC_IRQHandler+0x78>
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d012      	beq.n	800694c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800692a:	f003 0310 	and.w	r3, r3, #16
 800692e:	2b00      	cmp	r3, #0
 8006930:	d105      	bne.n	800693e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006936:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f001 f808 	bl	8007954 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2202      	movs	r2, #2
 800694a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	f003 0304 	and.w	r3, r3, #4
 8006952:	2b00      	cmp	r3, #0
 8006954:	d004      	beq.n	8006960 <HAL_ADC_IRQHandler+0x8c>
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	f003 0304 	and.w	r3, r3, #4
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10b      	bne.n	8006978 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006966:	2b00      	cmp	r3, #0
 8006968:	f000 8094 	beq.w	8006a94 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	f003 0308 	and.w	r3, r3, #8
 8006972:	2b00      	cmp	r3, #0
 8006974:	f000 808e 	beq.w	8006a94 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800697c:	f003 0310 	and.w	r3, r3, #16
 8006980:	2b00      	cmp	r3, #0
 8006982:	d105      	bne.n	8006990 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006988:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4618      	mov	r0, r3
 8006996:	f7ff fb9f 	bl	80060d8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d072      	beq.n	8006a86 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a64      	ldr	r2, [pc, #400]	@ (8006b38 <HAL_ADC_IRQHandler+0x264>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d009      	beq.n	80069be <HAL_ADC_IRQHandler+0xea>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a65      	ldr	r2, [pc, #404]	@ (8006b44 <HAL_ADC_IRQHandler+0x270>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d002      	beq.n	80069ba <HAL_ADC_IRQHandler+0xe6>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	e003      	b.n	80069c2 <HAL_ADC_IRQHandler+0xee>
 80069ba:	4b63      	ldr	r3, [pc, #396]	@ (8006b48 <HAL_ADC_IRQHandler+0x274>)
 80069bc:	e001      	b.n	80069c2 <HAL_ADC_IRQHandler+0xee>
 80069be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	6812      	ldr	r2, [r2, #0]
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d008      	beq.n	80069dc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d005      	beq.n	80069dc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	2b05      	cmp	r3, #5
 80069d4:	d002      	beq.n	80069dc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2b09      	cmp	r3, #9
 80069da:	d104      	bne.n	80069e6 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	623b      	str	r3, [r7, #32]
 80069e4:	e014      	b.n	8006a10 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a53      	ldr	r2, [pc, #332]	@ (8006b38 <HAL_ADC_IRQHandler+0x264>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d009      	beq.n	8006a04 <HAL_ADC_IRQHandler+0x130>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a53      	ldr	r2, [pc, #332]	@ (8006b44 <HAL_ADC_IRQHandler+0x270>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d002      	beq.n	8006a00 <HAL_ADC_IRQHandler+0x12c>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	e003      	b.n	8006a08 <HAL_ADC_IRQHandler+0x134>
 8006a00:	4b51      	ldr	r3, [pc, #324]	@ (8006b48 <HAL_ADC_IRQHandler+0x274>)
 8006a02:	e001      	b.n	8006a08 <HAL_ADC_IRQHandler+0x134>
 8006a04:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006a08:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006a10:	6a3b      	ldr	r3, [r7, #32]
 8006a12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d135      	bne.n	8006a86 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0308 	and.w	r3, r3, #8
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	d12e      	bne.n	8006a86 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7ff fc9a 	bl	8006366 <LL_ADC_REG_IsConversionOngoing>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d11a      	bne.n	8006a6e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f022 020c 	bic.w	r2, r2, #12
 8006a46:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d112      	bne.n	8006a86 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a64:	f043 0201 	orr.w	r2, r3, #1
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006a6c:	e00b      	b.n	8006a86 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a72:	f043 0210 	orr.w	r2, r3, #16
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a7e:	f043 0201 	orr.w	r2, r3, #1
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f984 	bl	8006d94 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	220c      	movs	r2, #12
 8006a92:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	f003 0320 	and.w	r3, r3, #32
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d004      	beq.n	8006aa8 <HAL_ADC_IRQHandler+0x1d4>
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	f003 0320 	and.w	r3, r3, #32
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10b      	bne.n	8006ac0 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 80b3 	beq.w	8006c1a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 80ad 	beq.w	8006c1a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ac4:	f003 0310 	and.w	r3, r3, #16
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d105      	bne.n	8006ad8 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ad0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7ff fb3a 	bl	8006156 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8006ae2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7ff faf5 	bl	80060d8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006aee:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a10      	ldr	r2, [pc, #64]	@ (8006b38 <HAL_ADC_IRQHandler+0x264>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d009      	beq.n	8006b0e <HAL_ADC_IRQHandler+0x23a>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a11      	ldr	r2, [pc, #68]	@ (8006b44 <HAL_ADC_IRQHandler+0x270>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d002      	beq.n	8006b0a <HAL_ADC_IRQHandler+0x236>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	e003      	b.n	8006b12 <HAL_ADC_IRQHandler+0x23e>
 8006b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8006b48 <HAL_ADC_IRQHandler+0x274>)
 8006b0c:	e001      	b.n	8006b12 <HAL_ADC_IRQHandler+0x23e>
 8006b0e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	6812      	ldr	r2, [r2, #0]
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d008      	beq.n	8006b2c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d005      	beq.n	8006b2c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	2b06      	cmp	r3, #6
 8006b24:	d002      	beq.n	8006b2c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	2b07      	cmp	r3, #7
 8006b2a:	d10f      	bne.n	8006b4c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	623b      	str	r3, [r7, #32]
 8006b34:	e01f      	b.n	8006b76 <HAL_ADC_IRQHandler+0x2a2>
 8006b36:	bf00      	nop
 8006b38:	50000100 	.word	0x50000100
 8006b3c:	50000300 	.word	0x50000300
 8006b40:	50000700 	.word	0x50000700
 8006b44:	50000500 	.word	0x50000500
 8006b48:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a8b      	ldr	r2, [pc, #556]	@ (8006d80 <HAL_ADC_IRQHandler+0x4ac>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d009      	beq.n	8006b6a <HAL_ADC_IRQHandler+0x296>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a8a      	ldr	r2, [pc, #552]	@ (8006d84 <HAL_ADC_IRQHandler+0x4b0>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d002      	beq.n	8006b66 <HAL_ADC_IRQHandler+0x292>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	e003      	b.n	8006b6e <HAL_ADC_IRQHandler+0x29a>
 8006b66:	4b88      	ldr	r3, [pc, #544]	@ (8006d88 <HAL_ADC_IRQHandler+0x4b4>)
 8006b68:	e001      	b.n	8006b6e <HAL_ADC_IRQHandler+0x29a>
 8006b6a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006b6e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d047      	beq.n	8006c0c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d007      	beq.n	8006b96 <HAL_ADC_IRQHandler+0x2c2>
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d03f      	beq.n	8006c0c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006b8c:	6a3b      	ldr	r3, [r7, #32]
 8006b8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d13a      	bne.n	8006c0c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ba0:	2b40      	cmp	r3, #64	@ 0x40
 8006ba2:	d133      	bne.n	8006c0c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
 8006ba6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d12e      	bne.n	8006c0c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7ff fbea 	bl	800638c <LL_ADC_INJ_IsConversionOngoing>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d11a      	bne.n	8006bf4 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006bcc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bd2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d112      	bne.n	8006c0c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bea:	f043 0201 	orr.w	r2, r3, #1
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006bf2:	e00b      	b.n	8006c0c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bf8:	f043 0210 	orr.w	r2, r3, #16
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c04:	f043 0201 	orr.w	r2, r3, #1
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 fe79 	bl	8007904 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2260      	movs	r2, #96	@ 0x60
 8006c18:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d011      	beq.n	8006c48 <HAL_ADC_IRQHandler+0x374>
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00c      	beq.n	8006c48 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c32:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f8be 	bl	8006dbc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2280      	movs	r2, #128	@ 0x80
 8006c46:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d012      	beq.n	8006c78 <HAL_ADC_IRQHandler+0x3a4>
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00d      	beq.n	8006c78 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c60:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fe5f 	bl	800792c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006c76:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d012      	beq.n	8006ca8 <HAL_ADC_IRQHandler+0x3d4>
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00d      	beq.n	8006ca8 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c90:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 fe51 	bl	8007940 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ca6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	f003 0310 	and.w	r3, r3, #16
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d043      	beq.n	8006d3a <HAL_ADC_IRQHandler+0x466>
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	f003 0310 	and.w	r3, r3, #16
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d03e      	beq.n	8006d3a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d102      	bne.n	8006cca <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cc8:	e021      	b.n	8006d0e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d015      	beq.n	8006cfc <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006cd8:	d004      	beq.n	8006ce4 <HAL_ADC_IRQHandler+0x410>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a28      	ldr	r2, [pc, #160]	@ (8006d80 <HAL_ADC_IRQHandler+0x4ac>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d101      	bne.n	8006ce8 <HAL_ADC_IRQHandler+0x414>
 8006ce4:	4b29      	ldr	r3, [pc, #164]	@ (8006d8c <HAL_ADC_IRQHandler+0x4b8>)
 8006ce6:	e000      	b.n	8006cea <HAL_ADC_IRQHandler+0x416>
 8006ce8:	4b29      	ldr	r3, [pc, #164]	@ (8006d90 <HAL_ADC_IRQHandler+0x4bc>)
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7ff faa4 	bl	8006238 <LL_ADC_GetMultiDMATransfer>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00b      	beq.n	8006d0e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cfa:	e008      	b.n	8006d0e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d001      	beq.n	8006d0e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d10e      	bne.n	8006d32 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d18:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d24:	f043 0202 	orr.w	r2, r3, #2
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f84f 	bl	8006dd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2210      	movs	r2, #16
 8006d38:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d018      	beq.n	8006d76 <HAL_ADC_IRQHandler+0x4a2>
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d013      	beq.n	8006d76 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d52:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d5e:	f043 0208 	orr.w	r2, r3, #8
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006d6e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fdd1 	bl	8007918 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8006d76:	bf00      	nop
 8006d78:	3728      	adds	r7, #40	@ 0x28
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	50000100 	.word	0x50000100
 8006d84:	50000500 	.word	0x50000500
 8006d88:	50000400 	.word	0x50000400
 8006d8c:	50000300 	.word	0x50000300
 8006d90:	50000700 	.word	0x50000700

08006d94 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b0b6      	sub	sp, #216	@ 0xd8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006df4:	2300      	movs	r3, #0
 8006df6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d102      	bne.n	8006e08 <HAL_ADC_ConfigChannel+0x24>
 8006e02:	2302      	movs	r3, #2
 8006e04:	f000 bc13 	b.w	800762e <HAL_ADC_ConfigChannel+0x84a>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7ff faa6 	bl	8006366 <LL_ADC_REG_IsConversionOngoing>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f040 83f3 	bne.w	8007608 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6818      	ldr	r0, [r3, #0]
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	6859      	ldr	r1, [r3, #4]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f7ff f965 	bl	80060fe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7ff fa94 	bl	8006366 <LL_ADC_REG_IsConversionOngoing>
 8006e3e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7ff faa0 	bl	800638c <LL_ADC_INJ_IsConversionOngoing>
 8006e4c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006e50:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f040 81d9 	bne.w	800720c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006e5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f040 81d4 	bne.w	800720c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e6c:	d10f      	bne.n	8006e8e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6818      	ldr	r0, [r3, #0]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2200      	movs	r2, #0
 8006e78:	4619      	mov	r1, r3
 8006e7a:	f7ff f97f 	bl	800617c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7ff f913 	bl	80060b2 <LL_ADC_SetSamplingTimeCommonConfig>
 8006e8c:	e00e      	b.n	8006eac <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6818      	ldr	r0, [r3, #0]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	6819      	ldr	r1, [r3, #0]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	f7ff f96e 	bl	800617c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7ff f903 	bl	80060b2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	695a      	ldr	r2, [r3, #20]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	08db      	lsrs	r3, r3, #3
 8006eb8:	f003 0303 	and.w	r3, r3, #3
 8006ebc:	005b      	lsls	r3, r3, #1
 8006ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	d022      	beq.n	8006f14 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6818      	ldr	r0, [r3, #0]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	6919      	ldr	r1, [r3, #16]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ede:	f7ff f85d 	bl	8005f9c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6818      	ldr	r0, [r3, #0]
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	6919      	ldr	r1, [r3, #16]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	f7ff f8a9 	bl	8006046 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6818      	ldr	r0, [r3, #0]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d102      	bne.n	8006f0a <HAL_ADC_ConfigChannel+0x126>
 8006f04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006f08:	e000      	b.n	8006f0c <HAL_ADC_ConfigChannel+0x128>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	f7ff f8b5 	bl	800607c <LL_ADC_SetOffsetSaturation>
 8006f12:	e17b      	b.n	800720c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2100      	movs	r1, #0
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7ff f862 	bl	8005fe4 <LL_ADC_GetOffsetChannel>
 8006f20:	4603      	mov	r3, r0
 8006f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10a      	bne.n	8006f40 <HAL_ADC_ConfigChannel+0x15c>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2100      	movs	r1, #0
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7ff f857 	bl	8005fe4 <LL_ADC_GetOffsetChannel>
 8006f36:	4603      	mov	r3, r0
 8006f38:	0e9b      	lsrs	r3, r3, #26
 8006f3a:	f003 021f 	and.w	r2, r3, #31
 8006f3e:	e01e      	b.n	8006f7e <HAL_ADC_ConfigChannel+0x19a>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2100      	movs	r1, #0
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7ff f84c 	bl	8005fe4 <LL_ADC_GetOffsetChannel>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006f56:	fa93 f3a3 	rbit	r3, r3
 8006f5a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006f5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006f66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d101      	bne.n	8006f72 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8006f6e:	2320      	movs	r3, #32
 8006f70:	e004      	b.n	8006f7c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8006f72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006f76:	fab3 f383 	clz	r3, r3
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d105      	bne.n	8006f96 <HAL_ADC_ConfigChannel+0x1b2>
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	0e9b      	lsrs	r3, r3, #26
 8006f90:	f003 031f 	and.w	r3, r3, #31
 8006f94:	e018      	b.n	8006fc8 <HAL_ADC_ConfigChannel+0x1e4>
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006fa2:	fa93 f3a3 	rbit	r3, r3
 8006fa6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8006faa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8006fb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d101      	bne.n	8006fbe <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8006fba:	2320      	movs	r3, #32
 8006fbc:	e004      	b.n	8006fc8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006fbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006fc2:	fab3 f383 	clz	r3, r3
 8006fc6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d106      	bne.n	8006fda <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7ff f81b 	bl	8006010 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2101      	movs	r1, #1
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7fe ffff 	bl	8005fe4 <LL_ADC_GetOffsetChannel>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d10a      	bne.n	8007006 <HAL_ADC_ConfigChannel+0x222>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fe fff4 	bl	8005fe4 <LL_ADC_GetOffsetChannel>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	0e9b      	lsrs	r3, r3, #26
 8007000:	f003 021f 	and.w	r2, r3, #31
 8007004:	e01e      	b.n	8007044 <HAL_ADC_ConfigChannel+0x260>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2101      	movs	r1, #1
 800700c:	4618      	mov	r0, r3
 800700e:	f7fe ffe9 	bl	8005fe4 <LL_ADC_GetOffsetChannel>
 8007012:	4603      	mov	r3, r0
 8007014:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007018:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800701c:	fa93 f3a3 	rbit	r3, r3
 8007020:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8007024:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007028:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800702c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007030:	2b00      	cmp	r3, #0
 8007032:	d101      	bne.n	8007038 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8007034:	2320      	movs	r3, #32
 8007036:	e004      	b.n	8007042 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8007038:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800703c:	fab3 f383 	clz	r3, r3
 8007040:	b2db      	uxtb	r3, r3
 8007042:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800704c:	2b00      	cmp	r3, #0
 800704e:	d105      	bne.n	800705c <HAL_ADC_ConfigChannel+0x278>
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	0e9b      	lsrs	r3, r3, #26
 8007056:	f003 031f 	and.w	r3, r3, #31
 800705a:	e018      	b.n	800708e <HAL_ADC_ConfigChannel+0x2aa>
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007064:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007068:	fa93 f3a3 	rbit	r3, r3
 800706c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8007070:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007074:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8007078:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800707c:	2b00      	cmp	r3, #0
 800707e:	d101      	bne.n	8007084 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8007080:	2320      	movs	r3, #32
 8007082:	e004      	b.n	800708e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8007084:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007088:	fab3 f383 	clz	r3, r3
 800708c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800708e:	429a      	cmp	r2, r3
 8007090:	d106      	bne.n	80070a0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2200      	movs	r2, #0
 8007098:	2101      	movs	r1, #1
 800709a:	4618      	mov	r0, r3
 800709c:	f7fe ffb8 	bl	8006010 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2102      	movs	r1, #2
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fe ff9c 	bl	8005fe4 <LL_ADC_GetOffsetChannel>
 80070ac:	4603      	mov	r3, r0
 80070ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10a      	bne.n	80070cc <HAL_ADC_ConfigChannel+0x2e8>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2102      	movs	r1, #2
 80070bc:	4618      	mov	r0, r3
 80070be:	f7fe ff91 	bl	8005fe4 <LL_ADC_GetOffsetChannel>
 80070c2:	4603      	mov	r3, r0
 80070c4:	0e9b      	lsrs	r3, r3, #26
 80070c6:	f003 021f 	and.w	r2, r3, #31
 80070ca:	e01e      	b.n	800710a <HAL_ADC_ConfigChannel+0x326>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2102      	movs	r1, #2
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fe ff86 	bl	8005fe4 <LL_ADC_GetOffsetChannel>
 80070d8:	4603      	mov	r3, r0
 80070da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070e2:	fa93 f3a3 	rbit	r3, r3
 80070e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80070ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80070ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80070f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d101      	bne.n	80070fe <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80070fa:	2320      	movs	r3, #32
 80070fc:	e004      	b.n	8007108 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80070fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007102:	fab3 f383 	clz	r3, r3
 8007106:	b2db      	uxtb	r3, r3
 8007108:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007112:	2b00      	cmp	r3, #0
 8007114:	d105      	bne.n	8007122 <HAL_ADC_ConfigChannel+0x33e>
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	0e9b      	lsrs	r3, r3, #26
 800711c:	f003 031f 	and.w	r3, r3, #31
 8007120:	e016      	b.n	8007150 <HAL_ADC_ConfigChannel+0x36c>
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800712a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800712e:	fa93 f3a3 	rbit	r3, r3
 8007132:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8007134:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007136:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800713a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8007142:	2320      	movs	r3, #32
 8007144:	e004      	b.n	8007150 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8007146:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800714a:	fab3 f383 	clz	r3, r3
 800714e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007150:	429a      	cmp	r2, r3
 8007152:	d106      	bne.n	8007162 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2200      	movs	r2, #0
 800715a:	2102      	movs	r1, #2
 800715c:	4618      	mov	r0, r3
 800715e:	f7fe ff57 	bl	8006010 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2103      	movs	r1, #3
 8007168:	4618      	mov	r0, r3
 800716a:	f7fe ff3b 	bl	8005fe4 <LL_ADC_GetOffsetChannel>
 800716e:	4603      	mov	r3, r0
 8007170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007174:	2b00      	cmp	r3, #0
 8007176:	d10a      	bne.n	800718e <HAL_ADC_ConfigChannel+0x3aa>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2103      	movs	r1, #3
 800717e:	4618      	mov	r0, r3
 8007180:	f7fe ff30 	bl	8005fe4 <LL_ADC_GetOffsetChannel>
 8007184:	4603      	mov	r3, r0
 8007186:	0e9b      	lsrs	r3, r3, #26
 8007188:	f003 021f 	and.w	r2, r3, #31
 800718c:	e017      	b.n	80071be <HAL_ADC_ConfigChannel+0x3da>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2103      	movs	r1, #3
 8007194:	4618      	mov	r0, r3
 8007196:	f7fe ff25 	bl	8005fe4 <LL_ADC_GetOffsetChannel>
 800719a:	4603      	mov	r3, r0
 800719c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800719e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80071a0:	fa93 f3a3 	rbit	r3, r3
 80071a4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80071a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071a8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80071aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80071b0:	2320      	movs	r3, #32
 80071b2:	e003      	b.n	80071bc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80071b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071b6:	fab3 f383 	clz	r3, r3
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d105      	bne.n	80071d6 <HAL_ADC_ConfigChannel+0x3f2>
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	0e9b      	lsrs	r3, r3, #26
 80071d0:	f003 031f 	and.w	r3, r3, #31
 80071d4:	e011      	b.n	80071fa <HAL_ADC_ConfigChannel+0x416>
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071de:	fa93 f3a3 	rbit	r3, r3
 80071e2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80071e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80071e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d101      	bne.n	80071f2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80071ee:	2320      	movs	r3, #32
 80071f0:	e003      	b.n	80071fa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80071f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071f4:	fab3 f383 	clz	r3, r3
 80071f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d106      	bne.n	800720c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2200      	movs	r2, #0
 8007204:	2103      	movs	r1, #3
 8007206:	4618      	mov	r0, r3
 8007208:	f7fe ff02 	bl	8006010 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4618      	mov	r0, r3
 8007212:	f7ff f881 	bl	8006318 <LL_ADC_IsEnabled>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	f040 813d 	bne.w	8007498 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6818      	ldr	r0, [r3, #0]
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	6819      	ldr	r1, [r3, #0]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	461a      	mov	r2, r3
 800722c:	f7fe ffd2 	bl	80061d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	4aa2      	ldr	r2, [pc, #648]	@ (80074c0 <HAL_ADC_ConfigChannel+0x6dc>)
 8007236:	4293      	cmp	r3, r2
 8007238:	f040 812e 	bne.w	8007498 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10b      	bne.n	8007264 <HAL_ADC_ConfigChannel+0x480>
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	0e9b      	lsrs	r3, r3, #26
 8007252:	3301      	adds	r3, #1
 8007254:	f003 031f 	and.w	r3, r3, #31
 8007258:	2b09      	cmp	r3, #9
 800725a:	bf94      	ite	ls
 800725c:	2301      	movls	r3, #1
 800725e:	2300      	movhi	r3, #0
 8007260:	b2db      	uxtb	r3, r3
 8007262:	e019      	b.n	8007298 <HAL_ADC_ConfigChannel+0x4b4>
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800726a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800726c:	fa93 f3a3 	rbit	r3, r3
 8007270:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8007272:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007274:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8007276:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800727c:	2320      	movs	r3, #32
 800727e:	e003      	b.n	8007288 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8007280:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007282:	fab3 f383 	clz	r3, r3
 8007286:	b2db      	uxtb	r3, r3
 8007288:	3301      	adds	r3, #1
 800728a:	f003 031f 	and.w	r3, r3, #31
 800728e:	2b09      	cmp	r3, #9
 8007290:	bf94      	ite	ls
 8007292:	2301      	movls	r3, #1
 8007294:	2300      	movhi	r3, #0
 8007296:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007298:	2b00      	cmp	r3, #0
 800729a:	d079      	beq.n	8007390 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d107      	bne.n	80072b8 <HAL_ADC_ConfigChannel+0x4d4>
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	0e9b      	lsrs	r3, r3, #26
 80072ae:	3301      	adds	r3, #1
 80072b0:	069b      	lsls	r3, r3, #26
 80072b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80072b6:	e015      	b.n	80072e4 <HAL_ADC_ConfigChannel+0x500>
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072c0:	fa93 f3a3 	rbit	r3, r3
 80072c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80072c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072c8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80072ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d101      	bne.n	80072d4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80072d0:	2320      	movs	r3, #32
 80072d2:	e003      	b.n	80072dc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80072d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072d6:	fab3 f383 	clz	r3, r3
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	3301      	adds	r3, #1
 80072de:	069b      	lsls	r3, r3, #26
 80072e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d109      	bne.n	8007304 <HAL_ADC_ConfigChannel+0x520>
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	0e9b      	lsrs	r3, r3, #26
 80072f6:	3301      	adds	r3, #1
 80072f8:	f003 031f 	and.w	r3, r3, #31
 80072fc:	2101      	movs	r1, #1
 80072fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007302:	e017      	b.n	8007334 <HAL_ADC_ConfigChannel+0x550>
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800730a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800730c:	fa93 f3a3 	rbit	r3, r3
 8007310:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8007312:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007314:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8007316:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007318:	2b00      	cmp	r3, #0
 800731a:	d101      	bne.n	8007320 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800731c:	2320      	movs	r3, #32
 800731e:	e003      	b.n	8007328 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8007320:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007322:	fab3 f383 	clz	r3, r3
 8007326:	b2db      	uxtb	r3, r3
 8007328:	3301      	adds	r3, #1
 800732a:	f003 031f 	and.w	r3, r3, #31
 800732e:	2101      	movs	r1, #1
 8007330:	fa01 f303 	lsl.w	r3, r1, r3
 8007334:	ea42 0103 	orr.w	r1, r2, r3
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10a      	bne.n	800735a <HAL_ADC_ConfigChannel+0x576>
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	0e9b      	lsrs	r3, r3, #26
 800734a:	3301      	adds	r3, #1
 800734c:	f003 021f 	and.w	r2, r3, #31
 8007350:	4613      	mov	r3, r2
 8007352:	005b      	lsls	r3, r3, #1
 8007354:	4413      	add	r3, r2
 8007356:	051b      	lsls	r3, r3, #20
 8007358:	e018      	b.n	800738c <HAL_ADC_ConfigChannel+0x5a8>
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007362:	fa93 f3a3 	rbit	r3, r3
 8007366:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8007368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800736a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800736c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800736e:	2b00      	cmp	r3, #0
 8007370:	d101      	bne.n	8007376 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8007372:	2320      	movs	r3, #32
 8007374:	e003      	b.n	800737e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8007376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007378:	fab3 f383 	clz	r3, r3
 800737c:	b2db      	uxtb	r3, r3
 800737e:	3301      	adds	r3, #1
 8007380:	f003 021f 	and.w	r2, r3, #31
 8007384:	4613      	mov	r3, r2
 8007386:	005b      	lsls	r3, r3, #1
 8007388:	4413      	add	r3, r2
 800738a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800738c:	430b      	orrs	r3, r1
 800738e:	e07e      	b.n	800748e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007398:	2b00      	cmp	r3, #0
 800739a:	d107      	bne.n	80073ac <HAL_ADC_ConfigChannel+0x5c8>
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	0e9b      	lsrs	r3, r3, #26
 80073a2:	3301      	adds	r3, #1
 80073a4:	069b      	lsls	r3, r3, #26
 80073a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80073aa:	e015      	b.n	80073d8 <HAL_ADC_ConfigChannel+0x5f4>
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b4:	fa93 f3a3 	rbit	r3, r3
 80073b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80073ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073bc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80073be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d101      	bne.n	80073c8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80073c4:	2320      	movs	r3, #32
 80073c6:	e003      	b.n	80073d0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80073c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ca:	fab3 f383 	clz	r3, r3
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	3301      	adds	r3, #1
 80073d2:	069b      	lsls	r3, r3, #26
 80073d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d109      	bne.n	80073f8 <HAL_ADC_ConfigChannel+0x614>
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	0e9b      	lsrs	r3, r3, #26
 80073ea:	3301      	adds	r3, #1
 80073ec:	f003 031f 	and.w	r3, r3, #31
 80073f0:	2101      	movs	r1, #1
 80073f2:	fa01 f303 	lsl.w	r3, r1, r3
 80073f6:	e017      	b.n	8007428 <HAL_ADC_ConfigChannel+0x644>
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073fe:	6a3b      	ldr	r3, [r7, #32]
 8007400:	fa93 f3a3 	rbit	r3, r3
 8007404:	61fb      	str	r3, [r7, #28]
  return result;
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800740a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740c:	2b00      	cmp	r3, #0
 800740e:	d101      	bne.n	8007414 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8007410:	2320      	movs	r3, #32
 8007412:	e003      	b.n	800741c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8007414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007416:	fab3 f383 	clz	r3, r3
 800741a:	b2db      	uxtb	r3, r3
 800741c:	3301      	adds	r3, #1
 800741e:	f003 031f 	and.w	r3, r3, #31
 8007422:	2101      	movs	r1, #1
 8007424:	fa01 f303 	lsl.w	r3, r1, r3
 8007428:	ea42 0103 	orr.w	r1, r2, r3
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10d      	bne.n	8007454 <HAL_ADC_ConfigChannel+0x670>
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	0e9b      	lsrs	r3, r3, #26
 800743e:	3301      	adds	r3, #1
 8007440:	f003 021f 	and.w	r2, r3, #31
 8007444:	4613      	mov	r3, r2
 8007446:	005b      	lsls	r3, r3, #1
 8007448:	4413      	add	r3, r2
 800744a:	3b1e      	subs	r3, #30
 800744c:	051b      	lsls	r3, r3, #20
 800744e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007452:	e01b      	b.n	800748c <HAL_ADC_ConfigChannel+0x6a8>
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	fa93 f3a3 	rbit	r3, r3
 8007460:	613b      	str	r3, [r7, #16]
  return result;
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d101      	bne.n	8007470 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800746c:	2320      	movs	r3, #32
 800746e:	e003      	b.n	8007478 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	fab3 f383 	clz	r3, r3
 8007476:	b2db      	uxtb	r3, r3
 8007478:	3301      	adds	r3, #1
 800747a:	f003 021f 	and.w	r2, r3, #31
 800747e:	4613      	mov	r3, r2
 8007480:	005b      	lsls	r3, r3, #1
 8007482:	4413      	add	r3, r2
 8007484:	3b1e      	subs	r3, #30
 8007486:	051b      	lsls	r3, r3, #20
 8007488:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800748c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007492:	4619      	mov	r1, r3
 8007494:	f7fe fe72 	bl	800617c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	4b09      	ldr	r3, [pc, #36]	@ (80074c4 <HAL_ADC_ConfigChannel+0x6e0>)
 800749e:	4013      	ands	r3, r2
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f000 80be 	beq.w	8007622 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80074ae:	d004      	beq.n	80074ba <HAL_ADC_ConfigChannel+0x6d6>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a04      	ldr	r2, [pc, #16]	@ (80074c8 <HAL_ADC_ConfigChannel+0x6e4>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d10a      	bne.n	80074d0 <HAL_ADC_ConfigChannel+0x6ec>
 80074ba:	4b04      	ldr	r3, [pc, #16]	@ (80074cc <HAL_ADC_ConfigChannel+0x6e8>)
 80074bc:	e009      	b.n	80074d2 <HAL_ADC_ConfigChannel+0x6ee>
 80074be:	bf00      	nop
 80074c0:	407f0000 	.word	0x407f0000
 80074c4:	80080000 	.word	0x80080000
 80074c8:	50000100 	.word	0x50000100
 80074cc:	50000300 	.word	0x50000300
 80074d0:	4b59      	ldr	r3, [pc, #356]	@ (8007638 <HAL_ADC_ConfigChannel+0x854>)
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fe fd54 	bl	8005f80 <LL_ADC_GetCommonPathInternalCh>
 80074d8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a56      	ldr	r2, [pc, #344]	@ (800763c <HAL_ADC_ConfigChannel+0x858>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d004      	beq.n	80074f0 <HAL_ADC_ConfigChannel+0x70c>
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a55      	ldr	r2, [pc, #340]	@ (8007640 <HAL_ADC_ConfigChannel+0x85c>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d13a      	bne.n	8007566 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80074f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80074f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d134      	bne.n	8007566 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007504:	d005      	beq.n	8007512 <HAL_ADC_ConfigChannel+0x72e>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a4e      	ldr	r2, [pc, #312]	@ (8007644 <HAL_ADC_ConfigChannel+0x860>)
 800750c:	4293      	cmp	r3, r2
 800750e:	f040 8085 	bne.w	800761c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800751a:	d004      	beq.n	8007526 <HAL_ADC_ConfigChannel+0x742>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a49      	ldr	r2, [pc, #292]	@ (8007648 <HAL_ADC_ConfigChannel+0x864>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d101      	bne.n	800752a <HAL_ADC_ConfigChannel+0x746>
 8007526:	4a49      	ldr	r2, [pc, #292]	@ (800764c <HAL_ADC_ConfigChannel+0x868>)
 8007528:	e000      	b.n	800752c <HAL_ADC_ConfigChannel+0x748>
 800752a:	4a43      	ldr	r2, [pc, #268]	@ (8007638 <HAL_ADC_ConfigChannel+0x854>)
 800752c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007530:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007534:	4619      	mov	r1, r3
 8007536:	4610      	mov	r0, r2
 8007538:	f7fe fd0f 	bl	8005f5a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800753c:	4b44      	ldr	r3, [pc, #272]	@ (8007650 <HAL_ADC_ConfigChannel+0x86c>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	099b      	lsrs	r3, r3, #6
 8007542:	4a44      	ldr	r2, [pc, #272]	@ (8007654 <HAL_ADC_ConfigChannel+0x870>)
 8007544:	fba2 2303 	umull	r2, r3, r2, r3
 8007548:	099b      	lsrs	r3, r3, #6
 800754a:	1c5a      	adds	r2, r3, #1
 800754c:	4613      	mov	r3, r2
 800754e:	005b      	lsls	r3, r3, #1
 8007550:	4413      	add	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007556:	e002      	b.n	800755e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	3b01      	subs	r3, #1
 800755c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1f9      	bne.n	8007558 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007564:	e05a      	b.n	800761c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a3b      	ldr	r2, [pc, #236]	@ (8007658 <HAL_ADC_ConfigChannel+0x874>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d125      	bne.n	80075bc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007570:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007574:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007578:	2b00      	cmp	r3, #0
 800757a:	d11f      	bne.n	80075bc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a31      	ldr	r2, [pc, #196]	@ (8007648 <HAL_ADC_ConfigChannel+0x864>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d104      	bne.n	8007590 <HAL_ADC_ConfigChannel+0x7ac>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a34      	ldr	r2, [pc, #208]	@ (800765c <HAL_ADC_ConfigChannel+0x878>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d047      	beq.n	8007620 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007598:	d004      	beq.n	80075a4 <HAL_ADC_ConfigChannel+0x7c0>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a2a      	ldr	r2, [pc, #168]	@ (8007648 <HAL_ADC_ConfigChannel+0x864>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d101      	bne.n	80075a8 <HAL_ADC_ConfigChannel+0x7c4>
 80075a4:	4a29      	ldr	r2, [pc, #164]	@ (800764c <HAL_ADC_ConfigChannel+0x868>)
 80075a6:	e000      	b.n	80075aa <HAL_ADC_ConfigChannel+0x7c6>
 80075a8:	4a23      	ldr	r2, [pc, #140]	@ (8007638 <HAL_ADC_ConfigChannel+0x854>)
 80075aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80075ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80075b2:	4619      	mov	r1, r3
 80075b4:	4610      	mov	r0, r2
 80075b6:	f7fe fcd0 	bl	8005f5a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80075ba:	e031      	b.n	8007620 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a27      	ldr	r2, [pc, #156]	@ (8007660 <HAL_ADC_ConfigChannel+0x87c>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d12d      	bne.n	8007622 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80075c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80075ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d127      	bne.n	8007622 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a1c      	ldr	r2, [pc, #112]	@ (8007648 <HAL_ADC_ConfigChannel+0x864>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d022      	beq.n	8007622 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075e4:	d004      	beq.n	80075f0 <HAL_ADC_ConfigChannel+0x80c>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a17      	ldr	r2, [pc, #92]	@ (8007648 <HAL_ADC_ConfigChannel+0x864>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d101      	bne.n	80075f4 <HAL_ADC_ConfigChannel+0x810>
 80075f0:	4a16      	ldr	r2, [pc, #88]	@ (800764c <HAL_ADC_ConfigChannel+0x868>)
 80075f2:	e000      	b.n	80075f6 <HAL_ADC_ConfigChannel+0x812>
 80075f4:	4a10      	ldr	r2, [pc, #64]	@ (8007638 <HAL_ADC_ConfigChannel+0x854>)
 80075f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80075fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80075fe:	4619      	mov	r1, r3
 8007600:	4610      	mov	r0, r2
 8007602:	f7fe fcaa 	bl	8005f5a <LL_ADC_SetCommonPathInternalCh>
 8007606:	e00c      	b.n	8007622 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800760c:	f043 0220 	orr.w	r2, r3, #32
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800761a:	e002      	b.n	8007622 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800761c:	bf00      	nop
 800761e:	e000      	b.n	8007622 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007620:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800762a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800762e:	4618      	mov	r0, r3
 8007630:	37d8      	adds	r7, #216	@ 0xd8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	50000700 	.word	0x50000700
 800763c:	c3210000 	.word	0xc3210000
 8007640:	90c00010 	.word	0x90c00010
 8007644:	50000600 	.word	0x50000600
 8007648:	50000100 	.word	0x50000100
 800764c:	50000300 	.word	0x50000300
 8007650:	20000288 	.word	0x20000288
 8007654:	053e2d63 	.word	0x053e2d63
 8007658:	c7520000 	.word	0xc7520000
 800765c:	50000500 	.word	0x50000500
 8007660:	cb840000 	.word	0xcb840000

08007664 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800766c:	2300      	movs	r3, #0
 800766e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4618      	mov	r0, r3
 8007676:	f7fe fe4f 	bl	8006318 <LL_ADC_IsEnabled>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d176      	bne.n	800776e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	689a      	ldr	r2, [r3, #8]
 8007686:	4b3c      	ldr	r3, [pc, #240]	@ (8007778 <ADC_Enable+0x114>)
 8007688:	4013      	ands	r3, r2
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00d      	beq.n	80076aa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007692:	f043 0210 	orr.w	r2, r3, #16
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800769e:	f043 0201 	orr.w	r2, r3, #1
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e062      	b.n	8007770 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7fe fe1e 	bl	80062f0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076bc:	d004      	beq.n	80076c8 <ADC_Enable+0x64>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a2e      	ldr	r2, [pc, #184]	@ (800777c <ADC_Enable+0x118>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d101      	bne.n	80076cc <ADC_Enable+0x68>
 80076c8:	4b2d      	ldr	r3, [pc, #180]	@ (8007780 <ADC_Enable+0x11c>)
 80076ca:	e000      	b.n	80076ce <ADC_Enable+0x6a>
 80076cc:	4b2d      	ldr	r3, [pc, #180]	@ (8007784 <ADC_Enable+0x120>)
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7fe fc56 	bl	8005f80 <LL_ADC_GetCommonPathInternalCh>
 80076d4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80076d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d013      	beq.n	8007706 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80076de:	4b2a      	ldr	r3, [pc, #168]	@ (8007788 <ADC_Enable+0x124>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	099b      	lsrs	r3, r3, #6
 80076e4:	4a29      	ldr	r2, [pc, #164]	@ (800778c <ADC_Enable+0x128>)
 80076e6:	fba2 2303 	umull	r2, r3, r2, r3
 80076ea:	099b      	lsrs	r3, r3, #6
 80076ec:	1c5a      	adds	r2, r3, #1
 80076ee:	4613      	mov	r3, r2
 80076f0:	005b      	lsls	r3, r3, #1
 80076f2:	4413      	add	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80076f8:	e002      	b.n	8007700 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	3b01      	subs	r3, #1
 80076fe:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1f9      	bne.n	80076fa <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007706:	f7fe fc09 	bl	8005f1c <HAL_GetTick>
 800770a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800770c:	e028      	b.n	8007760 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4618      	mov	r0, r3
 8007714:	f7fe fe00 	bl	8006318 <LL_ADC_IsEnabled>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d104      	bne.n	8007728 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4618      	mov	r0, r3
 8007724:	f7fe fde4 	bl	80062f0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007728:	f7fe fbf8 	bl	8005f1c <HAL_GetTick>
 800772c:	4602      	mov	r2, r0
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	2b02      	cmp	r3, #2
 8007734:	d914      	bls.n	8007760 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0301 	and.w	r3, r3, #1
 8007740:	2b01      	cmp	r3, #1
 8007742:	d00d      	beq.n	8007760 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007748:	f043 0210 	orr.w	r2, r3, #16
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007754:	f043 0201 	orr.w	r2, r3, #1
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e007      	b.n	8007770 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0301 	and.w	r3, r3, #1
 800776a:	2b01      	cmp	r3, #1
 800776c:	d1cf      	bne.n	800770e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	8000003f 	.word	0x8000003f
 800777c:	50000100 	.word	0x50000100
 8007780:	50000300 	.word	0x50000300
 8007784:	50000700 	.word	0x50000700
 8007788:	20000288 	.word	0x20000288
 800778c:	053e2d63 	.word	0x053e2d63

08007790 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800779c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077a2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d14b      	bne.n	8007842 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077ae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0308 	and.w	r3, r3, #8
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d021      	beq.n	8007808 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7fe fc85 	bl	80060d8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d032      	beq.n	800783a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d12b      	bne.n	800783a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077e6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d11f      	bne.n	800783a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077fe:	f043 0201 	orr.w	r2, r3, #1
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007806:	e018      	b.n	800783a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	f003 0302 	and.w	r3, r3, #2
 8007812:	2b00      	cmp	r3, #0
 8007814:	d111      	bne.n	800783a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800781a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007826:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d105      	bne.n	800783a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007832:	f043 0201 	orr.w	r2, r3, #1
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f7ff faaa 	bl	8006d94 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007840:	e00e      	b.n	8007860 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007846:	f003 0310 	and.w	r3, r3, #16
 800784a:	2b00      	cmp	r3, #0
 800784c:	d003      	beq.n	8007856 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f7ff fabe 	bl	8006dd0 <HAL_ADC_ErrorCallback>
}
 8007854:	e004      	b.n	8007860 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800785a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	4798      	blx	r3
}
 8007860:	bf00      	nop
 8007862:	3710      	adds	r7, #16
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007874:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f7ff fa96 	bl	8006da8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800787c:	bf00      	nop
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007890:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007896:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078a2:	f043 0204 	orr.w	r2, r3, #4
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f7ff fa90 	bl	8006dd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80078b0:	bf00      	nop
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <LL_ADC_IsEnabled>:
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f003 0301 	and.w	r3, r3, #1
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d101      	bne.n	80078d0 <LL_ADC_IsEnabled+0x18>
 80078cc:	2301      	movs	r3, #1
 80078ce:	e000      	b.n	80078d2 <LL_ADC_IsEnabled+0x1a>
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	370c      	adds	r7, #12
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <LL_ADC_REG_IsConversionOngoing>:
{
 80078de:	b480      	push	{r7}
 80078e0:	b083      	sub	sp, #12
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f003 0304 	and.w	r3, r3, #4
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	d101      	bne.n	80078f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80078f2:	2301      	movs	r3, #1
 80078f4:	e000      	b.n	80078f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007934:	bf00      	nop
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007948:	bf00      	nop
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8007968:	b590      	push	{r4, r7, lr}
 800796a:	b0a1      	sub	sp, #132	@ 0x84
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007972:	2300      	movs	r3, #0
 8007974:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800797e:	2b01      	cmp	r3, #1
 8007980:	d101      	bne.n	8007986 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007982:	2302      	movs	r3, #2
 8007984:	e0e7      	b.n	8007b56 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800798e:	2300      	movs	r3, #0
 8007990:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8007992:	2300      	movs	r3, #0
 8007994:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800799e:	d102      	bne.n	80079a6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80079a0:	4b6f      	ldr	r3, [pc, #444]	@ (8007b60 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80079a2:	60bb      	str	r3, [r7, #8]
 80079a4:	e009      	b.n	80079ba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a6e      	ldr	r2, [pc, #440]	@ (8007b64 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d102      	bne.n	80079b6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80079b0:	4b6d      	ldr	r3, [pc, #436]	@ (8007b68 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80079b2:	60bb      	str	r3, [r7, #8]
 80079b4:	e001      	b.n	80079ba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80079b6:	2300      	movs	r3, #0
 80079b8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10b      	bne.n	80079d8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079c4:	f043 0220 	orr.w	r2, r3, #32
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	e0be      	b.n	8007b56 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	4618      	mov	r0, r3
 80079dc:	f7ff ff7f 	bl	80078de <LL_ADC_REG_IsConversionOngoing>
 80079e0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7ff ff79 	bl	80078de <LL_ADC_REG_IsConversionOngoing>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f040 80a0 	bne.w	8007b34 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80079f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f040 809c 	bne.w	8007b34 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a04:	d004      	beq.n	8007a10 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a55      	ldr	r2, [pc, #340]	@ (8007b60 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d101      	bne.n	8007a14 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8007a10:	4b56      	ldr	r3, [pc, #344]	@ (8007b6c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8007a12:	e000      	b.n	8007a16 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8007a14:	4b56      	ldr	r3, [pc, #344]	@ (8007b70 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8007a16:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d04b      	beq.n	8007ab8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007a20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	6859      	ldr	r1, [r3, #4]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007a32:	035b      	lsls	r3, r3, #13
 8007a34:	430b      	orrs	r3, r1
 8007a36:	431a      	orrs	r2, r3
 8007a38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a3a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a44:	d004      	beq.n	8007a50 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a45      	ldr	r2, [pc, #276]	@ (8007b60 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d10f      	bne.n	8007a70 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8007a50:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007a54:	f7ff ff30 	bl	80078b8 <LL_ADC_IsEnabled>
 8007a58:	4604      	mov	r4, r0
 8007a5a:	4841      	ldr	r0, [pc, #260]	@ (8007b60 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007a5c:	f7ff ff2c 	bl	80078b8 <LL_ADC_IsEnabled>
 8007a60:	4603      	mov	r3, r0
 8007a62:	4323      	orrs	r3, r4
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	bf0c      	ite	eq
 8007a68:	2301      	moveq	r3, #1
 8007a6a:	2300      	movne	r3, #0
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	e012      	b.n	8007a96 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8007a70:	483c      	ldr	r0, [pc, #240]	@ (8007b64 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007a72:	f7ff ff21 	bl	80078b8 <LL_ADC_IsEnabled>
 8007a76:	4604      	mov	r4, r0
 8007a78:	483b      	ldr	r0, [pc, #236]	@ (8007b68 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007a7a:	f7ff ff1d 	bl	80078b8 <LL_ADC_IsEnabled>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	431c      	orrs	r4, r3
 8007a82:	483c      	ldr	r0, [pc, #240]	@ (8007b74 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007a84:	f7ff ff18 	bl	80078b8 <LL_ADC_IsEnabled>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	4323      	orrs	r3, r4
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	bf0c      	ite	eq
 8007a90:	2301      	moveq	r3, #1
 8007a92:	2300      	movne	r3, #0
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d056      	beq.n	8007b48 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007a9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007aa2:	f023 030f 	bic.w	r3, r3, #15
 8007aa6:	683a      	ldr	r2, [r7, #0]
 8007aa8:	6811      	ldr	r1, [r2, #0]
 8007aaa:	683a      	ldr	r2, [r7, #0]
 8007aac:	6892      	ldr	r2, [r2, #8]
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	431a      	orrs	r2, r3
 8007ab2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ab4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007ab6:	e047      	b.n	8007b48 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007ab8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007ac0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ac2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007acc:	d004      	beq.n	8007ad8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a23      	ldr	r2, [pc, #140]	@ (8007b60 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d10f      	bne.n	8007af8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8007ad8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007adc:	f7ff feec 	bl	80078b8 <LL_ADC_IsEnabled>
 8007ae0:	4604      	mov	r4, r0
 8007ae2:	481f      	ldr	r0, [pc, #124]	@ (8007b60 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007ae4:	f7ff fee8 	bl	80078b8 <LL_ADC_IsEnabled>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	4323      	orrs	r3, r4
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	bf0c      	ite	eq
 8007af0:	2301      	moveq	r3, #1
 8007af2:	2300      	movne	r3, #0
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	e012      	b.n	8007b1e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8007af8:	481a      	ldr	r0, [pc, #104]	@ (8007b64 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007afa:	f7ff fedd 	bl	80078b8 <LL_ADC_IsEnabled>
 8007afe:	4604      	mov	r4, r0
 8007b00:	4819      	ldr	r0, [pc, #100]	@ (8007b68 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007b02:	f7ff fed9 	bl	80078b8 <LL_ADC_IsEnabled>
 8007b06:	4603      	mov	r3, r0
 8007b08:	431c      	orrs	r4, r3
 8007b0a:	481a      	ldr	r0, [pc, #104]	@ (8007b74 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007b0c:	f7ff fed4 	bl	80078b8 <LL_ADC_IsEnabled>
 8007b10:	4603      	mov	r3, r0
 8007b12:	4323      	orrs	r3, r4
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	bf0c      	ite	eq
 8007b18:	2301      	moveq	r3, #1
 8007b1a:	2300      	movne	r3, #0
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d012      	beq.n	8007b48 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007b22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007b2a:	f023 030f 	bic.w	r3, r3, #15
 8007b2e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007b30:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007b32:	e009      	b.n	8007b48 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b38:	f043 0220 	orr.w	r2, r3, #32
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8007b46:	e000      	b.n	8007b4a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007b48:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007b52:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3784      	adds	r7, #132	@ 0x84
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd90      	pop	{r4, r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	50000100 	.word	0x50000100
 8007b64:	50000400 	.word	0x50000400
 8007b68:	50000500 	.word	0x50000500
 8007b6c:	50000300 	.word	0x50000300
 8007b70:	50000700 	.word	0x50000700
 8007b74:	50000600 	.word	0x50000600

08007b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f003 0307 	and.w	r3, r3, #7
 8007b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007b88:	4b0c      	ldr	r3, [pc, #48]	@ (8007bbc <__NVIC_SetPriorityGrouping+0x44>)
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007b94:	4013      	ands	r3, r2
 8007b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007ba0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007ba4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007baa:	4a04      	ldr	r2, [pc, #16]	@ (8007bbc <__NVIC_SetPriorityGrouping+0x44>)
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	60d3      	str	r3, [r2, #12]
}
 8007bb0:	bf00      	nop
 8007bb2:	3714      	adds	r7, #20
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr
 8007bbc:	e000ed00 	.word	0xe000ed00

08007bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007bc4:	4b04      	ldr	r3, [pc, #16]	@ (8007bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	0a1b      	lsrs	r3, r3, #8
 8007bca:	f003 0307 	and.w	r3, r3, #7
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr
 8007bd8:	e000ed00 	.word	0xe000ed00

08007bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	4603      	mov	r3, r0
 8007be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	db0b      	blt.n	8007c06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007bee:	79fb      	ldrb	r3, [r7, #7]
 8007bf0:	f003 021f 	and.w	r2, r3, #31
 8007bf4:	4907      	ldr	r1, [pc, #28]	@ (8007c14 <__NVIC_EnableIRQ+0x38>)
 8007bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bfa:	095b      	lsrs	r3, r3, #5
 8007bfc:	2001      	movs	r0, #1
 8007bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8007c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007c06:	bf00      	nop
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	e000e100 	.word	0xe000e100

08007c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	4603      	mov	r3, r0
 8007c20:	6039      	str	r1, [r7, #0]
 8007c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	db0a      	blt.n	8007c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	b2da      	uxtb	r2, r3
 8007c30:	490c      	ldr	r1, [pc, #48]	@ (8007c64 <__NVIC_SetPriority+0x4c>)
 8007c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c36:	0112      	lsls	r2, r2, #4
 8007c38:	b2d2      	uxtb	r2, r2
 8007c3a:	440b      	add	r3, r1
 8007c3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007c40:	e00a      	b.n	8007c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	b2da      	uxtb	r2, r3
 8007c46:	4908      	ldr	r1, [pc, #32]	@ (8007c68 <__NVIC_SetPriority+0x50>)
 8007c48:	79fb      	ldrb	r3, [r7, #7]
 8007c4a:	f003 030f 	and.w	r3, r3, #15
 8007c4e:	3b04      	subs	r3, #4
 8007c50:	0112      	lsls	r2, r2, #4
 8007c52:	b2d2      	uxtb	r2, r2
 8007c54:	440b      	add	r3, r1
 8007c56:	761a      	strb	r2, [r3, #24]
}
 8007c58:	bf00      	nop
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr
 8007c64:	e000e100 	.word	0xe000e100
 8007c68:	e000ed00 	.word	0xe000ed00

08007c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b089      	sub	sp, #36	@ 0x24
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f003 0307 	and.w	r3, r3, #7
 8007c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	f1c3 0307 	rsb	r3, r3, #7
 8007c86:	2b04      	cmp	r3, #4
 8007c88:	bf28      	it	cs
 8007c8a:	2304      	movcs	r3, #4
 8007c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	3304      	adds	r3, #4
 8007c92:	2b06      	cmp	r3, #6
 8007c94:	d902      	bls.n	8007c9c <NVIC_EncodePriority+0x30>
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	3b03      	subs	r3, #3
 8007c9a:	e000      	b.n	8007c9e <NVIC_EncodePriority+0x32>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8007caa:	43da      	mvns	r2, r3
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	401a      	ands	r2, r3
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	fa01 f303 	lsl.w	r3, r1, r3
 8007cbe:	43d9      	mvns	r1, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007cc4:	4313      	orrs	r3, r2
         );
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3724      	adds	r7, #36	@ 0x24
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
	...

08007cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ce4:	d301      	bcc.n	8007cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e00f      	b.n	8007d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007cea:	4a0a      	ldr	r2, [pc, #40]	@ (8007d14 <SysTick_Config+0x40>)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007cf2:	210f      	movs	r1, #15
 8007cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf8:	f7ff ff8e 	bl	8007c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007cfc:	4b05      	ldr	r3, [pc, #20]	@ (8007d14 <SysTick_Config+0x40>)
 8007cfe:	2200      	movs	r2, #0
 8007d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007d02:	4b04      	ldr	r3, [pc, #16]	@ (8007d14 <SysTick_Config+0x40>)
 8007d04:	2207      	movs	r2, #7
 8007d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3708      	adds	r7, #8
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	e000e010 	.word	0xe000e010

08007d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7ff ff29 	bl	8007b78 <__NVIC_SetPriorityGrouping>
}
 8007d26:	bf00      	nop
 8007d28:	3708      	adds	r7, #8
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b086      	sub	sp, #24
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	4603      	mov	r3, r0
 8007d36:	60b9      	str	r1, [r7, #8]
 8007d38:	607a      	str	r2, [r7, #4]
 8007d3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007d3c:	f7ff ff40 	bl	8007bc0 <__NVIC_GetPriorityGrouping>
 8007d40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	68b9      	ldr	r1, [r7, #8]
 8007d46:	6978      	ldr	r0, [r7, #20]
 8007d48:	f7ff ff90 	bl	8007c6c <NVIC_EncodePriority>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d52:	4611      	mov	r1, r2
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7ff ff5f 	bl	8007c18 <__NVIC_SetPriority>
}
 8007d5a:	bf00      	nop
 8007d5c:	3718      	adds	r7, #24
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b082      	sub	sp, #8
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	4603      	mov	r3, r0
 8007d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7ff ff33 	bl	8007bdc <__NVIC_EnableIRQ>
}
 8007d76:	bf00      	nop
 8007d78:	3708      	adds	r7, #8
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b082      	sub	sp, #8
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f7ff ffa4 	bl	8007cd4 <SysTick_Config>
 8007d8c:	4603      	mov	r3, r0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3708      	adds	r7, #8
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
	...

08007d98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d101      	bne.n	8007daa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e08d      	b.n	8007ec6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	461a      	mov	r2, r3
 8007db0:	4b47      	ldr	r3, [pc, #284]	@ (8007ed0 <HAL_DMA_Init+0x138>)
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d80f      	bhi.n	8007dd6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	461a      	mov	r2, r3
 8007dbc:	4b45      	ldr	r3, [pc, #276]	@ (8007ed4 <HAL_DMA_Init+0x13c>)
 8007dbe:	4413      	add	r3, r2
 8007dc0:	4a45      	ldr	r2, [pc, #276]	@ (8007ed8 <HAL_DMA_Init+0x140>)
 8007dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc6:	091b      	lsrs	r3, r3, #4
 8007dc8:	009a      	lsls	r2, r3, #2
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a42      	ldr	r2, [pc, #264]	@ (8007edc <HAL_DMA_Init+0x144>)
 8007dd2:	641a      	str	r2, [r3, #64]	@ 0x40
 8007dd4:	e00e      	b.n	8007df4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	4b40      	ldr	r3, [pc, #256]	@ (8007ee0 <HAL_DMA_Init+0x148>)
 8007dde:	4413      	add	r3, r2
 8007de0:	4a3d      	ldr	r2, [pc, #244]	@ (8007ed8 <HAL_DMA_Init+0x140>)
 8007de2:	fba2 2303 	umull	r2, r3, r2, r3
 8007de6:	091b      	lsrs	r3, r3, #4
 8007de8:	009a      	lsls	r2, r3, #2
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a3c      	ldr	r2, [pc, #240]	@ (8007ee4 <HAL_DMA_Init+0x14c>)
 8007df2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2202      	movs	r2, #2
 8007df8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007e18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	699b      	ldr	r3, [r3, #24]
 8007e2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fa76 	bl	8008338 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e54:	d102      	bne.n	8007e5c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e64:	b2d2      	uxtb	r2, r2
 8007e66:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007e70:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d010      	beq.n	8007e9c <HAL_DMA_Init+0x104>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	2b04      	cmp	r3, #4
 8007e80:	d80c      	bhi.n	8007e9c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fa96 	bl	80083b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007e98:	605a      	str	r2, [r3, #4]
 8007e9a:	e008      	b.n	8007eae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	40020407 	.word	0x40020407
 8007ed4:	bffdfff8 	.word	0xbffdfff8
 8007ed8:	cccccccd 	.word	0xcccccccd
 8007edc:	40020000 	.word	0x40020000
 8007ee0:	bffdfbf8 	.word	0xbffdfbf8
 8007ee4:	40020400 	.word	0x40020400

08007ee8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	607a      	str	r2, [r7, #4]
 8007ef4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d101      	bne.n	8007f08 <HAL_DMA_Start_IT+0x20>
 8007f04:	2302      	movs	r3, #2
 8007f06:	e066      	b.n	8007fd6 <HAL_DMA_Start_IT+0xee>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d155      	bne.n	8007fc8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2202      	movs	r2, #2
 8007f20:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f022 0201 	bic.w	r2, r2, #1
 8007f38:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	68b9      	ldr	r1, [r7, #8]
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 f9bb 	bl	80082bc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d008      	beq.n	8007f60 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f042 020e 	orr.w	r2, r2, #14
 8007f5c:	601a      	str	r2, [r3, #0]
 8007f5e:	e00f      	b.n	8007f80 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f022 0204 	bic.w	r2, r2, #4
 8007f6e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f042 020a 	orr.w	r2, r2, #10
 8007f7e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d007      	beq.n	8007f9e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f9c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d007      	beq.n	8007fb6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007fb4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f042 0201 	orr.w	r2, r2, #1
 8007fc4:	601a      	str	r2, [r3, #0]
 8007fc6:	e005      	b.n	8007fd4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3718      	adds	r7, #24
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007fde:	b480      	push	{r7}
 8007fe0:	b085      	sub	sp, #20
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d005      	beq.n	8008002 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2204      	movs	r2, #4
 8007ffa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	73fb      	strb	r3, [r7, #15]
 8008000:	e037      	b.n	8008072 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f022 020e 	bic.w	r2, r2, #14
 8008010:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800801c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008020:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f022 0201 	bic.w	r2, r2, #1
 8008030:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008036:	f003 021f 	and.w	r2, r3, #31
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800803e:	2101      	movs	r1, #1
 8008040:	fa01 f202 	lsl.w	r2, r1, r2
 8008044:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800804e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00c      	beq.n	8008072 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008062:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008066:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008070:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8008082:	7bfb      	ldrb	r3, [r7, #15]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3714      	adds	r7, #20
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008098:	2300      	movs	r3, #0
 800809a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d00d      	beq.n	80080c4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2204      	movs	r2, #4
 80080ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	73fb      	strb	r3, [r7, #15]
 80080c2:	e047      	b.n	8008154 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f022 020e 	bic.w	r2, r2, #14
 80080d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f022 0201 	bic.w	r2, r2, #1
 80080e2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80080f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080f8:	f003 021f 	and.w	r2, r3, #31
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008100:	2101      	movs	r1, #1
 8008102:	fa01 f202 	lsl.w	r2, r1, r2
 8008106:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008110:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00c      	beq.n	8008134 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008124:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008128:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008132:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008148:	2b00      	cmp	r3, #0
 800814a:	d003      	beq.n	8008154 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	4798      	blx	r3
    }
  }
  return status;
 8008154:	7bfb      	ldrb	r3, [r7, #15]
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b084      	sub	sp, #16
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800817a:	f003 031f 	and.w	r3, r3, #31
 800817e:	2204      	movs	r2, #4
 8008180:	409a      	lsls	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	4013      	ands	r3, r2
 8008186:	2b00      	cmp	r3, #0
 8008188:	d026      	beq.n	80081d8 <HAL_DMA_IRQHandler+0x7a>
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	f003 0304 	and.w	r3, r3, #4
 8008190:	2b00      	cmp	r3, #0
 8008192:	d021      	beq.n	80081d8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 0320 	and.w	r3, r3, #32
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d107      	bne.n	80081b2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f022 0204 	bic.w	r2, r2, #4
 80081b0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081b6:	f003 021f 	and.w	r2, r3, #31
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081be:	2104      	movs	r1, #4
 80081c0:	fa01 f202 	lsl.w	r2, r1, r2
 80081c4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d071      	beq.n	80082b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80081d6:	e06c      	b.n	80082b2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081dc:	f003 031f 	and.w	r3, r3, #31
 80081e0:	2202      	movs	r2, #2
 80081e2:	409a      	lsls	r2, r3
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	4013      	ands	r3, r2
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d02e      	beq.n	800824a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	f003 0302 	and.w	r3, r3, #2
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d029      	beq.n	800824a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0320 	and.w	r3, r3, #32
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10b      	bne.n	800821c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f022 020a 	bic.w	r2, r2, #10
 8008212:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008220:	f003 021f 	and.w	r2, r3, #31
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008228:	2102      	movs	r1, #2
 800822a:	fa01 f202 	lsl.w	r2, r1, r2
 800822e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800823c:	2b00      	cmp	r3, #0
 800823e:	d038      	beq.n	80082b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008248:	e033      	b.n	80082b2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800824e:	f003 031f 	and.w	r3, r3, #31
 8008252:	2208      	movs	r2, #8
 8008254:	409a      	lsls	r2, r3
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	4013      	ands	r3, r2
 800825a:	2b00      	cmp	r3, #0
 800825c:	d02a      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	f003 0308 	and.w	r3, r3, #8
 8008264:	2b00      	cmp	r3, #0
 8008266:	d025      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f022 020e 	bic.w	r2, r2, #14
 8008276:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800827c:	f003 021f 	and.w	r2, r3, #31
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008284:	2101      	movs	r1, #1
 8008286:	fa01 f202 	lsl.w	r2, r1, r2
 800828a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2201      	movs	r2, #1
 8008296:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d004      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80082b2:	bf00      	nop
 80082b4:	bf00      	nop
}
 80082b6:	3710      	adds	r7, #16
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
 80082c8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80082d2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d004      	beq.n	80082e6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80082e4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082ea:	f003 021f 	and.w	r2, r3, #31
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082f2:	2101      	movs	r1, #1
 80082f4:	fa01 f202 	lsl.w	r2, r1, r2
 80082f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	683a      	ldr	r2, [r7, #0]
 8008300:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	2b10      	cmp	r3, #16
 8008308:	d108      	bne.n	800831c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	68ba      	ldr	r2, [r7, #8]
 8008318:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800831a:	e007      	b.n	800832c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	60da      	str	r2, [r3, #12]
}
 800832c:	bf00      	nop
 800832e:	3714      	adds	r7, #20
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008338:	b480      	push	{r7}
 800833a:	b087      	sub	sp, #28
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	461a      	mov	r2, r3
 8008346:	4b16      	ldr	r3, [pc, #88]	@ (80083a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8008348:	429a      	cmp	r2, r3
 800834a:	d802      	bhi.n	8008352 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800834c:	4b15      	ldr	r3, [pc, #84]	@ (80083a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800834e:	617b      	str	r3, [r7, #20]
 8008350:	e001      	b.n	8008356 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8008352:	4b15      	ldr	r3, [pc, #84]	@ (80083a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008354:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	b2db      	uxtb	r3, r3
 8008360:	3b08      	subs	r3, #8
 8008362:	4a12      	ldr	r2, [pc, #72]	@ (80083ac <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008364:	fba2 2303 	umull	r2, r3, r2, r3
 8008368:	091b      	lsrs	r3, r3, #4
 800836a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008370:	089b      	lsrs	r3, r3, #2
 8008372:	009a      	lsls	r2, r3, #2
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	4413      	add	r3, r2
 8008378:	461a      	mov	r2, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a0b      	ldr	r2, [pc, #44]	@ (80083b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008382:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f003 031f 	and.w	r3, r3, #31
 800838a:	2201      	movs	r2, #1
 800838c:	409a      	lsls	r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008392:	bf00      	nop
 8008394:	371c      	adds	r7, #28
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	40020407 	.word	0x40020407
 80083a4:	40020800 	.word	0x40020800
 80083a8:	40020820 	.word	0x40020820
 80083ac:	cccccccd 	.word	0xcccccccd
 80083b0:	40020880 	.word	0x40020880

080083b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	4b0b      	ldr	r3, [pc, #44]	@ (80083f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80083c8:	4413      	add	r3, r2
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	461a      	mov	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a08      	ldr	r2, [pc, #32]	@ (80083f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80083d6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	3b01      	subs	r3, #1
 80083dc:	f003 031f 	and.w	r3, r3, #31
 80083e0:	2201      	movs	r2, #1
 80083e2:	409a      	lsls	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80083e8:	bf00      	nop
 80083ea:	3714      	adds	r7, #20
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr
 80083f4:	1000823f 	.word	0x1000823f
 80083f8:	40020940 	.word	0x40020940

080083fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b087      	sub	sp, #28
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008406:	2300      	movs	r3, #0
 8008408:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800840a:	e15a      	b.n	80086c2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	2101      	movs	r1, #1
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	fa01 f303 	lsl.w	r3, r1, r3
 8008418:	4013      	ands	r3, r2
 800841a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2b00      	cmp	r3, #0
 8008420:	f000 814c 	beq.w	80086bc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	f003 0303 	and.w	r3, r3, #3
 800842c:	2b01      	cmp	r3, #1
 800842e:	d005      	beq.n	800843c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008438:	2b02      	cmp	r3, #2
 800843a:	d130      	bne.n	800849e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	005b      	lsls	r3, r3, #1
 8008446:	2203      	movs	r2, #3
 8008448:	fa02 f303 	lsl.w	r3, r2, r3
 800844c:	43db      	mvns	r3, r3
 800844e:	693a      	ldr	r2, [r7, #16]
 8008450:	4013      	ands	r3, r2
 8008452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	68da      	ldr	r2, [r3, #12]
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	005b      	lsls	r3, r3, #1
 800845c:	fa02 f303 	lsl.w	r3, r2, r3
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	4313      	orrs	r3, r2
 8008464:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008472:	2201      	movs	r2, #1
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	fa02 f303 	lsl.w	r3, r2, r3
 800847a:	43db      	mvns	r3, r3
 800847c:	693a      	ldr	r2, [r7, #16]
 800847e:	4013      	ands	r3, r2
 8008480:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	091b      	lsrs	r3, r3, #4
 8008488:	f003 0201 	and.w	r2, r3, #1
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	fa02 f303 	lsl.w	r3, r2, r3
 8008492:	693a      	ldr	r2, [r7, #16]
 8008494:	4313      	orrs	r3, r2
 8008496:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	f003 0303 	and.w	r3, r3, #3
 80084a6:	2b03      	cmp	r3, #3
 80084a8:	d017      	beq.n	80084da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	005b      	lsls	r3, r3, #1
 80084b4:	2203      	movs	r2, #3
 80084b6:	fa02 f303 	lsl.w	r3, r2, r3
 80084ba:	43db      	mvns	r3, r3
 80084bc:	693a      	ldr	r2, [r7, #16]
 80084be:	4013      	ands	r3, r2
 80084c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	689a      	ldr	r2, [r3, #8]
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	005b      	lsls	r3, r3, #1
 80084ca:	fa02 f303 	lsl.w	r3, r2, r3
 80084ce:	693a      	ldr	r2, [r7, #16]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	f003 0303 	and.w	r3, r3, #3
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d123      	bne.n	800852e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	08da      	lsrs	r2, r3, #3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	3208      	adds	r2, #8
 80084ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	f003 0307 	and.w	r3, r3, #7
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	220f      	movs	r2, #15
 80084fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008502:	43db      	mvns	r3, r3
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	4013      	ands	r3, r2
 8008508:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	691a      	ldr	r2, [r3, #16]
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f003 0307 	and.w	r3, r3, #7
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	fa02 f303 	lsl.w	r3, r2, r3
 800851a:	693a      	ldr	r2, [r7, #16]
 800851c:	4313      	orrs	r3, r2
 800851e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	08da      	lsrs	r2, r3, #3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	3208      	adds	r2, #8
 8008528:	6939      	ldr	r1, [r7, #16]
 800852a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	005b      	lsls	r3, r3, #1
 8008538:	2203      	movs	r2, #3
 800853a:	fa02 f303 	lsl.w	r3, r2, r3
 800853e:	43db      	mvns	r3, r3
 8008540:	693a      	ldr	r2, [r7, #16]
 8008542:	4013      	ands	r3, r2
 8008544:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	f003 0203 	and.w	r2, r3, #3
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	005b      	lsls	r3, r3, #1
 8008552:	fa02 f303 	lsl.w	r3, r2, r3
 8008556:	693a      	ldr	r2, [r7, #16]
 8008558:	4313      	orrs	r3, r2
 800855a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	693a      	ldr	r2, [r7, #16]
 8008560:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800856a:	2b00      	cmp	r3, #0
 800856c:	f000 80a6 	beq.w	80086bc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008570:	4b5b      	ldr	r3, [pc, #364]	@ (80086e0 <HAL_GPIO_Init+0x2e4>)
 8008572:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008574:	4a5a      	ldr	r2, [pc, #360]	@ (80086e0 <HAL_GPIO_Init+0x2e4>)
 8008576:	f043 0301 	orr.w	r3, r3, #1
 800857a:	6613      	str	r3, [r2, #96]	@ 0x60
 800857c:	4b58      	ldr	r3, [pc, #352]	@ (80086e0 <HAL_GPIO_Init+0x2e4>)
 800857e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008580:	f003 0301 	and.w	r3, r3, #1
 8008584:	60bb      	str	r3, [r7, #8]
 8008586:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008588:	4a56      	ldr	r2, [pc, #344]	@ (80086e4 <HAL_GPIO_Init+0x2e8>)
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	089b      	lsrs	r3, r3, #2
 800858e:	3302      	adds	r3, #2
 8008590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008594:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	f003 0303 	and.w	r3, r3, #3
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	220f      	movs	r2, #15
 80085a0:	fa02 f303 	lsl.w	r3, r2, r3
 80085a4:	43db      	mvns	r3, r3
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	4013      	ands	r3, r2
 80085aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80085b2:	d01f      	beq.n	80085f4 <HAL_GPIO_Init+0x1f8>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a4c      	ldr	r2, [pc, #304]	@ (80086e8 <HAL_GPIO_Init+0x2ec>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d019      	beq.n	80085f0 <HAL_GPIO_Init+0x1f4>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a4b      	ldr	r2, [pc, #300]	@ (80086ec <HAL_GPIO_Init+0x2f0>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d013      	beq.n	80085ec <HAL_GPIO_Init+0x1f0>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a4a      	ldr	r2, [pc, #296]	@ (80086f0 <HAL_GPIO_Init+0x2f4>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d00d      	beq.n	80085e8 <HAL_GPIO_Init+0x1ec>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a49      	ldr	r2, [pc, #292]	@ (80086f4 <HAL_GPIO_Init+0x2f8>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d007      	beq.n	80085e4 <HAL_GPIO_Init+0x1e8>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a48      	ldr	r2, [pc, #288]	@ (80086f8 <HAL_GPIO_Init+0x2fc>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d101      	bne.n	80085e0 <HAL_GPIO_Init+0x1e4>
 80085dc:	2305      	movs	r3, #5
 80085de:	e00a      	b.n	80085f6 <HAL_GPIO_Init+0x1fa>
 80085e0:	2306      	movs	r3, #6
 80085e2:	e008      	b.n	80085f6 <HAL_GPIO_Init+0x1fa>
 80085e4:	2304      	movs	r3, #4
 80085e6:	e006      	b.n	80085f6 <HAL_GPIO_Init+0x1fa>
 80085e8:	2303      	movs	r3, #3
 80085ea:	e004      	b.n	80085f6 <HAL_GPIO_Init+0x1fa>
 80085ec:	2302      	movs	r3, #2
 80085ee:	e002      	b.n	80085f6 <HAL_GPIO_Init+0x1fa>
 80085f0:	2301      	movs	r3, #1
 80085f2:	e000      	b.n	80085f6 <HAL_GPIO_Init+0x1fa>
 80085f4:	2300      	movs	r3, #0
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	f002 0203 	and.w	r2, r2, #3
 80085fc:	0092      	lsls	r2, r2, #2
 80085fe:	4093      	lsls	r3, r2
 8008600:	693a      	ldr	r2, [r7, #16]
 8008602:	4313      	orrs	r3, r2
 8008604:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008606:	4937      	ldr	r1, [pc, #220]	@ (80086e4 <HAL_GPIO_Init+0x2e8>)
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	089b      	lsrs	r3, r3, #2
 800860c:	3302      	adds	r3, #2
 800860e:	693a      	ldr	r2, [r7, #16]
 8008610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008614:	4b39      	ldr	r3, [pc, #228]	@ (80086fc <HAL_GPIO_Init+0x300>)
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	43db      	mvns	r3, r3
 800861e:	693a      	ldr	r2, [r7, #16]
 8008620:	4013      	ands	r3, r2
 8008622:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800862c:	2b00      	cmp	r3, #0
 800862e:	d003      	beq.n	8008638 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008630:	693a      	ldr	r2, [r7, #16]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	4313      	orrs	r3, r2
 8008636:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008638:	4a30      	ldr	r2, [pc, #192]	@ (80086fc <HAL_GPIO_Init+0x300>)
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800863e:	4b2f      	ldr	r3, [pc, #188]	@ (80086fc <HAL_GPIO_Init+0x300>)
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	43db      	mvns	r3, r3
 8008648:	693a      	ldr	r2, [r7, #16]
 800864a:	4013      	ands	r3, r2
 800864c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d003      	beq.n	8008662 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800865a:	693a      	ldr	r2, [r7, #16]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	4313      	orrs	r3, r2
 8008660:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008662:	4a26      	ldr	r2, [pc, #152]	@ (80086fc <HAL_GPIO_Init+0x300>)
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008668:	4b24      	ldr	r3, [pc, #144]	@ (80086fc <HAL_GPIO_Init+0x300>)
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	43db      	mvns	r3, r3
 8008672:	693a      	ldr	r2, [r7, #16]
 8008674:	4013      	ands	r3, r2
 8008676:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008680:	2b00      	cmp	r3, #0
 8008682:	d003      	beq.n	800868c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008684:	693a      	ldr	r2, [r7, #16]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	4313      	orrs	r3, r2
 800868a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800868c:	4a1b      	ldr	r2, [pc, #108]	@ (80086fc <HAL_GPIO_Init+0x300>)
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008692:	4b1a      	ldr	r3, [pc, #104]	@ (80086fc <HAL_GPIO_Init+0x300>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	43db      	mvns	r3, r3
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	4013      	ands	r3, r2
 80086a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d003      	beq.n	80086b6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80086ae:	693a      	ldr	r2, [r7, #16]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80086b6:	4a11      	ldr	r2, [pc, #68]	@ (80086fc <HAL_GPIO_Init+0x300>)
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	3301      	adds	r3, #1
 80086c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	fa22 f303 	lsr.w	r3, r2, r3
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f47f ae9d 	bne.w	800840c <HAL_GPIO_Init+0x10>
  }
}
 80086d2:	bf00      	nop
 80086d4:	bf00      	nop
 80086d6:	371c      	adds	r7, #28
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr
 80086e0:	40021000 	.word	0x40021000
 80086e4:	40010000 	.word	0x40010000
 80086e8:	48000400 	.word	0x48000400
 80086ec:	48000800 	.word	0x48000800
 80086f0:	48000c00 	.word	0x48000c00
 80086f4:	48001000 	.word	0x48001000
 80086f8:	48001400 	.word	0x48001400
 80086fc:	40010400 	.word	0x40010400

08008700 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	460b      	mov	r3, r1
 800870a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	691a      	ldr	r2, [r3, #16]
 8008710:	887b      	ldrh	r3, [r7, #2]
 8008712:	4013      	ands	r3, r2
 8008714:	2b00      	cmp	r3, #0
 8008716:	d002      	beq.n	800871e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008718:	2301      	movs	r3, #1
 800871a:	73fb      	strb	r3, [r7, #15]
 800871c:	e001      	b.n	8008722 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800871e:	2300      	movs	r3, #0
 8008720:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008722:	7bfb      	ldrb	r3, [r7, #15]
}
 8008724:	4618      	mov	r0, r3
 8008726:	3714      	adds	r7, #20
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	460b      	mov	r3, r1
 800873a:	807b      	strh	r3, [r7, #2]
 800873c:	4613      	mov	r3, r2
 800873e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008740:	787b      	ldrb	r3, [r7, #1]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d003      	beq.n	800874e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008746:	887a      	ldrh	r2, [r7, #2]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800874c:	e002      	b.n	8008754 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800874e:	887a      	ldrh	r2, [r7, #2]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008754:	bf00      	nop
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	4603      	mov	r3, r0
 8008768:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800876a:	4b08      	ldr	r3, [pc, #32]	@ (800878c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800876c:	695a      	ldr	r2, [r3, #20]
 800876e:	88fb      	ldrh	r3, [r7, #6]
 8008770:	4013      	ands	r3, r2
 8008772:	2b00      	cmp	r3, #0
 8008774:	d006      	beq.n	8008784 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008776:	4a05      	ldr	r2, [pc, #20]	@ (800878c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008778:	88fb      	ldrh	r3, [r7, #6]
 800877a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800877c:	88fb      	ldrh	r3, [r7, #6]
 800877e:	4618      	mov	r0, r3
 8008780:	f7fc f992 	bl	8004aa8 <HAL_GPIO_EXTI_Callback>
  }
}
 8008784:	bf00      	nop
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	40010400 	.word	0x40010400

08008790 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d141      	bne.n	8008822 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800879e:	4b4b      	ldr	r3, [pc, #300]	@ (80088cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80087a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087aa:	d131      	bne.n	8008810 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80087ac:	4b47      	ldr	r3, [pc, #284]	@ (80088cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087b2:	4a46      	ldr	r2, [pc, #280]	@ (80088cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80087bc:	4b43      	ldr	r3, [pc, #268]	@ (80088cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80087c4:	4a41      	ldr	r2, [pc, #260]	@ (80088cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80087ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80087cc:	4b40      	ldr	r3, [pc, #256]	@ (80088d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2232      	movs	r2, #50	@ 0x32
 80087d2:	fb02 f303 	mul.w	r3, r2, r3
 80087d6:	4a3f      	ldr	r2, [pc, #252]	@ (80088d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80087d8:	fba2 2303 	umull	r2, r3, r2, r3
 80087dc:	0c9b      	lsrs	r3, r3, #18
 80087de:	3301      	adds	r3, #1
 80087e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80087e2:	e002      	b.n	80087ea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	3b01      	subs	r3, #1
 80087e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80087ea:	4b38      	ldr	r3, [pc, #224]	@ (80088cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087ec:	695b      	ldr	r3, [r3, #20]
 80087ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087f6:	d102      	bne.n	80087fe <HAL_PWREx_ControlVoltageScaling+0x6e>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1f2      	bne.n	80087e4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80087fe:	4b33      	ldr	r3, [pc, #204]	@ (80088cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008800:	695b      	ldr	r3, [r3, #20]
 8008802:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008806:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800880a:	d158      	bne.n	80088be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800880c:	2303      	movs	r3, #3
 800880e:	e057      	b.n	80088c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008810:	4b2e      	ldr	r3, [pc, #184]	@ (80088cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008816:	4a2d      	ldr	r2, [pc, #180]	@ (80088cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008818:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800881c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008820:	e04d      	b.n	80088be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008828:	d141      	bne.n	80088ae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800882a:	4b28      	ldr	r3, [pc, #160]	@ (80088cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008832:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008836:	d131      	bne.n	800889c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008838:	4b24      	ldr	r3, [pc, #144]	@ (80088cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800883a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800883e:	4a23      	ldr	r2, [pc, #140]	@ (80088cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008840:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008844:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008848:	4b20      	ldr	r3, [pc, #128]	@ (80088cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008850:	4a1e      	ldr	r2, [pc, #120]	@ (80088cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008852:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008856:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008858:	4b1d      	ldr	r3, [pc, #116]	@ (80088d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2232      	movs	r2, #50	@ 0x32
 800885e:	fb02 f303 	mul.w	r3, r2, r3
 8008862:	4a1c      	ldr	r2, [pc, #112]	@ (80088d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008864:	fba2 2303 	umull	r2, r3, r2, r3
 8008868:	0c9b      	lsrs	r3, r3, #18
 800886a:	3301      	adds	r3, #1
 800886c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800886e:	e002      	b.n	8008876 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	3b01      	subs	r3, #1
 8008874:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008876:	4b15      	ldr	r3, [pc, #84]	@ (80088cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008878:	695b      	ldr	r3, [r3, #20]
 800887a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800887e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008882:	d102      	bne.n	800888a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1f2      	bne.n	8008870 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800888a:	4b10      	ldr	r3, [pc, #64]	@ (80088cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800888c:	695b      	ldr	r3, [r3, #20]
 800888e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008892:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008896:	d112      	bne.n	80088be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008898:	2303      	movs	r3, #3
 800889a:	e011      	b.n	80088c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800889c:	4b0b      	ldr	r3, [pc, #44]	@ (80088cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800889e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088a2:	4a0a      	ldr	r2, [pc, #40]	@ (80088cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80088ac:	e007      	b.n	80088be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80088ae:	4b07      	ldr	r3, [pc, #28]	@ (80088cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80088b6:	4a05      	ldr	r2, [pc, #20]	@ (80088cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80088b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80088bc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3714      	adds	r7, #20
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr
 80088cc:	40007000 	.word	0x40007000
 80088d0:	20000288 	.word	0x20000288
 80088d4:	431bde83 	.word	0x431bde83

080088d8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80088d8:	b480      	push	{r7}
 80088da:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80088dc:	4b05      	ldr	r3, [pc, #20]	@ (80088f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	4a04      	ldr	r2, [pc, #16]	@ (80088f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80088e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80088e6:	6093      	str	r3, [r2, #8]
}
 80088e8:	bf00      	nop
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	40007000 	.word	0x40007000

080088f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b088      	sub	sp, #32
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d101      	bne.n	800890a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e2fe      	b.n	8008f08 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	d075      	beq.n	8008a02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008916:	4b97      	ldr	r3, [pc, #604]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	f003 030c 	and.w	r3, r3, #12
 800891e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008920:	4b94      	ldr	r3, [pc, #592]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	f003 0303 	and.w	r3, r3, #3
 8008928:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	2b0c      	cmp	r3, #12
 800892e:	d102      	bne.n	8008936 <HAL_RCC_OscConfig+0x3e>
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	2b03      	cmp	r3, #3
 8008934:	d002      	beq.n	800893c <HAL_RCC_OscConfig+0x44>
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	2b08      	cmp	r3, #8
 800893a:	d10b      	bne.n	8008954 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800893c:	4b8d      	ldr	r3, [pc, #564]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008944:	2b00      	cmp	r3, #0
 8008946:	d05b      	beq.n	8008a00 <HAL_RCC_OscConfig+0x108>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d157      	bne.n	8008a00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	e2d9      	b.n	8008f08 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800895c:	d106      	bne.n	800896c <HAL_RCC_OscConfig+0x74>
 800895e:	4b85      	ldr	r3, [pc, #532]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a84      	ldr	r2, [pc, #528]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 8008964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008968:	6013      	str	r3, [r2, #0]
 800896a:	e01d      	b.n	80089a8 <HAL_RCC_OscConfig+0xb0>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008974:	d10c      	bne.n	8008990 <HAL_RCC_OscConfig+0x98>
 8008976:	4b7f      	ldr	r3, [pc, #508]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a7e      	ldr	r2, [pc, #504]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 800897c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008980:	6013      	str	r3, [r2, #0]
 8008982:	4b7c      	ldr	r3, [pc, #496]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a7b      	ldr	r2, [pc, #492]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 8008988:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800898c:	6013      	str	r3, [r2, #0]
 800898e:	e00b      	b.n	80089a8 <HAL_RCC_OscConfig+0xb0>
 8008990:	4b78      	ldr	r3, [pc, #480]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a77      	ldr	r2, [pc, #476]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 8008996:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800899a:	6013      	str	r3, [r2, #0]
 800899c:	4b75      	ldr	r3, [pc, #468]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a74      	ldr	r2, [pc, #464]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 80089a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80089a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d013      	beq.n	80089d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089b0:	f7fd fab4 	bl	8005f1c <HAL_GetTick>
 80089b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80089b6:	e008      	b.n	80089ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089b8:	f7fd fab0 	bl	8005f1c <HAL_GetTick>
 80089bc:	4602      	mov	r2, r0
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	2b64      	cmp	r3, #100	@ 0x64
 80089c4:	d901      	bls.n	80089ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80089c6:	2303      	movs	r3, #3
 80089c8:	e29e      	b.n	8008f08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80089ca:	4b6a      	ldr	r3, [pc, #424]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d0f0      	beq.n	80089b8 <HAL_RCC_OscConfig+0xc0>
 80089d6:	e014      	b.n	8008a02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089d8:	f7fd faa0 	bl	8005f1c <HAL_GetTick>
 80089dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80089de:	e008      	b.n	80089f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089e0:	f7fd fa9c 	bl	8005f1c <HAL_GetTick>
 80089e4:	4602      	mov	r2, r0
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	2b64      	cmp	r3, #100	@ 0x64
 80089ec:	d901      	bls.n	80089f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e28a      	b.n	8008f08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80089f2:	4b60      	ldr	r3, [pc, #384]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d1f0      	bne.n	80089e0 <HAL_RCC_OscConfig+0xe8>
 80089fe:	e000      	b.n	8008a02 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f003 0302 	and.w	r3, r3, #2
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d075      	beq.n	8008afa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a0e:	4b59      	ldr	r3, [pc, #356]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	f003 030c 	and.w	r3, r3, #12
 8008a16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008a18:	4b56      	ldr	r3, [pc, #344]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	f003 0303 	and.w	r3, r3, #3
 8008a20:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	2b0c      	cmp	r3, #12
 8008a26:	d102      	bne.n	8008a2e <HAL_RCC_OscConfig+0x136>
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d002      	beq.n	8008a34 <HAL_RCC_OscConfig+0x13c>
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	2b04      	cmp	r3, #4
 8008a32:	d11f      	bne.n	8008a74 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a34:	4b4f      	ldr	r3, [pc, #316]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d005      	beq.n	8008a4c <HAL_RCC_OscConfig+0x154>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d101      	bne.n	8008a4c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e25d      	b.n	8008f08 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a4c:	4b49      	ldr	r3, [pc, #292]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	061b      	lsls	r3, r3, #24
 8008a5a:	4946      	ldr	r1, [pc, #280]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008a60:	4b45      	ldr	r3, [pc, #276]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7fd fa0d 	bl	8005e84 <HAL_InitTick>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d043      	beq.n	8008af8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e249      	b.n	8008f08 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d023      	beq.n	8008ac4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a7c:	4b3d      	ldr	r3, [pc, #244]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a3c      	ldr	r2, [pc, #240]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 8008a82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a88:	f7fd fa48 	bl	8005f1c <HAL_GetTick>
 8008a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a8e:	e008      	b.n	8008aa2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a90:	f7fd fa44 	bl	8005f1c <HAL_GetTick>
 8008a94:	4602      	mov	r2, r0
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	1ad3      	subs	r3, r2, r3
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d901      	bls.n	8008aa2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	e232      	b.n	8008f08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008aa2:	4b34      	ldr	r3, [pc, #208]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d0f0      	beq.n	8008a90 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008aae:	4b31      	ldr	r3, [pc, #196]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	061b      	lsls	r3, r3, #24
 8008abc:	492d      	ldr	r1, [pc, #180]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	604b      	str	r3, [r1, #4]
 8008ac2:	e01a      	b.n	8008afa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a2a      	ldr	r2, [pc, #168]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 8008aca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ad0:	f7fd fa24 	bl	8005f1c <HAL_GetTick>
 8008ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008ad6:	e008      	b.n	8008aea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ad8:	f7fd fa20 	bl	8005f1c <HAL_GetTick>
 8008adc:	4602      	mov	r2, r0
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	1ad3      	subs	r3, r2, r3
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d901      	bls.n	8008aea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	e20e      	b.n	8008f08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008aea:	4b22      	ldr	r3, [pc, #136]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d1f0      	bne.n	8008ad8 <HAL_RCC_OscConfig+0x1e0>
 8008af6:	e000      	b.n	8008afa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008af8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 0308 	and.w	r3, r3, #8
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d041      	beq.n	8008b8a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	695b      	ldr	r3, [r3, #20]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d01c      	beq.n	8008b48 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b0e:	4b19      	ldr	r3, [pc, #100]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 8008b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b14:	4a17      	ldr	r2, [pc, #92]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 8008b16:	f043 0301 	orr.w	r3, r3, #1
 8008b1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b1e:	f7fd f9fd 	bl	8005f1c <HAL_GetTick>
 8008b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008b24:	e008      	b.n	8008b38 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b26:	f7fd f9f9 	bl	8005f1c <HAL_GetTick>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	1ad3      	subs	r3, r2, r3
 8008b30:	2b02      	cmp	r3, #2
 8008b32:	d901      	bls.n	8008b38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008b34:	2303      	movs	r3, #3
 8008b36:	e1e7      	b.n	8008f08 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008b38:	4b0e      	ldr	r3, [pc, #56]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 8008b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b3e:	f003 0302 	and.w	r3, r3, #2
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d0ef      	beq.n	8008b26 <HAL_RCC_OscConfig+0x22e>
 8008b46:	e020      	b.n	8008b8a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b48:	4b0a      	ldr	r3, [pc, #40]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 8008b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b4e:	4a09      	ldr	r2, [pc, #36]	@ (8008b74 <HAL_RCC_OscConfig+0x27c>)
 8008b50:	f023 0301 	bic.w	r3, r3, #1
 8008b54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b58:	f7fd f9e0 	bl	8005f1c <HAL_GetTick>
 8008b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008b5e:	e00d      	b.n	8008b7c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b60:	f7fd f9dc 	bl	8005f1c <HAL_GetTick>
 8008b64:	4602      	mov	r2, r0
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d906      	bls.n	8008b7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e1ca      	b.n	8008f08 <HAL_RCC_OscConfig+0x610>
 8008b72:	bf00      	nop
 8008b74:	40021000 	.word	0x40021000
 8008b78:	2000028c 	.word	0x2000028c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008b7c:	4b8c      	ldr	r3, [pc, #560]	@ (8008db0 <HAL_RCC_OscConfig+0x4b8>)
 8008b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b82:	f003 0302 	and.w	r3, r3, #2
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1ea      	bne.n	8008b60 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 0304 	and.w	r3, r3, #4
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	f000 80a6 	beq.w	8008ce4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008b9c:	4b84      	ldr	r3, [pc, #528]	@ (8008db0 <HAL_RCC_OscConfig+0x4b8>)
 8008b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ba0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d101      	bne.n	8008bac <HAL_RCC_OscConfig+0x2b4>
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e000      	b.n	8008bae <HAL_RCC_OscConfig+0x2b6>
 8008bac:	2300      	movs	r3, #0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00d      	beq.n	8008bce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008bb2:	4b7f      	ldr	r3, [pc, #508]	@ (8008db0 <HAL_RCC_OscConfig+0x4b8>)
 8008bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bb6:	4a7e      	ldr	r2, [pc, #504]	@ (8008db0 <HAL_RCC_OscConfig+0x4b8>)
 8008bb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008bbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bbe:	4b7c      	ldr	r3, [pc, #496]	@ (8008db0 <HAL_RCC_OscConfig+0x4b8>)
 8008bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bc6:	60fb      	str	r3, [r7, #12]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008bce:	4b79      	ldr	r3, [pc, #484]	@ (8008db4 <HAL_RCC_OscConfig+0x4bc>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d118      	bne.n	8008c0c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008bda:	4b76      	ldr	r3, [pc, #472]	@ (8008db4 <HAL_RCC_OscConfig+0x4bc>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a75      	ldr	r2, [pc, #468]	@ (8008db4 <HAL_RCC_OscConfig+0x4bc>)
 8008be0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008be4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008be6:	f7fd f999 	bl	8005f1c <HAL_GetTick>
 8008bea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008bec:	e008      	b.n	8008c00 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008bee:	f7fd f995 	bl	8005f1c <HAL_GetTick>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	1ad3      	subs	r3, r2, r3
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d901      	bls.n	8008c00 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008bfc:	2303      	movs	r3, #3
 8008bfe:	e183      	b.n	8008f08 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008c00:	4b6c      	ldr	r3, [pc, #432]	@ (8008db4 <HAL_RCC_OscConfig+0x4bc>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d0f0      	beq.n	8008bee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d108      	bne.n	8008c26 <HAL_RCC_OscConfig+0x32e>
 8008c14:	4b66      	ldr	r3, [pc, #408]	@ (8008db0 <HAL_RCC_OscConfig+0x4b8>)
 8008c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c1a:	4a65      	ldr	r2, [pc, #404]	@ (8008db0 <HAL_RCC_OscConfig+0x4b8>)
 8008c1c:	f043 0301 	orr.w	r3, r3, #1
 8008c20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008c24:	e024      	b.n	8008c70 <HAL_RCC_OscConfig+0x378>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	2b05      	cmp	r3, #5
 8008c2c:	d110      	bne.n	8008c50 <HAL_RCC_OscConfig+0x358>
 8008c2e:	4b60      	ldr	r3, [pc, #384]	@ (8008db0 <HAL_RCC_OscConfig+0x4b8>)
 8008c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c34:	4a5e      	ldr	r2, [pc, #376]	@ (8008db0 <HAL_RCC_OscConfig+0x4b8>)
 8008c36:	f043 0304 	orr.w	r3, r3, #4
 8008c3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008c3e:	4b5c      	ldr	r3, [pc, #368]	@ (8008db0 <HAL_RCC_OscConfig+0x4b8>)
 8008c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c44:	4a5a      	ldr	r2, [pc, #360]	@ (8008db0 <HAL_RCC_OscConfig+0x4b8>)
 8008c46:	f043 0301 	orr.w	r3, r3, #1
 8008c4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008c4e:	e00f      	b.n	8008c70 <HAL_RCC_OscConfig+0x378>
 8008c50:	4b57      	ldr	r3, [pc, #348]	@ (8008db0 <HAL_RCC_OscConfig+0x4b8>)
 8008c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c56:	4a56      	ldr	r2, [pc, #344]	@ (8008db0 <HAL_RCC_OscConfig+0x4b8>)
 8008c58:	f023 0301 	bic.w	r3, r3, #1
 8008c5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008c60:	4b53      	ldr	r3, [pc, #332]	@ (8008db0 <HAL_RCC_OscConfig+0x4b8>)
 8008c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c66:	4a52      	ldr	r2, [pc, #328]	@ (8008db0 <HAL_RCC_OscConfig+0x4b8>)
 8008c68:	f023 0304 	bic.w	r3, r3, #4
 8008c6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d016      	beq.n	8008ca6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c78:	f7fd f950 	bl	8005f1c <HAL_GetTick>
 8008c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c7e:	e00a      	b.n	8008c96 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c80:	f7fd f94c 	bl	8005f1c <HAL_GetTick>
 8008c84:	4602      	mov	r2, r0
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d901      	bls.n	8008c96 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008c92:	2303      	movs	r3, #3
 8008c94:	e138      	b.n	8008f08 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c96:	4b46      	ldr	r3, [pc, #280]	@ (8008db0 <HAL_RCC_OscConfig+0x4b8>)
 8008c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c9c:	f003 0302 	and.w	r3, r3, #2
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d0ed      	beq.n	8008c80 <HAL_RCC_OscConfig+0x388>
 8008ca4:	e015      	b.n	8008cd2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ca6:	f7fd f939 	bl	8005f1c <HAL_GetTick>
 8008caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008cac:	e00a      	b.n	8008cc4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cae:	f7fd f935 	bl	8005f1c <HAL_GetTick>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	1ad3      	subs	r3, r2, r3
 8008cb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d901      	bls.n	8008cc4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	e121      	b.n	8008f08 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008cc4:	4b3a      	ldr	r3, [pc, #232]	@ (8008db0 <HAL_RCC_OscConfig+0x4b8>)
 8008cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cca:	f003 0302 	and.w	r3, r3, #2
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d1ed      	bne.n	8008cae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008cd2:	7ffb      	ldrb	r3, [r7, #31]
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d105      	bne.n	8008ce4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008cd8:	4b35      	ldr	r3, [pc, #212]	@ (8008db0 <HAL_RCC_OscConfig+0x4b8>)
 8008cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cdc:	4a34      	ldr	r2, [pc, #208]	@ (8008db0 <HAL_RCC_OscConfig+0x4b8>)
 8008cde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ce2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 0320 	and.w	r3, r3, #32
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d03c      	beq.n	8008d6a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	699b      	ldr	r3, [r3, #24]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d01c      	beq.n	8008d32 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008cf8:	4b2d      	ldr	r3, [pc, #180]	@ (8008db0 <HAL_RCC_OscConfig+0x4b8>)
 8008cfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008cfe:	4a2c      	ldr	r2, [pc, #176]	@ (8008db0 <HAL_RCC_OscConfig+0x4b8>)
 8008d00:	f043 0301 	orr.w	r3, r3, #1
 8008d04:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d08:	f7fd f908 	bl	8005f1c <HAL_GetTick>
 8008d0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008d0e:	e008      	b.n	8008d22 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008d10:	f7fd f904 	bl	8005f1c <HAL_GetTick>
 8008d14:	4602      	mov	r2, r0
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d901      	bls.n	8008d22 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	e0f2      	b.n	8008f08 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008d22:	4b23      	ldr	r3, [pc, #140]	@ (8008db0 <HAL_RCC_OscConfig+0x4b8>)
 8008d24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008d28:	f003 0302 	and.w	r3, r3, #2
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d0ef      	beq.n	8008d10 <HAL_RCC_OscConfig+0x418>
 8008d30:	e01b      	b.n	8008d6a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008d32:	4b1f      	ldr	r3, [pc, #124]	@ (8008db0 <HAL_RCC_OscConfig+0x4b8>)
 8008d34:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008d38:	4a1d      	ldr	r2, [pc, #116]	@ (8008db0 <HAL_RCC_OscConfig+0x4b8>)
 8008d3a:	f023 0301 	bic.w	r3, r3, #1
 8008d3e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d42:	f7fd f8eb 	bl	8005f1c <HAL_GetTick>
 8008d46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008d48:	e008      	b.n	8008d5c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008d4a:	f7fd f8e7 	bl	8005f1c <HAL_GetTick>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	1ad3      	subs	r3, r2, r3
 8008d54:	2b02      	cmp	r3, #2
 8008d56:	d901      	bls.n	8008d5c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	e0d5      	b.n	8008f08 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008d5c:	4b14      	ldr	r3, [pc, #80]	@ (8008db0 <HAL_RCC_OscConfig+0x4b8>)
 8008d5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008d62:	f003 0302 	and.w	r3, r3, #2
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d1ef      	bne.n	8008d4a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	69db      	ldr	r3, [r3, #28]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	f000 80c9 	beq.w	8008f06 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008d74:	4b0e      	ldr	r3, [pc, #56]	@ (8008db0 <HAL_RCC_OscConfig+0x4b8>)
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	f003 030c 	and.w	r3, r3, #12
 8008d7c:	2b0c      	cmp	r3, #12
 8008d7e:	f000 8083 	beq.w	8008e88 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	69db      	ldr	r3, [r3, #28]
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	d15e      	bne.n	8008e48 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d8a:	4b09      	ldr	r3, [pc, #36]	@ (8008db0 <HAL_RCC_OscConfig+0x4b8>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a08      	ldr	r2, [pc, #32]	@ (8008db0 <HAL_RCC_OscConfig+0x4b8>)
 8008d90:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d96:	f7fd f8c1 	bl	8005f1c <HAL_GetTick>
 8008d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d9c:	e00c      	b.n	8008db8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d9e:	f7fd f8bd 	bl	8005f1c <HAL_GetTick>
 8008da2:	4602      	mov	r2, r0
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	1ad3      	subs	r3, r2, r3
 8008da8:	2b02      	cmp	r3, #2
 8008daa:	d905      	bls.n	8008db8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008dac:	2303      	movs	r3, #3
 8008dae:	e0ab      	b.n	8008f08 <HAL_RCC_OscConfig+0x610>
 8008db0:	40021000 	.word	0x40021000
 8008db4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008db8:	4b55      	ldr	r3, [pc, #340]	@ (8008f10 <HAL_RCC_OscConfig+0x618>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d1ec      	bne.n	8008d9e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008dc4:	4b52      	ldr	r3, [pc, #328]	@ (8008f10 <HAL_RCC_OscConfig+0x618>)
 8008dc6:	68da      	ldr	r2, [r3, #12]
 8008dc8:	4b52      	ldr	r3, [pc, #328]	@ (8008f14 <HAL_RCC_OscConfig+0x61c>)
 8008dca:	4013      	ands	r3, r2
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	6a11      	ldr	r1, [r2, #32]
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008dd4:	3a01      	subs	r2, #1
 8008dd6:	0112      	lsls	r2, r2, #4
 8008dd8:	4311      	orrs	r1, r2
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008dde:	0212      	lsls	r2, r2, #8
 8008de0:	4311      	orrs	r1, r2
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008de6:	0852      	lsrs	r2, r2, #1
 8008de8:	3a01      	subs	r2, #1
 8008dea:	0552      	lsls	r2, r2, #21
 8008dec:	4311      	orrs	r1, r2
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008df2:	0852      	lsrs	r2, r2, #1
 8008df4:	3a01      	subs	r2, #1
 8008df6:	0652      	lsls	r2, r2, #25
 8008df8:	4311      	orrs	r1, r2
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008dfe:	06d2      	lsls	r2, r2, #27
 8008e00:	430a      	orrs	r2, r1
 8008e02:	4943      	ldr	r1, [pc, #268]	@ (8008f10 <HAL_RCC_OscConfig+0x618>)
 8008e04:	4313      	orrs	r3, r2
 8008e06:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e08:	4b41      	ldr	r3, [pc, #260]	@ (8008f10 <HAL_RCC_OscConfig+0x618>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a40      	ldr	r2, [pc, #256]	@ (8008f10 <HAL_RCC_OscConfig+0x618>)
 8008e0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008e12:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008e14:	4b3e      	ldr	r3, [pc, #248]	@ (8008f10 <HAL_RCC_OscConfig+0x618>)
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	4a3d      	ldr	r2, [pc, #244]	@ (8008f10 <HAL_RCC_OscConfig+0x618>)
 8008e1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008e1e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e20:	f7fd f87c 	bl	8005f1c <HAL_GetTick>
 8008e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e26:	e008      	b.n	8008e3a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e28:	f7fd f878 	bl	8005f1c <HAL_GetTick>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d901      	bls.n	8008e3a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e066      	b.n	8008f08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e3a:	4b35      	ldr	r3, [pc, #212]	@ (8008f10 <HAL_RCC_OscConfig+0x618>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d0f0      	beq.n	8008e28 <HAL_RCC_OscConfig+0x530>
 8008e46:	e05e      	b.n	8008f06 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e48:	4b31      	ldr	r3, [pc, #196]	@ (8008f10 <HAL_RCC_OscConfig+0x618>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a30      	ldr	r2, [pc, #192]	@ (8008f10 <HAL_RCC_OscConfig+0x618>)
 8008e4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e54:	f7fd f862 	bl	8005f1c <HAL_GetTick>
 8008e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e5a:	e008      	b.n	8008e6e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e5c:	f7fd f85e 	bl	8005f1c <HAL_GetTick>
 8008e60:	4602      	mov	r2, r0
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d901      	bls.n	8008e6e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	e04c      	b.n	8008f08 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e6e:	4b28      	ldr	r3, [pc, #160]	@ (8008f10 <HAL_RCC_OscConfig+0x618>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d1f0      	bne.n	8008e5c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008e7a:	4b25      	ldr	r3, [pc, #148]	@ (8008f10 <HAL_RCC_OscConfig+0x618>)
 8008e7c:	68da      	ldr	r2, [r3, #12]
 8008e7e:	4924      	ldr	r1, [pc, #144]	@ (8008f10 <HAL_RCC_OscConfig+0x618>)
 8008e80:	4b25      	ldr	r3, [pc, #148]	@ (8008f18 <HAL_RCC_OscConfig+0x620>)
 8008e82:	4013      	ands	r3, r2
 8008e84:	60cb      	str	r3, [r1, #12]
 8008e86:	e03e      	b.n	8008f06 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	69db      	ldr	r3, [r3, #28]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d101      	bne.n	8008e94 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	e039      	b.n	8008f08 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008e94:	4b1e      	ldr	r3, [pc, #120]	@ (8008f10 <HAL_RCC_OscConfig+0x618>)
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	f003 0203 	and.w	r2, r3, #3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6a1b      	ldr	r3, [r3, #32]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d12c      	bne.n	8008f02 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d123      	bne.n	8008f02 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ec4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d11b      	bne.n	8008f02 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d113      	bne.n	8008f02 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ee4:	085b      	lsrs	r3, r3, #1
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d109      	bne.n	8008f02 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ef8:	085b      	lsrs	r3, r3, #1
 8008efa:	3b01      	subs	r3, #1
 8008efc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d001      	beq.n	8008f06 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	e000      	b.n	8008f08 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3720      	adds	r7, #32
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	40021000 	.word	0x40021000
 8008f14:	019f800c 	.word	0x019f800c
 8008f18:	feeefffc 	.word	0xfeeefffc

08008f1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b086      	sub	sp, #24
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008f26:	2300      	movs	r3, #0
 8008f28:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d101      	bne.n	8008f34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008f30:	2301      	movs	r3, #1
 8008f32:	e11e      	b.n	8009172 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008f34:	4b91      	ldr	r3, [pc, #580]	@ (800917c <HAL_RCC_ClockConfig+0x260>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 030f 	and.w	r3, r3, #15
 8008f3c:	683a      	ldr	r2, [r7, #0]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d910      	bls.n	8008f64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f42:	4b8e      	ldr	r3, [pc, #568]	@ (800917c <HAL_RCC_ClockConfig+0x260>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f023 020f 	bic.w	r2, r3, #15
 8008f4a:	498c      	ldr	r1, [pc, #560]	@ (800917c <HAL_RCC_ClockConfig+0x260>)
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f52:	4b8a      	ldr	r3, [pc, #552]	@ (800917c <HAL_RCC_ClockConfig+0x260>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 030f 	and.w	r3, r3, #15
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d001      	beq.n	8008f64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008f60:	2301      	movs	r3, #1
 8008f62:	e106      	b.n	8009172 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 0301 	and.w	r3, r3, #1
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d073      	beq.n	8009058 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	2b03      	cmp	r3, #3
 8008f76:	d129      	bne.n	8008fcc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f78:	4b81      	ldr	r3, [pc, #516]	@ (8009180 <HAL_RCC_ClockConfig+0x264>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d101      	bne.n	8008f88 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	e0f4      	b.n	8009172 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008f88:	f000 f99e 	bl	80092c8 <RCC_GetSysClockFreqFromPLLSource>
 8008f8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	4a7c      	ldr	r2, [pc, #496]	@ (8009184 <HAL_RCC_ClockConfig+0x268>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d93f      	bls.n	8009016 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008f96:	4b7a      	ldr	r3, [pc, #488]	@ (8009180 <HAL_RCC_ClockConfig+0x264>)
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d009      	beq.n	8008fb6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d033      	beq.n	8009016 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d12f      	bne.n	8009016 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008fb6:	4b72      	ldr	r3, [pc, #456]	@ (8009180 <HAL_RCC_ClockConfig+0x264>)
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008fbe:	4a70      	ldr	r2, [pc, #448]	@ (8009180 <HAL_RCC_ClockConfig+0x264>)
 8008fc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fc4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008fc6:	2380      	movs	r3, #128	@ 0x80
 8008fc8:	617b      	str	r3, [r7, #20]
 8008fca:	e024      	b.n	8009016 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	d107      	bne.n	8008fe4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008fd4:	4b6a      	ldr	r3, [pc, #424]	@ (8009180 <HAL_RCC_ClockConfig+0x264>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d109      	bne.n	8008ff4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e0c6      	b.n	8009172 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008fe4:	4b66      	ldr	r3, [pc, #408]	@ (8009180 <HAL_RCC_ClockConfig+0x264>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d101      	bne.n	8008ff4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e0be      	b.n	8009172 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008ff4:	f000 f8ce 	bl	8009194 <HAL_RCC_GetSysClockFreq>
 8008ff8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	4a61      	ldr	r2, [pc, #388]	@ (8009184 <HAL_RCC_ClockConfig+0x268>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d909      	bls.n	8009016 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009002:	4b5f      	ldr	r3, [pc, #380]	@ (8009180 <HAL_RCC_ClockConfig+0x264>)
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800900a:	4a5d      	ldr	r2, [pc, #372]	@ (8009180 <HAL_RCC_ClockConfig+0x264>)
 800900c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009010:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009012:	2380      	movs	r3, #128	@ 0x80
 8009014:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009016:	4b5a      	ldr	r3, [pc, #360]	@ (8009180 <HAL_RCC_ClockConfig+0x264>)
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	f023 0203 	bic.w	r2, r3, #3
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	4957      	ldr	r1, [pc, #348]	@ (8009180 <HAL_RCC_ClockConfig+0x264>)
 8009024:	4313      	orrs	r3, r2
 8009026:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009028:	f7fc ff78 	bl	8005f1c <HAL_GetTick>
 800902c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800902e:	e00a      	b.n	8009046 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009030:	f7fc ff74 	bl	8005f1c <HAL_GetTick>
 8009034:	4602      	mov	r2, r0
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800903e:	4293      	cmp	r3, r2
 8009040:	d901      	bls.n	8009046 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009042:	2303      	movs	r3, #3
 8009044:	e095      	b.n	8009172 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009046:	4b4e      	ldr	r3, [pc, #312]	@ (8009180 <HAL_RCC_ClockConfig+0x264>)
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	f003 020c 	and.w	r2, r3, #12
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	429a      	cmp	r2, r3
 8009056:	d1eb      	bne.n	8009030 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 0302 	and.w	r3, r3, #2
 8009060:	2b00      	cmp	r3, #0
 8009062:	d023      	beq.n	80090ac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f003 0304 	and.w	r3, r3, #4
 800906c:	2b00      	cmp	r3, #0
 800906e:	d005      	beq.n	800907c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009070:	4b43      	ldr	r3, [pc, #268]	@ (8009180 <HAL_RCC_ClockConfig+0x264>)
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	4a42      	ldr	r2, [pc, #264]	@ (8009180 <HAL_RCC_ClockConfig+0x264>)
 8009076:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800907a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 0308 	and.w	r3, r3, #8
 8009084:	2b00      	cmp	r3, #0
 8009086:	d007      	beq.n	8009098 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009088:	4b3d      	ldr	r3, [pc, #244]	@ (8009180 <HAL_RCC_ClockConfig+0x264>)
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009090:	4a3b      	ldr	r2, [pc, #236]	@ (8009180 <HAL_RCC_ClockConfig+0x264>)
 8009092:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009096:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009098:	4b39      	ldr	r3, [pc, #228]	@ (8009180 <HAL_RCC_ClockConfig+0x264>)
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	4936      	ldr	r1, [pc, #216]	@ (8009180 <HAL_RCC_ClockConfig+0x264>)
 80090a6:	4313      	orrs	r3, r2
 80090a8:	608b      	str	r3, [r1, #8]
 80090aa:	e008      	b.n	80090be <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	2b80      	cmp	r3, #128	@ 0x80
 80090b0:	d105      	bne.n	80090be <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80090b2:	4b33      	ldr	r3, [pc, #204]	@ (8009180 <HAL_RCC_ClockConfig+0x264>)
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	4a32      	ldr	r2, [pc, #200]	@ (8009180 <HAL_RCC_ClockConfig+0x264>)
 80090b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80090bc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80090be:	4b2f      	ldr	r3, [pc, #188]	@ (800917c <HAL_RCC_ClockConfig+0x260>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f003 030f 	and.w	r3, r3, #15
 80090c6:	683a      	ldr	r2, [r7, #0]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d21d      	bcs.n	8009108 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090cc:	4b2b      	ldr	r3, [pc, #172]	@ (800917c <HAL_RCC_ClockConfig+0x260>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f023 020f 	bic.w	r2, r3, #15
 80090d4:	4929      	ldr	r1, [pc, #164]	@ (800917c <HAL_RCC_ClockConfig+0x260>)
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	4313      	orrs	r3, r2
 80090da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80090dc:	f7fc ff1e 	bl	8005f1c <HAL_GetTick>
 80090e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090e2:	e00a      	b.n	80090fa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090e4:	f7fc ff1a 	bl	8005f1c <HAL_GetTick>
 80090e8:	4602      	mov	r2, r0
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	1ad3      	subs	r3, r2, r3
 80090ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d901      	bls.n	80090fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80090f6:	2303      	movs	r3, #3
 80090f8:	e03b      	b.n	8009172 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090fa:	4b20      	ldr	r3, [pc, #128]	@ (800917c <HAL_RCC_ClockConfig+0x260>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f003 030f 	and.w	r3, r3, #15
 8009102:	683a      	ldr	r2, [r7, #0]
 8009104:	429a      	cmp	r2, r3
 8009106:	d1ed      	bne.n	80090e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 0304 	and.w	r3, r3, #4
 8009110:	2b00      	cmp	r3, #0
 8009112:	d008      	beq.n	8009126 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009114:	4b1a      	ldr	r3, [pc, #104]	@ (8009180 <HAL_RCC_ClockConfig+0x264>)
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	4917      	ldr	r1, [pc, #92]	@ (8009180 <HAL_RCC_ClockConfig+0x264>)
 8009122:	4313      	orrs	r3, r2
 8009124:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 0308 	and.w	r3, r3, #8
 800912e:	2b00      	cmp	r3, #0
 8009130:	d009      	beq.n	8009146 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009132:	4b13      	ldr	r3, [pc, #76]	@ (8009180 <HAL_RCC_ClockConfig+0x264>)
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	691b      	ldr	r3, [r3, #16]
 800913e:	00db      	lsls	r3, r3, #3
 8009140:	490f      	ldr	r1, [pc, #60]	@ (8009180 <HAL_RCC_ClockConfig+0x264>)
 8009142:	4313      	orrs	r3, r2
 8009144:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009146:	f000 f825 	bl	8009194 <HAL_RCC_GetSysClockFreq>
 800914a:	4602      	mov	r2, r0
 800914c:	4b0c      	ldr	r3, [pc, #48]	@ (8009180 <HAL_RCC_ClockConfig+0x264>)
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	091b      	lsrs	r3, r3, #4
 8009152:	f003 030f 	and.w	r3, r3, #15
 8009156:	490c      	ldr	r1, [pc, #48]	@ (8009188 <HAL_RCC_ClockConfig+0x26c>)
 8009158:	5ccb      	ldrb	r3, [r1, r3]
 800915a:	f003 031f 	and.w	r3, r3, #31
 800915e:	fa22 f303 	lsr.w	r3, r2, r3
 8009162:	4a0a      	ldr	r2, [pc, #40]	@ (800918c <HAL_RCC_ClockConfig+0x270>)
 8009164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009166:	4b0a      	ldr	r3, [pc, #40]	@ (8009190 <HAL_RCC_ClockConfig+0x274>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4618      	mov	r0, r3
 800916c:	f7fc fe8a 	bl	8005e84 <HAL_InitTick>
 8009170:	4603      	mov	r3, r0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3718      	adds	r7, #24
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	40022000 	.word	0x40022000
 8009180:	40021000 	.word	0x40021000
 8009184:	04c4b400 	.word	0x04c4b400
 8009188:	0800e87c 	.word	0x0800e87c
 800918c:	20000288 	.word	0x20000288
 8009190:	2000028c 	.word	0x2000028c

08009194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009194:	b480      	push	{r7}
 8009196:	b087      	sub	sp, #28
 8009198:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800919a:	4b2c      	ldr	r3, [pc, #176]	@ (800924c <HAL_RCC_GetSysClockFreq+0xb8>)
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	f003 030c 	and.w	r3, r3, #12
 80091a2:	2b04      	cmp	r3, #4
 80091a4:	d102      	bne.n	80091ac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80091a6:	4b2a      	ldr	r3, [pc, #168]	@ (8009250 <HAL_RCC_GetSysClockFreq+0xbc>)
 80091a8:	613b      	str	r3, [r7, #16]
 80091aa:	e047      	b.n	800923c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80091ac:	4b27      	ldr	r3, [pc, #156]	@ (800924c <HAL_RCC_GetSysClockFreq+0xb8>)
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	f003 030c 	and.w	r3, r3, #12
 80091b4:	2b08      	cmp	r3, #8
 80091b6:	d102      	bne.n	80091be <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80091b8:	4b26      	ldr	r3, [pc, #152]	@ (8009254 <HAL_RCC_GetSysClockFreq+0xc0>)
 80091ba:	613b      	str	r3, [r7, #16]
 80091bc:	e03e      	b.n	800923c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80091be:	4b23      	ldr	r3, [pc, #140]	@ (800924c <HAL_RCC_GetSysClockFreq+0xb8>)
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	f003 030c 	and.w	r3, r3, #12
 80091c6:	2b0c      	cmp	r3, #12
 80091c8:	d136      	bne.n	8009238 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80091ca:	4b20      	ldr	r3, [pc, #128]	@ (800924c <HAL_RCC_GetSysClockFreq+0xb8>)
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	f003 0303 	and.w	r3, r3, #3
 80091d2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80091d4:	4b1d      	ldr	r3, [pc, #116]	@ (800924c <HAL_RCC_GetSysClockFreq+0xb8>)
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	091b      	lsrs	r3, r3, #4
 80091da:	f003 030f 	and.w	r3, r3, #15
 80091de:	3301      	adds	r3, #1
 80091e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2b03      	cmp	r3, #3
 80091e6:	d10c      	bne.n	8009202 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80091e8:	4a1a      	ldr	r2, [pc, #104]	@ (8009254 <HAL_RCC_GetSysClockFreq+0xc0>)
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80091f0:	4a16      	ldr	r2, [pc, #88]	@ (800924c <HAL_RCC_GetSysClockFreq+0xb8>)
 80091f2:	68d2      	ldr	r2, [r2, #12]
 80091f4:	0a12      	lsrs	r2, r2, #8
 80091f6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80091fa:	fb02 f303 	mul.w	r3, r2, r3
 80091fe:	617b      	str	r3, [r7, #20]
      break;
 8009200:	e00c      	b.n	800921c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009202:	4a13      	ldr	r2, [pc, #76]	@ (8009250 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	fbb2 f3f3 	udiv	r3, r2, r3
 800920a:	4a10      	ldr	r2, [pc, #64]	@ (800924c <HAL_RCC_GetSysClockFreq+0xb8>)
 800920c:	68d2      	ldr	r2, [r2, #12]
 800920e:	0a12      	lsrs	r2, r2, #8
 8009210:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009214:	fb02 f303 	mul.w	r3, r2, r3
 8009218:	617b      	str	r3, [r7, #20]
      break;
 800921a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800921c:	4b0b      	ldr	r3, [pc, #44]	@ (800924c <HAL_RCC_GetSysClockFreq+0xb8>)
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	0e5b      	lsrs	r3, r3, #25
 8009222:	f003 0303 	and.w	r3, r3, #3
 8009226:	3301      	adds	r3, #1
 8009228:	005b      	lsls	r3, r3, #1
 800922a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800922c:	697a      	ldr	r2, [r7, #20]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	fbb2 f3f3 	udiv	r3, r2, r3
 8009234:	613b      	str	r3, [r7, #16]
 8009236:	e001      	b.n	800923c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009238:	2300      	movs	r3, #0
 800923a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800923c:	693b      	ldr	r3, [r7, #16]
}
 800923e:	4618      	mov	r0, r3
 8009240:	371c      	adds	r7, #28
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop
 800924c:	40021000 	.word	0x40021000
 8009250:	00f42400 	.word	0x00f42400
 8009254:	016e3600 	.word	0x016e3600

08009258 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009258:	b480      	push	{r7}
 800925a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800925c:	4b03      	ldr	r3, [pc, #12]	@ (800926c <HAL_RCC_GetHCLKFreq+0x14>)
 800925e:	681b      	ldr	r3, [r3, #0]
}
 8009260:	4618      	mov	r0, r3
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	20000288 	.word	0x20000288

08009270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009274:	f7ff fff0 	bl	8009258 <HAL_RCC_GetHCLKFreq>
 8009278:	4602      	mov	r2, r0
 800927a:	4b06      	ldr	r3, [pc, #24]	@ (8009294 <HAL_RCC_GetPCLK1Freq+0x24>)
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	0a1b      	lsrs	r3, r3, #8
 8009280:	f003 0307 	and.w	r3, r3, #7
 8009284:	4904      	ldr	r1, [pc, #16]	@ (8009298 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009286:	5ccb      	ldrb	r3, [r1, r3]
 8009288:	f003 031f 	and.w	r3, r3, #31
 800928c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009290:	4618      	mov	r0, r3
 8009292:	bd80      	pop	{r7, pc}
 8009294:	40021000 	.word	0x40021000
 8009298:	0800e88c 	.word	0x0800e88c

0800929c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80092a0:	f7ff ffda 	bl	8009258 <HAL_RCC_GetHCLKFreq>
 80092a4:	4602      	mov	r2, r0
 80092a6:	4b06      	ldr	r3, [pc, #24]	@ (80092c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	0adb      	lsrs	r3, r3, #11
 80092ac:	f003 0307 	and.w	r3, r3, #7
 80092b0:	4904      	ldr	r1, [pc, #16]	@ (80092c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80092b2:	5ccb      	ldrb	r3, [r1, r3]
 80092b4:	f003 031f 	and.w	r3, r3, #31
 80092b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80092bc:	4618      	mov	r0, r3
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	40021000 	.word	0x40021000
 80092c4:	0800e88c 	.word	0x0800e88c

080092c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b087      	sub	sp, #28
 80092cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80092ce:	4b1e      	ldr	r3, [pc, #120]	@ (8009348 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	f003 0303 	and.w	r3, r3, #3
 80092d6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80092d8:	4b1b      	ldr	r3, [pc, #108]	@ (8009348 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	091b      	lsrs	r3, r3, #4
 80092de:	f003 030f 	and.w	r3, r3, #15
 80092e2:	3301      	adds	r3, #1
 80092e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	2b03      	cmp	r3, #3
 80092ea:	d10c      	bne.n	8009306 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80092ec:	4a17      	ldr	r2, [pc, #92]	@ (800934c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80092f4:	4a14      	ldr	r2, [pc, #80]	@ (8009348 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80092f6:	68d2      	ldr	r2, [r2, #12]
 80092f8:	0a12      	lsrs	r2, r2, #8
 80092fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80092fe:	fb02 f303 	mul.w	r3, r2, r3
 8009302:	617b      	str	r3, [r7, #20]
    break;
 8009304:	e00c      	b.n	8009320 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009306:	4a12      	ldr	r2, [pc, #72]	@ (8009350 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	fbb2 f3f3 	udiv	r3, r2, r3
 800930e:	4a0e      	ldr	r2, [pc, #56]	@ (8009348 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009310:	68d2      	ldr	r2, [r2, #12]
 8009312:	0a12      	lsrs	r2, r2, #8
 8009314:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009318:	fb02 f303 	mul.w	r3, r2, r3
 800931c:	617b      	str	r3, [r7, #20]
    break;
 800931e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009320:	4b09      	ldr	r3, [pc, #36]	@ (8009348 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009322:	68db      	ldr	r3, [r3, #12]
 8009324:	0e5b      	lsrs	r3, r3, #25
 8009326:	f003 0303 	and.w	r3, r3, #3
 800932a:	3301      	adds	r3, #1
 800932c:	005b      	lsls	r3, r3, #1
 800932e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009330:	697a      	ldr	r2, [r7, #20]
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	fbb2 f3f3 	udiv	r3, r2, r3
 8009338:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800933a:	687b      	ldr	r3, [r7, #4]
}
 800933c:	4618      	mov	r0, r3
 800933e:	371c      	adds	r7, #28
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr
 8009348:	40021000 	.word	0x40021000
 800934c:	016e3600 	.word	0x016e3600
 8009350:	00f42400 	.word	0x00f42400

08009354 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b086      	sub	sp, #24
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800935c:	2300      	movs	r3, #0
 800935e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009360:	2300      	movs	r3, #0
 8009362:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800936c:	2b00      	cmp	r3, #0
 800936e:	f000 8098 	beq.w	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009372:	2300      	movs	r3, #0
 8009374:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009376:	4b43      	ldr	r3, [pc, #268]	@ (8009484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800937a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800937e:	2b00      	cmp	r3, #0
 8009380:	d10d      	bne.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009382:	4b40      	ldr	r3, [pc, #256]	@ (8009484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009386:	4a3f      	ldr	r2, [pc, #252]	@ (8009484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800938c:	6593      	str	r3, [r2, #88]	@ 0x58
 800938e:	4b3d      	ldr	r3, [pc, #244]	@ (8009484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009396:	60bb      	str	r3, [r7, #8]
 8009398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800939a:	2301      	movs	r3, #1
 800939c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800939e:	4b3a      	ldr	r3, [pc, #232]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a39      	ldr	r2, [pc, #228]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80093a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80093aa:	f7fc fdb7 	bl	8005f1c <HAL_GetTick>
 80093ae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093b0:	e009      	b.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093b2:	f7fc fdb3 	bl	8005f1c <HAL_GetTick>
 80093b6:	4602      	mov	r2, r0
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	1ad3      	subs	r3, r2, r3
 80093bc:	2b02      	cmp	r3, #2
 80093be:	d902      	bls.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80093c0:	2303      	movs	r3, #3
 80093c2:	74fb      	strb	r3, [r7, #19]
        break;
 80093c4:	e005      	b.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093c6:	4b30      	ldr	r3, [pc, #192]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d0ef      	beq.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80093d2:	7cfb      	ldrb	r3, [r7, #19]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d159      	bne.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80093d8:	4b2a      	ldr	r3, [pc, #168]	@ (8009484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093e2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d01e      	beq.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093ee:	697a      	ldr	r2, [r7, #20]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d019      	beq.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80093f4:	4b23      	ldr	r3, [pc, #140]	@ (8009484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009400:	4b20      	ldr	r3, [pc, #128]	@ (8009484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009406:	4a1f      	ldr	r2, [pc, #124]	@ (8009484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009408:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800940c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009410:	4b1c      	ldr	r3, [pc, #112]	@ (8009484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009416:	4a1b      	ldr	r2, [pc, #108]	@ (8009484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009418:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800941c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009420:	4a18      	ldr	r2, [pc, #96]	@ (8009484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	f003 0301 	and.w	r3, r3, #1
 800942e:	2b00      	cmp	r3, #0
 8009430:	d016      	beq.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009432:	f7fc fd73 	bl	8005f1c <HAL_GetTick>
 8009436:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009438:	e00b      	b.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800943a:	f7fc fd6f 	bl	8005f1c <HAL_GetTick>
 800943e:	4602      	mov	r2, r0
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	1ad3      	subs	r3, r2, r3
 8009444:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009448:	4293      	cmp	r3, r2
 800944a:	d902      	bls.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800944c:	2303      	movs	r3, #3
 800944e:	74fb      	strb	r3, [r7, #19]
            break;
 8009450:	e006      	b.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009452:	4b0c      	ldr	r3, [pc, #48]	@ (8009484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009454:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009458:	f003 0302 	and.w	r3, r3, #2
 800945c:	2b00      	cmp	r3, #0
 800945e:	d0ec      	beq.n	800943a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009460:	7cfb      	ldrb	r3, [r7, #19]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d10b      	bne.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009466:	4b07      	ldr	r3, [pc, #28]	@ (8009484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800946c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009474:	4903      	ldr	r1, [pc, #12]	@ (8009484 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009476:	4313      	orrs	r3, r2
 8009478:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800947c:	e008      	b.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800947e:	7cfb      	ldrb	r3, [r7, #19]
 8009480:	74bb      	strb	r3, [r7, #18]
 8009482:	e005      	b.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009484:	40021000 	.word	0x40021000
 8009488:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800948c:	7cfb      	ldrb	r3, [r7, #19]
 800948e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009490:	7c7b      	ldrb	r3, [r7, #17]
 8009492:	2b01      	cmp	r3, #1
 8009494:	d105      	bne.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009496:	4ba7      	ldr	r3, [pc, #668]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800949a:	4aa6      	ldr	r2, [pc, #664]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800949c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80094a0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f003 0301 	and.w	r3, r3, #1
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00a      	beq.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80094ae:	4ba1      	ldr	r3, [pc, #644]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094b4:	f023 0203 	bic.w	r2, r3, #3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	499d      	ldr	r1, [pc, #628]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094be:	4313      	orrs	r3, r2
 80094c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f003 0302 	and.w	r3, r3, #2
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d00a      	beq.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80094d0:	4b98      	ldr	r3, [pc, #608]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094d6:	f023 020c 	bic.w	r2, r3, #12
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	4995      	ldr	r1, [pc, #596]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094e0:	4313      	orrs	r3, r2
 80094e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f003 0304 	and.w	r3, r3, #4
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d00a      	beq.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80094f2:	4b90      	ldr	r3, [pc, #576]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094f8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	498c      	ldr	r1, [pc, #560]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009502:	4313      	orrs	r3, r2
 8009504:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 0308 	and.w	r3, r3, #8
 8009510:	2b00      	cmp	r3, #0
 8009512:	d00a      	beq.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009514:	4b87      	ldr	r3, [pc, #540]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800951a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	4984      	ldr	r1, [pc, #528]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009524:	4313      	orrs	r3, r2
 8009526:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f003 0310 	and.w	r3, r3, #16
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00a      	beq.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009536:	4b7f      	ldr	r3, [pc, #508]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800953c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	695b      	ldr	r3, [r3, #20]
 8009544:	497b      	ldr	r1, [pc, #492]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009546:	4313      	orrs	r3, r2
 8009548:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 0320 	and.w	r3, r3, #32
 8009554:	2b00      	cmp	r3, #0
 8009556:	d00a      	beq.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009558:	4b76      	ldr	r3, [pc, #472]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800955a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800955e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	699b      	ldr	r3, [r3, #24]
 8009566:	4973      	ldr	r1, [pc, #460]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009568:	4313      	orrs	r3, r2
 800956a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00a      	beq.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800957a:	4b6e      	ldr	r3, [pc, #440]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800957c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009580:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	69db      	ldr	r3, [r3, #28]
 8009588:	496a      	ldr	r1, [pc, #424]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800958a:	4313      	orrs	r3, r2
 800958c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009598:	2b00      	cmp	r3, #0
 800959a:	d00a      	beq.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800959c:	4b65      	ldr	r3, [pc, #404]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800959e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095a2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6a1b      	ldr	r3, [r3, #32]
 80095aa:	4962      	ldr	r1, [pc, #392]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095ac:	4313      	orrs	r3, r2
 80095ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d00a      	beq.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80095be:	4b5d      	ldr	r3, [pc, #372]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095cc:	4959      	ldr	r1, [pc, #356]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095ce:	4313      	orrs	r3, r2
 80095d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d00a      	beq.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80095e0:	4b54      	ldr	r3, [pc, #336]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80095e6:	f023 0203 	bic.w	r2, r3, #3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ee:	4951      	ldr	r1, [pc, #324]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095f0:	4313      	orrs	r3, r2
 80095f2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d00a      	beq.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009602:	4b4c      	ldr	r3, [pc, #304]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009608:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009610:	4948      	ldr	r1, [pc, #288]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009612:	4313      	orrs	r3, r2
 8009614:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009620:	2b00      	cmp	r3, #0
 8009622:	d015      	beq.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009624:	4b43      	ldr	r3, [pc, #268]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800962a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009632:	4940      	ldr	r1, [pc, #256]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009634:	4313      	orrs	r3, r2
 8009636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800963e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009642:	d105      	bne.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009644:	4b3b      	ldr	r3, [pc, #236]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	4a3a      	ldr	r2, [pc, #232]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800964a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800964e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009658:	2b00      	cmp	r3, #0
 800965a:	d015      	beq.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800965c:	4b35      	ldr	r3, [pc, #212]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800965e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009662:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800966a:	4932      	ldr	r1, [pc, #200]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800966c:	4313      	orrs	r3, r2
 800966e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009676:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800967a:	d105      	bne.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800967c:	4b2d      	ldr	r3, [pc, #180]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	4a2c      	ldr	r2, [pc, #176]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009682:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009686:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009690:	2b00      	cmp	r3, #0
 8009692:	d015      	beq.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009694:	4b27      	ldr	r3, [pc, #156]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800969a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096a2:	4924      	ldr	r1, [pc, #144]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096a4:	4313      	orrs	r3, r2
 80096a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80096b2:	d105      	bne.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80096b4:	4b1f      	ldr	r3, [pc, #124]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	4a1e      	ldr	r2, [pc, #120]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096be:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d015      	beq.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80096cc:	4b19      	ldr	r3, [pc, #100]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096da:	4916      	ldr	r1, [pc, #88]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096dc:	4313      	orrs	r3, r2
 80096de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096ea:	d105      	bne.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80096ec:	4b11      	ldr	r3, [pc, #68]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	4a10      	ldr	r2, [pc, #64]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096f6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009700:	2b00      	cmp	r3, #0
 8009702:	d019      	beq.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009704:	4b0b      	ldr	r3, [pc, #44]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800970a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009712:	4908      	ldr	r1, [pc, #32]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009714:	4313      	orrs	r3, r2
 8009716:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800971e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009722:	d109      	bne.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009724:	4b03      	ldr	r3, [pc, #12]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	4a02      	ldr	r2, [pc, #8]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800972a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800972e:	60d3      	str	r3, [r2, #12]
 8009730:	e002      	b.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009732:	bf00      	nop
 8009734:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009740:	2b00      	cmp	r3, #0
 8009742:	d015      	beq.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009744:	4b29      	ldr	r3, [pc, #164]	@ (80097ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800974a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009752:	4926      	ldr	r1, [pc, #152]	@ (80097ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009754:	4313      	orrs	r3, r2
 8009756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800975e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009762:	d105      	bne.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009764:	4b21      	ldr	r3, [pc, #132]	@ (80097ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	4a20      	ldr	r2, [pc, #128]	@ (80097ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800976a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800976e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009778:	2b00      	cmp	r3, #0
 800977a:	d015      	beq.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800977c:	4b1b      	ldr	r3, [pc, #108]	@ (80097ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800977e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009782:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800978a:	4918      	ldr	r1, [pc, #96]	@ (80097ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800978c:	4313      	orrs	r3, r2
 800978e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800979a:	d105      	bne.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800979c:	4b13      	ldr	r3, [pc, #76]	@ (80097ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	4a12      	ldr	r2, [pc, #72]	@ (80097ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80097a6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d015      	beq.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80097b4:	4b0d      	ldr	r3, [pc, #52]	@ (80097ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80097ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097c2:	490a      	ldr	r1, [pc, #40]	@ (80097ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097c4:	4313      	orrs	r3, r2
 80097c6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80097d2:	d105      	bne.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80097d4:	4b05      	ldr	r3, [pc, #20]	@ (80097ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	4a04      	ldr	r2, [pc, #16]	@ (80097ec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80097da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80097de:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80097e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3718      	adds	r7, #24
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	40021000 	.word	0x40021000

080097f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d101      	bne.n	8009802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80097fe:	2301      	movs	r3, #1
 8009800:	e054      	b.n	80098ac <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009808:	b2db      	uxtb	r3, r3
 800980a:	2b00      	cmp	r3, #0
 800980c:	d111      	bne.n	8009832 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2200      	movs	r2, #0
 8009812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f001 feec 	bl	800b5f4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009820:	2b00      	cmp	r3, #0
 8009822:	d102      	bne.n	800982a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4a23      	ldr	r2, [pc, #140]	@ (80098b4 <HAL_TIM_Base_Init+0xc4>)
 8009828:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2202      	movs	r2, #2
 8009836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	3304      	adds	r3, #4
 8009842:	4619      	mov	r1, r3
 8009844:	4610      	mov	r0, r2
 8009846:	f001 fa35 	bl	800acb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2201      	movs	r2, #1
 800984e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2201      	movs	r2, #1
 8009856:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2201      	movs	r2, #1
 800985e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2201      	movs	r2, #1
 8009866:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2201      	movs	r2, #1
 800986e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2201      	movs	r2, #1
 8009876:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2201      	movs	r2, #1
 800987e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2201      	movs	r2, #1
 8009886:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2201      	movs	r2, #1
 800988e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2201      	movs	r2, #1
 8009896:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2201      	movs	r2, #1
 800989e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2201      	movs	r2, #1
 80098a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3708      	adds	r7, #8
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	08005911 	.word	0x08005911

080098b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b085      	sub	sp, #20
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d001      	beq.n	80098d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	e04c      	b.n	800996a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2202      	movs	r2, #2
 80098d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a26      	ldr	r2, [pc, #152]	@ (8009978 <HAL_TIM_Base_Start+0xc0>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d022      	beq.n	8009928 <HAL_TIM_Base_Start+0x70>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098ea:	d01d      	beq.n	8009928 <HAL_TIM_Base_Start+0x70>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a22      	ldr	r2, [pc, #136]	@ (800997c <HAL_TIM_Base_Start+0xc4>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d018      	beq.n	8009928 <HAL_TIM_Base_Start+0x70>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a21      	ldr	r2, [pc, #132]	@ (8009980 <HAL_TIM_Base_Start+0xc8>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d013      	beq.n	8009928 <HAL_TIM_Base_Start+0x70>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a1f      	ldr	r2, [pc, #124]	@ (8009984 <HAL_TIM_Base_Start+0xcc>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d00e      	beq.n	8009928 <HAL_TIM_Base_Start+0x70>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a1e      	ldr	r2, [pc, #120]	@ (8009988 <HAL_TIM_Base_Start+0xd0>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d009      	beq.n	8009928 <HAL_TIM_Base_Start+0x70>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a1c      	ldr	r2, [pc, #112]	@ (800998c <HAL_TIM_Base_Start+0xd4>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d004      	beq.n	8009928 <HAL_TIM_Base_Start+0x70>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a1b      	ldr	r2, [pc, #108]	@ (8009990 <HAL_TIM_Base_Start+0xd8>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d115      	bne.n	8009954 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	689a      	ldr	r2, [r3, #8]
 800992e:	4b19      	ldr	r3, [pc, #100]	@ (8009994 <HAL_TIM_Base_Start+0xdc>)
 8009930:	4013      	ands	r3, r2
 8009932:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2b06      	cmp	r3, #6
 8009938:	d015      	beq.n	8009966 <HAL_TIM_Base_Start+0xae>
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009940:	d011      	beq.n	8009966 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f042 0201 	orr.w	r2, r2, #1
 8009950:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009952:	e008      	b.n	8009966 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f042 0201 	orr.w	r2, r2, #1
 8009962:	601a      	str	r2, [r3, #0]
 8009964:	e000      	b.n	8009968 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009966:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	3714      	adds	r7, #20
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr
 8009976:	bf00      	nop
 8009978:	40012c00 	.word	0x40012c00
 800997c:	40000400 	.word	0x40000400
 8009980:	40000800 	.word	0x40000800
 8009984:	40000c00 	.word	0x40000c00
 8009988:	40013400 	.word	0x40013400
 800998c:	40014000 	.word	0x40014000
 8009990:	40015000 	.word	0x40015000
 8009994:	00010007 	.word	0x00010007

08009998 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d001      	beq.n	80099b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80099ac:	2301      	movs	r3, #1
 80099ae:	e054      	b.n	8009a5a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2202      	movs	r2, #2
 80099b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	68da      	ldr	r2, [r3, #12]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f042 0201 	orr.w	r2, r2, #1
 80099c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a26      	ldr	r2, [pc, #152]	@ (8009a68 <HAL_TIM_Base_Start_IT+0xd0>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d022      	beq.n	8009a18 <HAL_TIM_Base_Start_IT+0x80>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099da:	d01d      	beq.n	8009a18 <HAL_TIM_Base_Start_IT+0x80>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a22      	ldr	r2, [pc, #136]	@ (8009a6c <HAL_TIM_Base_Start_IT+0xd4>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d018      	beq.n	8009a18 <HAL_TIM_Base_Start_IT+0x80>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a21      	ldr	r2, [pc, #132]	@ (8009a70 <HAL_TIM_Base_Start_IT+0xd8>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d013      	beq.n	8009a18 <HAL_TIM_Base_Start_IT+0x80>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a1f      	ldr	r2, [pc, #124]	@ (8009a74 <HAL_TIM_Base_Start_IT+0xdc>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d00e      	beq.n	8009a18 <HAL_TIM_Base_Start_IT+0x80>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a1e      	ldr	r2, [pc, #120]	@ (8009a78 <HAL_TIM_Base_Start_IT+0xe0>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d009      	beq.n	8009a18 <HAL_TIM_Base_Start_IT+0x80>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a1c      	ldr	r2, [pc, #112]	@ (8009a7c <HAL_TIM_Base_Start_IT+0xe4>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d004      	beq.n	8009a18 <HAL_TIM_Base_Start_IT+0x80>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a1b      	ldr	r2, [pc, #108]	@ (8009a80 <HAL_TIM_Base_Start_IT+0xe8>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d115      	bne.n	8009a44 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	689a      	ldr	r2, [r3, #8]
 8009a1e:	4b19      	ldr	r3, [pc, #100]	@ (8009a84 <HAL_TIM_Base_Start_IT+0xec>)
 8009a20:	4013      	ands	r3, r2
 8009a22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2b06      	cmp	r3, #6
 8009a28:	d015      	beq.n	8009a56 <HAL_TIM_Base_Start_IT+0xbe>
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a30:	d011      	beq.n	8009a56 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f042 0201 	orr.w	r2, r2, #1
 8009a40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a42:	e008      	b.n	8009a56 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f042 0201 	orr.w	r2, r2, #1
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	e000      	b.n	8009a58 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3714      	adds	r7, #20
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr
 8009a66:	bf00      	nop
 8009a68:	40012c00 	.word	0x40012c00
 8009a6c:	40000400 	.word	0x40000400
 8009a70:	40000800 	.word	0x40000800
 8009a74:	40000c00 	.word	0x40000c00
 8009a78:	40013400 	.word	0x40013400
 8009a7c:	40014000 	.word	0x40014000
 8009a80:	40015000 	.word	0x40015000
 8009a84:	00010007 	.word	0x00010007

08009a88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d101      	bne.n	8009a9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	e054      	b.n	8009b44 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d111      	bne.n	8009aca <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f001 fda0 	bl	800b5f4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d102      	bne.n	8009ac2 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	4a23      	ldr	r2, [pc, #140]	@ (8009b4c <HAL_TIM_PWM_Init+0xc4>)
 8009ac0:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2202      	movs	r2, #2
 8009ace:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	3304      	adds	r3, #4
 8009ada:	4619      	mov	r1, r3
 8009adc:	4610      	mov	r0, r2
 8009ade:	f001 f8e9 	bl	800acb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2201      	movs	r2, #1
 8009aee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2201      	movs	r2, #1
 8009af6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2201      	movs	r2, #1
 8009afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2201      	movs	r2, #1
 8009b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2201      	movs	r2, #1
 8009b16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2201      	movs	r2, #1
 8009b26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2201      	movs	r2, #1
 8009b36:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009b42:	2300      	movs	r3, #0
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3708      	adds	r7, #8
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	08009b51 	.word	0x08009b51

08009b50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009b58:	bf00      	nop
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d109      	bne.n	8009b88 <HAL_TIM_PWM_Start+0x24>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	bf14      	ite	ne
 8009b80:	2301      	movne	r3, #1
 8009b82:	2300      	moveq	r3, #0
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	e03c      	b.n	8009c02 <HAL_TIM_PWM_Start+0x9e>
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	2b04      	cmp	r3, #4
 8009b8c:	d109      	bne.n	8009ba2 <HAL_TIM_PWM_Start+0x3e>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	bf14      	ite	ne
 8009b9a:	2301      	movne	r3, #1
 8009b9c:	2300      	moveq	r3, #0
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	e02f      	b.n	8009c02 <HAL_TIM_PWM_Start+0x9e>
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	2b08      	cmp	r3, #8
 8009ba6:	d109      	bne.n	8009bbc <HAL_TIM_PWM_Start+0x58>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	bf14      	ite	ne
 8009bb4:	2301      	movne	r3, #1
 8009bb6:	2300      	moveq	r3, #0
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	e022      	b.n	8009c02 <HAL_TIM_PWM_Start+0x9e>
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	2b0c      	cmp	r3, #12
 8009bc0:	d109      	bne.n	8009bd6 <HAL_TIM_PWM_Start+0x72>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	bf14      	ite	ne
 8009bce:	2301      	movne	r3, #1
 8009bd0:	2300      	moveq	r3, #0
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	e015      	b.n	8009c02 <HAL_TIM_PWM_Start+0x9e>
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	2b10      	cmp	r3, #16
 8009bda:	d109      	bne.n	8009bf0 <HAL_TIM_PWM_Start+0x8c>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	bf14      	ite	ne
 8009be8:	2301      	movne	r3, #1
 8009bea:	2300      	moveq	r3, #0
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	e008      	b.n	8009c02 <HAL_TIM_PWM_Start+0x9e>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	bf14      	ite	ne
 8009bfc:	2301      	movne	r3, #1
 8009bfe:	2300      	moveq	r3, #0
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d001      	beq.n	8009c0a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009c06:	2301      	movs	r3, #1
 8009c08:	e0a6      	b.n	8009d58 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d104      	bne.n	8009c1a <HAL_TIM_PWM_Start+0xb6>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2202      	movs	r2, #2
 8009c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c18:	e023      	b.n	8009c62 <HAL_TIM_PWM_Start+0xfe>
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	2b04      	cmp	r3, #4
 8009c1e:	d104      	bne.n	8009c2a <HAL_TIM_PWM_Start+0xc6>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2202      	movs	r2, #2
 8009c24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c28:	e01b      	b.n	8009c62 <HAL_TIM_PWM_Start+0xfe>
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	2b08      	cmp	r3, #8
 8009c2e:	d104      	bne.n	8009c3a <HAL_TIM_PWM_Start+0xd6>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2202      	movs	r2, #2
 8009c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c38:	e013      	b.n	8009c62 <HAL_TIM_PWM_Start+0xfe>
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	2b0c      	cmp	r3, #12
 8009c3e:	d104      	bne.n	8009c4a <HAL_TIM_PWM_Start+0xe6>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2202      	movs	r2, #2
 8009c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009c48:	e00b      	b.n	8009c62 <HAL_TIM_PWM_Start+0xfe>
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	2b10      	cmp	r3, #16
 8009c4e:	d104      	bne.n	8009c5a <HAL_TIM_PWM_Start+0xf6>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2202      	movs	r2, #2
 8009c54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009c58:	e003      	b.n	8009c62 <HAL_TIM_PWM_Start+0xfe>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2202      	movs	r2, #2
 8009c5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2201      	movs	r2, #1
 8009c68:	6839      	ldr	r1, [r7, #0]
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f001 fc9c 	bl	800b5a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a3a      	ldr	r2, [pc, #232]	@ (8009d60 <HAL_TIM_PWM_Start+0x1fc>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d018      	beq.n	8009cac <HAL_TIM_PWM_Start+0x148>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a39      	ldr	r2, [pc, #228]	@ (8009d64 <HAL_TIM_PWM_Start+0x200>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d013      	beq.n	8009cac <HAL_TIM_PWM_Start+0x148>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a37      	ldr	r2, [pc, #220]	@ (8009d68 <HAL_TIM_PWM_Start+0x204>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d00e      	beq.n	8009cac <HAL_TIM_PWM_Start+0x148>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a36      	ldr	r2, [pc, #216]	@ (8009d6c <HAL_TIM_PWM_Start+0x208>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d009      	beq.n	8009cac <HAL_TIM_PWM_Start+0x148>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a34      	ldr	r2, [pc, #208]	@ (8009d70 <HAL_TIM_PWM_Start+0x20c>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d004      	beq.n	8009cac <HAL_TIM_PWM_Start+0x148>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a33      	ldr	r2, [pc, #204]	@ (8009d74 <HAL_TIM_PWM_Start+0x210>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d101      	bne.n	8009cb0 <HAL_TIM_PWM_Start+0x14c>
 8009cac:	2301      	movs	r3, #1
 8009cae:	e000      	b.n	8009cb2 <HAL_TIM_PWM_Start+0x14e>
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d007      	beq.n	8009cc6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009cc4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a25      	ldr	r2, [pc, #148]	@ (8009d60 <HAL_TIM_PWM_Start+0x1fc>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d022      	beq.n	8009d16 <HAL_TIM_PWM_Start+0x1b2>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cd8:	d01d      	beq.n	8009d16 <HAL_TIM_PWM_Start+0x1b2>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a26      	ldr	r2, [pc, #152]	@ (8009d78 <HAL_TIM_PWM_Start+0x214>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d018      	beq.n	8009d16 <HAL_TIM_PWM_Start+0x1b2>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a24      	ldr	r2, [pc, #144]	@ (8009d7c <HAL_TIM_PWM_Start+0x218>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d013      	beq.n	8009d16 <HAL_TIM_PWM_Start+0x1b2>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a23      	ldr	r2, [pc, #140]	@ (8009d80 <HAL_TIM_PWM_Start+0x21c>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d00e      	beq.n	8009d16 <HAL_TIM_PWM_Start+0x1b2>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a19      	ldr	r2, [pc, #100]	@ (8009d64 <HAL_TIM_PWM_Start+0x200>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d009      	beq.n	8009d16 <HAL_TIM_PWM_Start+0x1b2>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a18      	ldr	r2, [pc, #96]	@ (8009d68 <HAL_TIM_PWM_Start+0x204>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d004      	beq.n	8009d16 <HAL_TIM_PWM_Start+0x1b2>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a18      	ldr	r2, [pc, #96]	@ (8009d74 <HAL_TIM_PWM_Start+0x210>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d115      	bne.n	8009d42 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	689a      	ldr	r2, [r3, #8]
 8009d1c:	4b19      	ldr	r3, [pc, #100]	@ (8009d84 <HAL_TIM_PWM_Start+0x220>)
 8009d1e:	4013      	ands	r3, r2
 8009d20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2b06      	cmp	r3, #6
 8009d26:	d015      	beq.n	8009d54 <HAL_TIM_PWM_Start+0x1f0>
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d2e:	d011      	beq.n	8009d54 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f042 0201 	orr.w	r2, r2, #1
 8009d3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d40:	e008      	b.n	8009d54 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f042 0201 	orr.w	r2, r2, #1
 8009d50:	601a      	str	r2, [r3, #0]
 8009d52:	e000      	b.n	8009d56 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d56:	2300      	movs	r3, #0
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3710      	adds	r7, #16
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	40012c00 	.word	0x40012c00
 8009d64:	40013400 	.word	0x40013400
 8009d68:	40014000 	.word	0x40014000
 8009d6c:	40014400 	.word	0x40014400
 8009d70:	40014800 	.word	0x40014800
 8009d74:	40015000 	.word	0x40015000
 8009d78:	40000400 	.word	0x40000400
 8009d7c:	40000800 	.word	0x40000800
 8009d80:	40000c00 	.word	0x40000c00
 8009d84:	00010007 	.word	0x00010007

08009d88 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d101      	bne.n	8009d9c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	e04c      	b.n	8009e36 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d111      	bne.n	8009dcc <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f001 fc1f 	bl	800b5f4 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d102      	bne.n	8009dc4 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	4a1f      	ldr	r2, [pc, #124]	@ (8009e40 <HAL_TIM_OnePulse_Init+0xb8>)
 8009dc2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2202      	movs	r2, #2
 8009dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	3304      	adds	r3, #4
 8009ddc:	4619      	mov	r1, r3
 8009dde:	4610      	mov	r0, r2
 8009de0:	f000 ff68 	bl	800acb4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f022 0208 	bic.w	r2, r2, #8
 8009df2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	6819      	ldr	r1, [r3, #0]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	683a      	ldr	r2, [r7, #0]
 8009e00:	430a      	orrs	r2, r1
 8009e02:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2201      	movs	r2, #1
 8009e08:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2201      	movs	r2, #1
 8009e18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2201      	movs	r2, #1
 8009e28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009e34:	2300      	movs	r3, #0
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3708      	adds	r7, #8
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	08009e45 	.word	0x08009e45

08009e44 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8009e4c:	bf00      	nop
 8009e4e:	370c      	adds	r7, #12
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009e68:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009e70:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e78:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009e80:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009e82:	7bfb      	ldrb	r3, [r7, #15]
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d108      	bne.n	8009e9a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009e88:	7bbb      	ldrb	r3, [r7, #14]
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d105      	bne.n	8009e9a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009e8e:	7b7b      	ldrb	r3, [r7, #13]
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d102      	bne.n	8009e9a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009e94:	7b3b      	ldrb	r3, [r7, #12]
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d001      	beq.n	8009e9e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e059      	b.n	8009f52 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2202      	movs	r2, #2
 8009ea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2202      	movs	r2, #2
 8009eaa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2202      	movs	r2, #2
 8009eb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2202      	movs	r2, #2
 8009eba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	68da      	ldr	r2, [r3, #12]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f042 0202 	orr.w	r2, r2, #2
 8009ecc:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	68da      	ldr	r2, [r3, #12]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f042 0204 	orr.w	r2, r2, #4
 8009edc:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	2100      	movs	r1, #0
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f001 fb5e 	bl	800b5a8 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	2104      	movs	r1, #4
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f001 fb57 	bl	800b5a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a17      	ldr	r2, [pc, #92]	@ (8009f5c <HAL_TIM_OnePulse_Start_IT+0x104>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d018      	beq.n	8009f36 <HAL_TIM_OnePulse_Start_IT+0xde>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a15      	ldr	r2, [pc, #84]	@ (8009f60 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d013      	beq.n	8009f36 <HAL_TIM_OnePulse_Start_IT+0xde>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a14      	ldr	r2, [pc, #80]	@ (8009f64 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d00e      	beq.n	8009f36 <HAL_TIM_OnePulse_Start_IT+0xde>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a12      	ldr	r2, [pc, #72]	@ (8009f68 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d009      	beq.n	8009f36 <HAL_TIM_OnePulse_Start_IT+0xde>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a11      	ldr	r2, [pc, #68]	@ (8009f6c <HAL_TIM_OnePulse_Start_IT+0x114>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d004      	beq.n	8009f36 <HAL_TIM_OnePulse_Start_IT+0xde>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a0f      	ldr	r2, [pc, #60]	@ (8009f70 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d101      	bne.n	8009f3a <HAL_TIM_OnePulse_Start_IT+0xe2>
 8009f36:	2301      	movs	r3, #1
 8009f38:	e000      	b.n	8009f3c <HAL_TIM_OnePulse_Start_IT+0xe4>
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d007      	beq.n	8009f50 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009f4e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3710      	adds	r7, #16
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	40012c00 	.word	0x40012c00
 8009f60:	40013400 	.word	0x40013400
 8009f64:	40014000 	.word	0x40014000
 8009f68:	40014400 	.word	0x40014400
 8009f6c:	40014800 	.word	0x40014800
 8009f70:	40015000 	.word	0x40015000

08009f74 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b086      	sub	sp, #24
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d101      	bne.n	8009f88 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	e0a2      	b.n	800a0ce <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d111      	bne.n	8009fb8 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2200      	movs	r2, #0
 8009f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f001 fb29 	bl	800b5f4 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d102      	bne.n	8009fb0 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	4a4a      	ldr	r2, [pc, #296]	@ (800a0d8 <HAL_TIM_Encoder_Init+0x164>)
 8009fae:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2202      	movs	r2, #2
 8009fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	689b      	ldr	r3, [r3, #8]
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	6812      	ldr	r2, [r2, #0]
 8009fca:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8009fce:	f023 0307 	bic.w	r3, r3, #7
 8009fd2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	3304      	adds	r3, #4
 8009fdc:	4619      	mov	r1, r3
 8009fde:	4610      	mov	r0, r2
 8009fe0:	f000 fe68 	bl	800acb4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	699b      	ldr	r3, [r3, #24]
 8009ff2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	6a1b      	ldr	r3, [r3, #32]
 8009ffa:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	697a      	ldr	r2, [r7, #20]
 800a002:	4313      	orrs	r3, r2
 800a004:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a00c:	f023 0303 	bic.w	r3, r3, #3
 800a010:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	689a      	ldr	r2, [r3, #8]
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	699b      	ldr	r3, [r3, #24]
 800a01a:	021b      	lsls	r3, r3, #8
 800a01c:	4313      	orrs	r3, r2
 800a01e:	693a      	ldr	r2, [r7, #16]
 800a020:	4313      	orrs	r3, r2
 800a022:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a02a:	f023 030c 	bic.w	r3, r3, #12
 800a02e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a036:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a03a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	68da      	ldr	r2, [r3, #12]
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	69db      	ldr	r3, [r3, #28]
 800a044:	021b      	lsls	r3, r3, #8
 800a046:	4313      	orrs	r3, r2
 800a048:	693a      	ldr	r2, [r7, #16]
 800a04a:	4313      	orrs	r3, r2
 800a04c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	011a      	lsls	r2, r3, #4
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	6a1b      	ldr	r3, [r3, #32]
 800a058:	031b      	lsls	r3, r3, #12
 800a05a:	4313      	orrs	r3, r2
 800a05c:	693a      	ldr	r2, [r7, #16]
 800a05e:	4313      	orrs	r3, r2
 800a060:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800a068:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800a070:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	685a      	ldr	r2, [r3, #4]
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	695b      	ldr	r3, [r3, #20]
 800a07a:	011b      	lsls	r3, r3, #4
 800a07c:	4313      	orrs	r3, r2
 800a07e:	68fa      	ldr	r2, [r7, #12]
 800a080:	4313      	orrs	r3, r2
 800a082:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	697a      	ldr	r2, [r7, #20]
 800a08a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	693a      	ldr	r2, [r7, #16]
 800a092:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	68fa      	ldr	r2, [r7, #12]
 800a09a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3718      	adds	r7, #24
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	08005a29 	.word	0x08005a29

0800a0dc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a0ec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a0f4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a0fc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a104:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d110      	bne.n	800a12e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a10c:	7bfb      	ldrb	r3, [r7, #15]
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d102      	bne.n	800a118 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a112:	7b7b      	ldrb	r3, [r7, #13]
 800a114:	2b01      	cmp	r3, #1
 800a116:	d001      	beq.n	800a11c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	e069      	b.n	800a1f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2202      	movs	r2, #2
 800a120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2202      	movs	r2, #2
 800a128:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a12c:	e031      	b.n	800a192 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	2b04      	cmp	r3, #4
 800a132:	d110      	bne.n	800a156 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a134:	7bbb      	ldrb	r3, [r7, #14]
 800a136:	2b01      	cmp	r3, #1
 800a138:	d102      	bne.n	800a140 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a13a:	7b3b      	ldrb	r3, [r7, #12]
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d001      	beq.n	800a144 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a140:	2301      	movs	r3, #1
 800a142:	e055      	b.n	800a1f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2202      	movs	r2, #2
 800a148:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2202      	movs	r2, #2
 800a150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a154:	e01d      	b.n	800a192 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a156:	7bfb      	ldrb	r3, [r7, #15]
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d108      	bne.n	800a16e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a15c:	7bbb      	ldrb	r3, [r7, #14]
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d105      	bne.n	800a16e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a162:	7b7b      	ldrb	r3, [r7, #13]
 800a164:	2b01      	cmp	r3, #1
 800a166:	d102      	bne.n	800a16e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a168:	7b3b      	ldrb	r3, [r7, #12]
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d001      	beq.n	800a172 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	e03e      	b.n	800a1f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2202      	movs	r2, #2
 800a176:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2202      	movs	r2, #2
 800a17e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2202      	movs	r2, #2
 800a186:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2202      	movs	r2, #2
 800a18e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d003      	beq.n	800a1a0 <HAL_TIM_Encoder_Start+0xc4>
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	2b04      	cmp	r3, #4
 800a19c:	d008      	beq.n	800a1b0 <HAL_TIM_Encoder_Start+0xd4>
 800a19e:	e00f      	b.n	800a1c0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f001 f9fd 	bl	800b5a8 <TIM_CCxChannelCmd>
      break;
 800a1ae:	e016      	b.n	800a1de <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	2104      	movs	r1, #4
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f001 f9f5 	bl	800b5a8 <TIM_CCxChannelCmd>
      break;
 800a1be:	e00e      	b.n	800a1de <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	2100      	movs	r1, #0
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f001 f9ed 	bl	800b5a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	2104      	movs	r1, #4
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f001 f9e6 	bl	800b5a8 <TIM_CCxChannelCmd>
      break;
 800a1dc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f042 0201 	orr.w	r2, r2, #1
 800a1ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a1ee:	2300      	movs	r3, #0
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3710      	adds	r7, #16
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	f003 0302 	and.w	r3, r3, #2
 800a216:	2b00      	cmp	r3, #0
 800a218:	d026      	beq.n	800a268 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f003 0302 	and.w	r3, r3, #2
 800a220:	2b00      	cmp	r3, #0
 800a222:	d021      	beq.n	800a268 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f06f 0202 	mvn.w	r2, #2
 800a22c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2201      	movs	r2, #1
 800a232:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	699b      	ldr	r3, [r3, #24]
 800a23a:	f003 0303 	and.w	r3, r3, #3
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d005      	beq.n	800a24e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	4798      	blx	r3
 800a24c:	e009      	b.n	800a262 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	f003 0304 	and.w	r3, r3, #4
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d026      	beq.n	800a2c0 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f003 0304 	and.w	r3, r3, #4
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d021      	beq.n	800a2c0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f06f 0204 	mvn.w	r2, #4
 800a284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2202      	movs	r2, #2
 800a28a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	699b      	ldr	r3, [r3, #24]
 800a292:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a296:	2b00      	cmp	r3, #0
 800a298:	d005      	beq.n	800a2a6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	4798      	blx	r3
 800a2a4:	e009      	b.n	800a2ba <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	f003 0308 	and.w	r3, r3, #8
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d026      	beq.n	800a318 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f003 0308 	and.w	r3, r3, #8
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d021      	beq.n	800a318 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f06f 0208 	mvn.w	r2, #8
 800a2dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2204      	movs	r2, #4
 800a2e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	69db      	ldr	r3, [r3, #28]
 800a2ea:	f003 0303 	and.w	r3, r3, #3
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d005      	beq.n	800a2fe <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	4798      	blx	r3
 800a2fc:	e009      	b.n	800a312 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2200      	movs	r2, #0
 800a316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	f003 0310 	and.w	r3, r3, #16
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d026      	beq.n	800a370 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f003 0310 	and.w	r3, r3, #16
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d021      	beq.n	800a370 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f06f 0210 	mvn.w	r2, #16
 800a334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2208      	movs	r2, #8
 800a33a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	69db      	ldr	r3, [r3, #28]
 800a342:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a346:	2b00      	cmp	r3, #0
 800a348:	d005      	beq.n	800a356 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	4798      	blx	r3
 800a354:	e009      	b.n	800a36a <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	f003 0301 	and.w	r3, r3, #1
 800a376:	2b00      	cmp	r3, #0
 800a378:	d00e      	beq.n	800a398 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f003 0301 	and.w	r3, r3, #1
 800a380:	2b00      	cmp	r3, #0
 800a382:	d009      	beq.n	800a398 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f06f 0201 	mvn.w	r2, #1
 800a38c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d104      	bne.n	800a3ac <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d00e      	beq.n	800a3ca <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d009      	beq.n	800a3ca <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a3be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d00e      	beq.n	800a3f2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d009      	beq.n	800a3f2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a3e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d00e      	beq.n	800a41a <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a402:	2b00      	cmp	r3, #0
 800a404:	d009      	beq.n	800a41a <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a40e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	f003 0320 	and.w	r3, r3, #32
 800a420:	2b00      	cmp	r3, #0
 800a422:	d00e      	beq.n	800a442 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f003 0320 	and.w	r3, r3, #32
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d009      	beq.n	800a442 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f06f 0220 	mvn.w	r2, #32
 800a436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00e      	beq.n	800a46a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a452:	2b00      	cmp	r3, #0
 800a454:	d009      	beq.n	800a46a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a45e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a470:	2b00      	cmp	r3, #0
 800a472:	d00e      	beq.n	800a492 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d009      	beq.n	800a492 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d00e      	beq.n	800a4ba <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d009      	beq.n	800a4ba <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a4ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d00e      	beq.n	800a4e2 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d009      	beq.n	800a4e2 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a4d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a4e2:	bf00      	nop
 800a4e4:	3710      	adds	r7, #16
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
	...

0800a4ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b086      	sub	sp, #24
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a502:	2b01      	cmp	r3, #1
 800a504:	d101      	bne.n	800a50a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a506:	2302      	movs	r3, #2
 800a508:	e0ff      	b.n	800a70a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2201      	movs	r2, #1
 800a50e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2b14      	cmp	r3, #20
 800a516:	f200 80f0 	bhi.w	800a6fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a51a:	a201      	add	r2, pc, #4	@ (adr r2, 800a520 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a520:	0800a575 	.word	0x0800a575
 800a524:	0800a6fb 	.word	0x0800a6fb
 800a528:	0800a6fb 	.word	0x0800a6fb
 800a52c:	0800a6fb 	.word	0x0800a6fb
 800a530:	0800a5b5 	.word	0x0800a5b5
 800a534:	0800a6fb 	.word	0x0800a6fb
 800a538:	0800a6fb 	.word	0x0800a6fb
 800a53c:	0800a6fb 	.word	0x0800a6fb
 800a540:	0800a5f7 	.word	0x0800a5f7
 800a544:	0800a6fb 	.word	0x0800a6fb
 800a548:	0800a6fb 	.word	0x0800a6fb
 800a54c:	0800a6fb 	.word	0x0800a6fb
 800a550:	0800a637 	.word	0x0800a637
 800a554:	0800a6fb 	.word	0x0800a6fb
 800a558:	0800a6fb 	.word	0x0800a6fb
 800a55c:	0800a6fb 	.word	0x0800a6fb
 800a560:	0800a679 	.word	0x0800a679
 800a564:	0800a6fb 	.word	0x0800a6fb
 800a568:	0800a6fb 	.word	0x0800a6fb
 800a56c:	0800a6fb 	.word	0x0800a6fb
 800a570:	0800a6b9 	.word	0x0800a6b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	68b9      	ldr	r1, [r7, #8]
 800a57a:	4618      	mov	r0, r3
 800a57c:	f000 fc4e 	bl	800ae1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	699a      	ldr	r2, [r3, #24]
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f042 0208 	orr.w	r2, r2, #8
 800a58e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	699a      	ldr	r2, [r3, #24]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f022 0204 	bic.w	r2, r2, #4
 800a59e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	6999      	ldr	r1, [r3, #24]
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	691a      	ldr	r2, [r3, #16]
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	430a      	orrs	r2, r1
 800a5b0:	619a      	str	r2, [r3, #24]
      break;
 800a5b2:	e0a5      	b.n	800a700 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	68b9      	ldr	r1, [r7, #8]
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f000 fcc8 	bl	800af50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	699a      	ldr	r2, [r3, #24]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a5ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	699a      	ldr	r2, [r3, #24]
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a5de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	6999      	ldr	r1, [r3, #24]
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	691b      	ldr	r3, [r3, #16]
 800a5ea:	021a      	lsls	r2, r3, #8
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	430a      	orrs	r2, r1
 800a5f2:	619a      	str	r2, [r3, #24]
      break;
 800a5f4:	e084      	b.n	800a700 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	68b9      	ldr	r1, [r7, #8]
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f000 fd3b 	bl	800b078 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	69da      	ldr	r2, [r3, #28]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f042 0208 	orr.w	r2, r2, #8
 800a610:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	69da      	ldr	r2, [r3, #28]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f022 0204 	bic.w	r2, r2, #4
 800a620:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	69d9      	ldr	r1, [r3, #28]
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	691a      	ldr	r2, [r3, #16]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	430a      	orrs	r2, r1
 800a632:	61da      	str	r2, [r3, #28]
      break;
 800a634:	e064      	b.n	800a700 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	68b9      	ldr	r1, [r7, #8]
 800a63c:	4618      	mov	r0, r3
 800a63e:	f000 fdad 	bl	800b19c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	69da      	ldr	r2, [r3, #28]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	69da      	ldr	r2, [r3, #28]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	69d9      	ldr	r1, [r3, #28]
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	691b      	ldr	r3, [r3, #16]
 800a66c:	021a      	lsls	r2, r3, #8
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	430a      	orrs	r2, r1
 800a674:	61da      	str	r2, [r3, #28]
      break;
 800a676:	e043      	b.n	800a700 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	68b9      	ldr	r1, [r7, #8]
 800a67e:	4618      	mov	r0, r3
 800a680:	f000 fe20 	bl	800b2c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f042 0208 	orr.w	r2, r2, #8
 800a692:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f022 0204 	bic.w	r2, r2, #4
 800a6a2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	691a      	ldr	r2, [r3, #16]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	430a      	orrs	r2, r1
 800a6b4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a6b6:	e023      	b.n	800a700 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	68b9      	ldr	r1, [r7, #8]
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f000 fe6a 	bl	800b398 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a6d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a6e2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	021a      	lsls	r2, r3, #8
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	430a      	orrs	r2, r1
 800a6f6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a6f8:	e002      	b.n	800a700 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	75fb      	strb	r3, [r7, #23]
      break;
 800a6fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2200      	movs	r2, #0
 800a704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a708:	7dfb      	ldrb	r3, [r7, #23]
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3718      	adds	r7, #24
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop

0800a714 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a71e:	2300      	movs	r3, #0
 800a720:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d101      	bne.n	800a730 <HAL_TIM_ConfigClockSource+0x1c>
 800a72c:	2302      	movs	r3, #2
 800a72e:	e0f6      	b.n	800a91e <HAL_TIM_ConfigClockSource+0x20a>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2202      	movs	r2, #2
 800a73c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a74e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a75a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a6f      	ldr	r2, [pc, #444]	@ (800a928 <HAL_TIM_ConfigClockSource+0x214>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	f000 80c1 	beq.w	800a8f2 <HAL_TIM_ConfigClockSource+0x1de>
 800a770:	4a6d      	ldr	r2, [pc, #436]	@ (800a928 <HAL_TIM_ConfigClockSource+0x214>)
 800a772:	4293      	cmp	r3, r2
 800a774:	f200 80c6 	bhi.w	800a904 <HAL_TIM_ConfigClockSource+0x1f0>
 800a778:	4a6c      	ldr	r2, [pc, #432]	@ (800a92c <HAL_TIM_ConfigClockSource+0x218>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	f000 80b9 	beq.w	800a8f2 <HAL_TIM_ConfigClockSource+0x1de>
 800a780:	4a6a      	ldr	r2, [pc, #424]	@ (800a92c <HAL_TIM_ConfigClockSource+0x218>)
 800a782:	4293      	cmp	r3, r2
 800a784:	f200 80be 	bhi.w	800a904 <HAL_TIM_ConfigClockSource+0x1f0>
 800a788:	4a69      	ldr	r2, [pc, #420]	@ (800a930 <HAL_TIM_ConfigClockSource+0x21c>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	f000 80b1 	beq.w	800a8f2 <HAL_TIM_ConfigClockSource+0x1de>
 800a790:	4a67      	ldr	r2, [pc, #412]	@ (800a930 <HAL_TIM_ConfigClockSource+0x21c>)
 800a792:	4293      	cmp	r3, r2
 800a794:	f200 80b6 	bhi.w	800a904 <HAL_TIM_ConfigClockSource+0x1f0>
 800a798:	4a66      	ldr	r2, [pc, #408]	@ (800a934 <HAL_TIM_ConfigClockSource+0x220>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	f000 80a9 	beq.w	800a8f2 <HAL_TIM_ConfigClockSource+0x1de>
 800a7a0:	4a64      	ldr	r2, [pc, #400]	@ (800a934 <HAL_TIM_ConfigClockSource+0x220>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	f200 80ae 	bhi.w	800a904 <HAL_TIM_ConfigClockSource+0x1f0>
 800a7a8:	4a63      	ldr	r2, [pc, #396]	@ (800a938 <HAL_TIM_ConfigClockSource+0x224>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	f000 80a1 	beq.w	800a8f2 <HAL_TIM_ConfigClockSource+0x1de>
 800a7b0:	4a61      	ldr	r2, [pc, #388]	@ (800a938 <HAL_TIM_ConfigClockSource+0x224>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	f200 80a6 	bhi.w	800a904 <HAL_TIM_ConfigClockSource+0x1f0>
 800a7b8:	4a60      	ldr	r2, [pc, #384]	@ (800a93c <HAL_TIM_ConfigClockSource+0x228>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	f000 8099 	beq.w	800a8f2 <HAL_TIM_ConfigClockSource+0x1de>
 800a7c0:	4a5e      	ldr	r2, [pc, #376]	@ (800a93c <HAL_TIM_ConfigClockSource+0x228>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	f200 809e 	bhi.w	800a904 <HAL_TIM_ConfigClockSource+0x1f0>
 800a7c8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a7cc:	f000 8091 	beq.w	800a8f2 <HAL_TIM_ConfigClockSource+0x1de>
 800a7d0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a7d4:	f200 8096 	bhi.w	800a904 <HAL_TIM_ConfigClockSource+0x1f0>
 800a7d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a7dc:	f000 8089 	beq.w	800a8f2 <HAL_TIM_ConfigClockSource+0x1de>
 800a7e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a7e4:	f200 808e 	bhi.w	800a904 <HAL_TIM_ConfigClockSource+0x1f0>
 800a7e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a7ec:	d03e      	beq.n	800a86c <HAL_TIM_ConfigClockSource+0x158>
 800a7ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a7f2:	f200 8087 	bhi.w	800a904 <HAL_TIM_ConfigClockSource+0x1f0>
 800a7f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7fa:	f000 8086 	beq.w	800a90a <HAL_TIM_ConfigClockSource+0x1f6>
 800a7fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a802:	d87f      	bhi.n	800a904 <HAL_TIM_ConfigClockSource+0x1f0>
 800a804:	2b70      	cmp	r3, #112	@ 0x70
 800a806:	d01a      	beq.n	800a83e <HAL_TIM_ConfigClockSource+0x12a>
 800a808:	2b70      	cmp	r3, #112	@ 0x70
 800a80a:	d87b      	bhi.n	800a904 <HAL_TIM_ConfigClockSource+0x1f0>
 800a80c:	2b60      	cmp	r3, #96	@ 0x60
 800a80e:	d050      	beq.n	800a8b2 <HAL_TIM_ConfigClockSource+0x19e>
 800a810:	2b60      	cmp	r3, #96	@ 0x60
 800a812:	d877      	bhi.n	800a904 <HAL_TIM_ConfigClockSource+0x1f0>
 800a814:	2b50      	cmp	r3, #80	@ 0x50
 800a816:	d03c      	beq.n	800a892 <HAL_TIM_ConfigClockSource+0x17e>
 800a818:	2b50      	cmp	r3, #80	@ 0x50
 800a81a:	d873      	bhi.n	800a904 <HAL_TIM_ConfigClockSource+0x1f0>
 800a81c:	2b40      	cmp	r3, #64	@ 0x40
 800a81e:	d058      	beq.n	800a8d2 <HAL_TIM_ConfigClockSource+0x1be>
 800a820:	2b40      	cmp	r3, #64	@ 0x40
 800a822:	d86f      	bhi.n	800a904 <HAL_TIM_ConfigClockSource+0x1f0>
 800a824:	2b30      	cmp	r3, #48	@ 0x30
 800a826:	d064      	beq.n	800a8f2 <HAL_TIM_ConfigClockSource+0x1de>
 800a828:	2b30      	cmp	r3, #48	@ 0x30
 800a82a:	d86b      	bhi.n	800a904 <HAL_TIM_ConfigClockSource+0x1f0>
 800a82c:	2b20      	cmp	r3, #32
 800a82e:	d060      	beq.n	800a8f2 <HAL_TIM_ConfigClockSource+0x1de>
 800a830:	2b20      	cmp	r3, #32
 800a832:	d867      	bhi.n	800a904 <HAL_TIM_ConfigClockSource+0x1f0>
 800a834:	2b00      	cmp	r3, #0
 800a836:	d05c      	beq.n	800a8f2 <HAL_TIM_ConfigClockSource+0x1de>
 800a838:	2b10      	cmp	r3, #16
 800a83a:	d05a      	beq.n	800a8f2 <HAL_TIM_ConfigClockSource+0x1de>
 800a83c:	e062      	b.n	800a904 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a84e:	f000 fe8b 	bl	800b568 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	689b      	ldr	r3, [r3, #8]
 800a858:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a860:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	68ba      	ldr	r2, [r7, #8]
 800a868:	609a      	str	r2, [r3, #8]
      break;
 800a86a:	e04f      	b.n	800a90c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a87c:	f000 fe74 	bl	800b568 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	689a      	ldr	r2, [r3, #8]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a88e:	609a      	str	r2, [r3, #8]
      break;
 800a890:	e03c      	b.n	800a90c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a89e:	461a      	mov	r2, r3
 800a8a0:	f000 fde6 	bl	800b470 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	2150      	movs	r1, #80	@ 0x50
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f000 fe3f 	bl	800b52e <TIM_ITRx_SetConfig>
      break;
 800a8b0:	e02c      	b.n	800a90c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a8be:	461a      	mov	r2, r3
 800a8c0:	f000 fe05 	bl	800b4ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	2160      	movs	r1, #96	@ 0x60
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f000 fe2f 	bl	800b52e <TIM_ITRx_SetConfig>
      break;
 800a8d0:	e01c      	b.n	800a90c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8de:	461a      	mov	r2, r3
 800a8e0:	f000 fdc6 	bl	800b470 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	2140      	movs	r1, #64	@ 0x40
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f000 fe1f 	bl	800b52e <TIM_ITRx_SetConfig>
      break;
 800a8f0:	e00c      	b.n	800a90c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	4610      	mov	r0, r2
 800a8fe:	f000 fe16 	bl	800b52e <TIM_ITRx_SetConfig>
      break;
 800a902:	e003      	b.n	800a90c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800a904:	2301      	movs	r3, #1
 800a906:	73fb      	strb	r3, [r7, #15]
      break;
 800a908:	e000      	b.n	800a90c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800a90a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2201      	movs	r2, #1
 800a910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2200      	movs	r2, #0
 800a918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3710      	adds	r7, #16
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	00100070 	.word	0x00100070
 800a92c:	00100060 	.word	0x00100060
 800a930:	00100050 	.word	0x00100050
 800a934:	00100040 	.word	0x00100040
 800a938:	00100030 	.word	0x00100030
 800a93c:	00100020 	.word	0x00100020

0800a940 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a940:	b480      	push	{r7}
 800a942:	b083      	sub	sp, #12
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800a948:	bf00      	nop
 800a94a:	370c      	adds	r7, #12
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr

0800a954 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a95c:	bf00      	nop
 800a95e:	370c      	adds	r7, #12
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a968:	b480      	push	{r7}
 800a96a:	b083      	sub	sp, #12
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a970:	bf00      	nop
 800a972:	370c      	adds	r7, #12
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800a984:	bf00      	nop
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a998:	bf00      	nop
 800a99a:	370c      	adds	r7, #12
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr

0800a9a4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a9ac:	bf00      	nop
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a9c0:	bf00      	nop
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800a9d4:	bf00      	nop
 800a9d6:	370c      	adds	r7, #12
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a9e8:	bf00      	nop
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b087      	sub	sp, #28
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	607a      	str	r2, [r7, #4]
 800aa00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800aa02:	2300      	movs	r3, #0
 800aa04:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d101      	bne.n	800aa10 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	e14a      	b.n	800aca6 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	f040 80dd 	bne.w	800abd8 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800aa1e:	7afb      	ldrb	r3, [r7, #11]
 800aa20:	2b1f      	cmp	r3, #31
 800aa22:	f200 80d6 	bhi.w	800abd2 <HAL_TIM_RegisterCallback+0x1de>
 800aa26:	a201      	add	r2, pc, #4	@ (adr r2, 800aa2c <HAL_TIM_RegisterCallback+0x38>)
 800aa28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa2c:	0800aaad 	.word	0x0800aaad
 800aa30:	0800aab5 	.word	0x0800aab5
 800aa34:	0800aabd 	.word	0x0800aabd
 800aa38:	0800aac5 	.word	0x0800aac5
 800aa3c:	0800aacd 	.word	0x0800aacd
 800aa40:	0800aad5 	.word	0x0800aad5
 800aa44:	0800aadd 	.word	0x0800aadd
 800aa48:	0800aae5 	.word	0x0800aae5
 800aa4c:	0800aaed 	.word	0x0800aaed
 800aa50:	0800aaf5 	.word	0x0800aaf5
 800aa54:	0800aafd 	.word	0x0800aafd
 800aa58:	0800ab05 	.word	0x0800ab05
 800aa5c:	0800ab0d 	.word	0x0800ab0d
 800aa60:	0800ab15 	.word	0x0800ab15
 800aa64:	0800ab1f 	.word	0x0800ab1f
 800aa68:	0800ab29 	.word	0x0800ab29
 800aa6c:	0800ab33 	.word	0x0800ab33
 800aa70:	0800ab3d 	.word	0x0800ab3d
 800aa74:	0800ab47 	.word	0x0800ab47
 800aa78:	0800ab51 	.word	0x0800ab51
 800aa7c:	0800ab5b 	.word	0x0800ab5b
 800aa80:	0800ab65 	.word	0x0800ab65
 800aa84:	0800ab6f 	.word	0x0800ab6f
 800aa88:	0800ab79 	.word	0x0800ab79
 800aa8c:	0800ab83 	.word	0x0800ab83
 800aa90:	0800ab8d 	.word	0x0800ab8d
 800aa94:	0800ab97 	.word	0x0800ab97
 800aa98:	0800aba1 	.word	0x0800aba1
 800aa9c:	0800abab 	.word	0x0800abab
 800aaa0:	0800abb5 	.word	0x0800abb5
 800aaa4:	0800abbf 	.word	0x0800abbf
 800aaa8:	0800abc9 	.word	0x0800abc9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800aab2:	e0f7      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800aaba:	e0f3      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800aac2:	e0ef      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800aaca:	e0eb      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800aad2:	e0e7      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800aada:	e0e3      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800aae2:	e0df      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800aaea:	e0db      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800aaf2:	e0d7      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800aafa:	e0d3      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800ab02:	e0cf      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800ab0a:	e0cb      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800ab12:	e0c7      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800ab1c:	e0c2      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800ab26:	e0bd      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800ab30:	e0b8      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800ab3a:	e0b3      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800ab44:	e0ae      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800ab4e:	e0a9      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800ab58:	e0a4      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800ab62:	e09f      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800ab6c:	e09a      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800ab76:	e095      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800ab80:	e090      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800ab8a:	e08b      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800ab94:	e086      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800ab9e:	e081      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800aba8:	e07c      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800abb2:	e077      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800abbc:	e072      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800abc6:	e06d      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800abd0:	e068      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	75fb      	strb	r3, [r7, #23]
        break;
 800abd6:	e065      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d15d      	bne.n	800aca0 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800abe4:	7afb      	ldrb	r3, [r7, #11]
 800abe6:	2b0d      	cmp	r3, #13
 800abe8:	d857      	bhi.n	800ac9a <HAL_TIM_RegisterCallback+0x2a6>
 800abea:	a201      	add	r2, pc, #4	@ (adr r2, 800abf0 <HAL_TIM_RegisterCallback+0x1fc>)
 800abec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf0:	0800ac29 	.word	0x0800ac29
 800abf4:	0800ac31 	.word	0x0800ac31
 800abf8:	0800ac39 	.word	0x0800ac39
 800abfc:	0800ac41 	.word	0x0800ac41
 800ac00:	0800ac49 	.word	0x0800ac49
 800ac04:	0800ac51 	.word	0x0800ac51
 800ac08:	0800ac59 	.word	0x0800ac59
 800ac0c:	0800ac61 	.word	0x0800ac61
 800ac10:	0800ac69 	.word	0x0800ac69
 800ac14:	0800ac71 	.word	0x0800ac71
 800ac18:	0800ac79 	.word	0x0800ac79
 800ac1c:	0800ac81 	.word	0x0800ac81
 800ac20:	0800ac89 	.word	0x0800ac89
 800ac24:	0800ac91 	.word	0x0800ac91
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800ac2e:	e039      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800ac36:	e035      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800ac3e:	e031      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800ac46:	e02d      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	687a      	ldr	r2, [r7, #4]
 800ac4c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800ac4e:	e029      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800ac56:	e025      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	687a      	ldr	r2, [r7, #4]
 800ac5c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800ac5e:	e021      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800ac66:	e01d      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	687a      	ldr	r2, [r7, #4]
 800ac6c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800ac6e:	e019      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800ac76:	e015      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800ac7e:	e011      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800ac86:	e00d      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800ac8e:	e009      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	687a      	ldr	r2, [r7, #4]
 800ac94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800ac98:	e004      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	75fb      	strb	r3, [r7, #23]
        break;
 800ac9e:	e001      	b.n	800aca4 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800aca0:	2301      	movs	r3, #1
 800aca2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800aca4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	371c      	adds	r7, #28
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr
 800acb2:	bf00      	nop

0800acb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b085      	sub	sp, #20
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	4a4c      	ldr	r2, [pc, #304]	@ (800adf8 <TIM_Base_SetConfig+0x144>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d017      	beq.n	800acfc <TIM_Base_SetConfig+0x48>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acd2:	d013      	beq.n	800acfc <TIM_Base_SetConfig+0x48>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	4a49      	ldr	r2, [pc, #292]	@ (800adfc <TIM_Base_SetConfig+0x148>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d00f      	beq.n	800acfc <TIM_Base_SetConfig+0x48>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	4a48      	ldr	r2, [pc, #288]	@ (800ae00 <TIM_Base_SetConfig+0x14c>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d00b      	beq.n	800acfc <TIM_Base_SetConfig+0x48>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	4a47      	ldr	r2, [pc, #284]	@ (800ae04 <TIM_Base_SetConfig+0x150>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d007      	beq.n	800acfc <TIM_Base_SetConfig+0x48>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	4a46      	ldr	r2, [pc, #280]	@ (800ae08 <TIM_Base_SetConfig+0x154>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d003      	beq.n	800acfc <TIM_Base_SetConfig+0x48>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4a45      	ldr	r2, [pc, #276]	@ (800ae0c <TIM_Base_SetConfig+0x158>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d108      	bne.n	800ad0e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	68fa      	ldr	r2, [r7, #12]
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	4a39      	ldr	r2, [pc, #228]	@ (800adf8 <TIM_Base_SetConfig+0x144>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d023      	beq.n	800ad5e <TIM_Base_SetConfig+0xaa>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad1c:	d01f      	beq.n	800ad5e <TIM_Base_SetConfig+0xaa>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	4a36      	ldr	r2, [pc, #216]	@ (800adfc <TIM_Base_SetConfig+0x148>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d01b      	beq.n	800ad5e <TIM_Base_SetConfig+0xaa>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	4a35      	ldr	r2, [pc, #212]	@ (800ae00 <TIM_Base_SetConfig+0x14c>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d017      	beq.n	800ad5e <TIM_Base_SetConfig+0xaa>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4a34      	ldr	r2, [pc, #208]	@ (800ae04 <TIM_Base_SetConfig+0x150>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d013      	beq.n	800ad5e <TIM_Base_SetConfig+0xaa>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	4a33      	ldr	r2, [pc, #204]	@ (800ae08 <TIM_Base_SetConfig+0x154>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d00f      	beq.n	800ad5e <TIM_Base_SetConfig+0xaa>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	4a33      	ldr	r2, [pc, #204]	@ (800ae10 <TIM_Base_SetConfig+0x15c>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d00b      	beq.n	800ad5e <TIM_Base_SetConfig+0xaa>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	4a32      	ldr	r2, [pc, #200]	@ (800ae14 <TIM_Base_SetConfig+0x160>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d007      	beq.n	800ad5e <TIM_Base_SetConfig+0xaa>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	4a31      	ldr	r2, [pc, #196]	@ (800ae18 <TIM_Base_SetConfig+0x164>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d003      	beq.n	800ad5e <TIM_Base_SetConfig+0xaa>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	4a2c      	ldr	r2, [pc, #176]	@ (800ae0c <TIM_Base_SetConfig+0x158>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d108      	bne.n	800ad70 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	68db      	ldr	r3, [r3, #12]
 800ad6a:	68fa      	ldr	r2, [r7, #12]
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	695b      	ldr	r3, [r3, #20]
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	68fa      	ldr	r2, [r7, #12]
 800ad82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	689a      	ldr	r2, [r3, #8]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	4a18      	ldr	r2, [pc, #96]	@ (800adf8 <TIM_Base_SetConfig+0x144>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d013      	beq.n	800adc4 <TIM_Base_SetConfig+0x110>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	4a1a      	ldr	r2, [pc, #104]	@ (800ae08 <TIM_Base_SetConfig+0x154>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d00f      	beq.n	800adc4 <TIM_Base_SetConfig+0x110>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	4a1a      	ldr	r2, [pc, #104]	@ (800ae10 <TIM_Base_SetConfig+0x15c>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d00b      	beq.n	800adc4 <TIM_Base_SetConfig+0x110>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	4a19      	ldr	r2, [pc, #100]	@ (800ae14 <TIM_Base_SetConfig+0x160>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d007      	beq.n	800adc4 <TIM_Base_SetConfig+0x110>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4a18      	ldr	r2, [pc, #96]	@ (800ae18 <TIM_Base_SetConfig+0x164>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d003      	beq.n	800adc4 <TIM_Base_SetConfig+0x110>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a13      	ldr	r2, [pc, #76]	@ (800ae0c <TIM_Base_SetConfig+0x158>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d103      	bne.n	800adcc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	691a      	ldr	r2, [r3, #16]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2201      	movs	r2, #1
 800add0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	691b      	ldr	r3, [r3, #16]
 800add6:	f003 0301 	and.w	r3, r3, #1
 800adda:	2b01      	cmp	r3, #1
 800addc:	d105      	bne.n	800adea <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	691b      	ldr	r3, [r3, #16]
 800ade2:	f023 0201 	bic.w	r2, r3, #1
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	611a      	str	r2, [r3, #16]
  }
}
 800adea:	bf00      	nop
 800adec:	3714      	adds	r7, #20
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr
 800adf6:	bf00      	nop
 800adf8:	40012c00 	.word	0x40012c00
 800adfc:	40000400 	.word	0x40000400
 800ae00:	40000800 	.word	0x40000800
 800ae04:	40000c00 	.word	0x40000c00
 800ae08:	40013400 	.word	0x40013400
 800ae0c:	40015000 	.word	0x40015000
 800ae10:	40014000 	.word	0x40014000
 800ae14:	40014400 	.word	0x40014400
 800ae18:	40014800 	.word	0x40014800

0800ae1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b087      	sub	sp, #28
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6a1b      	ldr	r3, [r3, #32]
 800ae2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6a1b      	ldr	r3, [r3, #32]
 800ae30:	f023 0201 	bic.w	r2, r3, #1
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	699b      	ldr	r3, [r3, #24]
 800ae42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ae4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f023 0303 	bic.w	r3, r3, #3
 800ae56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	68fa      	ldr	r2, [r7, #12]
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	f023 0302 	bic.w	r3, r3, #2
 800ae68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	689b      	ldr	r3, [r3, #8]
 800ae6e:	697a      	ldr	r2, [r7, #20]
 800ae70:	4313      	orrs	r3, r2
 800ae72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	4a30      	ldr	r2, [pc, #192]	@ (800af38 <TIM_OC1_SetConfig+0x11c>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d013      	beq.n	800aea4 <TIM_OC1_SetConfig+0x88>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	4a2f      	ldr	r2, [pc, #188]	@ (800af3c <TIM_OC1_SetConfig+0x120>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d00f      	beq.n	800aea4 <TIM_OC1_SetConfig+0x88>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	4a2e      	ldr	r2, [pc, #184]	@ (800af40 <TIM_OC1_SetConfig+0x124>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d00b      	beq.n	800aea4 <TIM_OC1_SetConfig+0x88>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	4a2d      	ldr	r2, [pc, #180]	@ (800af44 <TIM_OC1_SetConfig+0x128>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d007      	beq.n	800aea4 <TIM_OC1_SetConfig+0x88>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	4a2c      	ldr	r2, [pc, #176]	@ (800af48 <TIM_OC1_SetConfig+0x12c>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d003      	beq.n	800aea4 <TIM_OC1_SetConfig+0x88>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	4a2b      	ldr	r2, [pc, #172]	@ (800af4c <TIM_OC1_SetConfig+0x130>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d10c      	bne.n	800aebe <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	f023 0308 	bic.w	r3, r3, #8
 800aeaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	697a      	ldr	r2, [r7, #20]
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	f023 0304 	bic.w	r3, r3, #4
 800aebc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	4a1d      	ldr	r2, [pc, #116]	@ (800af38 <TIM_OC1_SetConfig+0x11c>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d013      	beq.n	800aeee <TIM_OC1_SetConfig+0xd2>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	4a1c      	ldr	r2, [pc, #112]	@ (800af3c <TIM_OC1_SetConfig+0x120>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d00f      	beq.n	800aeee <TIM_OC1_SetConfig+0xd2>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4a1b      	ldr	r2, [pc, #108]	@ (800af40 <TIM_OC1_SetConfig+0x124>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d00b      	beq.n	800aeee <TIM_OC1_SetConfig+0xd2>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	4a1a      	ldr	r2, [pc, #104]	@ (800af44 <TIM_OC1_SetConfig+0x128>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d007      	beq.n	800aeee <TIM_OC1_SetConfig+0xd2>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	4a19      	ldr	r2, [pc, #100]	@ (800af48 <TIM_OC1_SetConfig+0x12c>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d003      	beq.n	800aeee <TIM_OC1_SetConfig+0xd2>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	4a18      	ldr	r2, [pc, #96]	@ (800af4c <TIM_OC1_SetConfig+0x130>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d111      	bne.n	800af12 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800aefc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	695b      	ldr	r3, [r3, #20]
 800af02:	693a      	ldr	r2, [r7, #16]
 800af04:	4313      	orrs	r3, r2
 800af06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	699b      	ldr	r3, [r3, #24]
 800af0c:	693a      	ldr	r2, [r7, #16]
 800af0e:	4313      	orrs	r3, r2
 800af10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	693a      	ldr	r2, [r7, #16]
 800af16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	68fa      	ldr	r2, [r7, #12]
 800af1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	685a      	ldr	r2, [r3, #4]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	697a      	ldr	r2, [r7, #20]
 800af2a:	621a      	str	r2, [r3, #32]
}
 800af2c:	bf00      	nop
 800af2e:	371c      	adds	r7, #28
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr
 800af38:	40012c00 	.word	0x40012c00
 800af3c:	40013400 	.word	0x40013400
 800af40:	40014000 	.word	0x40014000
 800af44:	40014400 	.word	0x40014400
 800af48:	40014800 	.word	0x40014800
 800af4c:	40015000 	.word	0x40015000

0800af50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af50:	b480      	push	{r7}
 800af52:	b087      	sub	sp, #28
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6a1b      	ldr	r3, [r3, #32]
 800af5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6a1b      	ldr	r3, [r3, #32]
 800af64:	f023 0210 	bic.w	r2, r3, #16
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	699b      	ldr	r3, [r3, #24]
 800af76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800af7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800af8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	021b      	lsls	r3, r3, #8
 800af92:	68fa      	ldr	r2, [r7, #12]
 800af94:	4313      	orrs	r3, r2
 800af96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	f023 0320 	bic.w	r3, r3, #32
 800af9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	689b      	ldr	r3, [r3, #8]
 800afa4:	011b      	lsls	r3, r3, #4
 800afa6:	697a      	ldr	r2, [r7, #20]
 800afa8:	4313      	orrs	r3, r2
 800afaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	4a2c      	ldr	r2, [pc, #176]	@ (800b060 <TIM_OC2_SetConfig+0x110>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d007      	beq.n	800afc4 <TIM_OC2_SetConfig+0x74>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	4a2b      	ldr	r2, [pc, #172]	@ (800b064 <TIM_OC2_SetConfig+0x114>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d003      	beq.n	800afc4 <TIM_OC2_SetConfig+0x74>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	4a2a      	ldr	r2, [pc, #168]	@ (800b068 <TIM_OC2_SetConfig+0x118>)
 800afc0:	4293      	cmp	r3, r2
 800afc2:	d10d      	bne.n	800afe0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800afca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	68db      	ldr	r3, [r3, #12]
 800afd0:	011b      	lsls	r3, r3, #4
 800afd2:	697a      	ldr	r2, [r7, #20]
 800afd4:	4313      	orrs	r3, r2
 800afd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800afde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	4a1f      	ldr	r2, [pc, #124]	@ (800b060 <TIM_OC2_SetConfig+0x110>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d013      	beq.n	800b010 <TIM_OC2_SetConfig+0xc0>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	4a1e      	ldr	r2, [pc, #120]	@ (800b064 <TIM_OC2_SetConfig+0x114>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d00f      	beq.n	800b010 <TIM_OC2_SetConfig+0xc0>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	4a1e      	ldr	r2, [pc, #120]	@ (800b06c <TIM_OC2_SetConfig+0x11c>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d00b      	beq.n	800b010 <TIM_OC2_SetConfig+0xc0>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	4a1d      	ldr	r2, [pc, #116]	@ (800b070 <TIM_OC2_SetConfig+0x120>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d007      	beq.n	800b010 <TIM_OC2_SetConfig+0xc0>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	4a1c      	ldr	r2, [pc, #112]	@ (800b074 <TIM_OC2_SetConfig+0x124>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d003      	beq.n	800b010 <TIM_OC2_SetConfig+0xc0>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	4a17      	ldr	r2, [pc, #92]	@ (800b068 <TIM_OC2_SetConfig+0x118>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d113      	bne.n	800b038 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b016:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b01e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	695b      	ldr	r3, [r3, #20]
 800b024:	009b      	lsls	r3, r3, #2
 800b026:	693a      	ldr	r2, [r7, #16]
 800b028:	4313      	orrs	r3, r2
 800b02a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	699b      	ldr	r3, [r3, #24]
 800b030:	009b      	lsls	r3, r3, #2
 800b032:	693a      	ldr	r2, [r7, #16]
 800b034:	4313      	orrs	r3, r2
 800b036:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	693a      	ldr	r2, [r7, #16]
 800b03c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	68fa      	ldr	r2, [r7, #12]
 800b042:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	685a      	ldr	r2, [r3, #4]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	697a      	ldr	r2, [r7, #20]
 800b050:	621a      	str	r2, [r3, #32]
}
 800b052:	bf00      	nop
 800b054:	371c      	adds	r7, #28
 800b056:	46bd      	mov	sp, r7
 800b058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05c:	4770      	bx	lr
 800b05e:	bf00      	nop
 800b060:	40012c00 	.word	0x40012c00
 800b064:	40013400 	.word	0x40013400
 800b068:	40015000 	.word	0x40015000
 800b06c:	40014000 	.word	0x40014000
 800b070:	40014400 	.word	0x40014400
 800b074:	40014800 	.word	0x40014800

0800b078 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b078:	b480      	push	{r7}
 800b07a:	b087      	sub	sp, #28
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6a1b      	ldr	r3, [r3, #32]
 800b086:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6a1b      	ldr	r3, [r3, #32]
 800b08c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	69db      	ldr	r3, [r3, #28]
 800b09e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b0a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f023 0303 	bic.w	r3, r3, #3
 800b0b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	68fa      	ldr	r2, [r7, #12]
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b0c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	689b      	ldr	r3, [r3, #8]
 800b0ca:	021b      	lsls	r3, r3, #8
 800b0cc:	697a      	ldr	r2, [r7, #20]
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	4a2b      	ldr	r2, [pc, #172]	@ (800b184 <TIM_OC3_SetConfig+0x10c>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d007      	beq.n	800b0ea <TIM_OC3_SetConfig+0x72>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	4a2a      	ldr	r2, [pc, #168]	@ (800b188 <TIM_OC3_SetConfig+0x110>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d003      	beq.n	800b0ea <TIM_OC3_SetConfig+0x72>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	4a29      	ldr	r2, [pc, #164]	@ (800b18c <TIM_OC3_SetConfig+0x114>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d10d      	bne.n	800b106 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b0f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	68db      	ldr	r3, [r3, #12]
 800b0f6:	021b      	lsls	r3, r3, #8
 800b0f8:	697a      	ldr	r2, [r7, #20]
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	4a1e      	ldr	r2, [pc, #120]	@ (800b184 <TIM_OC3_SetConfig+0x10c>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d013      	beq.n	800b136 <TIM_OC3_SetConfig+0xbe>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	4a1d      	ldr	r2, [pc, #116]	@ (800b188 <TIM_OC3_SetConfig+0x110>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d00f      	beq.n	800b136 <TIM_OC3_SetConfig+0xbe>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	4a1d      	ldr	r2, [pc, #116]	@ (800b190 <TIM_OC3_SetConfig+0x118>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d00b      	beq.n	800b136 <TIM_OC3_SetConfig+0xbe>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	4a1c      	ldr	r2, [pc, #112]	@ (800b194 <TIM_OC3_SetConfig+0x11c>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d007      	beq.n	800b136 <TIM_OC3_SetConfig+0xbe>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	4a1b      	ldr	r2, [pc, #108]	@ (800b198 <TIM_OC3_SetConfig+0x120>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d003      	beq.n	800b136 <TIM_OC3_SetConfig+0xbe>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	4a16      	ldr	r2, [pc, #88]	@ (800b18c <TIM_OC3_SetConfig+0x114>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d113      	bne.n	800b15e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b13c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	695b      	ldr	r3, [r3, #20]
 800b14a:	011b      	lsls	r3, r3, #4
 800b14c:	693a      	ldr	r2, [r7, #16]
 800b14e:	4313      	orrs	r3, r2
 800b150:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	699b      	ldr	r3, [r3, #24]
 800b156:	011b      	lsls	r3, r3, #4
 800b158:	693a      	ldr	r2, [r7, #16]
 800b15a:	4313      	orrs	r3, r2
 800b15c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	693a      	ldr	r2, [r7, #16]
 800b162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	68fa      	ldr	r2, [r7, #12]
 800b168:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	685a      	ldr	r2, [r3, #4]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	697a      	ldr	r2, [r7, #20]
 800b176:	621a      	str	r2, [r3, #32]
}
 800b178:	bf00      	nop
 800b17a:	371c      	adds	r7, #28
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr
 800b184:	40012c00 	.word	0x40012c00
 800b188:	40013400 	.word	0x40013400
 800b18c:	40015000 	.word	0x40015000
 800b190:	40014000 	.word	0x40014000
 800b194:	40014400 	.word	0x40014400
 800b198:	40014800 	.word	0x40014800

0800b19c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b087      	sub	sp, #28
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6a1b      	ldr	r3, [r3, #32]
 800b1aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6a1b      	ldr	r3, [r3, #32]
 800b1b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	69db      	ldr	r3, [r3, #28]
 800b1c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b1ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b1ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b1d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	021b      	lsls	r3, r3, #8
 800b1de:	68fa      	ldr	r2, [r7, #12]
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b1ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	689b      	ldr	r3, [r3, #8]
 800b1f0:	031b      	lsls	r3, r3, #12
 800b1f2:	697a      	ldr	r2, [r7, #20]
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	4a2c      	ldr	r2, [pc, #176]	@ (800b2ac <TIM_OC4_SetConfig+0x110>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d007      	beq.n	800b210 <TIM_OC4_SetConfig+0x74>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	4a2b      	ldr	r2, [pc, #172]	@ (800b2b0 <TIM_OC4_SetConfig+0x114>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d003      	beq.n	800b210 <TIM_OC4_SetConfig+0x74>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	4a2a      	ldr	r2, [pc, #168]	@ (800b2b4 <TIM_OC4_SetConfig+0x118>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d10d      	bne.n	800b22c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	68db      	ldr	r3, [r3, #12]
 800b21c:	031b      	lsls	r3, r3, #12
 800b21e:	697a      	ldr	r2, [r7, #20]
 800b220:	4313      	orrs	r3, r2
 800b222:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b22a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4a1f      	ldr	r2, [pc, #124]	@ (800b2ac <TIM_OC4_SetConfig+0x110>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d013      	beq.n	800b25c <TIM_OC4_SetConfig+0xc0>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	4a1e      	ldr	r2, [pc, #120]	@ (800b2b0 <TIM_OC4_SetConfig+0x114>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d00f      	beq.n	800b25c <TIM_OC4_SetConfig+0xc0>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	4a1e      	ldr	r2, [pc, #120]	@ (800b2b8 <TIM_OC4_SetConfig+0x11c>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d00b      	beq.n	800b25c <TIM_OC4_SetConfig+0xc0>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	4a1d      	ldr	r2, [pc, #116]	@ (800b2bc <TIM_OC4_SetConfig+0x120>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d007      	beq.n	800b25c <TIM_OC4_SetConfig+0xc0>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	4a1c      	ldr	r2, [pc, #112]	@ (800b2c0 <TIM_OC4_SetConfig+0x124>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d003      	beq.n	800b25c <TIM_OC4_SetConfig+0xc0>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	4a17      	ldr	r2, [pc, #92]	@ (800b2b4 <TIM_OC4_SetConfig+0x118>)
 800b258:	4293      	cmp	r3, r2
 800b25a:	d113      	bne.n	800b284 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b262:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b26a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	695b      	ldr	r3, [r3, #20]
 800b270:	019b      	lsls	r3, r3, #6
 800b272:	693a      	ldr	r2, [r7, #16]
 800b274:	4313      	orrs	r3, r2
 800b276:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	699b      	ldr	r3, [r3, #24]
 800b27c:	019b      	lsls	r3, r3, #6
 800b27e:	693a      	ldr	r2, [r7, #16]
 800b280:	4313      	orrs	r3, r2
 800b282:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	693a      	ldr	r2, [r7, #16]
 800b288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	68fa      	ldr	r2, [r7, #12]
 800b28e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	685a      	ldr	r2, [r3, #4]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	697a      	ldr	r2, [r7, #20]
 800b29c:	621a      	str	r2, [r3, #32]
}
 800b29e:	bf00      	nop
 800b2a0:	371c      	adds	r7, #28
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr
 800b2aa:	bf00      	nop
 800b2ac:	40012c00 	.word	0x40012c00
 800b2b0:	40013400 	.word	0x40013400
 800b2b4:	40015000 	.word	0x40015000
 800b2b8:	40014000 	.word	0x40014000
 800b2bc:	40014400 	.word	0x40014400
 800b2c0:	40014800 	.word	0x40014800

0800b2c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b087      	sub	sp, #28
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6a1b      	ldr	r3, [r3, #32]
 800b2d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6a1b      	ldr	r3, [r3, #32]
 800b2d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b2f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	68fa      	ldr	r2, [r7, #12]
 800b2fe:	4313      	orrs	r3, r2
 800b300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b308:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	689b      	ldr	r3, [r3, #8]
 800b30e:	041b      	lsls	r3, r3, #16
 800b310:	693a      	ldr	r2, [r7, #16]
 800b312:	4313      	orrs	r3, r2
 800b314:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	4a19      	ldr	r2, [pc, #100]	@ (800b380 <TIM_OC5_SetConfig+0xbc>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d013      	beq.n	800b346 <TIM_OC5_SetConfig+0x82>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	4a18      	ldr	r2, [pc, #96]	@ (800b384 <TIM_OC5_SetConfig+0xc0>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d00f      	beq.n	800b346 <TIM_OC5_SetConfig+0x82>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4a17      	ldr	r2, [pc, #92]	@ (800b388 <TIM_OC5_SetConfig+0xc4>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d00b      	beq.n	800b346 <TIM_OC5_SetConfig+0x82>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	4a16      	ldr	r2, [pc, #88]	@ (800b38c <TIM_OC5_SetConfig+0xc8>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d007      	beq.n	800b346 <TIM_OC5_SetConfig+0x82>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	4a15      	ldr	r2, [pc, #84]	@ (800b390 <TIM_OC5_SetConfig+0xcc>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d003      	beq.n	800b346 <TIM_OC5_SetConfig+0x82>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	4a14      	ldr	r2, [pc, #80]	@ (800b394 <TIM_OC5_SetConfig+0xd0>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d109      	bne.n	800b35a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b34c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	695b      	ldr	r3, [r3, #20]
 800b352:	021b      	lsls	r3, r3, #8
 800b354:	697a      	ldr	r2, [r7, #20]
 800b356:	4313      	orrs	r3, r2
 800b358:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	697a      	ldr	r2, [r7, #20]
 800b35e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	68fa      	ldr	r2, [r7, #12]
 800b364:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	685a      	ldr	r2, [r3, #4]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	693a      	ldr	r2, [r7, #16]
 800b372:	621a      	str	r2, [r3, #32]
}
 800b374:	bf00      	nop
 800b376:	371c      	adds	r7, #28
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr
 800b380:	40012c00 	.word	0x40012c00
 800b384:	40013400 	.word	0x40013400
 800b388:	40014000 	.word	0x40014000
 800b38c:	40014400 	.word	0x40014400
 800b390:	40014800 	.word	0x40014800
 800b394:	40015000 	.word	0x40015000

0800b398 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b398:	b480      	push	{r7}
 800b39a:	b087      	sub	sp, #28
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6a1b      	ldr	r3, [r3, #32]
 800b3a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6a1b      	ldr	r3, [r3, #32]
 800b3ac:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b3c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b3ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	021b      	lsls	r3, r3, #8
 800b3d2:	68fa      	ldr	r2, [r7, #12]
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b3de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	051b      	lsls	r3, r3, #20
 800b3e6:	693a      	ldr	r2, [r7, #16]
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	4a1a      	ldr	r2, [pc, #104]	@ (800b458 <TIM_OC6_SetConfig+0xc0>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d013      	beq.n	800b41c <TIM_OC6_SetConfig+0x84>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	4a19      	ldr	r2, [pc, #100]	@ (800b45c <TIM_OC6_SetConfig+0xc4>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d00f      	beq.n	800b41c <TIM_OC6_SetConfig+0x84>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	4a18      	ldr	r2, [pc, #96]	@ (800b460 <TIM_OC6_SetConfig+0xc8>)
 800b400:	4293      	cmp	r3, r2
 800b402:	d00b      	beq.n	800b41c <TIM_OC6_SetConfig+0x84>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	4a17      	ldr	r2, [pc, #92]	@ (800b464 <TIM_OC6_SetConfig+0xcc>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d007      	beq.n	800b41c <TIM_OC6_SetConfig+0x84>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	4a16      	ldr	r2, [pc, #88]	@ (800b468 <TIM_OC6_SetConfig+0xd0>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d003      	beq.n	800b41c <TIM_OC6_SetConfig+0x84>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	4a15      	ldr	r2, [pc, #84]	@ (800b46c <TIM_OC6_SetConfig+0xd4>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d109      	bne.n	800b430 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b422:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	695b      	ldr	r3, [r3, #20]
 800b428:	029b      	lsls	r3, r3, #10
 800b42a:	697a      	ldr	r2, [r7, #20]
 800b42c:	4313      	orrs	r3, r2
 800b42e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	697a      	ldr	r2, [r7, #20]
 800b434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	68fa      	ldr	r2, [r7, #12]
 800b43a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	685a      	ldr	r2, [r3, #4]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	693a      	ldr	r2, [r7, #16]
 800b448:	621a      	str	r2, [r3, #32]
}
 800b44a:	bf00      	nop
 800b44c:	371c      	adds	r7, #28
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr
 800b456:	bf00      	nop
 800b458:	40012c00 	.word	0x40012c00
 800b45c:	40013400 	.word	0x40013400
 800b460:	40014000 	.word	0x40014000
 800b464:	40014400 	.word	0x40014400
 800b468:	40014800 	.word	0x40014800
 800b46c:	40015000 	.word	0x40015000

0800b470 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b470:	b480      	push	{r7}
 800b472:	b087      	sub	sp, #28
 800b474:	af00      	add	r7, sp, #0
 800b476:	60f8      	str	r0, [r7, #12]
 800b478:	60b9      	str	r1, [r7, #8]
 800b47a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	6a1b      	ldr	r3, [r3, #32]
 800b480:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	6a1b      	ldr	r3, [r3, #32]
 800b486:	f023 0201 	bic.w	r2, r3, #1
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	699b      	ldr	r3, [r3, #24]
 800b492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b49a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	011b      	lsls	r3, r3, #4
 800b4a0:	693a      	ldr	r2, [r7, #16]
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	f023 030a 	bic.w	r3, r3, #10
 800b4ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b4ae:	697a      	ldr	r2, [r7, #20]
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	693a      	ldr	r2, [r7, #16]
 800b4ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	697a      	ldr	r2, [r7, #20]
 800b4c0:	621a      	str	r2, [r3, #32]
}
 800b4c2:	bf00      	nop
 800b4c4:	371c      	adds	r7, #28
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4cc:	4770      	bx	lr

0800b4ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b4ce:	b480      	push	{r7}
 800b4d0:	b087      	sub	sp, #28
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	60f8      	str	r0, [r7, #12]
 800b4d6:	60b9      	str	r1, [r7, #8]
 800b4d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	6a1b      	ldr	r3, [r3, #32]
 800b4de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	6a1b      	ldr	r3, [r3, #32]
 800b4e4:	f023 0210 	bic.w	r2, r3, #16
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	699b      	ldr	r3, [r3, #24]
 800b4f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b4f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	031b      	lsls	r3, r3, #12
 800b4fe:	693a      	ldr	r2, [r7, #16]
 800b500:	4313      	orrs	r3, r2
 800b502:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b50a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	011b      	lsls	r3, r3, #4
 800b510:	697a      	ldr	r2, [r7, #20]
 800b512:	4313      	orrs	r3, r2
 800b514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	693a      	ldr	r2, [r7, #16]
 800b51a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	697a      	ldr	r2, [r7, #20]
 800b520:	621a      	str	r2, [r3, #32]
}
 800b522:	bf00      	nop
 800b524:	371c      	adds	r7, #28
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr

0800b52e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b52e:	b480      	push	{r7}
 800b530:	b085      	sub	sp, #20
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
 800b536:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	689b      	ldr	r3, [r3, #8]
 800b53c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b544:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b548:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b54a:	683a      	ldr	r2, [r7, #0]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	4313      	orrs	r3, r2
 800b550:	f043 0307 	orr.w	r3, r3, #7
 800b554:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	68fa      	ldr	r2, [r7, #12]
 800b55a:	609a      	str	r2, [r3, #8]
}
 800b55c:	bf00      	nop
 800b55e:	3714      	adds	r7, #20
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr

0800b568 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b568:	b480      	push	{r7}
 800b56a:	b087      	sub	sp, #28
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	60f8      	str	r0, [r7, #12]
 800b570:	60b9      	str	r1, [r7, #8]
 800b572:	607a      	str	r2, [r7, #4]
 800b574:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b582:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	021a      	lsls	r2, r3, #8
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	431a      	orrs	r2, r3
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	4313      	orrs	r3, r2
 800b590:	697a      	ldr	r2, [r7, #20]
 800b592:	4313      	orrs	r3, r2
 800b594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	697a      	ldr	r2, [r7, #20]
 800b59a:	609a      	str	r2, [r3, #8]
}
 800b59c:	bf00      	nop
 800b59e:	371c      	adds	r7, #28
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a6:	4770      	bx	lr

0800b5a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b087      	sub	sp, #28
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	f003 031f 	and.w	r3, r3, #31
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b5c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	6a1a      	ldr	r2, [r3, #32]
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	43db      	mvns	r3, r3
 800b5ca:	401a      	ands	r2, r3
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	6a1a      	ldr	r2, [r3, #32]
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	f003 031f 	and.w	r3, r3, #31
 800b5da:	6879      	ldr	r1, [r7, #4]
 800b5dc:	fa01 f303 	lsl.w	r3, r1, r3
 800b5e0:	431a      	orrs	r2, r3
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	621a      	str	r2, [r3, #32]
}
 800b5e6:	bf00      	nop
 800b5e8:	371c      	adds	r7, #28
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr
	...

0800b5f4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	4a26      	ldr	r2, [pc, #152]	@ (800b698 <TIM_ResetCallback+0xa4>)
 800b600:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	4a25      	ldr	r2, [pc, #148]	@ (800b69c <TIM_ResetCallback+0xa8>)
 800b608:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	4a24      	ldr	r2, [pc, #144]	@ (800b6a0 <TIM_ResetCallback+0xac>)
 800b610:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	4a23      	ldr	r2, [pc, #140]	@ (800b6a4 <TIM_ResetCallback+0xb0>)
 800b618:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	4a22      	ldr	r2, [pc, #136]	@ (800b6a8 <TIM_ResetCallback+0xb4>)
 800b620:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	4a21      	ldr	r2, [pc, #132]	@ (800b6ac <TIM_ResetCallback+0xb8>)
 800b628:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	4a20      	ldr	r2, [pc, #128]	@ (800b6b0 <TIM_ResetCallback+0xbc>)
 800b630:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	4a1f      	ldr	r2, [pc, #124]	@ (800b6b4 <TIM_ResetCallback+0xc0>)
 800b638:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	4a1e      	ldr	r2, [pc, #120]	@ (800b6b8 <TIM_ResetCallback+0xc4>)
 800b640:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	4a1d      	ldr	r2, [pc, #116]	@ (800b6bc <TIM_ResetCallback+0xc8>)
 800b648:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	4a1c      	ldr	r2, [pc, #112]	@ (800b6c0 <TIM_ResetCallback+0xcc>)
 800b650:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	4a1b      	ldr	r2, [pc, #108]	@ (800b6c4 <TIM_ResetCallback+0xd0>)
 800b658:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	4a1a      	ldr	r2, [pc, #104]	@ (800b6c8 <TIM_ResetCallback+0xd4>)
 800b660:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	4a19      	ldr	r2, [pc, #100]	@ (800b6cc <TIM_ResetCallback+0xd8>)
 800b668:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	4a18      	ldr	r2, [pc, #96]	@ (800b6d0 <TIM_ResetCallback+0xdc>)
 800b670:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	4a17      	ldr	r2, [pc, #92]	@ (800b6d4 <TIM_ResetCallback+0xe0>)
 800b678:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	4a16      	ldr	r2, [pc, #88]	@ (800b6d8 <TIM_ResetCallback+0xe4>)
 800b680:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	4a15      	ldr	r2, [pc, #84]	@ (800b6dc <TIM_ResetCallback+0xe8>)
 800b688:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800b68c:	bf00      	nop
 800b68e:	370c      	adds	r7, #12
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr
 800b698:	080049f9 	.word	0x080049f9
 800b69c:	0800a941 	.word	0x0800a941
 800b6a0:	0800a9b9 	.word	0x0800a9b9
 800b6a4:	0800a9cd 	.word	0x0800a9cd
 800b6a8:	0800a969 	.word	0x0800a969
 800b6ac:	0800a97d 	.word	0x0800a97d
 800b6b0:	0800a955 	.word	0x0800a955
 800b6b4:	0800a991 	.word	0x0800a991
 800b6b8:	0800a9a5 	.word	0x0800a9a5
 800b6bc:	0800a9e1 	.word	0x0800a9e1
 800b6c0:	0800b935 	.word	0x0800b935
 800b6c4:	0800b949 	.word	0x0800b949
 800b6c8:	0800b95d 	.word	0x0800b95d
 800b6cc:	0800b971 	.word	0x0800b971
 800b6d0:	0800b985 	.word	0x0800b985
 800b6d4:	0800b999 	.word	0x0800b999
 800b6d8:	0800b9ad 	.word	0x0800b9ad
 800b6dc:	0800b9c1 	.word	0x0800b9c1

0800b6e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b085      	sub	sp, #20
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d101      	bne.n	800b6f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b6f4:	2302      	movs	r3, #2
 800b6f6:	e074      	b.n	800b7e2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2202      	movs	r2, #2
 800b704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	689b      	ldr	r3, [r3, #8]
 800b716:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4a34      	ldr	r2, [pc, #208]	@ (800b7f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d009      	beq.n	800b736 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	4a33      	ldr	r2, [pc, #204]	@ (800b7f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b728:	4293      	cmp	r3, r2
 800b72a:	d004      	beq.n	800b736 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4a31      	ldr	r2, [pc, #196]	@ (800b7f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d108      	bne.n	800b748 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b73c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	68fa      	ldr	r2, [r7, #12]
 800b744:	4313      	orrs	r3, r2
 800b746:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b74e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b752:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	68fa      	ldr	r2, [r7, #12]
 800b75a:	4313      	orrs	r3, r2
 800b75c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	68fa      	ldr	r2, [r7, #12]
 800b764:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4a21      	ldr	r2, [pc, #132]	@ (800b7f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d022      	beq.n	800b7b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b778:	d01d      	beq.n	800b7b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	4a1f      	ldr	r2, [pc, #124]	@ (800b7fc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d018      	beq.n	800b7b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4a1d      	ldr	r2, [pc, #116]	@ (800b800 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d013      	beq.n	800b7b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4a1c      	ldr	r2, [pc, #112]	@ (800b804 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d00e      	beq.n	800b7b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4a15      	ldr	r2, [pc, #84]	@ (800b7f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d009      	beq.n	800b7b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a18      	ldr	r2, [pc, #96]	@ (800b808 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d004      	beq.n	800b7b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4a11      	ldr	r2, [pc, #68]	@ (800b7f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d10c      	bne.n	800b7d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b7bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	689b      	ldr	r3, [r3, #8]
 800b7c2:	68ba      	ldr	r2, [r7, #8]
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	68ba      	ldr	r2, [r7, #8]
 800b7ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b7e0:	2300      	movs	r3, #0
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3714      	adds	r7, #20
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr
 800b7ee:	bf00      	nop
 800b7f0:	40012c00 	.word	0x40012c00
 800b7f4:	40013400 	.word	0x40013400
 800b7f8:	40015000 	.word	0x40015000
 800b7fc:	40000400 	.word	0x40000400
 800b800:	40000800 	.word	0x40000800
 800b804:	40000c00 	.word	0x40000c00
 800b808:	40014000 	.word	0x40014000

0800b80c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b085      	sub	sp, #20
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b816:	2300      	movs	r3, #0
 800b818:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b820:	2b01      	cmp	r3, #1
 800b822:	d101      	bne.n	800b828 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b824:	2302      	movs	r3, #2
 800b826:	e078      	b.n	800b91a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	68db      	ldr	r3, [r3, #12]
 800b83a:	4313      	orrs	r3, r2
 800b83c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	689b      	ldr	r3, [r3, #8]
 800b848:	4313      	orrs	r3, r2
 800b84a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	4313      	orrs	r3, r2
 800b858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4313      	orrs	r3, r2
 800b866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	691b      	ldr	r3, [r3, #16]
 800b872:	4313      	orrs	r3, r2
 800b874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	695b      	ldr	r3, [r3, #20]
 800b880:	4313      	orrs	r3, r2
 800b882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b88e:	4313      	orrs	r3, r2
 800b890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	699b      	ldr	r3, [r3, #24]
 800b89c:	041b      	lsls	r3, r3, #16
 800b89e:	4313      	orrs	r3, r2
 800b8a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	69db      	ldr	r3, [r3, #28]
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4a1c      	ldr	r2, [pc, #112]	@ (800b928 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d009      	beq.n	800b8ce <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4a1b      	ldr	r2, [pc, #108]	@ (800b92c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d004      	beq.n	800b8ce <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a19      	ldr	r2, [pc, #100]	@ (800b930 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d11c      	bne.n	800b908 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8d8:	051b      	lsls	r3, r3, #20
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	6a1b      	ldr	r3, [r3, #32]
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b904:	4313      	orrs	r3, r2
 800b906:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	68fa      	ldr	r2, [r7, #12]
 800b90e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2200      	movs	r2, #0
 800b914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b918:	2300      	movs	r3, #0
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3714      	adds	r7, #20
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr
 800b926:	bf00      	nop
 800b928:	40012c00 	.word	0x40012c00
 800b92c:	40013400 	.word	0x40013400
 800b930:	40015000 	.word	0x40015000

0800b934 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b93c:	bf00      	nop
 800b93e:	370c      	adds	r7, #12
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr

0800b948 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b948:	b480      	push	{r7}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800b950:	bf00      	nop
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b964:	bf00      	nop
 800b966:	370c      	adds	r7, #12
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr

0800b970 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b970:	b480      	push	{r7}
 800b972:	b083      	sub	sp, #12
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b978:	bf00      	nop
 800b97a:	370c      	adds	r7, #12
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b984:	b480      	push	{r7}
 800b986:	b083      	sub	sp, #12
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b98c:	bf00      	nop
 800b98e:	370c      	adds	r7, #12
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr

0800b998 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b9a0:	bf00      	nop
 800b9a2:	370c      	adds	r7, #12
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b083      	sub	sp, #12
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b9b4:	bf00      	nop
 800b9b6:	370c      	adds	r7, #12
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b9c8:	bf00      	nop
 800b9ca:	370c      	adds	r7, #12
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d101      	bne.n	800b9e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	e050      	b.n	800ba88 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d114      	bne.n	800ba1a <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 fdc5 	bl	800c588 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d103      	bne.n	800ba10 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	4a21      	ldr	r2, [pc, #132]	@ (800ba90 <HAL_UART_Init+0xbc>)
 800ba0c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2224      	movs	r2, #36	@ 0x24
 800ba1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f022 0201 	bic.w	r2, r2, #1
 800ba30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d002      	beq.n	800ba40 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f001 f8f2 	bl	800cc24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f000 fdf3 	bl	800c62c <UART_SetConfig>
 800ba46:	4603      	mov	r3, r0
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d101      	bne.n	800ba50 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	e01b      	b.n	800ba88 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	685a      	ldr	r2, [r3, #4]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ba5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	689a      	ldr	r2, [r3, #8]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ba6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	681a      	ldr	r2, [r3, #0]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f042 0201 	orr.w	r2, r2, #1
 800ba7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f001 f971 	bl	800cd68 <UART_CheckIdleState>
 800ba86:	4603      	mov	r3, r0
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3708      	adds	r7, #8
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}
 800ba90:	08005b31 	.word	0x08005b31

0800ba94 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b087      	sub	sp, #28
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	460b      	mov	r3, r1
 800ba9e:	607a      	str	r2, [r7, #4]
 800baa0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800baa2:	2300      	movs	r3, #0
 800baa4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d109      	bne.n	800bac0 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bab2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800babc:	2301      	movs	r3, #1
 800babe:	e09c      	b.n	800bbfa <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bac6:	2b20      	cmp	r3, #32
 800bac8:	d16c      	bne.n	800bba4 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800baca:	7afb      	ldrb	r3, [r7, #11]
 800bacc:	2b0c      	cmp	r3, #12
 800bace:	d85e      	bhi.n	800bb8e <HAL_UART_RegisterCallback+0xfa>
 800bad0:	a201      	add	r2, pc, #4	@ (adr r2, 800bad8 <HAL_UART_RegisterCallback+0x44>)
 800bad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad6:	bf00      	nop
 800bad8:	0800bb0d 	.word	0x0800bb0d
 800badc:	0800bb17 	.word	0x0800bb17
 800bae0:	0800bb21 	.word	0x0800bb21
 800bae4:	0800bb2b 	.word	0x0800bb2b
 800bae8:	0800bb35 	.word	0x0800bb35
 800baec:	0800bb3f 	.word	0x0800bb3f
 800baf0:	0800bb49 	.word	0x0800bb49
 800baf4:	0800bb53 	.word	0x0800bb53
 800baf8:	0800bb5d 	.word	0x0800bb5d
 800bafc:	0800bb67 	.word	0x0800bb67
 800bb00:	0800bb71 	.word	0x0800bb71
 800bb04:	0800bb7b 	.word	0x0800bb7b
 800bb08:	0800bb85 	.word	0x0800bb85
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800bb14:	e070      	b.n	800bbf8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800bb1e:	e06b      	b.n	800bbf8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800bb28:	e066      	b.n	800bbf8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800bb32:	e061      	b.n	800bbf8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	687a      	ldr	r2, [r7, #4]
 800bb38:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800bb3c:	e05c      	b.n	800bbf8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800bb46:	e057      	b.n	800bbf8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800bb50:	e052      	b.n	800bbf8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	687a      	ldr	r2, [r7, #4]
 800bb56:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800bb5a:	e04d      	b.n	800bbf8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800bb64:	e048      	b.n	800bbf8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800bb6e:	e043      	b.n	800bbf8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800bb78:	e03e      	b.n	800bbf8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800bb82:	e039      	b.n	800bbf8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800bb8c:	e034      	b.n	800bbf8 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb94:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800bb9e:	2301      	movs	r3, #1
 800bba0:	75fb      	strb	r3, [r7, #23]
        break;
 800bba2:	e029      	b.n	800bbf8 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d11a      	bne.n	800bbe4 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800bbae:	7afb      	ldrb	r3, [r7, #11]
 800bbb0:	2b0b      	cmp	r3, #11
 800bbb2:	d002      	beq.n	800bbba <HAL_UART_RegisterCallback+0x126>
 800bbb4:	2b0c      	cmp	r3, #12
 800bbb6:	d005      	beq.n	800bbc4 <HAL_UART_RegisterCallback+0x130>
 800bbb8:	e009      	b.n	800bbce <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	687a      	ldr	r2, [r7, #4]
 800bbbe:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800bbc2:	e019      	b.n	800bbf8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800bbcc:	e014      	b.n	800bbf8 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbd4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800bbde:	2301      	movs	r3, #1
 800bbe0:	75fb      	strb	r3, [r7, #23]
        break;
 800bbe2:	e009      	b.n	800bbf8 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800bbf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	371c      	adds	r7, #28
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr
 800bc06:	bf00      	nop

0800bc08 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b08a      	sub	sp, #40	@ 0x28
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	4613      	mov	r3, r2
 800bc14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc1c:	2b20      	cmp	r3, #32
 800bc1e:	d167      	bne.n	800bcf0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d002      	beq.n	800bc2c <HAL_UART_Transmit_DMA+0x24>
 800bc26:	88fb      	ldrh	r3, [r7, #6]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d101      	bne.n	800bc30 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	e060      	b.n	800bcf2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	68ba      	ldr	r2, [r7, #8]
 800bc34:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	88fa      	ldrh	r2, [r7, #6]
 800bc3a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	88fa      	ldrh	r2, [r7, #6]
 800bc42:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2221      	movs	r2, #33	@ 0x21
 800bc52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d028      	beq.n	800bcb0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bc62:	4a26      	ldr	r2, [pc, #152]	@ (800bcfc <HAL_UART_Transmit_DMA+0xf4>)
 800bc64:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bc6a:	4a25      	ldr	r2, [pc, #148]	@ (800bd00 <HAL_UART_Transmit_DMA+0xf8>)
 800bc6c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bc72:	4a24      	ldr	r2, [pc, #144]	@ (800bd04 <HAL_UART_Transmit_DMA+0xfc>)
 800bc74:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc86:	4619      	mov	r1, r3
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	3328      	adds	r3, #40	@ 0x28
 800bc8e:	461a      	mov	r2, r3
 800bc90:	88fb      	ldrh	r3, [r7, #6]
 800bc92:	f7fc f929 	bl	8007ee8 <HAL_DMA_Start_IT>
 800bc96:	4603      	mov	r3, r0
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d009      	beq.n	800bcb0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	2210      	movs	r2, #16
 800bca0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2220      	movs	r2, #32
 800bca8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800bcac:	2301      	movs	r3, #1
 800bcae:	e020      	b.n	800bcf2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2240      	movs	r2, #64	@ 0x40
 800bcb6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	3308      	adds	r3, #8
 800bcbe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	e853 3f00 	ldrex	r3, [r3]
 800bcc6:	613b      	str	r3, [r7, #16]
   return(result);
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcce:	627b      	str	r3, [r7, #36]	@ 0x24
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	3308      	adds	r3, #8
 800bcd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcd8:	623a      	str	r2, [r7, #32]
 800bcda:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcdc:	69f9      	ldr	r1, [r7, #28]
 800bcde:	6a3a      	ldr	r2, [r7, #32]
 800bce0:	e841 2300 	strex	r3, r2, [r1]
 800bce4:	61bb      	str	r3, [r7, #24]
   return(result);
 800bce6:	69bb      	ldr	r3, [r7, #24]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d1e5      	bne.n	800bcb8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800bcec:	2300      	movs	r3, #0
 800bcee:	e000      	b.n	800bcf2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800bcf0:	2302      	movs	r3, #2
  }
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3728      	adds	r7, #40	@ 0x28
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	0800d233 	.word	0x0800d233
 800bd00:	0800d2d1 	.word	0x0800d2d1
 800bd04:	0800d46b 	.word	0x0800d46b

0800bd08 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b08a      	sub	sp, #40	@ 0x28
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	60f8      	str	r0, [r7, #12]
 800bd10:	60b9      	str	r1, [r7, #8]
 800bd12:	4613      	mov	r3, r2
 800bd14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd1c:	2b20      	cmp	r3, #32
 800bd1e:	d137      	bne.n	800bd90 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d002      	beq.n	800bd2c <HAL_UART_Receive_DMA+0x24>
 800bd26:	88fb      	ldrh	r3, [r7, #6]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d101      	bne.n	800bd30 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	e030      	b.n	800bd92 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2200      	movs	r2, #0
 800bd34:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	4a18      	ldr	r2, [pc, #96]	@ (800bd9c <HAL_UART_Receive_DMA+0x94>)
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d01f      	beq.n	800bd80 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d018      	beq.n	800bd80 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	e853 3f00 	ldrex	r3, [r3]
 800bd5a:	613b      	str	r3, [r7, #16]
   return(result);
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bd62:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	461a      	mov	r2, r3
 800bd6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd6c:	623b      	str	r3, [r7, #32]
 800bd6e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd70:	69f9      	ldr	r1, [r7, #28]
 800bd72:	6a3a      	ldr	r2, [r7, #32]
 800bd74:	e841 2300 	strex	r3, r2, [r1]
 800bd78:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd7a:	69bb      	ldr	r3, [r7, #24]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d1e6      	bne.n	800bd4e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bd80:	88fb      	ldrh	r3, [r7, #6]
 800bd82:	461a      	mov	r2, r3
 800bd84:	68b9      	ldr	r1, [r7, #8]
 800bd86:	68f8      	ldr	r0, [r7, #12]
 800bd88:	f001 f906 	bl	800cf98 <UART_Start_Receive_DMA>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	e000      	b.n	800bd92 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bd90:	2302      	movs	r3, #2
  }
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3728      	adds	r7, #40	@ 0x28
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	40008000 	.word	0x40008000

0800bda0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b0ba      	sub	sp, #232	@ 0xe8
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	69db      	ldr	r3, [r3, #28]
 800bdae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	689b      	ldr	r3, [r3, #8]
 800bdc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bdc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800bdca:	f640 030f 	movw	r3, #2063	@ 0x80f
 800bdce:	4013      	ands	r3, r2
 800bdd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800bdd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d11b      	bne.n	800be14 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bde0:	f003 0320 	and.w	r3, r3, #32
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d015      	beq.n	800be14 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bde8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bdec:	f003 0320 	and.w	r3, r3, #32
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d105      	bne.n	800be00 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bdf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bdf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d009      	beq.n	800be14 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be04:	2b00      	cmp	r3, #0
 800be06:	f000 82f3 	beq.w	800c3f0 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	4798      	blx	r3
      }
      return;
 800be12:	e2ed      	b.n	800c3f0 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800be14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800be18:	2b00      	cmp	r3, #0
 800be1a:	f000 8129 	beq.w	800c070 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800be1e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800be22:	4b90      	ldr	r3, [pc, #576]	@ (800c064 <HAL_UART_IRQHandler+0x2c4>)
 800be24:	4013      	ands	r3, r2
 800be26:	2b00      	cmp	r3, #0
 800be28:	d106      	bne.n	800be38 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800be2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800be2e:	4b8e      	ldr	r3, [pc, #568]	@ (800c068 <HAL_UART_IRQHandler+0x2c8>)
 800be30:	4013      	ands	r3, r2
 800be32:	2b00      	cmp	r3, #0
 800be34:	f000 811c 	beq.w	800c070 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800be38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be3c:	f003 0301 	and.w	r3, r3, #1
 800be40:	2b00      	cmp	r3, #0
 800be42:	d011      	beq.n	800be68 <HAL_UART_IRQHandler+0xc8>
 800be44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d00b      	beq.n	800be68 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	2201      	movs	r2, #1
 800be56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be5e:	f043 0201 	orr.w	r2, r3, #1
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be6c:	f003 0302 	and.w	r3, r3, #2
 800be70:	2b00      	cmp	r3, #0
 800be72:	d011      	beq.n	800be98 <HAL_UART_IRQHandler+0xf8>
 800be74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be78:	f003 0301 	and.w	r3, r3, #1
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d00b      	beq.n	800be98 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2202      	movs	r2, #2
 800be86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be8e:	f043 0204 	orr.w	r2, r3, #4
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be9c:	f003 0304 	and.w	r3, r3, #4
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d011      	beq.n	800bec8 <HAL_UART_IRQHandler+0x128>
 800bea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bea8:	f003 0301 	and.w	r3, r3, #1
 800beac:	2b00      	cmp	r3, #0
 800beae:	d00b      	beq.n	800bec8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	2204      	movs	r2, #4
 800beb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bebe:	f043 0202 	orr.w	r2, r3, #2
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800becc:	f003 0308 	and.w	r3, r3, #8
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d017      	beq.n	800bf04 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bed8:	f003 0320 	and.w	r3, r3, #32
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d105      	bne.n	800beec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bee0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bee4:	4b5f      	ldr	r3, [pc, #380]	@ (800c064 <HAL_UART_IRQHandler+0x2c4>)
 800bee6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d00b      	beq.n	800bf04 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	2208      	movs	r2, #8
 800bef2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800befa:	f043 0208 	orr.w	r2, r3, #8
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bf04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d012      	beq.n	800bf36 <HAL_UART_IRQHandler+0x196>
 800bf10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d00c      	beq.n	800bf36 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bf24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf2c:	f043 0220 	orr.w	r2, r3, #32
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	f000 8259 	beq.w	800c3f4 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bf42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf46:	f003 0320 	and.w	r3, r3, #32
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d013      	beq.n	800bf76 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bf4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf52:	f003 0320 	and.w	r3, r3, #32
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d105      	bne.n	800bf66 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bf5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bf5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d007      	beq.n	800bf76 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d003      	beq.n	800bf76 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	689b      	ldr	r3, [r3, #8]
 800bf86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf8a:	2b40      	cmp	r3, #64	@ 0x40
 800bf8c:	d005      	beq.n	800bf9a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bf8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bf92:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d058      	beq.n	800c04c <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f001 f8e3 	bl	800d166 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	689b      	ldr	r3, [r3, #8]
 800bfa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfaa:	2b40      	cmp	r3, #64	@ 0x40
 800bfac:	d148      	bne.n	800c040 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	3308      	adds	r3, #8
 800bfb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bfbc:	e853 3f00 	ldrex	r3, [r3]
 800bfc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bfc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bfc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bfcc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	3308      	adds	r3, #8
 800bfd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bfda:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bfde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bfe6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bfea:	e841 2300 	strex	r3, r2, [r1]
 800bfee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bff2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d1d9      	bne.n	800bfae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c000:	2b00      	cmp	r3, #0
 800c002:	d017      	beq.n	800c034 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c00a:	4a18      	ldr	r2, [pc, #96]	@ (800c06c <HAL_UART_IRQHandler+0x2cc>)
 800c00c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c014:	4618      	mov	r0, r3
 800c016:	f7fc f83b 	bl	8008090 <HAL_DMA_Abort_IT>
 800c01a:	4603      	mov	r3, r0
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d01f      	beq.n	800c060 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c028:	687a      	ldr	r2, [r7, #4]
 800c02a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c02e:	4610      	mov	r0, r2
 800c030:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c032:	e015      	b.n	800c060 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c03e:	e00f      	b.n	800c060 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c04a:	e009      	b.n	800c060 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2200      	movs	r2, #0
 800c05a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c05e:	e1c9      	b.n	800c3f4 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c060:	bf00      	nop
    return;
 800c062:	e1c7      	b.n	800c3f4 <HAL_UART_IRQHandler+0x654>
 800c064:	10000001 	.word	0x10000001
 800c068:	04000120 	.word	0x04000120
 800c06c:	0800d4ef 	.word	0x0800d4ef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c074:	2b01      	cmp	r3, #1
 800c076:	f040 8157 	bne.w	800c328 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c07a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c07e:	f003 0310 	and.w	r3, r3, #16
 800c082:	2b00      	cmp	r3, #0
 800c084:	f000 8150 	beq.w	800c328 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c08c:	f003 0310 	and.w	r3, r3, #16
 800c090:	2b00      	cmp	r3, #0
 800c092:	f000 8149 	beq.w	800c328 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	2210      	movs	r2, #16
 800c09c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	689b      	ldr	r3, [r3, #8]
 800c0a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0a8:	2b40      	cmp	r3, #64	@ 0x40
 800c0aa:	f040 80bd 	bne.w	800c228 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	685b      	ldr	r3, [r3, #4]
 800c0b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c0bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	f000 8199 	beq.w	800c3f8 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c0cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	f080 8191 	bcs.w	800c3f8 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c0dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f003 0320 	and.w	r3, r3, #32
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	f040 8087 	bne.w	800c202 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c100:	e853 3f00 	ldrex	r3, [r3]
 800c104:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c108:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c10c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c110:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	461a      	mov	r2, r3
 800c11a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c11e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c122:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c126:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c12a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c12e:	e841 2300 	strex	r3, r2, [r1]
 800c132:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c136:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d1da      	bne.n	800c0f4 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	3308      	adds	r3, #8
 800c144:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c146:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c148:	e853 3f00 	ldrex	r3, [r3]
 800c14c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c14e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c150:	f023 0301 	bic.w	r3, r3, #1
 800c154:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	3308      	adds	r3, #8
 800c15e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c162:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c166:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c168:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c16a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c16e:	e841 2300 	strex	r3, r2, [r1]
 800c172:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c174:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c176:	2b00      	cmp	r3, #0
 800c178:	d1e1      	bne.n	800c13e <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	3308      	adds	r3, #8
 800c180:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c182:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c184:	e853 3f00 	ldrex	r3, [r3]
 800c188:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c18a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c18c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c190:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	3308      	adds	r3, #8
 800c19a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c19e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c1a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c1a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c1a6:	e841 2300 	strex	r3, r2, [r1]
 800c1aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c1ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d1e3      	bne.n	800c17a <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2220      	movs	r2, #32
 800c1b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1c8:	e853 3f00 	ldrex	r3, [r3]
 800c1cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c1ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c1d0:	f023 0310 	bic.w	r3, r3, #16
 800c1d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	461a      	mov	r2, r3
 800c1de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c1e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c1e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c1e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c1ea:	e841 2300 	strex	r3, r2, [r1]
 800c1ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c1f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d1e4      	bne.n	800c1c0 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f7fb feee 	bl	8007fde <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2202      	movs	r2, #2
 800c206:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c20e:	687a      	ldr	r2, [r7, #4]
 800c210:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800c21a:	b292      	uxth	r2, r2
 800c21c:	1a8a      	subs	r2, r1, r2
 800c21e:	b292      	uxth	r2, r2
 800c220:	4611      	mov	r1, r2
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c226:	e0e7      	b.n	800c3f8 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c234:	b29b      	uxth	r3, r3
 800c236:	1ad3      	subs	r3, r2, r3
 800c238:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c242:	b29b      	uxth	r3, r3
 800c244:	2b00      	cmp	r3, #0
 800c246:	f000 80d9 	beq.w	800c3fc <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800c24a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c24e:	2b00      	cmp	r3, #0
 800c250:	f000 80d4 	beq.w	800c3fc <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c25c:	e853 3f00 	ldrex	r3, [r3]
 800c260:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c264:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c268:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	461a      	mov	r2, r3
 800c272:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c276:	647b      	str	r3, [r7, #68]	@ 0x44
 800c278:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c27a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c27c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c27e:	e841 2300 	strex	r3, r2, [r1]
 800c282:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c286:	2b00      	cmp	r3, #0
 800c288:	d1e4      	bne.n	800c254 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	3308      	adds	r3, #8
 800c290:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c294:	e853 3f00 	ldrex	r3, [r3]
 800c298:	623b      	str	r3, [r7, #32]
   return(result);
 800c29a:	6a3b      	ldr	r3, [r7, #32]
 800c29c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c2a0:	f023 0301 	bic.w	r3, r3, #1
 800c2a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	3308      	adds	r3, #8
 800c2ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c2b2:	633a      	str	r2, [r7, #48]	@ 0x30
 800c2b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c2b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c2ba:	e841 2300 	strex	r3, r2, [r1]
 800c2be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d1e1      	bne.n	800c28a <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2220      	movs	r2, #32
 800c2ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	e853 3f00 	ldrex	r3, [r3]
 800c2e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f023 0310 	bic.w	r3, r3, #16
 800c2ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c2fc:	61fb      	str	r3, [r7, #28]
 800c2fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c300:	69b9      	ldr	r1, [r7, #24]
 800c302:	69fa      	ldr	r2, [r7, #28]
 800c304:	e841 2300 	strex	r3, r2, [r1]
 800c308:	617b      	str	r3, [r7, #20]
   return(result);
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d1e4      	bne.n	800c2da <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2202      	movs	r2, #2
 800c314:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c31c:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800c320:	4611      	mov	r1, r2
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c326:	e069      	b.n	800c3fc <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c32c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c330:	2b00      	cmp	r3, #0
 800c332:	d010      	beq.n	800c356 <HAL_UART_IRQHandler+0x5b6>
 800c334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c338:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d00a      	beq.n	800c356 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c348:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c354:	e055      	b.n	800c402 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c35a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d014      	beq.n	800c38c <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d105      	bne.n	800c37a <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c36e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c372:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c376:	2b00      	cmp	r3, #0
 800c378:	d008      	beq.n	800c38c <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d03e      	beq.n	800c400 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	4798      	blx	r3
    }
    return;
 800c38a:	e039      	b.n	800c400 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c38c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c394:	2b00      	cmp	r3, #0
 800c396:	d009      	beq.n	800c3ac <HAL_UART_IRQHandler+0x60c>
 800c398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c39c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d003      	beq.n	800c3ac <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f001 f8ba 	bl	800d51e <UART_EndTransmit_IT>
    return;
 800c3aa:	e02a      	b.n	800c402 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c3ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d00b      	beq.n	800c3d0 <HAL_UART_IRQHandler+0x630>
 800c3b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c3bc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d005      	beq.n	800c3d0 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c3ce:	e018      	b.n	800c402 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c3d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d012      	beq.n	800c402 <HAL_UART_IRQHandler+0x662>
 800c3dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	da0e      	bge.n	800c402 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c3ee:	e008      	b.n	800c402 <HAL_UART_IRQHandler+0x662>
      return;
 800c3f0:	bf00      	nop
 800c3f2:	e006      	b.n	800c402 <HAL_UART_IRQHandler+0x662>
    return;
 800c3f4:	bf00      	nop
 800c3f6:	e004      	b.n	800c402 <HAL_UART_IRQHandler+0x662>
      return;
 800c3f8:	bf00      	nop
 800c3fa:	e002      	b.n	800c402 <HAL_UART_IRQHandler+0x662>
      return;
 800c3fc:	bf00      	nop
 800c3fe:	e000      	b.n	800c402 <HAL_UART_IRQHandler+0x662>
    return;
 800c400:	bf00      	nop
  }
}
 800c402:	37e8      	adds	r7, #232	@ 0xe8
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c408:	b480      	push	{r7}
 800c40a:	b083      	sub	sp, #12
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c410:	bf00      	nop
 800c412:	370c      	adds	r7, #12
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr

0800c41c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c41c:	b480      	push	{r7}
 800c41e:	b083      	sub	sp, #12
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c424:	bf00      	nop
 800c426:	370c      	adds	r7, #12
 800c428:	46bd      	mov	sp, r7
 800c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42e:	4770      	bx	lr

0800c430 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c430:	b480      	push	{r7}
 800c432:	b083      	sub	sp, #12
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800c438:	bf00      	nop
 800c43a:	370c      	adds	r7, #12
 800c43c:	46bd      	mov	sp, r7
 800c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c442:	4770      	bx	lr

0800c444 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c444:	b480      	push	{r7}
 800c446:	b083      	sub	sp, #12
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c44c:	bf00      	nop
 800c44e:	370c      	adds	r7, #12
 800c450:	46bd      	mov	sp, r7
 800c452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c456:	4770      	bx	lr

0800c458 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c458:	b480      	push	{r7}
 800c45a:	b083      	sub	sp, #12
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c460:	bf00      	nop
 800c462:	370c      	adds	r7, #12
 800c464:	46bd      	mov	sp, r7
 800c466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46a:	4770      	bx	lr

0800c46c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b083      	sub	sp, #12
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800c474:	bf00      	nop
 800c476:	370c      	adds	r7, #12
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr

0800c480 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800c480:	b480      	push	{r7}
 800c482:	b083      	sub	sp, #12
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800c488:	bf00      	nop
 800c48a:	370c      	adds	r7, #12
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr

0800c494 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800c494:	b480      	push	{r7}
 800c496:	b083      	sub	sp, #12
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800c49c:	bf00      	nop
 800c49e:	370c      	adds	r7, #12
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	460b      	mov	r3, r1
 800c4b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c4b4:	bf00      	nop
 800c4b6:	370c      	adds	r7, #12
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr

0800c4c0 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b083      	sub	sp, #12
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	4a09      	ldr	r2, [pc, #36]	@ (800c4f4 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d009      	beq.n	800c4e8 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	695b      	ldr	r3, [r3, #20]
 800c4da:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	683a      	ldr	r2, [r7, #0]
 800c4e4:	430a      	orrs	r2, r1
 800c4e6:	615a      	str	r2, [r3, #20]
  }
}
 800c4e8:	bf00      	nop
 800c4ea:	370c      	adds	r7, #12
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr
 800c4f4:	40008000 	.word	0x40008000

0800c4f8 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a18      	ldr	r2, [pc, #96]	@ (800c568 <HAL_UART_EnableReceiverTimeout+0x70>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d027      	beq.n	800c55a <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c510:	2b20      	cmp	r3, #32
 800c512:	d120      	bne.n	800c556 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c51a:	2b01      	cmp	r3, #1
 800c51c:	d101      	bne.n	800c522 <HAL_UART_EnableReceiverTimeout+0x2a>
 800c51e:	2302      	movs	r3, #2
 800c520:	e01c      	b.n	800c55c <HAL_UART_EnableReceiverTimeout+0x64>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2201      	movs	r2, #1
 800c526:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2224      	movs	r2, #36	@ 0x24
 800c52e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	685a      	ldr	r2, [r3, #4]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800c540:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2220      	movs	r2, #32
 800c546:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2200      	movs	r2, #0
 800c54e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800c552:	2300      	movs	r3, #0
 800c554:	e002      	b.n	800c55c <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800c556:	2302      	movs	r3, #2
 800c558:	e000      	b.n	800c55c <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800c55a:	2301      	movs	r3, #1
  }
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	370c      	adds	r7, #12
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr
 800c568:	40008000 	.word	0x40008000

0800c56c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b083      	sub	sp, #12
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	370c      	adds	r7, #12
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr
	...

0800c588 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800c588:	b480      	push	{r7}
 800c58a:	b083      	sub	sp, #12
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	4a1a      	ldr	r2, [pc, #104]	@ (800c5fc <UART_InitCallbacksToDefault+0x74>)
 800c594:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	4a19      	ldr	r2, [pc, #100]	@ (800c600 <UART_InitCallbacksToDefault+0x78>)
 800c59c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	4a18      	ldr	r2, [pc, #96]	@ (800c604 <UART_InitCallbacksToDefault+0x7c>)
 800c5a4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	4a17      	ldr	r2, [pc, #92]	@ (800c608 <UART_InitCallbacksToDefault+0x80>)
 800c5ac:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	4a16      	ldr	r2, [pc, #88]	@ (800c60c <UART_InitCallbacksToDefault+0x84>)
 800c5b4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	4a15      	ldr	r2, [pc, #84]	@ (800c610 <UART_InitCallbacksToDefault+0x88>)
 800c5bc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	4a14      	ldr	r2, [pc, #80]	@ (800c614 <UART_InitCallbacksToDefault+0x8c>)
 800c5c4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	4a13      	ldr	r2, [pc, #76]	@ (800c618 <UART_InitCallbacksToDefault+0x90>)
 800c5cc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	4a12      	ldr	r2, [pc, #72]	@ (800c61c <UART_InitCallbacksToDefault+0x94>)
 800c5d4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	4a11      	ldr	r2, [pc, #68]	@ (800c620 <UART_InitCallbacksToDefault+0x98>)
 800c5dc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	4a10      	ldr	r2, [pc, #64]	@ (800c624 <UART_InitCallbacksToDefault+0x9c>)
 800c5e4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	4a0f      	ldr	r2, [pc, #60]	@ (800c628 <UART_InitCallbacksToDefault+0xa0>)
 800c5ec:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800c5f0:	bf00      	nop
 800c5f2:	370c      	adds	r7, #12
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fa:	4770      	bx	lr
 800c5fc:	0800c41d 	.word	0x0800c41d
 800c600:	0800c409 	.word	0x0800c409
 800c604:	0800c445 	.word	0x0800c445
 800c608:	0800c431 	.word	0x0800c431
 800c60c:	0800c459 	.word	0x0800c459
 800c610:	0800c46d 	.word	0x0800c46d
 800c614:	0800c481 	.word	0x0800c481
 800c618:	0800c495 	.word	0x0800c495
 800c61c:	0800d579 	.word	0x0800d579
 800c620:	0800d58d 	.word	0x0800d58d
 800c624:	0800d5a1 	.word	0x0800d5a1
 800c628:	0800c4a9 	.word	0x0800c4a9

0800c62c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c62c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c630:	b08c      	sub	sp, #48	@ 0x30
 800c632:	af00      	add	r7, sp, #0
 800c634:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c636:	2300      	movs	r3, #0
 800c638:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	689a      	ldr	r2, [r3, #8]
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	691b      	ldr	r3, [r3, #16]
 800c644:	431a      	orrs	r2, r3
 800c646:	697b      	ldr	r3, [r7, #20]
 800c648:	695b      	ldr	r3, [r3, #20]
 800c64a:	431a      	orrs	r2, r3
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	69db      	ldr	r3, [r3, #28]
 800c650:	4313      	orrs	r3, r2
 800c652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	681a      	ldr	r2, [r3, #0]
 800c65a:	4baa      	ldr	r3, [pc, #680]	@ (800c904 <UART_SetConfig+0x2d8>)
 800c65c:	4013      	ands	r3, r2
 800c65e:	697a      	ldr	r2, [r7, #20]
 800c660:	6812      	ldr	r2, [r2, #0]
 800c662:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c664:	430b      	orrs	r3, r1
 800c666:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	68da      	ldr	r2, [r3, #12]
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	430a      	orrs	r2, r1
 800c67c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	699b      	ldr	r3, [r3, #24]
 800c682:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	4a9f      	ldr	r2, [pc, #636]	@ (800c908 <UART_SetConfig+0x2dc>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d004      	beq.n	800c698 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	6a1b      	ldr	r3, [r3, #32]
 800c692:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c694:	4313      	orrs	r3, r2
 800c696:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	689b      	ldr	r3, [r3, #8]
 800c69e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800c6a2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800c6a6:	697a      	ldr	r2, [r7, #20]
 800c6a8:	6812      	ldr	r2, [r2, #0]
 800c6aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c6ac:	430b      	orrs	r3, r1
 800c6ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6b6:	f023 010f 	bic.w	r1, r3, #15
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	430a      	orrs	r2, r1
 800c6c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4a90      	ldr	r2, [pc, #576]	@ (800c90c <UART_SetConfig+0x2e0>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d125      	bne.n	800c71c <UART_SetConfig+0xf0>
 800c6d0:	4b8f      	ldr	r3, [pc, #572]	@ (800c910 <UART_SetConfig+0x2e4>)
 800c6d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c6d6:	f003 0303 	and.w	r3, r3, #3
 800c6da:	2b03      	cmp	r3, #3
 800c6dc:	d81a      	bhi.n	800c714 <UART_SetConfig+0xe8>
 800c6de:	a201      	add	r2, pc, #4	@ (adr r2, 800c6e4 <UART_SetConfig+0xb8>)
 800c6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e4:	0800c6f5 	.word	0x0800c6f5
 800c6e8:	0800c705 	.word	0x0800c705
 800c6ec:	0800c6fd 	.word	0x0800c6fd
 800c6f0:	0800c70d 	.word	0x0800c70d
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c6fa:	e116      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c6fc:	2302      	movs	r3, #2
 800c6fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c702:	e112      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c704:	2304      	movs	r3, #4
 800c706:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c70a:	e10e      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c70c:	2308      	movs	r3, #8
 800c70e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c712:	e10a      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c714:	2310      	movs	r3, #16
 800c716:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c71a:	e106      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4a7c      	ldr	r2, [pc, #496]	@ (800c914 <UART_SetConfig+0x2e8>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d138      	bne.n	800c798 <UART_SetConfig+0x16c>
 800c726:	4b7a      	ldr	r3, [pc, #488]	@ (800c910 <UART_SetConfig+0x2e4>)
 800c728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c72c:	f003 030c 	and.w	r3, r3, #12
 800c730:	2b0c      	cmp	r3, #12
 800c732:	d82d      	bhi.n	800c790 <UART_SetConfig+0x164>
 800c734:	a201      	add	r2, pc, #4	@ (adr r2, 800c73c <UART_SetConfig+0x110>)
 800c736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c73a:	bf00      	nop
 800c73c:	0800c771 	.word	0x0800c771
 800c740:	0800c791 	.word	0x0800c791
 800c744:	0800c791 	.word	0x0800c791
 800c748:	0800c791 	.word	0x0800c791
 800c74c:	0800c781 	.word	0x0800c781
 800c750:	0800c791 	.word	0x0800c791
 800c754:	0800c791 	.word	0x0800c791
 800c758:	0800c791 	.word	0x0800c791
 800c75c:	0800c779 	.word	0x0800c779
 800c760:	0800c791 	.word	0x0800c791
 800c764:	0800c791 	.word	0x0800c791
 800c768:	0800c791 	.word	0x0800c791
 800c76c:	0800c789 	.word	0x0800c789
 800c770:	2300      	movs	r3, #0
 800c772:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c776:	e0d8      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c778:	2302      	movs	r3, #2
 800c77a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c77e:	e0d4      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c780:	2304      	movs	r3, #4
 800c782:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c786:	e0d0      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c788:	2308      	movs	r3, #8
 800c78a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c78e:	e0cc      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c790:	2310      	movs	r3, #16
 800c792:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c796:	e0c8      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4a5e      	ldr	r2, [pc, #376]	@ (800c918 <UART_SetConfig+0x2ec>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d125      	bne.n	800c7ee <UART_SetConfig+0x1c2>
 800c7a2:	4b5b      	ldr	r3, [pc, #364]	@ (800c910 <UART_SetConfig+0x2e4>)
 800c7a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c7a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c7ac:	2b30      	cmp	r3, #48	@ 0x30
 800c7ae:	d016      	beq.n	800c7de <UART_SetConfig+0x1b2>
 800c7b0:	2b30      	cmp	r3, #48	@ 0x30
 800c7b2:	d818      	bhi.n	800c7e6 <UART_SetConfig+0x1ba>
 800c7b4:	2b20      	cmp	r3, #32
 800c7b6:	d00a      	beq.n	800c7ce <UART_SetConfig+0x1a2>
 800c7b8:	2b20      	cmp	r3, #32
 800c7ba:	d814      	bhi.n	800c7e6 <UART_SetConfig+0x1ba>
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d002      	beq.n	800c7c6 <UART_SetConfig+0x19a>
 800c7c0:	2b10      	cmp	r3, #16
 800c7c2:	d008      	beq.n	800c7d6 <UART_SetConfig+0x1aa>
 800c7c4:	e00f      	b.n	800c7e6 <UART_SetConfig+0x1ba>
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7cc:	e0ad      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c7ce:	2302      	movs	r3, #2
 800c7d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7d4:	e0a9      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c7d6:	2304      	movs	r3, #4
 800c7d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7dc:	e0a5      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c7de:	2308      	movs	r3, #8
 800c7e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7e4:	e0a1      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c7e6:	2310      	movs	r3, #16
 800c7e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7ec:	e09d      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	4a4a      	ldr	r2, [pc, #296]	@ (800c91c <UART_SetConfig+0x2f0>)
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d125      	bne.n	800c844 <UART_SetConfig+0x218>
 800c7f8:	4b45      	ldr	r3, [pc, #276]	@ (800c910 <UART_SetConfig+0x2e4>)
 800c7fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c7fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c802:	2bc0      	cmp	r3, #192	@ 0xc0
 800c804:	d016      	beq.n	800c834 <UART_SetConfig+0x208>
 800c806:	2bc0      	cmp	r3, #192	@ 0xc0
 800c808:	d818      	bhi.n	800c83c <UART_SetConfig+0x210>
 800c80a:	2b80      	cmp	r3, #128	@ 0x80
 800c80c:	d00a      	beq.n	800c824 <UART_SetConfig+0x1f8>
 800c80e:	2b80      	cmp	r3, #128	@ 0x80
 800c810:	d814      	bhi.n	800c83c <UART_SetConfig+0x210>
 800c812:	2b00      	cmp	r3, #0
 800c814:	d002      	beq.n	800c81c <UART_SetConfig+0x1f0>
 800c816:	2b40      	cmp	r3, #64	@ 0x40
 800c818:	d008      	beq.n	800c82c <UART_SetConfig+0x200>
 800c81a:	e00f      	b.n	800c83c <UART_SetConfig+0x210>
 800c81c:	2300      	movs	r3, #0
 800c81e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c822:	e082      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c824:	2302      	movs	r3, #2
 800c826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c82a:	e07e      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c82c:	2304      	movs	r3, #4
 800c82e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c832:	e07a      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c834:	2308      	movs	r3, #8
 800c836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c83a:	e076      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c83c:	2310      	movs	r3, #16
 800c83e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c842:	e072      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	4a35      	ldr	r2, [pc, #212]	@ (800c920 <UART_SetConfig+0x2f4>)
 800c84a:	4293      	cmp	r3, r2
 800c84c:	d12a      	bne.n	800c8a4 <UART_SetConfig+0x278>
 800c84e:	4b30      	ldr	r3, [pc, #192]	@ (800c910 <UART_SetConfig+0x2e4>)
 800c850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c854:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c858:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c85c:	d01a      	beq.n	800c894 <UART_SetConfig+0x268>
 800c85e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c862:	d81b      	bhi.n	800c89c <UART_SetConfig+0x270>
 800c864:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c868:	d00c      	beq.n	800c884 <UART_SetConfig+0x258>
 800c86a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c86e:	d815      	bhi.n	800c89c <UART_SetConfig+0x270>
 800c870:	2b00      	cmp	r3, #0
 800c872:	d003      	beq.n	800c87c <UART_SetConfig+0x250>
 800c874:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c878:	d008      	beq.n	800c88c <UART_SetConfig+0x260>
 800c87a:	e00f      	b.n	800c89c <UART_SetConfig+0x270>
 800c87c:	2300      	movs	r3, #0
 800c87e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c882:	e052      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c884:	2302      	movs	r3, #2
 800c886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c88a:	e04e      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c88c:	2304      	movs	r3, #4
 800c88e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c892:	e04a      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c894:	2308      	movs	r3, #8
 800c896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c89a:	e046      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c89c:	2310      	movs	r3, #16
 800c89e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c8a2:	e042      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	4a17      	ldr	r2, [pc, #92]	@ (800c908 <UART_SetConfig+0x2dc>)
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d13a      	bne.n	800c924 <UART_SetConfig+0x2f8>
 800c8ae:	4b18      	ldr	r3, [pc, #96]	@ (800c910 <UART_SetConfig+0x2e4>)
 800c8b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c8b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c8b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c8bc:	d01a      	beq.n	800c8f4 <UART_SetConfig+0x2c8>
 800c8be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c8c2:	d81b      	bhi.n	800c8fc <UART_SetConfig+0x2d0>
 800c8c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c8c8:	d00c      	beq.n	800c8e4 <UART_SetConfig+0x2b8>
 800c8ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c8ce:	d815      	bhi.n	800c8fc <UART_SetConfig+0x2d0>
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d003      	beq.n	800c8dc <UART_SetConfig+0x2b0>
 800c8d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c8d8:	d008      	beq.n	800c8ec <UART_SetConfig+0x2c0>
 800c8da:	e00f      	b.n	800c8fc <UART_SetConfig+0x2d0>
 800c8dc:	2300      	movs	r3, #0
 800c8de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c8e2:	e022      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c8e4:	2302      	movs	r3, #2
 800c8e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c8ea:	e01e      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c8ec:	2304      	movs	r3, #4
 800c8ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c8f2:	e01a      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c8f4:	2308      	movs	r3, #8
 800c8f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c8fa:	e016      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c8fc:	2310      	movs	r3, #16
 800c8fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c902:	e012      	b.n	800c92a <UART_SetConfig+0x2fe>
 800c904:	cfff69f3 	.word	0xcfff69f3
 800c908:	40008000 	.word	0x40008000
 800c90c:	40013800 	.word	0x40013800
 800c910:	40021000 	.word	0x40021000
 800c914:	40004400 	.word	0x40004400
 800c918:	40004800 	.word	0x40004800
 800c91c:	40004c00 	.word	0x40004c00
 800c920:	40005000 	.word	0x40005000
 800c924:	2310      	movs	r3, #16
 800c926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	4aae      	ldr	r2, [pc, #696]	@ (800cbe8 <UART_SetConfig+0x5bc>)
 800c930:	4293      	cmp	r3, r2
 800c932:	f040 8097 	bne.w	800ca64 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c936:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c93a:	2b08      	cmp	r3, #8
 800c93c:	d823      	bhi.n	800c986 <UART_SetConfig+0x35a>
 800c93e:	a201      	add	r2, pc, #4	@ (adr r2, 800c944 <UART_SetConfig+0x318>)
 800c940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c944:	0800c969 	.word	0x0800c969
 800c948:	0800c987 	.word	0x0800c987
 800c94c:	0800c971 	.word	0x0800c971
 800c950:	0800c987 	.word	0x0800c987
 800c954:	0800c977 	.word	0x0800c977
 800c958:	0800c987 	.word	0x0800c987
 800c95c:	0800c987 	.word	0x0800c987
 800c960:	0800c987 	.word	0x0800c987
 800c964:	0800c97f 	.word	0x0800c97f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c968:	f7fc fc82 	bl	8009270 <HAL_RCC_GetPCLK1Freq>
 800c96c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c96e:	e010      	b.n	800c992 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c970:	4b9e      	ldr	r3, [pc, #632]	@ (800cbec <UART_SetConfig+0x5c0>)
 800c972:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c974:	e00d      	b.n	800c992 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c976:	f7fc fc0d 	bl	8009194 <HAL_RCC_GetSysClockFreq>
 800c97a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c97c:	e009      	b.n	800c992 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c97e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c982:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c984:	e005      	b.n	800c992 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c986:	2300      	movs	r3, #0
 800c988:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c98a:	2301      	movs	r3, #1
 800c98c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c990:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c994:	2b00      	cmp	r3, #0
 800c996:	f000 8130 	beq.w	800cbfa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c99e:	4a94      	ldr	r2, [pc, #592]	@ (800cbf0 <UART_SetConfig+0x5c4>)
 800c9a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	685a      	ldr	r2, [r3, #4]
 800c9b2:	4613      	mov	r3, r2
 800c9b4:	005b      	lsls	r3, r3, #1
 800c9b6:	4413      	add	r3, r2
 800c9b8:	69ba      	ldr	r2, [r7, #24]
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d305      	bcc.n	800c9ca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9c4:	69ba      	ldr	r2, [r7, #24]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d903      	bls.n	800c9d2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c9d0:	e113      	b.n	800cbfa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c9d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	60bb      	str	r3, [r7, #8]
 800c9d8:	60fa      	str	r2, [r7, #12]
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9de:	4a84      	ldr	r2, [pc, #528]	@ (800cbf0 <UART_SetConfig+0x5c4>)
 800c9e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	603b      	str	r3, [r7, #0]
 800c9ea:	607a      	str	r2, [r7, #4]
 800c9ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c9f4:	f7f4 f8ec 	bl	8000bd0 <__aeabi_uldivmod>
 800c9f8:	4602      	mov	r2, r0
 800c9fa:	460b      	mov	r3, r1
 800c9fc:	4610      	mov	r0, r2
 800c9fe:	4619      	mov	r1, r3
 800ca00:	f04f 0200 	mov.w	r2, #0
 800ca04:	f04f 0300 	mov.w	r3, #0
 800ca08:	020b      	lsls	r3, r1, #8
 800ca0a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ca0e:	0202      	lsls	r2, r0, #8
 800ca10:	6979      	ldr	r1, [r7, #20]
 800ca12:	6849      	ldr	r1, [r1, #4]
 800ca14:	0849      	lsrs	r1, r1, #1
 800ca16:	2000      	movs	r0, #0
 800ca18:	460c      	mov	r4, r1
 800ca1a:	4605      	mov	r5, r0
 800ca1c:	eb12 0804 	adds.w	r8, r2, r4
 800ca20:	eb43 0905 	adc.w	r9, r3, r5
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	685b      	ldr	r3, [r3, #4]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	469a      	mov	sl, r3
 800ca2c:	4693      	mov	fp, r2
 800ca2e:	4652      	mov	r2, sl
 800ca30:	465b      	mov	r3, fp
 800ca32:	4640      	mov	r0, r8
 800ca34:	4649      	mov	r1, r9
 800ca36:	f7f4 f8cb 	bl	8000bd0 <__aeabi_uldivmod>
 800ca3a:	4602      	mov	r2, r0
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	4613      	mov	r3, r2
 800ca40:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ca42:	6a3b      	ldr	r3, [r7, #32]
 800ca44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ca48:	d308      	bcc.n	800ca5c <UART_SetConfig+0x430>
 800ca4a:	6a3b      	ldr	r3, [r7, #32]
 800ca4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ca50:	d204      	bcs.n	800ca5c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	6a3a      	ldr	r2, [r7, #32]
 800ca58:	60da      	str	r2, [r3, #12]
 800ca5a:	e0ce      	b.n	800cbfa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ca62:	e0ca      	b.n	800cbfa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	69db      	ldr	r3, [r3, #28]
 800ca68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ca6c:	d166      	bne.n	800cb3c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ca6e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ca72:	2b08      	cmp	r3, #8
 800ca74:	d827      	bhi.n	800cac6 <UART_SetConfig+0x49a>
 800ca76:	a201      	add	r2, pc, #4	@ (adr r2, 800ca7c <UART_SetConfig+0x450>)
 800ca78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca7c:	0800caa1 	.word	0x0800caa1
 800ca80:	0800caa9 	.word	0x0800caa9
 800ca84:	0800cab1 	.word	0x0800cab1
 800ca88:	0800cac7 	.word	0x0800cac7
 800ca8c:	0800cab7 	.word	0x0800cab7
 800ca90:	0800cac7 	.word	0x0800cac7
 800ca94:	0800cac7 	.word	0x0800cac7
 800ca98:	0800cac7 	.word	0x0800cac7
 800ca9c:	0800cabf 	.word	0x0800cabf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800caa0:	f7fc fbe6 	bl	8009270 <HAL_RCC_GetPCLK1Freq>
 800caa4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800caa6:	e014      	b.n	800cad2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800caa8:	f7fc fbf8 	bl	800929c <HAL_RCC_GetPCLK2Freq>
 800caac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800caae:	e010      	b.n	800cad2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cab0:	4b4e      	ldr	r3, [pc, #312]	@ (800cbec <UART_SetConfig+0x5c0>)
 800cab2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cab4:	e00d      	b.n	800cad2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cab6:	f7fc fb6d 	bl	8009194 <HAL_RCC_GetSysClockFreq>
 800caba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cabc:	e009      	b.n	800cad2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cabe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cac2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cac4:	e005      	b.n	800cad2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800cac6:	2300      	movs	r3, #0
 800cac8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800caca:	2301      	movs	r3, #1
 800cacc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800cad0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	f000 8090 	beq.w	800cbfa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cade:	4a44      	ldr	r2, [pc, #272]	@ (800cbf0 <UART_SetConfig+0x5c4>)
 800cae0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cae4:	461a      	mov	r2, r3
 800cae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cae8:	fbb3 f3f2 	udiv	r3, r3, r2
 800caec:	005a      	lsls	r2, r3, #1
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	085b      	lsrs	r3, r3, #1
 800caf4:	441a      	add	r2, r3
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	fbb2 f3f3 	udiv	r3, r2, r3
 800cafe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb00:	6a3b      	ldr	r3, [r7, #32]
 800cb02:	2b0f      	cmp	r3, #15
 800cb04:	d916      	bls.n	800cb34 <UART_SetConfig+0x508>
 800cb06:	6a3b      	ldr	r3, [r7, #32]
 800cb08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cb0c:	d212      	bcs.n	800cb34 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cb0e:	6a3b      	ldr	r3, [r7, #32]
 800cb10:	b29b      	uxth	r3, r3
 800cb12:	f023 030f 	bic.w	r3, r3, #15
 800cb16:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cb18:	6a3b      	ldr	r3, [r7, #32]
 800cb1a:	085b      	lsrs	r3, r3, #1
 800cb1c:	b29b      	uxth	r3, r3
 800cb1e:	f003 0307 	and.w	r3, r3, #7
 800cb22:	b29a      	uxth	r2, r3
 800cb24:	8bfb      	ldrh	r3, [r7, #30]
 800cb26:	4313      	orrs	r3, r2
 800cb28:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	8bfa      	ldrh	r2, [r7, #30]
 800cb30:	60da      	str	r2, [r3, #12]
 800cb32:	e062      	b.n	800cbfa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800cb34:	2301      	movs	r3, #1
 800cb36:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800cb3a:	e05e      	b.n	800cbfa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cb3c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800cb40:	2b08      	cmp	r3, #8
 800cb42:	d828      	bhi.n	800cb96 <UART_SetConfig+0x56a>
 800cb44:	a201      	add	r2, pc, #4	@ (adr r2, 800cb4c <UART_SetConfig+0x520>)
 800cb46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb4a:	bf00      	nop
 800cb4c:	0800cb71 	.word	0x0800cb71
 800cb50:	0800cb79 	.word	0x0800cb79
 800cb54:	0800cb81 	.word	0x0800cb81
 800cb58:	0800cb97 	.word	0x0800cb97
 800cb5c:	0800cb87 	.word	0x0800cb87
 800cb60:	0800cb97 	.word	0x0800cb97
 800cb64:	0800cb97 	.word	0x0800cb97
 800cb68:	0800cb97 	.word	0x0800cb97
 800cb6c:	0800cb8f 	.word	0x0800cb8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb70:	f7fc fb7e 	bl	8009270 <HAL_RCC_GetPCLK1Freq>
 800cb74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cb76:	e014      	b.n	800cba2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb78:	f7fc fb90 	bl	800929c <HAL_RCC_GetPCLK2Freq>
 800cb7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cb7e:	e010      	b.n	800cba2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cb80:	4b1a      	ldr	r3, [pc, #104]	@ (800cbec <UART_SetConfig+0x5c0>)
 800cb82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cb84:	e00d      	b.n	800cba2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cb86:	f7fc fb05 	bl	8009194 <HAL_RCC_GetSysClockFreq>
 800cb8a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cb8c:	e009      	b.n	800cba2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cb92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cb94:	e005      	b.n	800cba2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800cb96:	2300      	movs	r3, #0
 800cb98:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800cba0:	bf00      	nop
    }

    if (pclk != 0U)
 800cba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d028      	beq.n	800cbfa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbac:	4a10      	ldr	r2, [pc, #64]	@ (800cbf0 <UART_SetConfig+0x5c4>)
 800cbae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbb2:	461a      	mov	r2, r3
 800cbb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbb6:	fbb3 f2f2 	udiv	r2, r3, r2
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	085b      	lsrs	r3, r3, #1
 800cbc0:	441a      	add	r2, r3
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cbcc:	6a3b      	ldr	r3, [r7, #32]
 800cbce:	2b0f      	cmp	r3, #15
 800cbd0:	d910      	bls.n	800cbf4 <UART_SetConfig+0x5c8>
 800cbd2:	6a3b      	ldr	r3, [r7, #32]
 800cbd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cbd8:	d20c      	bcs.n	800cbf4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cbda:	6a3b      	ldr	r3, [r7, #32]
 800cbdc:	b29a      	uxth	r2, r3
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	60da      	str	r2, [r3, #12]
 800cbe4:	e009      	b.n	800cbfa <UART_SetConfig+0x5ce>
 800cbe6:	bf00      	nop
 800cbe8:	40008000 	.word	0x40008000
 800cbec:	00f42400 	.word	0x00f42400
 800cbf0:	0800e894 	.word	0x0800e894
      }
      else
      {
        ret = HAL_ERROR;
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	2201      	movs	r2, #1
 800cbfe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	2201      	movs	r2, #1
 800cc06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	2200      	movs	r2, #0
 800cc14:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cc16:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3730      	adds	r7, #48	@ 0x30
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800cc24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cc24:	b480      	push	{r7}
 800cc26:	b083      	sub	sp, #12
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc30:	f003 0308 	and.w	r3, r3, #8
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d00a      	beq.n	800cc4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	430a      	orrs	r2, r1
 800cc4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc52:	f003 0301 	and.w	r3, r3, #1
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d00a      	beq.n	800cc70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	430a      	orrs	r2, r1
 800cc6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc74:	f003 0302 	and.w	r3, r3, #2
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d00a      	beq.n	800cc92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	430a      	orrs	r2, r1
 800cc90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc96:	f003 0304 	and.w	r3, r3, #4
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d00a      	beq.n	800ccb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	430a      	orrs	r2, r1
 800ccb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccb8:	f003 0310 	and.w	r3, r3, #16
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d00a      	beq.n	800ccd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	689b      	ldr	r3, [r3, #8]
 800ccc6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	430a      	orrs	r2, r1
 800ccd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccda:	f003 0320 	and.w	r3, r3, #32
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d00a      	beq.n	800ccf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	689b      	ldr	r3, [r3, #8]
 800cce8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	430a      	orrs	r2, r1
 800ccf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d01a      	beq.n	800cd3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	685b      	ldr	r3, [r3, #4]
 800cd0a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	430a      	orrs	r2, r1
 800cd18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cd22:	d10a      	bne.n	800cd3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	430a      	orrs	r2, r1
 800cd38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d00a      	beq.n	800cd5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	685b      	ldr	r3, [r3, #4]
 800cd4c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	430a      	orrs	r2, r1
 800cd5a:	605a      	str	r2, [r3, #4]
  }
}
 800cd5c:	bf00      	nop
 800cd5e:	370c      	adds	r7, #12
 800cd60:	46bd      	mov	sp, r7
 800cd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd66:	4770      	bx	lr

0800cd68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b098      	sub	sp, #96	@ 0x60
 800cd6c:	af02      	add	r7, sp, #8
 800cd6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2200      	movs	r2, #0
 800cd74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cd78:	f7f9 f8d0 	bl	8005f1c <HAL_GetTick>
 800cd7c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f003 0308 	and.w	r3, r3, #8
 800cd88:	2b08      	cmp	r3, #8
 800cd8a:	d12f      	bne.n	800cdec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cd8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cd90:	9300      	str	r3, [sp, #0]
 800cd92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd94:	2200      	movs	r2, #0
 800cd96:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f000 f88e 	bl	800cebc <UART_WaitOnFlagUntilTimeout>
 800cda0:	4603      	mov	r3, r0
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d022      	beq.n	800cdec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdae:	e853 3f00 	ldrex	r3, [r3]
 800cdb2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cdb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cdba:	653b      	str	r3, [r7, #80]	@ 0x50
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	461a      	mov	r2, r3
 800cdc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdc4:	647b      	str	r3, [r7, #68]	@ 0x44
 800cdc6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdc8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cdca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cdcc:	e841 2300 	strex	r3, r2, [r1]
 800cdd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cdd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d1e6      	bne.n	800cda6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2220      	movs	r2, #32
 800cddc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2200      	movs	r2, #0
 800cde4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cde8:	2303      	movs	r3, #3
 800cdea:	e063      	b.n	800ceb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f003 0304 	and.w	r3, r3, #4
 800cdf6:	2b04      	cmp	r3, #4
 800cdf8:	d149      	bne.n	800ce8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cdfa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cdfe:	9300      	str	r3, [sp, #0]
 800ce00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce02:	2200      	movs	r2, #0
 800ce04:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f000 f857 	bl	800cebc <UART_WaitOnFlagUntilTimeout>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d03c      	beq.n	800ce8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce1c:	e853 3f00 	ldrex	r3, [r3]
 800ce20:	623b      	str	r3, [r7, #32]
   return(result);
 800ce22:	6a3b      	ldr	r3, [r7, #32]
 800ce24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ce28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	461a      	mov	r2, r3
 800ce30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce32:	633b      	str	r3, [r7, #48]	@ 0x30
 800ce34:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ce38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce3a:	e841 2300 	strex	r3, r2, [r1]
 800ce3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ce40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d1e6      	bne.n	800ce14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	3308      	adds	r3, #8
 800ce4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	e853 3f00 	ldrex	r3, [r3]
 800ce54:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	f023 0301 	bic.w	r3, r3, #1
 800ce5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	3308      	adds	r3, #8
 800ce64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ce66:	61fa      	str	r2, [r7, #28]
 800ce68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce6a:	69b9      	ldr	r1, [r7, #24]
 800ce6c:	69fa      	ldr	r2, [r7, #28]
 800ce6e:	e841 2300 	strex	r3, r2, [r1]
 800ce72:	617b      	str	r3, [r7, #20]
   return(result);
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d1e5      	bne.n	800ce46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2220      	movs	r2, #32
 800ce7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2200      	movs	r2, #0
 800ce86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce8a:	2303      	movs	r3, #3
 800ce8c:	e012      	b.n	800ceb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2220      	movs	r2, #32
 800ce92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2220      	movs	r2, #32
 800ce9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2200      	movs	r2, #0
 800cea2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2200      	movs	r2, #0
 800cea8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2200      	movs	r2, #0
 800ceae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ceb2:	2300      	movs	r3, #0
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3758      	adds	r7, #88	@ 0x58
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b084      	sub	sp, #16
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	603b      	str	r3, [r7, #0]
 800cec8:	4613      	mov	r3, r2
 800ceca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cecc:	e04f      	b.n	800cf6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cece:	69bb      	ldr	r3, [r7, #24]
 800ced0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ced4:	d04b      	beq.n	800cf6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ced6:	f7f9 f821 	bl	8005f1c <HAL_GetTick>
 800ceda:	4602      	mov	r2, r0
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	1ad3      	subs	r3, r2, r3
 800cee0:	69ba      	ldr	r2, [r7, #24]
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d302      	bcc.n	800ceec <UART_WaitOnFlagUntilTimeout+0x30>
 800cee6:	69bb      	ldr	r3, [r7, #24]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d101      	bne.n	800cef0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ceec:	2303      	movs	r3, #3
 800ceee:	e04e      	b.n	800cf8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f003 0304 	and.w	r3, r3, #4
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d037      	beq.n	800cf6e <UART_WaitOnFlagUntilTimeout+0xb2>
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	2b80      	cmp	r3, #128	@ 0x80
 800cf02:	d034      	beq.n	800cf6e <UART_WaitOnFlagUntilTimeout+0xb2>
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	2b40      	cmp	r3, #64	@ 0x40
 800cf08:	d031      	beq.n	800cf6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	69db      	ldr	r3, [r3, #28]
 800cf10:	f003 0308 	and.w	r3, r3, #8
 800cf14:	2b08      	cmp	r3, #8
 800cf16:	d110      	bne.n	800cf3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	2208      	movs	r2, #8
 800cf1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cf20:	68f8      	ldr	r0, [r7, #12]
 800cf22:	f000 f920 	bl	800d166 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	2208      	movs	r2, #8
 800cf2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	2200      	movs	r2, #0
 800cf32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cf36:	2301      	movs	r3, #1
 800cf38:	e029      	b.n	800cf8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	69db      	ldr	r3, [r3, #28]
 800cf40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cf44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cf48:	d111      	bne.n	800cf6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cf52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cf54:	68f8      	ldr	r0, [r7, #12]
 800cf56:	f000 f906 	bl	800d166 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	2220      	movs	r2, #32
 800cf5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	2200      	movs	r2, #0
 800cf66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cf6a:	2303      	movs	r3, #3
 800cf6c:	e00f      	b.n	800cf8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	69da      	ldr	r2, [r3, #28]
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	4013      	ands	r3, r2
 800cf78:	68ba      	ldr	r2, [r7, #8]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	bf0c      	ite	eq
 800cf7e:	2301      	moveq	r3, #1
 800cf80:	2300      	movne	r3, #0
 800cf82:	b2db      	uxtb	r3, r3
 800cf84:	461a      	mov	r2, r3
 800cf86:	79fb      	ldrb	r3, [r7, #7]
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	d0a0      	beq.n	800cece <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cf8c:	2300      	movs	r3, #0
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	3710      	adds	r7, #16
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
	...

0800cf98 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b096      	sub	sp, #88	@ 0x58
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	60f8      	str	r0, [r7, #12]
 800cfa0:	60b9      	str	r1, [r7, #8]
 800cfa2:	4613      	mov	r3, r2
 800cfa4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	68ba      	ldr	r2, [r7, #8]
 800cfaa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	88fa      	ldrh	r2, [r7, #6]
 800cfb0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	2222      	movs	r2, #34	@ 0x22
 800cfc0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d02d      	beq.n	800d02a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfd4:	4a40      	ldr	r2, [pc, #256]	@ (800d0d8 <UART_Start_Receive_DMA+0x140>)
 800cfd6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfde:	4a3f      	ldr	r2, [pc, #252]	@ (800d0dc <UART_Start_Receive_DMA+0x144>)
 800cfe0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfe8:	4a3d      	ldr	r2, [pc, #244]	@ (800d0e0 <UART_Start_Receive_DMA+0x148>)
 800cfea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cff2:	2200      	movs	r2, #0
 800cff4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	3324      	adds	r3, #36	@ 0x24
 800d002:	4619      	mov	r1, r3
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d008:	461a      	mov	r2, r3
 800d00a:	88fb      	ldrh	r3, [r7, #6]
 800d00c:	f7fa ff6c 	bl	8007ee8 <HAL_DMA_Start_IT>
 800d010:	4603      	mov	r3, r0
 800d012:	2b00      	cmp	r3, #0
 800d014:	d009      	beq.n	800d02a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2210      	movs	r2, #16
 800d01a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2220      	movs	r2, #32
 800d022:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800d026:	2301      	movs	r3, #1
 800d028:	e051      	b.n	800d0ce <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	691b      	ldr	r3, [r3, #16]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d018      	beq.n	800d064 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d03a:	e853 3f00 	ldrex	r3, [r3]
 800d03e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d042:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d046:	657b      	str	r3, [r7, #84]	@ 0x54
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	461a      	mov	r2, r3
 800d04e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d050:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d052:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d054:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d056:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d058:	e841 2300 	strex	r3, r2, [r1]
 800d05c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d05e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d060:	2b00      	cmp	r3, #0
 800d062:	d1e6      	bne.n	800d032 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	3308      	adds	r3, #8
 800d06a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d06c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d06e:	e853 3f00 	ldrex	r3, [r3]
 800d072:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d076:	f043 0301 	orr.w	r3, r3, #1
 800d07a:	653b      	str	r3, [r7, #80]	@ 0x50
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	3308      	adds	r3, #8
 800d082:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d084:	637a      	str	r2, [r7, #52]	@ 0x34
 800d086:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d088:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d08a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d08c:	e841 2300 	strex	r3, r2, [r1]
 800d090:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d094:	2b00      	cmp	r3, #0
 800d096:	d1e5      	bne.n	800d064 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	3308      	adds	r3, #8
 800d09e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	e853 3f00 	ldrex	r3, [r3]
 800d0a6:	613b      	str	r3, [r7, #16]
   return(result);
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	3308      	adds	r3, #8
 800d0b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d0b8:	623a      	str	r2, [r7, #32]
 800d0ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0bc:	69f9      	ldr	r1, [r7, #28]
 800d0be:	6a3a      	ldr	r2, [r7, #32]
 800d0c0:	e841 2300 	strex	r3, r2, [r1]
 800d0c4:	61bb      	str	r3, [r7, #24]
   return(result);
 800d0c6:	69bb      	ldr	r3, [r7, #24]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d1e5      	bne.n	800d098 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800d0cc:	2300      	movs	r3, #0
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3758      	adds	r7, #88	@ 0x58
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	0800d2f1 	.word	0x0800d2f1
 800d0dc:	0800d425 	.word	0x0800d425
 800d0e0:	0800d46b 	.word	0x0800d46b

0800d0e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b08f      	sub	sp, #60	@ 0x3c
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0f2:	6a3b      	ldr	r3, [r7, #32]
 800d0f4:	e853 3f00 	ldrex	r3, [r3]
 800d0f8:	61fb      	str	r3, [r7, #28]
   return(result);
 800d0fa:	69fb      	ldr	r3, [r7, #28]
 800d0fc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d100:	637b      	str	r3, [r7, #52]	@ 0x34
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	461a      	mov	r2, r3
 800d108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d10a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d10c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d10e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d110:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d112:	e841 2300 	strex	r3, r2, [r1]
 800d116:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d1e6      	bne.n	800d0ec <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	3308      	adds	r3, #8
 800d124:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	e853 3f00 	ldrex	r3, [r3]
 800d12c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d134:	633b      	str	r3, [r7, #48]	@ 0x30
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	3308      	adds	r3, #8
 800d13c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d13e:	61ba      	str	r2, [r7, #24]
 800d140:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d142:	6979      	ldr	r1, [r7, #20]
 800d144:	69ba      	ldr	r2, [r7, #24]
 800d146:	e841 2300 	strex	r3, r2, [r1]
 800d14a:	613b      	str	r3, [r7, #16]
   return(result);
 800d14c:	693b      	ldr	r3, [r7, #16]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d1e5      	bne.n	800d11e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2220      	movs	r2, #32
 800d156:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800d15a:	bf00      	nop
 800d15c:	373c      	adds	r7, #60	@ 0x3c
 800d15e:	46bd      	mov	sp, r7
 800d160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d164:	4770      	bx	lr

0800d166 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d166:	b480      	push	{r7}
 800d168:	b095      	sub	sp, #84	@ 0x54
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d176:	e853 3f00 	ldrex	r3, [r3]
 800d17a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d17e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d182:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	461a      	mov	r2, r3
 800d18a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d18c:	643b      	str	r3, [r7, #64]	@ 0x40
 800d18e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d190:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d192:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d194:	e841 2300 	strex	r3, r2, [r1]
 800d198:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d1e6      	bne.n	800d16e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	3308      	adds	r3, #8
 800d1a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1a8:	6a3b      	ldr	r3, [r7, #32]
 800d1aa:	e853 3f00 	ldrex	r3, [r3]
 800d1ae:	61fb      	str	r3, [r7, #28]
   return(result);
 800d1b0:	69fb      	ldr	r3, [r7, #28]
 800d1b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d1b6:	f023 0301 	bic.w	r3, r3, #1
 800d1ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	3308      	adds	r3, #8
 800d1c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d1c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d1c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d1ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d1cc:	e841 2300 	strex	r3, r2, [r1]
 800d1d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d1e3      	bne.n	800d1a0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1dc:	2b01      	cmp	r3, #1
 800d1de:	d118      	bne.n	800d212 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	e853 3f00 	ldrex	r3, [r3]
 800d1ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	f023 0310 	bic.w	r3, r3, #16
 800d1f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1fe:	61bb      	str	r3, [r7, #24]
 800d200:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d202:	6979      	ldr	r1, [r7, #20]
 800d204:	69ba      	ldr	r2, [r7, #24]
 800d206:	e841 2300 	strex	r3, r2, [r1]
 800d20a:	613b      	str	r3, [r7, #16]
   return(result);
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d1e6      	bne.n	800d1e0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2220      	movs	r2, #32
 800d216:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2200      	movs	r2, #0
 800d21e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2200      	movs	r2, #0
 800d224:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d226:	bf00      	nop
 800d228:	3754      	adds	r7, #84	@ 0x54
 800d22a:	46bd      	mov	sp, r7
 800d22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d230:	4770      	bx	lr

0800d232 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d232:	b580      	push	{r7, lr}
 800d234:	b090      	sub	sp, #64	@ 0x40
 800d236:	af00      	add	r7, sp, #0
 800d238:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d23e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f003 0320 	and.w	r3, r3, #32
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d137      	bne.n	800d2be <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800d24e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d250:	2200      	movs	r2, #0
 800d252:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d256:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	3308      	adds	r3, #8
 800d25c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d260:	e853 3f00 	ldrex	r3, [r3]
 800d264:	623b      	str	r3, [r7, #32]
   return(result);
 800d266:	6a3b      	ldr	r3, [r7, #32]
 800d268:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d26c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d26e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	3308      	adds	r3, #8
 800d274:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d276:	633a      	str	r2, [r7, #48]	@ 0x30
 800d278:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d27a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d27c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d27e:	e841 2300 	strex	r3, r2, [r1]
 800d282:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d286:	2b00      	cmp	r3, #0
 800d288:	d1e5      	bne.n	800d256 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d28a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	e853 3f00 	ldrex	r3, [r3]
 800d296:	60fb      	str	r3, [r7, #12]
   return(result);
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d29e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	461a      	mov	r2, r3
 800d2a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2a8:	61fb      	str	r3, [r7, #28]
 800d2aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ac:	69b9      	ldr	r1, [r7, #24]
 800d2ae:	69fa      	ldr	r2, [r7, #28]
 800d2b0:	e841 2300 	strex	r3, r2, [r1]
 800d2b4:	617b      	str	r3, [r7, #20]
   return(result);
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d1e6      	bne.n	800d28a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d2bc:	e004      	b.n	800d2c8 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800d2be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d2c4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d2c6:	4798      	blx	r3
}
 800d2c8:	bf00      	nop
 800d2ca:	3740      	adds	r7, #64	@ 0x40
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}

0800d2d0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b084      	sub	sp, #16
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2dc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d2e4:	68f8      	ldr	r0, [r7, #12]
 800d2e6:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d2e8:	bf00      	nop
 800d2ea:	3710      	adds	r7, #16
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}

0800d2f0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b09c      	sub	sp, #112	@ 0x70
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2fc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f003 0320 	and.w	r3, r3, #32
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d171      	bne.n	800d3f0 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800d30c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d30e:	2200      	movs	r2, #0
 800d310:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d314:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d31a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d31c:	e853 3f00 	ldrex	r3, [r3]
 800d320:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d322:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d324:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d328:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d32a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	461a      	mov	r2, r3
 800d330:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d332:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d334:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d336:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d338:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d33a:	e841 2300 	strex	r3, r2, [r1]
 800d33e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d340:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d342:	2b00      	cmp	r3, #0
 800d344:	d1e6      	bne.n	800d314 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d346:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	3308      	adds	r3, #8
 800d34c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d34e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d350:	e853 3f00 	ldrex	r3, [r3]
 800d354:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d358:	f023 0301 	bic.w	r3, r3, #1
 800d35c:	667b      	str	r3, [r7, #100]	@ 0x64
 800d35e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	3308      	adds	r3, #8
 800d364:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d366:	647a      	str	r2, [r7, #68]	@ 0x44
 800d368:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d36a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d36c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d36e:	e841 2300 	strex	r3, r2, [r1]
 800d372:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d376:	2b00      	cmp	r3, #0
 800d378:	d1e5      	bne.n	800d346 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d37a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	3308      	adds	r3, #8
 800d380:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d384:	e853 3f00 	ldrex	r3, [r3]
 800d388:	623b      	str	r3, [r7, #32]
   return(result);
 800d38a:	6a3b      	ldr	r3, [r7, #32]
 800d38c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d390:	663b      	str	r3, [r7, #96]	@ 0x60
 800d392:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	3308      	adds	r3, #8
 800d398:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d39a:	633a      	str	r2, [r7, #48]	@ 0x30
 800d39c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d39e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d3a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d3a2:	e841 2300 	strex	r3, r2, [r1]
 800d3a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d1e5      	bne.n	800d37a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d3ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3b0:	2220      	movs	r2, #32
 800d3b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3ba:	2b01      	cmp	r3, #1
 800d3bc:	d118      	bne.n	800d3f0 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3c4:	693b      	ldr	r3, [r7, #16]
 800d3c6:	e853 3f00 	ldrex	r3, [r3]
 800d3ca:	60fb      	str	r3, [r7, #12]
   return(result);
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	f023 0310 	bic.w	r3, r3, #16
 800d3d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d3d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	461a      	mov	r2, r3
 800d3da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d3dc:	61fb      	str	r3, [r7, #28]
 800d3de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3e0:	69b9      	ldr	r1, [r7, #24]
 800d3e2:	69fa      	ldr	r2, [r7, #28]
 800d3e4:	e841 2300 	strex	r3, r2, [r1]
 800d3e8:	617b      	str	r3, [r7, #20]
   return(result);
 800d3ea:	697b      	ldr	r3, [r7, #20]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d1e6      	bne.n	800d3be <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d3f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3fa:	2b01      	cmp	r3, #1
 800d3fc:	d109      	bne.n	800d412 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800d3fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d400:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d404:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d406:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800d40a:	4611      	mov	r1, r2
 800d40c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d40e:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d410:	e004      	b.n	800d41c <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800d412:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d414:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d418:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d41a:	4798      	blx	r3
}
 800d41c:	bf00      	nop
 800d41e:	3770      	adds	r7, #112	@ 0x70
 800d420:	46bd      	mov	sp, r7
 800d422:	bd80      	pop	{r7, pc}

0800d424 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b084      	sub	sp, #16
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d430:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2201      	movs	r2, #1
 800d436:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d43c:	2b01      	cmp	r3, #1
 800d43e:	d10b      	bne.n	800d458 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d446:	68fa      	ldr	r2, [r7, #12]
 800d448:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800d44c:	0852      	lsrs	r2, r2, #1
 800d44e:	b292      	uxth	r2, r2
 800d450:	4611      	mov	r1, r2
 800d452:	68f8      	ldr	r0, [r7, #12]
 800d454:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d456:	e004      	b.n	800d462 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d45e:	68f8      	ldr	r0, [r7, #12]
 800d460:	4798      	blx	r3
}
 800d462:	bf00      	nop
 800d464:	3710      	adds	r7, #16
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}

0800d46a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d46a:	b580      	push	{r7, lr}
 800d46c:	b086      	sub	sp, #24
 800d46e:	af00      	add	r7, sp, #0
 800d470:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d476:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d47e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d486:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	689b      	ldr	r3, [r3, #8]
 800d48e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d492:	2b80      	cmp	r3, #128	@ 0x80
 800d494:	d109      	bne.n	800d4aa <UART_DMAError+0x40>
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	2b21      	cmp	r3, #33	@ 0x21
 800d49a:	d106      	bne.n	800d4aa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	2200      	movs	r2, #0
 800d4a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800d4a4:	6978      	ldr	r0, [r7, #20]
 800d4a6:	f7ff fe1d 	bl	800d0e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	689b      	ldr	r3, [r3, #8]
 800d4b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4b4:	2b40      	cmp	r3, #64	@ 0x40
 800d4b6:	d109      	bne.n	800d4cc <UART_DMAError+0x62>
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	2b22      	cmp	r3, #34	@ 0x22
 800d4bc:	d106      	bne.n	800d4cc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800d4c6:	6978      	ldr	r0, [r7, #20]
 800d4c8:	f7ff fe4d 	bl	800d166 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d4d2:	f043 0210 	orr.w	r2, r3, #16
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d4e2:	6978      	ldr	r0, [r7, #20]
 800d4e4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d4e6:	bf00      	nop
 800d4e8:	3718      	adds	r7, #24
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}

0800d4ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d4ee:	b580      	push	{r7, lr}
 800d4f0:	b084      	sub	sp, #16
 800d4f2:	af00      	add	r7, sp, #0
 800d4f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	2200      	movs	r2, #0
 800d500:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	2200      	movs	r2, #0
 800d508:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d512:	68f8      	ldr	r0, [r7, #12]
 800d514:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d516:	bf00      	nop
 800d518:	3710      	adds	r7, #16
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}

0800d51e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d51e:	b580      	push	{r7, lr}
 800d520:	b088      	sub	sp, #32
 800d522:	af00      	add	r7, sp, #0
 800d524:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	e853 3f00 	ldrex	r3, [r3]
 800d532:	60bb      	str	r3, [r7, #8]
   return(result);
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d53a:	61fb      	str	r3, [r7, #28]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	461a      	mov	r2, r3
 800d542:	69fb      	ldr	r3, [r7, #28]
 800d544:	61bb      	str	r3, [r7, #24]
 800d546:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d548:	6979      	ldr	r1, [r7, #20]
 800d54a:	69ba      	ldr	r2, [r7, #24]
 800d54c:	e841 2300 	strex	r3, r2, [r1]
 800d550:	613b      	str	r3, [r7, #16]
   return(result);
 800d552:	693b      	ldr	r3, [r7, #16]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d1e6      	bne.n	800d526 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2220      	movs	r2, #32
 800d55c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2200      	movs	r2, #0
 800d564:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d570:	bf00      	nop
 800d572:	3720      	adds	r7, #32
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d578:	b480      	push	{r7}
 800d57a:	b083      	sub	sp, #12
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d580:	bf00      	nop
 800d582:	370c      	adds	r7, #12
 800d584:	46bd      	mov	sp, r7
 800d586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58a:	4770      	bx	lr

0800d58c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d58c:	b480      	push	{r7}
 800d58e:	b083      	sub	sp, #12
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d594:	bf00      	nop
 800d596:	370c      	adds	r7, #12
 800d598:	46bd      	mov	sp, r7
 800d59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59e:	4770      	bx	lr

0800d5a0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b083      	sub	sp, #12
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d5a8:	bf00      	nop
 800d5aa:	370c      	adds	r7, #12
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b2:	4770      	bx	lr

0800d5b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b085      	sub	sp, #20
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d5c2:	2b01      	cmp	r3, #1
 800d5c4:	d101      	bne.n	800d5ca <HAL_UARTEx_DisableFifoMode+0x16>
 800d5c6:	2302      	movs	r3, #2
 800d5c8:	e027      	b.n	800d61a <HAL_UARTEx_DisableFifoMode+0x66>
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2201      	movs	r2, #1
 800d5ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2224      	movs	r2, #36	@ 0x24
 800d5d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	681a      	ldr	r2, [r3, #0]
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f022 0201 	bic.w	r2, r2, #1
 800d5f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d5f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	68fa      	ldr	r2, [r7, #12]
 800d606:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2220      	movs	r2, #32
 800d60c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2200      	movs	r2, #0
 800d614:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d618:	2300      	movs	r3, #0
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3714      	adds	r7, #20
 800d61e:	46bd      	mov	sp, r7
 800d620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d624:	4770      	bx	lr

0800d626 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d626:	b580      	push	{r7, lr}
 800d628:	b084      	sub	sp, #16
 800d62a:	af00      	add	r7, sp, #0
 800d62c:	6078      	str	r0, [r7, #4]
 800d62e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d636:	2b01      	cmp	r3, #1
 800d638:	d101      	bne.n	800d63e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d63a:	2302      	movs	r3, #2
 800d63c:	e02d      	b.n	800d69a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2201      	movs	r2, #1
 800d642:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2224      	movs	r2, #36	@ 0x24
 800d64a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	681a      	ldr	r2, [r3, #0]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	f022 0201 	bic.w	r2, r2, #1
 800d664:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	689b      	ldr	r3, [r3, #8]
 800d66c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	683a      	ldr	r2, [r7, #0]
 800d676:	430a      	orrs	r2, r1
 800d678:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f000 f850 	bl	800d720 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	68fa      	ldr	r2, [r7, #12]
 800d686:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2220      	movs	r2, #32
 800d68c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2200      	movs	r2, #0
 800d694:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d698:	2300      	movs	r3, #0
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3710      	adds	r7, #16
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}

0800d6a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d6a2:	b580      	push	{r7, lr}
 800d6a4:	b084      	sub	sp, #16
 800d6a6:	af00      	add	r7, sp, #0
 800d6a8:	6078      	str	r0, [r7, #4]
 800d6aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d6b2:	2b01      	cmp	r3, #1
 800d6b4:	d101      	bne.n	800d6ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d6b6:	2302      	movs	r3, #2
 800d6b8:	e02d      	b.n	800d716 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2201      	movs	r2, #1
 800d6be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2224      	movs	r2, #36	@ 0x24
 800d6c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	681a      	ldr	r2, [r3, #0]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f022 0201 	bic.w	r2, r2, #1
 800d6e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	689b      	ldr	r3, [r3, #8]
 800d6e8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	683a      	ldr	r2, [r7, #0]
 800d6f2:	430a      	orrs	r2, r1
 800d6f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f000 f812 	bl	800d720 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	68fa      	ldr	r2, [r7, #12]
 800d702:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2220      	movs	r2, #32
 800d708:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2200      	movs	r2, #0
 800d710:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d714:	2300      	movs	r3, #0
}
 800d716:	4618      	mov	r0, r3
 800d718:	3710      	adds	r7, #16
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}
	...

0800d720 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d720:	b480      	push	{r7}
 800d722:	b085      	sub	sp, #20
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d108      	bne.n	800d742 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2201      	movs	r2, #1
 800d734:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2201      	movs	r2, #1
 800d73c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d740:	e031      	b.n	800d7a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d742:	2308      	movs	r3, #8
 800d744:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d746:	2308      	movs	r3, #8
 800d748:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	689b      	ldr	r3, [r3, #8]
 800d750:	0e5b      	lsrs	r3, r3, #25
 800d752:	b2db      	uxtb	r3, r3
 800d754:	f003 0307 	and.w	r3, r3, #7
 800d758:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	689b      	ldr	r3, [r3, #8]
 800d760:	0f5b      	lsrs	r3, r3, #29
 800d762:	b2db      	uxtb	r3, r3
 800d764:	f003 0307 	and.w	r3, r3, #7
 800d768:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d76a:	7bbb      	ldrb	r3, [r7, #14]
 800d76c:	7b3a      	ldrb	r2, [r7, #12]
 800d76e:	4911      	ldr	r1, [pc, #68]	@ (800d7b4 <UARTEx_SetNbDataToProcess+0x94>)
 800d770:	5c8a      	ldrb	r2, [r1, r2]
 800d772:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d776:	7b3a      	ldrb	r2, [r7, #12]
 800d778:	490f      	ldr	r1, [pc, #60]	@ (800d7b8 <UARTEx_SetNbDataToProcess+0x98>)
 800d77a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d77c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d780:	b29a      	uxth	r2, r3
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d788:	7bfb      	ldrb	r3, [r7, #15]
 800d78a:	7b7a      	ldrb	r2, [r7, #13]
 800d78c:	4909      	ldr	r1, [pc, #36]	@ (800d7b4 <UARTEx_SetNbDataToProcess+0x94>)
 800d78e:	5c8a      	ldrb	r2, [r1, r2]
 800d790:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d794:	7b7a      	ldrb	r2, [r7, #13]
 800d796:	4908      	ldr	r1, [pc, #32]	@ (800d7b8 <UARTEx_SetNbDataToProcess+0x98>)
 800d798:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d79a:	fb93 f3f2 	sdiv	r3, r3, r2
 800d79e:	b29a      	uxth	r2, r3
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d7a6:	bf00      	nop
 800d7a8:	3714      	adds	r7, #20
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b0:	4770      	bx	lr
 800d7b2:	bf00      	nop
 800d7b4:	0800e8ac 	.word	0x0800e8ac
 800d7b8:	0800e8b4 	.word	0x0800e8b4

0800d7bc <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800d7bc:	b480      	push	{r7}
 800d7be:	b085      	sub	sp, #20
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	60f8      	str	r0, [r7, #12]
 800d7c4:	607b      	str	r3, [r7, #4]
 800d7c6:	460b      	mov	r3, r1
 800d7c8:	817b      	strh	r3, [r7, #10]
 800d7ca:	4613      	mov	r3, r2
 800d7cc:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	897a      	ldrh	r2, [r7, #10]
 800d7d2:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	893a      	ldrh	r2, [r7, #8]
 800d7d8:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	687a      	ldr	r2, [r7, #4]
 800d7de:	605a      	str	r2, [r3, #4]
}
 800d7e0:	bf00      	nop
 800d7e2:	3714      	adds	r7, #20
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ea:	4770      	bx	lr

0800d7ec <memset>:
 800d7ec:	4402      	add	r2, r0
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	4293      	cmp	r3, r2
 800d7f2:	d100      	bne.n	800d7f6 <memset+0xa>
 800d7f4:	4770      	bx	lr
 800d7f6:	f803 1b01 	strb.w	r1, [r3], #1
 800d7fa:	e7f9      	b.n	800d7f0 <memset+0x4>

0800d7fc <__errno>:
 800d7fc:	4b01      	ldr	r3, [pc, #4]	@ (800d804 <__errno+0x8>)
 800d7fe:	6818      	ldr	r0, [r3, #0]
 800d800:	4770      	bx	lr
 800d802:	bf00      	nop
 800d804:	20000294 	.word	0x20000294

0800d808 <__libc_init_array>:
 800d808:	b570      	push	{r4, r5, r6, lr}
 800d80a:	4d0d      	ldr	r5, [pc, #52]	@ (800d840 <__libc_init_array+0x38>)
 800d80c:	4c0d      	ldr	r4, [pc, #52]	@ (800d844 <__libc_init_array+0x3c>)
 800d80e:	1b64      	subs	r4, r4, r5
 800d810:	10a4      	asrs	r4, r4, #2
 800d812:	2600      	movs	r6, #0
 800d814:	42a6      	cmp	r6, r4
 800d816:	d109      	bne.n	800d82c <__libc_init_array+0x24>
 800d818:	4d0b      	ldr	r5, [pc, #44]	@ (800d848 <__libc_init_array+0x40>)
 800d81a:	4c0c      	ldr	r4, [pc, #48]	@ (800d84c <__libc_init_array+0x44>)
 800d81c:	f000 ffb0 	bl	800e780 <_init>
 800d820:	1b64      	subs	r4, r4, r5
 800d822:	10a4      	asrs	r4, r4, #2
 800d824:	2600      	movs	r6, #0
 800d826:	42a6      	cmp	r6, r4
 800d828:	d105      	bne.n	800d836 <__libc_init_array+0x2e>
 800d82a:	bd70      	pop	{r4, r5, r6, pc}
 800d82c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d830:	4798      	blx	r3
 800d832:	3601      	adds	r6, #1
 800d834:	e7ee      	b.n	800d814 <__libc_init_array+0xc>
 800d836:	f855 3b04 	ldr.w	r3, [r5], #4
 800d83a:	4798      	blx	r3
 800d83c:	3601      	adds	r6, #1
 800d83e:	e7f2      	b.n	800d826 <__libc_init_array+0x1e>
 800d840:	0800e8f8 	.word	0x0800e8f8
 800d844:	0800e8f8 	.word	0x0800e8f8
 800d848:	0800e8f8 	.word	0x0800e8f8
 800d84c:	0800e8fc 	.word	0x0800e8fc

0800d850 <memcpy>:
 800d850:	440a      	add	r2, r1
 800d852:	4291      	cmp	r1, r2
 800d854:	f100 33ff 	add.w	r3, r0, #4294967295
 800d858:	d100      	bne.n	800d85c <memcpy+0xc>
 800d85a:	4770      	bx	lr
 800d85c:	b510      	push	{r4, lr}
 800d85e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d862:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d866:	4291      	cmp	r1, r2
 800d868:	d1f9      	bne.n	800d85e <memcpy+0xe>
 800d86a:	bd10      	pop	{r4, pc}

0800d86c <pow>:
 800d86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d86e:	ed2d 8b02 	vpush	{d8}
 800d872:	eeb0 8a40 	vmov.f32	s16, s0
 800d876:	eef0 8a60 	vmov.f32	s17, s1
 800d87a:	ec55 4b11 	vmov	r4, r5, d1
 800d87e:	f000 f977 	bl	800db70 <__ieee754_pow>
 800d882:	4622      	mov	r2, r4
 800d884:	462b      	mov	r3, r5
 800d886:	4620      	mov	r0, r4
 800d888:	4629      	mov	r1, r5
 800d88a:	ec57 6b10 	vmov	r6, r7, d0
 800d88e:	f7f3 f919 	bl	8000ac4 <__aeabi_dcmpun>
 800d892:	2800      	cmp	r0, #0
 800d894:	d13b      	bne.n	800d90e <pow+0xa2>
 800d896:	ec51 0b18 	vmov	r0, r1, d8
 800d89a:	2200      	movs	r2, #0
 800d89c:	2300      	movs	r3, #0
 800d89e:	f7f3 f8df 	bl	8000a60 <__aeabi_dcmpeq>
 800d8a2:	b1b8      	cbz	r0, 800d8d4 <pow+0x68>
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	4620      	mov	r0, r4
 800d8aa:	4629      	mov	r1, r5
 800d8ac:	f7f3 f8d8 	bl	8000a60 <__aeabi_dcmpeq>
 800d8b0:	2800      	cmp	r0, #0
 800d8b2:	d146      	bne.n	800d942 <pow+0xd6>
 800d8b4:	ec45 4b10 	vmov	d0, r4, r5
 800d8b8:	f000 f874 	bl	800d9a4 <finite>
 800d8bc:	b338      	cbz	r0, 800d90e <pow+0xa2>
 800d8be:	2200      	movs	r2, #0
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	4620      	mov	r0, r4
 800d8c4:	4629      	mov	r1, r5
 800d8c6:	f7f3 f8d5 	bl	8000a74 <__aeabi_dcmplt>
 800d8ca:	b300      	cbz	r0, 800d90e <pow+0xa2>
 800d8cc:	f7ff ff96 	bl	800d7fc <__errno>
 800d8d0:	2322      	movs	r3, #34	@ 0x22
 800d8d2:	e01b      	b.n	800d90c <pow+0xa0>
 800d8d4:	ec47 6b10 	vmov	d0, r6, r7
 800d8d8:	f000 f864 	bl	800d9a4 <finite>
 800d8dc:	b9e0      	cbnz	r0, 800d918 <pow+0xac>
 800d8de:	eeb0 0a48 	vmov.f32	s0, s16
 800d8e2:	eef0 0a68 	vmov.f32	s1, s17
 800d8e6:	f000 f85d 	bl	800d9a4 <finite>
 800d8ea:	b1a8      	cbz	r0, 800d918 <pow+0xac>
 800d8ec:	ec45 4b10 	vmov	d0, r4, r5
 800d8f0:	f000 f858 	bl	800d9a4 <finite>
 800d8f4:	b180      	cbz	r0, 800d918 <pow+0xac>
 800d8f6:	4632      	mov	r2, r6
 800d8f8:	463b      	mov	r3, r7
 800d8fa:	4630      	mov	r0, r6
 800d8fc:	4639      	mov	r1, r7
 800d8fe:	f7f3 f8e1 	bl	8000ac4 <__aeabi_dcmpun>
 800d902:	2800      	cmp	r0, #0
 800d904:	d0e2      	beq.n	800d8cc <pow+0x60>
 800d906:	f7ff ff79 	bl	800d7fc <__errno>
 800d90a:	2321      	movs	r3, #33	@ 0x21
 800d90c:	6003      	str	r3, [r0, #0]
 800d90e:	ecbd 8b02 	vpop	{d8}
 800d912:	ec47 6b10 	vmov	d0, r6, r7
 800d916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d918:	2200      	movs	r2, #0
 800d91a:	2300      	movs	r3, #0
 800d91c:	4630      	mov	r0, r6
 800d91e:	4639      	mov	r1, r7
 800d920:	f7f3 f89e 	bl	8000a60 <__aeabi_dcmpeq>
 800d924:	2800      	cmp	r0, #0
 800d926:	d0f2      	beq.n	800d90e <pow+0xa2>
 800d928:	eeb0 0a48 	vmov.f32	s0, s16
 800d92c:	eef0 0a68 	vmov.f32	s1, s17
 800d930:	f000 f838 	bl	800d9a4 <finite>
 800d934:	2800      	cmp	r0, #0
 800d936:	d0ea      	beq.n	800d90e <pow+0xa2>
 800d938:	ec45 4b10 	vmov	d0, r4, r5
 800d93c:	f000 f832 	bl	800d9a4 <finite>
 800d940:	e7c3      	b.n	800d8ca <pow+0x5e>
 800d942:	4f01      	ldr	r7, [pc, #4]	@ (800d948 <pow+0xdc>)
 800d944:	2600      	movs	r6, #0
 800d946:	e7e2      	b.n	800d90e <pow+0xa2>
 800d948:	3ff00000 	.word	0x3ff00000

0800d94c <sqrt>:
 800d94c:	b538      	push	{r3, r4, r5, lr}
 800d94e:	ed2d 8b02 	vpush	{d8}
 800d952:	ec55 4b10 	vmov	r4, r5, d0
 800d956:	f000 f831 	bl	800d9bc <__ieee754_sqrt>
 800d95a:	4622      	mov	r2, r4
 800d95c:	462b      	mov	r3, r5
 800d95e:	4620      	mov	r0, r4
 800d960:	4629      	mov	r1, r5
 800d962:	eeb0 8a40 	vmov.f32	s16, s0
 800d966:	eef0 8a60 	vmov.f32	s17, s1
 800d96a:	f7f3 f8ab 	bl	8000ac4 <__aeabi_dcmpun>
 800d96e:	b990      	cbnz	r0, 800d996 <sqrt+0x4a>
 800d970:	2200      	movs	r2, #0
 800d972:	2300      	movs	r3, #0
 800d974:	4620      	mov	r0, r4
 800d976:	4629      	mov	r1, r5
 800d978:	f7f3 f87c 	bl	8000a74 <__aeabi_dcmplt>
 800d97c:	b158      	cbz	r0, 800d996 <sqrt+0x4a>
 800d97e:	f7ff ff3d 	bl	800d7fc <__errno>
 800d982:	2321      	movs	r3, #33	@ 0x21
 800d984:	6003      	str	r3, [r0, #0]
 800d986:	2200      	movs	r2, #0
 800d988:	2300      	movs	r3, #0
 800d98a:	4610      	mov	r0, r2
 800d98c:	4619      	mov	r1, r3
 800d98e:	f7f2 ff29 	bl	80007e4 <__aeabi_ddiv>
 800d992:	ec41 0b18 	vmov	d8, r0, r1
 800d996:	eeb0 0a48 	vmov.f32	s0, s16
 800d99a:	eef0 0a68 	vmov.f32	s1, s17
 800d99e:	ecbd 8b02 	vpop	{d8}
 800d9a2:	bd38      	pop	{r3, r4, r5, pc}

0800d9a4 <finite>:
 800d9a4:	b082      	sub	sp, #8
 800d9a6:	ed8d 0b00 	vstr	d0, [sp]
 800d9aa:	9801      	ldr	r0, [sp, #4]
 800d9ac:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800d9b0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800d9b4:	0fc0      	lsrs	r0, r0, #31
 800d9b6:	b002      	add	sp, #8
 800d9b8:	4770      	bx	lr
	...

0800d9bc <__ieee754_sqrt>:
 800d9bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9c0:	4a68      	ldr	r2, [pc, #416]	@ (800db64 <__ieee754_sqrt+0x1a8>)
 800d9c2:	ec55 4b10 	vmov	r4, r5, d0
 800d9c6:	43aa      	bics	r2, r5
 800d9c8:	462b      	mov	r3, r5
 800d9ca:	4621      	mov	r1, r4
 800d9cc:	d110      	bne.n	800d9f0 <__ieee754_sqrt+0x34>
 800d9ce:	4622      	mov	r2, r4
 800d9d0:	4620      	mov	r0, r4
 800d9d2:	4629      	mov	r1, r5
 800d9d4:	f7f2 fddc 	bl	8000590 <__aeabi_dmul>
 800d9d8:	4602      	mov	r2, r0
 800d9da:	460b      	mov	r3, r1
 800d9dc:	4620      	mov	r0, r4
 800d9de:	4629      	mov	r1, r5
 800d9e0:	f7f2 fc20 	bl	8000224 <__adddf3>
 800d9e4:	4604      	mov	r4, r0
 800d9e6:	460d      	mov	r5, r1
 800d9e8:	ec45 4b10 	vmov	d0, r4, r5
 800d9ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9f0:	2d00      	cmp	r5, #0
 800d9f2:	dc0e      	bgt.n	800da12 <__ieee754_sqrt+0x56>
 800d9f4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d9f8:	4322      	orrs	r2, r4
 800d9fa:	d0f5      	beq.n	800d9e8 <__ieee754_sqrt+0x2c>
 800d9fc:	b19d      	cbz	r5, 800da26 <__ieee754_sqrt+0x6a>
 800d9fe:	4622      	mov	r2, r4
 800da00:	4620      	mov	r0, r4
 800da02:	4629      	mov	r1, r5
 800da04:	f7f2 fc0c 	bl	8000220 <__aeabi_dsub>
 800da08:	4602      	mov	r2, r0
 800da0a:	460b      	mov	r3, r1
 800da0c:	f7f2 feea 	bl	80007e4 <__aeabi_ddiv>
 800da10:	e7e8      	b.n	800d9e4 <__ieee754_sqrt+0x28>
 800da12:	152a      	asrs	r2, r5, #20
 800da14:	d115      	bne.n	800da42 <__ieee754_sqrt+0x86>
 800da16:	2000      	movs	r0, #0
 800da18:	e009      	b.n	800da2e <__ieee754_sqrt+0x72>
 800da1a:	0acb      	lsrs	r3, r1, #11
 800da1c:	3a15      	subs	r2, #21
 800da1e:	0549      	lsls	r1, r1, #21
 800da20:	2b00      	cmp	r3, #0
 800da22:	d0fa      	beq.n	800da1a <__ieee754_sqrt+0x5e>
 800da24:	e7f7      	b.n	800da16 <__ieee754_sqrt+0x5a>
 800da26:	462a      	mov	r2, r5
 800da28:	e7fa      	b.n	800da20 <__ieee754_sqrt+0x64>
 800da2a:	005b      	lsls	r3, r3, #1
 800da2c:	3001      	adds	r0, #1
 800da2e:	02dc      	lsls	r4, r3, #11
 800da30:	d5fb      	bpl.n	800da2a <__ieee754_sqrt+0x6e>
 800da32:	1e44      	subs	r4, r0, #1
 800da34:	1b12      	subs	r2, r2, r4
 800da36:	f1c0 0420 	rsb	r4, r0, #32
 800da3a:	fa21 f404 	lsr.w	r4, r1, r4
 800da3e:	4323      	orrs	r3, r4
 800da40:	4081      	lsls	r1, r0
 800da42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da46:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800da4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800da4e:	07d2      	lsls	r2, r2, #31
 800da50:	bf5c      	itt	pl
 800da52:	005b      	lslpl	r3, r3, #1
 800da54:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800da58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800da5c:	bf58      	it	pl
 800da5e:	0049      	lslpl	r1, r1, #1
 800da60:	2600      	movs	r6, #0
 800da62:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800da66:	106d      	asrs	r5, r5, #1
 800da68:	0049      	lsls	r1, r1, #1
 800da6a:	2016      	movs	r0, #22
 800da6c:	4632      	mov	r2, r6
 800da6e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800da72:	1917      	adds	r7, r2, r4
 800da74:	429f      	cmp	r7, r3
 800da76:	bfde      	ittt	le
 800da78:	193a      	addle	r2, r7, r4
 800da7a:	1bdb      	suble	r3, r3, r7
 800da7c:	1936      	addle	r6, r6, r4
 800da7e:	0fcf      	lsrs	r7, r1, #31
 800da80:	3801      	subs	r0, #1
 800da82:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800da86:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800da8a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800da8e:	d1f0      	bne.n	800da72 <__ieee754_sqrt+0xb6>
 800da90:	4604      	mov	r4, r0
 800da92:	2720      	movs	r7, #32
 800da94:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800da98:	429a      	cmp	r2, r3
 800da9a:	eb00 0e0c 	add.w	lr, r0, ip
 800da9e:	db02      	blt.n	800daa6 <__ieee754_sqrt+0xea>
 800daa0:	d113      	bne.n	800daca <__ieee754_sqrt+0x10e>
 800daa2:	458e      	cmp	lr, r1
 800daa4:	d811      	bhi.n	800daca <__ieee754_sqrt+0x10e>
 800daa6:	f1be 0f00 	cmp.w	lr, #0
 800daaa:	eb0e 000c 	add.w	r0, lr, ip
 800daae:	da42      	bge.n	800db36 <__ieee754_sqrt+0x17a>
 800dab0:	2800      	cmp	r0, #0
 800dab2:	db40      	blt.n	800db36 <__ieee754_sqrt+0x17a>
 800dab4:	f102 0801 	add.w	r8, r2, #1
 800dab8:	1a9b      	subs	r3, r3, r2
 800daba:	458e      	cmp	lr, r1
 800dabc:	bf88      	it	hi
 800dabe:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800dac2:	eba1 010e 	sub.w	r1, r1, lr
 800dac6:	4464      	add	r4, ip
 800dac8:	4642      	mov	r2, r8
 800daca:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800dace:	3f01      	subs	r7, #1
 800dad0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800dad4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dad8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800dadc:	d1dc      	bne.n	800da98 <__ieee754_sqrt+0xdc>
 800dade:	4319      	orrs	r1, r3
 800dae0:	d01b      	beq.n	800db1a <__ieee754_sqrt+0x15e>
 800dae2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800db68 <__ieee754_sqrt+0x1ac>
 800dae6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800db6c <__ieee754_sqrt+0x1b0>
 800daea:	e9da 0100 	ldrd	r0, r1, [sl]
 800daee:	e9db 2300 	ldrd	r2, r3, [fp]
 800daf2:	f7f2 fb95 	bl	8000220 <__aeabi_dsub>
 800daf6:	e9da 8900 	ldrd	r8, r9, [sl]
 800dafa:	4602      	mov	r2, r0
 800dafc:	460b      	mov	r3, r1
 800dafe:	4640      	mov	r0, r8
 800db00:	4649      	mov	r1, r9
 800db02:	f7f2 ffc1 	bl	8000a88 <__aeabi_dcmple>
 800db06:	b140      	cbz	r0, 800db1a <__ieee754_sqrt+0x15e>
 800db08:	f1b4 3fff 	cmp.w	r4, #4294967295
 800db0c:	e9da 0100 	ldrd	r0, r1, [sl]
 800db10:	e9db 2300 	ldrd	r2, r3, [fp]
 800db14:	d111      	bne.n	800db3a <__ieee754_sqrt+0x17e>
 800db16:	3601      	adds	r6, #1
 800db18:	463c      	mov	r4, r7
 800db1a:	1072      	asrs	r2, r6, #1
 800db1c:	0863      	lsrs	r3, r4, #1
 800db1e:	07f1      	lsls	r1, r6, #31
 800db20:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800db24:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800db28:	bf48      	it	mi
 800db2a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800db2e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800db32:	4618      	mov	r0, r3
 800db34:	e756      	b.n	800d9e4 <__ieee754_sqrt+0x28>
 800db36:	4690      	mov	r8, r2
 800db38:	e7be      	b.n	800dab8 <__ieee754_sqrt+0xfc>
 800db3a:	f7f2 fb73 	bl	8000224 <__adddf3>
 800db3e:	e9da 8900 	ldrd	r8, r9, [sl]
 800db42:	4602      	mov	r2, r0
 800db44:	460b      	mov	r3, r1
 800db46:	4640      	mov	r0, r8
 800db48:	4649      	mov	r1, r9
 800db4a:	f7f2 ff93 	bl	8000a74 <__aeabi_dcmplt>
 800db4e:	b120      	cbz	r0, 800db5a <__ieee754_sqrt+0x19e>
 800db50:	1ca0      	adds	r0, r4, #2
 800db52:	bf08      	it	eq
 800db54:	3601      	addeq	r6, #1
 800db56:	3402      	adds	r4, #2
 800db58:	e7df      	b.n	800db1a <__ieee754_sqrt+0x15e>
 800db5a:	1c63      	adds	r3, r4, #1
 800db5c:	f023 0401 	bic.w	r4, r3, #1
 800db60:	e7db      	b.n	800db1a <__ieee754_sqrt+0x15e>
 800db62:	bf00      	nop
 800db64:	7ff00000 	.word	0x7ff00000
 800db68:	200002f0 	.word	0x200002f0
 800db6c:	200002e8 	.word	0x200002e8

0800db70 <__ieee754_pow>:
 800db70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db74:	b091      	sub	sp, #68	@ 0x44
 800db76:	ed8d 1b00 	vstr	d1, [sp]
 800db7a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800db7e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800db82:	ea5a 0001 	orrs.w	r0, sl, r1
 800db86:	ec57 6b10 	vmov	r6, r7, d0
 800db8a:	d113      	bne.n	800dbb4 <__ieee754_pow+0x44>
 800db8c:	19b3      	adds	r3, r6, r6
 800db8e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800db92:	4152      	adcs	r2, r2
 800db94:	4298      	cmp	r0, r3
 800db96:	4b98      	ldr	r3, [pc, #608]	@ (800ddf8 <__ieee754_pow+0x288>)
 800db98:	4193      	sbcs	r3, r2
 800db9a:	f080 84ea 	bcs.w	800e572 <__ieee754_pow+0xa02>
 800db9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dba2:	4630      	mov	r0, r6
 800dba4:	4639      	mov	r1, r7
 800dba6:	f7f2 fb3d 	bl	8000224 <__adddf3>
 800dbaa:	ec41 0b10 	vmov	d0, r0, r1
 800dbae:	b011      	add	sp, #68	@ 0x44
 800dbb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbb4:	4a91      	ldr	r2, [pc, #580]	@ (800ddfc <__ieee754_pow+0x28c>)
 800dbb6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800dbba:	4590      	cmp	r8, r2
 800dbbc:	463d      	mov	r5, r7
 800dbbe:	4633      	mov	r3, r6
 800dbc0:	d806      	bhi.n	800dbd0 <__ieee754_pow+0x60>
 800dbc2:	d101      	bne.n	800dbc8 <__ieee754_pow+0x58>
 800dbc4:	2e00      	cmp	r6, #0
 800dbc6:	d1ea      	bne.n	800db9e <__ieee754_pow+0x2e>
 800dbc8:	4592      	cmp	sl, r2
 800dbca:	d801      	bhi.n	800dbd0 <__ieee754_pow+0x60>
 800dbcc:	d10e      	bne.n	800dbec <__ieee754_pow+0x7c>
 800dbce:	b169      	cbz	r1, 800dbec <__ieee754_pow+0x7c>
 800dbd0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800dbd4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800dbd8:	431d      	orrs	r5, r3
 800dbda:	d1e0      	bne.n	800db9e <__ieee754_pow+0x2e>
 800dbdc:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dbe0:	18db      	adds	r3, r3, r3
 800dbe2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800dbe6:	4152      	adcs	r2, r2
 800dbe8:	429d      	cmp	r5, r3
 800dbea:	e7d4      	b.n	800db96 <__ieee754_pow+0x26>
 800dbec:	2d00      	cmp	r5, #0
 800dbee:	46c3      	mov	fp, r8
 800dbf0:	da3a      	bge.n	800dc68 <__ieee754_pow+0xf8>
 800dbf2:	4a83      	ldr	r2, [pc, #524]	@ (800de00 <__ieee754_pow+0x290>)
 800dbf4:	4592      	cmp	sl, r2
 800dbf6:	d84d      	bhi.n	800dc94 <__ieee754_pow+0x124>
 800dbf8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800dbfc:	4592      	cmp	sl, r2
 800dbfe:	f240 84c7 	bls.w	800e590 <__ieee754_pow+0xa20>
 800dc02:	ea4f 522a 	mov.w	r2, sl, asr #20
 800dc06:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800dc0a:	2a14      	cmp	r2, #20
 800dc0c:	dd0f      	ble.n	800dc2e <__ieee754_pow+0xbe>
 800dc0e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800dc12:	fa21 f402 	lsr.w	r4, r1, r2
 800dc16:	fa04 f202 	lsl.w	r2, r4, r2
 800dc1a:	428a      	cmp	r2, r1
 800dc1c:	f040 84b8 	bne.w	800e590 <__ieee754_pow+0xa20>
 800dc20:	f004 0401 	and.w	r4, r4, #1
 800dc24:	f1c4 0402 	rsb	r4, r4, #2
 800dc28:	2900      	cmp	r1, #0
 800dc2a:	d158      	bne.n	800dcde <__ieee754_pow+0x16e>
 800dc2c:	e00e      	b.n	800dc4c <__ieee754_pow+0xdc>
 800dc2e:	2900      	cmp	r1, #0
 800dc30:	d154      	bne.n	800dcdc <__ieee754_pow+0x16c>
 800dc32:	f1c2 0214 	rsb	r2, r2, #20
 800dc36:	fa4a f402 	asr.w	r4, sl, r2
 800dc3a:	fa04 f202 	lsl.w	r2, r4, r2
 800dc3e:	4552      	cmp	r2, sl
 800dc40:	f040 84a3 	bne.w	800e58a <__ieee754_pow+0xa1a>
 800dc44:	f004 0401 	and.w	r4, r4, #1
 800dc48:	f1c4 0402 	rsb	r4, r4, #2
 800dc4c:	4a6d      	ldr	r2, [pc, #436]	@ (800de04 <__ieee754_pow+0x294>)
 800dc4e:	4592      	cmp	sl, r2
 800dc50:	d12e      	bne.n	800dcb0 <__ieee754_pow+0x140>
 800dc52:	f1b9 0f00 	cmp.w	r9, #0
 800dc56:	f280 8494 	bge.w	800e582 <__ieee754_pow+0xa12>
 800dc5a:	496a      	ldr	r1, [pc, #424]	@ (800de04 <__ieee754_pow+0x294>)
 800dc5c:	4632      	mov	r2, r6
 800dc5e:	463b      	mov	r3, r7
 800dc60:	2000      	movs	r0, #0
 800dc62:	f7f2 fdbf 	bl	80007e4 <__aeabi_ddiv>
 800dc66:	e7a0      	b.n	800dbaa <__ieee754_pow+0x3a>
 800dc68:	2400      	movs	r4, #0
 800dc6a:	bbc1      	cbnz	r1, 800dcde <__ieee754_pow+0x16e>
 800dc6c:	4a63      	ldr	r2, [pc, #396]	@ (800ddfc <__ieee754_pow+0x28c>)
 800dc6e:	4592      	cmp	sl, r2
 800dc70:	d1ec      	bne.n	800dc4c <__ieee754_pow+0xdc>
 800dc72:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800dc76:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800dc7a:	431a      	orrs	r2, r3
 800dc7c:	f000 8479 	beq.w	800e572 <__ieee754_pow+0xa02>
 800dc80:	4b61      	ldr	r3, [pc, #388]	@ (800de08 <__ieee754_pow+0x298>)
 800dc82:	4598      	cmp	r8, r3
 800dc84:	d908      	bls.n	800dc98 <__ieee754_pow+0x128>
 800dc86:	f1b9 0f00 	cmp.w	r9, #0
 800dc8a:	f2c0 8476 	blt.w	800e57a <__ieee754_pow+0xa0a>
 800dc8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc92:	e78a      	b.n	800dbaa <__ieee754_pow+0x3a>
 800dc94:	2402      	movs	r4, #2
 800dc96:	e7e8      	b.n	800dc6a <__ieee754_pow+0xfa>
 800dc98:	f1b9 0f00 	cmp.w	r9, #0
 800dc9c:	f04f 0000 	mov.w	r0, #0
 800dca0:	f04f 0100 	mov.w	r1, #0
 800dca4:	da81      	bge.n	800dbaa <__ieee754_pow+0x3a>
 800dca6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800dcaa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800dcae:	e77c      	b.n	800dbaa <__ieee754_pow+0x3a>
 800dcb0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800dcb4:	d106      	bne.n	800dcc4 <__ieee754_pow+0x154>
 800dcb6:	4632      	mov	r2, r6
 800dcb8:	463b      	mov	r3, r7
 800dcba:	4630      	mov	r0, r6
 800dcbc:	4639      	mov	r1, r7
 800dcbe:	f7f2 fc67 	bl	8000590 <__aeabi_dmul>
 800dcc2:	e772      	b.n	800dbaa <__ieee754_pow+0x3a>
 800dcc4:	4a51      	ldr	r2, [pc, #324]	@ (800de0c <__ieee754_pow+0x29c>)
 800dcc6:	4591      	cmp	r9, r2
 800dcc8:	d109      	bne.n	800dcde <__ieee754_pow+0x16e>
 800dcca:	2d00      	cmp	r5, #0
 800dccc:	db07      	blt.n	800dcde <__ieee754_pow+0x16e>
 800dcce:	ec47 6b10 	vmov	d0, r6, r7
 800dcd2:	b011      	add	sp, #68	@ 0x44
 800dcd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcd8:	f7ff be70 	b.w	800d9bc <__ieee754_sqrt>
 800dcdc:	2400      	movs	r4, #0
 800dcde:	ec47 6b10 	vmov	d0, r6, r7
 800dce2:	9302      	str	r3, [sp, #8]
 800dce4:	f000 fc88 	bl	800e5f8 <fabs>
 800dce8:	9b02      	ldr	r3, [sp, #8]
 800dcea:	ec51 0b10 	vmov	r0, r1, d0
 800dcee:	bb53      	cbnz	r3, 800dd46 <__ieee754_pow+0x1d6>
 800dcf0:	4b44      	ldr	r3, [pc, #272]	@ (800de04 <__ieee754_pow+0x294>)
 800dcf2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d002      	beq.n	800dd00 <__ieee754_pow+0x190>
 800dcfa:	f1b8 0f00 	cmp.w	r8, #0
 800dcfe:	d122      	bne.n	800dd46 <__ieee754_pow+0x1d6>
 800dd00:	f1b9 0f00 	cmp.w	r9, #0
 800dd04:	da05      	bge.n	800dd12 <__ieee754_pow+0x1a2>
 800dd06:	4602      	mov	r2, r0
 800dd08:	460b      	mov	r3, r1
 800dd0a:	2000      	movs	r0, #0
 800dd0c:	493d      	ldr	r1, [pc, #244]	@ (800de04 <__ieee754_pow+0x294>)
 800dd0e:	f7f2 fd69 	bl	80007e4 <__aeabi_ddiv>
 800dd12:	2d00      	cmp	r5, #0
 800dd14:	f6bf af49 	bge.w	800dbaa <__ieee754_pow+0x3a>
 800dd18:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800dd1c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800dd20:	ea58 0804 	orrs.w	r8, r8, r4
 800dd24:	d108      	bne.n	800dd38 <__ieee754_pow+0x1c8>
 800dd26:	4602      	mov	r2, r0
 800dd28:	460b      	mov	r3, r1
 800dd2a:	4610      	mov	r0, r2
 800dd2c:	4619      	mov	r1, r3
 800dd2e:	f7f2 fa77 	bl	8000220 <__aeabi_dsub>
 800dd32:	4602      	mov	r2, r0
 800dd34:	460b      	mov	r3, r1
 800dd36:	e794      	b.n	800dc62 <__ieee754_pow+0xf2>
 800dd38:	2c01      	cmp	r4, #1
 800dd3a:	f47f af36 	bne.w	800dbaa <__ieee754_pow+0x3a>
 800dd3e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dd42:	4619      	mov	r1, r3
 800dd44:	e731      	b.n	800dbaa <__ieee754_pow+0x3a>
 800dd46:	0feb      	lsrs	r3, r5, #31
 800dd48:	3b01      	subs	r3, #1
 800dd4a:	ea53 0204 	orrs.w	r2, r3, r4
 800dd4e:	d102      	bne.n	800dd56 <__ieee754_pow+0x1e6>
 800dd50:	4632      	mov	r2, r6
 800dd52:	463b      	mov	r3, r7
 800dd54:	e7e9      	b.n	800dd2a <__ieee754_pow+0x1ba>
 800dd56:	3c01      	subs	r4, #1
 800dd58:	431c      	orrs	r4, r3
 800dd5a:	d016      	beq.n	800dd8a <__ieee754_pow+0x21a>
 800dd5c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800dde8 <__ieee754_pow+0x278>
 800dd60:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800dd64:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dd68:	f240 8112 	bls.w	800df90 <__ieee754_pow+0x420>
 800dd6c:	4b28      	ldr	r3, [pc, #160]	@ (800de10 <__ieee754_pow+0x2a0>)
 800dd6e:	459a      	cmp	sl, r3
 800dd70:	4b25      	ldr	r3, [pc, #148]	@ (800de08 <__ieee754_pow+0x298>)
 800dd72:	d916      	bls.n	800dda2 <__ieee754_pow+0x232>
 800dd74:	4598      	cmp	r8, r3
 800dd76:	d80b      	bhi.n	800dd90 <__ieee754_pow+0x220>
 800dd78:	f1b9 0f00 	cmp.w	r9, #0
 800dd7c:	da0b      	bge.n	800dd96 <__ieee754_pow+0x226>
 800dd7e:	2000      	movs	r0, #0
 800dd80:	b011      	add	sp, #68	@ 0x44
 800dd82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd86:	f000 bcf3 	b.w	800e770 <__math_oflow>
 800dd8a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800ddf0 <__ieee754_pow+0x280>
 800dd8e:	e7e7      	b.n	800dd60 <__ieee754_pow+0x1f0>
 800dd90:	f1b9 0f00 	cmp.w	r9, #0
 800dd94:	dcf3      	bgt.n	800dd7e <__ieee754_pow+0x20e>
 800dd96:	2000      	movs	r0, #0
 800dd98:	b011      	add	sp, #68	@ 0x44
 800dd9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd9e:	f000 bcdf 	b.w	800e760 <__math_uflow>
 800dda2:	4598      	cmp	r8, r3
 800dda4:	d20c      	bcs.n	800ddc0 <__ieee754_pow+0x250>
 800dda6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	2300      	movs	r3, #0
 800ddae:	f7f2 fe61 	bl	8000a74 <__aeabi_dcmplt>
 800ddb2:	3800      	subs	r0, #0
 800ddb4:	bf18      	it	ne
 800ddb6:	2001      	movne	r0, #1
 800ddb8:	f1b9 0f00 	cmp.w	r9, #0
 800ddbc:	daec      	bge.n	800dd98 <__ieee754_pow+0x228>
 800ddbe:	e7df      	b.n	800dd80 <__ieee754_pow+0x210>
 800ddc0:	4b10      	ldr	r3, [pc, #64]	@ (800de04 <__ieee754_pow+0x294>)
 800ddc2:	4598      	cmp	r8, r3
 800ddc4:	f04f 0200 	mov.w	r2, #0
 800ddc8:	d924      	bls.n	800de14 <__ieee754_pow+0x2a4>
 800ddca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ddce:	2300      	movs	r3, #0
 800ddd0:	f7f2 fe50 	bl	8000a74 <__aeabi_dcmplt>
 800ddd4:	3800      	subs	r0, #0
 800ddd6:	bf18      	it	ne
 800ddd8:	2001      	movne	r0, #1
 800ddda:	f1b9 0f00 	cmp.w	r9, #0
 800ddde:	dccf      	bgt.n	800dd80 <__ieee754_pow+0x210>
 800dde0:	e7da      	b.n	800dd98 <__ieee754_pow+0x228>
 800dde2:	bf00      	nop
 800dde4:	f3af 8000 	nop.w
 800dde8:	00000000 	.word	0x00000000
 800ddec:	3ff00000 	.word	0x3ff00000
 800ddf0:	00000000 	.word	0x00000000
 800ddf4:	bff00000 	.word	0xbff00000
 800ddf8:	fff00000 	.word	0xfff00000
 800ddfc:	7ff00000 	.word	0x7ff00000
 800de00:	433fffff 	.word	0x433fffff
 800de04:	3ff00000 	.word	0x3ff00000
 800de08:	3fefffff 	.word	0x3fefffff
 800de0c:	3fe00000 	.word	0x3fe00000
 800de10:	43f00000 	.word	0x43f00000
 800de14:	4b5a      	ldr	r3, [pc, #360]	@ (800df80 <__ieee754_pow+0x410>)
 800de16:	f7f2 fa03 	bl	8000220 <__aeabi_dsub>
 800de1a:	a351      	add	r3, pc, #324	@ (adr r3, 800df60 <__ieee754_pow+0x3f0>)
 800de1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de20:	4604      	mov	r4, r0
 800de22:	460d      	mov	r5, r1
 800de24:	f7f2 fbb4 	bl	8000590 <__aeabi_dmul>
 800de28:	a34f      	add	r3, pc, #316	@ (adr r3, 800df68 <__ieee754_pow+0x3f8>)
 800de2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de2e:	4606      	mov	r6, r0
 800de30:	460f      	mov	r7, r1
 800de32:	4620      	mov	r0, r4
 800de34:	4629      	mov	r1, r5
 800de36:	f7f2 fbab 	bl	8000590 <__aeabi_dmul>
 800de3a:	4b52      	ldr	r3, [pc, #328]	@ (800df84 <__ieee754_pow+0x414>)
 800de3c:	4682      	mov	sl, r0
 800de3e:	468b      	mov	fp, r1
 800de40:	2200      	movs	r2, #0
 800de42:	4620      	mov	r0, r4
 800de44:	4629      	mov	r1, r5
 800de46:	f7f2 fba3 	bl	8000590 <__aeabi_dmul>
 800de4a:	4602      	mov	r2, r0
 800de4c:	460b      	mov	r3, r1
 800de4e:	a148      	add	r1, pc, #288	@ (adr r1, 800df70 <__ieee754_pow+0x400>)
 800de50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de54:	f7f2 f9e4 	bl	8000220 <__aeabi_dsub>
 800de58:	4622      	mov	r2, r4
 800de5a:	462b      	mov	r3, r5
 800de5c:	f7f2 fb98 	bl	8000590 <__aeabi_dmul>
 800de60:	4602      	mov	r2, r0
 800de62:	460b      	mov	r3, r1
 800de64:	2000      	movs	r0, #0
 800de66:	4948      	ldr	r1, [pc, #288]	@ (800df88 <__ieee754_pow+0x418>)
 800de68:	f7f2 f9da 	bl	8000220 <__aeabi_dsub>
 800de6c:	4622      	mov	r2, r4
 800de6e:	4680      	mov	r8, r0
 800de70:	4689      	mov	r9, r1
 800de72:	462b      	mov	r3, r5
 800de74:	4620      	mov	r0, r4
 800de76:	4629      	mov	r1, r5
 800de78:	f7f2 fb8a 	bl	8000590 <__aeabi_dmul>
 800de7c:	4602      	mov	r2, r0
 800de7e:	460b      	mov	r3, r1
 800de80:	4640      	mov	r0, r8
 800de82:	4649      	mov	r1, r9
 800de84:	f7f2 fb84 	bl	8000590 <__aeabi_dmul>
 800de88:	a33b      	add	r3, pc, #236	@ (adr r3, 800df78 <__ieee754_pow+0x408>)
 800de8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de8e:	f7f2 fb7f 	bl	8000590 <__aeabi_dmul>
 800de92:	4602      	mov	r2, r0
 800de94:	460b      	mov	r3, r1
 800de96:	4650      	mov	r0, sl
 800de98:	4659      	mov	r1, fp
 800de9a:	f7f2 f9c1 	bl	8000220 <__aeabi_dsub>
 800de9e:	4602      	mov	r2, r0
 800dea0:	460b      	mov	r3, r1
 800dea2:	4680      	mov	r8, r0
 800dea4:	4689      	mov	r9, r1
 800dea6:	4630      	mov	r0, r6
 800dea8:	4639      	mov	r1, r7
 800deaa:	f7f2 f9bb 	bl	8000224 <__adddf3>
 800deae:	2400      	movs	r4, #0
 800deb0:	4632      	mov	r2, r6
 800deb2:	463b      	mov	r3, r7
 800deb4:	4620      	mov	r0, r4
 800deb6:	460d      	mov	r5, r1
 800deb8:	f7f2 f9b2 	bl	8000220 <__aeabi_dsub>
 800debc:	4602      	mov	r2, r0
 800debe:	460b      	mov	r3, r1
 800dec0:	4640      	mov	r0, r8
 800dec2:	4649      	mov	r1, r9
 800dec4:	f7f2 f9ac 	bl	8000220 <__aeabi_dsub>
 800dec8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800decc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ded0:	2300      	movs	r3, #0
 800ded2:	9304      	str	r3, [sp, #16]
 800ded4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ded8:	4606      	mov	r6, r0
 800deda:	460f      	mov	r7, r1
 800dedc:	4652      	mov	r2, sl
 800dede:	465b      	mov	r3, fp
 800dee0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dee4:	f7f2 f99c 	bl	8000220 <__aeabi_dsub>
 800dee8:	4622      	mov	r2, r4
 800deea:	462b      	mov	r3, r5
 800deec:	f7f2 fb50 	bl	8000590 <__aeabi_dmul>
 800def0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800def4:	4680      	mov	r8, r0
 800def6:	4689      	mov	r9, r1
 800def8:	4630      	mov	r0, r6
 800defa:	4639      	mov	r1, r7
 800defc:	f7f2 fb48 	bl	8000590 <__aeabi_dmul>
 800df00:	4602      	mov	r2, r0
 800df02:	460b      	mov	r3, r1
 800df04:	4640      	mov	r0, r8
 800df06:	4649      	mov	r1, r9
 800df08:	f7f2 f98c 	bl	8000224 <__adddf3>
 800df0c:	4652      	mov	r2, sl
 800df0e:	465b      	mov	r3, fp
 800df10:	4606      	mov	r6, r0
 800df12:	460f      	mov	r7, r1
 800df14:	4620      	mov	r0, r4
 800df16:	4629      	mov	r1, r5
 800df18:	f7f2 fb3a 	bl	8000590 <__aeabi_dmul>
 800df1c:	460b      	mov	r3, r1
 800df1e:	4602      	mov	r2, r0
 800df20:	4680      	mov	r8, r0
 800df22:	4689      	mov	r9, r1
 800df24:	4630      	mov	r0, r6
 800df26:	4639      	mov	r1, r7
 800df28:	f7f2 f97c 	bl	8000224 <__adddf3>
 800df2c:	4b17      	ldr	r3, [pc, #92]	@ (800df8c <__ieee754_pow+0x41c>)
 800df2e:	4299      	cmp	r1, r3
 800df30:	4604      	mov	r4, r0
 800df32:	460d      	mov	r5, r1
 800df34:	468a      	mov	sl, r1
 800df36:	468b      	mov	fp, r1
 800df38:	f340 82ef 	ble.w	800e51a <__ieee754_pow+0x9aa>
 800df3c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800df40:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800df44:	4303      	orrs	r3, r0
 800df46:	f000 81e8 	beq.w	800e31a <__ieee754_pow+0x7aa>
 800df4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df4e:	2200      	movs	r2, #0
 800df50:	2300      	movs	r3, #0
 800df52:	f7f2 fd8f 	bl	8000a74 <__aeabi_dcmplt>
 800df56:	3800      	subs	r0, #0
 800df58:	bf18      	it	ne
 800df5a:	2001      	movne	r0, #1
 800df5c:	e710      	b.n	800dd80 <__ieee754_pow+0x210>
 800df5e:	bf00      	nop
 800df60:	60000000 	.word	0x60000000
 800df64:	3ff71547 	.word	0x3ff71547
 800df68:	f85ddf44 	.word	0xf85ddf44
 800df6c:	3e54ae0b 	.word	0x3e54ae0b
 800df70:	55555555 	.word	0x55555555
 800df74:	3fd55555 	.word	0x3fd55555
 800df78:	652b82fe 	.word	0x652b82fe
 800df7c:	3ff71547 	.word	0x3ff71547
 800df80:	3ff00000 	.word	0x3ff00000
 800df84:	3fd00000 	.word	0x3fd00000
 800df88:	3fe00000 	.word	0x3fe00000
 800df8c:	408fffff 	.word	0x408fffff
 800df90:	4bd5      	ldr	r3, [pc, #852]	@ (800e2e8 <__ieee754_pow+0x778>)
 800df92:	402b      	ands	r3, r5
 800df94:	2200      	movs	r2, #0
 800df96:	b92b      	cbnz	r3, 800dfa4 <__ieee754_pow+0x434>
 800df98:	4bd4      	ldr	r3, [pc, #848]	@ (800e2ec <__ieee754_pow+0x77c>)
 800df9a:	f7f2 faf9 	bl	8000590 <__aeabi_dmul>
 800df9e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800dfa2:	468b      	mov	fp, r1
 800dfa4:	ea4f 532b 	mov.w	r3, fp, asr #20
 800dfa8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800dfac:	4413      	add	r3, r2
 800dfae:	930a      	str	r3, [sp, #40]	@ 0x28
 800dfb0:	4bcf      	ldr	r3, [pc, #828]	@ (800e2f0 <__ieee754_pow+0x780>)
 800dfb2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800dfb6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800dfba:	459b      	cmp	fp, r3
 800dfbc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800dfc0:	dd08      	ble.n	800dfd4 <__ieee754_pow+0x464>
 800dfc2:	4bcc      	ldr	r3, [pc, #816]	@ (800e2f4 <__ieee754_pow+0x784>)
 800dfc4:	459b      	cmp	fp, r3
 800dfc6:	f340 81a5 	ble.w	800e314 <__ieee754_pow+0x7a4>
 800dfca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dfcc:	3301      	adds	r3, #1
 800dfce:	930a      	str	r3, [sp, #40]	@ 0x28
 800dfd0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800dfd4:	f04f 0a00 	mov.w	sl, #0
 800dfd8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800dfdc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dfde:	4bc6      	ldr	r3, [pc, #792]	@ (800e2f8 <__ieee754_pow+0x788>)
 800dfe0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dfe4:	ed93 7b00 	vldr	d7, [r3]
 800dfe8:	4629      	mov	r1, r5
 800dfea:	ec53 2b17 	vmov	r2, r3, d7
 800dfee:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dff2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dff6:	f7f2 f913 	bl	8000220 <__aeabi_dsub>
 800dffa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800dffe:	4606      	mov	r6, r0
 800e000:	460f      	mov	r7, r1
 800e002:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e006:	f7f2 f90d 	bl	8000224 <__adddf3>
 800e00a:	4602      	mov	r2, r0
 800e00c:	460b      	mov	r3, r1
 800e00e:	2000      	movs	r0, #0
 800e010:	49ba      	ldr	r1, [pc, #744]	@ (800e2fc <__ieee754_pow+0x78c>)
 800e012:	f7f2 fbe7 	bl	80007e4 <__aeabi_ddiv>
 800e016:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800e01a:	4602      	mov	r2, r0
 800e01c:	460b      	mov	r3, r1
 800e01e:	4630      	mov	r0, r6
 800e020:	4639      	mov	r1, r7
 800e022:	f7f2 fab5 	bl	8000590 <__aeabi_dmul>
 800e026:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e02a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800e02e:	106d      	asrs	r5, r5, #1
 800e030:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800e034:	f04f 0b00 	mov.w	fp, #0
 800e038:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800e03c:	4661      	mov	r1, ip
 800e03e:	2200      	movs	r2, #0
 800e040:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800e044:	4658      	mov	r0, fp
 800e046:	46e1      	mov	r9, ip
 800e048:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800e04c:	4614      	mov	r4, r2
 800e04e:	461d      	mov	r5, r3
 800e050:	f7f2 fa9e 	bl	8000590 <__aeabi_dmul>
 800e054:	4602      	mov	r2, r0
 800e056:	460b      	mov	r3, r1
 800e058:	4630      	mov	r0, r6
 800e05a:	4639      	mov	r1, r7
 800e05c:	f7f2 f8e0 	bl	8000220 <__aeabi_dsub>
 800e060:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e064:	4606      	mov	r6, r0
 800e066:	460f      	mov	r7, r1
 800e068:	4620      	mov	r0, r4
 800e06a:	4629      	mov	r1, r5
 800e06c:	f7f2 f8d8 	bl	8000220 <__aeabi_dsub>
 800e070:	4602      	mov	r2, r0
 800e072:	460b      	mov	r3, r1
 800e074:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e078:	f7f2 f8d2 	bl	8000220 <__aeabi_dsub>
 800e07c:	465a      	mov	r2, fp
 800e07e:	464b      	mov	r3, r9
 800e080:	f7f2 fa86 	bl	8000590 <__aeabi_dmul>
 800e084:	4602      	mov	r2, r0
 800e086:	460b      	mov	r3, r1
 800e088:	4630      	mov	r0, r6
 800e08a:	4639      	mov	r1, r7
 800e08c:	f7f2 f8c8 	bl	8000220 <__aeabi_dsub>
 800e090:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e094:	f7f2 fa7c 	bl	8000590 <__aeabi_dmul>
 800e098:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e09c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e0a0:	4610      	mov	r0, r2
 800e0a2:	4619      	mov	r1, r3
 800e0a4:	f7f2 fa74 	bl	8000590 <__aeabi_dmul>
 800e0a8:	a37d      	add	r3, pc, #500	@ (adr r3, 800e2a0 <__ieee754_pow+0x730>)
 800e0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ae:	4604      	mov	r4, r0
 800e0b0:	460d      	mov	r5, r1
 800e0b2:	f7f2 fa6d 	bl	8000590 <__aeabi_dmul>
 800e0b6:	a37c      	add	r3, pc, #496	@ (adr r3, 800e2a8 <__ieee754_pow+0x738>)
 800e0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0bc:	f7f2 f8b2 	bl	8000224 <__adddf3>
 800e0c0:	4622      	mov	r2, r4
 800e0c2:	462b      	mov	r3, r5
 800e0c4:	f7f2 fa64 	bl	8000590 <__aeabi_dmul>
 800e0c8:	a379      	add	r3, pc, #484	@ (adr r3, 800e2b0 <__ieee754_pow+0x740>)
 800e0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ce:	f7f2 f8a9 	bl	8000224 <__adddf3>
 800e0d2:	4622      	mov	r2, r4
 800e0d4:	462b      	mov	r3, r5
 800e0d6:	f7f2 fa5b 	bl	8000590 <__aeabi_dmul>
 800e0da:	a377      	add	r3, pc, #476	@ (adr r3, 800e2b8 <__ieee754_pow+0x748>)
 800e0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e0:	f7f2 f8a0 	bl	8000224 <__adddf3>
 800e0e4:	4622      	mov	r2, r4
 800e0e6:	462b      	mov	r3, r5
 800e0e8:	f7f2 fa52 	bl	8000590 <__aeabi_dmul>
 800e0ec:	a374      	add	r3, pc, #464	@ (adr r3, 800e2c0 <__ieee754_pow+0x750>)
 800e0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f2:	f7f2 f897 	bl	8000224 <__adddf3>
 800e0f6:	4622      	mov	r2, r4
 800e0f8:	462b      	mov	r3, r5
 800e0fa:	f7f2 fa49 	bl	8000590 <__aeabi_dmul>
 800e0fe:	a372      	add	r3, pc, #456	@ (adr r3, 800e2c8 <__ieee754_pow+0x758>)
 800e100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e104:	f7f2 f88e 	bl	8000224 <__adddf3>
 800e108:	4622      	mov	r2, r4
 800e10a:	4606      	mov	r6, r0
 800e10c:	460f      	mov	r7, r1
 800e10e:	462b      	mov	r3, r5
 800e110:	4620      	mov	r0, r4
 800e112:	4629      	mov	r1, r5
 800e114:	f7f2 fa3c 	bl	8000590 <__aeabi_dmul>
 800e118:	4602      	mov	r2, r0
 800e11a:	460b      	mov	r3, r1
 800e11c:	4630      	mov	r0, r6
 800e11e:	4639      	mov	r1, r7
 800e120:	f7f2 fa36 	bl	8000590 <__aeabi_dmul>
 800e124:	465a      	mov	r2, fp
 800e126:	4604      	mov	r4, r0
 800e128:	460d      	mov	r5, r1
 800e12a:	464b      	mov	r3, r9
 800e12c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e130:	f7f2 f878 	bl	8000224 <__adddf3>
 800e134:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e138:	f7f2 fa2a 	bl	8000590 <__aeabi_dmul>
 800e13c:	4622      	mov	r2, r4
 800e13e:	462b      	mov	r3, r5
 800e140:	f7f2 f870 	bl	8000224 <__adddf3>
 800e144:	465a      	mov	r2, fp
 800e146:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e14a:	464b      	mov	r3, r9
 800e14c:	4658      	mov	r0, fp
 800e14e:	4649      	mov	r1, r9
 800e150:	f7f2 fa1e 	bl	8000590 <__aeabi_dmul>
 800e154:	4b6a      	ldr	r3, [pc, #424]	@ (800e300 <__ieee754_pow+0x790>)
 800e156:	2200      	movs	r2, #0
 800e158:	4606      	mov	r6, r0
 800e15a:	460f      	mov	r7, r1
 800e15c:	f7f2 f862 	bl	8000224 <__adddf3>
 800e160:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e164:	f7f2 f85e 	bl	8000224 <__adddf3>
 800e168:	46d8      	mov	r8, fp
 800e16a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800e16e:	460d      	mov	r5, r1
 800e170:	465a      	mov	r2, fp
 800e172:	460b      	mov	r3, r1
 800e174:	4640      	mov	r0, r8
 800e176:	4649      	mov	r1, r9
 800e178:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800e17c:	f7f2 fa08 	bl	8000590 <__aeabi_dmul>
 800e180:	465c      	mov	r4, fp
 800e182:	4680      	mov	r8, r0
 800e184:	4689      	mov	r9, r1
 800e186:	4b5e      	ldr	r3, [pc, #376]	@ (800e300 <__ieee754_pow+0x790>)
 800e188:	2200      	movs	r2, #0
 800e18a:	4620      	mov	r0, r4
 800e18c:	4629      	mov	r1, r5
 800e18e:	f7f2 f847 	bl	8000220 <__aeabi_dsub>
 800e192:	4632      	mov	r2, r6
 800e194:	463b      	mov	r3, r7
 800e196:	f7f2 f843 	bl	8000220 <__aeabi_dsub>
 800e19a:	4602      	mov	r2, r0
 800e19c:	460b      	mov	r3, r1
 800e19e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e1a2:	f7f2 f83d 	bl	8000220 <__aeabi_dsub>
 800e1a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e1aa:	f7f2 f9f1 	bl	8000590 <__aeabi_dmul>
 800e1ae:	4622      	mov	r2, r4
 800e1b0:	4606      	mov	r6, r0
 800e1b2:	460f      	mov	r7, r1
 800e1b4:	462b      	mov	r3, r5
 800e1b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e1ba:	f7f2 f9e9 	bl	8000590 <__aeabi_dmul>
 800e1be:	4602      	mov	r2, r0
 800e1c0:	460b      	mov	r3, r1
 800e1c2:	4630      	mov	r0, r6
 800e1c4:	4639      	mov	r1, r7
 800e1c6:	f7f2 f82d 	bl	8000224 <__adddf3>
 800e1ca:	4606      	mov	r6, r0
 800e1cc:	460f      	mov	r7, r1
 800e1ce:	4602      	mov	r2, r0
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	4640      	mov	r0, r8
 800e1d4:	4649      	mov	r1, r9
 800e1d6:	f7f2 f825 	bl	8000224 <__adddf3>
 800e1da:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800e1de:	a33c      	add	r3, pc, #240	@ (adr r3, 800e2d0 <__ieee754_pow+0x760>)
 800e1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e4:	4658      	mov	r0, fp
 800e1e6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800e1ea:	460d      	mov	r5, r1
 800e1ec:	f7f2 f9d0 	bl	8000590 <__aeabi_dmul>
 800e1f0:	465c      	mov	r4, fp
 800e1f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e1f6:	4642      	mov	r2, r8
 800e1f8:	464b      	mov	r3, r9
 800e1fa:	4620      	mov	r0, r4
 800e1fc:	4629      	mov	r1, r5
 800e1fe:	f7f2 f80f 	bl	8000220 <__aeabi_dsub>
 800e202:	4602      	mov	r2, r0
 800e204:	460b      	mov	r3, r1
 800e206:	4630      	mov	r0, r6
 800e208:	4639      	mov	r1, r7
 800e20a:	f7f2 f809 	bl	8000220 <__aeabi_dsub>
 800e20e:	a332      	add	r3, pc, #200	@ (adr r3, 800e2d8 <__ieee754_pow+0x768>)
 800e210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e214:	f7f2 f9bc 	bl	8000590 <__aeabi_dmul>
 800e218:	a331      	add	r3, pc, #196	@ (adr r3, 800e2e0 <__ieee754_pow+0x770>)
 800e21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21e:	4606      	mov	r6, r0
 800e220:	460f      	mov	r7, r1
 800e222:	4620      	mov	r0, r4
 800e224:	4629      	mov	r1, r5
 800e226:	f7f2 f9b3 	bl	8000590 <__aeabi_dmul>
 800e22a:	4602      	mov	r2, r0
 800e22c:	460b      	mov	r3, r1
 800e22e:	4630      	mov	r0, r6
 800e230:	4639      	mov	r1, r7
 800e232:	f7f1 fff7 	bl	8000224 <__adddf3>
 800e236:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e238:	4b32      	ldr	r3, [pc, #200]	@ (800e304 <__ieee754_pow+0x794>)
 800e23a:	4413      	add	r3, r2
 800e23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e240:	f7f1 fff0 	bl	8000224 <__adddf3>
 800e244:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e248:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e24a:	f7f2 f937 	bl	80004bc <__aeabi_i2d>
 800e24e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e250:	4b2d      	ldr	r3, [pc, #180]	@ (800e308 <__ieee754_pow+0x798>)
 800e252:	4413      	add	r3, r2
 800e254:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e258:	4606      	mov	r6, r0
 800e25a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e25e:	460f      	mov	r7, r1
 800e260:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e264:	f7f1 ffde 	bl	8000224 <__adddf3>
 800e268:	4642      	mov	r2, r8
 800e26a:	464b      	mov	r3, r9
 800e26c:	f7f1 ffda 	bl	8000224 <__adddf3>
 800e270:	4632      	mov	r2, r6
 800e272:	463b      	mov	r3, r7
 800e274:	f7f1 ffd6 	bl	8000224 <__adddf3>
 800e278:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800e27c:	4632      	mov	r2, r6
 800e27e:	463b      	mov	r3, r7
 800e280:	4658      	mov	r0, fp
 800e282:	460d      	mov	r5, r1
 800e284:	f7f1 ffcc 	bl	8000220 <__aeabi_dsub>
 800e288:	4642      	mov	r2, r8
 800e28a:	464b      	mov	r3, r9
 800e28c:	f7f1 ffc8 	bl	8000220 <__aeabi_dsub>
 800e290:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e294:	f7f1 ffc4 	bl	8000220 <__aeabi_dsub>
 800e298:	465c      	mov	r4, fp
 800e29a:	4602      	mov	r2, r0
 800e29c:	e036      	b.n	800e30c <__ieee754_pow+0x79c>
 800e29e:	bf00      	nop
 800e2a0:	4a454eef 	.word	0x4a454eef
 800e2a4:	3fca7e28 	.word	0x3fca7e28
 800e2a8:	93c9db65 	.word	0x93c9db65
 800e2ac:	3fcd864a 	.word	0x3fcd864a
 800e2b0:	a91d4101 	.word	0xa91d4101
 800e2b4:	3fd17460 	.word	0x3fd17460
 800e2b8:	518f264d 	.word	0x518f264d
 800e2bc:	3fd55555 	.word	0x3fd55555
 800e2c0:	db6fabff 	.word	0xdb6fabff
 800e2c4:	3fdb6db6 	.word	0x3fdb6db6
 800e2c8:	33333303 	.word	0x33333303
 800e2cc:	3fe33333 	.word	0x3fe33333
 800e2d0:	e0000000 	.word	0xe0000000
 800e2d4:	3feec709 	.word	0x3feec709
 800e2d8:	dc3a03fd 	.word	0xdc3a03fd
 800e2dc:	3feec709 	.word	0x3feec709
 800e2e0:	145b01f5 	.word	0x145b01f5
 800e2e4:	be3e2fe0 	.word	0xbe3e2fe0
 800e2e8:	7ff00000 	.word	0x7ff00000
 800e2ec:	43400000 	.word	0x43400000
 800e2f0:	0003988e 	.word	0x0003988e
 800e2f4:	000bb679 	.word	0x000bb679
 800e2f8:	0800e8e0 	.word	0x0800e8e0
 800e2fc:	3ff00000 	.word	0x3ff00000
 800e300:	40080000 	.word	0x40080000
 800e304:	0800e8c0 	.word	0x0800e8c0
 800e308:	0800e8d0 	.word	0x0800e8d0
 800e30c:	460b      	mov	r3, r1
 800e30e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e312:	e5d7      	b.n	800dec4 <__ieee754_pow+0x354>
 800e314:	f04f 0a01 	mov.w	sl, #1
 800e318:	e65e      	b.n	800dfd8 <__ieee754_pow+0x468>
 800e31a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800e5ec <__ieee754_pow+0xa7c>)
 800e31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e320:	4630      	mov	r0, r6
 800e322:	4639      	mov	r1, r7
 800e324:	f7f1 ff7e 	bl	8000224 <__adddf3>
 800e328:	4642      	mov	r2, r8
 800e32a:	e9cd 0100 	strd	r0, r1, [sp]
 800e32e:	464b      	mov	r3, r9
 800e330:	4620      	mov	r0, r4
 800e332:	4629      	mov	r1, r5
 800e334:	f7f1 ff74 	bl	8000220 <__aeabi_dsub>
 800e338:	4602      	mov	r2, r0
 800e33a:	460b      	mov	r3, r1
 800e33c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e340:	f7f2 fbb6 	bl	8000ab0 <__aeabi_dcmpgt>
 800e344:	2800      	cmp	r0, #0
 800e346:	f47f ae00 	bne.w	800df4a <__ieee754_pow+0x3da>
 800e34a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800e34e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800e352:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800e356:	fa43 fa0a 	asr.w	sl, r3, sl
 800e35a:	44da      	add	sl, fp
 800e35c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800e360:	489d      	ldr	r0, [pc, #628]	@ (800e5d8 <__ieee754_pow+0xa68>)
 800e362:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800e366:	4108      	asrs	r0, r1
 800e368:	ea00 030a 	and.w	r3, r0, sl
 800e36c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800e370:	f1c1 0114 	rsb	r1, r1, #20
 800e374:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800e378:	fa4a fa01 	asr.w	sl, sl, r1
 800e37c:	f1bb 0f00 	cmp.w	fp, #0
 800e380:	4640      	mov	r0, r8
 800e382:	4649      	mov	r1, r9
 800e384:	f04f 0200 	mov.w	r2, #0
 800e388:	bfb8      	it	lt
 800e38a:	f1ca 0a00 	rsblt	sl, sl, #0
 800e38e:	f7f1 ff47 	bl	8000220 <__aeabi_dsub>
 800e392:	4680      	mov	r8, r0
 800e394:	4689      	mov	r9, r1
 800e396:	4632      	mov	r2, r6
 800e398:	463b      	mov	r3, r7
 800e39a:	4640      	mov	r0, r8
 800e39c:	4649      	mov	r1, r9
 800e39e:	f7f1 ff41 	bl	8000224 <__adddf3>
 800e3a2:	2400      	movs	r4, #0
 800e3a4:	a37c      	add	r3, pc, #496	@ (adr r3, 800e598 <__ieee754_pow+0xa28>)
 800e3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3aa:	4620      	mov	r0, r4
 800e3ac:	460d      	mov	r5, r1
 800e3ae:	f7f2 f8ef 	bl	8000590 <__aeabi_dmul>
 800e3b2:	4642      	mov	r2, r8
 800e3b4:	e9cd 0100 	strd	r0, r1, [sp]
 800e3b8:	464b      	mov	r3, r9
 800e3ba:	4620      	mov	r0, r4
 800e3bc:	4629      	mov	r1, r5
 800e3be:	f7f1 ff2f 	bl	8000220 <__aeabi_dsub>
 800e3c2:	4602      	mov	r2, r0
 800e3c4:	460b      	mov	r3, r1
 800e3c6:	4630      	mov	r0, r6
 800e3c8:	4639      	mov	r1, r7
 800e3ca:	f7f1 ff29 	bl	8000220 <__aeabi_dsub>
 800e3ce:	a374      	add	r3, pc, #464	@ (adr r3, 800e5a0 <__ieee754_pow+0xa30>)
 800e3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d4:	f7f2 f8dc 	bl	8000590 <__aeabi_dmul>
 800e3d8:	a373      	add	r3, pc, #460	@ (adr r3, 800e5a8 <__ieee754_pow+0xa38>)
 800e3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3de:	4680      	mov	r8, r0
 800e3e0:	4689      	mov	r9, r1
 800e3e2:	4620      	mov	r0, r4
 800e3e4:	4629      	mov	r1, r5
 800e3e6:	f7f2 f8d3 	bl	8000590 <__aeabi_dmul>
 800e3ea:	4602      	mov	r2, r0
 800e3ec:	460b      	mov	r3, r1
 800e3ee:	4640      	mov	r0, r8
 800e3f0:	4649      	mov	r1, r9
 800e3f2:	f7f1 ff17 	bl	8000224 <__adddf3>
 800e3f6:	4604      	mov	r4, r0
 800e3f8:	460d      	mov	r5, r1
 800e3fa:	4602      	mov	r2, r0
 800e3fc:	460b      	mov	r3, r1
 800e3fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e402:	f7f1 ff0f 	bl	8000224 <__adddf3>
 800e406:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e40a:	4680      	mov	r8, r0
 800e40c:	4689      	mov	r9, r1
 800e40e:	f7f1 ff07 	bl	8000220 <__aeabi_dsub>
 800e412:	4602      	mov	r2, r0
 800e414:	460b      	mov	r3, r1
 800e416:	4620      	mov	r0, r4
 800e418:	4629      	mov	r1, r5
 800e41a:	f7f1 ff01 	bl	8000220 <__aeabi_dsub>
 800e41e:	4642      	mov	r2, r8
 800e420:	4606      	mov	r6, r0
 800e422:	460f      	mov	r7, r1
 800e424:	464b      	mov	r3, r9
 800e426:	4640      	mov	r0, r8
 800e428:	4649      	mov	r1, r9
 800e42a:	f7f2 f8b1 	bl	8000590 <__aeabi_dmul>
 800e42e:	a360      	add	r3, pc, #384	@ (adr r3, 800e5b0 <__ieee754_pow+0xa40>)
 800e430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e434:	4604      	mov	r4, r0
 800e436:	460d      	mov	r5, r1
 800e438:	f7f2 f8aa 	bl	8000590 <__aeabi_dmul>
 800e43c:	a35e      	add	r3, pc, #376	@ (adr r3, 800e5b8 <__ieee754_pow+0xa48>)
 800e43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e442:	f7f1 feed 	bl	8000220 <__aeabi_dsub>
 800e446:	4622      	mov	r2, r4
 800e448:	462b      	mov	r3, r5
 800e44a:	f7f2 f8a1 	bl	8000590 <__aeabi_dmul>
 800e44e:	a35c      	add	r3, pc, #368	@ (adr r3, 800e5c0 <__ieee754_pow+0xa50>)
 800e450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e454:	f7f1 fee6 	bl	8000224 <__adddf3>
 800e458:	4622      	mov	r2, r4
 800e45a:	462b      	mov	r3, r5
 800e45c:	f7f2 f898 	bl	8000590 <__aeabi_dmul>
 800e460:	a359      	add	r3, pc, #356	@ (adr r3, 800e5c8 <__ieee754_pow+0xa58>)
 800e462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e466:	f7f1 fedb 	bl	8000220 <__aeabi_dsub>
 800e46a:	4622      	mov	r2, r4
 800e46c:	462b      	mov	r3, r5
 800e46e:	f7f2 f88f 	bl	8000590 <__aeabi_dmul>
 800e472:	a357      	add	r3, pc, #348	@ (adr r3, 800e5d0 <__ieee754_pow+0xa60>)
 800e474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e478:	f7f1 fed4 	bl	8000224 <__adddf3>
 800e47c:	4622      	mov	r2, r4
 800e47e:	462b      	mov	r3, r5
 800e480:	f7f2 f886 	bl	8000590 <__aeabi_dmul>
 800e484:	4602      	mov	r2, r0
 800e486:	460b      	mov	r3, r1
 800e488:	4640      	mov	r0, r8
 800e48a:	4649      	mov	r1, r9
 800e48c:	f7f1 fec8 	bl	8000220 <__aeabi_dsub>
 800e490:	4604      	mov	r4, r0
 800e492:	460d      	mov	r5, r1
 800e494:	4602      	mov	r2, r0
 800e496:	460b      	mov	r3, r1
 800e498:	4640      	mov	r0, r8
 800e49a:	4649      	mov	r1, r9
 800e49c:	f7f2 f878 	bl	8000590 <__aeabi_dmul>
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	e9cd 0100 	strd	r0, r1, [sp]
 800e4a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e4aa:	4620      	mov	r0, r4
 800e4ac:	4629      	mov	r1, r5
 800e4ae:	f7f1 feb7 	bl	8000220 <__aeabi_dsub>
 800e4b2:	4602      	mov	r2, r0
 800e4b4:	460b      	mov	r3, r1
 800e4b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e4ba:	f7f2 f993 	bl	80007e4 <__aeabi_ddiv>
 800e4be:	4632      	mov	r2, r6
 800e4c0:	4604      	mov	r4, r0
 800e4c2:	460d      	mov	r5, r1
 800e4c4:	463b      	mov	r3, r7
 800e4c6:	4640      	mov	r0, r8
 800e4c8:	4649      	mov	r1, r9
 800e4ca:	f7f2 f861 	bl	8000590 <__aeabi_dmul>
 800e4ce:	4632      	mov	r2, r6
 800e4d0:	463b      	mov	r3, r7
 800e4d2:	f7f1 fea7 	bl	8000224 <__adddf3>
 800e4d6:	4602      	mov	r2, r0
 800e4d8:	460b      	mov	r3, r1
 800e4da:	4620      	mov	r0, r4
 800e4dc:	4629      	mov	r1, r5
 800e4de:	f7f1 fe9f 	bl	8000220 <__aeabi_dsub>
 800e4e2:	4642      	mov	r2, r8
 800e4e4:	464b      	mov	r3, r9
 800e4e6:	f7f1 fe9b 	bl	8000220 <__aeabi_dsub>
 800e4ea:	460b      	mov	r3, r1
 800e4ec:	4602      	mov	r2, r0
 800e4ee:	493b      	ldr	r1, [pc, #236]	@ (800e5dc <__ieee754_pow+0xa6c>)
 800e4f0:	2000      	movs	r0, #0
 800e4f2:	f7f1 fe95 	bl	8000220 <__aeabi_dsub>
 800e4f6:	ec41 0b10 	vmov	d0, r0, r1
 800e4fa:	ee10 3a90 	vmov	r3, s1
 800e4fe:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e502:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e506:	da30      	bge.n	800e56a <__ieee754_pow+0x9fa>
 800e508:	4650      	mov	r0, sl
 800e50a:	f000 f87d 	bl	800e608 <scalbn>
 800e50e:	ec51 0b10 	vmov	r0, r1, d0
 800e512:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e516:	f7ff bbd2 	b.w	800dcbe <__ieee754_pow+0x14e>
 800e51a:	4c31      	ldr	r4, [pc, #196]	@ (800e5e0 <__ieee754_pow+0xa70>)
 800e51c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e520:	42a3      	cmp	r3, r4
 800e522:	d91a      	bls.n	800e55a <__ieee754_pow+0x9ea>
 800e524:	4b2f      	ldr	r3, [pc, #188]	@ (800e5e4 <__ieee754_pow+0xa74>)
 800e526:	440b      	add	r3, r1
 800e528:	4303      	orrs	r3, r0
 800e52a:	d009      	beq.n	800e540 <__ieee754_pow+0x9d0>
 800e52c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e530:	2200      	movs	r2, #0
 800e532:	2300      	movs	r3, #0
 800e534:	f7f2 fa9e 	bl	8000a74 <__aeabi_dcmplt>
 800e538:	3800      	subs	r0, #0
 800e53a:	bf18      	it	ne
 800e53c:	2001      	movne	r0, #1
 800e53e:	e42b      	b.n	800dd98 <__ieee754_pow+0x228>
 800e540:	4642      	mov	r2, r8
 800e542:	464b      	mov	r3, r9
 800e544:	f7f1 fe6c 	bl	8000220 <__aeabi_dsub>
 800e548:	4632      	mov	r2, r6
 800e54a:	463b      	mov	r3, r7
 800e54c:	f7f2 faa6 	bl	8000a9c <__aeabi_dcmpge>
 800e550:	2800      	cmp	r0, #0
 800e552:	d1eb      	bne.n	800e52c <__ieee754_pow+0x9bc>
 800e554:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800e5f4 <__ieee754_pow+0xa84>
 800e558:	e6f7      	b.n	800e34a <__ieee754_pow+0x7da>
 800e55a:	469a      	mov	sl, r3
 800e55c:	4b22      	ldr	r3, [pc, #136]	@ (800e5e8 <__ieee754_pow+0xa78>)
 800e55e:	459a      	cmp	sl, r3
 800e560:	f63f aef3 	bhi.w	800e34a <__ieee754_pow+0x7da>
 800e564:	f8dd a010 	ldr.w	sl, [sp, #16]
 800e568:	e715      	b.n	800e396 <__ieee754_pow+0x826>
 800e56a:	ec51 0b10 	vmov	r0, r1, d0
 800e56e:	4619      	mov	r1, r3
 800e570:	e7cf      	b.n	800e512 <__ieee754_pow+0x9a2>
 800e572:	491a      	ldr	r1, [pc, #104]	@ (800e5dc <__ieee754_pow+0xa6c>)
 800e574:	2000      	movs	r0, #0
 800e576:	f7ff bb18 	b.w	800dbaa <__ieee754_pow+0x3a>
 800e57a:	2000      	movs	r0, #0
 800e57c:	2100      	movs	r1, #0
 800e57e:	f7ff bb14 	b.w	800dbaa <__ieee754_pow+0x3a>
 800e582:	4630      	mov	r0, r6
 800e584:	4639      	mov	r1, r7
 800e586:	f7ff bb10 	b.w	800dbaa <__ieee754_pow+0x3a>
 800e58a:	460c      	mov	r4, r1
 800e58c:	f7ff bb5e 	b.w	800dc4c <__ieee754_pow+0xdc>
 800e590:	2400      	movs	r4, #0
 800e592:	f7ff bb49 	b.w	800dc28 <__ieee754_pow+0xb8>
 800e596:	bf00      	nop
 800e598:	00000000 	.word	0x00000000
 800e59c:	3fe62e43 	.word	0x3fe62e43
 800e5a0:	fefa39ef 	.word	0xfefa39ef
 800e5a4:	3fe62e42 	.word	0x3fe62e42
 800e5a8:	0ca86c39 	.word	0x0ca86c39
 800e5ac:	be205c61 	.word	0xbe205c61
 800e5b0:	72bea4d0 	.word	0x72bea4d0
 800e5b4:	3e663769 	.word	0x3e663769
 800e5b8:	c5d26bf1 	.word	0xc5d26bf1
 800e5bc:	3ebbbd41 	.word	0x3ebbbd41
 800e5c0:	af25de2c 	.word	0xaf25de2c
 800e5c4:	3f11566a 	.word	0x3f11566a
 800e5c8:	16bebd93 	.word	0x16bebd93
 800e5cc:	3f66c16c 	.word	0x3f66c16c
 800e5d0:	5555553e 	.word	0x5555553e
 800e5d4:	3fc55555 	.word	0x3fc55555
 800e5d8:	fff00000 	.word	0xfff00000
 800e5dc:	3ff00000 	.word	0x3ff00000
 800e5e0:	4090cbff 	.word	0x4090cbff
 800e5e4:	3f6f3400 	.word	0x3f6f3400
 800e5e8:	3fe00000 	.word	0x3fe00000
 800e5ec:	652b82fe 	.word	0x652b82fe
 800e5f0:	3c971547 	.word	0x3c971547
 800e5f4:	4090cc00 	.word	0x4090cc00

0800e5f8 <fabs>:
 800e5f8:	ec51 0b10 	vmov	r0, r1, d0
 800e5fc:	4602      	mov	r2, r0
 800e5fe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e602:	ec43 2b10 	vmov	d0, r2, r3
 800e606:	4770      	bx	lr

0800e608 <scalbn>:
 800e608:	b570      	push	{r4, r5, r6, lr}
 800e60a:	ec55 4b10 	vmov	r4, r5, d0
 800e60e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e612:	4606      	mov	r6, r0
 800e614:	462b      	mov	r3, r5
 800e616:	b991      	cbnz	r1, 800e63e <scalbn+0x36>
 800e618:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e61c:	4323      	orrs	r3, r4
 800e61e:	d03d      	beq.n	800e69c <scalbn+0x94>
 800e620:	4b35      	ldr	r3, [pc, #212]	@ (800e6f8 <scalbn+0xf0>)
 800e622:	4620      	mov	r0, r4
 800e624:	4629      	mov	r1, r5
 800e626:	2200      	movs	r2, #0
 800e628:	f7f1 ffb2 	bl	8000590 <__aeabi_dmul>
 800e62c:	4b33      	ldr	r3, [pc, #204]	@ (800e6fc <scalbn+0xf4>)
 800e62e:	429e      	cmp	r6, r3
 800e630:	4604      	mov	r4, r0
 800e632:	460d      	mov	r5, r1
 800e634:	da0f      	bge.n	800e656 <scalbn+0x4e>
 800e636:	a328      	add	r3, pc, #160	@ (adr r3, 800e6d8 <scalbn+0xd0>)
 800e638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e63c:	e01e      	b.n	800e67c <scalbn+0x74>
 800e63e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e642:	4291      	cmp	r1, r2
 800e644:	d10b      	bne.n	800e65e <scalbn+0x56>
 800e646:	4622      	mov	r2, r4
 800e648:	4620      	mov	r0, r4
 800e64a:	4629      	mov	r1, r5
 800e64c:	f7f1 fdea 	bl	8000224 <__adddf3>
 800e650:	4604      	mov	r4, r0
 800e652:	460d      	mov	r5, r1
 800e654:	e022      	b.n	800e69c <scalbn+0x94>
 800e656:	460b      	mov	r3, r1
 800e658:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e65c:	3936      	subs	r1, #54	@ 0x36
 800e65e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800e662:	4296      	cmp	r6, r2
 800e664:	dd0d      	ble.n	800e682 <scalbn+0x7a>
 800e666:	2d00      	cmp	r5, #0
 800e668:	a11d      	add	r1, pc, #116	@ (adr r1, 800e6e0 <scalbn+0xd8>)
 800e66a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e66e:	da02      	bge.n	800e676 <scalbn+0x6e>
 800e670:	a11d      	add	r1, pc, #116	@ (adr r1, 800e6e8 <scalbn+0xe0>)
 800e672:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e676:	a31a      	add	r3, pc, #104	@ (adr r3, 800e6e0 <scalbn+0xd8>)
 800e678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e67c:	f7f1 ff88 	bl	8000590 <__aeabi_dmul>
 800e680:	e7e6      	b.n	800e650 <scalbn+0x48>
 800e682:	1872      	adds	r2, r6, r1
 800e684:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800e688:	428a      	cmp	r2, r1
 800e68a:	dcec      	bgt.n	800e666 <scalbn+0x5e>
 800e68c:	2a00      	cmp	r2, #0
 800e68e:	dd08      	ble.n	800e6a2 <scalbn+0x9a>
 800e690:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e694:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e698:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e69c:	ec45 4b10 	vmov	d0, r4, r5
 800e6a0:	bd70      	pop	{r4, r5, r6, pc}
 800e6a2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800e6a6:	da08      	bge.n	800e6ba <scalbn+0xb2>
 800e6a8:	2d00      	cmp	r5, #0
 800e6aa:	a10b      	add	r1, pc, #44	@ (adr r1, 800e6d8 <scalbn+0xd0>)
 800e6ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6b0:	dac1      	bge.n	800e636 <scalbn+0x2e>
 800e6b2:	a10f      	add	r1, pc, #60	@ (adr r1, 800e6f0 <scalbn+0xe8>)
 800e6b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6b8:	e7bd      	b.n	800e636 <scalbn+0x2e>
 800e6ba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e6be:	3236      	adds	r2, #54	@ 0x36
 800e6c0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e6c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e6c8:	4620      	mov	r0, r4
 800e6ca:	4b0d      	ldr	r3, [pc, #52]	@ (800e700 <scalbn+0xf8>)
 800e6cc:	4629      	mov	r1, r5
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	e7d4      	b.n	800e67c <scalbn+0x74>
 800e6d2:	bf00      	nop
 800e6d4:	f3af 8000 	nop.w
 800e6d8:	c2f8f359 	.word	0xc2f8f359
 800e6dc:	01a56e1f 	.word	0x01a56e1f
 800e6e0:	8800759c 	.word	0x8800759c
 800e6e4:	7e37e43c 	.word	0x7e37e43c
 800e6e8:	8800759c 	.word	0x8800759c
 800e6ec:	fe37e43c 	.word	0xfe37e43c
 800e6f0:	c2f8f359 	.word	0xc2f8f359
 800e6f4:	81a56e1f 	.word	0x81a56e1f
 800e6f8:	43500000 	.word	0x43500000
 800e6fc:	ffff3cb0 	.word	0xffff3cb0
 800e700:	3c900000 	.word	0x3c900000

0800e704 <with_errno>:
 800e704:	b510      	push	{r4, lr}
 800e706:	ed2d 8b02 	vpush	{d8}
 800e70a:	eeb0 8a40 	vmov.f32	s16, s0
 800e70e:	eef0 8a60 	vmov.f32	s17, s1
 800e712:	4604      	mov	r4, r0
 800e714:	f7ff f872 	bl	800d7fc <__errno>
 800e718:	eeb0 0a48 	vmov.f32	s0, s16
 800e71c:	eef0 0a68 	vmov.f32	s1, s17
 800e720:	ecbd 8b02 	vpop	{d8}
 800e724:	6004      	str	r4, [r0, #0]
 800e726:	bd10      	pop	{r4, pc}

0800e728 <xflow>:
 800e728:	4603      	mov	r3, r0
 800e72a:	b507      	push	{r0, r1, r2, lr}
 800e72c:	ec51 0b10 	vmov	r0, r1, d0
 800e730:	b183      	cbz	r3, 800e754 <xflow+0x2c>
 800e732:	4602      	mov	r2, r0
 800e734:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e738:	e9cd 2300 	strd	r2, r3, [sp]
 800e73c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e740:	f7f1 ff26 	bl	8000590 <__aeabi_dmul>
 800e744:	ec41 0b10 	vmov	d0, r0, r1
 800e748:	2022      	movs	r0, #34	@ 0x22
 800e74a:	b003      	add	sp, #12
 800e74c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e750:	f7ff bfd8 	b.w	800e704 <with_errno>
 800e754:	4602      	mov	r2, r0
 800e756:	460b      	mov	r3, r1
 800e758:	e7ee      	b.n	800e738 <xflow+0x10>
 800e75a:	0000      	movs	r0, r0
 800e75c:	0000      	movs	r0, r0
	...

0800e760 <__math_uflow>:
 800e760:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e768 <__math_uflow+0x8>
 800e764:	f7ff bfe0 	b.w	800e728 <xflow>
 800e768:	00000000 	.word	0x00000000
 800e76c:	10000000 	.word	0x10000000

0800e770 <__math_oflow>:
 800e770:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e778 <__math_oflow+0x8>
 800e774:	f7ff bfd8 	b.w	800e728 <xflow>
 800e778:	00000000 	.word	0x00000000
 800e77c:	70000000 	.word	0x70000000

0800e780 <_init>:
 800e780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e782:	bf00      	nop
 800e784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e786:	bc08      	pop	{r3}
 800e788:	469e      	mov	lr, r3
 800e78a:	4770      	bx	lr

0800e78c <_fini>:
 800e78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e78e:	bf00      	nop
 800e790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e792:	bc08      	pop	{r3}
 800e794:	469e      	mov	lr, r3
 800e796:	4770      	bx	lr
